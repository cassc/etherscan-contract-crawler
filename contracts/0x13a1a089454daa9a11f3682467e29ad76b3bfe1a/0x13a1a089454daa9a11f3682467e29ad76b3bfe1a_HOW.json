{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Homies.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: [EIP721] HOW NFT\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice ERC721 Implementation with:\\n *         Enhanced EIP173 - Ownership via roles\\n *         EIP2981 - NFT Royalties\\n *         PaymentSplitter v2 - For \\\"ETH\\\" payments\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./Max-721-2981-PSv2.sol\\\";\\nimport \\\"./lib/721.sol\\\";\\nimport \\\"./lib/Lists.sol\\\";\\nimport \\\"./lib/CountersV2.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\ncontract HOW is Max721 {\\n\\n  using Lib721 for Lib721.Token;\\n  using Lists for Lists.Access;\\n  using CountersV2 for CountersV2.Counter;\\n\\n  CountersV2.Counter internal theTokenID;\\n\\n  event Claimed(uint256 index, address account, uint256 amount, string what);\\n\\n  constructor(\\n    string memory _name\\n  , string memory _symbol\\n  , address _admin\\n  , address _dev\\n  , address _owner\\n  , uint256 _start\\n  ) {\\n      __Max721_init(_name, _symbol, _admin, _dev, _owner);\\n      theTokenID.set(_start);\\n  }\\n\\n  // set time block\\n  modifier preSale() {\\n    if (block.timestamp < startTime + period && block.timestamp >= startTime) {\\n      _;\\n    } else {\\n    revert Unauthorized();\\n    }\\n  }\\n\\n  modifier Sale() {\\n    if (block.timestamp >= startTime + period) {\\n      _;\\n    } else {\\n    revert Unauthorized();\\n    }\\n  }\\n\\n  function setTime(\\n    uint256 _start\\n  , uint256 _period\\n  ) external\\n    onlyDev() {\\n    startTime = _start;\\n    period = _period;\\n  }\\n\\n  function showTimes()\\n    external\\n    view\\n    returns (uint256, uint256) {\\n    return (startTime, startTime + period);\\n  }\\n\\n  function setCap(\\n    uint256 _amount\\n  ) external\\n    onlyDev() {\\n    maxCap = _amount;\\n  }\\n\\n  function setMerks(\\n    bytes32 _admin\\n  , bytes32 _homies\\n  , bytes32 _normies\\n  ) external\\n    onlyDev() {\\n    admin = _admin;\\n    homies = _homies;\\n    normies = _normies;\\n  }\\n\\n  function isClaimedAdmin(\\n    uint256 index\\n  ) public\\n    view\\n    returns (bool) {\\n    uint256 claimedWordIndex = index / 256;\\n    uint256 claimedBitIndex = index % 256;\\n    uint256 claimedWord = claimedAdmin[claimedWordIndex];\\n    uint256 mask = (1 << claimedBitIndex);\\n    return claimedWord & mask == mask;\\n  }\\n\\n  function isClaimedHomies(\\n    uint256 index\\n  ) public\\n    view\\n    returns (bool) {\\n    uint256 claimedWordIndex = index / 256;\\n    uint256 claimedBitIndex = index % 256;\\n    uint256 claimedWord = claimedHomies[claimedWordIndex];\\n    uint256 mask = (1 << claimedBitIndex);\\n    return claimedWord & mask == mask;\\n  }\\n\\n  function isClaimedNormies(\\n    uint256 index\\n  ) public\\n    view\\n    returns (bool) {\\n    uint256 claimedWordIndex = index / 256;\\n    uint256 claimedBitIndex = index % 256;\\n    uint256 claimedWord = claimedNormies[claimedWordIndex];\\n    uint256 mask = (1 << claimedBitIndex);\\n    return claimedWord & mask == mask;\\n  }\\n\\n  function _setClaimedAdmin(\\n    uint256 index\\n  ) internal {\\n    uint256 claimedWordIndex = index / 256;\\n    uint256 claimedBitIndex = index % 256;\\n    claimedAdmin[claimedWordIndex] = claimedAdmin[claimedWordIndex] | (1 << claimedBitIndex);\\n  }\\n\\n  function _setClaimedHomies(\\n    uint256 index\\n  ) internal {\\n    uint256 claimedWordIndex = index / 256;\\n    uint256 claimedBitIndex = index % 256;\\n    claimedHomies[claimedWordIndex] = claimedHomies[claimedWordIndex] | (1 << claimedBitIndex);\\n  }\\n\\n  function _setClaimedNormies(\\n    uint256 index\\n  ) internal {\\n    uint256 claimedWordIndex = index / 256;\\n    uint256 claimedBitIndex = index % 256;\\n    claimedNormies[claimedWordIndex] = claimedNormies[claimedWordIndex] | (1 << claimedBitIndex);\\n  }\\n\\n  function adminMint(\\n    uint256 index\\n  , address account\\n  , uint256 amount\\n  , bytes32[] calldata merkleProof\\n  ) external\\n    preSale() {\\n    if (startTime == 0) {\\n      revert Unauthorized();\\n    }\\n    if (isClaimedAdmin(index)) {\\n      revert MaxSplaining({\\n        reason: \\\"Already Claimed\\\"\\n      });\\n    }\\n\\n    // Verify the merkle proof.\\n    bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\n    if (!MerkleProof.verify(merkleProof, admin, node)) {\\n      revert MaxSplaining({\\n        reason: \\\"Invalid Proof\\\"\\n      });\\n    }\\n\\n    // Mark it claimed and send the token.\\n    _setClaimedAdmin(index);\\n    if (token721.getSupply() + amount > maxCap) {\\n      revert Unauthorized();\\n    } else {\\n      for (uint c = 0; c < amount;) {\\n        // mint each\\n        token721.mint(account, theTokenID.current());\\n        emit Transfer(address(0), account, theTokenID.current());\\n        theTokenID.increment();\\n        unchecked { ++c; }\\n      }\\n    }\\n    emit Claimed(index, account, amount, \\\"Admin\\\");\\n  }\\n\\n  function homiesMint(\\n    uint256 index\\n  , address account\\n  , bytes32[] calldata merkleProof\\n  ) external\\n    preSale() {\\n    if (startTime == 0) {\\n      revert Unauthorized();\\n    }\\n    if (isClaimedHomies(index)) {\\n      revert MaxSplaining({\\n        reason: \\\"Already Claimed\\\"\\n      });\\n    }\\n\\n    // Verify the merkle proof.\\n    bytes32 node = keccak256(abi.encodePacked(index, account));\\n    if (!MerkleProof.verify(merkleProof, homies, node)) {\\n      revert MaxSplaining({\\n        reason: \\\"Invalid Proof\\\"\\n      });\\n    }\\n\\n    // Mark it claimed and send the token.\\n    _setClaimedHomies(index);\\n    if (token721.getSupply() + 1 > maxCap) {\\n      revert Unauthorized();\\n    } else {\\n      token721.mint(account, theTokenID.current());\\n      emit Transfer(address(0), account, theTokenID.current());\\n      theTokenID.increment();\\n    }\\n    emit Claimed(index, account, 1, \\\"Homies\\\");\\n  }\\n\\n  function normiesMint(\\n    uint256 index\\n  , address account\\n  , bytes32[] calldata merkleProof\\n  ) external\\n    payable\\n    preSale() {\\n    if (startTime == 0) {\\n      revert Unauthorized();\\n    }\\n    if (msg.value != normiesCost) {\\n      revert MaxSplaining ({\\n        reason: \\\"msg.value too low\\\"\\n      });\\n    }\\n    if (isClaimedNormies(index)) {\\n      revert MaxSplaining({\\n        reason: \\\"Already Claimed\\\"\\n      });\\n    }\\n\\n    // Verify the merkle proof.\\n    bytes32 node = keccak256(abi.encodePacked(index, account));\\n    if (!MerkleProof.verify(merkleProof, normies, node)) {\\n      revert MaxSplaining({\\n        reason: \\\"Invalid Proof\\\"\\n      });\\n    }\\n\\n    // Mark it claimed and send the token.\\n    _setClaimedNormies(index);\\n    if (token721.getSupply() + 1 > maxCap) {\\n      revert Unauthorized();\\n    } else {\\n      token721.mint(account, theTokenID.current());\\n      emit Transfer(address(0), account, theTokenID.current());\\n      theTokenID.increment();\\n    }\\n    emit Claimed(index, account, 1, \\\"Normies\\\");\\n  }\\n\\n  function publicMint(\\n    uint256 quant\\n  ) external\\n    payable\\n    Sale() {\\n    if (quant > 5) {\\n      revert Unauthorized();\\n    }\\n    if (startTime == 0) {\\n      revert Unauthorized();\\n    }\\n    if (msg.value != publicCost * quant) {\\n      revert MaxSplaining ({\\n        reason: \\\"msg.value too low\\\"\\n      });\\n    }\\n    if (token721.getSupply() + quant > maxCap) {\\n      revert Unauthorized();\\n    } else {\\n      for (uint c = 0; c < quant;) {\\n        // mint each\\n        token721.mint(msg.sender, theTokenID.current());\\n        emit Transfer(address(0), msg.sender, theTokenID.current());\\n        theTokenID.increment();\\n        unchecked { ++c; }\\n      }\\n    }\\n  }\\n\\n  function setFees(\\n    uint256 _normies\\n  , uint256 _public\\n  ) external\\n    onlyDev() {\\n    normiesCost = _normies;\\n    publicCost = _public;\\n  }\\n\\n  function setContractURI(\\n    string memory newURI\\n  ) external\\n    onlyDev() {\\n    contractURL = newURI;\\n  }\\n\\n  function contractURI()\\n    public\\n    view\\n    returns (string memory) {\\n    return contractURL;\\n  }\\n\\n  function setJSON(\\n    string memory _description\\n  , string memory _image\\n  , string memory _animation\\n  ) external\\n    onlyDev() {\\n    description = _description;\\n    image = _image;\\n    animationURI = _animation;\\n  }\\n\\n  function tokenURI(\\n    uint256 tokenId\\n  ) public\\n    view\\n    virtual\\n    override\\n    returns (string memory) {\\n    bytes memory json = abi.encodePacked(\\n      \\\"{\\\",\\n      '\\\"name\\\": \\\"Homies Genesis #',\\n      Strings.toString(uint256(tokenId)),\\n      '\\\",',\\n      '\\\"description\\\": \\\"',\\n      description,\\n      '\\\",',\\n      '\\\"image\\\": \\\"',\\n      image,\\n      '\\\",',\\n      '\\\"animation_url\\\": \\\"',\\n      animationURI,\\n      '\\\"',\\n      \\\"}\\\"\\n    );\\n\\n    return string(\\n      abi.encodePacked(\\n        \\\"data:application/json;base64,\\\",\\n        Base64.encode(json)\\n      )\\n    );\\n  }\\n\\n  /// @dev Function to receive ether, msg.data must be empty\\n  receive()\\n    external\\n    payable {\\n    // From PaymentSplitter.sol\\n    emit PaymentReceived(msg.sender, msg.value);\\n  }\\n\\n  /// @dev Function to receive ether, msg.data is not empty\\n  fallback()\\n    external\\n    payable {\\n    // From PaymentSplitter.sol\\n    emit PaymentReceived(msg.sender, msg.value);\\n  }\\n\\n  /// @dev this is a public getter for ETH blance on contract\\n  function getBalance()\\n    external\\n    view\\n    returns (uint) {\\n    return address(this).balance;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/splitter/ISplitter.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: [Not an EIP] Payment Splitter, interface for ether payments\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Interface for Payment Splitter\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../eip/165/IERC165.sol\\\";\\n\\ninterface ISplitter is IERC165 {\\n\\n  /// @dev returns total shares\\n  /// @return uint256 of all shares on contract\\n  function totalShares()\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @dev returns shares of an address\\n  /// @param payee address of payee to return\\n  /// @return mapping(address => uint) of _shares\\n  function shares(\\n    address payee\\n  ) external\\n    view\\n    returns (uint256);\\n\\n  /// @dev returns total releases in \\\"eth\\\"\\n  /// @return uint256 of all \\\"eth\\\" released in wei\\n  function totalReleased()\\n    external\\n    view\\n    returns (uint256);\\n\\n  /// @dev returns released \\\"eth\\\" of an payee\\n  /// @param payee address of payee to look up\\n  /// @return mapping(address => uint) of _released\\n  function released(\\n    address payee\\n  ) external\\n    view\\n    returns (uint256);\\n\\n  /// @dev returns amount of \\\"eth\\\" that can be released to payee\\n  /// @param payee address of payee to look up\\n  /// @return uint in wei of \\\"eth\\\" to release\\n  function releasable(\\n    address payee\\n  ) external\\n    view\\n    returns (uint256);\\n\\n  /// @dev returns index number of payee\\n  /// @param payee number of index\\n  /// @return address at _payees[index]\\n  function payeeIndex(\\n    address payee\\n  ) external\\n    view\\n    returns (uint256);\\n\\n  /// @dev this returns the array of payees[]\\n  /// @return address[] payees\\n  function payees()\\n    external\\n    view\\n    returns (address[] memory);\\n\\n  /// @dev this claims all \\\"eth\\\" on contract for msg.sender\\n  function claim()\\n    external;\\n\\n  /// @dev This pays all payees\\n  function payClaims()\\n    external;\\n\\n  /// @dev This adds a payee\\n  /// @param payee Address of payee\\n  /// @param _shares Shares to send user\\n  function addPayee(\\n    address payee\\n  , uint256 _shares\\n  ) external;\\n\\n  /// @dev This removes a payee\\n  /// @param payee Address of payee to remove\\n  /// @dev use payPayees() prior to use if anything is on the contract\\n  function removePayee(\\n    address payee\\n  ) external;\\n\\n  /// @dev This removes all payees\\n  /// @dev use payPayees() prior to use if anything is on the contract\\n  function clearPayees()\\n    external;\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/modules/access/MaxAccess.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: [Not an EIP]: MaxFlow's 173/Dev/Roles Interface\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Interface for MaxAccess\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IMAX173.sol\\\";\\nimport \\\"./IMAXDEV.sol\\\";\\nimport \\\"./IRoles.sol\\\";\\n\\ninterface MaxAccess is IMAX173\\n                     , IMAXDEV\\n                     , IRoles {\\n\\n  ///@dev this just imports all 3 and pushes to Implementation\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/access/IRoles.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: [Not an EIP]: Contract Roles Standard\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Interface for MaxAccess version of Roles\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../eip/165/IERC165.sol\\\";\\n\\ninterface IRoles is IERC165 {\\n\\n  /// @dev Returns `true` if `account` has been granted `role`.\\n  /// @param role: Bytes4 of a role\\n  /// @param account: Address to check\\n  /// @return bool true/false if account has role\\n  function hasRole(\\n    bytes4 role\\n  , address account\\n  ) external\\n    view\\n    returns (bool);\\n\\n  /// @dev Returns the admin role that controls a role\\n  /// @param role: Role to check\\n  /// @return admin role\\n  function getRoleAdmin(\\n    bytes4 role\\n  ) external\\n    view \\n    returns (bytes4);\\n\\n  /// @dev Grants `role` to `account`\\n  /// @param role: Bytes4 of a role\\n  /// @param account: account to give role to\\n  function grantRole(\\n    bytes4 role\\n  , address account\\n  ) external;\\n\\n  /// @dev Revokes `role` from `account`\\n  /// @param role: Bytes4 of a role\\n  /// @param account: account to revoke role from\\n  function revokeRole(\\n    bytes4 role\\n  , address account\\n  ) external;\\n\\n  /// @dev Renounces `role` from `account`\\n  /// @param role: Bytes4 of a role\\n  function renounceRole(\\n    bytes4 role\\n  ) external;\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/modules/access/IMAXDEV.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#* \\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=: \\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%* \\n *\\n * @title: [Not an EIP]: Contract Developer Standard\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Interface for onlyDev() role\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../eip/165/IERC165.sol\\\";\\n\\ninterface IMAXDEV is IERC165 {\\n\\n  /// @dev Classic \\\"EIP-173\\\" but for onlyDev()\\n  /// @return Developer of contract\\n  function developer()\\n    external\\n    view\\n    returns (address);\\n\\n  /// @dev This renounces your role as onlyDev()\\n  function renounceDeveloper()\\n    external;\\n\\n  /// @dev Classic \\\"EIP-173\\\" but for onlyDev()\\n  /// @param newDeveloper: addres of new pending Developer role\\n  function transferDeveloper(\\n    address newDeveloper\\n  ) external;\\n\\n  /// @dev This accepts the push-pull method of onlyDev()\\n  function acceptDeveloper()\\n    external;\\n\\n  /// @dev This declines the push-pull method of onlyDev()\\n  function declineDeveloper()\\n    external;\\n\\n  /// @dev This starts the push-pull method of onlyDev()\\n  /// @param newDeveloper: addres of new pending developer role\\n  function pushDeveloper(\\n    address newDeveloper\\n  ) external;\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/modules/access/IMAX173.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#* \\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=: \\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%* \\n *\\n * @title:  EIP-173: Contract Ownership Standard, MaxFlowO2's extension\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Interface for enhancing EIP-173\\n * @custom:change-log UUPS Upgradable\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../eip/173/IERC173.sol\\\";\\n\\ninterface IMAX173 is IERC173 {\\n\\n  /// @dev This is the classic \\\"EIP-173\\\" method of renouncing onlyOwner()  \\n  function renounceOwnership()\\n    external;\\n\\n  /// @dev This accepts the push-pull method of onlyOwner()\\n  function acceptOwnership()\\n    external;\\n\\n  /// @dev This declines the push-pull method of onlyOwner()\\n  function declineOwnership()\\n    external;\\n\\n  /// @dev This starts the push-pull method of onlyOwner()\\n  /// @param newOwner: addres of new pending owner role\\n  function pushOwnership(\\n    address newOwner\\n  ) external;\\n\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/modules/2981/IERC2981Admin.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: EIP-2981: NFT Royalty Standard, admin extension\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: the ERC-165 identifier for this interface is unknown.\\n * @custom:source https://eips.ethereum.org/EIPS/eip-2981\\n * @custom:change-log MIT -> Apache-2.0\\n *\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright and related rights waived via CC0.                               *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../eip/2981/IERC2981.sol\\\";\\n\\ninterface IERC2981Admin is IERC2981 {\\n\\n  /// @dev function (state storage) sets the royalty data for a token\\n  /// @param tokenId uint256 for the token\\n  /// @param receiver address for the royalty reciever for token\\n  /// @param permille uint16 for the permille of royalties 20 -> 2.0%\\n  function setRoyalties(\\n    uint256 tokenId\\n  , address receiver\\n  , uint16 permille\\n  ) external;\\n\\n  /// @dev function (state storage) revokes the royalty data for a token\\n  /// @param tokenId uint256 for the token\\n  function revokeRoyalties(\\n    uint256 tokenId\\n  ) external;\\n\\n  /// @dev function (state storage) sets the royalty data for a collection\\n  /// @param receiver address for the royalty reciever for token\\n  /// @param permille uint16 for the permille of royalties 20 -> 2.0%\\n  function setRoyalties(\\n    address receiver\\n  , uint16 permille\\n  ) external;\\n\\n  /// @dev function (state storage) revokes the royalty data for a collection\\n  function revokeRoyalties()\\n    external;\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Strings.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: Strings\\n * @author: OpenZeppelin\\n * @notice: Strings Library\\n * @custom:source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v4.7.3/contracts/utils/StringsUpgradeable.sol\\n * @custom:change-log Readable, External/Public, Removed code comments, MIT -> Apache-2.0\\n * @custom:change-log Added MaxSplaining\\n * @custom:error-code Str:1 \\\"hex length insufficient\\\"\\n *\\n * Include with 'using Strings for <insert type>'\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Strings {\\n\\n  bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n  uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n  error MaxSplaining(string reason);\\n\\n  function toString(\\n    uint256 value\\n  ) internal\\n    pure\\n    returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toHexString(\\n    uint256 value\\n  ) internal\\n    pure\\n    returns (string memory) {\\n    if (value == 0) {\\n      return \\\"0x00\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexString(value, length);\\n  }\\n\\n  function toHexString(\\n    uint256 value\\n  , uint256 length\\n  ) internal\\n    pure\\n    returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = \\\"0\\\";\\n    buffer[1] = \\\"x\\\";\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    if (value != 0) {\\n      revert MaxSplaining({\\n        reason: \\\"Str:1\\\"\\n      });\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toHexString(\\n    address addr\\n  ) internal\\n    pure\\n    returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n  }\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/lib/Roles.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: Roles.sol\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Library for MaxAcess.sol\\n * @custom:change-log cleaned up variables\\n *\\n * Include with 'using Roles for Roles.Role;'\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Roles {\\n\\n  bytes4 constant internal DEVS = 0xca4b208b;\\n  bytes4 constant internal OWNERS = 0x8da5cb5b;\\n  bytes4 constant internal ADMIN = 0xf851a440;\\n\\n  struct Role {\\n    mapping(address => mapping(bytes4 => bool)) bearer;\\n    address owner;\\n    address developer;\\n    address admin;\\n  }\\n\\n  event RoleChanged(bytes4 _role, address _user, bool _status);\\n  event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n  event DeveloperTransferred(address indexed previousDeveloper, address indexed newDeveloper);\\n\\n  error Unauthorized();\\n\\n  function add(\\n    Role storage role\\n  , bytes4 userRole\\n  , address account\\n  ) internal {\\n    if (account == address(0)) {\\n      revert Unauthorized();\\n    } else if (has(role, userRole, account)) {\\n      revert Unauthorized();\\n    }\\n    role.bearer[account][userRole] = true;\\n    emit RoleChanged(userRole, account, true);\\n  }\\n\\n  function remove(\\n    Role storage role\\n  , bytes4 userRole\\n  , address account\\n  ) internal {\\n    if (account == address(0)) {\\n      revert Unauthorized();\\n    } else if (!has(role, userRole, account)) {\\n      revert Unauthorized();\\n    }\\n    role.bearer[account][userRole] = false;\\n    emit RoleChanged(userRole, account, false);\\n  }\\n\\n  function has(\\n    Role storage role\\n  , bytes4  userRole\\n  , address account\\n  ) internal\\n    view\\n    returns (bool) {\\n    if (account == address(0)) {\\n      revert Unauthorized();\\n    }\\n    return role.bearer[account][userRole];\\n  }\\n\\n  function setAdmin(\\n    Role storage role\\n  , address account\\n  ) internal {\\n    if (has(role, ADMIN, account)) {\\n      address old = role.admin;\\n      role.admin = account;\\n      emit AdminTransferred(old, role.admin);\\n    } else if (account == address(0)) {\\n      address old = role.admin;\\n      role.admin = account;\\n      emit AdminTransferred(old, role.admin);\\n    } else {\\n      revert Unauthorized();\\n    }\\n  }\\n\\n  function setDeveloper(\\n    Role storage role\\n  , address account\\n  ) internal {\\n    if (has(role, DEVS, account)) {\\n      address old = role.developer;\\n      role.developer = account;\\n      emit DeveloperTransferred(old, role.developer);\\n    } else if (account == address(0)) {\\n      address old = role.admin;\\n      role.admin = account;\\n      emit AdminTransferred(old, role.admin);\\n    } else {\\n      revert Unauthorized();\\n    }\\n  }\\n\\n  function setOwner(\\n    Role storage role\\n  , address account\\n  ) internal {\\n    if (has(role, OWNERS, account)) {\\n      address old = role.owner;\\n      role.owner = account;\\n      emit OwnershipTransferred(old, role.owner);\\n    } else if (account == address(0)) {\\n      address old = role.admin;\\n      role.admin = account;\\n      emit AdminTransferred(old, role.admin);\\n    } else {\\n      revert Unauthorized();\\n    }\\n  }\\n\\n  function getAdmin(\\n    Role storage role\\n  ) internal \\n    view\\n    returns (address) {\\n    return role.admin;\\n  }\\n\\n  function getDeveloper(\\n    Role storage role\\n  ) internal\\n    view\\n    returns (address) {\\n    return role.developer;\\n  }\\n\\n  function getOwner(\\n    Role storage role\\n  ) internal\\n    view\\n    returns (address) {\\n    return role.owner;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Payments.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: [Not an EIP] Payment Splitter\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Library for two structs one with \\\"ERC-20's\\\" and one without\\n * @custom:error-code PS:1 No Shares for address\\n * @custom:error-code PS:2 No payment due for address\\n * @custom:error-code PS:3 Can not use address(0)\\n * @custom:error-code PS:4 Shares can not be 0\\n * @custom:error-code PS:5 User has shares already\\n * @custom:error-code PS:6 User not in payees\\n * @custom:change-log added custom error-codes above\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Payments {\\n\\n  struct GasTokens {\\n    uint256 totalShares;\\n    uint256 totalReleased;\\n    mapping(address => uint256) shares;\\n    mapping(address => uint256) released;\\n    address[] payees;\\n  }\\n\\n  event PayeeAdded(address account, uint256 _shares);\\n  event PayeeRemoved(address account, uint256 _shares);\\n  event PayeesReset();\\n  event PaymentReleased(address to, uint256 amount);\\n\\n  error MaxSplaining(string reason);\\n\\n  function findIndex(\\n    address[] memory array\\n  , address query\\n  ) internal\\n    pure\\n    returns (bool found, uint256 index) {\\n    uint256 len = array.length;\\n    for (uint x = 0; x < len;) {\\n      if (array[x] == query) {\\n        found = true;\\n        index = x;\\n      }\\n      unchecked { ++x; }\\n    }\\n  }\\n\\n  function getTotalReleased(\\n    GasTokens storage gasTokens\\n  ) internal\\n    view\\n    returns (uint256) {\\n    return gasTokens.totalReleased;\\n  }\\n\\n  function getTotalShares(\\n    GasTokens storage gasTokens\\n  ) internal\\n    view\\n    returns (uint256) {\\n    return gasTokens.totalShares;\\n  }\\n\\n  function payeeShares(\\n    GasTokens storage gasTokens\\n  , address payee\\n  ) internal\\n    view\\n    returns (uint256) {\\n    return gasTokens.shares[payee];\\n  }\\n\\n  function payeeReleased(\\n    GasTokens storage gasTokens\\n  , address payee\\n  ) internal\\n    view\\n    returns (uint256) {\\n    return gasTokens.released[payee];\\n  }\\n\\n  function payeeIndex(\\n    GasTokens storage gasTokens\\n  , address payee\\n  ) internal\\n    view\\n    returns (uint256) {\\n    (bool found, uint256 index) = findIndex(gasTokens.payees, payee);\\n    if (found) {\\n      return index;\\n    } else {\\n      revert MaxSplaining({\\n        reason: \\\"PS:6\\\"\\n      });\\n    }\\n  }\\n\\n  function allPayees(\\n    GasTokens storage gasTokens\\n  ) internal\\n    view\\n    returns (address[] memory) {\\n    return gasTokens.payees;\\n  }\\n\\n  function addPayee(\\n    GasTokens storage gasTokens\\n  , address payee\\n  , uint256 _shares\\n  ) internal {\\n    if (payee == address(0)) {\\n      revert MaxSplaining({\\n        reason: \\\"PS:3\\\"\\n      });\\n    } else if (_shares == 0) {\\n      revert MaxSplaining({\\n        reason: \\\"PS:4\\\"\\n      });\\n    } else if (gasTokens.shares[payee] > 0) {\\n      revert MaxSplaining({\\n        reason: \\\"PS:5\\\"\\n      });\\n    }\\n    gasTokens.payees.push(payee);\\n    gasTokens.shares[payee] = _shares;\\n    gasTokens.totalShares += _shares;\\n    emit PayeeAdded(payee, _shares);\\n  }\\n\\n  function getPayees(\\n    GasTokens storage gasTokens\\n  ) internal\\n    view\\n    returns (address[] memory) {\\n    return gasTokens.payees;\\n  }\\n\\n  function removePayee(\\n    GasTokens storage gasTokens\\n  , address payee\\n  ) internal {\\n    if (payee == address(0)) {\\n      revert MaxSplaining({\\n        reason: \\\"PS:3\\\"\\n      });\\n    }\\n    uint256 whacked = payeeIndex(gasTokens, payee);\\n    address last = gasTokens.payees[gasTokens.payees.length -1];\\n    gasTokens.payees[whacked] = last;\\n    gasTokens.payees.pop();\\n    uint256 whackedShares = gasTokens.shares[payee];\\n    delete gasTokens.shares[payee];\\n    gasTokens.totalShares -= whackedShares;\\n    emit PayeeRemoved(payee, whackedShares);\\n  }\\n\\n  function clearPayees(\\n    GasTokens storage gasTokens\\n  ) internal {\\n    uint256 len = gasTokens.payees.length;\\n    for (uint x = 0; x < len;) {\\n      address whacked = gasTokens.payees[x];\\n      delete gasTokens.shares[whacked];\\n      unchecked { ++x; }\\n    }\\n    delete gasTokens.totalShares;\\n    delete gasTokens.payees;\\n    emit PayeesReset();\\n  }\\n\\n  function processPayment(\\n    GasTokens storage gasTokens\\n  , address payee\\n  , uint256 payment\\n  ) internal {\\n    gasTokens.totalReleased += payment;\\n    gasTokens.released[payee] += payment;\\n    emit PaymentReleased(payee, payment);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Lists.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: [Not an EIP]: Access lists\\n * @author: @MaxFlowO2 on bird app/GitHub\\n * @notice: Formerly whitelists, now allowlist, or whatever it's called.\\n * @custom:change-log removed end variable/functions (un-needed)\\n * @custom:change-log variables renamed from lib whitelist\\n * @custom:change-log internal -> internal\\n * @custom:error-code A:1 \\\"(user) is already whitelisted.\\\"\\n * @custom:error-code A:2 \\\"(user) is not whitelisted.\\\"\\n * @custom:error-code A:3 \\\"Whitelist already enabled.\\\"\\n * @custom:error-code A:4 \\\"Whitelist already disabled.\\\"\\n * @custom:change-log added custom error codes\\n * @custom:change-log removed import \\\"./Strings.sol\\\"; (un-needed)\\n *\\n * Include with 'using Lists for Lists.Access;'\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./CountersV2.sol\\\";\\n\\nlibrary Lists {\\n\\n  using CountersV2 for CountersV2.Counter;\\n\\n  event ListChanged(bool _old, bool _new, address _address);\\n  event ListStatus(bool _old, bool _new);\\n\\n  error MaxSplaining(string reason);\\n\\n  struct Access {\\n    bool _status;\\n    CountersV2.Counter added;\\n    CountersV2.Counter removed;\\n    mapping(address => bool) allowed;\\n  }\\n\\n  function add(\\n    Access storage list\\n  , address user\\n  ) internal {\\n    if (list.allowed[user]) {\\n      revert  MaxSplaining({\\n        reason : \\\"A:1\\\"\\n      });\\n    }\\n    // since now all previous values are false no need for another variable\\n    // and add them to the list!\\n    list.allowed[user] = true;\\n    // increment counter\\n    list.added.increment();\\n    // emit event\\n    emit ListChanged(false, list.allowed[user], user);\\n  }\\n\\n  function remove(\\n    Access storage list\\n  , address user\\n  ) internal {\\n    if (!list.allowed[user]) {\\n      revert  MaxSplaining({\\n        reason : \\\"A:2\\\"\\n      });\\n    }\\n    // since now all previous values are true no need for another variable\\n    // and remove them from the list!\\n    list.allowed[user] = false;\\n    // increment counter\\n    list.removed.increment();\\n    // emit event\\n    emit ListChanged(true, list.allowed[user], user);\\n  }\\n\\n  function enable(\\n    Access storage list\\n  ) internal {\\n    if (list._status) {\\n      revert  MaxSplaining({\\n        reason : \\\"A:3\\\"\\n      });\\n    }\\n    list._status = true;\\n    emit ListStatus(false, list._status);\\n  }\\n\\n  function disable(\\n    Access storage list\\n  ) internal {\\n    if (!list._status) {\\n      revert  MaxSplaining({\\n        reason : \\\"A:4\\\"\\n      });\\n    }\\n    list._status = false;\\n    emit ListStatus(true, list._status);\\n  }\\n\\n  function status(\\n    Access storage list\\n  ) internal\\n    view\\n    returns (bool) {\\n    return list._status;\\n  }\\n\\n  function totalAdded(\\n    Access storage list\\n  ) internal\\n    view\\n    returns (uint) {\\n    return list.added.current();\\n  }\\n\\n  function totalRemoved(\\n    Access storage list\\n  ) internal\\n    view\\n    returns (uint) {\\n    return list.removed.current();\\n  }\\n\\n  function onList(\\n    Access storage list\\n  , address user\\n  ) internal\\n    view\\n    returns (bool) {\\n    return list.allowed[user];\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/CountersV2.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: CountersV2.sol\\n * @author Matt Condon (@shrugs)\\n * @notice Provides counters that can only be incremented, decremented, reset or set. \\n * This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids\\n * or counting request ids.\\n * @custom:change-log MIT -> Apache-2.0\\n * @custom:change-log Edited for more NFT functionality added .set(uint)\\n * @custom:change-log added event CounterNumberChangedTo(uint _number).\\n * @custom:change-log added error MaxSplaining(string reason).\\n * @custom:change-log internal -> internal functions\\n * @custom:error-code C2:1 \\\"No negatives in uints\\\" - overflow protection\\n *\\n * Include with `using CountersV2 for CountersV2.Counter;`\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary CountersV2 {\\n\\n  struct Counter {\\n    uint256 value;\\n  }\\n\\n  event CounterNumberChangedTo(uint _number);\\n\\n  error MaxSplaining(string reason);\\n\\n  function current(\\n    Counter storage counter\\n  ) internal\\n    view\\n    returns (uint256) {\\n    return counter.value;\\n  }\\n\\n  function increment(\\n    Counter storage counter\\n  ) internal {\\n    unchecked {\\n      ++counter.value;\\n    }\\n  }\\n\\n  function decrement(\\n    Counter storage counter\\n  ) internal {\\n    if (counter.value == 0) {\\n      revert MaxSplaining({\\n        reason : \\\"C2:1\\\"\\n      });\\n    }\\n    unchecked {\\n      --counter.value;\\n    }\\n  }\\n\\n  function reset(\\n    Counter storage counter\\n  ) internal {\\n    counter.value = 0;\\n    emit CounterNumberChangedTo(counter.value);\\n  }\\n\\n  function set(\\n    Counter storage counter\\n  , uint number\\n  ) internal {\\n    counter.value = number;\\n    emit CounterNumberChangedTo(counter.value);\\n  }  \\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @notice : Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @notice : Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @notice : Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @notice : Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @notice : Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @notice : Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @notice : Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @notice : Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @notice : Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @notice : Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @notice : Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @notice : Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @notice : Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/lib/721.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: Library 721\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Library for EIP 721\\n * @custom:error-code L:1 \\\"non-existent tokenId\\\" \\n * @custom:error-code L:2 \\\"approval to current owner\\\"\\n * @custom:error-code L:3 \\\"approve caller is not token owner nor approved for all\\\"\\n * @custom:error-code L:4 \\\"approve to caller\\\"\\n * @custom:error-code L:5 \\\"caller is not token owner nor approved\\\"\\n * @custom:error-code L:6 \\\"transfer from incorrect owner\\\"\\n * @custom:error-code L:7 \\\"transfer to the zero address\\\"\\n * @custom:error-code L:8 \\\"mint to the zero address\\\"\\n * @custom:error-code L:9 \\\"token already minted\\\"\\n * @custom:change-log Custom errors added above\\n *\\n * Include with 'using Lib721 for Lib721.Token;'\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./CountersV2.sol\\\";\\n\\nlibrary Lib721 {\\n\\n  using Strings for uint256;\\n  using CountersV2 for CountersV2.Counter;\\n\\n  struct Token {\\n    mapping(uint256 => address) owners;\\n    mapping(address => uint256) balances;\\n    mapping(uint256 => address) tokenApprovals;\\n    mapping(address => mapping(address => bool)) operatorApprovals;\\n    string name;\\n    string symbol;\\n    string baseURI;\\n    CountersV2.Counter supply;\\n  }\\n\\n  event NameSet(string name);\\n  event SymbolSet(string symbol);\\n  event NewBaseURI(string baseURI);\\n\\n  error MaxSplaining(string reason);\\n\\n  function getBalanceOf(\\n    Token storage token\\n  , address owner\\n  ) internal\\n    view\\n    returns (uint256) {\\n    return token.balances[owner];\\n  }\\n\\n  function getOwnerOf(\\n    Token storage token\\n  , uint256 tokenId\\n  ) internal \\n    view\\n    returns (address) {\\n    return token.owners[tokenId];\\n  }\\n\\n  function setName(\\n    Token storage token\\n  , string memory newName\\n  ) internal {\\n    token.name = newName;\\n    emit NameSet(newName);\\n  }\\n\\n  function getName(\\n   Token storage token\\n  ) internal\\n    view\\n    returns (string memory) {\\n    return token.name;\\n  }\\n\\n  function setSymbol(\\n    Token storage token\\n  , string memory newSymbol\\n  ) internal {\\n    token.symbol = newSymbol;\\n    emit SymbolSet(newSymbol);\\n  }\\n\\n  function getSymbol(\\n   Token storage token\\n  ) internal\\n    view\\n    returns (string memory) {\\n    return token.symbol;\\n  }\\n\\n  function getSupply(\\n   Token storage token\\n  ) internal\\n    view\\n    returns (uint256) {\\n    return token.supply.current();\\n  }\\n\\n  function setBaseURI(\\n    Token storage token\\n  , string memory newURI\\n  ) internal {\\n    token.baseURI = newURI;\\n    emit NewBaseURI(newURI);\\n  }\\n\\n  function getTokenURI(\\n    Token storage token\\n  , uint256 tokenId\\n  ) internal\\n    view\\n    returns (string memory) {\\n    if (getOwnerOf(token, tokenId) == address(0)) {\\n      revert MaxSplaining({\\n        reason: \\\"L:1\\\"\\n      });\\n    }\\n    return bytes(token.baseURI).length > 0 ? string(abi.encodePacked(token.baseURI, tokenId.toString())) : \\\"\\\";\\n  }\\n\\n  function setApprove(\\n    Token storage token\\n  , address to\\n  , address by\\n  , uint256 tokenId\\n  ) internal {\\n    address owner = getOwnerOf(token, tokenId);\\n    if (to == owner) {\\n      revert MaxSplaining({\\n        reason: \\\"L:2\\\"\\n      });\\n    } else if (!isApprovedOrOwner(token, by, tokenId)) {\\n      revert MaxSplaining({\\n        reason: \\\"L:3\\\"\\n      });\\n    }\\n    token.tokenApprovals[tokenId] = to;\\n  }\\n\\n  function getApproved(\\n    Token storage token\\n  , uint256 tokenId\\n  ) internal\\n    view\\n    returns (address) {\\n    if (getOwnerOf(token, tokenId) == address(0)) {\\n      revert MaxSplaining({\\n        reason: \\\"L:1\\\"\\n      });\\n    }\\n    return token.tokenApprovals[tokenId];\\n  }\\n\\n  function setApprovalForAll(\\n    Token storage token\\n  , address operator\\n  , address from\\n  , bool approved\\n  ) internal {\\n    if (from == operator) {\\n      revert MaxSplaining({\\n        reason: \\\"L:4\\\"\\n      });\\n    }\\n    token.operatorApprovals[from][operator] = approved;\\n  }\\n\\n  function isApprovedForAll(\\n    Token storage token\\n  , address owner\\n  , address operator\\n  ) internal\\n    view\\n    returns (bool) {\\n    return token.operatorApprovals[owner][operator];\\n  }\\n\\n  function isApprovedOrOwner(\\n    Token storage token\\n  , address spender\\n  , uint256 tokenId\\n  ) internal\\n    view\\n    returns (bool) {\\n    address owner = getOwnerOf(token, tokenId);\\n    return (\\n      spender == owner ||\\n      isApprovedForAll(token, owner, spender) ||\\n      getApproved(token, tokenId) == spender\\n    );\\n  }\\n\\n  function doTransferFrom(\\n    Token storage token\\n  , address from\\n  , address to\\n  , address by\\n  , uint256 tokenId\\n  ) internal {\\n    if (!isApprovedOrOwner(token, by, tokenId)) {\\n      revert MaxSplaining({\\n        reason: \\\"L:5\\\"\\n      });\\n    }\\n    address owner = getOwnerOf(token, tokenId);\\n    if (owner != from) {\\n      revert MaxSplaining({\\n        reason: \\\"L:6\\\"\\n      });\\n    } else if (to == address(0)) {\\n      revert MaxSplaining({\\n        reason: \\\"L:7\\\"\\n      });\\n    }\\n    // Clear approvals from the previous owner\\n    setApprove(token, address(0), by, tokenId);\\n    // Change balances\\n    token.balances[from] -= 1;\\n    token.balances[to] += 1;\\n    // Move tokenId\\n    token.owners[tokenId] = to;\\n  }\\n\\n  function mint(\\n    Token storage token\\n  , address to\\n  , uint256 tokenId\\n  ) internal {\\n    if (to == address(0)) {\\n      revert MaxSplaining({\\n        reason: \\\"L:8\\\"\\n      });\\n    } else if (getOwnerOf(token, tokenId) != address(0)) {\\n      revert MaxSplaining({\\n        reason: \\\"L:9\\\"\\n      });\\n    }\\n    token.balances[to] += 1;\\n    token.owners[tokenId] = to;\\n    token.supply.increment();\\n  }\\n\\n  function burn(\\n    Token storage token\\n  , address by\\n  , uint256 tokenId\\n  ) internal {\\n    address owner = getOwnerOf(token, tokenId);\\n    // Clear approvals\\n    setApprove(token, address(0), by, tokenId);\\n    // Change balances\\n    token.balances[owner] -= 1;\\n    delete token.owners[tokenId];\\n    token.supply.decrement();\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/2981c.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: Library 2981\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice: Library for EIP 2981\\n * @custom:error-code R:1 Permille out of bounds\\n * @custom:change-log Custom errors added above\\n *\\n * Include with 'using Lib2981 for Lib2981.Royalties;' -- unique per collection\\n * Include with 'using Lib2981 for Lib2981.MappedRoyalties;' -- unique per token\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Lib2981c {\\n\\n  struct Royalties {\\n    address receiver;\\n    uint16 permille;\\n  }\\n\\n  event RoyaltiesSet(uint256 token, address recipient, uint16 value);\\n  event RoyaltiesSet(address recipient, uint16 value);\\n\\n  error MaxSplaining(string reason);\\n\\n  function setRoyalties(\\n    Royalties storage royalties\\n  , address receiver\\n  , uint16 permille\\n  ) internal {\\n    if (permille >= 1000 ||  permille == 0) {\\n      revert MaxSplaining({\\n        reason: \\\"R:1\\\"\\n      });\\n    }\\n    royalties.receiver = receiver;\\n    royalties.permille = permille;\\n    emit RoyaltiesSet(\\n           royalties.receiver\\n         , royalties.permille\\n         );\\n  }\\n\\n  function revokeRoyalties(\\n    Royalties storage royalties\\n  ) internal {\\n    delete royalties.receiver;\\n    delete royalties.permille;\\n    emit RoyaltiesSet(\\n           royalties.receiver\\n         , royalties.permille\\n         );\\n  }\\n\\n  function royaltyInfo(\\n    Royalties storage royalties\\n  , uint256 tokenId\\n  , uint256 salePrice\\n  ) internal\\n    view\\n    returns (\\n      address receiver\\n    , uint256 royaltyAmount\\n    ) {\\n    receiver = royalties.receiver;\\n    royaltyAmount = salePrice * royalties.permille / 1000;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/eip/721/IERC721TokenReceiver.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: ERC-721 Non-Fungible Token Standard, required wallet interface\\n * @author: William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n * @notice: the ERC-165 identifier for this interface is 0x150b7a02.\\n * @custom:source https://eips.ethereum.org/EIPS/eip-721\\n * @custom:change-log interface ERC721TokenReceiver -> interface IERC721TokenReceiver\\n * @custom:change-log readability enhanced\\n * @custom:change-log MIT -> Apache-2.0\\n * @custom:change-log TypeError: Data location must be \\\"memory\\\" or \\\"calldata\\\" for parameter (line 60)\\n *\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright and related rights waived via CC0.                               *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../165/IERC165.sol\\\";\\n\\ninterface IERC721TokenReceiver is IERC165 {\\n\\n  /// @notice Handle the receipt of an NFT\\n  /// @notice The ERC721 smart contract calls this function on the recipient\\n  ///  after a `transfer`. This function MAY throw to revert and reject the\\n  ///  transfer. Return of other than the magic value MUST result in the\\n  ///  transaction being reverted.\\n  ///  Note: the contract address is always the message sender.\\n  /// @param _operator The address which called `safeTransferFrom` function\\n  /// @param _from The address which previously owned the token\\n  /// @param _tokenId The NFT identifier which is being transferred\\n  /// @param _data Additional data with no specified format\\n  /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n  ///  unless throwing\\n  function onERC721Received(\\n    address _operator\\n  , address _from\\n  , uint256 _tokenId\\n  , bytes calldata _data\\n  ) external\\n    returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"/contracts/eip/721/IERC721Metadata.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @author: William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n * @notice: the ERC-165 identifier for this interface is 0x5b5e139f.\\n * @custom:source https://eips.ethereum.org/EIPS/eip-721\\n * @custom:change-log interface ERC721Metadata * is ERC721 * -> interface IERC721Metadata\\n * @custom:change-log readability enhanced\\n * @custom:change-log MIT -> Apache-2.0\\n * @custom:change-log  Data location must be \\\"memory\\\" or \\\"calldata\\\" for return parameter (lines 48, 54, 64)\\n *\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright and related rights waived via CC0.                               *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface IERC721Metadata is IERC721 {\\n\\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name()\\n    external\\n    view\\n    returns (string memory _name);\\n\\n  /// @notice An abbreviated name for NFTs in this contract\\n  function symbol()\\n    external\\n    view\\n    returns (string memory _symbol);\\n\\n  /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n  /// @notice Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n  ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n  ///  Metadata JSON Schema\\\".\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external\\n    view\\n    returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/eip/721/IERC721.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: ERC-721 Non-Fungible Token Standard\\n * @author: William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n * @notice: the ERC-165 identifier for this interface is 0x80ac58cd.\\n * @custom:source https://eips.ethereum.org/EIPS/eip-721\\n * @custom:change-log interface ERC721 * is ERC165 * -> interface IERC721\\n * @custom:change-log removed payable from IERC721 \\n * @custom:change-log removed events from IERC721 (handled in Lib721)\\n * @custom:change-log readability enhanced\\n * @custom:change-log MIT -> Apache-2.0\\n * @custom:change-log TypeError: Data location must be \\\"memory\\\" or \\\"calldata\\\" for parameter (line 84)\\n *\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright and related rights waived via CC0.                               *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../165/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n\\n  /// @dev This emits when ownership of any NFT changes by any mechanism.\\n  ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n  ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n  ///  may be created and assigned without emitting Transfer. At the time of\\n  ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n  /// @dev This emits when the approved address for an NFT is changed or\\n  ///  reaffirmed. The zero address indicates there is no approved address.\\n  ///  When a Transfer event emits, this also indicates that the approved\\n  ///  address for that NFT (if any) is reset to none.\\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n  /// @dev This emits when an operator is enabled or disabled for an owner.\\n  ///  The operator can manage all NFTs of the owner.\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n  /// @notice Count all NFTs assigned to an owner\\n  /// @notice NFTs assigned to the zero address are considered invalid, and this\\n  ///  function throws for queries about the zero address.\\n  /// @param _owner An address for whom to query the balance\\n  /// @return The number of NFTs owned by `_owner`, possibly zero\\n  function balanceOf(\\n    address _owner\\n  ) external\\n    view\\n    returns (uint256);\\n\\n  /// @notice Find the owner of an NFT\\n  /// @notice NFTs assigned to zero address are considered invalid, and queries\\n  ///  about them do throw.\\n  /// @param _tokenId The identifier for an NFT\\n  /// @return The address of the owner of the NFT\\n  function ownerOf(\\n    uint256 _tokenId\\n  ) external\\n    view\\n    returns (address);\\n\\n  /// @notice Transfers the ownership of an NFT from one address to another address\\n  /// @notice Throws unless `msg.sender` is the current owner, an authorized\\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n  ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n  ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  ///  `onERC721Received` on `_to` and throws if the return value is not\\n  ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n  /// @param _from The current owner of the NFT\\n  /// @param _to The new owner\\n  /// @param _tokenId The NFT to transfer\\n  /// @param data Additional data with no specified format, sent in call to `_to`\\n  function safeTransferFrom(\\n    address _from\\n  , address _to\\n  , uint256 _tokenId\\n  , bytes calldata data\\n  ) external;\\n\\n  /// @notice Transfers the ownership of an NFT from one address to another address\\n  /// @notice This works identically to the other function with an extra data parameter,\\n  ///  except this function just sets data to \\\"\\\".\\n  /// @param _from The current owner of the NFT\\n  /// @param _to The new owner\\n  /// @param _tokenId The NFT to transfer\\n  function safeTransferFrom(\\n    address _from\\n  , address _to\\n  , uint256 _tokenId\\n  ) external;\\n\\n  /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n  ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n  ///  THEY MAY BE PERMANENTLY LOST\\n  /// @notice Throws unless `msg.sender` is the current owner, an authorized\\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n  ///  `_tokenId` is not a valid NFT.\\n  /// @param _from The current owner of the NFT\\n  /// @param _to The new owner\\n  /// @param _tokenId The NFT to transfer\\n  function transferFrom(\\n    address _from\\n  , address _to\\n  , uint256 _tokenId\\n  ) external;\\n\\n  /// @notice Change or reaffirm the approved address for an NFT\\n  /// @notice The zero address indicates there is no approved address.\\n  ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n  ///  operator of the current owner.\\n  /// @param _approved The new approved NFT controller\\n  /// @param _tokenId The NFT to approve\\n  function approve(\\n    address _approved\\n  , uint256 _tokenId\\n  ) external;\\n\\n  /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n  ///  all of `msg.sender`'s assets\\n  /// @notice Emits the ApprovalForAll event. The contract MUST allow\\n  ///  multiple operators per owner.\\n  /// @param _operator Address to add to the set of authorized operators\\n  /// @param _approved True if the operator is approved, false to revoke approval\\n  function setApprovalForAll(\\n    address _operator\\n  , bool _approved\\n  ) external;\\n\\n  /// @notice Get the approved address for a single NFT\\n  /// @notice Throws if `_tokenId` is not a valid NFT.\\n  /// @param _tokenId The NFT to find the approved address for\\n  /// @return The approved address for this NFT, or the zero address if there is none\\n  function getApproved(\\n    uint256 _tokenId\\n  ) external\\n    view\\n    returns (address);\\n\\n  /// @notice Query if an address is an authorized operator for another address\\n  /// @param _owner The address that owns the NFTs\\n  /// @param _operator The address that acts on behalf of the owner\\n  /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n  function isApprovedForAll(\\n    address _owner\\n  , address _operator\\n  ) external\\n    view\\n    returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/eip/2981/IERC2981.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: EIP-2981: NFT Royalty Standard\\n * @author: Zach Burks, James Morgan, Blaine Malone, James Seibel\\n * @notice: the ERC-165 identifier for this interface is 0x2a55205a.\\n * @custom:source https://eips.ethereum.org/EIPS/eip-2981\\n * @custom:change-log MIT -> Apache-2.0\\n *\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright and related rights waived via CC0.                               *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../165/IERC165.sol\\\";\\n\\ninterface IERC2981 is IERC165 {\\n\\n  /// ERC165 bytes to add to interface array - set in parent contract\\n  /// implementing this standard\\n\\n  /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n  /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n  /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n  /// @notice Called with the sale price to determine how much royalty\\n  ///         is owed and to whom.\\n  /// @param _tokenId - the NFT asset queried for royalty information\\n  /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n  /// @return receiver - address of who should be sent the royalty payment\\n  /// @return royaltyAmount - the royalty payment amount for _salePrice\\n  function royaltyInfo(\\n    uint256 _tokenId,\\n    uint256 _salePrice\\n  ) external\\n    view\\n    returns (\\n      address receiver,\\n      uint256 royaltyAmount\\n    );\\n}\\n\"\r\n    },\r\n    \"/contracts/eip/173/IERC173.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: EIP-173: Contract Ownership Standard\\n * @author: Nick Mudge, Dan Finlay\\n * @notice: This specification defines standard functions for owning or controlling a contract.\\n *          the ERC-165 identifier for this interface is 0x7f5828d0\\n * @custom:URI https://eips.ethereum.org/EIPS/eip-173\\n * @custom:change-log MIT -> Apache-2.0\\n * @custom:change-log readability modification\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright and related rights waived via CC0.                               *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../eip/165/IERC165.sol\\\";\\n\\ninterface IERC173 is IERC165 {\\n\\n  /// @dev This emits when ownership of a contract changes.    \\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /// @notice Get the address of the owner    \\n  /// @return The address of the owner.\\n  function owner()\\n    view\\n    external\\n    returns(address);\\n\\t\\n  /// @notice Set the address of the new owner of the contract\\n  /// @dev Set _newOwner to address(0) to renounce any ownership.\\n  /// @param _newOwner The address of the new owner of the contract    \\n  function transferOwnership(\\n    address _newOwner\\n  ) external;\\t\\n}\\n\"\r\n    },\r\n    \"/contracts/eip/165/IERC165.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: EIP-165: Standard Interface Detection\\n * @author: Christian Reitwie\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n * @notice: Creates a standard method to publish and detect what interfaces a smart contract implements.\\n * @custom:source https://eips.ethereum.org/EIPS/eip-165\\n * @custom:change-log interface ERC165 -> interface IERC165\\n * @custom:change-log readability enhanced\\n * @custom:change-log MIT -> Apache-2.0\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright and related rights waived via CC0.                               *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IERC165 {\\n\\n  /// @notice Query if a contract implements an interface\\n  /// @param interfaceID The interface identifier, as specified in ERC-165\\n  /// @notice Interface identification is specified in ERC-165. This function\\n  ///  uses less than 30,000 gas.\\n  /// @return `true` if the contract implements `interfaceID` and\\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n  function supportsInterface(\\n    bytes4 interfaceID\\n  ) external\\n    view\\n    returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/Max-721-2981-PSv2.sol\": {\r\n      \"content\": \"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\\n *\\n * @title: [EIP721] Max-721 Implementation, using EIP 1822\\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\\n * @notice ERC721 Implementation with:\\n *         Enhanced EIP173 - Ownership via roles\\n *         EIP2981 - NFT Royalties\\n *         PsuedoRandom Engine - Expansion of BAYC engine\\n *         TimeCop + Lists - For presales\\n *         PaymentSplitter v2 - For \\\"ETH\\\" payments\\n */\\n\\n// SPDX-License-Identifier: Apache-2.0\\n\\n/******************************************************************************\\n * Copyright 2022 Max Flow O2                                                 *\\n *                                                                            *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");            *\\n * you may not use this file except in compliance with the License.           *\\n * You may obtain a copy of the License at                                    *\\n *                                                                            *\\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\\n *                                                                            *\\n * Unless required by applicable law or agreed to in writing, software        *\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,          *\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\\n * See the License for the specific language governing permissions and        *\\n * limitations under the License.                                             *\\n ******************************************************************************/\\n\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"./eip/721/IERC721TokenReceiver.sol\\\";//\\nimport \\\"./eip/721/IERC721Metadata.sol\\\";//\\nimport \\\"./eip/721/IERC721.sol\\\";//\\nimport \\\"./modules/2981/IERC2981Admin.sol\\\";//\\nimport \\\"./modules/access/MaxAccess.sol\\\";//\\nimport \\\"./modules/splitter/ISplitter.sol\\\";//\\nimport \\\"./lib/Address.sol\\\";//\\nimport \\\"./lib/721.sol\\\";//\\nimport \\\"./lib/Roles.sol\\\";//\\nimport \\\"./lib/2981c.sol\\\";//\\nimport \\\"./lib/Payments.sol\\\";//\\n\\nabstract contract Max721 is MaxAccess\\n                          , IERC721\\n                          , IERC721Metadata\\n                          , IERC721TokenReceiver\\n                          , IERC2981Admin\\n                          , ISplitter {\\n\\n  using Lib721 for Lib721.Token;\\n  using Roles for Roles.Role;\\n  using Lib2981c for Lib2981c.Royalties;\\n  using Payments for Payments.GasTokens;\\n  using Address for address;\\n\\n  // The Structs...\\n  Lib721.Token internal token721;\\n  Roles.Role internal contractRoles;\\n  Lib2981c.Royalties internal royalties;\\n  Payments.GasTokens internal splitter;\\n\\n  // The rest (got to have a few)\\n  bytes4 constant internal DEVS = 0xca4b208b;\\n  bytes4 constant internal PENDING_DEVS = 0xca4b208a; // DEVS - 1\\n  bytes4 constant internal OWNERS = 0x8da5cb5b;\\n  bytes4 constant internal PENDING_OWNERS = 0x8da5cb5a; // OWNERS - 1\\n  bytes4 constant internal ADMIN = 0xf851a440;\\n\\n  uint256 startTime; // Set to opening (can +48h for secondary)\\n  uint256 period; // Set to the period\\n  uint256 maxCap; // Cpacity of minter\\n  bytes32 internal admin;\\n  mapping(uint256 => uint256) internal claimedAdmin;\\n  bytes32 internal homies;\\n  mapping(uint256 => uint256) internal claimedHomies;\\n  bytes32 internal normies;\\n  mapping(uint256 => uint256) internal claimedNormies;\\n  string internal contractURL;\\n  string internal image;\\n  string internal description;\\n  string internal animationURI;\\n  uint256 public normiesCost = 0.069 ether;\\n  uint256 public publicCost = 0.1 ether;\\n\\n  event PaymentReceived(address indexed _payee, uint256 _amount);\\n\\n  /// @dev this is Unauthorized(), basically a catch all, zero description\\n  /// @notice 0x82b42900 bytes4 of this\\n  error Unauthorized();\\n\\n  /// @dev this is MaxSplaining(), giving you a reason, aka require(param, \\\"reason\\\")\\n  /// @param reason: Use the \\\"Contract name: error\\\"\\n  /// @notice 0x0661b792 bytes4 of this\\n  error MaxSplaining(\\n    string reason\\n  );\\n\\n  /// @dev this is TooSoonJunior(), using times\\n  /// @param yourTime: should almost always be block.timestamp\\n  /// @param hitTime: the time you should have started\\n  /// @notice 0xf3f82ac5 bytes4 of this\\n  error TooSoonJunior(\\n    uint yourTime\\n  , uint hitTime\\n  );\\n\\n  /// @dev this is TooLateBoomer(), using times\\n  /// @param yourTime: should almost always be block.timestamp\\n  /// @param hitTime: the time you should have ended\\n  /// @notice 0x43c540ef bytes4 of this\\n  error TooLateBoomer(\\n    uint yourTime\\n  , uint hitTime\\n  );\\n\\n  ///////////////////////\\n  /// MAX-721: Modifiers\\n  ///////////////////////\\n\\n  modifier onlyRole(bytes4 role) {\\n    if (contractRoles.has(role, msg.sender) || contractRoles.has(ADMIN, msg.sender)) {\\n      _;\\n    } else {\\n    revert Unauthorized();\\n    }\\n  }\\n\\n  modifier onlyOwner() {\\n    if (contractRoles.has(OWNERS, msg.sender)) {\\n      _;\\n    } else {\\n    revert Unauthorized();\\n    }\\n  }\\n\\n  modifier onlyDev() {\\n    if (contractRoles.has(DEVS, msg.sender)) {\\n      _;\\n    } else {\\n    revert Unauthorized();\\n    }\\n  }\\n\\n  ///////////////////////\\n  /// MAX-721: Internals\\n  ///////////////////////\\n\\n  function __Max721_init(\\n    string memory _name\\n  , string memory _symbol\\n  , address _admin\\n  , address _dev\\n  , address _owner\\n  ) internal {\\n    token721.setName(_name);\\n    token721.setSymbol(_symbol);\\n    contractRoles.add(ADMIN, _admin);\\n    contractRoles.setAdmin(_admin);\\n    contractRoles.add(DEVS, _dev);\\n    contractRoles.setDeveloper(_dev);\\n    contractRoles.add(OWNERS, _owner);\\n    contractRoles.setOwner(_owner);\\n  }\\n\\n  function safeHook(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) internal\\n    returns (bool) {\\n    if (to.isContract()) {\\n      try IERC721TokenReceiver(to).onERC721Received(msg.sender, from, tokenId, data)\\n        returns (bytes4 retval) {\\n        return retval == IERC721TokenReceiver.onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert Unauthorized();\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /////////////////////////////////////////\\n  /// EIP-173: Contract Ownership Standard\\n  /////////////////////////////////////////\\n\\n  /// @notice Get the address of the owner    \\n  /// @return The address of the owner.\\n  function owner()\\n    view\\n    external\\n    returns(address) {\\n    return contractRoles.getOwner();\\n  }\\n\\t\\n  /// @notice Set the address of the new owner of the contract\\n  /// @dev Set _newOwner to address(0) to renounce any ownership.\\n  /// @param _newOwner The address of the new owner of the contract    \\n  function transferOwnership(\\n    address _newOwner\\n  ) external\\n    onlyRole(OWNERS) {\\n    contractRoles.add(OWNERS, _newOwner);\\n    contractRoles.setOwner(_newOwner);\\n    contractRoles.remove(OWNERS, msg.sender);\\n  }\\n\\n  ////////////////////////////////////////////////////////////////\\n  /// EIP-173: Contract Ownership Standard, MaxFlowO2's extension\\n  ////////////////////////////////////////////////////////////////\\n\\n  /// @dev This is the classic \\\"EIP-173\\\" method of renouncing onlyOwner()  \\n  function renounceOwnership()\\n    external \\n    onlyRole(OWNERS) {\\n    contractRoles.setOwner(address(0));\\n    contractRoles.remove(OWNERS, msg.sender);\\n  }\\n\\n  /// @dev This accepts the push-pull method of onlyOwner()\\n  function acceptOwnership()\\n    external\\n    onlyRole(PENDING_OWNERS) {\\n    contractRoles.add(OWNERS, msg.sender);\\n    contractRoles.setOwner(msg.sender);\\n    contractRoles.remove(PENDING_OWNERS, msg.sender);\\n  }\\n\\n  /// @dev This declines the push-pull method of onlyOwner()\\n  function declineOwnership()\\n    external\\n    onlyRole(PENDING_OWNERS) {\\n    contractRoles.remove(PENDING_OWNERS, msg.sender);\\n  }\\n\\n  /// @dev This starts the push-pull method of onlyOwner()\\n  /// @param newOwner: addres of new pending owner role\\n  function pushOwnership(\\n    address newOwner\\n  ) external\\n    onlyRole(OWNERS) {\\n    contractRoles.add(PENDING_OWNERS, newOwner);\\n  }\\n\\n  //////////////////////////////////////////////\\n  /// [Not an EIP]: Contract Developer Standard\\n  //////////////////////////////////////////////\\n\\n  /// @dev Classic \\\"EIP-173\\\" but for onlyDev()\\n  /// @return Developer of contract\\n  function developer()\\n    external\\n    view\\n    returns (address) {\\n    return contractRoles.getDeveloper();\\n  }\\n\\n  /// @dev This renounces your role as onlyDev()\\n  function renounceDeveloper()\\n    external\\n    onlyRole(DEVS) {\\n    contractRoles.setDeveloper(address(0));\\n    contractRoles.remove(DEVS, msg.sender);\\n  }\\n\\n  /// @dev Classic \\\"EIP-173\\\" but for onlyDev()\\n  /// @param newDeveloper: addres of new pending Developer role\\n  function transferDeveloper(\\n    address newDeveloper\\n  ) external\\n    onlyRole(DEVS) {\\n    contractRoles.add(DEVS, newDeveloper);\\n    contractRoles.setDeveloper(newDeveloper);\\n    contractRoles.remove(DEVS, msg.sender);\\n  }\\n\\n  /// @dev This accepts the push-pull method of onlyDev()\\n  function acceptDeveloper()\\n    external\\n    onlyRole(PENDING_DEVS) {\\n    contractRoles.add(DEVS, msg.sender);\\n    contractRoles.setDeveloper(msg.sender);\\n    contractRoles.remove(PENDING_DEVS, msg.sender);\\n  }\\n\\n  /// @dev This declines the push-pull method of onlyDev()\\n  function declineDeveloper()\\n    external\\n    onlyRole(PENDING_DEVS) {\\n    contractRoles.remove(PENDING_DEVS, msg.sender);\\n  }\\n\\n  /// @dev This starts the push-pull method of onlyDev()\\n  /// @param newDeveloper: addres of new pending developer role\\n  function pushDeveloper(\\n    address newDeveloper\\n  ) external\\n    onlyRole(DEVS) {\\n    contractRoles.add(PENDING_DEVS, newDeveloper);\\n  }\\n\\n  //////////////////////////////////////////\\n  /// [Not an EIP]: Contract Roles Standard\\n  //////////////////////////////////////////\\n\\n  /// @dev Returns `true` if `account` has been granted `role`.\\n  /// @param role: Bytes4 of a role\\n  /// @param account: Address to check\\n  /// @return bool true/false if account has role\\n  function hasRole(\\n    bytes4 role\\n  , address account\\n  ) external\\n    view\\n    returns (bool) {\\n    return contractRoles.has(role, account);\\n  }\\n\\n  /// @dev Returns the admin role that controls a role\\n  /// @param role: Role to check\\n  /// @return admin role\\n  function getRoleAdmin(\\n    bytes4 role\\n  ) external\\n    view \\n    returns (bytes4) {\\n    return ADMIN;\\n  }\\n\\n  /// @dev Grants `role` to `account`\\n  /// @param role: Bytes4 of a role\\n  /// @param account: account to give role to\\n  function grantRole(\\n    bytes4 role\\n  , address account\\n  ) external\\n    onlyRole(role) {\\n    if (role == PENDING_DEVS || role == PENDING_OWNERS) {\\n      revert Unauthorized();\\n    } else {\\n      contractRoles.add(role, account);\\n    }\\n  }\\n\\n  /// @dev Revokes `role` from `account`\\n  /// @param role: Bytes4 of a role\\n  /// @param account: account to revoke role from\\n  function revokeRole(\\n    bytes4 role\\n  , address account\\n  ) external\\n    onlyRole(role) {\\n    if (role == PENDING_DEVS || role == PENDING_OWNERS) {\\n      if (account == msg.sender) {\\n        contractRoles.remove(role, account);\\n      } else {\\n        revert Unauthorized();\\n      }\\n    } else {\\n      contractRoles.remove(role, account);\\n    }\\n  }\\n\\n  /// @dev Renounces `role` from `account`\\n  /// @param role: Bytes4 of a role\\n  function renounceRole(\\n    bytes4 role\\n  ) external\\n    onlyRole(role) {\\n    contractRoles.remove(role, msg.sender);\\n  }\\n\\n  ////////////////////////////////////////////////////////////////////////\\n  /// ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n  /// @dev may be added, but not fully supported see ERC-165 below\\n  ////////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Count NFTs tracked by this contract\\n  /// @return A count of valid NFTs tracked by this contract, where each one of\\n  ///  them has an assigned and queryable owner not equal to the zero address\\n  function totalSupply()\\n    external\\n    view\\n    virtual\\n    returns (uint256) {\\n    return token721.getSupply();\\n  }\\n\\n  /////////////////////////////////////////////////\\n  /// ERC721 Metadata, optional metadata extension\\n  /////////////////////////////////////////////////\\n\\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (string memory _name) {\\n    return token721.getName();\\n  }\\n\\n  /// @notice An abbreviated name for NFTs in this contract\\n  function symbol()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (string memory _symbol) {\\n    return token721.getSymbol();\\n  }\\n\\n  /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n  /// @notice Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n  ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n  ///  Metadata JSON Schema\\\".\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (string memory) {\\n    return token721.getTokenURI(_tokenId);\\n  }\\n\\n  ////////////////////////////////////////\\n  /// ERC-721 Non-Fungible Token Standard\\n  ////////////////////////////////////////\\n\\n  /// @notice Count all NFTs assigned to an owner\\n  /// @notice NFTs assigned to the zero address are considered invalid, and this\\n  ///  function throws for queries about the zero address.\\n  /// @param _owner An address for whom to query the balance\\n  /// @return The number of NFTs owned by `_owner`, possibly zero\\n  function balanceOf(\\n    address _owner\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (uint256) {\\n    return token721.getBalanceOf(_owner);\\n  }\\n\\n  /// @notice Find the owner of an NFT\\n  /// @notice NFTs assigned to zero address are considered invalid, and queries\\n  ///  about them do throw.\\n  /// @param _tokenId The identifier for an NFT\\n  /// @return The address of the owner of the NFT\\n  function ownerOf(\\n    uint256 _tokenId\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (address) {\\n    return token721.getOwnerOf(_tokenId);\\n  }\\n\\n  /// @notice Transfers the ownership of an NFT from one address to another address\\n  /// @notice Throws unless `msg.sender` is the current owner, an authorized\\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n  ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n  ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  ///  `onERC721Received` on `_to` and throws if the return value is not\\n  ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n  /// @param _from The current owner of the NFT\\n  /// @param _to The new owner\\n  /// @param _tokenId The NFT to transfer\\n  /// @param data Additional data with no specified format, sent in call to `_to`\\n  function safeTransferFrom(\\n    address _from\\n  , address _to\\n  , uint256 _tokenId\\n  , bytes calldata data\\n  ) external\\n    virtual\\n    override {\\n    token721.doTransferFrom(_from, _to, msg.sender, _tokenId);\\n    safeHook(_from, _to, _tokenId, data);\\n    emit Transfer(_from, _to, _tokenId);\\n  }\\n\\n  /// @notice Transfers the ownership of an NFT from one address to another address\\n  /// @notice This works identically to the other function with an extra data parameter,\\n  ///  except this function just sets data to \\\"\\\".\\n  /// @param _from The current owner of the NFT\\n  /// @param _to The new owner\\n  /// @param _tokenId The NFT to transfer\\n  function safeTransferFrom(\\n    address _from\\n  , address _to\\n  , uint256 _tokenId\\n  ) external\\n    virtual\\n    override {\\n    this.safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n  }\\n\\n  /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n  ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n  ///  THEY MAY BE PERMANENTLY LOST\\n  /// @notice Throws unless `msg.sender` is the current owner, an authorized\\n  ///  operator, or the approved address for this NFT. Throws if `_from` is\\n  ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n  ///  `_tokenId` is not a valid NFT.\\n  /// @param _from The current owner of the NFT\\n  /// @param _to The new owner\\n  /// @param _tokenId The NFT to transfer\\n  function transferFrom(\\n    address _from\\n  , address _to\\n  , uint256 _tokenId\\n  ) external\\n    virtual\\n    override {\\n    token721.doTransferFrom(_from, _to, msg.sender, _tokenId);\\n    emit Transfer(_from, _to, _tokenId);\\n  }\\n\\n  /// @notice Change or reaffirm the approved address for an NFT\\n  /// @notice The zero address indicates there is no approved address.\\n  ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n  ///  operator of the current owner.\\n  /// @param _approved The new approved NFT controller\\n  /// @param _tokenId The NFT to approve\\n  function approve(\\n    address _approved\\n  , uint256 _tokenId\\n  ) external\\n    virtual\\n    override {\\n    token721.setApprove(_approved, msg.sender, _tokenId);\\n    emit Approval(msg.sender, _approved, _tokenId);\\n  }\\n\\n  /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n  ///  all of `msg.sender`'s assets\\n  /// @notice Emits the ApprovalForAll event. The contract MUST allow\\n  ///  multiple operators per owner.\\n  /// @param _operator Address to add to the set of authorized operators\\n  /// @param _approved True if the operator is approved, false to revoke approval\\n  function setApprovalForAll(\\n    address _operator\\n  , bool _approved\\n  ) external\\n    virtual\\n    override {\\n    token721.setApprovalForAll(_operator, msg.sender, _approved);\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  /// @notice Get the approved address for a single NFT\\n  /// @notice Throws if `_tokenId` is not a valid NFT.\\n  /// @param _tokenId The NFT to find the approved address for\\n  /// @return The approved address for this NFT, or the zero address if there is none\\n  function getApproved(\\n    uint256 _tokenId\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (address) {\\n    return token721.getApproved(_tokenId);\\n  }\\n\\n  /// @notice Query if an address is an authorized operator for another address\\n  /// @param _owner The address that owns the NFTs\\n  /// @param _operator The address that acts on behalf of the owner\\n  /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n  function isApprovedForAll(\\n    address _owner\\n  , address _operator\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (bool) {\\n    return token721.isApprovedForAll(_owner, _operator);\\n  }\\n\\n  ///////////////////////////////////////////////////////////////////\\n  /// ERC-721 Non-Fungible Token Standard, required wallet interface\\n  /// @dev This is to disable all safe transfers to this contract\\n  ///////////////////////////////////////////////////////////////////\\n\\n  /// @notice Handle the receipt of an NFT\\n  /// @notice The ERC721 smart contract calls this function on the recipient\\n  ///  after a `transfer`. This function MAY throw to revert and reject the\\n  ///  transfer. Return of other than the magic value MUST result in the\\n  ///  transaction being reverted.\\n  ///  Note: the contract address is always the message sender.\\n  /// @param _operator The address which called `safeTransferFrom` function\\n  /// @param _from The address which previously owned the token\\n  /// @param _tokenId The NFT identifier which is being transferred\\n  /// @param _data Additional data with no specified format\\n  /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n  ///  unless throwing\\n  function onERC721Received(\\n    address _operator\\n  , address _from\\n  , uint256 _tokenId\\n  , bytes calldata _data\\n  ) external\\n    virtual\\n    override\\n    returns(bytes4) {\\n    revert Unauthorized();\\n  }\\n\\n  ///////////////////////////////////\\n  /// EIP-2981: NFT Royalty Standard\\n  ///////////////////////////////////\\n\\n  /// @notice Called with the sale price to determine how much royalty\\n  ///         is owed and to whom.\\n  /// @param _tokenId - the NFT asset queried for royalty information\\n  /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n  /// @return receiver - address of who should be sent the royalty payment\\n  /// @return royaltyAmount - the royalty payment amount for _salePrice\\n  function royaltyInfo(\\n    uint256 _tokenId,\\n    uint256 _salePrice\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (\\n      address receiver,\\n      uint256 royaltyAmount\\n    ) {\\n    (receiver, royaltyAmount) = royalties.royaltyInfo(_tokenId,_salePrice);\\n  }\\n\\n  ////////////////////////////////////////////////////\\n  /// EIP-2981: NFT Royalty Standard, admin extension\\n  /// @dev Using the collection standard\\n  ////////////////////////////////////////////////////\\n\\n  /// @dev function (state storage) sets the royalty data for a token\\n  /// @param tokenId uint256 for the token\\n  /// @param receiver address for the royalty reciever for token\\n  /// @param permille uint16 for the permille of royalties 20 -> 2.0%\\n  function setRoyalties(\\n    uint256 tokenId\\n  , address receiver\\n  , uint16 permille\\n  ) external\\n    virtual\\n    override {\\n    revert Unauthorized();\\n  }\\n\\n  /// @dev function (state storage) revokes the royalty data for a token\\n  /// @param tokenId uint256 for the token\\n  function revokeRoyalties(\\n    uint256 tokenId\\n  ) external\\n    virtual\\n    override {\\n    revert Unauthorized();\\n  }\\n\\n  /// @dev function (state storage) sets the royalty data for a collection\\n  /// @param receiver address for the royalty reciever for token\\n  /// @param permille uint16 for the permille of royalties 20 -> 2.0%\\n  function setRoyalties(\\n    address receiver\\n  , uint16 permille\\n  ) external\\n    virtual\\n    onlyOwner()\\n    override {\\n    royalties.setRoyalties(receiver, permille);\\n  }\\n\\n  /// @dev function (state storage) revokes the royalty data for a collection\\n  function revokeRoyalties()\\n    external\\n    virtual\\n    onlyOwner()\\n    override {\\n    royalties.revokeRoyalties();\\n  }\\n\\n  ////////////////////////////////////////////////////////////////\\n  /// [Not an EIP] Payment Splitter, interface for ether payments\\n  ////////////////////////////////////////////////////////////////\\n\\n  /// @dev returns total shares\\n  /// @return uint256 of all shares on contract\\n  function totalShares()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (uint256) {\\n    return splitter.getTotalShares();\\n  }\\n\\n  /// @dev returns shares of an address\\n  /// @param payee address of payee to return\\n  /// @return mapping(address => uint) of _shares\\n  function shares(\\n    address payee\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (uint256) {\\n    return splitter.payeeShares(payee);\\n  }\\n\\n  /// @dev returns total releases in \\\"eth\\\"\\n  /// @return uint256 of all \\\"eth\\\" released in wei\\n  function totalReleased()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (uint256) {\\n    return splitter.getTotalReleased();\\n  }\\n\\n  /// @dev returns released \\\"eth\\\" of an payee\\n  /// @param payee address of payee to look up\\n  /// @return mapping(address => uint) of _released\\n  function released(\\n    address payee\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (uint256) {\\n    return splitter.payeeReleased(payee);\\n  }\\n\\n  /// @dev returns amount of \\\"eth\\\" that can be released to payee\\n  /// @param payee address of payee to look up\\n  /// @return uint in wei of \\\"eth\\\" to release\\n  function releasable(\\n    address payee\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (uint256) {\\n    uint totalReceived\\n      = address(this).balance\\n      + this.totalReleased();\\n    return \\n      totalReceived\\n    * this.shares(payee)\\n    / this.totalShares()\\n    - this.released(payee);\\n  }\\n\\n  /// @dev returns index number of payee\\n  /// @param payee number of index\\n  /// @return address at _payees[index]\\n  function payeeIndex(\\n    address payee\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (uint256) {\\n    return splitter.payeeIndex(payee);\\n  }\\n\\n  /// @dev this returns the array of payees[]\\n  /// @return address[] payees\\n  function payees()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (address[] memory) {\\n    return splitter.getPayees();\\n  }\\n\\n  /// @dev this claims all \\\"eth\\\" on contract for msg.sender\\n  function claim()\\n    external\\n    virtual\\n    override {\\n    if (this.shares(msg.sender) == 0) {\\n      revert Unauthorized();\\n    }\\n    uint256 payment = this.releasable(msg.sender);\\n    if (payment == 0) {\\n      revert Unauthorized();\\n    }\\n    splitter.processPayment(msg.sender, payment);\\n    Address.sendValue(payable(msg.sender), payment);\\n  }\\n\\n  /// @dev This pays all payees\\n  function payClaims()\\n    external\\n    virtual\\n    override {\\n    address[] memory toPay = splitter.getPayees();\\n    uint256 len = toPay.length;\\n    for (uint x = 0 ; x < len ;) {\\n      uint256 payment = this.releasable(toPay[x]);\\n      splitter.processPayment(toPay[x], payment);\\n      Address.sendValue(payable(toPay[x]), payment);\\n      unchecked { ++x; }\\n    }\\n  }\\n\\n  /// @dev This adds a payee\\n  /// @param payee Address of payee\\n  /// @param _shares Shares to send user\\n  function addPayee(\\n    address payee\\n  , uint256 _shares\\n  ) external\\n    virtual\\n    onlyDev()\\n    override {\\n    splitter.addPayee(payee, _shares);\\n  }\\n\\n  /// @dev This removes a payee\\n  /// @param payee Address of payee to remove\\n  /// @notice use payPayees() prior to use if anything is on the contract\\n  function removePayee(\\n    address payee\\n  ) external\\n    virtual\\n    onlyDev()\\n    override {\\n    splitter.removePayee(payee);\\n  }\\n\\n  /// @dev This removes all payees\\n  /// @notice use payPayees() prior to use if anything is on the contract\\n  function clearPayees()\\n    external\\n    virtual\\n    onlyDev()\\n    override {\\n    splitter.clearPayees();\\n  }\\n\\n  //////////////////////////////////////////\\n  /// EIP-165: Standard Interface Detection\\n  //////////////////////////////////////////\\n\\n  /// @dev Query if a contract implements an interface\\n  /// @param interfaceID The interface identifier, as specified in ERC-165\\n  /// @notice Interface identification is specified in ERC-165. This function\\n  ///  uses less than 30,000 gas.\\n  /// @return `true` if the contract implements `interfaceID` and\\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n  function supportsInterface(\\n    bytes4 interfaceID\\n  ) external\\n    view\\n    virtual\\n    override\\n    returns (bool) {\\n    return (\\n      interfaceID == type(IERC173).interfaceId  ||\\n      interfaceID == type(IERC721).interfaceId  ||\\n      interfaceID == type(IERC2981).interfaceId  ||\\n      interfaceID == type(IERC721Metadata).interfaceId\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MaxSplaining\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MaxSplaining\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MaxSplaining\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MaxSplaining\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yourTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hitTime\",\"type\":\"uint256\"}],\"name\":\"TooLateBoomer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yourTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hitTime\",\"type\":\"uint256\"}],\"name\":\"TooSoonJunior\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"addPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearPayees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declineDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declineOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"homiesMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimedAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimedHomies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimedNormies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normiesCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"normiesMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"payeeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quant\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"pushDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"pushOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"removePayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"role\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revokeRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_normies\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_public\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animation\",\"type\":\"string\"}],\"name\":\"setJSON\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_admin\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_homies\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_normies\",\"type\":\"bytes32\"}],\"name\":\"setMerks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"permille\",\"type\":\"uint16\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"permille\",\"type\":\"uint16\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"transferDeveloper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HOW", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000004ce69fd760ad0c07490178f9a47863dc0358cccd0000000000000000000000004ce69fd760ad0c07490178f9a47863dc0358cccd000000000000000000000000e318cde62513f8c21e91e5211ff33a7eedf78a2f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000e486f6d696573206f6620576562330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004486f573300000000000000000000000000000000000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}