{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\n// File: lib/ipor-power-tokens/contracts/interfaces/IProxyImplementation.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\ninterface IProxyImplementation {\r\n    /// @notice Retrieves the address of the implementation contract for UUPS proxy.\r\n    /// @return The address of the implementation contract.\r\n    /// @dev The function returns the value stored in the implementation storage slot.\r\n    function getImplementation() external view returns (address);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/security/StorageLib.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Storage IDs associated with the IPOR Protocol Router.\r\nlibrary StorageLib {\r\n    uint256 constant STORAGE_SLOT_BASE = 1_000_000;\r\n\r\n    // append only\r\n    enum StorageId {\r\n        /// @dev The address of the contract owner.\r\n        Owner,\r\n        AppointedOwner,\r\n        Paused,\r\n        PauseGuardians,\r\n        ReentrancyStatus\r\n    }\r\n\r\n    struct OwnerStorage {\r\n        address value;\r\n    }\r\n\r\n    struct AppointedOwnerStorage {\r\n        address appointedOwner;\r\n    }\r\n\r\n    struct PausedStorage {\r\n        uint256 value;\r\n    }\r\n\r\n    struct ReentrancyStatusStorage {\r\n        uint256 value;\r\n    }\r\n\r\n    function getOwner() internal pure returns (OwnerStorage storage owner) {\r\n        uint256 slot = _getStorageSlot(StorageId.Owner);\r\n        assembly {\r\n            owner.slot := slot\r\n        }\r\n    }\r\n\r\n    function getAppointedOwner()\r\n        internal\r\n        pure\r\n        returns (AppointedOwnerStorage storage appointedOwner)\r\n    {\r\n        uint256 slot = _getStorageSlot(StorageId.AppointedOwner);\r\n        assembly {\r\n            appointedOwner.slot := slot\r\n        }\r\n    }\r\n\r\n    function getPaused() internal pure returns (PausedStorage storage paused) {\r\n        uint256 slot = _getStorageSlot(StorageId.Paused);\r\n        assembly {\r\n            paused.slot := slot\r\n        }\r\n    }\r\n\r\n    function getPauseGuardianStorage()\r\n        internal\r\n        pure\r\n        returns (mapping(address => uint256) storage store)\r\n    {\r\n        uint256 slot = _getStorageSlot(StorageId.PauseGuardians);\r\n        assembly {\r\n            store.slot := slot\r\n        }\r\n    }\r\n\r\n    function getReentrancyStatus() internal pure returns (ReentrancyStatusStorage storage status) {\r\n        uint256 slot = _getStorageSlot(StorageId.ReentrancyStatus);\r\n        assembly {\r\n            status.slot := slot\r\n        }\r\n    }\r\n\r\n    function _getStorageSlot(StorageId storageId) private pure returns (uint256 slot) {\r\n        return uint256(storageId) + STORAGE_SLOT_BASE;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/security/PauseManager.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nlibrary PauseManager {\r\n    function addPauseGuardians(address[] calldata guardians) internal {\r\n        uint256 length = guardians.length;\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n        mapping(address => uint256) storage pauseGuardians = StorageLib.getPauseGuardianStorage();\r\n        for (uint256 i; i < length; ) {\r\n            pauseGuardians[guardians[i]] = 1;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        emit PauseGuardiansAdded(guardians);\r\n    }\r\n\r\n    function removePauseGuardians(address[] calldata guardians) internal {\r\n        uint256 length = guardians.length;\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n        mapping(address => uint256) storage pauseGuardians = StorageLib.getPauseGuardianStorage();\r\n\r\n        for (uint256 i; i < length; ) {\r\n            pauseGuardians[guardians[i]] = 0;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        emit PauseGuardiansRemoved(guardians);\r\n    }\r\n\r\n    function isPauseGuardian(address _guardian) internal view returns (bool) {\r\n        mapping(address => uint256) storage pauseGuardians = StorageLib.getPauseGuardianStorage();\r\n        return pauseGuardians[_guardian] == 1;\r\n    }\r\n\r\n    event PauseGuardiansAdded(address[] indexed guardians);\r\n\r\n    event PauseGuardiansRemoved(address[] indexed guardians);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Chainlink Aggregator V3 Interface to USD ETH Oracle Price Feed.\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/types/PowerTokenTypes.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Struct used across Liquidity Mining.\r\nlibrary PowerTokenTypes {\r\n    struct PwTokenCooldown {\r\n        // @dev The timestamp when the account can redeem Power Tokens\r\n        uint256 endTimestamp;\r\n        // @dev The amount of Power Tokens which can be redeemed without fee when the cooldown reaches `endTimestamp`\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    struct UpdateGovernanceToken {\r\n        address beneficiary;\r\n        uint256 governanceTokenAmount;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/IPowerToken.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title The Interface for the interaction with the PowerToken - smart contract responsible\r\n/// for managing Power Token (pwToken), Swapping Staked Token for Power Tokens, and\r\n/// delegating Power Tokens to other components.\r\ninterface IPowerToken {\r\n    /// @notice Gets the name of the Power Token\r\n    /// @return Returns the name of the Power Token.\r\n    function name() external pure returns (string memory);\r\n\r\n    /// @notice Contract ID. The keccak-256 hash of \"io.ipor.PowerToken\" decreased by 1\r\n    /// @return Returns the ID of the contract\r\n    function getContractId() external pure returns (bytes32);\r\n\r\n    /// @notice Gets the symbol of the Power Token.\r\n    /// @return Returns the symbol of the Power Token.\r\n    function symbol() external pure returns (string memory);\r\n\r\n    /// @notice Returns the number of the decimals used by Power Token. By default it's 18 decimals.\r\n    /// @return Returns the number of decimals: 18.\r\n    function decimals() external pure returns (uint8);\r\n\r\n    /// @notice Gets the total supply of the Power Token.\r\n    /// @dev Value is calculated in runtime using baseTotalSupply and internal exchange rate.\r\n    /// @return Total supply of Power tokens, represented with 18 decimals\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Gets the balance of Power Tokens for a given account\r\n    /// @param account account address for which the balance of Power Tokens is fetched\r\n    /// @return Returns the amount of the Power Tokens owned by the `account`.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @notice Gets the delegated balance of the Power Tokens for a given account.\r\n    /// Tokens are delegated from PowerToken to LiquidityMining smart contract (reponsible for rewards distribution).\r\n    /// @param account account address for which the balance of delegated Power Tokens is checked\r\n    /// @return  Returns the amount of the Power Tokens owned by the `account` and delegated to the LiquidityMining contracts.\r\n    function delegatedToLiquidityMiningBalanceOf(address account) external view returns (uint256);\r\n\r\n    /// @notice Gets the rate of the fee from the configuration. This fee is applied when the owner of Power Tokens wants to unstake them immediately.\r\n    /// @dev Fee value represented in as a percentage with 18 decimals\r\n    /// @return value, a percentage represented with 18 decimal\r\n    function getUnstakeWithoutCooldownFee() external view returns (uint256);\r\n\r\n    /// @notice Gets the state of the active cooldown for the sender.\r\n    /// @dev If PowerTokenTypes.PowerTokenCoolDown contains only zeros it represents no active cool down.\r\n    /// Struct containing information on when the cooldown end and what is the quantity of the Power Tokens locked.\r\n    /// @param account account address that owns Power Tokens in the cooldown\r\n    /// @return Object PowerTokenTypes.PowerTokenCoolDown represents active cool down\r\n    function getActiveCooldown(\r\n        address account\r\n    ) external view returns (PowerTokenTypes.PwTokenCooldown memory);\r\n\r\n    /// @notice Initiates a cooldown for the specified account.\r\n    /// @dev This function allows an account to initiate a cooldown period for a specified amount of Power Tokens.\r\n    ///      During the cooldown period, the specified amount of Power Tokens cannot be redeemed or transferred.\r\n    /// @param account The account address for which the cooldown is initiated.\r\n    /// @param pwTokenAmount The amount of Power Tokens to be put on cooldown.\r\n    function cooldownInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Cancels the cooldown for the specified account.\r\n    /// @dev This function allows an account to cancel the active cooldown period for their Power Tokens,\r\n    ///      enabling them to freely redeem or transfer their Power Tokens.\r\n    /// @param account The account address for which the cooldown is to be canceled.\r\n    function cancelCooldownInternal(address account) external;\r\n\r\n    /// @notice Redeems Power Tokens for the specified account.\r\n    /// @dev This function allows an account to redeem their Power Tokens, transferring the specified\r\n    ///      amount of Power Tokens back to the account's staked token balance.\r\n    ///      The redemption is subject to the cooldown period, and the account must wait for the cooldown\r\n    ///      period to finish before being able to redeem the Power Tokens.\r\n    /// @param account The account address for which Power Tokens are to be redeemed.\r\n    /// @return transferAmount The amount of Power Tokens that have been redeemed and transferred back to the staked token balance.\r\n    function redeemInternal(address account) external returns (uint256 transferAmount);\r\n\r\n    /// @notice Adds staked tokens to the specified account.\r\n    /// @dev This function allows the specified account to add staked tokens to their Power Token balance.\r\n    ///      The staked tokens are converted to Power Tokens based on the internal exchange rate.\r\n    /// @param updateGovernanceToken An object of type PowerTokenTypes.UpdateGovernanceToken containing the details of the staked token update.\r\n    function addGovernanceTokenInternal(\r\n        PowerTokenTypes.UpdateGovernanceToken memory updateGovernanceToken\r\n    ) external;\r\n\r\n    /// @notice Removes staked tokens from the specified account, applying a fee.\r\n    /// @dev This function allows the specified account to remove staked tokens from their Power Token balance,\r\n    ///      while deducting a fee from the staked token amount. The fee is determined based on the cooldown period.\r\n    /// @param updateGovernanceToken An object of type PowerTokenTypes.UpdateGovernanceToken containing the details of the staked token update.\r\n    /// @return governanceTokenAmountToTransfer The amount of staked tokens to be transferred after applying the fee.\r\n    function removeGovernanceTokenWithFeeInternal(\r\n        PowerTokenTypes.UpdateGovernanceToken memory updateGovernanceToken\r\n    ) external returns (uint256 governanceTokenAmountToTransfer);\r\n\r\n    /// @notice Delegates a specified amount of Power Tokens from the caller's balance to the Liquidity Mining contract.\r\n    /// @dev This function allows the caller to delegate a specified amount of Power Tokens to the Liquidity Mining contract,\r\n    ///      enabling them to participate in liquidity mining and earn rewards.\r\n    /// @param account The address of the account delegating the Power Tokens.\r\n    /// @param pwTokenAmount The amount of Power Tokens to delegate.\r\n    function delegateInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Undelegated a specified amount of Power Tokens from the Liquidity Mining contract back to the caller's balance.\r\n    /// @dev This function allows the caller to undelegate a specified amount of Power Tokens from the Liquidity Mining contract,\r\n    ///      effectively removing them from participation in liquidity mining and stopping the earning of rewards.\r\n    /// @param account The address of the account to undelegate the Power Tokens from.\r\n    /// @param pwTokenAmount The amount of Power Tokens to undelegate.\r\n    function undelegateInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Emitted when the account stake/add [Staked] Tokens\r\n    /// @param account account address that executed the staking\r\n    /// @param governanceTokenAmount of Staked Token amount being staked into PowerToken contract\r\n    /// @param internalExchangeRate internal exchange rate used to calculate the base amount\r\n    /// @param baseAmount value calculated based on the governanceTokenAmount and the internalExchangeRate\r\n    event GovernanceTokenAdded(\r\n        address indexed account,\r\n        uint256 governanceTokenAmount,\r\n        uint256 internalExchangeRate,\r\n        uint256 baseAmount\r\n    );\r\n\r\n    /// @notice Emitted when the account unstakes the Power Tokens\r\n    /// @param account address that executed the unstaking\r\n    /// @param pwTokenAmount amount of Power Tokens that were unstaked\r\n    /// @param internalExchangeRate which was used to calculate the base amount\r\n    /// @param fee amount subtracted from the pwTokenAmount\r\n    event GovernanceTokenRemovedWithFee(\r\n        address indexed account,\r\n        uint256 pwTokenAmount,\r\n        uint256 internalExchangeRate,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice Emitted when the sender delegates the Power Tokens to the LiquidityMining contract\r\n    /// @param account address delegating the Power Tokens\r\n    /// @param pwTokenAmounts amounts of Power Tokens delegated to respective lpTokens\r\n    event Delegated(address indexed account, uint256 pwTokenAmounts);\r\n\r\n    /// @notice Emitted when the sender undelegates Power Tokens from the LiquidityMining\r\n    /// @param account address undelegating Power Tokens\r\n    /// @param pwTokenAmounts amounts of Power Tokens undelegated form respective lpTokens\r\n    event Undelegated(address indexed account, uint256 pwTokenAmounts);\r\n\r\n    /// @notice Emitted when the sender sets the cooldown on Power Tokens\r\n    /// @param pwTokenAmount amount of pwToken in cooldown\r\n    /// @param endTimestamp end time of the cooldown\r\n    event CooldownChanged(uint256 pwTokenAmount, uint256 endTimestamp);\r\n\r\n    /// @notice Emitted when the sender redeems the pwTokens after the cooldown\r\n    /// @param account address that executed the redeem function\r\n    /// @param pwTokenAmount amount of the pwTokens that was transferred to the Power Token owner's address\r\n    event Redeem(address indexed account, uint256 pwTokenAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/IGovernanceToken.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title Interface of the Staked Token.\r\ninterface IGovernanceToken is IERC20 {\r\n    /**\r\n     * @dev Contract id.\r\n     * The keccak-256 hash of \"io.ipor.IporToken\" decreased by 1\r\n     */\r\n    function getContractId() external pure returns (bytes32);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/libraries/math/MathOperation.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary MathOperation {\r\n    //@notice Division with the rounding up on last position, x, and y is with MD\r\n    function division(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x + (y / 2)) / y;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeCast.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\r\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint248 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint248).\r\n     *\r\n     * Counterpart to Solidity's `uint248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint248(uint256 value) internal pure returns (uint248) {\r\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\r\n        return uint248(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint240 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint240).\r\n     *\r\n     * Counterpart to Solidity's `uint240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint240(uint256 value) internal pure returns (uint240) {\r\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\r\n        return uint240(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint232 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint232).\r\n     *\r\n     * Counterpart to Solidity's `uint232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint232(uint256 value) internal pure returns (uint232) {\r\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\r\n        return uint232(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint216 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint216).\r\n     *\r\n     * Counterpart to Solidity's `uint216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint216(uint256 value) internal pure returns (uint216) {\r\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\r\n        return uint216(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint208 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint208).\r\n     *\r\n     * Counterpart to Solidity's `uint208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint208(uint256 value) internal pure returns (uint208) {\r\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\r\n        return uint208(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint200 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint200).\r\n     *\r\n     * Counterpart to Solidity's `uint200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint200(uint256 value) internal pure returns (uint200) {\r\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\r\n        return uint200(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint192 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint192).\r\n     *\r\n     * Counterpart to Solidity's `uint192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint192(uint256 value) internal pure returns (uint192) {\r\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\r\n        return uint192(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint184 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint184).\r\n     *\r\n     * Counterpart to Solidity's `uint184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint184(uint256 value) internal pure returns (uint184) {\r\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\r\n        return uint184(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint176 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint176).\r\n     *\r\n     * Counterpart to Solidity's `uint176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint176(uint256 value) internal pure returns (uint176) {\r\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\r\n        return uint176(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint168 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint168).\r\n     *\r\n     * Counterpart to Solidity's `uint168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint168(uint256 value) internal pure returns (uint168) {\r\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\r\n        return uint168(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint160 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint160).\r\n     *\r\n     * Counterpart to Solidity's `uint160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint160(uint256 value) internal pure returns (uint160) {\r\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\r\n        return uint160(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint152 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint152).\r\n     *\r\n     * Counterpart to Solidity's `uint152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint152(uint256 value) internal pure returns (uint152) {\r\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\r\n        return uint152(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint144 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint144).\r\n     *\r\n     * Counterpart to Solidity's `uint144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint144(uint256 value) internal pure returns (uint144) {\r\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\r\n        return uint144(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint136 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint136).\r\n     *\r\n     * Counterpart to Solidity's `uint136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint136(uint256 value) internal pure returns (uint136) {\r\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\r\n        return uint136(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint120 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint120).\r\n     *\r\n     * Counterpart to Solidity's `uint120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint120(uint256 value) internal pure returns (uint120) {\r\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\r\n        return uint120(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint112 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint112).\r\n     *\r\n     * Counterpart to Solidity's `uint112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint112(uint256 value) internal pure returns (uint112) {\r\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\r\n        return uint112(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint104 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint104).\r\n     *\r\n     * Counterpart to Solidity's `uint104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint104(uint256 value) internal pure returns (uint104) {\r\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\r\n        return uint104(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint88 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint88).\r\n     *\r\n     * Counterpart to Solidity's `uint88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint88(uint256 value) internal pure returns (uint88) {\r\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\r\n        return uint88(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint80 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint80).\r\n     *\r\n     * Counterpart to Solidity's `uint80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint80(uint256 value) internal pure returns (uint80) {\r\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\r\n        return uint80(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint72 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint72).\r\n     *\r\n     * Counterpart to Solidity's `uint72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint72(uint256 value) internal pure returns (uint72) {\r\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\r\n        return uint72(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint56 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint56).\r\n     *\r\n     * Counterpart to Solidity's `uint56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint56(uint256 value) internal pure returns (uint56) {\r\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\r\n        return uint56(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint48 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint48).\r\n     *\r\n     * Counterpart to Solidity's `uint48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint48(uint256 value) internal pure returns (uint48) {\r\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\r\n        return uint48(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint24 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint24).\r\n     *\r\n     * Counterpart to Solidity's `uint24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint24(uint256 value) internal pure returns (uint24) {\r\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\r\n        return uint24(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     *\r\n     * _Available since v3.0._\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int248 from int256, reverting on\r\n     * overflow (when the input is less than smallest int248 or\r\n     * greater than largest int248).\r\n     *\r\n     * Counterpart to Solidity's `int248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\r\n        downcasted = int248(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int240 from int256, reverting on\r\n     * overflow (when the input is less than smallest int240 or\r\n     * greater than largest int240).\r\n     *\r\n     * Counterpart to Solidity's `int240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\r\n        downcasted = int240(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int232 from int256, reverting on\r\n     * overflow (when the input is less than smallest int232 or\r\n     * greater than largest int232).\r\n     *\r\n     * Counterpart to Solidity's `int232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\r\n        downcasted = int232(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int224 from int256, reverting on\r\n     * overflow (when the input is less than smallest int224 or\r\n     * greater than largest int224).\r\n     *\r\n     * Counterpart to Solidity's `int224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\r\n        downcasted = int224(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int216 from int256, reverting on\r\n     * overflow (when the input is less than smallest int216 or\r\n     * greater than largest int216).\r\n     *\r\n     * Counterpart to Solidity's `int216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\r\n        downcasted = int216(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int208 from int256, reverting on\r\n     * overflow (when the input is less than smallest int208 or\r\n     * greater than largest int208).\r\n     *\r\n     * Counterpart to Solidity's `int208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\r\n        downcasted = int208(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int200 from int256, reverting on\r\n     * overflow (when the input is less than smallest int200 or\r\n     * greater than largest int200).\r\n     *\r\n     * Counterpart to Solidity's `int200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\r\n        downcasted = int200(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int192 from int256, reverting on\r\n     * overflow (when the input is less than smallest int192 or\r\n     * greater than largest int192).\r\n     *\r\n     * Counterpart to Solidity's `int192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\r\n        downcasted = int192(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int184 from int256, reverting on\r\n     * overflow (when the input is less than smallest int184 or\r\n     * greater than largest int184).\r\n     *\r\n     * Counterpart to Solidity's `int184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\r\n        downcasted = int184(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int176 from int256, reverting on\r\n     * overflow (when the input is less than smallest int176 or\r\n     * greater than largest int176).\r\n     *\r\n     * Counterpart to Solidity's `int176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\r\n        downcasted = int176(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int168 from int256, reverting on\r\n     * overflow (when the input is less than smallest int168 or\r\n     * greater than largest int168).\r\n     *\r\n     * Counterpart to Solidity's `int168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\r\n        downcasted = int168(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int160 from int256, reverting on\r\n     * overflow (when the input is less than smallest int160 or\r\n     * greater than largest int160).\r\n     *\r\n     * Counterpart to Solidity's `int160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\r\n        downcasted = int160(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int152 from int256, reverting on\r\n     * overflow (when the input is less than smallest int152 or\r\n     * greater than largest int152).\r\n     *\r\n     * Counterpart to Solidity's `int152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\r\n        downcasted = int152(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int144 from int256, reverting on\r\n     * overflow (when the input is less than smallest int144 or\r\n     * greater than largest int144).\r\n     *\r\n     * Counterpart to Solidity's `int144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\r\n        downcasted = int144(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int136 from int256, reverting on\r\n     * overflow (when the input is less than smallest int136 or\r\n     * greater than largest int136).\r\n     *\r\n     * Counterpart to Solidity's `int136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\r\n        downcasted = int136(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\r\n        downcasted = int128(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int120 from int256, reverting on\r\n     * overflow (when the input is less than smallest int120 or\r\n     * greater than largest int120).\r\n     *\r\n     * Counterpart to Solidity's `int120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\r\n        downcasted = int120(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int112 from int256, reverting on\r\n     * overflow (when the input is less than smallest int112 or\r\n     * greater than largest int112).\r\n     *\r\n     * Counterpart to Solidity's `int112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\r\n        downcasted = int112(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int104 from int256, reverting on\r\n     * overflow (when the input is less than smallest int104 or\r\n     * greater than largest int104).\r\n     *\r\n     * Counterpart to Solidity's `int104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\r\n        downcasted = int104(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int96 from int256, reverting on\r\n     * overflow (when the input is less than smallest int96 or\r\n     * greater than largest int96).\r\n     *\r\n     * Counterpart to Solidity's `int96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\r\n        downcasted = int96(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int88 from int256, reverting on\r\n     * overflow (when the input is less than smallest int88 or\r\n     * greater than largest int88).\r\n     *\r\n     * Counterpart to Solidity's `int88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\r\n        downcasted = int88(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int80 from int256, reverting on\r\n     * overflow (when the input is less than smallest int80 or\r\n     * greater than largest int80).\r\n     *\r\n     * Counterpart to Solidity's `int80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\r\n        downcasted = int80(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int72 from int256, reverting on\r\n     * overflow (when the input is less than smallest int72 or\r\n     * greater than largest int72).\r\n     *\r\n     * Counterpart to Solidity's `int72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\r\n        downcasted = int72(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\r\n        downcasted = int64(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int56 from int256, reverting on\r\n     * overflow (when the input is less than smallest int56 or\r\n     * greater than largest int56).\r\n     *\r\n     * Counterpart to Solidity's `int56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\r\n        downcasted = int56(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int48 from int256, reverting on\r\n     * overflow (when the input is less than smallest int48 or\r\n     * greater than largest int48).\r\n     *\r\n     * Counterpart to Solidity's `int48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\r\n        downcasted = int48(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int40 from int256, reverting on\r\n     * overflow (when the input is less than smallest int40 or\r\n     * greater than largest int40).\r\n     *\r\n     * Counterpart to Solidity's `int40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\r\n        downcasted = int40(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\r\n        downcasted = int32(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int24 from int256, reverting on\r\n     * overflow (when the input is less than smallest int24 or\r\n     * greater than largest int24).\r\n     *\r\n     * Counterpart to Solidity's `int24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\r\n        downcasted = int24(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\r\n        downcasted = int16(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\r\n        downcasted = int8(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     *\r\n     * _Available since v3.0._\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: abdk-libraries-solidity/ABDKMathQuad.sol\r\n\r\n\r\n/*\r\n * ABDK Math Quad Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with IEEE 754\r\n * quadruple-precision binary floating-point numbers (quadruple precision\r\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\r\n * represented by bytes16 type.\r\n */\r\nlibrary ABDKMathQuad {\r\n  /*\r\n   * 0.\r\n   */\r\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\r\n\r\n  /*\r\n   * -0.\r\n   */\r\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * +Infinity.\r\n   */\r\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\r\n\r\n  /*\r\n   * -Infinity.\r\n   */\r\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\r\n\r\n  /*\r\n   * Canonical NaN value.\r\n   */\r\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into quadruple precision number.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (x == 0) return bytes16 (0);\r\n      else {\r\n        // We rely on overflow behavior here\r\n        uint256 result = uint256 (x > 0 ? x : -x);\r\n\r\n        uint256 msb = mostSignificantBit (result);\r\n        if (msb < 112) result <<= 112 - msb;\r\n        else if (msb > 112) result >>= msb - 112;\r\n\r\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\r\n        if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n        return bytes16 (uint128 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 256-bit integer number\r\n   * rounding towards zero.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function toInt (bytes16 x) internal pure returns (int256) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n      require (exponent <= 16638); // Overflow\r\n      if (exponent < 16383) return 0; // Underflow\r\n\r\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n        0x10000000000000000000000000000;\r\n\r\n      if (exponent < 16495) result >>= 16495 - exponent;\r\n      else if (exponent > 16495) result <<= exponent - 16495;\r\n\r\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (result); // We rely on overflow behavior here\r\n      } else {\r\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into quadruple precision number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (x == 0) return bytes16 (0);\r\n      else {\r\n        uint256 result = x;\r\n\r\n        uint256 msb = mostSignificantBit (result);\r\n        if (msb < 112) result <<= 112 - msb;\r\n        else if (msb > 112) result >>= msb - 112;\r\n\r\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\r\n\r\n        return bytes16 (uint128 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into unsigned 256-bit integer number\r\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\r\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\r\n   * without error, because they are rounded to zero.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function toUInt (bytes16 x) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n      if (exponent < 16383) return 0; // Underflow\r\n\r\n      require (uint128 (x) < 0x80000000000000000000000000000000); // Negative\r\n\r\n      require (exponent <= 16638); // Overflow\r\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n        0x10000000000000000000000000000;\r\n\r\n      if (exponent < 16495) result >>= 16495 - exponent;\r\n      else if (exponent > 16495) result <<= exponent - 16495;\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 bit fixed point number into quadruple precision\r\n   * number.\r\n   *\r\n   * @param x signed 128.128 bit fixed point number\r\n   * @return quadruple precision number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (x == 0) return bytes16 (0);\r\n      else {\r\n        // We rely on overflow behavior here\r\n        uint256 result = uint256 (x > 0 ? x : -x);\r\n\r\n        uint256 msb = mostSignificantBit (result);\r\n        if (msb < 112) result <<= 112 - msb;\r\n        else if (msb > 112) result >>= msb - 112;\r\n\r\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\r\n        if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n        return bytes16 (uint128 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 128.128 bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 128.128 bit fixed point number\r\n   */\r\n  function to128x128 (bytes16 x) internal pure returns (int256) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n      require (exponent <= 16510); // Overflow\r\n      if (exponent < 16255) return 0; // Underflow\r\n\r\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n        0x10000000000000000000000000000;\r\n\r\n      if (exponent < 16367) result >>= 16367 - exponent;\r\n      else if (exponent > 16367) result <<= exponent - 16367;\r\n\r\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n        require (result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (result); // We rely on overflow behavior here\r\n      } else {\r\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 bit fixed point number into quadruple precision\r\n   * number.\r\n   *\r\n   * @param x signed 64.64 bit fixed point number\r\n   * @return quadruple precision number\r\n   */\r\n  function from64x64 (int128 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (x == 0) return bytes16 (0);\r\n      else {\r\n        // We rely on overflow behavior here\r\n        uint256 result = uint128 (x > 0 ? x : -x);\r\n\r\n        uint256 msb = mostSignificantBit (result);\r\n        if (msb < 112) result <<= 112 - msb;\r\n        else if (msb > 112) result >>= msb - 112;\r\n\r\n        result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\r\n        if (x < 0) result |= 0x80000000000000000000000000000000;\r\n\r\n        return bytes16 (uint128 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 64.64 bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 64.64 bit fixed point number\r\n   */\r\n  function to64x64 (bytes16 x) internal pure returns (int128) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n      require (exponent <= 16446); // Overflow\r\n      if (exponent < 16319) return 0; // Underflow\r\n\r\n      uint256 result = uint256 (uint128 (x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n        0x10000000000000000000000000000;\r\n\r\n      if (exponent < 16431) result >>= 16431 - exponent;\r\n      else if (exponent > 16431) result <<= exponent - 16431;\r\n\r\n      if (uint128 (x) >= 0x80000000000000000000000000000000) { // Negative\r\n        require (result <= 0x80000000000000000000000000000000);\r\n        return -int128 (int256 (result)); // We rely on overflow behavior here\r\n      } else {\r\n        require (result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int128 (int256 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert octuple precision number into quadruple precision number.\r\n   *\r\n   * @param x octuple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\r\n\r\n      uint256 exponent = uint256 (x) >> 236 & 0x7FFFF;\r\n      uint256 significand = uint256 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      if (exponent == 0x7FFFF) {\r\n        if (significand > 0) return NaN;\r\n        else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n      }\r\n\r\n      if (exponent > 278526)\r\n        return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n      else if (exponent < 245649)\r\n        return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\r\n      else if (exponent < 245761) {\r\n        significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\r\n        exponent = 0;\r\n      } else {\r\n        significand >>= 124;\r\n        exponent -= 245760;\r\n      }\r\n\r\n      uint128 result = uint128 (significand | exponent << 112);\r\n      if (negative) result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into octuple precision number.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return octuple precision number\r\n   */\r\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n\r\n      uint256 result = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\r\n      else if (exponent == 0) {\r\n        if (result > 0) {\r\n          uint256 msb = mostSignificantBit (result);\r\n          result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          exponent = 245649 + msb;\r\n        }\r\n      } else {\r\n        result <<= 124;\r\n        exponent += 245760;\r\n      }\r\n\r\n      result |= exponent << 236;\r\n      if (uint128 (x) >= 0x80000000000000000000000000000000)\r\n        result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n      return bytes32 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert double precision number into quadruple precision number.\r\n   *\r\n   * @param x double precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      uint256 exponent = uint64 (x) >> 52 & 0x7FF;\r\n\r\n      uint256 result = uint64 (x) & 0xFFFFFFFFFFFFF;\r\n\r\n      if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\r\n      else if (exponent == 0) {\r\n        if (result > 0) {\r\n          uint256 msb = mostSignificantBit (result);\r\n          result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          exponent = 15309 + msb;\r\n        }\r\n      } else {\r\n        result <<= 60;\r\n        exponent += 15360;\r\n      }\r\n\r\n      result |= exponent << 112;\r\n      if (x & 0x8000000000000000 > 0)\r\n        result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into double precision number.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return double precision number\r\n   */\r\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\r\n    unchecked {\r\n      bool negative = uint128 (x) >= 0x80000000000000000000000000000000;\r\n\r\n      uint256 exponent = uint128 (x) >> 112 & 0x7FFF;\r\n      uint256 significand = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      if (exponent == 0x7FFF) {\r\n        if (significand > 0) return 0x7FF8000000000000; // NaN\r\n        else return negative ?\r\n            bytes8 (0xFFF0000000000000) : // -Infinity\r\n            bytes8 (0x7FF0000000000000); // Infinity\r\n      }\r\n\r\n      if (exponent > 17406)\r\n        return negative ?\r\n            bytes8 (0xFFF0000000000000) : // -Infinity\r\n            bytes8 (0x7FF0000000000000); // Infinity\r\n      else if (exponent < 15309)\r\n        return negative ?\r\n            bytes8 (0x8000000000000000) : // -0\r\n            bytes8 (0x0000000000000000); // 0\r\n      else if (exponent < 15361) {\r\n        significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\r\n        exponent = 0;\r\n      } else {\r\n        significand >>= 60;\r\n        exponent -= 15360;\r\n      }\r\n\r\n      uint64 result = uint64 (significand | exponent << 52);\r\n      if (negative) result |= 0x8000000000000000;\r\n\r\n      return bytes8 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether given quadruple precision number is NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return true if x is NaN, false otherwise\r\n   */\r\n  function isNaN (bytes16 x) internal pure returns (bool) {\r\n    unchecked {\r\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\r\n        0x7FFF0000000000000000000000000000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether given quadruple precision number is positive or negative\r\n   * infinity.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return true if x is positive or negative infinity, false otherwise\r\n   */\r\n  function isInfinity (bytes16 x) internal pure returns (bool) {\r\n    unchecked {\r\n      return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\r\n        0x7FFF0000000000000000000000000000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\r\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @return sign of x\r\n   */\r\n  function sign (bytes16 x) internal pure returns (int8) {\r\n    unchecked {\r\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n      if (absoluteX == 0) return 0;\r\n      else if (uint128 (x) >= 0x80000000000000000000000000000000) return -1;\r\n      else return 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\r\n   * arguments are infinities of the same sign. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return sign (x - y)\r\n   */\r\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\r\n    unchecked {\r\n      uint128 absoluteX = uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      require (absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n      uint128 absoluteY = uint128 (y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      require (absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n      // Not infinities of the same sign\r\n      require (x != y || absoluteX < 0x7FFF0000000000000000000000000000);\r\n\r\n      if (x == y) return 0;\r\n      else {\r\n        bool negativeX = uint128 (x) >= 0x80000000000000000000000000000000;\r\n        bool negativeY = uint128 (y) >= 0x80000000000000000000000000000000;\r\n\r\n        if (negativeX) {\r\n          if (negativeY) return absoluteX > absoluteY ? -1 : int8 (1);\r\n          else return -1; \r\n        } else {\r\n          if (negativeY) return 1;\r\n          else return absoluteX > absoluteY ? int8 (1) : -1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\r\n   * anything. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return true if x equals to y, false otherwise\r\n   */\r\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\r\n    unchecked {\r\n      if (x == y) {\r\n        return uint128 (x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\r\n          0x7FFF0000000000000000000000000000;\r\n      } else return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Special values behave in the following way:\r\n   *\r\n   * NaN + x = NaN for any x.\r\n   * Infinity + x = Infinity for any finite x.\r\n   * -Infinity + x = -Infinity for any finite x.\r\n   * Infinity + Infinity = Infinity.\r\n   * -Infinity + -Infinity = -Infinity.\r\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    unchecked {\r\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n      if (xExponent == 0x7FFF) {\r\n        if (yExponent == 0x7FFF) { \r\n          if (x == y) return x;\r\n          else return NaN;\r\n        } else return x; \r\n      } else if (yExponent == 0x7FFF) return y;\r\n      else {\r\n        bool xSign = uint128 (x) >= 0x80000000000000000000000000000000;\r\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        bool ySign = uint128 (y) >= 0x80000000000000000000000000000000;\r\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (yExponent == 0) yExponent = 1;\r\n        else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n        if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\r\n        else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\r\n        else {\r\n          int256 delta = int256 (xExponent) - int256 (yExponent);\r\n  \r\n          if (xSign == ySign) {\r\n            if (delta > 112) return x;\r\n            else if (delta > 0) ySignifier >>= uint256 (delta);\r\n            else if (delta < -112) return y;\r\n            else if (delta < 0) {\r\n              xSignifier >>= uint256 (-delta);\r\n              xExponent = yExponent;\r\n            }\r\n  \r\n            xSignifier += ySignifier;\r\n  \r\n            if (xSignifier >= 0x20000000000000000000000000000) {\r\n              xSignifier >>= 1;\r\n              xExponent += 1;\r\n            }\r\n  \r\n            if (xExponent == 0x7FFF)\r\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n            else {\r\n              if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\r\n              else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n  \r\n              return bytes16 (uint128 (\r\n                  (xSign ? 0x80000000000000000000000000000000 : 0) |\r\n                  (xExponent << 112) |\r\n                  xSignifier)); \r\n            }\r\n          } else {\r\n            if (delta > 0) {\r\n              xSignifier <<= 1;\r\n              xExponent -= 1;\r\n            } else if (delta < 0) {\r\n              ySignifier <<= 1;\r\n              xExponent = yExponent - 1;\r\n            }\r\n\r\n            if (delta > 112) ySignifier = 1;\r\n            else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256 (delta - 1)) + 1;\r\n            else if (delta < -112) xSignifier = 1;\r\n            else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256 (-delta - 1)) + 1;\r\n\r\n            if (xSignifier >= ySignifier) xSignifier -= ySignifier;\r\n            else {\r\n              xSignifier = ySignifier - xSignifier;\r\n              xSign = ySign;\r\n            }\r\n\r\n            if (xSignifier == 0)\r\n              return POSITIVE_ZERO;\r\n\r\n            uint256 msb = mostSignificantBit (xSignifier);\r\n\r\n            if (msb == 113) {\r\n              xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n              xExponent += 1;\r\n            } else if (msb < 112) {\r\n              uint256 shift = 112 - msb;\r\n              if (xExponent > shift) {\r\n                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                xExponent -= shift;\r\n              } else {\r\n                xSignifier <<= xExponent - 1;\r\n                xExponent = 0;\r\n              }\r\n            } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n            if (xExponent == 0x7FFF)\r\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n            else return bytes16 (uint128 (\r\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\r\n                (xExponent << 112) |\r\n                xSignifier));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Special values behave in the following way:\r\n   *\r\n   * NaN - x = NaN for any x.\r\n   * Infinity - x = Infinity for any finite x.\r\n   * -Infinity - x = -Infinity for any finite x.\r\n   * Infinity - -Infinity = Infinity.\r\n   * -Infinity - Infinity = -Infinity.\r\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return add (x, y ^ 0x80000000000000000000000000000000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y.  Special values behave in the following way:\r\n   *\r\n   * NaN * x = NaN for any x.\r\n   * Infinity * x = Infinity for any finite positive x.\r\n   * Infinity * x = -Infinity for any finite negative x.\r\n   * -Infinity * x = -Infinity for any finite positive x.\r\n   * -Infinity * x = Infinity for any finite negative x.\r\n   * Infinity * 0 = NaN.\r\n   * -Infinity * 0 = NaN.\r\n   * Infinity * Infinity = Infinity.\r\n   * Infinity * -Infinity = -Infinity.\r\n   * -Infinity * Infinity = -Infinity.\r\n   * -Infinity * -Infinity = Infinity.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    unchecked {\r\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n      if (xExponent == 0x7FFF) {\r\n        if (yExponent == 0x7FFF) {\r\n          if (x == y) return x ^ y & 0x80000000000000000000000000000000;\r\n          else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\r\n          else return NaN;\r\n        } else {\r\n          if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n          else return x ^ y & 0x80000000000000000000000000000000;\r\n        }\r\n      } else if (yExponent == 0x7FFF) {\r\n          if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n          else return y ^ x & 0x80000000000000000000000000000000;\r\n      } else {\r\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (yExponent == 0) yExponent = 1;\r\n        else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n        xSignifier *= ySignifier;\r\n        if (xSignifier == 0)\r\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\r\n              NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n        xExponent += yExponent;\r\n\r\n        uint256 msb =\r\n          xSignifier >= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\r\n          xSignifier >= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\r\n          mostSignificantBit (xSignifier);\r\n\r\n        if (xExponent + msb < 16496) { // Underflow\r\n          xExponent = 0;\r\n          xSignifier = 0;\r\n        } else if (xExponent + msb < 16608) { // Subnormal\r\n          if (xExponent < 16496)\r\n            xSignifier >>= 16496 - xExponent;\r\n          else if (xExponent > 16496)\r\n            xSignifier <<= xExponent - 16496;\r\n          xExponent = 0;\r\n        } else if (xExponent + msb > 49373) {\r\n          xExponent = 0x7FFF;\r\n          xSignifier = 0;\r\n        } else {\r\n          if (msb > 112)\r\n            xSignifier >>= msb - 112;\r\n          else if (msb < 112)\r\n            xSignifier <<= 112 - msb;\r\n\r\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n          xExponent = xExponent + msb - 16607;\r\n        }\r\n\r\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\r\n            xExponent << 112 | xSignifier));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y.  Special values behave in the following way:\r\n   *\r\n   * NaN / x = NaN for any x.\r\n   * x / NaN = NaN for any x.\r\n   * Infinity / x = Infinity for any finite non-negative x.\r\n   * Infinity / x = -Infinity for any finite negative x including -0.\r\n   * -Infinity / x = -Infinity for any finite non-negative x.\r\n   * -Infinity / x = Infinity for any finite negative x including -0.\r\n   * x / Infinity = 0 for any finite non-negative x.\r\n   * x / -Infinity = -0 for any finite non-negative x.\r\n   * x / Infinity = -0 for any finite non-negative x including -0.\r\n   * x / -Infinity = 0 for any finite non-negative x including -0.\r\n   * \r\n   * Infinity / Infinity = NaN.\r\n   * Infinity / -Infinity = -NaN.\r\n   * -Infinity / Infinity = -NaN.\r\n   * -Infinity / -Infinity = NaN.\r\n   *\r\n   * Division by zero behaves in the following way:\r\n   *\r\n   * x / 0 = Infinity for any finite positive x.\r\n   * x / -0 = -Infinity for any finite positive x.\r\n   * x / 0 = -Infinity for any finite negative x.\r\n   * x / -0 = Infinity for any finite negative x.\r\n   * 0 / 0 = NaN.\r\n   * 0 / -0 = NaN.\r\n   * -0 / 0 = NaN.\r\n   * -0 / -0 = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    unchecked {\r\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;\r\n\r\n      if (xExponent == 0x7FFF) {\r\n        if (yExponent == 0x7FFF) return NaN;\r\n        else return x ^ y & 0x80000000000000000000000000000000;\r\n      } else if (yExponent == 0x7FFF) {\r\n        if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\r\n        else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\r\n      } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\r\n        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n        else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\r\n      } else {\r\n        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (yExponent == 0) yExponent = 1;\r\n        else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) {\r\n          if (xSignifier != 0) {\r\n            uint shift = 226 - mostSignificantBit (xSignifier);\r\n\r\n            xSignifier <<= shift;\r\n\r\n            xExponent = 1;\r\n            yExponent += shift - 114;\r\n          }\r\n        }\r\n        else {\r\n          xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\r\n        }\r\n\r\n        xSignifier = xSignifier / ySignifier;\r\n        if (xSignifier == 0)\r\n          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?\r\n              NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n        assert (xSignifier >= 0x1000000000000000000000000000);\r\n\r\n        uint256 msb =\r\n          xSignifier >= 0x80000000000000000000000000000 ? mostSignificantBit (xSignifier) :\r\n          xSignifier >= 0x40000000000000000000000000000 ? 114 :\r\n          xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\r\n\r\n        if (xExponent + msb > yExponent + 16497) { // Overflow\r\n          xExponent = 0x7FFF;\r\n          xSignifier = 0;\r\n        } else if (xExponent + msb + 16380  < yExponent) { // Underflow\r\n          xExponent = 0;\r\n          xSignifier = 0;\r\n        } else if (xExponent + msb + 16268  < yExponent) { // Subnormal\r\n          if (xExponent + 16380 > yExponent)\r\n            xSignifier <<= xExponent + 16380 - yExponent;\r\n          else if (xExponent + 16380 < yExponent)\r\n            xSignifier >>= yExponent - xExponent - 16380;\r\n\r\n          xExponent = 0;\r\n        } else { // Normal\r\n          if (msb > 112)\r\n            xSignifier >>= msb - 112;\r\n\r\n          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n          xExponent = xExponent + msb + 16269 - yExponent;\r\n        }\r\n\r\n        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |\r\n            xExponent << 112 | xSignifier));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function neg (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return x ^ 0x80000000000000000000000000000000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function abs (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (uint128 (x) >  0x80000000000000000000000000000000) return NaN;\r\n      else {\r\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n        if (xExponent == 0x7FFF) return x;\r\n        else {\r\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          if (xExponent == 0) xExponent = 1;\r\n          else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n          if (xSignifier == 0) return POSITIVE_ZERO;\r\n\r\n          bool oddExponent = xExponent & 0x1 == 0;\r\n          xExponent = xExponent + 16383 >> 1;\r\n\r\n          if (oddExponent) {\r\n            if (xSignifier >= 0x10000000000000000000000000000)\r\n              xSignifier <<= 113;\r\n            else {\r\n              uint256 msb = mostSignificantBit (xSignifier);\r\n              uint256 shift = (226 - msb) & 0xFE;\r\n              xSignifier <<= shift;\r\n              xExponent -= shift - 112 >> 1;\r\n            }\r\n          } else {\r\n            if (xSignifier >= 0x10000000000000000000000000000)\r\n              xSignifier <<= 112;\r\n            else {\r\n              uint256 msb = mostSignificantBit (xSignifier);\r\n              uint256 shift = (225 - msb) & 0xFE;\r\n              xSignifier <<= shift;\r\n              xExponent -= shift - 112 >> 1;\r\n            }\r\n          }\r\n\r\n          uint256 r = 0x10000000000000000000000000000;\r\n          r = (r + xSignifier / r) >> 1;\r\n          r = (r + xSignifier / r) >> 1;\r\n          r = (r + xSignifier / r) >> 1;\r\n          r = (r + xSignifier / r) >> 1;\r\n          r = (r + xSignifier / r) >> 1;\r\n          r = (r + xSignifier / r) >> 1;\r\n          r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\r\n          uint256 r1 = xSignifier / r;\r\n          if (r1 < r) r = r1;\r\n\r\n          return bytes16 (uint128 (xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (uint128 (x) > 0x80000000000000000000000000000000) return NaN;\r\n      else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \r\n      else {\r\n        uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n        if (xExponent == 0x7FFF) return x;\r\n        else {\r\n          uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          if (xExponent == 0) xExponent = 1;\r\n          else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n          if (xSignifier == 0) return NEGATIVE_INFINITY;\r\n\r\n          bool resultNegative;\r\n          uint256 resultExponent = 16495;\r\n          uint256 resultSignifier;\r\n\r\n          if (xExponent >= 0x3FFF) {\r\n            resultNegative = false;\r\n            resultSignifier = xExponent - 0x3FFF;\r\n            xSignifier <<= 15;\r\n          } else {\r\n            resultNegative = true;\r\n            if (xSignifier >= 0x10000000000000000000000000000) {\r\n              resultSignifier = 0x3FFE - xExponent;\r\n              xSignifier <<= 15;\r\n            } else {\r\n              uint256 msb = mostSignificantBit (xSignifier);\r\n              resultSignifier = 16493 - msb;\r\n              xSignifier <<= 127 - msb;\r\n            }\r\n          }\r\n\r\n          if (xSignifier == 0x80000000000000000000000000000000) {\r\n            if (resultNegative) resultSignifier += 1;\r\n            uint256 shift = 112 - mostSignificantBit (resultSignifier);\r\n            resultSignifier <<= shift;\r\n            resultExponent -= shift;\r\n          } else {\r\n            uint256 bb = resultNegative ? 1 : 0;\r\n            while (resultSignifier < 0x10000000000000000000000000000) {\r\n              resultSignifier <<= 1;\r\n              resultExponent -= 1;\r\n  \r\n              xSignifier *= xSignifier;\r\n              uint256 b = xSignifier >> 255;\r\n              resultSignifier += b ^ bb;\r\n              xSignifier >>= 127 + b;\r\n            }\r\n          }\r\n\r\n          return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\r\n              resultExponent << 112 | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function ln (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate 2^x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      bool xNegative = uint128 (x) > 0x80000000000000000000000000000000;\r\n      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;\r\n      uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\r\n      else if (xExponent > 16397)\r\n        return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\r\n      else if (xExponent < 16255)\r\n        return 0x3FFF0000000000000000000000000000;\r\n      else {\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        if (xExponent > 16367)\r\n          xSignifier <<= xExponent - 16367;\r\n        else if (xExponent < 16367)\r\n          xSignifier >>= 16367 - xExponent;\r\n\r\n        if (xNegative && xSignifier > 0x406E00000000000000000000000000000000)\r\n          return POSITIVE_ZERO;\r\n\r\n        if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n          return POSITIVE_INFINITY;\r\n\r\n        uint256 resultExponent = xSignifier >> 128;\r\n        xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xNegative && xSignifier != 0) {\r\n          xSignifier = ~xSignifier;\r\n          resultExponent += 1;\r\n        }\r\n\r\n        uint256 resultSignifier = 0x80000000000000000000000000000000;\r\n        if (xSignifier & 0x80000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n        if (xSignifier & 0x40000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n        if (xSignifier & 0x20000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n        if (xSignifier & 0x10000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n        if (xSignifier & 0x8000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n        if (xSignifier & 0x4000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n        if (xSignifier & 0x2000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n        if (xSignifier & 0x1000000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n        if (xSignifier & 0x800000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n        if (xSignifier & 0x400000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n        if (xSignifier & 0x200000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n        if (xSignifier & 0x100000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n        if (xSignifier & 0x80000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n        if (xSignifier & 0x40000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n        if (xSignifier & 0x20000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\r\n        if (xSignifier & 0x10000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n        if (xSignifier & 0x8000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n        if (xSignifier & 0x4000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n        if (xSignifier & 0x2000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n        if (xSignifier & 0x1000000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n        if (xSignifier & 0x800000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n        if (xSignifier & 0x400000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n        if (xSignifier & 0x200000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n        if (xSignifier & 0x100000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n        if (xSignifier & 0x80000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n        if (xSignifier & 0x40000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n        if (xSignifier & 0x20000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n        if (xSignifier & 0x10000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n        if (xSignifier & 0x8000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n        if (xSignifier & 0x4000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n        if (xSignifier & 0x2000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n        if (xSignifier & 0x1000000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n        if (xSignifier & 0x800000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n        if (xSignifier & 0x400000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n        if (xSignifier & 0x200000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n        if (xSignifier & 0x100000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n        if (xSignifier & 0x80000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n        if (xSignifier & 0x40000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n        if (xSignifier & 0x20000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n        if (xSignifier & 0x10000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n        if (xSignifier & 0x8000000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n        if (xSignifier & 0x4000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n        if (xSignifier & 0x2000000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n        if (xSignifier & 0x1000000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n        if (xSignifier & 0x800000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n        if (xSignifier & 0x400000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n        if (xSignifier & 0x200000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n        if (xSignifier & 0x100000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n        if (xSignifier & 0x80000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n        if (xSignifier & 0x40000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n        if (xSignifier & 0x20000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n        if (xSignifier & 0x10000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n        if (xSignifier & 0x8000000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n        if (xSignifier & 0x4000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n        if (xSignifier & 0x2000000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n        if (xSignifier & 0x1000000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n        if (xSignifier & 0x800000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n        if (xSignifier & 0x400000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n        if (xSignifier & 0x200000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n        if (xSignifier & 0x100000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n        if (xSignifier & 0x80000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n        if (xSignifier & 0x40000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n        if (xSignifier & 0x20000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n        if (xSignifier & 0x10000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n        if (xSignifier & 0x8000000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\r\n        if (xSignifier & 0x4000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\r\n        if (xSignifier & 0x2000000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\r\n        if (xSignifier & 0x1000000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\r\n        if (xSignifier & 0x800000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\r\n        if (xSignifier & 0x400000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\r\n        if (xSignifier & 0x200000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\r\n        if (xSignifier & 0x100000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\r\n        if (xSignifier & 0x80000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\r\n        if (xSignifier & 0x40000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\r\n        if (xSignifier & 0x20000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\r\n        if (xSignifier & 0x10000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\r\n        if (xSignifier & 0x8000000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\r\n        if (xSignifier & 0x4000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\r\n        if (xSignifier & 0x2000000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\r\n        if (xSignifier & 0x1000000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\r\n        if (xSignifier & 0x800000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\r\n        if (xSignifier & 0x400000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\r\n        if (xSignifier & 0x200000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\r\n        if (xSignifier & 0x100000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\r\n        if (xSignifier & 0x80000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\r\n        if (xSignifier & 0x40000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\r\n        if (xSignifier & 0x20000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\r\n        if (xSignifier & 0x10000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\r\n        if (xSignifier & 0x8000000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\r\n        if (xSignifier & 0x4000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\r\n        if (xSignifier & 0x2000000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\r\n        if (xSignifier & 0x1000000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\r\n        if (xSignifier & 0x800000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\r\n        if (xSignifier & 0x400000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\r\n        if (xSignifier & 0x200000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\r\n        if (xSignifier & 0x100000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\r\n        if (xSignifier & 0x80000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\r\n        if (xSignifier & 0x40000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\r\n        if (xSignifier & 0x20000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\r\n        if (xSignifier & 0x10000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\r\n        if (xSignifier & 0x8000000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\r\n        if (xSignifier & 0x4000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\r\n        if (xSignifier & 0x2000000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\r\n        if (xSignifier & 0x1000000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\r\n        if (xSignifier & 0x800000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\r\n        if (xSignifier & 0x400000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\r\n        if (xSignifier & 0x200000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\r\n        if (xSignifier & 0x100000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\r\n        if (xSignifier & 0x80000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\r\n        if (xSignifier & 0x40000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\r\n        if (xSignifier & 0x20000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\r\n        if (xSignifier & 0x10000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\r\n        if (xSignifier & 0x8000 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\r\n        if (xSignifier & 0x4000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\r\n        if (xSignifier & 0x2000 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\r\n        if (xSignifier & 0x1000 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\r\n        if (xSignifier & 0x800 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\r\n        if (xSignifier & 0x400 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\r\n        if (xSignifier & 0x200 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\r\n        if (xSignifier & 0x100 > 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\r\n        if (xSignifier & 0x80 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\r\n        if (xSignifier & 0x40 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\r\n        if (xSignifier & 0x20 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\r\n        if (xSignifier & 0x10 > 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\r\n        if (xSignifier & 0x8 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\r\n        if (xSignifier & 0x4 > 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\r\n\r\n        if (!xNegative) {\r\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          resultExponent += 0x3FFF;\r\n        } else if (resultExponent <= 0x3FFE) {\r\n          resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          resultExponent = 0x3FFF - resultExponent;\r\n        } else {\r\n          resultSignifier = resultSignifier >> resultExponent - 16367;\r\n          resultExponent = 0;\r\n        }\r\n\r\n        return bytes16 (uint128 (resultExponent << 112 | resultSignifier));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate e^x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function exp (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of the most significant non-zero bit in binary representation of\r\n   * x.  Reverts if x is zero.\r\n   *\r\n   * @return index of the most significant non-zero bit in binary representation\r\n   *         of x\r\n   */\r\n  function mostSignificantBit (uint256 x) private pure returns (uint256) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      uint256 result = 0;\r\n\r\n      if (x >= 0x100000000000000000000000000000000) { x >>= 128; result += 128; }\r\n      if (x >= 0x10000000000000000) { x >>= 64; result += 64; }\r\n      if (x >= 0x100000000) { x >>= 32; result += 32; }\r\n      if (x >= 0x10000) { x >>= 16; result += 16; }\r\n      if (x >= 0x100) { x >>= 8; result += 8; }\r\n      if (x >= 0x10) { x >>= 4; result += 4; }\r\n      if (x >= 0x4) { x >>= 2; result += 2; }\r\n      if (x >= 0x2) result += 1; // No need to shift x anymore\r\n\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/libraries/errors/Errors.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary Errors {\r\n    /// @notice Error thrown when the lpToken address is not supported\r\n    /// @dev List of supported LpTokens is defined in {LiquidityMining._lpTokens}\r\n    string public constant LP_TOKEN_NOT_SUPPORTED = \"PT_701\";\r\n    /// @notice Error thrown when the caller / msgSender is not a Pause Manager address.\r\n    /// @dev Pause Manager can be defined by the smart contract's Onwer\r\n    string public constant CALLER_NOT_PAUSE_MANAGER = \"PT_704\";\r\n    /// @notice Error thrown when the account's base balance is too low\r\n    string public constant ACCOUNT_BASE_BALANCE_IS_TOO_LOW = \"PT_705\";\r\n    /// @notice Error thrown when the account's Lp Token balance is too low\r\n    string public constant ACCOUNT_LP_TOKEN_BALANCE_IS_TOO_LOW = \"PT_706\";\r\n    /// @notice Error thrown when the account's delegated balance is too low\r\n    string public constant ACC_DELEGATED_TO_LIQUIDITY_MINING_BALANCE_IS_TOO_LOW = \"PT_707\";\r\n    /// @notice Error thrown when the account's available Power Token balance is too low\r\n    string public constant ACC_AVAILABLE_POWER_TOKEN_BALANCE_IS_TOO_LOW = \"PT_708\";\r\n    /// @notice Error thrown when the account doesn't have the rewards (Staked Tokens / Power Tokens) to claim\r\n    string public constant NO_REWARDS_TO_CLAIM = \"PT_709\";\r\n    /// @notice Error thrown when the cooldown is not finished.\r\n    string public constant COOL_DOWN_NOT_FINISH = \"PT_710\";\r\n    /// @notice Error thrown when the aggregate power up indicator is going to be negative during the calculation.\r\n    string public constant AGGREGATE_POWER_UP_COULD_NOT_BE_NEGATIVE = \"PT_711\";\r\n    /// @notice Error thrown when the block number used in the function is lower than previous block number stored in the liquidity mining indicators.\r\n    string public constant BLOCK_NUMBER_LOWER_THAN_PREVIOUS_BLOCK_NUMBER = \"PT_712\";\r\n    /// @notice Account Composite Multiplier indicator is greater or equal to Composit Multiplier indicator, but it should be lower or equal\r\n    string public constant ACCOUNT_COMPOSITE_MULTIPLIER_GT_COMPOSITE_MULTIPLIER = \"PT_713\";\r\n    /// @notice The fee for unstacking of Power Tokens should be number between (0, 1e18)\r\n    string public constant UNSTAKE_WITHOUT_COOLDOWN_FEE_IS_TO_HIGH = \"PT_714\";\r\n    /// @notice General problem, address is wrong\r\n    string public constant WRONG_ADDRESS = \"PT_715\";\r\n    /// @notice General problem, contract is wrong\r\n    string public constant WRONG_CONTRACT_ID = \"PT_716\";\r\n    /// @notice Value not greater than zero\r\n    string public constant VALUE_NOT_GREATER_THAN_ZERO = \"PT_717\";\r\n    /// @notice Appeared when input of two arrays length mismatch\r\n    string public constant INPUT_ARRAYS_LENGTH_MISMATCH = \"PT_718\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant SENDER_NOT_APPOINTED_OWNER = \"PT_719\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant ROUTER_INVALID_SIGNATURE = \"PT_720\";\r\n    string public constant INPUT_ARRAYS_EMPTY = \"PT_721\";\r\n    string public constant CALLER_NOT_ROUTER = \"PT_722\";\r\n    string public constant CALLER_NOT_GUARDIAN = \"PT_723\";\r\n    string public constant CONTRACT_PAUSED = \"PT_724\";\r\n    string public constant REENTRANCY = \"PT_725\";\r\n    string public constant CALLER_NOT_OWNER = \"PT_726\";\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/libraries/ContractValidator.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nlibrary ContractValidator {\r\n    function checkAddress(address addr) internal pure returns (address) {\r\n        require(addr != address(0), Errors.WRONG_ADDRESS);\r\n        return addr;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/libraries/math/MiningCalculation.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n/// @title Library containing the core logic used in the Liquidity Mining module.\r\nlibrary MiningCalculation {\r\n    bytes16 constant N0_00 = 0x00000000000000000000000000000000;\r\n    bytes16 constant N0_01 = 0x3ff847ae147ae147b74da9ca30cfea4b; //0.01\r\n    bytes16 constant N0_02 = 0x3ff947ae147ae147b2b11255bc3eff63; // 0.02\r\n    bytes16 constant N0_03 = 0x3ff9eb851eb851eb89bb4fc6601609a0; // 0.03\r\n    bytes16 constant N0_04 = 0x3ffa47ae147ae147b062c69b81f689ee; // 0.04\r\n    bytes16 constant N0_05 = 0x3ffa9999999999999be7e553d3e20f0d; // 0.05\r\n\r\n    bytes16 constant SLOPE_1 = 0x40024000000000000000000000000000; //   10.0\r\n    bytes16 constant BASE_1 = 0x3ffc9999999999999a2d2c88282bb6f6; //    0.2\r\n\r\n    bytes16 constant SLOPE_2 = 0x40010000000000000000000000000000; //   4.0\r\n    bytes16 constant BASE_2 = 0x3ffd0a3d70a3d70a3dba6d4e51867f52; //    0.26\r\n\r\n    bytes16 constant SLOPE_3 = 0x40008000000000000000000000000000; //   3.0\r\n    bytes16 constant BASE_3 = 0x3ffd1eb851eb851eb89bb4fc6601609a; //    0.28\r\n\r\n    bytes16 constant SLOPE_4 = 0x40000000000000000000000000000000; //   2.0\r\n    bytes16 constant BASE_4 = 0x3ffd3d70a3d70a3d70eda08184b9b285; //    0.31\r\n\r\n    bytes16 constant SLOPE_5 = 0x3fff0000000000000000000000000000; //   2.0\r\n    bytes16 constant BASE_5 = 0x3ffd66666666666666b02fddadaf7514; //    0.31\r\n\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n\r\n    /// @notice Calculases the Power-up indicator for a given account.\r\n    /// @param accountPwTokenAmount account's Power Tokens amount\r\n    /// @param accountLpTokenAmount account's lpTokens amount\r\n    /// @param verticalShift preconfigured param, vertical shift used in equation calculating the account's power-up\r\n    /// @param horizontalShift preconfigured param, horizontal shift used in equation calculating account's power-up\r\n    /// @return power-up indicator of a given account\r\n    function calculateAccountPowerUp(\r\n        uint256 accountPwTokenAmount,\r\n        uint256 accountLpTokenAmount,\r\n        bytes16 verticalShift,\r\n        bytes16 horizontalShift\r\n    ) internal pure returns (uint256) {\r\n        if (accountLpTokenAmount < 1e18) {\r\n            return 0;\r\n        }\r\n\r\n        bytes16 accountPwTokenAmountQP = _toQuadruplePrecision(accountPwTokenAmount, 1e18);\r\n        bytes16 lpTokenAmountQP = _toQuadruplePrecision(accountLpTokenAmount, 1e18);\r\n        bytes16 ratio = ABDKMathQuad.div(accountPwTokenAmountQP, lpTokenAmountQP);\r\n\r\n        bytes16 result;\r\n        if (ABDKMathQuad.cmp(N0_05, ratio) >= 0) {\r\n            result = accountPowerUpStepFunction(ratio);\r\n        } else {\r\n            bytes16 pwTokenAmountWithModifierQP = ABDKMathQuad.mul(\r\n                _getPwTokenModifier(),\r\n                accountPwTokenAmountQP\r\n            );\r\n\r\n            bytes16 underLog = ABDKMathQuad.add(\r\n                ABDKMathQuad.div(pwTokenAmountWithModifierQP, lpTokenAmountQP),\r\n                horizontalShift\r\n            );\r\n\r\n            result = ABDKMathQuad.add(verticalShift, ABDKMathQuad.log_2(underLog));\r\n        }\r\n        bytes16 resultD18 = ABDKMathQuad.mul(result, ABDKMathQuad.fromUInt(1e18));\r\n\r\n        return ABDKMathQuad.toUInt(resultD18);\r\n    }\r\n\r\n    /// @notice Calculates the aggreagated power-up. Aggregate power-up is a synthetic summary of all power-ups across all users.\r\n    /// It's used to calculate the individual rewards in relation to the rest of the pool.\r\n    /// @param accountPowerUp power up indicator is calculated for a given account\r\n    /// @param accountLpTokenAmount lpToken amount for a given account\r\n    /// @param previousAccountPowerUp previous power-up indicator for a given account\r\n    /// @param previousAccountLpTokenAmount previous lpToken amount for a given account\r\n    /// @param previousAggregatedPowerUp previous aggregated power-up indicator\r\n    function calculateAggregatedPowerUp(\r\n        uint256 accountPowerUp,\r\n        uint256 accountLpTokenAmount,\r\n        uint256 previousAccountPowerUp,\r\n        uint256 previousAccountLpTokenAmount,\r\n        uint256 previousAggregatedPowerUp\r\n    ) internal pure returns (uint256) {\r\n        int256 apu = accountPowerUp.toInt256() *\r\n            accountLpTokenAmount.toInt256() -\r\n            previousAccountPowerUp.toInt256() *\r\n            previousAccountLpTokenAmount.toInt256();\r\n\r\n        uint256 newApu;\r\n\r\n        if (apu < 0) {\r\n            uint256 absApu = MathOperation.division((-apu).toUint256(), 1e18);\r\n\r\n            /// @dev the last unstaking of lpTokens can experience a rounding error\r\n            if (previousAggregatedPowerUp < absApu && previousAggregatedPowerUp + 10000 >= absApu) {\r\n                return 0;\r\n            }\r\n\r\n            require(\r\n                previousAggregatedPowerUp >= absApu,\r\n                Errors.AGGREGATE_POWER_UP_COULD_NOT_BE_NEGATIVE\r\n            );\r\n\r\n            newApu = previousAggregatedPowerUp - absApu;\r\n        } else {\r\n            newApu = previousAggregatedPowerUp + MathOperation.division(apu.toUint256(), 1e18);\r\n        }\r\n\r\n        if (newApu < 10000) {\r\n            return 0;\r\n        }\r\n        return newApu;\r\n    }\r\n\r\n    /// @notice Calculates the rewards from last rebalancing including block number given as a param.\r\n    /// @param blockNumber block number for which the rewards calculation is executed\r\n    /// @param lastRebalanceBlockNumber block number when last rewards rebalance was executed\r\n    /// @param rewardsPerBlock configuration param describing how many pwTokens are rewarded across all participants per one block, represendet with 8 decimals\r\n    /// @param previousAccruedRewards number of previously cumulated/accrued rewards\r\n    /// @return new accrued rewards, amount of Power Tokens accrued for given params\r\n    function calculateAccruedRewards(\r\n        uint256 blockNumber,\r\n        uint256 lastRebalanceBlockNumber,\r\n        uint256 rewardsPerBlock,\r\n        uint256 previousAccruedRewards\r\n    ) internal pure returns (uint256) {\r\n        require(\r\n            blockNumber >= lastRebalanceBlockNumber,\r\n            Errors.BLOCK_NUMBER_LOWER_THAN_PREVIOUS_BLOCK_NUMBER\r\n        );\r\n        uint256 newRewards = (blockNumber - lastRebalanceBlockNumber) * rewardsPerBlock * 1e10;\r\n        return previousAccruedRewards + newRewards;\r\n    }\r\n\r\n    /// @notice Calculates the Composite Multiplier Indicator\r\n    /// @param rewardsPerBlock config param, number of Power Token rewardes across all participants in one block, represented with 8 decimals\r\n    /// @param aggregatedPowerUp Aggregated Power-up indicator, represented with 18 decimals\r\n    /// @return composite multiplier, value represented with 27 decimals\r\n    function calculateCompositeMultiplier(\r\n        uint256 rewardsPerBlock,\r\n        uint256 aggregatedPowerUp\r\n    ) internal pure returns (uint256) {\r\n        if (aggregatedPowerUp == 0) {\r\n            return 0;\r\n        }\r\n        /// @dev decimals: 8 + 18 + 19 - 18 = 27\r\n        return MathOperation.division(rewardsPerBlock * 1e18 * 1e19, aggregatedPowerUp);\r\n    }\r\n\r\n    /// @notice calculates the account's rewards issued in pwTokens\r\n    /// @param accountLpTokenAmount amount of lpTokens for a given account\r\n    /// @param accountPowerUp value of power-up indicator for a given account\r\n    /// @param accountCompMultiplierCumulativePrevBlock Account Composite Multiplier Cumulative for the Previous Block, value from last Account Indicator update of param Composite Multiplier Cumulative for a given account\r\n    /// @param accruedCompMultiplierCumulativePrevBlock Accrued Composite Multiplier Cumulative for the Previous Block, accrued value (in a current block) of param Composite Multiplier Cumulative global\r\n    /// @return rewards, amount of Staked Tokens (or Power Tokens because are in 1:1 relation with Staked Tokens), represented with 18 decimals\r\n    function calculateAccountRewards(\r\n        uint256 accountLpTokenAmount,\r\n        uint256 accountPowerUp,\r\n        uint256 accountCompMultiplierCumulativePrevBlock,\r\n        uint256 accruedCompMultiplierCumulativePrevBlock\r\n    ) internal pure returns (uint256) {\r\n        require(\r\n            accruedCompMultiplierCumulativePrevBlock >= accountCompMultiplierCumulativePrevBlock,\r\n            Errors.ACCOUNT_COMPOSITE_MULTIPLIER_GT_COMPOSITE_MULTIPLIER\r\n        );\r\n\r\n        uint256 accountGovernanceTokenRewards = accountLpTokenAmount *\r\n            accountPowerUp *\r\n            (accruedCompMultiplierCumulativePrevBlock - accountCompMultiplierCumulativePrevBlock);\r\n\r\n        /// @dev decimals: 18 + 18 + 27 - 45 =  18\r\n        return MathOperation.division(accountGovernanceTokenRewards, 1e45);\r\n    }\r\n\r\n    /// @notice Calculates the accrued Composite Multiplier Cumulative for the previous block\r\n    /// @param currentBlockNumber Current block number\r\n    /// @param globalIndBlockNumber Block number of the last update of the Global Indicators\r\n    /// @param globalIndCompositeMultiplierInTheBlock Configuration param - Composite Multiplier for one block defined in Global Indicators\r\n    /// @param globalIndCompositeMultiplierCumulativePrevBlock Compositne Multiplier Comulative for a previous block defined in Global Indicators structure.\r\n    function calculateAccruedCompMultiplierCumulativePrevBlock(\r\n        uint256 currentBlockNumber,\r\n        uint256 globalIndBlockNumber,\r\n        uint256 globalIndCompositeMultiplierInTheBlock,\r\n        uint256 globalIndCompositeMultiplierCumulativePrevBlock\r\n    ) internal pure returns (uint256) {\r\n        return\r\n            globalIndCompositeMultiplierCumulativePrevBlock +\r\n            (currentBlockNumber - globalIndBlockNumber) *\r\n            globalIndCompositeMultiplierInTheBlock;\r\n    }\r\n\r\n    function accountPowerUpStepFunction(bytes16 ratio) internal pure returns (bytes16) {\r\n        if (ABDKMathQuad.cmp(N0_01, ratio) > 0) {\r\n            return ABDKMathQuad.add(BASE_1, ABDKMathQuad.mul(SLOPE_1, ratio));\r\n        } else if (ABDKMathQuad.cmp(N0_02, ratio) > 0) {\r\n            return ABDKMathQuad.add(BASE_2, ABDKMathQuad.mul(SLOPE_2, ratio));\r\n        } else if (ABDKMathQuad.cmp(N0_03, ratio) > 0) {\r\n            return ABDKMathQuad.add(BASE_3, ABDKMathQuad.mul(SLOPE_3, ratio));\r\n        } else if (ABDKMathQuad.cmp(N0_04, ratio) > 0) {\r\n            return ABDKMathQuad.add(BASE_4, ABDKMathQuad.mul(SLOPE_4, ratio));\r\n        } else {\r\n            return ABDKMathQuad.add(BASE_5, ABDKMathQuad.mul(SLOPE_5, ratio));\r\n        }\r\n    }\r\n\r\n    /// @dev Quadruple precision, 128 bits\r\n    function _toQuadruplePrecision(\r\n        uint256 number,\r\n        uint256 decimals\r\n    ) private pure returns (bytes16) {\r\n        if (number % decimals > 0) {\r\n            /// @dev during calculation this value is lost in the conversion\r\n            number += 1;\r\n        }\r\n        bytes16 nominator = ABDKMathQuad.fromUInt(number);\r\n        bytes16 denominator = ABDKMathQuad.fromUInt(decimals);\r\n        bytes16 fraction = ABDKMathQuad.div(nominator, denominator);\r\n        return fraction;\r\n    }\r\n\r\n    /// @dev Quadruple precision, 128 bits\r\n    function _getPwTokenModifier() private pure returns (bytes16) {\r\n        return ABDKMathQuad.fromUInt(2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\r\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```solidity\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\r\n * _Available since v4.9 for `string`, `bytes`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    struct StringSlot {\r\n        string value;\r\n    }\r\n\r\n    struct BytesSlot {\r\n        bytes value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\r\n     */\r\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\r\n     */\r\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\r\n     */\r\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\r\n *\r\n * _Available since v4.8.3._\r\n */\r\ninterface IERC1967Upgradeable {\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is changed.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822ProxiableUpgradeable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\r\n    function __ERC1967Upgrade_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\r\n    }\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(address(this) != __self, \"Function must be called through delegatecall\");\r\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\r\n     * callable on the implementing contract but not through proxies.\r\n     */\r\n    modifier notDelegated() {\r\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\r\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\r\n     */\r\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\r\n        return _IMPLEMENTATION_SLOT;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/security/MiningOwnableUpgradeable.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\ncontract MiningOwnableUpgradeable is OwnableUpgradeable {\r\n    address private _appointedOwner;\r\n\r\n    event AppointedToTransferOwnership(address indexed appointedOwner);\r\n\r\n    modifier onlyAppointedOwner() {\r\n        require(_appointedOwner == msg.sender, Errors.SENDER_NOT_APPOINTED_OWNER);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address appointedOwner) public override onlyOwner {\r\n        require(appointedOwner != address(0), Errors.WRONG_ADDRESS);\r\n        _appointedOwner = appointedOwner;\r\n        emit AppointedToTransferOwnership(appointedOwner);\r\n    }\r\n\r\n    function confirmTransferOwnership() public onlyAppointedOwner {\r\n        _appointedOwner = address(0);\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function renounceOwnership() public virtual override onlyOwner {\r\n        _transferOwnership(address(0));\r\n        _appointedOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal onlyInitializing {\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal onlyInitializing {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[45] private __gap;\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/types/LiquidityMiningTypes.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Structures used in the LiquidityMining.\r\nlibrary LiquidityMiningTypes {\r\n    /// @title Struct pair representing delegated pwToken balance\r\n    struct DelegatedPwTokenBalance {\r\n        /// @notice lpToken address\r\n        address lpToken;\r\n        /// @notice The amount of Power Token delegated to lpToken staking pool\r\n        /// @dev value represented in 18 decimals\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    /// @title Global indicators used in rewards calculation.\r\n    struct GlobalRewardsIndicators {\r\n        /// @notice powerUp indicator aggregated\r\n        /// @dev It can be changed many times during transaction, represented with 18 decimals\r\n        uint256 aggregatedPowerUp;\r\n        /// @notice composite multiplier in a block described in field blockNumber\r\n        /// @dev It can be changed many times during transaction, represented with 27 decimals\r\n        uint128 compositeMultiplierInTheBlock;\r\n        /// @notice Composite multiplier updated in block {blockNumber} but calculated for PREVIOUS (!) block.\r\n        /// @dev It can be changed once per block, represented with 27 decimals\r\n        uint128 compositeMultiplierCumulativePrevBlock;\r\n        /// @dev It can be changed once per block. Block number in which all other params of this structure are updated\r\n        uint32 blockNumber;\r\n        /// @notice value describing amount of rewards issued per block,\r\n        /// @dev It can be changed at most once per block, represented with 8 decimals\r\n        uint32 rewardsPerBlock;\r\n        /// @notice amount of accrued rewards since inception\r\n        /// @dev It can be changed at most once per block, represented with 18 decimals\r\n        uint88 accruedRewards;\r\n    }\r\n\r\n    /// @title Params recorded for a given account. These params are used by the algorithm responsible for rewards distribution.\r\n    /// @dev The structure in storage is updated when account interacts with the LiquidityMining smart contract (stake, unstake, delegate, undelegate, claim)\r\n    struct AccountRewardsIndicators {\r\n        /// @notice `composite multiplier cumulative` is calculated for previous block\r\n        /// @dev represented in 27 decimals\r\n        uint128 compositeMultiplierCumulativePrevBlock;\r\n        /// @notice lpToken account's balance\r\n        uint128 lpTokenBalance;\r\n        /// @notive PowerUp is a result of logarithmic equastion,\r\n        /// @dev  powerUp < 100 *10^18\r\n        uint72 powerUp;\r\n        /// @notice balance of Power Tokens delegated to LiquidityMining\r\n        /// @dev delegatedPwTokenBalance < 10^26 < 2^87\r\n        uint96 delegatedPwTokenBalance;\r\n    }\r\n\r\n    struct UpdateLpToken {\r\n        address beneficiary;\r\n        address lpToken;\r\n        uint256 lpTokenAmount;\r\n    }\r\n\r\n    struct UpdatePwToken {\r\n        address beneficiary;\r\n        address lpToken;\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    struct AccruedRewardsResult {\r\n        address lpToken;\r\n        uint256 rewardsAmount;\r\n    }\r\n\r\n    struct AccountRewardResult {\r\n        address lpToken;\r\n        uint256 rewardsAmount;\r\n        uint256 allocatedPwTokens;\r\n    }\r\n\r\n    struct AccountIndicatorsResult {\r\n        address lpToken;\r\n        LiquidityMiningTypes.AccountRewardsIndicators indicators;\r\n    }\r\n\r\n    struct GlobalIndicatorsResult {\r\n        address lpToken;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators indicators;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/ILiquidityMiningInternal.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title The interface for interaction with the LiquidityMining contract. Contains mainly technical methods or methods used by PowerToken smart contract.\r\ninterface ILiquidityMiningInternal {\r\n    /// @notice Returns the current version of the LiquidityMining contract\r\n    /// @return Current LiquidityMining (Liquidity Rewards) version\r\n    function getVersion() external pure returns (uint256);\r\n\r\n    /// @notice Checks if lpToken is supported by the liquidity mining module.\r\n    /// @param lpToken lpToken address\r\n    /// @return returns true if lpToken is supported by the LiquidityMining, false otherwise\r\n    function isLpTokenSupported(address lpToken) external view returns (bool);\r\n\r\n    /// @notice Sets the global configuration indicator - rewardsPerBlock for a given lpToken\r\n    /// @param lpToken address for which to setup `rewards per block`\r\n    /// @param pwTokenAmount amount of the `rewards per block`, denominated in Power Token, represented with 8 decimals\r\n    function setRewardsPerBlock(address lpToken, uint32 pwTokenAmount) external;\r\n\r\n    /// @notice Adds LiquidityMining's support for a new lpToken\r\n    /// @dev Can only be executed by the Owner\r\n    /// @param lpToken address of the lpToken\r\n    function newSupportedLpToken(address lpToken) external;\r\n\r\n    /// @notice Deprecation lpToken from the list of tokens supported by the LiquidityMining contract\r\n    /// @dev Can be executed only by the Owner. Note! That when lpToken is removed, the rewards cannot be claimed. To restore claiming, run function {addLpToken()} and {setRewardsPerBlock()}\r\n    /// @param lpToken address of the lpToken\r\n    function phasingOutLpToken(address lpToken) external;\r\n\r\n    /// @notice Pauses current smart contract, it can only be executed by the Owner\r\n    /// @dev Emits {Paused} event.\r\n    function pause() external;\r\n\r\n    /// @notice Unpauses current smart contract, it can only be executed by the Owner\r\n    /// @dev Emits {Unpaused}.\r\n    function unpause() external;\r\n\r\n    /// @notice Grants maximum allowance for a specified ERC20 token to the Router contract.\r\n    /// @param erc20Token The address of the ERC20 token for which the allowance is granted.\r\n    /// @dev This function grants maximum allowance (type(uint256).max) for the specified ERC20 token to the\r\n    /// Router contract.\r\n    /// @dev Reverts if the `erc20Token` address is zero.\r\n    function grantAllowanceForRouter(address erc20Token) external;\r\n\r\n    /// @notice Revokes the allowance for a specified ERC20 token from the Router contract.\r\n    /// @param erc20Token The address of the ERC20 token for which the allowance is to be revoked.\r\n    /// @dev This function revokes the allowance for the specified ERC20 token from the Router contract by setting the allowance to zero.\r\n    /// @dev Reverts if the `erc20Token` address is zero.\r\n    function revokeAllowanceForRouter(address erc20Token) external;\r\n\r\n    /// @notice Adds a new pause guardian to the contract.\r\n    /// @param guardians The addresses of the new pause guardians.\r\n    /// @dev Only the contract owner can call this function.\r\n    function addPauseGuardians(address[] calldata guardians) external;\r\n\r\n    /// @notice Removes a pause guardian from the contract.\r\n    /// @param guardians The addresses of the pause guardians to be removed.\r\n    /// @dev Only the contract owner can call this function.\r\n    function removePauseGuardians(address[] calldata guardians) external;\r\n\r\n    /// @notice Checks if an address is a pause guardian.\r\n    /// @param guardian The address to be checked.\r\n    /// @return A boolean indicating whether the address is a pause guardian (true) or not (false).\r\n    function isPauseGuardian(address guardian) external view returns (bool);\r\n\r\n    /// @notice Emitted when the account unstakes lpTokens\r\n    /// @param account account unstaking tokens\r\n    /// @param lpToken address of lpToken being unstaked\r\n    /// @param lpTokenAmount of lpTokens to unstake, represented with 18 decimals\r\n    event LpTokensUnstaked(address account, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the LiquidityMining's Owner changes the `rewards per block`\r\n    /// @param lpToken address of lpToken for which the `rewards per block` is changed\r\n    /// @param newPwTokenAmount new value of `rewards per block`, denominated in Power Token, represented in 8 decimals\r\n    event RewardsPerBlockChanged(address lpToken, uint256 newPwTokenAmount);\r\n\r\n    /// @notice Emitted when the LiquidityMining's Owner adds support for lpToken\r\n    /// @param account address of LiquidityMining's Owner\r\n    /// @param lpToken address of newly supported lpToken\r\n    event NewLpTokenSupported(address account, address lpToken);\r\n\r\n    /// @notice Emitted when the LiquidityMining's Owner removes ssupport for lpToken\r\n    /// @param account address of LiquidityMining's Owner\r\n    /// @param lpToken address of dropped lpToken\r\n    event LpTokenSupportRemoved(address account, address lpToken);\r\n\r\n    /// @notice Emitted when the account delegates Power Tokens to the LiquidityMining\r\n    /// @param account performing delegation\r\n    /// @param lpToken address of lpToken to which Power Token are delegated\r\n    /// @param pwTokenAmount amount of Power Tokens delegated, represented with 18 decimals\r\n    event PwTokenDelegated(address account, address lpToken, uint256 pwTokenAmount);\r\n\r\n    /// @notice Emitted when the account undelegates Power Tokens from the LiquidityMining\r\n    /// @param account undelegating\r\n    /// @param lpToken address of lpToken\r\n    /// @param pwTokenAmount amount of Power Token undelegated, represented with 18 decimals\r\n    event PwTokenUndelegated(address account, address lpToken, uint256 pwTokenAmount);\r\n\r\n    /// @notice Emitted when the PauseManager's address is changed by its owner.\r\n    /// @param newPauseManager PauseManager's new address\r\n    event PauseManagerChanged(address indexed newPauseManager);\r\n\r\n    /// @notice Emitted when owner grants allowance for router\r\n    /// @param erc20Token address of ERC20 token\r\n    /// @param router address of router\r\n    event AllowanceGranted(address indexed erc20Token, address indexed router);\r\n\r\n    /// @notice Emitted when owner revokes allowance for router\r\n    /// @param erc20Token address of ERC20 token\r\n    /// @param router address of router\r\n    event AllowanceRevoked(address indexed erc20Token, address indexed router);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/mining/LiquidityMiningInternal.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract LiquidityMiningInternal is\r\n    Initializable,\r\n    PausableUpgradeable,\r\n    UUPSUpgradeable,\r\n    MiningOwnableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    ILiquidityMiningInternal,\r\n    IProxyImplementation\r\n{\r\n    using ContractValidator for address;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n\r\n    address public immutable routerAddress;\r\n    address public immutable lpStEth;\r\n    address public immutable ethUsdOracle;\r\n\r\n    // @deprecated field is deprecated\r\n    address internal _powerTokenDeprecated;\r\n    // @deprecated field is deprecated\r\n    address internal _pauseManagerDeprecated;\r\n\r\n    mapping(address => bool) internal _lpTokens;\r\n    mapping(address => uint256) internal _allocatedPwTokens;\r\n\r\n    mapping(address => LiquidityMiningTypes.GlobalRewardsIndicators) internal _globalIndicators;\r\n\r\n    /// @dev account address => lpToken address => account params\r\n    mapping(address => mapping(address => LiquidityMiningTypes.AccountRewardsIndicators))\r\n        internal _accountIndicators;\r\n\r\n    constructor(address routerAddressInput, address lpStEthInput, address ethUsdOracleInput) {\r\n        routerAddress = routerAddressInput.checkAddress();\r\n        lpStEth = lpStEthInput.checkAddress();\r\n        ethUsdOracle = ethUsdOracleInput.checkAddress();\r\n    }\r\n\r\n    /// @dev Throws an error if called by any account other than the pause guardian.\r\n    modifier onlyPauseGuardian() {\r\n        require(PauseManager.isPauseGuardian(msg.sender), Errors.CALLER_NOT_GUARDIAN);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRouter() {\r\n        require(msg.sender == routerAddress, Errors.CALLER_NOT_ROUTER);\r\n        _;\r\n    }\r\n\r\n    function initialize(address[] calldata lpTokens) public initializer {\r\n        __Pausable_init_unchained();\r\n        __Ownable_init_unchained();\r\n        __UUPSUpgradeable_init_unchained();\r\n\r\n        uint256 lpTokensLength = lpTokens.length;\r\n\r\n        for (uint256 i; i != lpTokensLength; ) {\r\n            require(lpTokens[i] != address(0), Errors.WRONG_ADDRESS);\r\n\r\n            _lpTokens[lpTokens[i]] = true;\r\n\r\n            _globalIndicators[lpTokens[i]] = LiquidityMiningTypes.GlobalRewardsIndicators(\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getVersion() external pure override returns (uint256) {\r\n        return 2_001;\r\n    }\r\n\r\n    function isLpTokenSupported(address lpToken) external view override returns (bool) {\r\n        return _lpTokens[lpToken];\r\n    }\r\n\r\n    function setRewardsPerBlock(address lpToken, uint32 pwTokenAmount) external override onlyOwner {\r\n        _setRewardsPerBlock(lpToken, pwTokenAmount);\r\n    }\r\n\r\n    function newSupportedLpToken(address lpToken) external onlyOwner {\r\n        require(lpToken != address(0), Errors.WRONG_ADDRESS);\r\n        _lpTokens[lpToken] = true;\r\n\r\n        emit NewLpTokenSupported(msg.sender, lpToken);\r\n    }\r\n\r\n    function phasingOutLpToken(address lpToken) external override onlyOwner {\r\n        require(lpToken != address(0), Errors.WRONG_ADDRESS);\r\n        _setRewardsPerBlock(lpToken, 0);\r\n        _lpTokens[lpToken] = false;\r\n        emit LpTokenSupportRemoved(msg.sender, lpToken);\r\n    }\r\n\r\n    function pause() external override onlyPauseGuardian {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external override onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /// @notice Adds a new pause guardian to the contract.\r\n    /// @param guardians The addresses of the new pause guardians.\r\n    /// @dev Only the contract owner can call this function.\r\n    function addPauseGuardians(address[] calldata guardians) external onlyOwner {\r\n        PauseManager.addPauseGuardians(guardians);\r\n    }\r\n\r\n    /// @notice Removes a pause guardian from the contract.\r\n    /// @param guardians The addresses of the pause guardians to be removed.\r\n    /// @dev Only the contract owner can call this function.\r\n    function removePauseGuardians(address[] calldata guardians) external onlyOwner {\r\n        PauseManager.removePauseGuardians(guardians);\r\n    }\r\n\r\n    /// @notice Checks if an address is a pause guardian.\r\n    /// @param guardian The address to be checked.\r\n    /// @return A boolean indicating whether the address is a pause guardian (true) or not (false).\r\n    function isPauseGuardian(address guardian) external view returns (bool) {\r\n        return PauseManager.isPauseGuardian(guardian);\r\n    }\r\n\r\n    function grantAllowanceForRouter(address erc20Token) external override onlyOwner {\r\n        require(erc20Token != address(0), Errors.WRONG_ADDRESS);\r\n\r\n        IERC20(erc20Token).approve(routerAddress, type(uint256).max);\r\n        emit AllowanceGranted(erc20Token, routerAddress);\r\n    }\r\n\r\n    function revokeAllowanceForRouter(address erc20Token) external override onlyOwner {\r\n        require(erc20Token != address(0), Errors.WRONG_ADDRESS);\r\n\r\n        IERC20(erc20Token).approve(routerAddress, 0);\r\n        emit AllowanceRevoked(erc20Token, routerAddress);\r\n    }\r\n\r\n    function getImplementation() external view override returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /// @dev Rebalance causes account's rewards to reset in current block.\r\n    function _rebalanceIndicators(\r\n        address account,\r\n        address lpToken,\r\n        uint256 accruedCompMultiplierCumulativePrevBlock,\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators,\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators,\r\n        uint256 lpTokenBalance,\r\n        uint256 delegatedPwTokenBalance\r\n    ) internal {\r\n        uint256 accountPowerUp = MiningCalculation.calculateAccountPowerUp(\r\n            delegatedPwTokenBalance,\r\n            _calculateWeightedLpTokenBalance(lpToken, lpTokenBalance),\r\n            _getVerticalShift(),\r\n            _getHorizontalShift()\r\n        );\r\n\r\n        _accountIndicators[account][lpToken] = LiquidityMiningTypes.AccountRewardsIndicators(\r\n            accruedCompMultiplierCumulativePrevBlock.toUint128(),\r\n            lpTokenBalance.toUint128(),\r\n            accountPowerUp.toUint72(),\r\n            delegatedPwTokenBalance.toUint96()\r\n        );\r\n\r\n        uint256 aggregatedPowerUp = MiningCalculation.calculateAggregatedPowerUp(\r\n            accountPowerUp,\r\n            lpTokenBalance,\r\n            accountIndicators.powerUp,\r\n            accountIndicators.lpTokenBalance,\r\n            globalIndicators.aggregatedPowerUp\r\n        );\r\n\r\n        uint256 accruedRewards;\r\n\r\n        /// @dev checks if rewards should be updated, It's truggered if at least one account stakes lpTokens\r\n        if (globalIndicators.aggregatedPowerUp == 0) {\r\n            accruedRewards = globalIndicators.accruedRewards;\r\n        } else {\r\n            accruedRewards = MiningCalculation.calculateAccruedRewards(\r\n                block.number,\r\n                globalIndicators.blockNumber,\r\n                globalIndicators.rewardsPerBlock,\r\n                globalIndicators.accruedRewards\r\n            );\r\n        }\r\n\r\n        uint256 compositeMultiplier = MiningCalculation.calculateCompositeMultiplier(\r\n            globalIndicators.rewardsPerBlock,\r\n            aggregatedPowerUp\r\n        );\r\n\r\n        _globalIndicators[lpToken] = LiquidityMiningTypes.GlobalRewardsIndicators(\r\n            aggregatedPowerUp,\r\n            compositeMultiplier.toUint128(),\r\n            accruedCompMultiplierCumulativePrevBlock.toUint128(),\r\n            block.number.toUint32(),\r\n            globalIndicators.rewardsPerBlock,\r\n            accruedRewards.toUint88()\r\n        );\r\n    }\r\n\r\n    /// @notice Calculates the weighted balance of PW tokens based on the provided LP token and delegated balance.\r\n    /// @dev If the provided LP token is not `lpStEth`, it simply returns the `delegatedPwTokenBalance`.\r\n    /// If it is `lpStEth`, it calculates the weighted balance using the current ETH to USD price.\r\n    /// @param lpToken Address of the LP token.\r\n    /// @param lpTokenBalance The balance of lp tokens.\r\n    /// @return uint256 The weighted balance of PW tokens.\r\n    function _calculateWeightedLpTokenBalance(\r\n        address lpToken,\r\n        uint256 lpTokenBalance\r\n    ) internal view returns (uint256) {\r\n        if (lpToken != lpStEth) {\r\n            return lpTokenBalance;\r\n        }\r\n        // @dev returned value has 8 decimal address on mainnet 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        (, int256 answer, , , ) = AggregatorV3Interface(ethUsdOracle).latestRoundData();\r\n        return MathOperation.division(lpTokenBalance * answer.toUint256(), 1e8);\r\n    }\r\n\r\n    function _calculateAccountRewards(\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators,\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256 rewardsAmount, uint256 accruedCompMultiplierCumulativePrevBlock)\r\n    {\r\n        accruedCompMultiplierCumulativePrevBlock = MiningCalculation\r\n            .calculateAccruedCompMultiplierCumulativePrevBlock(\r\n                block.number,\r\n                globalIndicators.blockNumber,\r\n                globalIndicators.compositeMultiplierInTheBlock,\r\n                globalIndicators.compositeMultiplierCumulativePrevBlock\r\n            );\r\n\r\n        rewardsAmount = MiningCalculation.calculateAccountRewards(\r\n            accountIndicators.lpTokenBalance,\r\n            accountIndicators.powerUp,\r\n            accountIndicators.compositeMultiplierCumulativePrevBlock,\r\n            accruedCompMultiplierCumulativePrevBlock\r\n        );\r\n    }\r\n\r\n    function _setRewardsPerBlock(address lpToken, uint32 pwTokenAmount) internal {\r\n        require(_lpTokens[lpToken], Errors.LP_TOKEN_NOT_SUPPORTED);\r\n\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators = _globalIndicators[\r\n            lpToken\r\n        ];\r\n        uint256 blockNumber = block.number;\r\n\r\n        uint256 accruedCompositeMultiplierCumulativePrevBlock = MiningCalculation\r\n            .calculateAccruedCompMultiplierCumulativePrevBlock(\r\n                blockNumber,\r\n                globalIndicators.blockNumber,\r\n                globalIndicators.compositeMultiplierInTheBlock,\r\n                globalIndicators.compositeMultiplierCumulativePrevBlock\r\n            );\r\n\r\n        uint256 accruedRewards;\r\n        if (globalIndicators.aggregatedPowerUp != 0) {\r\n            accruedRewards = MiningCalculation.calculateAccruedRewards(\r\n                blockNumber.toUint32(),\r\n                globalIndicators.blockNumber,\r\n                globalIndicators.rewardsPerBlock,\r\n                globalIndicators.accruedRewards\r\n            );\r\n        } else {\r\n            accruedRewards = globalIndicators.accruedRewards;\r\n        }\r\n\r\n        uint256 compositeMultiplier = MiningCalculation.calculateCompositeMultiplier(\r\n            pwTokenAmount,\r\n            globalIndicators.aggregatedPowerUp\r\n        );\r\n\r\n        _globalIndicators[lpToken] = LiquidityMiningTypes.GlobalRewardsIndicators(\r\n            globalIndicators.aggregatedPowerUp,\r\n            compositeMultiplier.toUint128(),\r\n            accruedCompositeMultiplierCumulativePrevBlock.toUint128(),\r\n            blockNumber.toUint32(),\r\n            pwTokenAmount,\r\n            accruedRewards.toUint88()\r\n        );\r\n\r\n        emit RewardsPerBlockChanged(lpToken, pwTokenAmount);\r\n    }\r\n\r\n    /// @notice Gets Horizontal shift param used in Liquidity Mining equations.\r\n    /// @dev To pre-calculate this value from uint256, use {MiningCalculation._toQuadruplePrecision()} method.\r\n    /// @dev 0.5 = ABDKMathQuad.div(ABDKMathQuad.fromUInt(5), ABDKMathQuad.fromUInt(10))\r\n    /// @dev Notice! uint256 value before calculation has the following constraints: 0.5 <= Horizontal Shift <= 10^3\r\n    /// @return horizontal shift - value represented in bytes16, quadruple precision, 128 bits, it takes into consideration 18 decimals\r\n    function _getHorizontalShift() internal pure virtual returns (bytes16) {\r\n        return 0x3ffe0000000000000000000000000000;\r\n    }\r\n\r\n    /// @notice Gets vertical shift param used in Liquidity Mining equations.\r\n    /// @dev To pre-calculate this value from uint256, use {MiningCalculation._toQuadruplePrecision()} method.\r\n    /// @dev 1.4 = ABDKMathQuad.div(ABDKMathQuad.fromUInt(14), ABDKMathQuad.fromUInt(10))\r\n    /// @dev Notice! uint256 value before calculation has the following constraints: 10^(-4) <= Vertical Shift <= 3\r\n    /// @return vertical shift - value represented in bytes16, quadruple precision, 128 bits, it takes into consideration 18 decimals\r\n    function _getVerticalShift() internal pure virtual returns (bytes16) {\r\n        return 0x3fff6666666666666666666666666666;\r\n    }\r\n\r\n    //solhint-disable no-empty-blocks\r\n    function _authorizeUpgrade(address) internal override onlyOwner {}\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/ILiquidityMining.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title The interface for interaction with the LiquidityMining.\r\n/// LiquidityMining is responsible for the distribution of the Power Token rewards to accounts\r\n/// staking lpTokens and / or delegating Power Tokens to LiquidityMining. LpTokens can be staked directly to the LiquidityMining,\r\n/// Power Tokens are a staked version of the [Staked] Tokens minted by the PowerToken smart contract.\r\ninterface ILiquidityMining {\r\n    /// @notice Contract ID. The keccak-256 hash of \"io.ipor.LiquidityMining\" decreased by 1\r\n    /// @return Returns an ID of the contract\r\n    function getContractId() external pure returns (bytes32);\r\n\r\n    /// @notice Returns the balance of staked lpTokens\r\n    /// @param account the account's address\r\n    /// @param lpToken the address of lpToken\r\n    /// @return balance of the lpTokens staked by the sender\r\n    function balanceOf(address account, address lpToken) external view returns (uint256);\r\n\r\n    /// @notice It returns the balance of delegated Power Tokens for a given `account` and the list of lpToken addresses.\r\n    /// @param account address for which to fetch the information about balance of delegated Power Tokens\r\n    /// @param lpTokens list of lpTokens addresses(lpTokens)\r\n    /// @return balances list of {LiquidityMiningTypes.DelegatedPwTokenBalance} structure, with information how much Power Token is delegated per lpToken address.\r\n    function balanceOfDelegatedPwToken(\r\n        address account,\r\n        address[] memory lpTokens\r\n    ) external view returns (LiquidityMiningTypes.DelegatedPwTokenBalance[] memory balances);\r\n\r\n    /// @notice Calculates the accrued rewards for multiple LP tokens.\r\n    /// @param lpTokens An array of LP token addresses.\r\n    /// @return An array of `AccruedRewardsResult` structures, containing the LP token address and the accrued rewards amount.\r\n    function calculateAccruedRewards(\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccruedRewardsResult[] memory);\r\n\r\n    /// @notice Calculates the rewards earned by an account for multiple LP tokens.\r\n    /// @param account The address of the account for which to calculate rewards.\r\n    /// @param lpTokens An array of LP token addresses.\r\n    /// @return An array of `AccountRewardResult` structures, containing the LP token address, rewards amount, and allocated Power Token balance for the account.\r\n    function calculateAccountRewards(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountRewardResult[] memory);\r\n\r\n    /// @notice method allowing to update the indicators per asset (lpToken).\r\n    /// @param account of which we should update the indicators\r\n    /// @param lpTokens of the staking pools to update the indicators\r\n    function updateIndicators(address account, address[] calldata lpTokens) external;\r\n\r\n    /// @notice Adds LP tokens to the liquidity mining for multiple accounts.\r\n    /// @param updateLpToken An array of `UpdateLpToken` structures, each containing the account address,\r\n    /// LP token address, and LP token amount to be added.\r\n    function addLpTokensInternal(\r\n        LiquidityMiningTypes.UpdateLpToken[] memory updateLpToken\r\n    ) external;\r\n\r\n    /// @notice Adds Power tokens to the liquidity mining for multiple accounts.\r\n    /// @param updatePwToken An array of `UpdatePwToken` structures, each containing the account address,\r\n    /// LP token address, and Power token amount to be added.\r\n    function addPwTokensInternal(\r\n        LiquidityMiningTypes.UpdatePwToken[] memory updatePwToken\r\n    ) external;\r\n\r\n    /// @notice Removes LP tokens from the liquidity mining for multiple accounts.\r\n    /// @param updateLpToken An array of `UpdateLpToken` structures, each containing the account address,\r\n    /// LP token address, and LP token amount to be removed.\r\n    function removeLpTokensInternal(\r\n        LiquidityMiningTypes.UpdateLpToken[] memory updateLpToken\r\n    ) external;\r\n\r\n    /// @notice Removes Power Tokens from the liquidity mining for multiple accounts.\r\n    /// @param updatePwToken An array of `UpdatePwToken` structures, each containing the account address,\r\n    /// LP token address, and Power Token amount to be removed.\r\n    function removePwTokensInternal(\r\n        LiquidityMiningTypes.UpdatePwToken[] memory updatePwToken\r\n    ) external;\r\n\r\n    /// @notice Claims accumulated rewards for multiple LP tokens and transfers them to the specified account.\r\n    /// @param account The account address to claim rewards for.\r\n    /// @param lpTokens An array of LP token addresses for which rewards will be claimed.\r\n    /// @return rewardsAmountToTransfer The total amount of rewards transferred to the account.\r\n    function claimInternal(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external returns (uint256 rewardsAmountToTransfer);\r\n\r\n    /// @notice Retrieves the global indicators for multiple LP tokens.\r\n    /// @param lpTokens An array of LP token addresses for which to retrieve the global indicators.\r\n    /// @return An array of LiquidityMiningTypes.GlobalIndicatorsResult containing the global indicators for each LP token.\r\n    function getGlobalIndicators(\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.GlobalIndicatorsResult[] memory);\r\n\r\n    /// @notice Retrieves the account indicators for a specific account and multiple LP tokens.\r\n    /// @param account The address of the account for which to retrieve the account indicators.\r\n    /// @param lpTokens An array of LP token addresses for which to retrieve the account indicators.\r\n    /// @return An array of LiquidityMiningTypes.AccountIndicatorsResult containing the account indicators for each LP token.\r\n    function getAccountIndicators(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountIndicatorsResult[] memory);\r\n\r\n    /// @notice Emitted when the account stakes the lpTokens\r\n    /// @param account Account's address in the context of which the activities of staking of lpTokens are performed\r\n    /// @param lpToken address of lpToken being staked\r\n    /// @param lpTokenAmount of lpTokens to stake, represented with 18 decimals\r\n    event LpTokensStaked(address account, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the account claims the rewards\r\n    /// @param account Account's address in the context of which activities of claiming are performed\r\n    /// @param lpTokens The addresses of the lpTokens for which the rewards are claimed\r\n    /// @param rewardsAmount Reward amount denominated in pwToken, represented with 18 decimals\r\n    event Claimed(address account, address[] lpTokens, uint256 rewardsAmount);\r\n\r\n    /// @notice Emitted when the account claims the allocated rewards\r\n    /// @param account Account address in the context of which activities of claiming are performed\r\n    /// @param allocatedRewards Reward amount denominated in pwToken, represented in 18 decimals\r\n    event AllocatedTokensClaimed(address account, uint256 allocatedRewards);\r\n\r\n    /// @notice Emitted when update was triggered for the account on the lpToken\r\n    /// @param account Account address to which the update was triggered\r\n    /// @param lpToken lpToken address to which the update was triggered\r\n    event IndicatorsUpdated(address account, address lpToken);\r\n\r\n    /// @notice Emitted when the lpToken is added to the LiquidityMining\r\n    /// @param beneficiary Account address on behalf of which the lpToken is added\r\n    /// @param lpToken lpToken address which is added\r\n    /// @param lpTokenAmount Amount of lpTokens added, represented with 18 decimals\r\n    event LpTokenAdded(address beneficiary, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the lpToken is removed from the LiquidityMining\r\n    /// @param account address on behalf of which the lpToken is removed\r\n    /// @param lpToken lpToken address which is removed\r\n    /// @param lpTokenAmount Amount of lpTokens removed, represented with 18 decimals\r\n    event LpTokensRemoved(address account, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the PwTokens is added to lpToken pool\r\n    /// @param beneficiary Account address on behalf of which the PwToken is added\r\n    /// @param lpToken lpToken address to which the PwToken is added\r\n    /// @param pwTokenAmount Amount of PwTokens added, represented with 18 decimals\r\n    event PwTokensAdded(address beneficiary, address lpToken, uint256 pwTokenAmount);\r\n\r\n    /// @notice Emitted when the PwTokens is removed from lpToken pool\r\n    /// @param account Account address on behalf of which the PwToken is removed\r\n    /// @param lpToken lpToken address from which the PwToken is removed\r\n    /// @param pwTokenAmount Amount of PwTokens removed, represented with 18 decimals\r\n    event PwTokensRemoved(address account, address lpToken, uint256 pwTokenAmount);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/mining/LiquidityMining.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n/// @title Smart contract responsible for distribution of Power Token rewards across accounts contributing to Liquidity Mining\r\n/// by staking lpTokens and / or delegating Power Tokens.\r\ncontract LiquidityMining is ILiquidityMining, LiquidityMiningInternal {\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n\r\n    constructor(\r\n        address routerAddress,\r\n        address lpStEthInput,\r\n        address ethUsdOracleInput\r\n    ) LiquidityMiningInternal(routerAddress, lpStEthInput, ethUsdOracleInput) {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function getContractId() external pure returns (bytes32) {\r\n        return 0x9b1f3aa590476fc9aa58d44ad1419ab53d34c344bd5ed46b12e4af7d27c38e06;\r\n    }\r\n\r\n    function balanceOf(address account, address lpToken) external view override returns (uint256) {\r\n        return _accountIndicators[account][lpToken].lpTokenBalance;\r\n    }\r\n\r\n    function balanceOfDelegatedPwToken(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (LiquidityMiningTypes.DelegatedPwTokenBalance[] memory balances)\r\n    {\r\n        uint256 lpTokensLength = lpTokens.length;\r\n        balances = new LiquidityMiningTypes.DelegatedPwTokenBalance[](lpTokensLength);\r\n        address lpToken;\r\n\r\n        for (uint256 i; i != lpTokensLength; ) {\r\n            lpToken = lpTokens[i];\r\n            require(_lpTokens[lpToken], Errors.LP_TOKEN_NOT_SUPPORTED);\r\n            balances[i] = LiquidityMiningTypes.DelegatedPwTokenBalance(\r\n                lpToken,\r\n                _accountIndicators[account][lpToken].delegatedPwTokenBalance\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateAccruedRewards(\r\n        address[] calldata lpTokens\r\n    ) external view override returns (LiquidityMiningTypes.AccruedRewardsResult[] memory result) {\r\n        uint256 lpTokensLength = lpTokens.length;\r\n        LiquidityMiningTypes.AccruedRewardsResult[]\r\n            memory rewards = new LiquidityMiningTypes.AccruedRewardsResult[](lpTokensLength);\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators;\r\n        uint256 reward;\r\n\r\n        for (uint256 i; i != lpTokensLength; ) {\r\n            globalIndicators = _globalIndicators[lpTokens[i]];\r\n            if (globalIndicators.aggregatedPowerUp == 0) {\r\n                rewards[i] = LiquidityMiningTypes.AccruedRewardsResult(\r\n                    lpTokens[i],\r\n                    globalIndicators.accruedRewards\r\n                );\r\n                continue;\r\n            }\r\n\r\n            reward = MiningCalculation.calculateAccruedRewards(\r\n                block.number,\r\n                globalIndicators.blockNumber,\r\n                globalIndicators.rewardsPerBlock,\r\n                globalIndicators.accruedRewards\r\n            );\r\n            rewards[i] = LiquidityMiningTypes.AccruedRewardsResult(lpTokens[i], reward);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return rewards;\r\n    }\r\n\r\n    function calculateAccountRewards(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view override returns (LiquidityMiningTypes.AccountRewardResult[] memory) {\r\n        uint256 lpTokensLength = lpTokens.length;\r\n        LiquidityMiningTypes.AccountRewardResult[]\r\n            memory rewards = new LiquidityMiningTypes.AccountRewardResult[](lpTokensLength);\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators;\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators;\r\n        uint256 rewardsAmount;\r\n\r\n        for (uint256 i; i != lpTokensLength; ) {\r\n            globalIndicators = _globalIndicators[lpTokens[i]];\r\n            accountIndicators = _accountIndicators[account][lpTokens[i]];\r\n            (rewardsAmount, ) = _calculateAccountRewards(globalIndicators, accountIndicators);\r\n            rewards[i] = LiquidityMiningTypes.AccountRewardResult(\r\n                lpTokens[i],\r\n                rewardsAmount,\r\n                _allocatedPwTokens[account]\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return rewards;\r\n    }\r\n\r\n    function updateIndicators(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external override nonReentrant whenNotPaused {\r\n        require(account != address(0), Errors.WRONG_ADDRESS);\r\n\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators;\r\n\r\n        uint256 lpTokensLength = lpTokens.length;\r\n        uint256 rewardsAmountToTransfer;\r\n        address lpToken;\r\n        uint256 rewardsAmount;\r\n        uint256 accruedCompMultiplierCumulativePrevBlock;\r\n\r\n        for (uint256 i; i != lpTokensLength; ) {\r\n            lpToken = lpTokens[i];\r\n\r\n            accountIndicators = _accountIndicators[account][lpToken];\r\n            globalIndicators = _globalIndicators[lpToken];\r\n\r\n            if (accountIndicators.lpTokenBalance == 0) {\r\n                continue;\r\n            }\r\n\r\n            (rewardsAmount, accruedCompMultiplierCumulativePrevBlock) = _calculateAccountRewards(\r\n                globalIndicators,\r\n                accountIndicators\r\n            );\r\n\r\n            rewardsAmountToTransfer += rewardsAmount;\r\n\r\n            _rebalanceIndicators(\r\n                account,\r\n                lpToken,\r\n                accruedCompMultiplierCumulativePrevBlock,\r\n                globalIndicators,\r\n                accountIndicators,\r\n                accountIndicators.lpTokenBalance,\r\n                accountIndicators.delegatedPwTokenBalance\r\n            );\r\n\r\n            emit IndicatorsUpdated(account, lpToken);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        if (rewardsAmountToTransfer > 0) {\r\n            _allocatedPwTokens[account] += rewardsAmountToTransfer;\r\n        }\r\n    }\r\n\r\n    function claimInternal(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external override whenNotPaused onlyRouter returns (uint256 rewardsAmountToTransfer) {\r\n        uint256 lpTokensLength = lpTokens.length;\r\n        address lpToken;\r\n        uint256 rewardsAmount;\r\n        uint256 accruedCompMultiplierCumulativePrevBlock;\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators;\r\n\r\n        for (uint256 i; i != lpTokensLength; ) {\r\n            lpToken = lpTokens[i];\r\n            accountIndicators = _accountIndicators[account][lpToken];\r\n            globalIndicators = _globalIndicators[lpToken];\r\n\r\n            (rewardsAmount, accruedCompMultiplierCumulativePrevBlock) = _calculateAccountRewards(\r\n                globalIndicators,\r\n                accountIndicators\r\n            );\r\n\r\n            if (rewardsAmount > 0) {\r\n                _accountIndicators[account][lpToken] = LiquidityMiningTypes\r\n                    .AccountRewardsIndicators(\r\n                        accruedCompMultiplierCumulativePrevBlock.toUint128(),\r\n                        accountIndicators.lpTokenBalance,\r\n                        accountIndicators.powerUp,\r\n                        accountIndicators.delegatedPwTokenBalance\r\n                    );\r\n                rewardsAmountToTransfer += rewardsAmount;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        uint256 allocatedRewards = _allocatedPwTokens[account];\r\n        if (allocatedRewards > 0) {\r\n            _allocatedPwTokens[account] = 0;\r\n            rewardsAmountToTransfer += allocatedRewards;\r\n        }\r\n        emit Claimed(account, lpTokens, rewardsAmountToTransfer);\r\n        return rewardsAmountToTransfer;\r\n    }\r\n\r\n    function addLpTokensInternal(\r\n        LiquidityMiningTypes.UpdateLpToken[] memory updateLpToken\r\n    ) external override onlyRouter whenNotPaused {\r\n        uint256 length = updateLpToken.length;\r\n        uint256 rewardsAmount;\r\n        uint256 accruedCompMultiplierCumulativePrevBlock;\r\n\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators;\r\n        LiquidityMiningTypes.UpdateLpToken memory update;\r\n\r\n        for (uint256 i; i != length; ) {\r\n            update = updateLpToken[i];\r\n            require(_lpTokens[update.lpToken], Errors.LP_TOKEN_NOT_SUPPORTED);\r\n\r\n            accountIndicators = _accountIndicators[update.beneficiary][update.lpToken];\r\n            globalIndicators = _globalIndicators[update.lpToken];\r\n\r\n            (rewardsAmount, accruedCompMultiplierCumulativePrevBlock) = _calculateAccountRewards(\r\n                globalIndicators,\r\n                accountIndicators\r\n            );\r\n\r\n            _rebalanceIndicators(\r\n                update.beneficiary,\r\n                update.lpToken,\r\n                accruedCompMultiplierCumulativePrevBlock,\r\n                globalIndicators,\r\n                accountIndicators,\r\n                accountIndicators.lpTokenBalance + update.lpTokenAmount,\r\n                accountIndicators.delegatedPwTokenBalance\r\n            );\r\n\r\n            if (rewardsAmount > 0) {\r\n                _allocatedPwTokens[update.beneficiary] += rewardsAmount;\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n            emit LpTokenAdded(update.beneficiary, update.lpToken, update.lpTokenAmount);\r\n        }\r\n    }\r\n\r\n    function addPwTokensInternal(\r\n        LiquidityMiningTypes.UpdatePwToken[] memory updatePwTokens\r\n    ) external onlyRouter whenNotPaused {\r\n        uint256 rewards;\r\n        uint256 lpTokensLength = updatePwTokens.length;\r\n        uint256 rewardsIteration;\r\n        uint256 accruedCompMultiplierCumulativePrevBlock;\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators;\r\n        LiquidityMiningTypes.UpdatePwToken memory update;\r\n        for (uint256 i; i != lpTokensLength; ) {\r\n            update = updatePwTokens[i];\r\n            require(_lpTokens[update.lpToken], Errors.LP_TOKEN_NOT_SUPPORTED);\r\n\r\n            accountIndicators = _accountIndicators[update.beneficiary][update.lpToken];\r\n            globalIndicators = _globalIndicators[update.lpToken];\r\n\r\n            /// @dev when account not stake any IP Token then calculation rewards and rebalancing is redundant\r\n            if (accountIndicators.lpTokenBalance == 0) {\r\n                uint256 newBalance = accountIndicators.delegatedPwTokenBalance +\r\n                    update.pwTokenAmount;\r\n                _accountIndicators[update.beneficiary][update.lpToken]\r\n                    .delegatedPwTokenBalance = newBalance.toUint96();\r\n                emit PwTokenDelegated(update.beneficiary, update.lpToken, update.pwTokenAmount);\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            (rewardsIteration, accruedCompMultiplierCumulativePrevBlock) = _calculateAccountRewards(\r\n                globalIndicators,\r\n                accountIndicators\r\n            );\r\n\r\n            rewards += rewardsIteration;\r\n\r\n            _rebalanceIndicators(\r\n                update.beneficiary,\r\n                update.lpToken,\r\n                accruedCompMultiplierCumulativePrevBlock,\r\n                globalIndicators,\r\n                accountIndicators,\r\n                accountIndicators.lpTokenBalance,\r\n                accountIndicators.delegatedPwTokenBalance + update.pwTokenAmount\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n            emit PwTokensAdded(update.beneficiary, update.lpToken, update.pwTokenAmount);\r\n        }\r\n\r\n        if (rewards > 0) {\r\n            _allocatedPwTokens[updatePwTokens[0].beneficiary] += rewards;\r\n        }\r\n    }\r\n\r\n    function removePwTokensInternal(\r\n        LiquidityMiningTypes.UpdatePwToken[] memory updatePwTokens\r\n    ) external onlyRouter whenNotPaused {\r\n        uint256 rewards;\r\n        uint256 length = updatePwTokens.length;\r\n        uint256 rewardsIteration;\r\n        uint256 accruedCompMultiplierCumulativePrevBlock;\r\n\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators;\r\n        LiquidityMiningTypes.UpdatePwToken memory update;\r\n\r\n        for (uint256 i; i != length; ) {\r\n            update = updatePwTokens[i];\r\n            require(_lpTokens[update.lpToken], Errors.LP_TOKEN_NOT_SUPPORTED);\r\n\r\n            accountIndicators = _accountIndicators[update.beneficiary][update.lpToken];\r\n\r\n            require(\r\n                accountIndicators.delegatedPwTokenBalance >= update.pwTokenAmount,\r\n                Errors.ACC_DELEGATED_TO_LIQUIDITY_MINING_BALANCE_IS_TOO_LOW\r\n            );\r\n\r\n            globalIndicators = _globalIndicators[update.lpToken];\r\n\r\n            (rewardsIteration, accruedCompMultiplierCumulativePrevBlock) = _calculateAccountRewards(\r\n                globalIndicators,\r\n                accountIndicators\r\n            );\r\n\r\n            rewards += rewardsIteration;\r\n\r\n            _rebalanceIndicators(\r\n                update.beneficiary,\r\n                update.lpToken,\r\n                accruedCompMultiplierCumulativePrevBlock,\r\n                globalIndicators,\r\n                accountIndicators,\r\n                accountIndicators.lpTokenBalance,\r\n                accountIndicators.delegatedPwTokenBalance - update.pwTokenAmount\r\n            );\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n            emit PwTokensRemoved(update.beneficiary, update.lpToken, update.pwTokenAmount);\r\n        }\r\n\r\n        if (rewards > 0) {\r\n            _allocatedPwTokens[updatePwTokens[0].beneficiary] += rewards;\r\n        }\r\n    }\r\n\r\n    function removeLpTokensInternal(\r\n        LiquidityMiningTypes.UpdateLpToken[] memory updateLpToken\r\n    ) external override onlyRouter whenNotPaused {\r\n        uint256 length = updateLpToken.length;\r\n        uint256 rewardsAmount;\r\n        uint256 accruedCompMultiplierCumulativePrevBlock;\r\n\r\n        LiquidityMiningTypes.UpdateLpToken memory update;\r\n        LiquidityMiningTypes.AccountRewardsIndicators memory accountIndicators;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators memory globalIndicators;\r\n\r\n        for (uint256 i; i != length; ) {\r\n            update = updateLpToken[i];\r\n            require(update.lpTokenAmount > 0, Errors.VALUE_NOT_GREATER_THAN_ZERO);\r\n\r\n            accountIndicators = _accountIndicators[update.beneficiary][update.lpToken];\r\n            globalIndicators = _globalIndicators[update.lpToken];\r\n\r\n            require(\r\n                accountIndicators.lpTokenBalance >= update.lpTokenAmount,\r\n                Errors.ACCOUNT_LP_TOKEN_BALANCE_IS_TOO_LOW\r\n            );\r\n\r\n            (rewardsAmount, accruedCompMultiplierCumulativePrevBlock) = _calculateAccountRewards(\r\n                globalIndicators,\r\n                accountIndicators\r\n            );\r\n\r\n            _rebalanceIndicators(\r\n                update.beneficiary,\r\n                update.lpToken,\r\n                accruedCompMultiplierCumulativePrevBlock,\r\n                globalIndicators,\r\n                accountIndicators,\r\n                accountIndicators.lpTokenBalance - update.lpTokenAmount,\r\n                accountIndicators.delegatedPwTokenBalance\r\n            );\r\n\r\n            if (rewardsAmount > 0) {\r\n                _allocatedPwTokens[update.beneficiary] += rewardsAmount;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n            emit LpTokensRemoved(update.beneficiary, update.lpToken, update.lpTokenAmount);\r\n        }\r\n    }\r\n\r\n    function getGlobalIndicators(\r\n        address[] calldata lpTokens\r\n    ) external view override returns (LiquidityMiningTypes.GlobalIndicatorsResult[] memory) {\r\n        uint256 length = lpTokens.length;\r\n\r\n        LiquidityMiningTypes.GlobalIndicatorsResult[]\r\n            memory accountIndicators = new LiquidityMiningTypes.GlobalIndicatorsResult[](length);\r\n\r\n        for (uint256 i; i != length; ) {\r\n            accountIndicators[i] = LiquidityMiningTypes.GlobalIndicatorsResult(\r\n                lpTokens[i],\r\n                _globalIndicators[lpTokens[i]]\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return accountIndicators;\r\n    }\r\n\r\n    function getAccountIndicators(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view override returns (LiquidityMiningTypes.AccountIndicatorsResult[] memory) {\r\n        uint256 length = lpTokens.length;\r\n\r\n        LiquidityMiningTypes.AccountIndicatorsResult[]\r\n            memory accountIndicators = new LiquidityMiningTypes.AccountIndicatorsResult[](length);\r\n\r\n        for (uint256 i; i != length; ) {\r\n            accountIndicators[i] = LiquidityMiningTypes.AccountIndicatorsResult(\r\n                lpTokens[i],\r\n                _accountIndicators[account][lpTokens[i]]\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return accountIndicators;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpStEthInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethUsdOracleInput\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocatedRewards\",\"type\":\"uint256\"}],\"name\":\"AllocatedTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"AllowanceGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"AllowanceRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"appointedOwner\",\"type\":\"address\"}],\"name\":\"AppointedToTransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"IndicatorsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LpTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LpTokenSupportRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LpTokensRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LpTokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LpTokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"NewLpTokenSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"PauseGuardiansAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"PauseGuardiansRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauseManager\",\"type\":\"address\"}],\"name\":\"PauseManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"name\":\"PwTokenDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"name\":\"PwTokenUndelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"name\":\"PwTokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"name\":\"PwTokensRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPwTokenAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsPerBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.UpdateLpToken[]\",\"name\":\"updateLpToken\",\"type\":\"tuple[]\"}],\"name\":\"addLpTokensInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"addPauseGuardians\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.UpdatePwToken[]\",\"name\":\"updatePwTokens\",\"type\":\"tuple[]\"}],\"name\":\"addPwTokensInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"balanceOfDelegatedPwToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.DelegatedPwTokenBalance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"calculateAccountRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocatedPwTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.AccountRewardResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"calculateAccruedRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.AccruedRewardsResult[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"claimInternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsAmountToTransfer\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUsdOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"getAccountIndicators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"compositeMultiplierCumulativePrevBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lpTokenBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint72\",\"name\":\"powerUp\",\"type\":\"uint72\"},{\"internalType\":\"uint96\",\"name\":\"delegatedPwTokenBalance\",\"type\":\"uint96\"}],\"internalType\":\"struct LiquidityMiningTypes.AccountRewardsIndicators\",\"name\":\"indicators\",\"type\":\"tuple\"}],\"internalType\":\"struct LiquidityMiningTypes.AccountIndicatorsResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"getGlobalIndicators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"aggregatedPowerUp\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"compositeMultiplierInTheBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"compositeMultiplierCumulativePrevBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsPerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint88\",\"name\":\"accruedRewards\",\"type\":\"uint88\"}],\"internalType\":\"struct LiquidityMiningTypes.GlobalRewardsIndicators\",\"name\":\"indicators\",\"type\":\"tuple\"}],\"internalType\":\"struct LiquidityMiningTypes.GlobalIndicatorsResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"}],\"name\":\"grantAllowanceForRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"isLpTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isPauseGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"newSupportedLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"phasingOutLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.UpdateLpToken[]\",\"name\":\"updateLpToken\",\"type\":\"tuple[]\"}],\"name\":\"removeLpTokensInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"removePauseGuardians\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.UpdatePwToken[]\",\"name\":\"updatePwTokens\",\"type\":\"tuple[]\"}],\"name\":\"removePwTokensInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"}],\"name\":\"revokeAllowanceForRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pwTokenAmount\",\"type\":\"uint32\"}],\"name\":\"setRewardsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"appointedOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"updateIndicators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "LiquidityMining", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000016d104009964e694761c0bf09d7be49b7e3c26fd000000000000000000000000c40431b6c510aeb45fbb5e21e40d49f12b0c1f0c0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "paris", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76d2f6a5d5c8e1ccafbb869bae27f04edae74faedc76d291f3515f4ae3f91284"}