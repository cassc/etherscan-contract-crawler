{"SourceCode": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: Lottery-token.sol\r\n\r\n// SPDX-// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n\r\ncontract LotteryContract is Ownable, ReentrancyGuard{\r\n\r\n    IERC20 private _token; \r\n    IERC20 private _usdt;\r\n    address[] public players;\r\n    address[] public  winner;  // for testing purpose checking the winner address getting the usdt\r\n    uint256[] public rewardAmount;\r\n\r\n\r\n    uint256 public ticketPriceInToken;\r\n    uint256 public currentLotteryId;\r\n    uint256 public ticketLimit;\r\n    address private deadAddress= 0x000000000000000000000000000000000000dEaD;\r\n    \r\n\r\n\r\n    enum Status {\r\n        Open,\r\n        Closed\r\n    }\r\n    \r\n    struct Lottery {\r\n        uint256 lotteryId;\r\n        Status status;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n    }\r\n  \r\n    mapping(uint256=>Lottery) public _lottery; \r\n    \r\n    constructor(IERC20 _tokenContract, IERC20 _usdtToken,uint256 _lotteryEndTime){\r\n        _token=_tokenContract;\r\n        _usdt= _usdtToken;\r\n        ticketPriceInToken= 5*10**18;    // 1 ticket == 5 _token\r\n        ticketLimit= 20;\r\n        startLottery(_lotteryEndTime);\r\n    }\r\n    // onlyOwner\r\n    // This function is used to start the lottery.\r\n    function startLottery(uint256 _loteryEndTime) public onlyOwner returns(bool){\r\n        currentLotteryId++;\r\n        Lottery storage s = _lottery[currentLotteryId];\r\n        s.lotteryId=currentLotteryId;\r\n        s.status=Status.Open;\r\n        s.startTime= block.timestamp;\r\n        s.endTime= _loteryEndTime;\r\n        return true;\r\n    }\r\n\r\n    function drawLottery(uint256 _lotteryId,uint256 _loteryEndTime) external onlyOwner returns(bool){\r\n        Lottery storage s = _lottery[_lotteryId];\r\n        require(s.status==Status.Open,\"Already closed\");\r\n        s.status=Status.Closed;\r\n        winner = new address[](0);\r\n        rewardAmount = new uint256[](0);\r\n        rewardDistributation();\r\n        startLottery(_loteryEndTime);\r\n        return true;\r\n    }\r\n   \r\n    function ran() internal view returns (uint256[] memory expandedValues) {\r\n        expandedValues = new uint256[](6);\r\n        for (uint256 i = 0; i < 6; i++) {\r\n            expandedValues[i] = (uint256(keccak256(abi.encode(players.length,block.timestamp, i))))%players.length;\r\n        }\r\n        return expandedValues;\r\n    }\r\n\r\n    function rewardDistributation() internal {\r\n        uint256 contractUsdtBal= _usdt.balanceOf(address(this));\r\n        uint256 prizeAmount= (contractUsdtBal*40)/100;\r\n        require(_usdt.balanceOf(address(this))>prizeAmount,\"less usdt\");\r\n        uint256[] memory ranIndex= ran();\r\n\r\n        address firAdd= players[ranIndex[0]];\r\n        winner.push(firAdd);\r\n        rewardAmount.push((prizeAmount*50)/100);\r\n        _usdt.transfer(firAdd, (prizeAmount*50)/100);\r\n\r\n        address secAdd= players[ranIndex[1]];\r\n        winner.push(secAdd);\r\n        rewardAmount.push((prizeAmount*30)/100);\r\n        _usdt.transfer(secAdd, (prizeAmount*30)/100);\r\n\r\n        address thicAdd= players[ranIndex[2]];\r\n        winner.push(thicAdd);\r\n        rewardAmount.push((prizeAmount*10)/100);\r\n        _usdt.transfer(thicAdd, (prizeAmount*10)/100);\r\n        \r\n        address fourAdd= players[ranIndex[3]];\r\n        winner.push(fourAdd);\r\n        rewardAmount.push((prizeAmount*5)/100);\r\n        _usdt.transfer(fourAdd, (prizeAmount*5)/100);\r\n\r\n        address fifthAdd= players[ranIndex[4]];\r\n        winner.push(fifthAdd);\r\n        rewardAmount.push((prizeAmount*3)/100);\r\n         _usdt.transfer(fifthAdd, (prizeAmount*3)/100);\r\n\r\n        address sixthAdd= players[ranIndex[5]];\r\n        winner.push(sixthAdd);\r\n        rewardAmount.push((prizeAmount*2)/100);\r\n        _usdt.transfer(sixthAdd, (prizeAmount*2)/100);\r\n         \r\n         players = new address[](0);\r\n\r\n\r\n\r\n    }\r\n\r\n    function updateTicketPriceInToken(uint256 _price) external onlyOwner returns(bool){\r\n        require(_price >= 1, 'Ticket Price should be minimum of 1');\r\n        ticketPriceInToken=_price;\r\n        return true;\r\n    }\r\n    \r\n    // public \r\n    function buyTicket(uint256 _numberOfTicket) external nonReentrant  returns(bool){\r\n        require(_numberOfTicket <=ticketLimit, \"ticket limit is less\");\r\n        uint256 amount= estimatePrice(_numberOfTicket);\r\n\r\n        require(_token.balanceOf(msg.sender)>=amount,\"less bal.\");\r\n        Lottery storage s = _lottery[currentLotteryId];\r\n        require(s.status == Status.Open,\"Lottery closed.\");\r\n        for (uint256 i=0; i < _numberOfTicket; i++) \r\n        {\r\n            players.push(msg.sender);\r\n        }\r\n        \r\n        _token.transferFrom(msg.sender,deadAddress, amount);\r\n        return true;\r\n    }\r\n\r\n    function getPlayersLength() external view  returns(uint256){\r\n        return players.length;\r\n    }\r\n\r\n    function getCurrentTokenAddresses() external view returns (address token, address usdt) {\r\n    return (address(_token), address(_usdt));\r\n    }\r\n\r\n    function getUsdtFromContract(uint256 _amount) external onlyOwner{\r\n        _usdt.transfer(owner(),_amount);\r\n\r\n    }\r\n    function updateTicketLimit(uint256 _newLimit) external onlyOwner returns(bool){\r\n        ticketLimit= _newLimit;\r\n        return true;\r\n    }\r\n\r\n    function MistakenEther(uint256 _amount) external onlyOwner {\r\n    require(_amount > 0, \"Amount must be greater than zero\");\r\n    require(address(this).balance >= _amount, \"Withdraw amount exceeds contract ETH balance\");\r\n\r\n    payable(msg.sender).transfer(_amount);\r\n    }\r\n\r\n    function updateTokenAddresses(IERC20 _newToken, IERC20 _newUsdt) external onlyOwner returns (bool) {\r\n    require(address(_newToken) != address(0) && address(_newUsdt) != address(0), \"Token addresses cannot be zero\");\r\n\r\n    _token = _newToken;\r\n    _usdt = _newUsdt;\r\n\r\n    return true;\r\n    }\r\n\r\n    function estimatePrice(uint256 _ticket) public view returns(uint256){\r\n        return ticketPriceInToken*_ticket;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MistakenEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"enum LotteryContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTicket\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loteryEndTime\",\"type\":\"uint256\"}],\"name\":\"drawLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticket\",\"type\":\"uint256\"}],\"name\":\"estimatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUsdtFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loteryEndTime\",\"type\":\"uint256\"}],\"name\":\"startLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPriceInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"updateTicketLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTicketPriceInToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_newToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_newUsdt\",\"type\":\"address\"}],\"name\":\"updateTokenAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LotteryContract", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d2e84f65d302d5902ac10aacc685dd0693ccc229000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000651cb0df", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://61130e4af7e6fbee4603a01ad3380d1532e3c29e9e0394b609f4f4bfed872dfc"}