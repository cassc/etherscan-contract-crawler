{"SourceCode": "{{\r\n  \"sources\": {\r\n    \"lib/aave-helpers/lib/aave-address-book/src/AaveV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {AggregatorInterface} from './common/AggregatorInterface.sol';\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n}\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\\n  string public constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \\\"There isn't enough liquidity available to liquidate\\\"\\n  string public constant LPCM_NO_ERRORS = '46'; // 'No errors'\\n  string public constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant LP_FAILED_COLLATERAL_SWAP = '60';\\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\\n  string public constant LP_REENTRANCY_NOT_ALLOWED = '62';\\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // 'Pool is paused'\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant LP_NOT_CONTRACT = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n\\n  enum CollateralManagerErrors {\\n    NO_ERROR,\\n    NO_COLLATERAL_AVAILABLE,\\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\\n    CURRRENCY_NOT_BORROWED,\\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\\n    NOT_ENOUGH_LIQUIDITY,\\n    NO_ACTIVE_RESERVE,\\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n    INVALID_EQUAL_ASSETS_TO_SWAP,\\n    FROZEN_RESERVE\\n  }\\n}\\n\\nlibrary ConfiguratorInputTypes {\\n  struct InitReserveInput {\\n    address aTokenImpl;\\n    address stableDebtTokenImpl;\\n    address variableDebtTokenImpl;\\n    uint8 underlyingAssetDecimals;\\n    address interestRateStrategyAddress;\\n    address underlyingAsset;\\n    address treasury;\\n    address incentivesController;\\n    string underlyingAssetName;\\n    string aTokenName;\\n    string aTokenSymbol;\\n    string variableDebtTokenName;\\n    string variableDebtTokenSymbol;\\n    string stableDebtTokenName;\\n    string stableDebtTokenSymbol;\\n    bytes params;\\n  }\\n\\n  struct UpdateATokenInput {\\n    address asset;\\n    address treasury;\\n    address incentivesController;\\n    string name;\\n    string symbol;\\n    address implementation;\\n    bytes params;\\n  }\\n\\n  struct UpdateDebtTokenInput {\\n    address asset;\\n    address incentivesController;\\n    string name;\\n    string symbol;\\n    address implementation;\\n    bytes params;\\n  }\\n}\\n\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(\\n    address reserve,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\\ninterface ILendingPoolConfigurator {\\n  /**\\n   * @dev Emitted when a reserve is initialized.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aToken The address of the associated aToken contract\\n   * @param stableDebtToken The address of the associated stable rate debt token\\n   * @param variableDebtToken The address of the associated variable rate debt token\\n   * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n   **/\\n  event ReserveInitialized(\\n    address indexed asset,\\n    address indexed aToken,\\n    address stableDebtToken,\\n    address variableDebtToken,\\n    address interestRateStrategyAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when borrowing is enabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param stableRateEnabled True if stable rate borrowing is enabled, false otherwise\\n   **/\\n  event BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled);\\n\\n  /**\\n   * @dev Emitted when borrowing is disabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event BorrowingDisabledOnReserve(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when the collateralization risk parameters for the specified asset are updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n   **/\\n  event CollateralConfigurationChanged(\\n    address indexed asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  );\\n\\n  /**\\n   * @dev Emitted when stable rate borrowing is enabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event StableRateEnabledOnReserve(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when stable rate borrowing is disabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event StableRateDisabledOnReserve(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is activated\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveActivated(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is deactivated\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveDeactivated(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveFrozen(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveUnfrozen(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param factor The new reserve factor\\n   **/\\n  event ReserveFactorChanged(address indexed asset, uint256 factor);\\n\\n  /**\\n   * @dev Emitted when the reserve decimals are updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param decimals The new decimals\\n   **/\\n  event ReserveDecimalsChanged(address indexed asset, uint256 decimals);\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param strategy The new address of the interest strategy contract\\n   **/\\n  event ReserveInterestRateStrategyChanged(address indexed asset, address strategy);\\n\\n  /**\\n   * @dev Emitted when an aToken implementation is upgraded\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The aToken proxy address\\n   * @param implementation The new aToken implementation\\n   **/\\n  event ATokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Emitted when the implementation of a stable debt token is upgraded\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The stable debt token proxy address\\n   * @param implementation The new aToken implementation\\n   **/\\n  event StableDebtTokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Emitted when the implementation of a variable debt token is upgraded\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The variable debt token proxy address\\n   * @param implementation The new aToken implementation\\n   **/\\n  event VariableDebtTokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Initializes a reserve\\n   * @param aTokenImpl  The address of the aToken contract implementation\\n   * @param stableDebtTokenImpl The address of the stable debt token contract\\n   * @param variableDebtTokenImpl The address of the variable debt token contract\\n   * @param underlyingAssetDecimals The decimals of the reserve underlying asset\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract for this reserve\\n   **/\\n  function initReserve(\\n    address aTokenImpl,\\n    address stableDebtTokenImpl,\\n    address variableDebtTokenImpl,\\n    uint8 underlyingAssetDecimals,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function batchInitReserve(ConfiguratorInputTypes.InitReserveInput[] calldata input) external;\\n\\n  /**\\n   * @dev Updates the aToken implementation for the reserve\\n   * @param asset The address of the underlying asset of the reserve to be updated\\n   * @param implementation The address of the new aToken implementation\\n   **/\\n  function updateAToken(address asset, address implementation) external;\\n\\n  /**\\n   * @dev Updates the stable debt token implementation for the reserve\\n   * @param asset The address of the underlying asset of the reserve to be updated\\n   * @param implementation The address of the new aToken implementation\\n   **/\\n  function updateStableDebtToken(address asset, address implementation) external;\\n\\n  /**\\n   * @dev Updates the variable debt token implementation for the asset\\n   * @param asset The address of the underlying asset of the reserve to be updated\\n   * @param implementation The address of the new aToken implementation\\n   **/\\n  function updateVariableDebtToken(address asset, address implementation) external;\\n\\n  /**\\n   * @dev Enables borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param stableBorrowRateEnabled True if stable borrow rate needs to be enabled by default on this reserve\\n   **/\\n  function enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) external;\\n\\n  /**\\n   * @dev Disables borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function disableBorrowingOnReserve(address asset) external;\\n\\n  /**\\n   * @dev Configures the reserve collateralization parameters\\n   * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105%\\n   * means the liquidator will receive a 5% bonus\\n   **/\\n  function configureReserveAsCollateral(\\n    address asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  ) external;\\n\\n  /**\\n   * @dev Enable stable rate borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function enableReserveStableRate(address asset) external;\\n\\n  /**\\n   * @dev Disable stable rate borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function disableReserveStableRate(address asset) external;\\n\\n  /**\\n   * @dev Activates a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function activateReserve(address asset) external;\\n\\n  /**\\n   * @dev Deactivates a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function deactivateReserve(address asset) external;\\n\\n  /**\\n   * @dev Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow or rate swap\\n   *  but allows repayments, liquidations, rate rebalances and withdrawals\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function freezeReserve(address asset) external;\\n\\n  /**\\n   * @dev Unfreezes a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function unfreezeReserve(address asset) external;\\n\\n  /**\\n   * @dev Updates the reserve factor of a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param reserveFactor The new reserve factor of the reserve\\n   **/\\n  function setReserveFactor(address asset, uint256 reserveFactor) external;\\n\\n  /**\\n   * @dev Sets the interest rate strategy of a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The new address of the interest strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @dev pauses or unpauses all the actions of the protocol, including aToken transfers\\n   * @param val true if protocol needs to be paused, false otherwise\\n   **/\\n  function setPoolPause(bool val) external;\\n}\\n\\ninterface IAaveOracle {\\n  event WethSet(address indexed weth);\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\n  event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n  /// @notice Returns the WETH address (reference asset of the oracle)\\n  function WETH() external returns (address);\\n\\n  /// @notice External function called by the Aave governance to set or replace sources of assets\\n  /// @param assets The addresses of the assets\\n  /// @param sources The address of the source of each asset\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n\\n  /// @notice Sets the fallbackOracle\\n  /// - Callable only by the Aave governance\\n  /// @param fallbackOracle The address of the fallbackOracle\\n  function setFallbackOracle(address fallbackOracle) external;\\n\\n  /// @notice Gets an asset price by address\\n  /// @param asset The asset address\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /// @notice Gets a list of prices from a list of assets addresses\\n  /// @param assets The list of assets addresses\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n  /// @notice Gets the address of the source for an asset address\\n  /// @param asset The address of the asset\\n  /// @return address The address of the source\\n  function getSourceOfAsset(address asset) external view returns (address);\\n\\n  /// @notice Gets the address of the fallback oracle\\n  /// @return address The address of the fallback oracle\\n  function getFallbackOracle() external view returns (address);\\n}\\n\\nstruct TokenData {\\n  string symbol;\\n  address tokenAddress;\\n}\\n\\n// TODO: incomplete interface\\ninterface IAaveProtocolDataProvider {\\n  function getReserveConfigurationData(\\n    address asset\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 decimals,\\n      uint256 ltv,\\n      uint256 liquidationThreshold,\\n      uint256 liquidationBonus,\\n      uint256 reserveFactor,\\n      bool usageAsCollateralEnabled,\\n      bool borrowingEnabled,\\n      bool stableBorrowRateEnabled,\\n      bool isActive,\\n      bool isFrozen\\n    );\\n\\n  function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n  function getReserveTokensAddresses(\\n    address asset\\n  )\\n    external\\n    view\\n    returns (\\n      address aTokenAddress,\\n      address stableDebtTokenAddress,\\n      address variableDebtTokenAddress\\n    );\\n\\n  function getUserReserveData(\\n    address asset,\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 currentATokenBalance,\\n      uint256 currentStableDebt,\\n      uint256 currentVariableDebt,\\n      uint256 principalStableDebt,\\n      uint256 scaledVariableDebt,\\n      uint256 stableBorrowRate,\\n      uint256 liquidityRate,\\n      uint40 stableRateLastUpdated,\\n      bool usageAsCollateralEnabled\\n    );\\n}\\n\\ninterface ILendingRateOracle {\\n  /**\\n    @dev returns the market borrow rate in ray\\n    **/\\n  function getMarketBorrowRate(address asset) external view returns (uint256);\\n\\n  /**\\n    @dev sets the market borrow rate. Rate value must be in ray\\n    **/\\n  function setMarketBorrowRate(address asset, uint256 rate) external;\\n}\\n\\ninterface IDefaultInterestRateStrategy {\\n  function EXCESS_UTILIZATION_RATE() external view returns (uint256);\\n\\n  function OPTIMAL_UTILIZATION_RATE() external view returns (uint256);\\n\\n  function addressesProvider() external view returns (address);\\n\\n  function baseVariableBorrowRate() external view returns (uint256);\\n\\n  function calculateInterestRates(\\n    address reserve,\\n    uint256 availableLiquidity,\\n    uint256 totalStableDebt,\\n    uint256 totalVariableDebt,\\n    uint256 averageStableBorrowRate,\\n    uint256 reserveFactor\\n  ) external view returns (uint256, uint256, uint256);\\n\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n  function stableRateSlope1() external view returns (uint256);\\n\\n  function stableRateSlope2() external view returns (uint256);\\n\\n  function variableRateSlope1() external view returns (uint256);\\n\\n  function variableRateSlope2() external view returns (uint256);\\n}\\n\\ninterface IATokenV2 {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the nonce of the given user.\\n   * @param user The user to fetch the nonce for.\\n   */\\n  function _nonces(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n  /*\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset) external view returns (uint128, uint128, uint256);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(\\n    address[] calldata assets,\\n    uint256[] calldata emissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(address asset, uint256 userBalance, uint256 totalSupply) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(\\n    address[] calldata assets,\\n    address user\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-helpers/lib/aave-address-book/src/AaveV2EthereumAMM.sol\": {\r\n      \"content\": \"// AUTOGENERATED - MANUALLY CHANGES WILL BE REVERTED BY THE GENERATOR\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport {ILendingPoolAddressesProvider, ILendingPool, ILendingPoolConfigurator, IAaveOracle, IAaveProtocolDataProvider, ILendingRateOracle} from './AaveV2.sol';\\nimport {ICollector} from './common/ICollector.sol';\\n\\nlibrary AaveV2EthereumAMM {\\n  // https://etherscan.io/address/0xAcc030EF66f9dFEAE9CbB0cd1B25654b82cFA8d5\\n  ILendingPoolAddressesProvider internal constant POOL_ADDRESSES_PROVIDER =\\n    ILendingPoolAddressesProvider(0xAcc030EF66f9dFEAE9CbB0cd1B25654b82cFA8d5);\\n\\n  // https://etherscan.io/address/0x7937D4799803FbBe595ed57278Bc4cA21f3bFfCB\\n  ILendingPool internal constant POOL = ILendingPool(0x7937D4799803FbBe595ed57278Bc4cA21f3bFfCB);\\n\\n  // https://etherscan.io/address/0x23A875eDe3F1030138701683e42E9b16A7F87768\\n  ILendingPoolConfigurator internal constant POOL_CONFIGURATOR =\\n    ILendingPoolConfigurator(0x23A875eDe3F1030138701683e42E9b16A7F87768);\\n\\n  // https://etherscan.io/address/0xA50ba011c48153De246E5192C8f9258A2ba79Ca9\\n  IAaveOracle internal constant ORACLE = IAaveOracle(0xA50ba011c48153De246E5192C8f9258A2ba79Ca9);\\n\\n  // https://etherscan.io/address/0x8A32f49FFbA88aba6EFF96F45D8BD1D4b3f35c7D\\n  ILendingRateOracle internal constant LENDING_RATE_ORACLE =\\n    ILendingRateOracle(0x8A32f49FFbA88aba6EFF96F45D8BD1D4b3f35c7D);\\n\\n  // https://etherscan.io/address/0x0000000000000000000000000000000000000000\\n  IAaveProtocolDataProvider internal constant AAVE_PROTOCOL_DATA_PROVIDER =\\n    IAaveProtocolDataProvider(0x0000000000000000000000000000000000000000);\\n\\n  // https://etherscan.io/address/0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A\\n  address internal constant POOL_ADMIN = 0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A;\\n\\n  // https://etherscan.io/address/0xB9062896ec3A615a4e4444DF183F0531a77218AE\\n  address internal constant EMERGENCY_ADMIN = 0xB9062896ec3A615a4e4444DF183F0531a77218AE;\\n\\n  // https://etherscan.io/address/0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c\\n  ICollector internal constant COLLECTOR = ICollector(0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c);\\n\\n  // https://etherscan.io/address/0x0000000000000000000000000000000000000000\\n  address internal constant DEFAULT_INCENTIVES_CONTROLLER =\\n    0x0000000000000000000000000000000000000000;\\n\\n  // https://etherscan.io/address/0x0000000000000000000000000000000000000000\\n  address internal constant EMISSION_MANAGER = 0x0000000000000000000000000000000000000000;\\n\\n  // https://etherscan.io/address/0xcfC26009618ec2Ca8787180116a37Caa354a465C\\n  address internal constant CONFIG_ENGINE = 0xcfC26009618ec2Ca8787180116a37Caa354a465C;\\n\\n  // https://etherscan.io/address/0x3cd1dFB81C50A5300C60a181ED145a7286d81e0a\\n  address internal constant MIGRATION_HELPER = 0x3cd1dFB81C50A5300C60a181ED145a7286d81e0a;\\n\\n  // https://etherscan.io/address/0x52D306e36E3B6B02c153d0266ff0f85d18BCD413\\n  address internal constant POOL_ADDRESSES_PROVIDER_REGISTRY =\\n    0x52D306e36E3B6B02c153d0266ff0f85d18BCD413;\\n\\n  // https://etherscan.io/address/0x6e4D068105052C3877116DCF86f5FF36B7eCa2B8\\n  address internal constant RATES_FACTORY = 0x6e4D068105052C3877116DCF86f5FF36B7eCa2B8;\\n\\n  // https://etherscan.io/address/0xD01ab9a6577E1D84F142e44D49380e23A340387d\\n  address internal constant UI_INCENTIVE_DATA_PROVIDER = 0xD01ab9a6577E1D84F142e44D49380e23A340387d;\\n\\n  // https://etherscan.io/address/0x00e50FAB64eBB37b87df06Aa46b8B35d5f1A4e1A\\n  address internal constant UI_POOL_DATA_PROVIDER = 0x00e50FAB64eBB37b87df06Aa46b8B35d5f1A4e1A;\\n\\n  // https://etherscan.io/address/0x8E8dAd5409E0263a51C0aB5055dA66Be28cFF922\\n  address internal constant WALLET_BALANCE_PROVIDER = 0x8E8dAd5409E0263a51C0aB5055dA66Be28cFF922;\\n\\n  // https://etherscan.io/address/0x1C4a4e31231F71Fc34867D034a9E68f6fC798249\\n  address internal constant WETH_GATEWAY = 0x1C4a4e31231F71Fc34867D034a9E68f6fC798249;\\n}\\n\\nlibrary AaveV2EthereumAMMAssets {\\n  // https://etherscan.io/address/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n  address internal constant WETH_UNDERLYING = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  uint256 internal constant WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xf9Fb4AD91812b704Ba883B11d2B576E890a6730A\\n  address internal constant WETH_A_TOKEN = 0xf9Fb4AD91812b704Ba883B11d2B576E890a6730A;\\n\\n  // https://etherscan.io/address/0xA4C273d9A0C1fe2674F0E845160d6232768a3064\\n  address internal constant WETH_V_TOKEN = 0xA4C273d9A0C1fe2674F0E845160d6232768a3064;\\n\\n  // https://etherscan.io/address/0x118Ee405c6be8f9BA7cC7a98064EB5DA462235CF\\n  address internal constant WETH_S_TOKEN = 0x118Ee405c6be8f9BA7cC7a98064EB5DA462235CF;\\n\\n  // https://etherscan.io/address/0x0000000000000000000000000000000000000000\\n  address internal constant WETH_ORACLE = 0x0000000000000000000000000000000000000000;\\n\\n  // https://etherscan.io/address/0x8d02bac65cd84343eF8239d277794bad455cE889\\n  address internal constant WETH_INTEREST_RATE_STRATEGY =\\n    0x8d02bac65cd84343eF8239d277794bad455cE889;\\n\\n  // https://etherscan.io/address/0x6B175474E89094C44Da98b954EedeAC495271d0F\\n  address internal constant DAI_UNDERLYING = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n  uint256 internal constant DAI_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x79bE75FFC64DD58e66787E4Eae470c8a1FD08ba4\\n  address internal constant DAI_A_TOKEN = 0x79bE75FFC64DD58e66787E4Eae470c8a1FD08ba4;\\n\\n  // https://etherscan.io/address/0x3F4fA4937E72991367DC32687BC3278f095E7EAa\\n  address internal constant DAI_V_TOKEN = 0x3F4fA4937E72991367DC32687BC3278f095E7EAa;\\n\\n  // https://etherscan.io/address/0x8da51a5a3129343468a63A96ccae1ff1352a3dfE\\n  address internal constant DAI_S_TOKEN = 0x8da51a5a3129343468a63A96ccae1ff1352a3dfE;\\n\\n  // https://etherscan.io/address/0x773616E4d11A78F511299002da57A0a94577F1f4\\n  address internal constant DAI_ORACLE = 0x773616E4d11A78F511299002da57A0a94577F1f4;\\n\\n  // https://etherscan.io/address/0x79F40CDF9f491f148E522D7845c3fBF61E56c33F\\n  address internal constant DAI_INTEREST_RATE_STRATEGY = 0x79F40CDF9f491f148E522D7845c3fBF61E56c33F;\\n\\n  // https://etherscan.io/address/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n  address internal constant USDC_UNDERLYING = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n  uint256 internal constant USDC_DECIMALS = 6;\\n\\n  // https://etherscan.io/address/0xd24946147829DEaA935bE2aD85A3291dbf109c80\\n  address internal constant USDC_A_TOKEN = 0xd24946147829DEaA935bE2aD85A3291dbf109c80;\\n\\n  // https://etherscan.io/address/0xCFDC74b97b69319683fec2A4Ef95c4Ab739F1B12\\n  address internal constant USDC_V_TOKEN = 0xCFDC74b97b69319683fec2A4Ef95c4Ab739F1B12;\\n\\n  // https://etherscan.io/address/0xE5971a8a741892F3b3ac3E9c94d02588190cE220\\n  address internal constant USDC_S_TOKEN = 0xE5971a8a741892F3b3ac3E9c94d02588190cE220;\\n\\n  // https://etherscan.io/address/0x986b5E1e1755e3C2440e960477f25201B0a8bbD4\\n  address internal constant USDC_ORACLE = 0x986b5E1e1755e3C2440e960477f25201B0a8bbD4;\\n\\n  // https://etherscan.io/address/0x79F40CDF9f491f148E522D7845c3fBF61E56c33F\\n  address internal constant USDC_INTEREST_RATE_STRATEGY =\\n    0x79F40CDF9f491f148E522D7845c3fBF61E56c33F;\\n\\n  // https://etherscan.io/address/0xdAC17F958D2ee523a2206206994597C13D831ec7\\n  address internal constant USDT_UNDERLYING = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n  uint256 internal constant USDT_DECIMALS = 6;\\n\\n  // https://etherscan.io/address/0x17a79792Fe6fE5C95dFE95Fe3fCEE3CAf4fE4Cb7\\n  address internal constant USDT_A_TOKEN = 0x17a79792Fe6fE5C95dFE95Fe3fCEE3CAf4fE4Cb7;\\n\\n  // https://etherscan.io/address/0xDcFE9BfC246b02Da384de757464a35eFCa402797\\n  address internal constant USDT_V_TOKEN = 0xDcFE9BfC246b02Da384de757464a35eFCa402797;\\n\\n  // https://etherscan.io/address/0x04A0577a89E1b9E8f6c87ee26cCe6a168fFfC5b5\\n  address internal constant USDT_S_TOKEN = 0x04A0577a89E1b9E8f6c87ee26cCe6a168fFfC5b5;\\n\\n  // https://etherscan.io/address/0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46\\n  address internal constant USDT_ORACLE = 0xEe9F2375b4bdF6387aa8265dD4FB8F16512A1d46;\\n\\n  // https://etherscan.io/address/0x79F40CDF9f491f148E522D7845c3fBF61E56c33F\\n  address internal constant USDT_INTEREST_RATE_STRATEGY =\\n    0x79F40CDF9f491f148E522D7845c3fBF61E56c33F;\\n\\n  // https://etherscan.io/address/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\\n  address internal constant WBTC_UNDERLYING = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n\\n  uint256 internal constant WBTC_DECIMALS = 8;\\n\\n  // https://etherscan.io/address/0x13B2f6928D7204328b0E8E4BCd0379aA06EA21FA\\n  address internal constant WBTC_A_TOKEN = 0x13B2f6928D7204328b0E8E4BCd0379aA06EA21FA;\\n\\n  // https://etherscan.io/address/0x3b99fdaFdfE70d65101a4ba8cDC35dAFbD26375f\\n  address internal constant WBTC_V_TOKEN = 0x3b99fdaFdfE70d65101a4ba8cDC35dAFbD26375f;\\n\\n  // https://etherscan.io/address/0x55E575d092c934503D7635A837584E2900e01d2b\\n  address internal constant WBTC_S_TOKEN = 0x55E575d092c934503D7635A837584E2900e01d2b;\\n\\n  // https://etherscan.io/address/0xFD858c8bC5ac5e10f01018bC78471bb0DC392247\\n  address internal constant WBTC_ORACLE = 0xFD858c8bC5ac5e10f01018bC78471bb0DC392247;\\n\\n  // https://etherscan.io/address/0x8d02bac65cd84343eF8239d277794bad455cE889\\n  address internal constant WBTC_INTEREST_RATE_STRATEGY =\\n    0x8d02bac65cd84343eF8239d277794bad455cE889;\\n\\n  // https://etherscan.io/address/0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11\\n  address internal constant UNI_DAI_WETH_UNDERLYING = 0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11;\\n\\n  uint256 internal constant UNI_DAI_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x9303EabC860a743aABcc3A1629014CaBcc3F8D36\\n  address internal constant UNI_DAI_WETH_A_TOKEN = 0x9303EabC860a743aABcc3A1629014CaBcc3F8D36;\\n\\n  // https://etherscan.io/address/0x23bcc861b989762275165d08B127911F09c71628\\n  address internal constant UNI_DAI_WETH_V_TOKEN = 0x23bcc861b989762275165d08B127911F09c71628;\\n\\n  // https://etherscan.io/address/0xE9562bf0A11315A1e39f9182F446eA58002f010E\\n  address internal constant UNI_DAI_WETH_S_TOKEN = 0xE9562bf0A11315A1e39f9182F446eA58002f010E;\\n\\n  // https://etherscan.io/address/0x66A6b87A18DB78086acda75b7720DC47CdABcC05\\n  address internal constant UNI_DAI_WETH_ORACLE = 0x66A6b87A18DB78086acda75b7720DC47CdABcC05;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_DAI_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xBb2b8038a1640196FbE3e38816F3e67Cba72D940\\n  address internal constant UNI_WBTC_WETH_UNDERLYING = 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940;\\n\\n  uint256 internal constant UNI_WBTC_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xc58F53A8adff2fB4eb16ED56635772075E2EE123\\n  address internal constant UNI_WBTC_WETH_A_TOKEN = 0xc58F53A8adff2fB4eb16ED56635772075E2EE123;\\n\\n  // https://etherscan.io/address/0x02aAeB4C7736177242Ee0f71f6f6A0F057Aba87d\\n  address internal constant UNI_WBTC_WETH_V_TOKEN = 0x02aAeB4C7736177242Ee0f71f6f6A0F057Aba87d;\\n\\n  // https://etherscan.io/address/0xeef7d082D9bE2F5eC73C072228706286dea1f492\\n  address internal constant UNI_WBTC_WETH_S_TOKEN = 0xeef7d082D9bE2F5eC73C072228706286dea1f492;\\n\\n  // https://etherscan.io/address/0x7004BB6F2013F13C54899309cCa029B49707E547\\n  address internal constant UNI_WBTC_WETH_ORACLE = 0x7004BB6F2013F13C54899309cCa029B49707E547;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_WBTC_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f\\n  address internal constant UNI_AAVE_WETH_UNDERLYING = 0xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f;\\n\\n  uint256 internal constant UNI_AAVE_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xe59d2FF6995a926A574390824a657eEd36801E55\\n  address internal constant UNI_AAVE_WETH_A_TOKEN = 0xe59d2FF6995a926A574390824a657eEd36801E55;\\n\\n  // https://etherscan.io/address/0x859ED7D9E92d1fe42fF95C3BC3a62F7cB59C373E\\n  address internal constant UNI_AAVE_WETH_V_TOKEN = 0x859ED7D9E92d1fe42fF95C3BC3a62F7cB59C373E;\\n\\n  // https://etherscan.io/address/0x997b26eFf106f138e71160022CaAb0AFC5814643\\n  address internal constant UNI_AAVE_WETH_S_TOKEN = 0x997b26eFf106f138e71160022CaAb0AFC5814643;\\n\\n  // https://etherscan.io/address/0xB525547968610395B60085bDc8033FFeaEaa5F64\\n  address internal constant UNI_AAVE_WETH_ORACLE = 0xB525547968610395B60085bDc8033FFeaEaa5F64;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_AAVE_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xB6909B960DbbE7392D405429eB2b3649752b4838\\n  address internal constant UNI_BAT_WETH_UNDERLYING = 0xB6909B960DbbE7392D405429eB2b3649752b4838;\\n\\n  uint256 internal constant UNI_BAT_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xA1B0edF4460CC4d8bFAA18Ed871bFF15E5b57Eb4\\n  address internal constant UNI_BAT_WETH_A_TOKEN = 0xA1B0edF4460CC4d8bFAA18Ed871bFF15E5b57Eb4;\\n\\n  // https://etherscan.io/address/0x3Fbef89A21Dc836275bC912849627b33c61b09b4\\n  address internal constant UNI_BAT_WETH_V_TOKEN = 0x3Fbef89A21Dc836275bC912849627b33c61b09b4;\\n\\n  // https://etherscan.io/address/0x27c67541a4ea26a436e311b2E6fFeC82083a6983\\n  address internal constant UNI_BAT_WETH_S_TOKEN = 0x27c67541a4ea26a436e311b2E6fFeC82083a6983;\\n\\n  // https://etherscan.io/address/0xB394D8a1CE721630Cbea8Ec110DCEf0D283EDE3a\\n  address internal constant UNI_BAT_WETH_ORACLE = 0xB394D8a1CE721630Cbea8Ec110DCEf0D283EDE3a;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_BAT_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5\\n  address internal constant UNI_DAI_USDC_UNDERLYING = 0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5;\\n\\n  uint256 internal constant UNI_DAI_USDC_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xE340B25fE32B1011616bb8EC495A4d503e322177\\n  address internal constant UNI_DAI_USDC_A_TOKEN = 0xE340B25fE32B1011616bb8EC495A4d503e322177;\\n\\n  // https://etherscan.io/address/0x925E3FDd927E20e33C3177C4ff6fb72aD1133C87\\n  address internal constant UNI_DAI_USDC_V_TOKEN = 0x925E3FDd927E20e33C3177C4ff6fb72aD1133C87;\\n\\n  // https://etherscan.io/address/0x6Bb2BdD21920FcB2Ad855AB5d523222F31709d1f\\n  address internal constant UNI_DAI_USDC_S_TOKEN = 0x6Bb2BdD21920FcB2Ad855AB5d523222F31709d1f;\\n\\n  // https://etherscan.io/address/0x3B148Fa5E8297DB64262442052b227328730EA81\\n  address internal constant UNI_DAI_USDC_ORACLE = 0x3B148Fa5E8297DB64262442052b227328730EA81;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_DAI_USDC_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0x3dA1313aE46132A397D90d95B1424A9A7e3e0fCE\\n  address internal constant UNI_CRV_WETH_UNDERLYING = 0x3dA1313aE46132A397D90d95B1424A9A7e3e0fCE;\\n\\n  uint256 internal constant UNI_CRV_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x0ea20e7fFB006d4Cfe84df2F72d8c7bD89247DB0\\n  address internal constant UNI_CRV_WETH_A_TOKEN = 0x0ea20e7fFB006d4Cfe84df2F72d8c7bD89247DB0;\\n\\n  // https://etherscan.io/address/0xF3f1a76cA6356a908CdCdE6b2AC2eaace3739Cd0\\n  address internal constant UNI_CRV_WETH_V_TOKEN = 0xF3f1a76cA6356a908CdCdE6b2AC2eaace3739Cd0;\\n\\n  // https://etherscan.io/address/0xd6035f8803eE9f173b1D3EBc3BDE0Ea6B5165636\\n  address internal constant UNI_CRV_WETH_S_TOKEN = 0xd6035f8803eE9f173b1D3EBc3BDE0Ea6B5165636;\\n\\n  // https://etherscan.io/address/0x10F7078e2f29802D2AC78045F61A69aE0883535A\\n  address internal constant UNI_CRV_WETH_ORACLE = 0x10F7078e2f29802D2AC78045F61A69aE0883535A;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_CRV_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974\\n  address internal constant UNI_LINK_WETH_UNDERLYING = 0xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974;\\n\\n  uint256 internal constant UNI_LINK_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xb8db81B84d30E2387de0FF330420A4AAA6688134\\n  address internal constant UNI_LINK_WETH_A_TOKEN = 0xb8db81B84d30E2387de0FF330420A4AAA6688134;\\n\\n  // https://etherscan.io/address/0xeDe4052ed8e1F422F4E5062c679f6B18693fEcdc\\n  address internal constant UNI_LINK_WETH_V_TOKEN = 0xeDe4052ed8e1F422F4E5062c679f6B18693fEcdc;\\n\\n  // https://etherscan.io/address/0xeb32b3A1De9a1915D2b452B673C53883b9Fa6a97\\n  address internal constant UNI_LINK_WETH_S_TOKEN = 0xeb32b3A1De9a1915D2b452B673C53883b9Fa6a97;\\n\\n  // https://etherscan.io/address/0x30adCEfA5d483284FD79E1eFd54ED3e0A8eaA632\\n  address internal constant UNI_LINK_WETH_ORACLE = 0x30adCEfA5d483284FD79E1eFd54ED3e0A8eaA632;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_LINK_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xC2aDdA861F89bBB333c90c492cB837741916A225\\n  address internal constant UNI_MKR_WETH_UNDERLYING = 0xC2aDdA861F89bBB333c90c492cB837741916A225;\\n\\n  uint256 internal constant UNI_MKR_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x370adc71f67f581158Dc56f539dF5F399128Ddf9\\n  address internal constant UNI_MKR_WETH_A_TOKEN = 0x370adc71f67f581158Dc56f539dF5F399128Ddf9;\\n\\n  // https://etherscan.io/address/0xf36C394775285F89bBBDF09533421E3e81e8447c\\n  address internal constant UNI_MKR_WETH_V_TOKEN = 0xf36C394775285F89bBBDF09533421E3e81e8447c;\\n\\n  // https://etherscan.io/address/0x6E7E38bB73E19b62AB5567940Caaa514e9d85982\\n  address internal constant UNI_MKR_WETH_S_TOKEN = 0x6E7E38bB73E19b62AB5567940Caaa514e9d85982;\\n\\n  // https://etherscan.io/address/0xEBF4A448ff3D835F8FA883941a3E9D5E74B40B5E\\n  address internal constant UNI_MKR_WETH_ORACLE = 0xEBF4A448ff3D835F8FA883941a3E9D5E74B40B5E;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_MKR_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0x8Bd1661Da98EBDd3BD080F0bE4e6d9bE8cE9858c\\n  address internal constant UNI_REN_WETH_UNDERLYING = 0x8Bd1661Da98EBDd3BD080F0bE4e6d9bE8cE9858c;\\n\\n  uint256 internal constant UNI_REN_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xA9e201A4e269d6cd5E9F0FcbcB78520cf815878B\\n  address internal constant UNI_REN_WETH_A_TOKEN = 0xA9e201A4e269d6cd5E9F0FcbcB78520cf815878B;\\n\\n  // https://etherscan.io/address/0x2A8d5B1c1de15bfcd5EC41368C0295c60D8Da83c\\n  address internal constant UNI_REN_WETH_V_TOKEN = 0x2A8d5B1c1de15bfcd5EC41368C0295c60D8Da83c;\\n\\n  // https://etherscan.io/address/0x312edeADf68E69A0f53518bF27EAcD1AbcC2897e\\n  address internal constant UNI_REN_WETH_S_TOKEN = 0x312edeADf68E69A0f53518bF27EAcD1AbcC2897e;\\n\\n  // https://etherscan.io/address/0xe2f7C06906A9dB063C28EB5c71B6Ab454e5222dD\\n  address internal constant UNI_REN_WETH_ORACLE = 0xe2f7C06906A9dB063C28EB5c71B6Ab454e5222dD;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_REN_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0x43AE24960e5534731Fc831386c07755A2dc33D47\\n  address internal constant UNI_SNX_WETH_UNDERLYING = 0x43AE24960e5534731Fc831386c07755A2dc33D47;\\n\\n  uint256 internal constant UNI_SNX_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x38E491A71291CD43E8DE63b7253E482622184894\\n  address internal constant UNI_SNX_WETH_A_TOKEN = 0x38E491A71291CD43E8DE63b7253E482622184894;\\n\\n  // https://etherscan.io/address/0xfd15008efA339A2390B48d2E0Ca8Abd523b406d3\\n  address internal constant UNI_SNX_WETH_V_TOKEN = 0xfd15008efA339A2390B48d2E0Ca8Abd523b406d3;\\n\\n  // https://etherscan.io/address/0xef62A0C391D89381ddf8A8C90Ba772081107D287\\n  address internal constant UNI_SNX_WETH_S_TOKEN = 0xef62A0C391D89381ddf8A8C90Ba772081107D287;\\n\\n  // https://etherscan.io/address/0x29bfee7E90572Abf1088a58a145a10D051b78E46\\n  address internal constant UNI_SNX_WETH_ORACLE = 0x29bfee7E90572Abf1088a58a145a10D051b78E46;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_SNX_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xd3d2E2692501A5c9Ca623199D38826e513033a17\\n  address internal constant UNI_UNI_WETH_UNDERLYING = 0xd3d2E2692501A5c9Ca623199D38826e513033a17;\\n\\n  uint256 internal constant UNI_UNI_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x3D26dcd840fCC8e4B2193AcE8A092e4a65832F9f\\n  address internal constant UNI_UNI_WETH_A_TOKEN = 0x3D26dcd840fCC8e4B2193AcE8A092e4a65832F9f;\\n\\n  // https://etherscan.io/address/0x0D878FbB01fbEEa7ddEFb896d56f1D3167af919F\\n  address internal constant UNI_UNI_WETH_V_TOKEN = 0x0D878FbB01fbEEa7ddEFb896d56f1D3167af919F;\\n\\n  // https://etherscan.io/address/0x6febCE732191Dc915D6fB7Dc5FE3AEFDDb85Bd1B\\n  address internal constant UNI_UNI_WETH_S_TOKEN = 0x6febCE732191Dc915D6fB7Dc5FE3AEFDDb85Bd1B;\\n\\n  // https://etherscan.io/address/0xC2E93e8121237A885A00627975eB06C7BF9808d6\\n  address internal constant UNI_UNI_WETH_ORACLE = 0xC2E93e8121237A885A00627975eB06C7BF9808d6;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_UNI_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc\\n  address internal constant UNI_USDC_WETH_UNDERLYING = 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc;\\n\\n  uint256 internal constant UNI_USDC_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x391E86e2C002C70dEe155eAceB88F7A3c38f5976\\n  address internal constant UNI_USDC_WETH_A_TOKEN = 0x391E86e2C002C70dEe155eAceB88F7A3c38f5976;\\n\\n  // https://etherscan.io/address/0x26625d1dDf520fC8D975cc68eC6E0391D9d3Df61\\n  address internal constant UNI_USDC_WETH_V_TOKEN = 0x26625d1dDf520fC8D975cc68eC6E0391D9d3Df61;\\n\\n  // https://etherscan.io/address/0xfAB4C9775A4316Ec67a8223ecD0F70F87fF532Fc\\n  address internal constant UNI_USDC_WETH_S_TOKEN = 0xfAB4C9775A4316Ec67a8223ecD0F70F87fF532Fc;\\n\\n  // https://etherscan.io/address/0x71c4a2173CE3620982DC8A7D870297533360Da4E\\n  address internal constant UNI_USDC_WETH_ORACLE = 0x71c4a2173CE3620982DC8A7D870297533360Da4E;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_USDC_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0x004375Dff511095CC5A197A54140a24eFEF3A416\\n  address internal constant UNI_WBTC_USDC_UNDERLYING = 0x004375Dff511095CC5A197A54140a24eFEF3A416;\\n\\n  uint256 internal constant UNI_WBTC_USDC_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x2365a4890eD8965E564B7E2D27C38Ba67Fec4C6F\\n  address internal constant UNI_WBTC_USDC_A_TOKEN = 0x2365a4890eD8965E564B7E2D27C38Ba67Fec4C6F;\\n\\n  // https://etherscan.io/address/0x36dA0C5dC23397CBf9D13BbD74E93C04f99633Af\\n  address internal constant UNI_WBTC_USDC_V_TOKEN = 0x36dA0C5dC23397CBf9D13BbD74E93C04f99633Af;\\n\\n  // https://etherscan.io/address/0xc66bfA05cCe646f05F71DeE333e3229cE24Bbb7e\\n  address internal constant UNI_WBTC_USDC_S_TOKEN = 0xc66bfA05cCe646f05F71DeE333e3229cE24Bbb7e;\\n\\n  // https://etherscan.io/address/0x11f4ba2227F21Dc2A9F0b0e6Ea740369d580a212\\n  address internal constant UNI_WBTC_USDC_ORACLE = 0x11f4ba2227F21Dc2A9F0b0e6Ea740369d580a212;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_WBTC_USDC_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0x2fDbAdf3C4D5A8666Bc06645B8358ab803996E28\\n  address internal constant UNI_YFI_WETH_UNDERLYING = 0x2fDbAdf3C4D5A8666Bc06645B8358ab803996E28;\\n\\n  uint256 internal constant UNI_YFI_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x5394794Be8b6eD5572FCd6b27103F46b5F390E8f\\n  address internal constant UNI_YFI_WETH_A_TOKEN = 0x5394794Be8b6eD5572FCd6b27103F46b5F390E8f;\\n\\n  // https://etherscan.io/address/0xDf70Bdf01a3eBcd0D918FF97390852A914a92Df7\\n  address internal constant UNI_YFI_WETH_V_TOKEN = 0xDf70Bdf01a3eBcd0D918FF97390852A914a92Df7;\\n\\n  // https://etherscan.io/address/0x9B054B76d6DE1c4892ba025456A9c4F9be5B1766\\n  address internal constant UNI_YFI_WETH_S_TOKEN = 0x9B054B76d6DE1c4892ba025456A9c4F9be5B1766;\\n\\n  // https://etherscan.io/address/0x664223b8Bb0934aE0970e601F452f75AaCe9Aa2A\\n  address internal constant UNI_YFI_WETH_ORACLE = 0x664223b8Bb0934aE0970e601F452f75AaCe9Aa2A;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant UNI_YFI_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0x1efF8aF5D577060BA4ac8A29A13525bb0Ee2A3D5\\n  address internal constant BPT_WBTC_WETH_UNDERLYING = 0x1efF8aF5D577060BA4ac8A29A13525bb0Ee2A3D5;\\n\\n  uint256 internal constant BPT_WBTC_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0x358bD0d980E031E23ebA9AA793926857703783BD\\n  address internal constant BPT_WBTC_WETH_A_TOKEN = 0x358bD0d980E031E23ebA9AA793926857703783BD;\\n\\n  // https://etherscan.io/address/0xF655DF3832859cfB0AcfD88eDff3452b9Aa6Db24\\n  address internal constant BPT_WBTC_WETH_V_TOKEN = 0xF655DF3832859cfB0AcfD88eDff3452b9Aa6Db24;\\n\\n  // https://etherscan.io/address/0x46406eCd20FDE1DF4d80F15F07c434fa95CB6b33\\n  address internal constant BPT_WBTC_WETH_S_TOKEN = 0x46406eCd20FDE1DF4d80F15F07c434fa95CB6b33;\\n\\n  // https://etherscan.io/address/0x4CA8D8fC2b4fCe8A2dcB71Da884bba042d48E067\\n  address internal constant BPT_WBTC_WETH_ORACLE = 0x4CA8D8fC2b4fCe8A2dcB71Da884bba042d48E067;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant BPT_WBTC_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0x59A19D8c652FA0284f44113D0ff9aBa70bd46fB4\\n  address internal constant BPT_BAL_WETH_UNDERLYING = 0x59A19D8c652FA0284f44113D0ff9aBa70bd46fB4;\\n\\n  uint256 internal constant BPT_BAL_WETH_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xd109b2A304587569c84308c55465cd9fF0317bFB\\n  address internal constant BPT_BAL_WETH_A_TOKEN = 0xd109b2A304587569c84308c55465cd9fF0317bFB;\\n\\n  // https://etherscan.io/address/0xF41A5Cc7a61519B08056176d7B4b87AB34dF55AD\\n  address internal constant BPT_BAL_WETH_V_TOKEN = 0xF41A5Cc7a61519B08056176d7B4b87AB34dF55AD;\\n\\n  // https://etherscan.io/address/0x6474d116476b8eDa1B21472a599Ff76A829AbCbb\\n  address internal constant BPT_BAL_WETH_S_TOKEN = 0x6474d116476b8eDa1B21472a599Ff76A829AbCbb;\\n\\n  // https://etherscan.io/address/0x2e4e78936b100be6Ef85BCEf7FB25bC770B02B85\\n  address internal constant BPT_BAL_WETH_ORACLE = 0x2e4e78936b100be6Ef85BCEf7FB25bC770B02B85;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant BPT_BAL_WETH_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e\\n  address internal constant GUNI_DAI_USDC_UNDERLYING = 0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e;\\n\\n  uint256 internal constant GUNI_DAI_USDC_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xd145c6ae8931ed5Bca9b5f5B7dA5991F5aB63B5c\\n  address internal constant GUNI_DAI_USDC_A_TOKEN = 0xd145c6ae8931ed5Bca9b5f5B7dA5991F5aB63B5c;\\n\\n  // https://etherscan.io/address/0x40533CC601Ec5b79B00D76348ADc0c81d93d926D\\n  address internal constant GUNI_DAI_USDC_V_TOKEN = 0x40533CC601Ec5b79B00D76348ADc0c81d93d926D;\\n\\n  // https://etherscan.io/address/0x460Fd61bBDe7235C3F345901ad677854c9330c86\\n  address internal constant GUNI_DAI_USDC_S_TOKEN = 0x460Fd61bBDe7235C3F345901ad677854c9330c86;\\n\\n  // https://etherscan.io/address/0x7843eA2E3e60b24cc12B56C5627Adc7F9f0749D6\\n  address internal constant GUNI_DAI_USDC_ORACLE = 0x7843eA2E3e60b24cc12B56C5627Adc7F9f0749D6;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant GUNI_DAI_USDC_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n\\n  // https://etherscan.io/address/0xD2eeC91055F07fE24C9cCB25828ecfEFd4be0c41\\n  address internal constant GUNI_USDC_USDT_UNDERLYING = 0xD2eeC91055F07fE24C9cCB25828ecfEFd4be0c41;\\n\\n  uint256 internal constant GUNI_USDC_USDT_DECIMALS = 18;\\n\\n  // https://etherscan.io/address/0xCa5DFDABBfFD58cfD49A9f78Ca52eC8e0591a3C5\\n  address internal constant GUNI_USDC_USDT_A_TOKEN = 0xCa5DFDABBfFD58cfD49A9f78Ca52eC8e0591a3C5;\\n\\n  // https://etherscan.io/address/0x0B7c7d9c5548A23D0455d1edeC541cc2AD955a9d\\n  address internal constant GUNI_USDC_USDT_V_TOKEN = 0x0B7c7d9c5548A23D0455d1edeC541cc2AD955a9d;\\n\\n  // https://etherscan.io/address/0xFEaeCde9Eb0cd43FDE13427C6C7ef406780a8136\\n  address internal constant GUNI_USDC_USDT_S_TOKEN = 0xFEaeCde9Eb0cd43FDE13427C6C7ef406780a8136;\\n\\n  // https://etherscan.io/address/0x399e3bb2BBd49c570aa6edc6ac390E0D0aCbbD5e\\n  address internal constant GUNI_USDC_USDT_ORACLE = 0x399e3bb2BBd49c570aa6edc6ac390E0D0aCbbD5e;\\n\\n  // https://etherscan.io/address/0x52E39422cd86a12a13773D86af5FdBF5665989aD\\n  address internal constant GUNI_USDC_USDT_INTEREST_RATE_STRATEGY =\\n    0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n}\\n\"\r\n    },\r\n    \"lib/aave-helpers/lib/aave-address-book/src/common/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"lib/aave-helpers/lib/aave-address-book/src/common/ICollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ICollector\\n * @notice Defines the interface of the Collector contract\\n * @author Aave\\n **/\\ninterface ICollector {\\n  struct Stream {\\n    uint256 deposit;\\n    uint256 ratePerSecond;\\n    uint256 remainingBalance;\\n    uint256 startTime;\\n    uint256 stopTime;\\n    address recipient;\\n    address sender;\\n    address tokenAddress;\\n    bool isEntity;\\n  }\\n\\n  /** @notice Emitted when the funds admin changes\\n   * @param fundsAdmin The new funds admin.\\n   **/\\n  event NewFundsAdmin(address indexed fundsAdmin);\\n\\n  /** @notice Emitted when the new stream is created\\n   * @param streamId The identifier of the stream.\\n   * @param sender The address of the collector.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param deposit The amount of money to be streamed.\\n   * @param tokenAddress The ERC20 token to use as streaming currency.\\n   * @param startTime The unix timestamp for when the stream starts.\\n   * @param stopTime The unix timestamp for when the stream stops.\\n   **/\\n  event CreateStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  );\\n\\n  /**\\n   * @notice Emmitted when withdraw happens from the contract to the recipient's account.\\n   * @param streamId The id of the stream to withdraw tokens from.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param amount The amount of tokens to withdraw.\\n   */\\n  event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\n\\n  /**\\n   * @notice Emmitted when the stream is canceled.\\n   * @param streamId The id of the stream to withdraw tokens from.\\n   * @param sender The address of the collector.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param senderBalance The sender's balance at the moment of cancelling.\\n   * @param recipientBalance The recipient's balance at the moment of cancelling.\\n   */\\n  event CancelStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 senderBalance,\\n    uint256 recipientBalance\\n  );\\n\\n  /** @notice Returns the mock ETH reference address\\n   * @return address The address\\n   **/\\n  function ETH_MOCK_ADDRESS() external pure returns (address);\\n\\n  /** @notice Initializes the contracts\\n   * @param fundsAdmin Funds admin address\\n   * @param nextStreamId StreamId to set, applied if greater than 0\\n   **/\\n  function initialize(address fundsAdmin, uint256 nextStreamId) external;\\n\\n  /**\\n   * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\\n   * @return address The address of the funds admin\\n   **/\\n  function getFundsAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Returns the available funds for the given stream id and address.\\n   * @param streamId The id of the stream for which to query the balance.\\n   * @param who The address for which to query the balance.\\n   * @notice Returns the total funds allocated to `who` as uint256.\\n   */\\n  function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Function for the funds admin to give ERC20 allowance to other parties\\n   * @param token The address of the token to give allowance from\\n   * @param recipient Allowance's recipient\\n   * @param amount Allowance to approve\\n   **/\\n  function approve(\\n    //IERC20 token,\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Function for the funds admin to transfer ERC20 tokens to other parties\\n   * @param token The address of the token to transfer\\n   * @param recipient Transfer's recipient\\n   * @param amount Amount to transfer\\n   **/\\n  function transfer(\\n    //IERC20 token,\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @dev Transfer the ownership of the funds administrator role.\\n          This function should only be callable by the current funds administrator.\\n   * @param admin The address of the new funds administrator\\n   */\\n  function setFundsAdmin(address admin) external;\\n\\n  /**\\n   * @notice Creates a new stream funded by this contracts itself and paid towards `recipient`.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param deposit The amount of money to be streamed.\\n   * @param tokenAddress The ERC20 token to use as streaming currency.\\n   * @param startTime The unix timestamp for when the stream starts.\\n   * @param stopTime The unix timestamp for when the stream stops.\\n   * @return streamId the uint256 id of the newly created stream.\\n   */\\n  function createStream(\\n    address recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external returns (uint256 streamId);\\n\\n  /**\\n   * @notice Returns the stream with all its properties.\\n   * @dev Throws if the id does not point to a valid stream.\\n   * @param streamId The id of the stream to query.\\n   * @notice Returns the stream object.\\n   */\\n  function getStream(\\n    uint256 streamId\\n  )\\n    external\\n    view\\n    returns (\\n      address sender,\\n      address recipient,\\n      uint256 deposit,\\n      address tokenAddress,\\n      uint256 startTime,\\n      uint256 stopTime,\\n      uint256 remainingBalance,\\n      uint256 ratePerSecond\\n    );\\n\\n  /**\\n   * @notice Withdraws from the contract to the recipient's account.\\n   * @param streamId The id of the stream to withdraw tokens from.\\n   * @param amount The amount of tokens to withdraw.\\n   * @return bool Returns true if successful.\\n   */\\n  function withdrawFromStream(uint256 streamId, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\n   * @param streamId The id of the stream to cancel.\\n   * @return bool Returns true if successful.\\n   */\\n  function cancelStream(uint256 streamId) external returns (bool);\\n\\n  /**\\n   * @notice Returns the next available stream id\\n   * @return nextStreamId Returns the stream id.\\n   */\\n  function getNextStreamId() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/payloads/V2EthAmmLiquidationSentinelPayload.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.12;\\n\\nimport {AaveV2EthereumAMM} from 'aave-address-book/AaveV2EthereumAMM.sol';\\n\\ncontract V2EthAmmLiquidationSentinelPayload {\\n  address public immutable NEW_COLLATERAL_MANAGER;\\n\\n  constructor(address collateralManager) public {\\n    NEW_COLLATERAL_MANAGER = collateralManager;\\n  }\\n\\n  function execute() public {\\n    AaveV2EthereumAMM.POOL_ADDRESSES_PROVIDER.setLendingPoolCollateralManager(NEW_COLLATERAL_MANAGER);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@aave/core-v3/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"aave-address-book/=lib/aave-helpers/lib/aave-address-book/src/\",\r\n      \"aave-helpers/=lib/aave-helpers/src/\",\r\n      \"aave-v3-core/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"ds-test/=lib/aave-helpers/lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/aave-helpers/lib/forge-std/src/\",\r\n      \"solidity-utils/=lib/aave-helpers/lib/solidity-utils/src/\",\r\n      \"governance-crosschain-bridges/=lib/aave-helpers/lib/governance-crosschain-bridges/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  },\r\n  \"language\": \"Solidity\"\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NEW_COLLATERAL_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "V2EthAmmLiquidationSentinelPayload", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000368e6441bb27159c6e8e6d3bbd9147becba915e3", "EVMVersion": "istanbul", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}