{"SourceCode": "{\"ERC20Base.sol\":{\"content\":\"/**\\r\\n    Website: https://zonkey.io\\r\\n    Twitter: https://twitter.com/zonkeyio\\r\\n    Telegram: https://t.me/zonkeyofficial\\r\\n**/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract ERC20Base {\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal _allowances;\\r\\n    mapping(address =\\u003e uint256) internal _balances;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(\\r\\n            currentAllowance \\u003e= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n\\r\\n        unchecked {\\r\\n            _approve(sender, msg.sender, currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance \\u003e= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\"},\"ZxBanana.sol\":{\"content\":\"/**\\r\\n    Website: https://zonkey.io\\r\\n    Telegram: https://t.me/ZonkeyOfficial\\r\\n    Twitter: https://twitter.com/zonkeyio\\r\\n\\r\\n    ZonkeyRewardsHub Contract: 0x8C66DF0542Cf2c194dF5281c7685395D08DA9280\\r\\n\\r\\n    ZxBANANA, a Zonkey project, offers a unique system that airdrops rewards to the most engaged BANANA Gun users with every ZxBANANA uniswap transaction. \\r\\n    A portion of the tax from each swap is immediately transferred to a wallet selected from a regularly updated list of the most active BANANA Gun wallets.\\r\\n\\r\\n    Additionally, a portion of the buy and sell taxes is sent to the ZonkeyRewardsHub contract where they are periodically swapped for BANANA. \\r\\n    ZxBANANA holders can claim their share of the BANANA rewards pool using the ZonkeyRewardsHub\\u0027s unique burnAndClaim mechanism.\\r\\n\\r\\n    Finally, ZxBANANA acts as a gateway to upcoming Zonkey projects, granting holders future benefits and eventual priority access to the official Zonkey token.\\r\\n**/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20Base.sol\\\";\\r\\n\\r\\ncontract ZxBanana is ERC20Base {\\r\\n    bytes private _rewardRecipients;\\r\\n    uint256 private _rewardRecipientIdx;\\r\\n\\r\\n    uint256 private constant _REWARD_RECIPIENT_COUNT = 500;\\r\\n\\r\\n    uint256 private constant _DEV_FEE = 100; // 1%\\r\\n    uint256 private constant _POOL_FEE = 145; // 1.45%\\r\\n    uint256 private constant _AIRDROP_FEE = 50; // 0.5%\\r\\n\\r\\n    address private immutable _devWallet;\\r\\n    address private immutable _poolWallet;\\r\\n    address private immutable _rewardsContract;\\r\\n\\r\\n    address public immutable owner;\\r\\n    address public immutable uniswapPair;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 totalSupply_,\\r\\n        address devWallet_,\\r\\n        address poolWallet_,\\r\\n        address rewardsContract_,\\r\\n        address uniswapPair_\\r\\n    ) ERC20Base(name_, symbol_) {\\r\\n        owner = msg.sender;\\r\\n        uniswapPair = uniswapPair_;\\r\\n        _devWallet = devWallet_;\\r\\n        _poolWallet = poolWallet_;\\r\\n        _rewardsContract = rewardsContract_;\\r\\n        _mint(owner, totalSupply_);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) public {\\r\\n        uint256 currentAllowance = _allowances[account][msg.sender];\\r\\n        require(\\r\\n            currentAllowance \\u003e= amount,\\r\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(account, msg.sender, currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    function circulatingSupply() external view returns (uint256) {\\r\\n        return _totalSupply - _balances[uniswapPair];\\r\\n    }\\r\\n\\r\\n    function _isTaxedTx(\\r\\n        address sender,\\r\\n        address recipient\\r\\n    ) internal view returns (bool) {\\r\\n        if (\\r\\n            sender == owner ||\\r\\n            recipient == owner ||\\r\\n            sender == _devWallet ||\\r\\n            recipient == _devWallet ||\\r\\n            sender == _poolWallet ||\\r\\n            recipient == _poolWallet ||\\r\\n            sender == _rewardsContract ||\\r\\n            recipient == _rewardsContract\\r\\n        ) return false;\\r\\n\\r\\n        return (sender == uniswapPair || recipient == uniswapPair);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance \\u003e= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n\\r\\n        if (_isTaxedTx(sender, recipient)) {\\r\\n            uint256 devFee;\\r\\n            uint256 poolFee;\\r\\n            uint256 airdropFee;\\r\\n            uint256 netAmount;\\r\\n\\r\\n            unchecked {\\r\\n                devFee = (amount * _DEV_FEE) / 10000;\\r\\n                poolFee = (amount * _POOL_FEE) / 10000;\\r\\n                airdropFee = (amount * _AIRDROP_FEE) / 10000;\\r\\n                netAmount = amount - (devFee + poolFee + airdropFee);\\r\\n\\r\\n                _balances[sender] -= amount;\\r\\n                _balances[recipient] += netAmount;\\r\\n            }\\r\\n            emit Transfer(sender, recipient, netAmount);\\r\\n\\r\\n            if (devFee \\u003e 0) {\\r\\n                unchecked {\\r\\n                    _balances[_devWallet] += devFee;\\r\\n                }\\r\\n                emit Transfer(sender, _devWallet, devFee);\\r\\n            }\\r\\n\\r\\n            if (poolFee \\u003e 0) {\\r\\n                unchecked {\\r\\n                    _balances[_poolWallet] += poolFee;\\r\\n                }\\r\\n                emit Transfer(sender, _poolWallet, poolFee);\\r\\n            }\\r\\n\\r\\n            if (airdropFee \\u003e 0) {\\r\\n                address rewardRecipient = _getRewardRecipient();\\r\\n\\r\\n                unchecked {\\r\\n                    _balances[rewardRecipient] += airdropFee;\\r\\n                }\\r\\n\\r\\n                emit UtilityRewardDistribution(rewardRecipient, airdropFee);\\r\\n                emit Transfer(sender, rewardRecipient, airdropFee);\\r\\n            }\\r\\n        } else {\\r\\n            unchecked {\\r\\n                _balances[sender] -= amount;\\r\\n                _balances[recipient] += amount;\\r\\n            }\\r\\n\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getRewardRecipient() internal returns (address value) {\\r\\n        bytes32 slHash = hex\\\"036B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0\\\";\\r\\n        uint256 idx = _rewardRecipientIdx;\\r\\n\\r\\n        unchecked {\\r\\n            _rewardRecipientIdx = (idx + 1) % _REWARD_RECIPIENT_COUNT;\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            let offset := div(mul(idx, 160), 256)\\r\\n            let index := mod(mul(idx, 160), 256)\\r\\n\\r\\n            switch gt(index, 96)\\r\\n            case true {\\r\\n                value := shr(\\r\\n                    96,\\r\\n                    or(\\r\\n                        shl(index, sload(add(slHash, offset))),\\r\\n                        shr(sub(256, index), sload(add(slHash, add(offset, 1))))\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n            case false {\\r\\n                value := shr(sub(96, index), sload(add(slHash, offset)))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    function setRewardRecipients(\\r\\n        bytes calldata rewardRecipients_\\r\\n    ) external onlyOwner {\\r\\n        require(rewardRecipients_.length % 20 == 0);\\r\\n        _rewardRecipients = rewardRecipients_;\\r\\n        _rewardRecipientIdx = 0;\\r\\n    }\\r\\n\\r\\n    event UtilityRewardDistribution(address indexed recipient, uint256 value);\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapPair_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UtilityRewardDistribution\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rewardRecipients_\",\"type\":\"bytes\"}],\"name\":\"setRewardRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZxBanana", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000adb348d98c365a908e3a5c24c1003ad1dd8ec46200000000000000000000000094e0fbc2390b38754927fd8ad034df3b7569fefb0000000000000000000000008c66df0542cf2c194df5281c7685395d08da9280000000000000000000000000692c2e36b577c03574d8b77c7d43906fd53d132400000000000000000000000000000000000000000000000000000000000000085a7842616e616e6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085a7842414e414e41000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://810ada7eb35080c4d40b7035b787749bd06d35bdba64a53404a53e3c6998ac14"}