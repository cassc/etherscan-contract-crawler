{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@esportsplus/contracts/contracts/utilities/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nerror AlreadyWithdrawnForThisMonth();\\r\\nerror AmountExceedsBalance(string method);\\r\\nerror TransferFailed();\\r\\nerror WithdrawLockupActive();\\r\\n\\r\\nabstract contract Withdrawable {\\r\\n\\r\\n    bool private _locked;\\r\\n\\r\\n    mapping(uint256 => bool) private _months;\\r\\n\\r\\n\\r\\n    function _withdraw(address receiver, uint256 amount) internal {\\r\\n        if (address(this).balance < amount) {\\r\\n            revert AmountExceedsBalance({ method: '_withdraw' });\\r\\n        }\\r\\n\\r\\n        (bool success, ) = payable(receiver).call{value: amount}('');\\r\\n\\r\\n        if (!success) {\\r\\n            revert TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw x% once per month\\r\\n    function _withdrawOncePerMonth(address receiver, uint256 bips, uint256 deployedAt) internal {\\r\\n        unchecked {\\r\\n            uint256 amount = address(this).balance;\\r\\n            uint256 month = ((block.timestamp - deployedAt) / 4 weeks) + 1;\\r\\n\\r\\n            if (_months[month]) {\\r\\n                revert AlreadyWithdrawnForThisMonth();\\r\\n            }\\r\\n\\r\\n            _months[month] = true;\\r\\n\\r\\n            _withdraw(receiver, (amount * bips) / 10000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw With x% Lockup\\r\\n    // - x% available for withdraw on sale\\r\\n    // - x% held by contract until `timestamp`\\r\\n    function _withdrawWithLockup(address receiver, uint256 bips, uint256 unlockAt) internal {\\r\\n        unchecked {\\r\\n            uint256 amount = address(this).balance;\\r\\n\\r\\n            if (amount < ((amount * bips) / 10000)) {\\r\\n                revert AmountExceedsBalance({ method: '_withdrawWithLockup' });\\r\\n            }\\r\\n\\r\\n            // x% can be withdrawn to kickstart project; Remaining x% will be\\r\\n            // held throughout `lockup` period\\r\\n            if (!_locked) {\\r\\n                amount = (amount * bips) / 10000;\\r\\n                _locked = true;\\r\\n            }\\r\\n            else if (block.timestamp < unlockAt) {\\r\\n                revert WithdrawLockupActive();\\r\\n            }\\r\\n\\r\\n            _withdraw(receiver, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DN404Cloneable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {Withdrawable} from \\\"@esportsplus/contracts/contracts/utilities/Withdrawable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {DN404} from \\\"dn404/src/DN404.sol\\\";\\r\\nimport {DN404Mirror} from \\\"dn404/src/DN404Mirror.sol\\\";\\r\\nimport {MinimalProxy} from \\\"./MinimalProxy.sol\\\";\\r\\n\\r\\nerror AlreadyInitialized();\\r\\nerror InsufficientFunds();\\r\\nerror NotEnoughSupply();\\r\\nerror OwnableInvalidOwner(address owner);\\r\\nerror OwnableUnauthorizedAccount(address account);\\r\\nerror PartialRefundFailed();\\r\\nerror RedeemFailed();\\r\\n\\r\\ncontract DN404Cloneable is DN404, Withdrawable {\\r\\n\\r\\n    event OwnershipTransferred(address indexed from, address indexed to);\\r\\n\\r\\n\\r\\n    string private _baseURI;\\r\\n\\r\\n    address private immutable _mirror = address(new DN404Mirror(address(this)));\\r\\n\\r\\n    string private _name;\\r\\n\\r\\n    address private _owner;\\r\\n\\r\\n    string private _symbol;\\r\\n\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != msg.sender) {\\r\\n            revert OwnableUnauthorizedAccount(msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address to) internal virtual {\\r\\n        address from = _owner;\\r\\n\\r\\n        _owner = to;\\r\\n\\r\\n        emit OwnershipTransferred(from, to);\\r\\n    }\\r\\n\\r\\n\\r\\n    function burn(uint256 amount) public {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function initialize(address deployer, address initialSupplyOwner, string memory n, string memory s, uint96 supply, string memory uri) public {\\r\\n        if (bytes(_name).length > 0) {\\r\\n            revert AlreadyInitialized();\\r\\n        }\\r\\n\\r\\n        _baseURI = uri;\\r\\n        _name = n;\\r\\n        _symbol = s;\\r\\n\\r\\n        _initializeDN404(supply, initialSupplyOwner, MinimalProxy.create(_mirror));\\r\\n        _transferOwnership(deployer);\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) public onlyOwner {\\r\\n        _baseURI = baseURI;\\r\\n    }\\r\\n\\r\\n    function setMetadata(string memory n, string memory s) public onlyOwner {\\r\\n        _name = n;\\r\\n        _symbol = s;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory result) {\\r\\n        if (bytes(_baseURI).length != 0) {\\r\\n            result = string(abi.encodePacked(_baseURI, Strings.toString(tokenId)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            revert OwnableInvalidOwner(address(0));\\r\\n        }\\r\\n\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/MinimalProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nlibrary MinimalProxy {\\r\\n    function create(address target) internal returns (address result) {\\r\\n        bytes20 targetBytes = bytes20(target);\\r\\n\\r\\n        assembly {\\r\\n            let clone := mload(0x40)\\r\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n            mstore(add(clone, 0x14), targetBytes)\\r\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n            result := create(0, clone, 0x37)\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"dn404/src/DN404.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title DN404\\n/// @notice DN404 is a hybrid ERC20 and ERC721 implementation that mints\\n/// and burns NFTs based on an account's ERC20 token balance.\\n///\\n/// @author vectorized.eth (@optimizoor)\\n/// @author Quit (@0xQuit)\\n/// @author Michael Amadi (@AmadiMichaels)\\n/// @author cygaar (@0xCygaar)\\n/// @author Thomas (@0xjustadev)\\n/// @author Harrison (@PopPunkOnChain)\\n///\\n/// @dev Note:\\n/// - The ERC721 data is stored in this base DN404 contract, however a\\n///   DN404Mirror contract ***MUST*** be deployed and linked during\\n///   initialization.\\nabstract contract DN404 {\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                           EVENTS                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @dev Emitted when `target` sets their skipNFT flag to `status`.\\n    event SkipNFTSet(address indexed target, bool status);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"SkipNFTSet(address,bool)\\\"))`.\\n    uint256 private constant _SKIP_NFT_SET_EVENT_SIGNATURE =\\n        0xb5a1de456fff688115a4f75380060c23c8532d14ff85f687cc871456d6420393;\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Thrown when attempting to double-initialize the contract.\\n    error DNAlreadyInitialized();\\n\\n    /// @dev Thrown when attempting to transfer or burn more tokens than sender's balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Thrown when a spender attempts to transfer tokens with an insufficient allowance.\\n    error InsufficientAllowance();\\n\\n    /// @dev Thrown when minting an amount of tokens that would overflow the max tokens.\\n    error TotalSupplyOverflow();\\n\\n    /// @dev The unit cannot be zero.\\n    error UnitIsZero();\\n\\n    /// @dev Thrown when the caller for a fallback NFT function is not the mirror contract.\\n    error SenderNotMirror();\\n\\n    /// @dev Thrown when attempting to transfer tokens to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev Thrown when the mirror address provided for initialization is the zero address.\\n    error MirrorAddressIsZero();\\n\\n    /// @dev Thrown when the link call to the mirror contract reverts.\\n    error LinkMirrorContractFailed();\\n\\n    /// @dev Thrown when setting an NFT token approval\\n    /// and the caller is not the owner or an approved operator.\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /// @dev Thrown when transferring an NFT\\n    /// and the caller is not the owner or an approved operator.\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /// @dev Thrown when transferring an NFT and the from address is not the current owner.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev Thrown when checking the owner or approved address for a non-existent NFT.\\n    error TokenDoesNotExist();\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                         CONSTANTS                          */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev The flag to denote that the address data is initialized.\\n    uint8 internal constant _ADDRESS_DATA_INITIALIZED_FLAG = 1 << 0;\\n\\n    /// @dev The flag to denote that the address should skip NFTs.\\n    uint8 internal constant _ADDRESS_DATA_SKIP_NFT_FLAG = 1 << 1;\\n\\n    /// @dev The flag to denote that the address has overridden the default Permit2 allowance.\\n    uint8 internal constant _ADDRESS_DATA_OVERRIDE_PERMIT2_FLAG = 1 << 2;\\n\\n    /// @dev The canonical Permit2 address.\\n    /// For signature-based allowance granting for single transaction ERC20 `transferFrom`.\\n    /// To enable, override `_givePermit2DefaultInfiniteAllowance()`.\\n    /// [Github](https://github.com/Uniswap/permit2)\\n    /// [Etherscan](https://etherscan.io/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)\\n    address internal constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                          STORAGE                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Struct containing an address's token data and settings.\\n    struct AddressData {\\n        // Auxiliary data.\\n        uint88 aux;\\n        // Flags for `initialized` and `skipNFT`.\\n        uint8 flags;\\n        // The alias for the address. Zero means absence of an alias.\\n        uint32 addressAlias;\\n        // The number of NFT tokens.\\n        uint32 ownedLength;\\n        // The token balance in wei.\\n        uint96 balance;\\n    }\\n\\n    /// @dev A uint32 map in storage.\\n    struct Uint32Map {\\n        uint256 spacer;\\n    }\\n\\n    /// @dev A bitmap in storage.\\n    struct Bitmap {\\n        uint256 spacer;\\n    }\\n\\n    /// @dev A struct to wrap a uint256 in storage.\\n    struct Uint256Ref {\\n        uint256 value;\\n    }\\n\\n    /// @dev A mapping of an address pair to a Uint256Ref.\\n    struct AddressPairToUint256RefMap {\\n        uint256 spacer;\\n    }\\n\\n    /// @dev Struct containing the base token contract storage.\\n    struct DN404Storage {\\n        // Current number of address aliases assigned.\\n        uint32 numAliases;\\n        // Next token ID to assign for an NFT mint.\\n        uint32 nextTokenId;\\n        // Total number of IDs in the burned pool.\\n        uint32 burnedPoolSize;\\n        // Total supply of minted NFTs.\\n        uint32 totalNFTSupply;\\n        // Total supply of tokens.\\n        uint96 totalSupply;\\n        // Address of the NFT mirror contract.\\n        address mirrorERC721;\\n        // Mapping of a user alias number to their address.\\n        mapping(uint32 => address) aliasToAddress;\\n        // Mapping of user operator approvals for NFTs.\\n        AddressPairToUint256RefMap operatorApprovals;\\n        // Mapping of NFT token approvals to approved operators.\\n        mapping(uint256 => address) nftApprovals;\\n        // Bitmap of whether an non-zero NFT approval may exist.\\n        Bitmap mayHaveNFTApproval;\\n        // Bitmap of whether a token ID exists.\\n        Bitmap exists;\\n        // Mapping of user allowances for token spenders.\\n        AddressPairToUint256RefMap allowance;\\n        // Mapping of NFT IDs owned by an address.\\n        mapping(address => Uint32Map) owned;\\n        // The pool of burned NFT IDs.\\n        Uint32Map burnedPool;\\n        // Even indices: owner aliases. Odd indices: owned indices.\\n        Uint32Map oo;\\n        // Mapping of user account AddressData.\\n        mapping(address => AddressData) addressData;\\n    }\\n\\n    /// @dev Returns a storage pointer for DN404Storage.\\n    function _getDN404Storage() internal pure virtual returns (DN404Storage storage $) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `uint72(bytes9(keccak256(\\\"DN404_STORAGE\\\")))`.\\n            $.slot := 0xa20d6e21d0e5255308 // Truncate to 9 bytes to reduce bytecode size.\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                         INITIALIZER                        */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Initializes the DN404 contract with an\\n    /// `initialTokenSupply`, `initialTokenOwner` and `mirror` NFT contract address.\\n    function _initializeDN404(\\n        uint256 initialTokenSupply,\\n        address initialSupplyOwner,\\n        address mirror\\n    ) internal virtual {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        if ($.nextTokenId != 0) revert DNAlreadyInitialized();\\n\\n        if (mirror == address(0)) revert MirrorAddressIsZero();\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Make the call to link the mirror contract.\\n            mstore(0x00, 0x0f4599e5) // `linkMirrorContract(address)`.\\n            mstore(0x20, caller())\\n            if iszero(and(eq(mload(0x00), 1), call(gas(), mirror, 0, 0x1c, 0x24, 0x00, 0x20))) {\\n                mstore(0x00, 0xd125259c) // `LinkMirrorContractFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n\\n        $.nextTokenId = 1;\\n        $.mirrorERC721 = mirror;\\n\\n        if (_unit() == 0) revert UnitIsZero();\\n\\n        if (initialTokenSupply != 0) {\\n            if (initialSupplyOwner == address(0)) revert TransferToZeroAddress();\\n            if (_totalSupplyOverflows(initialTokenSupply)) revert TotalSupplyOverflow();\\n\\n            $.totalSupply = uint96(initialTokenSupply);\\n            AddressData storage initialOwnerAddressData = _addressData(initialSupplyOwner);\\n            initialOwnerAddressData.balance = uint96(initialTokenSupply);\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Emit the {Transfer} event.\\n                mstore(0x00, initialTokenSupply)\\n                log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, shl(96, initialSupplyOwner)))\\n            }\\n\\n            _setSkipNFT(initialSupplyOwner, true);\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*               BASE UNIT FUNCTION TO OVERRIDE               */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Amount of token balance that is equal to one NFT.\\n    function _unit() internal view virtual returns (uint256) {\\n        return 10 ** 18;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*               METADATA FUNCTIONS TO OVERRIDE               */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the name of the token.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the symbol of the token.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the decimals places of the token. Always 18.\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @dev Returns the amount of tokens in existence.\\n    function totalSupply() public view virtual returns (uint256) {\\n        return uint256(_getDN404Storage().totalSupply);\\n    }\\n\\n    /// @dev Returns the amount of tokens owned by `owner`.\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        return _getDN404Storage().addressData[owner].balance;\\n    }\\n\\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        if (_givePermit2DefaultInfiniteAllowance() && spender == _PERMIT2) {\\n            uint8 flags = _getDN404Storage().addressData[owner].flags;\\n            if (flags & _ADDRESS_DATA_OVERRIDE_PERMIT2_FLAG == 0) return type(uint256).max;\\n        }\\n        return _ref(_getDN404Storage().allowance, owner, spender).value;\\n    }\\n\\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    ///\\n    /// Emits a {Approval} event.\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @dev Transfer `amount` tokens from the caller to `to`.\\n    ///\\n    /// Will burn sender NFTs if balance after transfer is less than\\n    /// the amount required to support the current NFT balance.\\n    ///\\n    /// Will mint NFTs to `to` if the recipient's new balance supports\\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\\n    /// set to false.\\n    ///\\n    /// Requirements:\\n    /// - `from` must at least have `amount`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @dev Transfers `amount` tokens from `from` to `to`.\\n    ///\\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\\n    ///\\n    /// Will burn sender NFTs if balance after transfer is less than\\n    /// the amount required to support the current NFT balance.\\n    ///\\n    /// Will mint NFTs to `to` if the recipient's new balance supports\\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\\n    /// set to false.\\n    ///\\n    /// Requirements:\\n    /// - `from` must at least have `amount`.\\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\\n        Uint256Ref storage a = _ref(_getDN404Storage().allowance, from, msg.sender);\\n\\n        uint256 allowed = _givePermit2DefaultInfiniteAllowance() && msg.sender == _PERMIT2\\n            && (_getDN404Storage().addressData[from].flags & _ADDRESS_DATA_OVERRIDE_PERMIT2_FLAG) == 0\\n            ? type(uint256).max\\n            : a.value;\\n\\n        if (allowed != type(uint256).max) {\\n            if (amount > allowed) revert InsufficientAllowance();\\n            unchecked {\\n                a.value = allowed - amount;\\n            }\\n        }\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                          PERMIT2                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Whether Permit2 has infinite allowances by default for all owners.\\n    /// For signature-based allowance granting for single transaction ERC20 `transferFrom`.\\n    /// To enable, override this function to return true.\\n    function _givePermit2DefaultInfiniteAllowance() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\\n    ///\\n    /// Will mint NFTs to `to` if the recipient's new balance supports\\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\\n    /// set to false.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 amount) internal virtual {\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        AddressData storage toAddressData = _addressData(to);\\n\\n        unchecked {\\n            uint256 maxId;\\n            {\\n                uint256 totalSupply_ = uint256($.totalSupply) + amount;\\n                $.totalSupply = uint96(totalSupply_);\\n                uint256 overflows = _toUint(_totalSupplyOverflows(totalSupply_));\\n                if (overflows | _toUint(totalSupply_ < amount) != 0) revert TotalSupplyOverflow();\\n                maxId = totalSupply_ / _unit();\\n            }\\n            uint256 toEnd;\\n            {\\n                uint256 toBalance = uint256(toAddressData.balance) + amount;\\n                toAddressData.balance = uint96(toBalance);\\n                toEnd = toBalance / _unit();\\n            }\\n            if (toAddressData.flags & _ADDRESS_DATA_SKIP_NFT_FLAG == 0) {\\n                Uint32Map storage toOwned = $.owned[to];\\n                Uint32Map storage oo = $.oo;\\n                uint256 toIndex = toAddressData.ownedLength;\\n                _PackedLogs memory packedLogs = _packedLogsMalloc(_zeroFloorSub(toEnd, toIndex));\\n\\n                if (packedLogs.logs.length != 0) {\\n                    _packedLogsSet(packedLogs, to, 0);\\n                    uint256 burnedPoolSize = $.burnedPoolSize;\\n                    uint256 nextTokenId = $.nextTokenId;\\n                    uint32 toAlias = _registerAndResolveAlias(toAddressData, to);\\n                    $.totalNFTSupply += uint32(packedLogs.logs.length);\\n                    toAddressData.ownedLength = uint32(toEnd);\\n                    // Mint loop.\\n                    do {\\n                        uint256 id;\\n                        if (burnedPoolSize != 0) {\\n                            id = _get($.burnedPool, --burnedPoolSize);\\n                        } else {\\n                            id = nextTokenId;\\n                            while (_get(oo, _ownershipIndex(id)) != 0) {\\n                                id = _useExistsLookup()\\n                                    ? _wrapNFTId(_findFirstUnset($.exists, id + 1, maxId + 1), maxId)\\n                                    : _wrapNFTId(id + 1, maxId);\\n                            }\\n                            nextTokenId = _wrapNFTId(id + 1, maxId);\\n                        }\\n                        if (_useExistsLookup()) _set($.exists, id, true);\\n                        _set(toOwned, toIndex, uint32(id));\\n                        _setOwnerAliasAndOwnedIndex(oo, id, toAlias, uint32(toIndex++));\\n                        _packedLogsAppend(packedLogs, id);\\n                    } while (toIndex != toEnd);\\n\\n                    $.nextTokenId = uint32(nextTokenId);\\n                    $.burnedPoolSize = uint32(burnedPoolSize);\\n                    _packedLogsSend(packedLogs, $.mirrorERC721);\\n                }\\n            }\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Emit the {Transfer} event.\\n            mstore(0x00, amount)\\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, shl(96, to)))\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\\n    ///\\n    /// Will burn sender NFTs if balance after transfer is less than\\n    /// the amount required to support the current NFT balance.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address from, uint256 amount) internal virtual {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        AddressData storage fromAddressData = _addressData(from);\\n\\n        uint256 fromBalance = fromAddressData.balance;\\n        if (amount > fromBalance) revert InsufficientBalance();\\n\\n        unchecked {\\n            fromAddressData.balance = uint96(fromBalance -= amount);\\n            uint256 totalSupply_ = uint256($.totalSupply) - amount;\\n            $.totalSupply = uint96(totalSupply_);\\n\\n            Uint32Map storage fromOwned = $.owned[from];\\n            uint256 fromIndex = fromAddressData.ownedLength;\\n            uint256 numNFTBurns = _zeroFloorSub(fromIndex, fromBalance / _unit());\\n\\n            if (numNFTBurns != 0) {\\n                _PackedLogs memory packedLogs = _packedLogsMalloc(numNFTBurns);\\n                _packedLogsSet(packedLogs, from, 1);\\n                uint256 totalNFTSupply = uint256($.totalNFTSupply) - numNFTBurns;\\n                $.totalNFTSupply = uint32(totalNFTSupply);\\n                bool addToBurnedPool = _addToBurnedPool(totalNFTSupply, totalSupply_);\\n\\n                Uint32Map storage oo = $.oo;\\n                uint256 fromEnd = fromIndex - numNFTBurns;\\n                fromAddressData.ownedLength = uint32(fromEnd);\\n                uint256 burnedPoolSize = $.burnedPoolSize;\\n                // Burn loop.\\n                do {\\n                    uint256 id = _get(fromOwned, --fromIndex);\\n                    _setOwnerAliasAndOwnedIndex(oo, id, 0, 0);\\n                    _packedLogsAppend(packedLogs, id);\\n                    if (_useExistsLookup()) _set($.exists, id, false);\\n                    if (addToBurnedPool) _set($.burnedPool, burnedPoolSize++, uint32(id));\\n                    if (_get($.mayHaveNFTApproval, id)) {\\n                        _set($.mayHaveNFTApproval, id, false);\\n                        delete $.nftApprovals[id];\\n                    }\\n                } while (fromIndex != fromEnd);\\n\\n                $.burnedPoolSize = uint32(burnedPoolSize);\\n                _packedLogsSend(packedLogs, $.mirrorERC721);\\n            }\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Emit the {Transfer} event.\\n            mstore(0x00, amount)\\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), 0)\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Moves `amount` of tokens from `from` to `to`.\\n    ///\\n    /// Will burn sender NFTs if balance after transfer is less than\\n    /// the amount required to support the current NFT balance.\\n    ///\\n    /// Will mint NFTs to `to` if the recipient's new balance supports\\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\\n    /// set to false.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        AddressData storage fromAddressData = _addressData(from);\\n        AddressData storage toAddressData = _addressData(to);\\n\\n        _TransferTemps memory t;\\n        t.fromOwnedLength = fromAddressData.ownedLength;\\n        t.toOwnedLength = toAddressData.ownedLength;\\n        t.totalSupply = $.totalSupply;\\n\\n        if (amount > (t.fromBalance = fromAddressData.balance)) revert InsufficientBalance();\\n\\n        unchecked {\\n            fromAddressData.balance = uint96(t.fromBalance -= amount);\\n            toAddressData.balance = uint96(t.toBalance = uint256(toAddressData.balance) + amount);\\n\\n            t.numNFTBurns = _zeroFloorSub(t.fromOwnedLength, t.fromBalance / _unit());\\n\\n            if (toAddressData.flags & _ADDRESS_DATA_SKIP_NFT_FLAG == 0) {\\n                if (from == to) t.toOwnedLength = t.fromOwnedLength - t.numNFTBurns;\\n                t.numNFTMints = _zeroFloorSub(t.toBalance / _unit(), t.toOwnedLength);\\n            }\\n\\n            t.totalNFTSupply = uint256($.totalNFTSupply) + t.numNFTMints - t.numNFTBurns;\\n            $.totalNFTSupply = uint32(t.totalNFTSupply);\\n\\n            _PackedLogs memory packedLogs = _packedLogsMalloc(t.numNFTBurns + t.numNFTMints);\\n            Uint32Map storage oo = $.oo;\\n\\n            uint256 burnedPoolSize = $.burnedPoolSize;\\n            if (t.numNFTBurns != 0) {\\n                _packedLogsSet(packedLogs, from, 1);\\n                bool addToBurnedPool = _addToBurnedPool(t.totalNFTSupply, t.totalSupply);\\n                Uint32Map storage fromOwned = $.owned[from];\\n                uint256 fromIndex = t.fromOwnedLength;\\n                uint256 fromEnd = fromIndex - t.numNFTBurns;\\n                fromAddressData.ownedLength = uint32(fromEnd);\\n                // Burn loop.\\n                do {\\n                    uint256 id = _get(fromOwned, --fromIndex);\\n                    _setOwnerAliasAndOwnedIndex(oo, id, 0, 0);\\n                    _packedLogsAppend(packedLogs, id);\\n                    if (_useExistsLookup()) _set($.exists, id, false);\\n                    if (addToBurnedPool) _set($.burnedPool, burnedPoolSize++, uint32(id));\\n                    if (_get($.mayHaveNFTApproval, id)) {\\n                        _set($.mayHaveNFTApproval, id, false);\\n                        delete $.nftApprovals[id];\\n                    }\\n                } while (fromIndex != fromEnd);\\n            }\\n\\n            if (t.numNFTMints != 0) {\\n                _packedLogsSet(packedLogs, to, 0);\\n                uint256 nextTokenId = $.nextTokenId;\\n                Uint32Map storage toOwned = $.owned[to];\\n                uint256 toIndex = t.toOwnedLength;\\n                uint256 toEnd = toIndex + t.numNFTMints;\\n                uint32 toAlias = _registerAndResolveAlias(toAddressData, to);\\n                uint256 maxId = t.totalSupply / _unit();\\n                toAddressData.ownedLength = uint32(toEnd);\\n                // Mint loop.\\n                do {\\n                    uint256 id;\\n                    if (burnedPoolSize != 0) {\\n                        id = _get($.burnedPool, --burnedPoolSize);\\n                    } else {\\n                        id = nextTokenId;\\n                        while (_get(oo, _ownershipIndex(id)) != 0) {\\n                            id = _useExistsLookup()\\n                                ? _wrapNFTId(_findFirstUnset($.exists, id + 1, maxId + 1), maxId)\\n                                : _wrapNFTId(id + 1, maxId);\\n                        }\\n                        nextTokenId = _wrapNFTId(id + 1, maxId);\\n                    }\\n                    if (_useExistsLookup()) _set($.exists, id, true);\\n                    _set(toOwned, toIndex, uint32(id));\\n                    _setOwnerAliasAndOwnedIndex(oo, id, toAlias, uint32(toIndex++));\\n                    _packedLogsAppend(packedLogs, id);\\n                } while (toIndex != toEnd);\\n\\n                $.nextTokenId = uint32(nextTokenId);\\n            }\\n\\n            if (packedLogs.logs.length != 0) {\\n                $.burnedPoolSize = uint32(burnedPoolSize);\\n                _packedLogsSend(packedLogs, $.mirrorERC721);\\n            }\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Emit the {Transfer} event.\\n            mstore(0x00, amount)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), shr(96, shl(96, to)))\\n        }\\n    }\\n\\n    /// @dev Returns if burns should be added to the burn pool.\\n    function _addToBurnedPool(uint256 totalNFTSupplyAfterBurn, uint256 totalSupplyAfterBurn)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        // Add to burned pool if the load factor > 50%, and collection is not small.\\n        uint256 thres = (totalSupplyAfterBurn / _unit()) >> 1;\\n        return _toUint(totalNFTSupplyAfterBurn > thres) & _toUint(thres > 128) != 0;\\n    }\\n\\n    /// @dev Returns whether to use the exists lookup for more efficient\\n    /// scanning of an empty token ID slot. Highly recommended for collections\\n    /// with near full load factor `totalNFTSupply * _unit() / totalSupply`.\\n    /// The trade off is slightly higher initial storage write costs,\\n    /// which will be quickly amortized away.\\n    function _useExistsLookup() internal pure virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Call must originate from the mirror contract.\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    ///   `msgSender` must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transferFromNFT(address from, address to, uint256 id, address msgSender)\\n        internal\\n        virtual\\n    {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        Uint32Map storage oo = $.oo;\\n\\n        if (from != $.aliasToAddress[_get(oo, _ownershipIndex(id))]) {\\n            revert TransferFromIncorrectOwner();\\n        }\\n\\n        if (msgSender != from) {\\n            if (_ref($.operatorApprovals, from, msgSender).value == 0) {\\n                if (msgSender != $.nftApprovals[id]) {\\n                    revert TransferCallerNotOwnerNorApproved();\\n                }\\n            }\\n        }\\n\\n        AddressData storage fromAddressData = _addressData(from);\\n        AddressData storage toAddressData = _addressData(to);\\n\\n        uint256 unit = _unit();\\n\\n        unchecked {\\n            {\\n                uint256 fromBalance = fromAddressData.balance;\\n                if (unit > fromBalance) revert InsufficientBalance();\\n                fromAddressData.balance = uint96(fromBalance - unit);\\n                toAddressData.balance += uint96(unit);\\n            }\\n            mapping(address => Uint32Map) storage owned = $.owned;\\n            Uint32Map storage fromOwned = owned[from];\\n\\n            if (_get($.mayHaveNFTApproval, id)) {\\n                _set($.mayHaveNFTApproval, id, false);\\n                delete $.nftApprovals[id];\\n            }\\n\\n            {\\n                uint32 updatedId = _get(fromOwned, --fromAddressData.ownedLength);\\n                uint32 i = _get(oo, _ownedIndex(id));\\n                _set(fromOwned, i, updatedId);\\n                _set(oo, _ownedIndex(updatedId), i);\\n            }\\n            uint32 n = toAddressData.ownedLength++;\\n            _set(owned[to], n, uint32(id));\\n            _setOwnerAliasAndOwnedIndex(oo, id, _registerAndResolveAlias(toAddressData, to), n);\\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Emit the {Transfer} event.\\n            mstore(0x00, unit)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), shr(96, shl(96, to)))\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                 INTERNAL APPROVE FUNCTIONS                 */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\\n    ///\\n    /// Emits a {Approval} event.\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        if (_givePermit2DefaultInfiniteAllowance() && spender == _PERMIT2) {\\n            _getDN404Storage().addressData[owner].flags |= _ADDRESS_DATA_OVERRIDE_PERMIT2_FLAG;\\n        }\\n        _ref(_getDN404Storage().allowance, owner, spender).value = amount;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Emit the {Approval} event.\\n            mstore(0x00, amount)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, shl(96, owner)), shr(96, shl(96, spender)))\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                 DATA HITCHHIKING FUNCTIONS                 */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint88) {\\n        return _getDN404Storage().addressData[owner].aux;\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint88 value) internal virtual {\\n        _getDN404Storage().addressData[owner].aux = value;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     SKIP NFT FUNCTIONS                     */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns true if minting and transferring ERC20s to `owner` will skip minting NFTs.\\n    /// Returns false otherwise.\\n    function getSkipNFT(address owner) public view virtual returns (bool) {\\n        AddressData storage d = _getDN404Storage().addressData[owner];\\n        if (d.flags & _ADDRESS_DATA_INITIALIZED_FLAG == 0) return _hasCode(owner);\\n        return d.flags & _ADDRESS_DATA_SKIP_NFT_FLAG != 0;\\n    }\\n\\n    /// @dev Sets the caller's skipNFT flag to `skipNFT`. Returns true.\\n    ///\\n    /// Emits a {SkipNFTSet} event.\\n    function setSkipNFT(bool skipNFT) public virtual returns (bool) {\\n        _setSkipNFT(msg.sender, skipNFT);\\n        return true;\\n    }\\n\\n    /// @dev Internal function to set account `owner` skipNFT flag to `state`\\n    ///\\n    /// Initializes account `owner` AddressData if it is not currently initialized.\\n    ///\\n    /// Emits a {SkipNFTSet} event.\\n    function _setSkipNFT(address owner, bool state) internal virtual {\\n        AddressData storage d = _addressData(owner);\\n        if ((d.flags & _ADDRESS_DATA_SKIP_NFT_FLAG != 0) != state) {\\n            d.flags ^= _ADDRESS_DATA_SKIP_NFT_FLAG;\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, iszero(iszero(state)))\\n            log2(0x00, 0x20, _SKIP_NFT_SET_EVENT_SIGNATURE, shr(96, shl(96, owner)))\\n        }\\n    }\\n\\n    /// @dev Returns a storage data pointer for account `owner` AddressData\\n    ///\\n    /// Initializes account `owner` AddressData if it is not currently initialized.\\n    function _addressData(address owner) internal virtual returns (AddressData storage d) {\\n        d = _getDN404Storage().addressData[owner];\\n        unchecked {\\n            if (d.flags & _ADDRESS_DATA_INITIALIZED_FLAG == 0) {\\n                uint256 skipNFT = (_toUint(_hasCode(owner)) * _ADDRESS_DATA_SKIP_NFT_FLAG);\\n                d.flags = uint8(skipNFT | _ADDRESS_DATA_INITIALIZED_FLAG);\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the `addressAlias` of account `to`.\\n    ///\\n    /// Assigns and registers the next alias if `to` alias was not previously registered.\\n    function _registerAndResolveAlias(AddressData storage toAddressData, address to)\\n        internal\\n        virtual\\n        returns (uint32 addressAlias)\\n    {\\n        DN404Storage storage $ = _getDN404Storage();\\n        addressAlias = toAddressData.addressAlias;\\n        if (addressAlias == 0) {\\n            unchecked {\\n                addressAlias = ++$.numAliases;\\n            }\\n            toAddressData.addressAlias = addressAlias;\\n            $.aliasToAddress[addressAlias] = to;\\n            if (addressAlias == 0) revert(); // Overflow.\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     MIRROR OPERATIONS                      */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the address of the mirror NFT contract.\\n    function mirrorERC721() public view virtual returns (address) {\\n        return _getDN404Storage().mirrorERC721;\\n    }\\n\\n    /// @dev Returns the total NFT supply.\\n    function _totalNFTSupply() internal view virtual returns (uint256) {\\n        return _getDN404Storage().totalNFTSupply;\\n    }\\n\\n    /// @dev Returns `owner` NFT balance.\\n    function _balanceOfNFT(address owner) internal view virtual returns (uint256) {\\n        return _getDN404Storage().addressData[owner].ownedLength;\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerAt(uint256 id) internal view virtual returns (address) {\\n        DN404Storage storage $ = _getDN404Storage();\\n        return $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        if (!_exists(id)) revert TokenDoesNotExist();\\n        return _ownerAt(id);\\n    }\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool) {\\n        return _ownerAt(id) != address(0);\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address) {\\n        if (!_exists(id)) revert TokenDoesNotExist();\\n        return _getDN404Storage().nftApprovals[id];\\n    }\\n\\n    /// @dev Sets `spender` as the approved account to manage token `id`, using `msgSender`.\\n    ///\\n    /// Requirements:\\n    /// - `msgSender` must be the owner or an approved operator for the token owner.\\n    function _approveNFT(address spender, uint256 id, address msgSender)\\n        internal\\n        virtual\\n        returns (address owner)\\n    {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        owner = $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\\n\\n        if (msgSender != owner) {\\n            if (_ref($.operatorApprovals, owner, msgSender).value == 0) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n        }\\n\\n        $.nftApprovals[id] = spender;\\n        _set($.mayHaveNFTApproval, id, spender != address(0));\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `msgSender`,\\n    /// without authorization checks.\\n    function _setApprovalForAll(address operator, bool approved, address msgSender)\\n        internal\\n        virtual\\n    {\\n        _ref(_getDN404Storage().operatorApprovals, msgSender, operator).value = _toUint(approved);\\n    }\\n\\n    /// @dev Fallback modifier to dispatch calls from the mirror NFT contract\\n    /// to internal functions in this contract.\\n    modifier dn404Fallback() virtual {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        uint256 fnSelector = _calldataload(0x00) >> 224;\\n\\n        // `transferFromNFT(address,address,uint256,address)`.\\n        if (fnSelector == 0xe5eb36c8) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x84) revert();\\n\\n            address from = address(uint160(_calldataload(0x04)));\\n            address to = address(uint160(_calldataload(0x24)));\\n            uint256 id = _calldataload(0x44);\\n            address msgSender = address(uint160(_calldataload(0x64)));\\n\\n            _transferFromNFT(from, to, id, msgSender);\\n            _return(1);\\n        }\\n        // `setApprovalForAll(address,bool,address)`.\\n        if (fnSelector == 0x813500fc) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x64) revert();\\n\\n            address spender = address(uint160(_calldataload(0x04)));\\n            bool status = _calldataload(0x24) != 0;\\n            address msgSender = address(uint160(_calldataload(0x44)));\\n\\n            _setApprovalForAll(spender, status, msgSender);\\n            _return(1);\\n        }\\n        // `isApprovedForAll(address,address)`.\\n        if (fnSelector == 0xe985e9c5) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x44) revert();\\n\\n            address owner = address(uint160(_calldataload(0x04)));\\n            address operator = address(uint160(_calldataload(0x24)));\\n\\n            _return(_ref($.operatorApprovals, owner, operator).value);\\n        }\\n        // `ownerOf(uint256)`.\\n        if (fnSelector == 0x6352211e) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x24) revert();\\n\\n            uint256 id = _calldataload(0x04);\\n\\n            _return(uint160(_ownerOf(id)));\\n        }\\n        // `ownerAt(uint256)`.\\n        if (fnSelector == 0x24359879) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x24) revert();\\n\\n            uint256 id = _calldataload(0x04);\\n\\n            _return(uint160(_ownerAt(id)));\\n        }\\n        // `approveNFT(address,uint256,address)`.\\n        if (fnSelector == 0xd10b6e0c) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x64) revert();\\n\\n            address spender = address(uint160(_calldataload(0x04)));\\n            uint256 id = _calldataload(0x24);\\n            address msgSender = address(uint160(_calldataload(0x44)));\\n\\n            _return(uint160(_approveNFT(spender, id, msgSender)));\\n        }\\n        // `getApproved(uint256)`.\\n        if (fnSelector == 0x081812fc) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x24) revert();\\n\\n            uint256 id = _calldataload(0x04);\\n\\n            _return(uint160(_getApproved(id)));\\n        }\\n        // `balanceOfNFT(address)`.\\n        if (fnSelector == 0xf5b100ea) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x24) revert();\\n\\n            address owner = address(uint160(_calldataload(0x04)));\\n\\n            _return(_balanceOfNFT(owner));\\n        }\\n        // `totalNFTSupply()`.\\n        if (fnSelector == 0xe2c79281) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x04) revert();\\n\\n            _return(_totalNFTSupply());\\n        }\\n        // `implementsDN404()`.\\n        if (fnSelector == 0xb7a94eb8) {\\n            _return(1);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Fallback function for calls from mirror NFT contract.\\n    fallback() external payable virtual dn404Fallback {}\\n\\n    receive() external payable virtual {}\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                 INTERNAL / PRIVATE HELPERS                 */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns `(i - 1) << 1`.\\n    function _ownershipIndex(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return (i - 1) << 1; // Minus 1 as token IDs start from 1.\\n        }\\n    }\\n\\n    /// @dev Returns `((i - 1) << 1) + 1`.\\n    function _ownedIndex(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return ((i - 1) << 1) + 1; // Minus 1 as token IDs start from 1.\\n        }\\n    }\\n\\n    /// @dev Returns the uint32 value at `index` in `map`.\\n    function _get(Uint32Map storage map, uint256 index) internal view returns (uint32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := add(shl(96, map.slot), shr(3, index)) // Storage slot.\\n            result := and(0xffffffff, shr(shl(5, and(index, 7)), sload(s)))\\n        }\\n    }\\n\\n    /// @dev Updates the uint32 value at `index` in `map`.\\n    function _set(Uint32Map storage map, uint256 index, uint32 value) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := add(shl(96, map.slot), shr(3, index)) // Storage slot.\\n            let o := shl(5, and(index, 7)) // Storage slot offset (bits).\\n            let v := sload(s) // Storage slot value.\\n            let m := 0xffffffff // Value mask.\\n            sstore(s, xor(v, shl(o, and(m, xor(shr(o, v), value)))))\\n        }\\n    }\\n\\n    /// @dev Sets the owner alias and the owned index together.\\n    function _setOwnerAliasAndOwnedIndex(\\n        Uint32Map storage map,\\n        uint256 id,\\n        uint32 ownership,\\n        uint32 ownedIndex\\n    ) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let i := sub(id, 1) // Index of the uint64 combined value.\\n            let s := add(shl(96, map.slot), shr(2, i)) // Storage slot.\\n            let o := shl(6, and(i, 3)) // Storage slot offset (bits).\\n            let v := sload(s) // Storage slot value.\\n            let m := 0xffffffffffffffff // Value mask.\\n            let combined := or(shl(32, ownedIndex), and(0xffffffff, ownership))\\n            sstore(s, xor(v, shl(o, and(m, xor(shr(o, v), combined)))))\\n        }\\n    }\\n\\n    /// @dev Returns the boolean value of the bit at `index` in `bitmap`.\\n    function _get(Bitmap storage bitmap, uint256 index) internal view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := add(shl(96, bitmap.slot), shr(8, index)) // Storage slot.\\n            result := and(1, shr(and(0xff, index), sload(s)))\\n        }\\n    }\\n\\n    /// @dev Updates the bit at `index` in `bitmap` to `value`.\\n    function _set(Bitmap storage bitmap, uint256 index, bool value) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := add(shl(96, bitmap.slot), shr(8, index)) // Storage slot.\\n            let o := and(0xff, index) // Storage slot offset (bits).\\n            sstore(s, or(and(sload(s), not(shl(o, 1))), shl(o, iszero(iszero(value)))))\\n        }\\n    }\\n\\n    /// @dev Returns the index of the least significant unset bit in `[begin, end)`.\\n    /// If no set bit is found, returns `type(uint256).max`.\\n    function _findFirstUnset(Bitmap storage bitmap, uint256 begin, uint256 end)\\n        internal\\n        view\\n        returns (uint256 unsetBitIndex)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            unsetBitIndex := not(0) // Initialize to `type(uint256).max`.\\n            let s := shl(96, bitmap.slot) // Storage offset of the bitmap.\\n            let bucket := add(s, shr(8, begin))\\n            let lastBucket := add(s, shr(8, end))\\n            let negBits := shl(and(0xff, begin), shr(and(0xff, begin), not(sload(bucket))))\\n            if iszero(negBits) {\\n                for {} 1 {} {\\n                    bucket := add(bucket, 1)\\n                    negBits := not(sload(bucket))\\n                    if or(negBits, gt(bucket, lastBucket)) { break }\\n                }\\n                if gt(bucket, lastBucket) {\\n                    negBits := shr(and(0xff, not(end)), shl(and(0xff, not(end)), negBits))\\n                }\\n            }\\n            if negBits {\\n                // Find-first-set routine.\\n                let b := and(negBits, add(not(negBits), 1)) // Isolate the least significant bit.\\n                let r := shl(7, lt(0xffffffffffffffffffffffffffffffff, b))\\n                r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, b))))\\n                r := or(r, shl(5, lt(0xffffffff, shr(r, b))))\\n                // For the remaining 32 bits, use a De Bruijn lookup.\\n                // forgefmt: disable-next-item\\n                r := or(r, byte(and(div(0xd76453e0, shr(r, b)), 0x1f),\\n                    0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405))\\n                r := or(shl(8, sub(bucket, s)), r)\\n                unsetBitIndex := or(r, sub(0, or(iszero(lt(r, end)), lt(r, begin))))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a storage reference to the value at (`a0`, `a1`) in `map`.\\n    function _ref(AddressPairToUint256RefMap storage map, address a0, address a1)\\n        internal\\n        pure\\n        returns (Uint256Ref storage ref)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x28, a1)\\n            mstore(0x14, a0)\\n            mstore(0x00, map.slot)\\n            ref.slot := keccak256(0x00, 0x48)\\n            // Clear the part of the free memory pointer that was overwritten.\\n            mstore(0x28, 0x00)\\n        }\\n    }\\n\\n    /// @dev Wraps the NFT ID.\\n    function _wrapNFTId(uint256 id, uint256 maxId) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := or(mul(iszero(gt(id, maxId)), id), gt(id, maxId))\\n        }\\n    }\\n\\n    /// @dev Returns whether `amount` is a valid `totalSupply`.\\n    function _totalSupplyOverflows(uint256 amount) internal view returns (bool) {\\n        unchecked {\\n            return _toUint(amount > type(uint96).max)\\n                | _toUint(amount / _unit() > type(uint32).max - 1) != 0;\\n        }\\n    }\\n\\n    /// @dev Returns `max(0, x - y)`.\\n    function _zeroFloorSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n\\n    /// @dev Returns `b ? 1 : 0`.\\n    function _toUint(bool b) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := iszero(iszero(b))\\n        }\\n    }\\n\\n    /// @dev Struct containing packed log data for {Transfer} events to be\\n    /// emitted by the mirror NFT contract.\\n    struct _PackedLogs {\\n        uint256 offset;\\n        uint256 addressAndBit;\\n        uint256[] logs;\\n    }\\n\\n    /// @dev Initiates memory allocation for packed logs with `n` log items.\\n    function _packedLogsMalloc(uint256 n) private pure returns (_PackedLogs memory p) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Note that `p` implicitly allocates and advances the free memory pointer by\\n            // 3 words, which we can safely mutate in `_packedLogsSend`.\\n            let logs := mload(0x40)\\n            mstore(logs, n) // Store the length.\\n            let offset := add(0x20, logs) // Skip the word for `p.logs.length`.\\n            mstore(0x40, add(offset, shl(5, n))) // Allocate memory.\\n            mstore(add(0x40, p), logs) // Set `p.logs`.\\n            mstore(p, offset) // Set `p.offset`.\\n        }\\n    }\\n\\n    /// @dev Set the current address and the burn bit.\\n    function _packedLogsSet(_PackedLogs memory p, address a, uint256 burnBit) private pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(add(p, 0x20), or(shl(96, a), burnBit)) // Set `p.addressAndBit`.\\n        }\\n    }\\n\\n    /// @dev Adds a packed log item to `p` with token `id`.\\n    function _packedLogsAppend(_PackedLogs memory p, uint256 id) private pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let offset := mload(p)\\n            mstore(offset, or(mload(add(p, 0x20)), shl(8, id))) // `p.addressAndBit | (id << 8)`.\\n            mstore(p, add(offset, 0x20))\\n        }\\n    }\\n\\n    /// @dev Calls the `mirror` NFT contract to emit {Transfer} events for packed logs `p`.\\n    function _packedLogsSend(_PackedLogs memory p, address mirror) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let logs := mload(add(p, 0x40))\\n            let o := sub(logs, 0x40) // Start of calldata to send.\\n            mstore(o, 0x263c69d6) // `logTransfer(uint256[])`.\\n            mstore(add(o, 0x20), 0x20) // Offset of `logs` in the calldata to send.\\n            let n := add(0x44, shl(5, mload(logs))) // Length of calldata to send.\\n            if iszero(and(eq(mload(o), 1), call(gas(), mirror, 0, add(o, 0x1c), n, o, 0x20))) {\\n                revert(o, 0x00)\\n            }\\n        }\\n    }\\n\\n    /// @dev Struct of temporary variables for transfers.\\n    struct _TransferTemps {\\n        uint256 numNFTBurns;\\n        uint256 numNFTMints;\\n        uint256 fromBalance;\\n        uint256 toBalance;\\n        uint256 fromOwnedLength;\\n        uint256 toOwnedLength;\\n        uint256 totalSupply;\\n        uint256 totalNFTSupply;\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Returns the calldata value at `offset`.\\n    function _calldataload(uint256 offset) private pure returns (uint256 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            value := calldataload(offset)\\n        }\\n    }\\n\\n    /// @dev Executes a return opcode to return `x` and end the current call frame.\\n    function _return(uint256 x) private pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, x)\\n            return(0x00, 0x20)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"dn404/src/DN404Mirror.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title DN404Mirror\\n/// @notice DN404Mirror provides an interface for interacting with the\\n/// NFT tokens in a DN404 implementation.\\n///\\n/// @author vectorized.eth (@optimizoor)\\n/// @author Quit (@0xQuit)\\n/// @author Michael Amadi (@AmadiMichaels)\\n/// @author cygaar (@0xCygaar)\\n/// @author Thomas (@0xjustadev)\\n/// @author Harrison (@PopPunkOnChain)\\n///\\n/// @dev Note:\\n/// - The ERC721 data is stored in the base DN404 contract.\\ncontract DN404Mirror {\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                           EVENTS                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This is for marketplace signaling purposes. This contract has a `pullOwner()`\\n    /// function that will sync the owner from the base contract.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Thrown when a call for an NFT function did not originate\\n    /// from the base DN404 contract.\\n    error SenderNotBase();\\n\\n    /// @dev Thrown when a call for an NFT function did not originate from the deployer.\\n    error SenderNotDeployer();\\n\\n    /// @dev Thrown when transferring an NFT to a contract address that\\n    /// does not implement ERC721Receiver.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /// @dev Thrown when linking to the DN404 base contract and the\\n    /// DN404 supportsInterface check fails or the call reverts.\\n    error CannotLink();\\n\\n    /// @dev Thrown when a linkMirrorContract call is received and the\\n    /// NFT mirror contract has already been linked to a DN404 base contract.\\n    error AlreadyLinked();\\n\\n    /// @dev Thrown when retrieving the base DN404 address when a link has not\\n    /// been established.\\n    error NotLinked();\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                          STORAGE                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Struct contain the NFT mirror contract storage.\\n    struct DN404NFTStorage {\\n        address baseERC20;\\n        address deployer;\\n        address owner;\\n    }\\n\\n    /// @dev Returns a storage pointer for DN404NFTStorage.\\n    function _getDN404NFTStorage() internal pure virtual returns (DN404NFTStorage storage $) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `uint72(bytes9(keccak256(\\\"DN404_MIRROR_STORAGE\\\")))`.\\n            $.slot := 0x3602298b8c10b01230 // Truncate to 9 bytes to reduce bytecode size.\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                        CONSTRUCTOR                         */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    constructor(address deployer) {\\n        // For non-proxies, we will store the deployer so that only the deployer can\\n        // link the base contract.\\n        _getDN404NFTStorage().deployer = deployer;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     ERC721 OPERATIONS                      */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the token collection name from the base DN404 contract.\\n    function name() public view virtual returns (string memory result) {\\n        return _readString(0x06fdde03, 0); // `name()`.\\n    }\\n\\n    /// @dev Returns the token collection symbol from the base DN404 contract.\\n    function symbol() public view virtual returns (string memory result) {\\n        return _readString(0x95d89b41, 0); // `symbol()`.\\n    }\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id` from\\n    /// the base DN404 contract.\\n    function tokenURI(uint256 id) public view virtual returns (string memory result) {\\n        return _readString(0xc87b56dd, id); // `tokenURI()`.\\n    }\\n\\n    /// @dev Returns the total NFT supply from the base DN404 contract.\\n    function totalSupply() public view virtual returns (uint256 result) {\\n        return _readWord(0xe2c79281, 0, 0); // `totalNFTSupply()`.\\n    }\\n\\n    /// @dev Returns the number of NFT tokens owned by `nftOwner` from the base DN404 contract.\\n    ///\\n    /// Requirements:\\n    /// - `nftOwner` must not be the zero address.\\n    function balanceOf(address nftOwner) public view virtual returns (uint256 result) {\\n        return _readWord(0xf5b100ea, uint160(nftOwner), 0); // `balanceOfNFT(address)`.\\n    }\\n\\n    /// @dev Returns the owner of token `id` from the base DN404 contract.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        return address(uint160(_readWord(0x6352211e, id, 0))); // `ownerOf(uint256)`.\\n    }\\n\\n    /// @dev Returns the owner of token `id` from the base DN404 contract.\\n    /// Returns `address(0)` instead of reverting if the token does not exist.\\n    function ownerAt(uint256 id) public view virtual returns (address result) {\\n        return address(uint160(_readWord(0x24359879, id, 0))); // `ownerAt(uint256)`.\\n    }\\n\\n    /// @dev Sets `spender` as the approved account to manage token `id` in\\n    /// the base DN404 contract.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address spender, uint256 id) public virtual {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            spender := shr(96, shl(96, spender))\\n            let m := mload(0x40)\\n            mstore(0x00, 0xd10b6e0c) // `approveNFT(address,uint256,address)`.\\n            mstore(0x20, spender)\\n            mstore(0x40, id)\\n            mstore(0x60, caller())\\n            if iszero(\\n                and(\\n                    gt(returndatasize(), 0x1f),\\n                    call(gas(), base, callvalue(), 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                returndatacopy(m, 0x00, returndatasize())\\n                revert(m, returndatasize())\\n            }\\n            mstore(0x40, m) // Restore the free memory pointer.\\n            mstore(0x60, 0) // Restore the zero pointer.\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, shr(96, mload(0x0c)), spender, id)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id` from\\n    /// the base DN404 contract.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address) {\\n        return address(uint160(_readWord(0x081812fc, id, 0))); // `getApproved(uint256)`.\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller in\\n    /// the base DN404 contract.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            operator := shr(96, shl(96, operator))\\n            let m := mload(0x40)\\n            mstore(0x00, 0x813500fc) // `setApprovalForAll(address,bool,address)`.\\n            mstore(0x20, operator)\\n            mstore(0x40, iszero(iszero(approved)))\\n            mstore(0x60, caller())\\n            if iszero(\\n                and(eq(mload(0x00), 1), call(gas(), base, callvalue(), 0x1c, 0x64, 0x00, 0x20))\\n            ) {\\n                returndatacopy(m, 0x00, returndatasize())\\n                revert(m, returndatasize())\\n            }\\n            // Emit the {ApprovalForAll} event.\\n            // The `approved` value is already at 0x40.\\n            log3(0x40, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), operator)\\n            mstore(0x40, m) // Restore the free memory pointer.\\n            mstore(0x60, 0) // Restore the zero pointer.\\n        }\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `nftOwner` from\\n    /// the base DN404 contract.\\n    function isApprovedForAll(address nftOwner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        // `isApprovedForAll(address,address)`.\\n        return _readWord(0xe985e9c5, uint160(nftOwner), uint160(operator)) != 0;\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            from := shr(96, shl(96, from))\\n            to := shr(96, shl(96, to))\\n            let m := mload(0x40)\\n            mstore(m, 0xe5eb36c8) // `transferFromNFT(address,address,uint256,address)`.\\n            mstore(add(m, 0x20), from)\\n            mstore(add(m, 0x40), to)\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), caller())\\n            if iszero(\\n                and(eq(mload(m), 1), call(gas(), base, callvalue(), add(m, 0x1c), 0x84, m, 0x20))\\n            ) {\\n                returndatacopy(m, 0x00, returndatasize())\\n                revert(m, returndatasize())\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                  OWNER SYNCING OPERATIONS                  */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the `owner` of the contract, for marketplace signaling purposes.\\n    function owner() public view virtual returns (address) {\\n        return _getDN404NFTStorage().owner;\\n    }\\n\\n    /// @dev Permissionless function to pull the owner from the base DN404 contract\\n    /// if it implements ownable, for marketplace signaling purposes.\\n    function pullOwner() public virtual {\\n        address newOwner;\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x8da5cb5b) // `owner()`.\\n            if and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x04, 0x00, 0x20)) {\\n                newOwner := shr(96, mload(0x0c))\\n            }\\n        }\\n        DN404NFTStorage storage $ = _getDN404NFTStorage();\\n        address oldOwner = $.owner;\\n        if (oldOwner != newOwner) {\\n            $.owner = newOwner;\\n            emit OwnershipTransferred(oldOwner, newOwner);\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     MIRROR OPERATIONS                      */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the address of the base DN404 contract.\\n    function baseERC20() public view virtual returns (address base) {\\n        base = _getDN404NFTStorage().baseERC20;\\n        if (base == address(0)) revert NotLinked();\\n    }\\n\\n    /// @dev Fallback modifier to execute calls from the base DN404 contract.\\n    modifier dn404NFTFallback() virtual {\\n        DN404NFTStorage storage $ = _getDN404NFTStorage();\\n\\n        uint256 fnSelector = _calldataload(0x00) >> 224;\\n\\n        // `logTransfer(uint256[])`.\\n        if (fnSelector == 0x263c69d6) {\\n            if (msg.sender != $.baseERC20) revert SenderNotBase();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // When returndatacopy copies 1 or more out-of-bounds bytes, it reverts.\\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), 0x20))\\n                let o := add(0x24, calldataload(0x04)) // Packed logs offset.\\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), o))\\n                let end := add(o, shl(5, calldataload(sub(o, 0x20))))\\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), end))\\n\\n                for {} iszero(eq(o, end)) { o := add(0x20, o) } {\\n                    let d := calldataload(o) // Entry in the packed logs.\\n                    let a := shr(96, d) // The address.\\n                    let b := and(1, d) // Whether it is a burn.\\n                    log4(\\n                        codesize(),\\n                        0x00,\\n                        _TRANSFER_EVENT_SIGNATURE,\\n                        mul(a, b), // `from`.\\n                        mul(a, iszero(b)), // `to`.\\n                        shr(168, shl(160, d)) // `id`.\\n                    )\\n                }\\n                mstore(0x00, 0x01)\\n                return(0x00, 0x20)\\n            }\\n        }\\n        // `linkMirrorContract(address)`.\\n        if (fnSelector == 0x0f4599e5) {\\n            if ($.deployer != address(0)) {\\n                if (address(uint160(_calldataload(0x04))) != $.deployer) {\\n                    revert SenderNotDeployer();\\n                }\\n            }\\n            if ($.baseERC20 != address(0)) revert AlreadyLinked();\\n            $.baseERC20 = msg.sender;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                mstore(0x00, 0x01)\\n                return(0x00, 0x20)\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @dev Fallback function for calls from base DN404 contract.\\n    fallback() external payable virtual dn404NFTFallback {}\\n\\n    receive() external payable virtual {}\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Helper to read a string from the base DN404 contract.\\n    function _readString(uint256 fnSelector, uint256 arg0)\\n        private\\n        view\\n        returns (string memory result)\\n    {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x00, fnSelector)\\n            mstore(0x20, arg0)\\n            if iszero(staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x00)) {\\n                returndatacopy(result, 0x00, returndatasize())\\n                revert(result, returndatasize())\\n            }\\n            returndatacopy(0x00, 0x00, 0x20) // Copy the offset of the string in returndata.\\n            returndatacopy(result, mload(0x00), 0x20) // Copy the length of the string.\\n            returndatacopy(add(result, 0x20), add(mload(0x00), 0x20), mload(result)) // Copy the string.\\n            mstore(0x40, add(add(result, 0x20), mload(result))) // Allocate memory.\\n        }\\n    }\\n\\n    /// @dev Helper to read a word from the base DN404 contract.\\n    function _readWord(uint256 fnSelector, uint256 arg0, uint256 arg1)\\n        private\\n        view\\n        returns (uint256 result)\\n    {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(0x00, fnSelector)\\n            mstore(0x20, arg0)\\n            mstore(0x40, arg1)\\n            if iszero(\\n                and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x44, 0x00, 0x20))\\n            ) {\\n                returndatacopy(m, 0x00, returndatasize())\\n                revert(m, returndatasize())\\n            }\\n            mstore(0x40, m) // Restore the free memory pointer.\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the calldata value at `offset`.\\n    function _calldataload(uint256 offset) private pure returns (uint256 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            value := calldataload(offset)\\n        }\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DNAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkMirrorContractFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MirrorAddressIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotMirror\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnitIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SkipNFTSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSkipNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialSupplyOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"supply\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"skipNFT\",\"type\":\"bool\"}],\"name\":\"setSkipNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DN404Cloneable", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}