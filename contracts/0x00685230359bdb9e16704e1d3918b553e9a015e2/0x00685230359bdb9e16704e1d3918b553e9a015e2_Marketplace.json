{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\ncontract IAssetManager {\r\n    function createAssetPack(bytes32 _packCover, string _name, uint[] _attributes, bytes32[] _ipfsHashes, uint _packPrice) public;\r\n    function createAsset(uint _attributes, bytes32 _ipfsHash, uint _packId) public;\r\n    function buyAssetPack(address _to, uint _assetPackId) public payable;\r\n    function getNumberOfAssets() public view returns (uint);\r\n    function getNumberOfAssetPacks() public view returns(uint);\r\n    function checkHasPermissionForPack(address _address, uint _packId) public view returns (bool);\r\n    function checkHashExists(bytes32 _ipfsHash) public view returns (bool);\r\n    function givePermission(address _address, uint _packId) public;\r\n    function pickUniquePacks(uint [] assetIds) public view returns (uint[]);\r\n    function getAssetInfo(uint id) public view returns (uint, uint, bytes32);\r\n    function getAssetPacksUserCreated(address _address) public view returns(uint[]);\r\n    function getAssetIpfs(uint _id) public view returns (bytes32);\r\n    function getAssetAttributes(uint _id) public view returns (uint);\r\n    function getIpfsForAssets(uint [] _ids) public view returns (bytes32[]);\r\n    function getAttributesForAssets(uint [] _ids) public view returns(uint[]);\r\n    function withdraw() public;\r\n    function getAssetPackData(uint _assetPackId) public view returns(string, uint[], uint[], bytes32[]);\r\n    function getAssetPackName(uint _assetPackId) public view returns (string);\r\n    function getAssetPackPrice(uint _assetPackId) public view returns (uint);\r\n    function getCoversForPacks(uint [] _packIds) public view returns (bytes32[]);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Functions {\r\n\r\n    bytes32[] public randomHashes;\r\n\r\n    function fillWithHashes() public {\r\n        require(randomHashes.length == 0);\r\n\r\n        for (uint i = block.number - 100; i < block.number; i++) {\r\n            randomHashes.push(blockhash(i));\r\n        }\r\n    }\r\n\r\n    /// @notice Function to calculate initial random seed based on our hashes\r\n    /// @param _randomHashIds are ids in our array of hashes\r\n    /// @param _timestamp is timestamp for that hash\r\n    /// @return uint representation of random seed\r\n    function calculateSeed(uint[] _randomHashIds, uint _timestamp) public view returns (uint) {\r\n        require(_timestamp != 0);\r\n        require(_randomHashIds.length == 10);\r\n\r\n        bytes32 randomSeed = keccak256(\r\n            abi.encodePacked(\r\n            randomHashes[_randomHashIds[0]], randomHashes[_randomHashIds[1]],\r\n            randomHashes[_randomHashIds[2]], randomHashes[_randomHashIds[3]],\r\n            randomHashes[_randomHashIds[4]], randomHashes[_randomHashIds[5]],\r\n            randomHashes[_randomHashIds[6]], randomHashes[_randomHashIds[7]],\r\n            randomHashes[_randomHashIds[8]], randomHashes[_randomHashIds[9]],\r\n            _timestamp\r\n            )\r\n        );\r\n\r\n        return uint(randomSeed);\r\n    }\r\n\r\n    function getRandomHashesLength() public view returns(uint) {\r\n        return randomHashes.length;\r\n    }\r\n\r\n    /// @notice Function which decodes bytes32 to array of integers\r\n    /// @param _potentialAssets are potential assets user would like to have\r\n    /// @return array of assetIds\r\n    function decodeAssets(bytes32[] _potentialAssets) public pure returns (uint[] assets) {\r\n        require(_potentialAssets.length > 0);\r\n\r\n        uint[] memory assetsCopy = new uint[](_potentialAssets.length*10);\r\n        uint numberOfAssets = 0;\r\n\r\n        for (uint j = 0; j < _potentialAssets.length; j++) {\r\n            uint input;\r\n            bytes32 pot = _potentialAssets[j];\r\n\r\n            assembly {\r\n                input := pot\r\n            }\r\n\r\n            for (uint i = 10; i > 0; i--) {\r\n                uint mask = (2 << ((i-1) * 24)) / 2;\r\n                uint b = (input & (mask * 16777215)) / mask;\r\n\r\n                if (b != 0) {\r\n                    assetsCopy[numberOfAssets] = b;\r\n                    numberOfAssets++;\r\n                }\r\n            }\r\n        }\r\n\r\n        assets = new uint[](numberOfAssets);\r\n        for (i = 0; i < numberOfAssets; i++) {\r\n            assets[i] = assetsCopy[i];\r\n        }\r\n    }\r\n\r\n    /// @notice Function to pick random assets from potentialAssets array\r\n    /// @param _finalSeed is final random seed\r\n    /// @param _potentialAssets is bytes32[] array of potential assets\r\n    /// @return uint[] array of randomly picked assets\r\n    function pickRandomAssets(uint _finalSeed, bytes32[] _potentialAssets) public pure returns(uint[] finalPicked) {\r\n        require(_finalSeed != 0);\r\n        require(_potentialAssets.length > 0);\r\n\r\n        uint[] memory assetIds = decodeAssets(_potentialAssets);\r\n        uint[] memory pickedIds = new uint[](assetIds.length);\r\n\r\n        uint finalSeedCopy = _finalSeed;\r\n        uint index = 0;\r\n\r\n        for (uint i = 0; i < assetIds.length; i++) {\r\n            finalSeedCopy = uint(keccak256(abi.encodePacked(finalSeedCopy, assetIds[i])));\r\n            if (finalSeedCopy % 2 == 0) {\r\n                pickedIds[index] = assetIds[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        finalPicked = new uint[](index);\r\n        for (i = 0; i < index; i++) {\r\n            finalPicked[i] = pickedIds[i];\r\n        }\r\n    }\r\n\r\n    /// @notice Function to pick random assets from potentialAssets array\r\n    /// @param _finalSeed is final random seed\r\n    /// @param _potentialAssets is bytes32[] array of potential assets\r\n    /// @param _width of canvas\r\n    /// @param _height of canvas\r\n    /// @return arrays of randomly picked assets defining ids, coordinates, zoom, rotation and layers\r\n    function getImage(uint _finalSeed, bytes32[] _potentialAssets, uint _width, uint _height) public pure \r\n    returns(uint[] finalPicked, uint[] x, uint[] y, uint[] zoom, uint[] rotation, uint[] layers) {\r\n        require(_finalSeed != 0);\r\n        require(_potentialAssets.length > 0);\r\n\r\n        uint[] memory assetIds = decodeAssets(_potentialAssets);\r\n        uint[] memory pickedIds = new uint[](assetIds.length);\r\n        x = new uint[](assetIds.length);\r\n        y = new uint[](assetIds.length);\r\n        zoom = new uint[](assetIds.length);\r\n        rotation = new uint[](assetIds.length);\r\n        layers = new uint[](assetIds.length);\r\n\r\n        uint finalSeedCopy = _finalSeed;\r\n        uint index = 0;\r\n\r\n        for (uint i = 0; i < assetIds.length; i++) {\r\n            finalSeedCopy = uint(keccak256(abi.encodePacked(finalSeedCopy, assetIds[i])));\r\n            if (finalSeedCopy % 2 == 0) {\r\n                pickedIds[index] = assetIds[i];\r\n                (x[index], y[index], zoom[index], rotation[index], layers[index]) = pickRandomAssetPosition(finalSeedCopy, _width, _height);\r\n                index++;\r\n            }\r\n        }\r\n\r\n        finalPicked = new uint[](index);\r\n        for (i = 0; i < index; i++) {\r\n            finalPicked[i] = pickedIds[i];\r\n        }\r\n    }\r\n\r\n    /// @notice Function to pick random position for an asset\r\n    /// @param _randomSeed is random seed for that image\r\n    /// @param _width of canvas\r\n    /// @param _height of canvas\r\n    /// @return tuple of uints representing x,y,zoom,and rotation\r\n    function pickRandomAssetPosition(uint _randomSeed, uint _width, uint _height) public pure \r\n    returns (uint x, uint y, uint zoom, uint rotation, uint layer) {\r\n        \r\n        x = _randomSeed % _width;\r\n        y = _randomSeed % _height;\r\n        zoom = _randomSeed % 200 + 800;\r\n        rotation = _randomSeed % 360;\r\n        // using random number for now\r\n        // if two layers are same, sort by (keccak256(layer, assetId))\r\n        layer = _randomSeed % 1234567; \r\n    }\r\n\r\n    /// @notice Function to calculate final random seed for user\r\n    /// @param _randomSeed is initially given random seed\r\n    /// @param _iterations is number of iterations\r\n    /// @return final seed for user as uint\r\n    function getFinalSeed(uint _randomSeed, uint _iterations) public pure returns (bytes32) {\r\n        require(_randomSeed != 0);\r\n        require(_iterations != 0);\r\n        bytes32 finalSeed = bytes32(_randomSeed);\r\n\r\n        finalSeed = keccak256(abi.encodePacked(_randomSeed, _iterations));\r\n        for (uint i = 0; i < _iterations; i++) {\r\n            finalSeed = keccak256(abi.encodePacked(finalSeed, i));\r\n        }\r\n\r\n        return finalSeed;\r\n    }\r\n\r\n    function toHex(uint _randomSeed) public pure returns (bytes32) {\r\n        return bytes32(_randomSeed);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract UserManager {\r\n\r\n    struct User {\r\n        string username;\r\n        bytes32 hashToProfilePicture;\r\n        bool exists;\r\n    }\r\n\r\n    uint public numberOfUsers;\r\n\r\n    mapping(string => bool) internal usernameExists;\r\n    mapping(address => User) public addressToUser;\r\n\r\n    mapping(bytes32 => bool) public profilePictureExists;\r\n    mapping(string => address) internal usernameToAddress;\r\n\r\n    event NewUser(address indexed user, string username, bytes32 profilePicture);\r\n\r\n    function register(string _username, bytes32 _hashToProfilePicture) public {\r\n        require(usernameExists[_username] == false || \r\n                keccak256(abi.encodePacked(getUsername(msg.sender))) == keccak256(abi.encodePacked(_username))\r\n        );\r\n\r\n        if (usernameExists[getUsername(msg.sender)]) {\r\n            // if he already had username, that username is free now\r\n            usernameExists[getUsername(msg.sender)] = false;\r\n        } else {\r\n            numberOfUsers++;\r\n            emit NewUser(msg.sender, _username, _hashToProfilePicture);\r\n        }\r\n\r\n        addressToUser[msg.sender] = User({\r\n            username: _username,\r\n            hashToProfilePicture: _hashToProfilePicture,\r\n            exists: true\r\n        });\r\n\r\n        usernameExists[_username] = true;\r\n        profilePictureExists[_hashToProfilePicture] = true;\r\n        usernameToAddress[_username] = msg.sender;\r\n    }\r\n\r\n    function changeProfilePicture(bytes32 _hashToProfilePicture) public {\r\n        require(addressToUser[msg.sender].exists, \"User doesn't exists\");\r\n\r\n        addressToUser[msg.sender].hashToProfilePicture = _hashToProfilePicture;\r\n    }\r\n\r\n    function getUserInfo(address _address) public view returns(string, bytes32) {\r\n        User memory user = addressToUser[_address];\r\n        return (user.username, user.hashToProfilePicture);\r\n    }\r\n\r\n    function getUsername(address _address) public view returns(string) {\r\n        return addressToUser[_address].username;\r\n    } \r\n\r\n    function getProfilePicture(address _address) public view returns(bytes32) {\r\n        return addressToUser[_address].hashToProfilePicture;\r\n    }\r\n\r\n    function isUsernameExists(string _username) public view returns(bool) {\r\n        return usernameExists[_username];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract DigitalPrintImage is ERC721Token(\"DigitalPrintImage\", \"DPM\"), UserManager, Ownable {\r\n\r\n    struct ImageMetadata {\r\n        uint finalSeed;\r\n        bytes32[] potentialAssets;\r\n        uint timestamp;\r\n        address creator;\r\n        string ipfsHash;\r\n        string extraData;\r\n    }\r\n\r\n    mapping(uint => bool) public seedExists;\r\n    mapping(uint => ImageMetadata) public imageMetadata;\r\n    mapping(uint => string) public idToIpfsHash;\r\n\r\n    address public marketplaceContract;\r\n    IAssetManager public assetManager;\r\n    Functions public functions;\r\n\r\n    modifier onlyMarketplaceContract() {\r\n        require(msg.sender == address(marketplaceContract));\r\n        _;\r\n    }\r\n\r\n    event ImageCreated(uint indexed imageId, address indexed owner);\r\n    /// @dev only for testing purposes\r\n    // function createImageTest() public {\r\n    //     _mint(msg.sender, totalSupply());\r\n    // }\r\n\r\n    /// @notice Function will create new image\r\n    /// @param _randomHashIds is array of random hashes from our array\r\n    /// @param _timestamp is timestamp when image is created\r\n    /// @param _iterations is number of how many times he generated random asset positions until he liked what he got\r\n    /// @param _potentialAssets is set of all potential assets user selected for an image\r\n    /// @param _author is nickname of image owner\r\n    /// @param _ipfsHash is ipfsHash of the image .png\r\n    /// @param _extraData string containing ipfsHash that contains (frame,width,height,title,description)\r\n    /// @return returns id of created image\r\n    function createImage(\r\n        uint[] _randomHashIds,\r\n        uint _timestamp,\r\n        uint _iterations,\r\n        bytes32[] _potentialAssets,\r\n        string _author,\r\n        string _ipfsHash,\r\n        string _extraData) public payable {\r\n        require(_potentialAssets.length <= 5);\r\n        // if user exists send his username, if it doesn't check for some username that doesn't exists\r\n        require(msg.sender == usernameToAddress[_author] || !usernameExists[_author]);\r\n\r\n        // if user doesn't exists create that user with no profile picture\r\n        if (!usernameExists[_author]) {\r\n            register(_author, bytes32(0));\r\n        }\r\n\r\n        uint[] memory pickedAssets;\r\n        uint finalSeed;\r\n       \r\n        (pickedAssets, finalSeed) = getPickedAssetsAndFinalSeed(_potentialAssets, _randomHashIds, _timestamp, _iterations); \r\n        uint[] memory pickedAssetPacks = assetManager.pickUniquePacks(pickedAssets);\r\n        uint finalPrice = 0;\r\n\r\n        for (uint i = 0; i < pickedAssetPacks.length; i++) {\r\n            if (assetManager.checkHasPermissionForPack(msg.sender, pickedAssetPacks[i]) == false) {\r\n                finalPrice += assetManager.getAssetPackPrice(pickedAssetPacks[i]);\r\n\r\n                assetManager.buyAssetPack.value(assetManager.getAssetPackPrice(pickedAssetPacks[i]))(msg.sender, pickedAssetPacks[i]);\r\n            }\r\n        }\r\n        \r\n        require(msg.value >= finalPrice);\r\n\r\n        uint id = totalSupply();\r\n        _mint(msg.sender, id);\r\n\r\n        imageMetadata[id] = ImageMetadata({\r\n            finalSeed: finalSeed,\r\n            potentialAssets: _potentialAssets,\r\n            timestamp: _timestamp,\r\n            creator: msg.sender,\r\n            ipfsHash: _ipfsHash,\r\n            extraData: _extraData\r\n        });\r\n\r\n        idToIpfsHash[id] = _ipfsHash;\r\n        seedExists[finalSeed] = true;\r\n\r\n        emit ImageCreated(id, msg.sender);\r\n    }\r\n\r\n    /// @notice approving image to be taken from specific address\r\n    /// @param _from address from which we transfer image\r\n    /// @param _to address that we give permission to take image\r\n    /// @param _imageId we are willing to give\r\n    function transferFromMarketplace(address _from, address _to, uint256 _imageId) public onlyMarketplaceContract {\r\n        require(isApprovedOrOwner(_from, _imageId));\r\n\r\n        clearApproval(_from, _imageId);\r\n        removeTokenFrom(_from, _imageId);\r\n        addTokenTo(_to, _imageId);\r\n\r\n        emit Transfer(_from, _to, _imageId);\r\n    }\r\n\r\n    /// @notice adds marketplace address to contract only if it doesn't already exist\r\n    /// @param _marketplaceContract address of marketplace contract\r\n    function addMarketplaceContract(address _marketplaceContract) public onlyOwner {\r\n        require(address(marketplaceContract) == 0x0);\r\n        \r\n        marketplaceContract = _marketplaceContract;\r\n    }\r\n\r\n    /// @notice Function to add assetManager\r\n    /// @param _assetManager is address of assetManager contract\r\n    function addAssetManager(address _assetManager) public onlyOwner {\r\n        require(address(assetManager) == 0x0);\r\n\r\n        assetManager = IAssetManager(_assetManager);\r\n    }\r\n\r\n    /// @notice Function to add functions contract\r\n    /// @param _functions is address of functions contract\r\n    function addFunctions(address _functions) public onlyOwner {\r\n        require(address(functions) == 0x0);\r\n\r\n        functions = Functions(_functions);\r\n    }\r\n\r\n    /// @notice Function to calculate final price for an image based on selected assets\r\n    /// @param _pickedAssets is array of picked packs\r\n    /// @param _owner is address of image owner\r\n    /// @return finalPrice for the image\r\n    function calculatePrice(uint[] _pickedAssets, address _owner) public view returns (uint) {\r\n        if (_pickedAssets.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint[] memory pickedAssetPacks = assetManager.pickUniquePacks(_pickedAssets);\r\n        uint finalPrice = 0;\r\n        for (uint i = 0; i < pickedAssetPacks.length; i++) {\r\n            if (assetManager.checkHasPermissionForPack(_owner, pickedAssetPacks[i]) == false) {\r\n                finalPrice += assetManager.getAssetPackPrice(pickedAssetPacks[i]);\r\n            }\r\n        }\r\n\r\n        return finalPrice;\r\n    }\r\n\r\n    /// @notice Method returning informations needed for gallery page\r\n    /// @param _imageId id of image \r\n    function getGalleryData(uint _imageId) public view \r\n    returns(address, address, string, bytes32, string, string) {\r\n        require(_imageId < totalSupply());\r\n\r\n        return(\r\n            imageMetadata[_imageId].creator,\r\n            ownerOf(_imageId),\r\n            addressToUser[ownerOf(_imageId)].username,\r\n            addressToUser[ownerOf(_imageId)].hashToProfilePicture,\r\n            imageMetadata[_imageId].ipfsHash,\r\n            imageMetadata[_imageId].extraData\r\n        );\r\n\r\n    }\r\n\r\n    /// @notice returns metadata of image\r\n    /// @dev not possible to use public mapping because of array of bytes32\r\n    /// @param _imageId id of image\r\n    function getImageMetadata(uint _imageId) public view\r\n    returns(address, string, uint, string, uint, bytes32[]) {\r\n        ImageMetadata memory metadata = imageMetadata[_imageId];\r\n\r\n        return(\r\n            metadata.creator,\r\n            metadata.extraData,\r\n            metadata.finalSeed,\r\n            metadata.ipfsHash,\r\n            metadata.timestamp,\r\n            metadata.potentialAssets\r\n        );\r\n    }\r\n\r\n    /// @notice returns all images owned by _user\r\n    /// @param _user address of user\r\n    function getUserImages(address _user) public view returns(uint[]) {\r\n        return ownedTokens[_user];\r\n    }\r\n\r\n    /// @notice returns picked assets from potential assets and final seed\r\n    /// @param _potentialAssets array of all potential assets encoded in bytes32\r\n    /// @param _randomHashIds selected random hash ids from our contract\r\n    /// @param _timestamp timestamp of image creation\r\n    /// @param _iterations number of iterations to get to final seed\r\n    function getPickedAssetsAndFinalSeed(bytes32[] _potentialAssets, uint[] _randomHashIds, uint _timestamp, uint _iterations) internal view returns(uint[], uint) {\r\n        uint finalSeed = uint(functions.getFinalSeed(functions.calculateSeed(_randomHashIds, _timestamp), _iterations));\r\n\r\n        require(!seedExists[finalSeed]);\r\n\r\n        return (functions.pickRandomAssets(finalSeed, _potentialAssets), finalSeed);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Marketplace is Ownable {\r\n\r\n    struct Ad {\r\n        uint price;\r\n        address exchanger;\r\n        bool exists;\r\n        bool active;\r\n    }\r\n\r\n    DigitalPrintImage public digitalPrintImageContract;\r\n\r\n    uint public creatorPercentage = 3; // 3 percentage\r\n    uint public marketplacePercentage = 2; // 2 percentage\r\n    uint public numberOfAds;\r\n    uint[] public allAds;\r\n    //image id to Ad\r\n    mapping(uint => Ad) public sellAds;\r\n    mapping(address => uint) public balances;\r\n\r\n    constructor(address _digitalPrintImageContract) public {\r\n        digitalPrintImageContract = DigitalPrintImage(_digitalPrintImageContract);\r\n        numberOfAds = 0;\r\n    }\r\n\r\n    event SellingImage(uint indexed imageId, uint price);\r\n    event ImageBought(uint indexed imageId, address indexed newOwner, uint price);\r\n\r\n    /// @notice Function to add image on marketplace\r\n    /// @dev only image owner can add image to marketplace\r\n    /// @param _imageId is id of image\r\n    /// @param _price is price for which we are going to sell image\r\n    function sell(uint _imageId, uint _price) public {\r\n        require(digitalPrintImageContract.ownerOf(_imageId) == msg.sender);\r\n\r\n        bool exists = sellAds[_imageId].exists;\r\n\r\n        sellAds[_imageId] = Ad({\r\n            price: _price,\r\n            exchanger: msg.sender,\r\n            exists: true,\r\n            active: true\r\n        });\r\n\r\n        if (!exists) {\r\n            numberOfAds++;\r\n            allAds.push(_imageId);\r\n        }\r\n\r\n        emit SellingImage(_imageId, _price);\r\n    }\r\n    \r\n    function getActiveAds() public view returns (uint[], uint[]) {\r\n        uint count;\r\n        for (uint i = 0; i < numberOfAds; i++) {\r\n            // active on sale are only those that exists and its still the same owner\r\n            if (isImageOnSale(allAds[i])) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        uint[] memory imageIds = new uint[](count);\r\n        uint[] memory prices = new uint[](count);\r\n        count = 0;\r\n        for (i = 0; i < numberOfAds; i++) {\r\n            Ad memory ad = sellAds[allAds[i]];\r\n            // active on sale are only those that exists and its still the same owner\r\n            if (isImageOnSale(allAds[i])) {\r\n                imageIds[count] = allAds[i];\r\n                prices[count] = ad.price;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return (imageIds, prices);\r\n    }\r\n\r\n    function isImageOnSale(uint _imageId) public view returns(bool) {\r\n        Ad memory ad = sellAds[_imageId];\r\n\r\n        return ad.exists && ad.active && (ad.exchanger == digitalPrintImageContract.ownerOf(_imageId));\r\n    }\r\n\r\n    /// @notice Function to buy image from Marketplace\r\n    /// @param _imageId is Id of image we are going to buy\r\n    function buy(uint _imageId) public payable {\r\n        require(isImageOnSale(_imageId));\r\n        require(msg.value >= sellAds[_imageId].price);\r\n\r\n        removeOrder(_imageId);\r\n\r\n        address _creator;\r\n        address _imageOwner = digitalPrintImageContract.ownerOf(_imageId);\r\n        (, , _creator, ,) = digitalPrintImageContract.imageMetadata(_imageId);\r\n\r\n        balances[_creator] += msg.value * 2 / 100;\r\n        balances[owner] += msg.value * 3 / 100;\r\n        balances[_imageOwner] += msg.value * 95 / 100;\r\n\r\n        digitalPrintImageContract.transferFromMarketplace(sellAds[_imageId].exchanger, msg.sender, _imageId);\r\n\r\n        emit ImageBought(_imageId, msg.sender, msg.value);\r\n    }\r\n\r\n    /// @notice Function to remove image from Marketplace\r\n    /// @dev image can be withdrawed only by its owner\r\n    /// @param _imageId is id of image we would like to get back\r\n    function cancel(uint _imageId) public {\r\n        require(sellAds[_imageId].exists == true);\r\n        require(sellAds[_imageId].exchanger == msg.sender);\r\n        require(sellAds[_imageId].active == true);\r\n\r\n        removeOrder(_imageId);\r\n    }\r\n\r\n    function withdraw() public {\r\n        \r\n        uint amount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    /// @notice Removes image from imgagesOnSale list\r\n    /// @param _imageId is id of image we want to remove\r\n    function removeOrder(uint _imageId) private {\r\n        sellAds[_imageId].active = false;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"marketplacePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_imageId\",\"type\":\"uint256\"}],\"name\":\"isImageOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_imageId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"digitalPrintImageContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveAds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_imageId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_imageId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellAds\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"exchanger\",\"type\":\"address\"},{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfAds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_digitalPrintImageContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"imageId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellingImage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"imageId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ImageBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b80776700778e7415da08ef65fa389f75737fb95", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8c6d7b6d2b7a87fe80a30296772ede971e6ea7299961789f3ba6c31c4724c5e6"}