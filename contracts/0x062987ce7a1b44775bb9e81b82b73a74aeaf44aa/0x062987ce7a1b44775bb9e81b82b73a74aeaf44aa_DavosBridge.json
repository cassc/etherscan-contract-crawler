{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/DavosBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.16;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IDavosBridge.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/EthereumVerifier.sol\\\";\\r\\nimport \\\"../libraries/ProofParser.sol\\\";\\r\\nimport \\\"../libraries/Utils.sol\\\";\\r\\n\\r\\ncontract DavosBridge is IDavosBridge, OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\\r\\n\\r\\n    // --- Vars ---\\r\\n    uint256 private _globalNonce;\\r\\n    address private _consensusAddress;\\r\\n    Metadata private _nativeTokenMetadata;\\r\\n\\r\\n    mapping(bytes32 => bool) private _usedProofs;\\r\\n    mapping(uint256 => address) private _bridgeAddressByChainId;\\r\\n    mapping(bytes32 => address) private _warpDestinations;  // KECCAK256(fromToken,fromChain,_bridgeAddressByChainId(toChain), toChain) => destinationToken\\r\\n\\r\\n    uint256 public shortCapDuration;  // [sec]\\r\\n    mapping(address => uint256) public shortCaps;  // Token => Cap per 'shortCapTime'\\r\\n    mapping(address => mapping(uint256 => uint256)) public shortCapsDeposit;   // Token => (EpochTime/shortCapDuration) => Current Deposits\\r\\n    mapping(address => mapping(uint256 => uint256)) public shortCapsWithdraw;  // Token => (EpochTime/shortCapDuration) => Current Withdraws\\r\\n\\r\\n    uint256 public longCapDuration;  // [sec]\\r\\n    mapping(address => uint256) public longCaps;  // Token => Cap per 'longCapTime'\\r\\n    mapping(address => mapping(uint256 => uint256)) public longCapsDeposit;   // Token => (EpochTime/longCapDuration) => Current Deposits\\r\\n    mapping(address => mapping(uint256 => uint256)) public longCapsWithdraw;  // Token => (EpochTime/longCapDuration) => Current Withdraws\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    // --- Constructor ---\\r\\n    constructor() { _disableInitializers(); }\\r\\n\\r\\n    // --- Init ---\\r\\n    function initialize(address consensusAddress, string memory nativeTokenSymbol, string memory nativeTokenName) external initializer {\\r\\n\\r\\n        __Ownable_init();\\r\\n        __Pausable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n\\r\\n        _consensusAddress = consensusAddress;\\r\\n        _nativeTokenMetadata = Metadata(\\r\\n            Utils.stringToBytes32(nativeTokenSymbol),\\r\\n            Utils.stringToBytes32(nativeTokenName),\\r\\n            block.chainid,\\r\\n            address(bytes20(keccak256(abi.encodePacked(\\\"DavosBridge\\\", nativeTokenSymbol))))     \\r\\n        );\\r\\n\\r\\n        shortCapDuration = 1 hours;\\r\\n        longCapDuration = 1 days;\\r\\n    }\\r\\n\\r\\n    // --- User ---\\r\\n    function depositToken(address fromToken, uint256 toChain, address toAddress, uint256 amount) external override nonReentrant whenNotPaused {\\r\\n        \\r\\n        _updateDepositCaps(fromToken, amount);\\r\\n\\r\\n        if (warpDestination(fromToken, toChain) != address(0)) {\\r\\n            _depositWarped(fromToken, toChain, toAddress, amount);\\r\\n        } else revert(\\\"DavosBridge/warp-destination-unknown\\\");\\r\\n    }\\r\\n    function _updateDepositCaps(address fromToken, uint256 amount) internal {\\r\\n\\r\\n        require(shortCapsDeposit[fromToken][getCurrentStamp(shortCapDuration)] + amount <= shortCaps[fromToken], \\\"DavosBridge/short-caps-exceeded\\\");\\r\\n        shortCapsDeposit[fromToken][getCurrentStamp(shortCapDuration)] += amount;\\r\\n\\r\\n        require(longCapsDeposit[fromToken][getCurrentStamp(longCapDuration)] + amount <= longCaps[fromToken], \\\"DavosBridge/long-caps-exceeded\\\");\\r\\n        longCapsDeposit[fromToken][getCurrentStamp(longCapDuration)] += amount;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Tokens on source and destination chains are linked with independent supplies.\\r\\n     * Burns tokens on source chain (to later mint on destination chain).\\r\\n     * @param fromToken one of many warp-able token on source chain.\\r\\n     * @param toChain one of many destination chain ID.\\r\\n     * @param toAddress claimer of 'totalAmount' on destination chain.\\r\\n     * @param totalAmount amout of tokens to be warped.\\r\\n     */\\r\\n    function _depositWarped(address fromToken, uint256 toChain, address toAddress, uint256 totalAmount) internal {\\r\\n\\r\\n        require(_bridgeAddressByChainId[toChain] != address(0), \\\"DavosBridge/non-existing-bridge\\\");\\r\\n        address fromAddress = address(msg.sender);\\r\\n        \\r\\n        uint256 balanceBefore = IERC20Upgradeable(fromToken).balanceOf(fromAddress);\\r\\n        IERC20Mintable(fromToken).burn(fromAddress, totalAmount); \\r\\n        uint256 balanceAfter = IERC20Upgradeable(fromToken).balanceOf(fromAddress);\\r\\n        require(balanceAfter + totalAmount == balanceBefore, \\\"DavosBridge/incorrect-transfer-amount\\\");\\r\\n\\r\\n        /* fromToken and toToken are independent, originChain and originAddress are invalid */\\r\\n        Metadata memory metaData = Metadata(\\r\\n            Utils.stringToBytes32(IERC20Extra(fromToken).symbol()),\\r\\n            Utils.stringToBytes32(IERC20Extra(fromToken).name()),\\r\\n            0,\\r\\n            address(0)\\r\\n        );\\r\\n\\r\\n       _globalNonce++;\\r\\n\\r\\n        emit DepositWarped(toChain, fromAddress, toAddress, fromToken, warpDestination(fromToken, toChain), _amountErc20Token(fromToken, totalAmount), _globalNonce, metaData);\\r\\n    }\\r\\n    function _amountErc20Token(address fromToken, uint256 totalAmount) internal returns (uint256) {\\r\\n\\r\\n        /* scale amount to 18 decimals */\\r\\n        require(IERC20Extra(fromToken).decimals() <= 18, \\\"DavosBridge/decimals-overflow\\\");\\r\\n        totalAmount *= (10**(18 - IERC20Extra(fromToken).decimals()));\\r\\n        return totalAmount;\\r\\n    }\\r\\n    function withdraw(bytes calldata, /* encodedProof */ bytes calldata rawReceipt, bytes memory proofSignature) external override nonReentrant whenNotPaused {\\r\\n\\r\\n        uint256 proofOffset;\\r\\n        uint256 receiptOffset;\\r\\n        assembly {\\r\\n            proofOffset := add(0x4, calldataload(4))\\r\\n            receiptOffset := add(0x4, calldataload(36))\\r\\n        }\\r\\n        /* we must parse and verify that tx and receipt matches */\\r\\n        (EthereumVerifier.State memory state, EthereumVerifier.PegInType pegInType) = EthereumVerifier.parseTransactionReceipt(receiptOffset);\\r\\n\\r\\n        require(state.chainId == block.chainid, \\\"DavosBridge/receipt-points-to-another-chain\\\");\\r\\n\\r\\n        ProofParser.Proof memory proof = ProofParser.parseProof(proofOffset);\\r\\n        require(state.contractAddress != address(0), \\\"DavosBridge/invalid-contractAddress\\\");\\r\\n        require(_bridgeAddressByChainId[proof.chainId] == state.contractAddress, \\\"DavosBridge/event-from-unknown-bridge\\\");\\r\\n\\r\\n        state.receiptHash = keccak256(rawReceipt);\\r\\n        proof.status = 0x01;\\r\\n        proof.receiptHash = state.receiptHash;\\r\\n\\r\\n        bytes32 proofHash;\\r\\n        assembly {\\r\\n            proofHash := keccak256(proof, 0x100)\\r\\n        }\\r\\n\\r\\n        // we can trust receipt only if proof is signed by consensus\\r\\n        require(ECDSAUpgradeable.recover(proofHash, proofSignature) == _consensusAddress, \\\"DavosBridge/bad-signature\\\");\\r\\n\\r\\n        // withdraw funds to recipient\\r\\n        _withdraw(state, pegInType, proof, proofHash);\\r\\n    }\\r\\n    function _withdraw(EthereumVerifier.State memory state, EthereumVerifier.PegInType pegInType, ProofParser.Proof memory proof, bytes32 payload) internal {\\r\\n\\r\\n        require(!_usedProofs[payload], \\\"DavosBridge/used-proof\\\");\\r\\n        _usedProofs[payload] = true;\\r\\n        if (pegInType == EthereumVerifier.PegInType.Warp) {\\r\\n            _withdrawWarped(state, proof);\\r\\n        } else revert(\\\"DavosBridge/invalid-type\\\");\\r\\n    }\\r\\n    function _withdrawWarped(EthereumVerifier.State memory state, ProofParser.Proof memory proof) internal {\\r\\n\\r\\n        require(state.fromToken != address(0), \\\"DavosBridge/invalid-fromToken\\\");\\r\\n        require(warpDestination(state.toToken, proof.chainId) == state.fromToken, \\\"DavosBridge/bridge-from-unknown-destination\\\");\\r\\n\\r\\n        uint8 decimals = IERC20MetadataUpgradeable(state.toToken).decimals();\\r\\n        require(decimals <= 18, \\\"DavosBridge/decimals-overflow\\\");\\r\\n\\r\\n        uint256 scaledAmount = state.totalAmount / (10**(18 - decimals));\\r\\n\\r\\n        _updateWithdrawCaps(state.toToken, scaledAmount);\\r\\n\\r\\n        IERC20Mintable(state.toToken).mint(state.toAddress, scaledAmount);\\r\\n\\r\\n        emit WithdrawMinted(state.receiptHash, state.fromAddress, state.toAddress, state.fromToken, state.toToken, state.totalAmount);\\r\\n    }\\r\\n    function _updateWithdrawCaps(address token, uint256 amount) internal {\\r\\n\\r\\n        require(shortCapsWithdraw[token][getCurrentStamp(shortCapDuration)] + amount <= shortCaps[token], \\\"DavosBridge/short-caps-exceeded\\\");\\r\\n        shortCapsWithdraw[token][getCurrentStamp(shortCapDuration)] += amount;\\r\\n\\r\\n        require(longCapsWithdraw[token][getCurrentStamp(longCapDuration)] + amount <= longCaps[token], \\\"DavosBridge/long-caps-exceeded\\\");\\r\\n        longCapsWithdraw[token][getCurrentStamp(longCapDuration)] += amount;\\r\\n    }\\r\\n\\r\\n    // --- Admin ---\\r\\n    function pause() public onlyOwner {\\r\\n\\r\\n        _pause();\\r\\n    }\\r\\n    function unpause() public onlyOwner {\\r\\n\\r\\n        _unpause();\\r\\n    }\\r\\n    function addBridge(address bridge, uint256 toChain) public onlyOwner {\\r\\n\\r\\n        require(_bridgeAddressByChainId[toChain] == address(0x00), \\\"DavosBridge/already-allowed\\\");\\r\\n        require(toChain > 0, \\\"DavosBridge/invalid-chain\\\");\\r\\n        _bridgeAddressByChainId[toChain] = bridge;\\r\\n\\r\\n        emit BridgeAdded(bridge, toChain);\\r\\n    }\\r\\n    function removeBridge(uint256 toChain) public onlyOwner {\\r\\n\\r\\n        require(_bridgeAddressByChainId[toChain] != address(0x00), \\\"already-removed\\\");\\r\\n        require(toChain > 0, \\\"DavosBridge/invalid-chain\\\");\\r\\n        address bridge = _bridgeAddressByChainId[toChain];\\r\\n        delete _bridgeAddressByChainId[toChain];\\r\\n\\r\\n        emit BridgeRemoved(bridge, toChain);\\r\\n    }\\r\\n    function addWarpDestination(address fromToken, uint256 toChain, address toToken) external onlyOwner {\\r\\n\\r\\n        require(_bridgeAddressByChainId[toChain] != address(0), \\\"DavosBridge/bad-chain\\\");\\r\\n        bytes32 direction = keccak256(abi.encodePacked(fromToken, block.chainid, _bridgeAddressByChainId[toChain], toChain));\\r\\n        require(_warpDestinations[direction] == address(0), \\\"DavosBridge/known-destination\\\");\\r\\n        _warpDestinations[direction] = toToken;\\r\\n\\r\\n        emit WarpDestinationAdded(fromToken, toChain, toToken);\\r\\n    }\\r\\n    function removeWarpDestination(address fromToken, uint256 toChain, address toToken) external onlyOwner {\\r\\n\\r\\n        require(_bridgeAddressByChainId[toChain] != address(0), \\\"DavosBridge/bad-chain\\\");\\r\\n        bytes32 direction = keccak256(abi.encodePacked(fromToken, block.chainid, _bridgeAddressByChainId[toChain], toChain));\\r\\n        require(_warpDestinations[direction] != address(0), \\\"DavosBridge/unknown-destination\\\");\\r\\n        delete _warpDestinations[direction];\\r\\n\\r\\n        emit WarpDestinationRemoved(fromToken, toChain, toToken);\\r\\n    }\\r\\n    function changeConsensus(address consensus) public onlyOwner {\\r\\n\\r\\n        require(consensus != address(0x0), \\\"DavosBridge/invalid-address\\\");\\r\\n        _consensusAddress = consensus;\\r\\n\\r\\n        emit ConsensusChanged(_consensusAddress);\\r\\n    }\\r\\n    function changeMetadata(address token, bytes32 name, bytes32 symbol) external onlyOwner {\\r\\n        \\r\\n        IERC20MetadataChangeable(token).changeName(name);\\r\\n        IERC20MetadataChangeable(token).changeSymbol(symbol);\\r\\n    }\\r\\n    function changeShortCap(address token, uint256 amount) external onlyOwner {\\r\\n\\r\\n        uint256 xAmount = shortCaps[token];\\r\\n        shortCaps[token] = amount;\\r\\n\\r\\n        emit ShortCapChanged(token, xAmount, amount);\\r\\n    }\\r\\n    function changeShortCapDuration(uint256 duration) external onlyOwner {\\r\\n\\r\\n        uint256 xDuration = shortCapDuration;\\r\\n        shortCapDuration = duration;\\r\\n\\r\\n        emit ShortCapDurationChanged(xDuration, duration);\\r\\n    }\\r\\n    function changeLongCap(address token, uint256 amount) external onlyOwner {\\r\\n\\r\\n        uint256 xAmount = longCaps[token];\\r\\n        longCaps[token] = amount;\\r\\n\\r\\n        emit LongCapChanged(token, xAmount, amount);\\r\\n    }\\r\\n    function changeLongCapDuration(uint256 duration) external onlyOwner {\\r\\n\\r\\n        uint256 xDuration = longCapDuration;\\r\\n        longCapDuration = duration;\\r\\n\\r\\n        emit LongCapDurationChanged(xDuration, duration);\\r\\n    }\\r\\n\\r\\n    // --- Views ---\\r\\n    function warpDestination(address fromToken, uint256 toChain) public view returns(address) {\\r\\n\\r\\n        return _warpDestinations[keccak256(abi.encodePacked(fromToken, block.chainid, _bridgeAddressByChainId[toChain], toChain))];\\r\\n    }\\r\\n    function getCurrentStamp(uint256 duration) public view returns(uint256) {\\r\\n\\r\\n        return (block.timestamp / duration) * duration;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDavosBridge.sol\": {\r\n      \"content\": \"// // SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IDavosBridge {\\r\\n\\r\\n    // --- Structs ---\\r\\n    struct Metadata {\\r\\n        bytes32 symbol;\\r\\n        bytes32 name;\\r\\n        uint256 originChain;\\r\\n        address originAddress;\\r\\n    }\\r\\n\\r\\n    // --- Events ---\\r\\n    event ShortCapChanged(address indexed token, uint256 indexed xAmount, uint256 indexed amount);\\r\\n    event LongCapChanged(address indexed token,uint256 indexed xAmount, uint256 indexed amount);\\r\\n    event ShortCapDurationChanged(uint256 indexed xDuration, uint256 indexed duration);\\r\\n    event LongCapDurationChanged(uint256 indexed xDuration, uint256 indexed duration);\\r\\n    event BridgeAdded(address bridge, uint256 toChain);\\r\\n    event BridgeRemoved(address bridge, uint256 toChain);\\r\\n    event WarpDestinationAdded(address indexed fromToken, uint256 indexed toChain, address indexed toToken);\\r\\n    event WarpDestinationRemoved(address indexed fromToken, uint256 indexed toChain, address indexed toToken);\\r\\n    event ConsensusChanged(address consensusAddress);\\r\\n    event DepositWarped(uint256 chainId, address indexed fromAddress, address indexed toAddress, address fromToken, address toToken, uint256 totalAmount, uint256 nonce, Metadata metadata);\\r\\n    event WithdrawMinted(bytes32 receiptHash, address indexed fromAddress, address indexed toAddress, address fromToken, address toToken, uint256 totalAmount);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function depositToken(address fromToken, uint256 toChain, address toAddress, uint256 amount) external;\\r\\n    function withdraw(bytes calldata encodedProof, bytes calldata rawReceipt, bytes memory receiptRootSignature) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\ninterface IERC20Mintable {\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n    // use for charge bridge commission before burn\\r\\n    function chargeFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC20Pegged {\\r\\n    function getOrigin() external view returns (uint256, address);\\r\\n}\\r\\n\\r\\ninterface IERC20Extra {\\r\\n    function name() external returns (string memory);\\r\\n\\r\\n    function decimals() external returns (uint8);\\r\\n\\r\\n    function symbol() external returns (string memory);\\r\\n}\\r\\n\\r\\ninterface IERC20MetadataChangeable {\\r\\n    event NameChanged(string prevValue, string newValue);\\r\\n\\r\\n    event SymbolChanged(string prevValue, string newValue);\\r\\n\\r\\n    function changeName(bytes32) external;\\r\\n\\r\\n    function changeSymbol(bytes32) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/CallDataRLPReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\n\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary CallDataRLPReader {\\r\\n    uint8 constant STRING_SHORT_START = 0x80;\\r\\n    uint8 constant STRING_LONG_START = 0xb8;\\r\\n    uint8 constant LIST_SHORT_START = 0xc0;\\r\\n    uint8 constant LIST_LONG_START = 0xf8;\\r\\n    uint8 constant WORD_SIZE = 32;\\r\\n\\r\\n    function beginIteration(uint256 listOffset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 iter)\\r\\n    {\\r\\n        return listOffset + _payloadOffset(listOffset);\\r\\n    }\\r\\n\\r\\n    function next(uint256 iter) internal pure returns (uint256 nextIter) {\\r\\n        return iter + itemLength(iter);\\r\\n    }\\r\\n\\r\\n    function payloadLen(uint256 ptr, uint256 len)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return len - _payloadOffset(ptr);\\r\\n    }\\r\\n\\r\\n    function toAddress(uint256 ptr) internal pure returns (address) {\\r\\n        return address(uint160(toUint(ptr, 21)));\\r\\n    }\\r\\n\\r\\n    function toUint(uint256 ptr, uint256 len) internal pure returns (uint256) {\\r\\n        require(len > 0 && len <= 33);\\r\\n        uint256 offset = _payloadOffset(ptr);\\r\\n        uint256 numLen = len - offset;\\r\\n\\r\\n        uint256 result;\\r\\n        assembly {\\r\\n            result := calldataload(add(ptr, offset))\\r\\n            // cut off redundant bytes\\r\\n            result := shr(mul(8, sub(32, numLen)), result)\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function toUintStrict(uint256 ptr) internal pure returns (uint256) {\\r\\n        // one byte prefix\\r\\n        uint256 result;\\r\\n        assembly {\\r\\n            result := calldataload(add(ptr, 1))\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function rawDataPtr(uint256 ptr) internal pure returns (uint256) {\\r\\n        return ptr + _payloadOffset(ptr);\\r\\n    }\\r\\n\\r\\n    // @return entire rlp item byte length\\r\\n    function itemLength(uint256 callDataPtr) internal pure returns (uint256) {\\r\\n        uint256 itemLen;\\r\\n        uint256 byte0;\\r\\n        assembly {\\r\\n            byte0 := byte(0, calldataload(callDataPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\r\\n        else if (byte0 < STRING_LONG_START)\\r\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\r\\n        else if (byte0 < LIST_SHORT_START) {\\r\\n            assembly {\\r\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\r\\n                callDataPtr := add(callDataPtr, 1) // skip over the first byte\\r\\n\\r\\n                /* 32 byte word size */\\r\\n                let dataLen := shr(\\r\\n                    mul(8, sub(32, byteLen)),\\r\\n                    calldataload(callDataPtr)\\r\\n                )\\r\\n                itemLen := add(dataLen, add(byteLen, 1))\\r\\n            }\\r\\n        } else if (byte0 < LIST_LONG_START) {\\r\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\r\\n        } else {\\r\\n            assembly {\\r\\n                let byteLen := sub(byte0, 0xf7)\\r\\n                callDataPtr := add(callDataPtr, 1)\\r\\n\\r\\n                let dataLen := shr(\\r\\n                    mul(8, sub(32, byteLen)),\\r\\n                    calldataload(callDataPtr)\\r\\n                )\\r\\n                itemLen := add(dataLen, add(byteLen, 1))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return itemLen;\\r\\n    }\\r\\n\\r\\n    // @return number of bytes until the data\\r\\n    function _payloadOffset(uint256 callDataPtr)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 byte0;\\r\\n        assembly {\\r\\n            byte0 := byte(0, calldataload(callDataPtr))\\r\\n        }\\r\\n\\r\\n        if (byte0 < STRING_SHORT_START) return 0;\\r\\n        else if (\\r\\n            byte0 < STRING_LONG_START ||\\r\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\r\\n        ) return 1;\\r\\n        else if (byte0 < LIST_SHORT_START)\\r\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\r\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/EthereumVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"./CallDataRLPReader.sol\\\";\\r\\nimport \\\"./Utils.sol\\\";\\r\\nimport \\\"../interfaces/IDavosBridge.sol\\\";\\r\\n\\r\\nlibrary EthereumVerifier {\\r\\n    \\r\\n    bytes32 constant TOPIC_PEG_IN_WARPED = keccak256(\\\"DepositWarped(uint256,address,address,address,address,uint256,uint256,(bytes32,bytes32,uint256,address))\\\");\\r\\n\\r\\n    enum PegInType {\\r\\n        None,\\r\\n        Warp\\r\\n    }\\r\\n\\r\\n    struct State {\\r\\n        bytes32 receiptHash;\\r\\n        address contractAddress;\\r\\n        uint256 chainId;\\r\\n        address fromAddress;\\r\\n        address toAddress;\\r\\n        address fromToken;\\r\\n        address toToken;\\r\\n        uint256 totalAmount;\\r\\n        uint256 nonce;\\r\\n        // metadata fields (we can't use Metadata struct here because of Solidity struct memory layout)\\r\\n        bytes32 symbol;\\r\\n        bytes32 name;\\r\\n        uint256 originChain;\\r\\n        address originToken;\\r\\n    }\\r\\n\\r\\n    function getMetadata(State memory state)\\r\\n        internal\\r\\n        pure\\r\\n        returns (IDavosBridge.Metadata memory)\\r\\n    {\\r\\n        IDavosBridge.Metadata memory metadata;\\r\\n        assembly {\\r\\n            metadata := add(state, 0x120)\\r\\n        }\\r\\n        return metadata;\\r\\n    }\\r\\n\\r\\n    function parseTransactionReceipt(uint256 receiptOffset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (State memory state, PegInType pegInType)\\r\\n    {\\r\\n        /* parse peg-in data from logs */\\r\\n        uint256 iter = CallDataRLPReader.beginIteration(receiptOffset + 0x20);\\r\\n        {\\r\\n            /* postStateOrStatus - we must ensure that tx is not reverted */\\r\\n            uint256 statusOffset = iter;\\r\\n            iter = CallDataRLPReader.next(iter);\\r\\n            require(\\r\\n                CallDataRLPReader.payloadLen(\\r\\n                    statusOffset,\\r\\n                    iter - statusOffset\\r\\n                ) == 1,\\r\\n                \\\"EthereumVerifier: tx is reverted\\\"\\r\\n            );\\r\\n        }\\r\\n        /* skip cumulativeGasUsed */\\r\\n        iter = CallDataRLPReader.next(iter);\\r\\n        /* logs - we need to find our logs */\\r\\n        uint256 logs = iter;\\r\\n        iter = CallDataRLPReader.next(iter);\\r\\n        uint256 logsIter = CallDataRLPReader.beginIteration(logs);\\r\\n        for (; logsIter < iter; ) {\\r\\n            uint256 log = logsIter;\\r\\n            logsIter = CallDataRLPReader.next(logsIter);\\r\\n            /* make sure there is only one peg-in event in logs */\\r\\n            PegInType logType = _decodeReceiptLogs(state, log);\\r\\n            if (logType != PegInType.None) {\\r\\n                require(\\r\\n                    pegInType == PegInType.None,\\r\\n                    \\\"EthereumVerifier: multiple logs\\\"\\r\\n                );\\r\\n                pegInType = logType;\\r\\n            }\\r\\n        }\\r\\n        /* don't allow to process if peg-in type is unknown */\\r\\n        require(pegInType != PegInType.None, \\\"EthereumVerifier: missing logs\\\");\\r\\n        return (state, pegInType);\\r\\n    }\\r\\n\\r\\n    function _decodeReceiptLogs(State memory state, uint256 log)\\r\\n        internal\\r\\n        pure\\r\\n        returns (PegInType pegInType)\\r\\n    {\\r\\n        uint256 logIter = CallDataRLPReader.beginIteration(log);\\r\\n        address contractAddress;\\r\\n        {\\r\\n            /* parse smart contract address */\\r\\n            uint256 addressOffset = logIter;\\r\\n            logIter = CallDataRLPReader.next(logIter);\\r\\n            contractAddress = CallDataRLPReader.toAddress(addressOffset);\\r\\n        }\\r\\n        /* topics */\\r\\n        bytes32 mainTopic;\\r\\n        address fromAddress;\\r\\n        address toAddress;\\r\\n        {\\r\\n            uint256 topicsIter = logIter;\\r\\n            logIter = CallDataRLPReader.next(logIter);\\r\\n            // Must be 3 topics RLP encoded: event signature, fromAddress, toAddress\\r\\n            // Each topic RLP encoded is 33 bytes (0xa0[32 bytes data])\\r\\n            // Total payload: 99 bytes. Since it's list with total size bigger than 55 bytes we need 2 bytes prefix (0xf863)\\r\\n            // So total size of RLP encoded topics array must be 101\\r\\n            if (CallDataRLPReader.itemLength(topicsIter) != 101) {\\r\\n                return PegInType.None;\\r\\n            }\\r\\n            topicsIter = CallDataRLPReader.beginIteration(topicsIter);\\r\\n            mainTopic = bytes32(CallDataRLPReader.toUintStrict(topicsIter));\\r\\n            topicsIter = CallDataRLPReader.next(topicsIter);\\r\\n            fromAddress = address(\\r\\n                bytes20(uint160(CallDataRLPReader.toUintStrict(topicsIter)))\\r\\n            );\\r\\n            topicsIter = CallDataRLPReader.next(topicsIter);\\r\\n            toAddress = address(\\r\\n                bytes20(uint160(CallDataRLPReader.toUintStrict(topicsIter)))\\r\\n            );\\r\\n            topicsIter = CallDataRLPReader.next(topicsIter);\\r\\n            require(topicsIter == logIter); // safety check that iteration is finished\\r\\n        }\\r\\n\\r\\n        uint256 ptr = CallDataRLPReader.rawDataPtr(logIter);\\r\\n        logIter = CallDataRLPReader.next(logIter);\\r\\n        uint256 len = logIter - ptr;\\r\\n        {\\r\\n            // parse logs based on topic type and check that event data has correct length\\r\\n            uint256 expectedLen;\\r\\n            if (mainTopic == TOPIC_PEG_IN_WARPED) {\\r\\n                expectedLen = 0x120;\\r\\n                pegInType = PegInType.Warp;\\r\\n            } else {\\r\\n                return PegInType.None;\\r\\n            }\\r\\n            if (len != expectedLen) {\\r\\n                return PegInType.None;\\r\\n            }\\r\\n        }\\r\\n        {\\r\\n            // read chain id separately and verify that contract that emitted event is relevant\\r\\n            uint256 chainId;\\r\\n            assembly {\\r\\n                chainId := calldataload(ptr)\\r\\n            }\\r\\n            //  if (chainId != Utils.currentChain()) return PegInType.None;\\r\\n            // All checks are passed after this point, no errors allowed and we can modify state\\r\\n            state.chainId = chainId;\\r\\n            ptr += 0x20;\\r\\n            len -= 0x20;\\r\\n        }\\r\\n\\r\\n        {\\r\\n            uint256 structOffset;\\r\\n            assembly {\\r\\n                // skip 5 fields: receiptHash, contractAddress, chainId, fromAddress, toAddress\\r\\n                structOffset := add(state, 0xa0)\\r\\n                calldatacopy(structOffset, ptr, len)\\r\\n            }\\r\\n        }\\r\\n        state.contractAddress = contractAddress;\\r\\n        state.fromAddress = fromAddress;\\r\\n        state.toAddress = toAddress;\\r\\n        return pegInType;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/ProofParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"./CallDataRLPReader.sol\\\";\\r\\nimport \\\"./Utils.sol\\\";\\r\\n\\r\\nlibrary ProofParser {\\r\\n    // Proof is message format signed by the protocol. It contains somewhat redundant information, so only part\\r\\n    // of the proof could be passed into the contract and other part can be inferred from transaction receipt\\r\\n    struct Proof {\\r\\n        uint256 chainId;\\r\\n        uint256 status;\\r\\n        bytes32 transactionHash;\\r\\n        uint256 blockNumber;\\r\\n        bytes32 blockHash;\\r\\n        uint256 transactionIndex;\\r\\n        bytes32 receiptHash;\\r\\n        uint256 transferAmount;\\r\\n    }\\r\\n\\r\\n    function parseProof(uint256 proofOffset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Proof memory)\\r\\n    {\\r\\n        Proof memory proof;\\r\\n        uint256 dataOffset = proofOffset + 0x20;\\r\\n        assembly {\\r\\n            calldatacopy(proof, dataOffset, 0x20) // 1 field (chainId)\\r\\n            dataOffset := add(dataOffset, 0x40)\\r\\n            calldatacopy(add(proof, 0x40), dataOffset, 0x80) // 4 fields * 0x20 = 0x80\\r\\n            dataOffset := add(dataOffset, 0xa0)\\r\\n            calldatacopy(add(proof, 0xe0), dataOffset, 0x20) // transferAmount\\r\\n        }\\r\\n        return proof;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary Utils {\\r\\n    function currentChain() internal view returns (uint256) {\\r\\n        uint256 chain;\\r\\n        assembly {\\r\\n            chain := chainid()\\r\\n        }\\r\\n        return chain;\\r\\n    }\\r\\n\\r\\n    function stringToBytes32(string memory source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 result)\\r\\n    {\\r\\n        bytes memory tempEmptyStringTest = bytes(source);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n        assembly {\\r\\n            result := mload(add(source, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function saturatingMultiply(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            if (a == 0) return 0;\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return type(uint256).max;\\r\\n            return c;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function saturatingAdd(uint256 a, uint256 b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return type(uint256).max;\\r\\n            return c;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Preconditions:\\r\\n    //  1. a may be arbitrary (up to 2 ** 256 - 1)\\r\\n    //  2. b * c < 2 ** 256\\r\\n    // Returned value: min(floor((a * b) / c), 2 ** 256 - 1)\\r\\n    function multiplyAndDivideFloor(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 c\\r\\n    ) internal pure returns (uint256) {\\r\\n        return\\r\\n            saturatingAdd(\\r\\n                saturatingMultiply(a / c, b),\\r\\n                ((a % c) * b) / c // can't fail because of assumption 2.\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // Preconditions:\\r\\n    //  1. a may be arbitrary (up to 2 ** 256 - 1)\\r\\n    //  2. b * c < 2 ** 256\\r\\n    // Returned value: min(ceil((a * b) / c), 2 ** 256 - 1)\\r\\n    function multiplyAndDivideCeil(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 c\\r\\n    ) internal pure returns (uint256) {\\r\\n        return\\r\\n            saturatingAdd(\\r\\n                saturatingMultiply(a / c, b),\\r\\n                ((a % c) * b + (c - 1)) / c // can't fail because of assumption 2.\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"BridgeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"BridgeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"}],\"name\":\"ConsensusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"originChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IDavosBridge.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"DepositWarped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"xAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LongCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"xDuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"LongCapDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"xAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShortCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"xDuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ShortCapDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"WarpDestinationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"WarpDestinationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"addBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"addWarpDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"changeConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeLongCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"changeLongCapDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"changeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeShortCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"changeShortCapDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"getCurrentStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consensusAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nativeTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nativeTokenName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longCapDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"longCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"longCapsDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"longCapsWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"removeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"removeWarpDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortCapDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shortCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shortCapsDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shortCapsWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"}],\"name\":\"warpDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rawReceipt\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofSignature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DavosBridge", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}