{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * Welcome to EverETH.\r\n \r\n  _____                _____ _____ _   _ \r\n | ____|_   _____ _ __| ____|_   _| | | |\r\n |  _| \\ \\ / / _ \\ '__|  _|   | | | |_| |\r\n | |___ \\ V /  __/ |  | |___  | | |  _  |\r\n |_____| \\_/ \\___|_|  |_____| |_| |_| |_|\r\n                                         \r\n                                                           \r\n * Official website: EverETH.net\r\n */\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract EverETHairdrop {\r\n    address public owner;\r\n    address public tokenAddress;\r\n    uint256 public totalTokens;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenAddress) {\r\n        owner = msg.sender;\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\r\n        require(_tokenAddress != address(0), \"Invalid token address.\");\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    function setTotalTokens(uint256 _totalTokens) external onlyOwner {\r\n        totalTokens = _totalTokens;\r\n    }\r\n\r\n    function distributeTokens(address[] calldata recipients, uint256[] calldata amounts) external onlyOwner {\r\n        require(recipients.length == amounts.length, \"Number of recipients must match the number of amounts.\");\r\n\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n        require(tokenBalance >= totalTokens, \"Insufficient tokens in the contract.\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(recipients[i] != address(0), \"Invalid recipient address.\");\r\n\r\n            uint256 amount = amounts[i];\r\n            require(amount <= totalTokens, \"Amount exceeds the total tokens allocated for airdrop.\");\r\n\r\n            require(IERC20(tokenAddress).transfer(recipients[i], amount), \"Token transfer failed.\");\r\n\r\n            totalTokens -= amount;\r\n        }\r\n    }\r\n\r\n    function withdrawTokens(uint256 amount) external onlyOwner {\r\n        require(amount <= IERC20(tokenAddress).balanceOf(address(this)), \"Insufficient tokens in the contract.\");\r\n        require(IERC20(tokenAddress).transfer(owner, amount), \"Token transfer failed.\");\r\n    }\r\n\r\n    function withdrawTokensRemaining() external onlyOwner {\r\n        require(totalTokens > 0, \"No remaining tokens to withdraw.\");\r\n        require(IERC20(tokenAddress).transfer(owner, totalTokens), \"Token transfer failed.\");\r\n        totalTokens = 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"}],\"name\":\"setTotalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokensRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EverETHairdrop", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e46a1d19962ea120765d3139c588ffd617be04a8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3613b3155724a1b45e415429cacc667c0a206f0b03b0363f1b4c14fea91ad8a5"}