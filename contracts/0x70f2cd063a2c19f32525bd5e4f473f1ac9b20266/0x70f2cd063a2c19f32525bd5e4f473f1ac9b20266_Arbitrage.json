{"SourceCode": "{\"Arbitrage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\ncontract Arbitrage is IFlashLoanRecipient {\\n  IVault private constant vault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n\\n  IUniswapV2Router02 public immutable sRouter;\\n  IUniswapV2Router02 public immutable uRouter;\\n  address public owner;\\n\\n  constructor(address _sRouter, address _uRouter) {\\n    sRouter = IUniswapV2Router02(_sRouter); // Sushiswap\\n    uRouter = IUniswapV2Router02(_uRouter); // Uniswap\\n    owner = msg.sender;\\n  }\\n\\n  function executeTrade(\\n    bool _startOnUniswap,\\n    address _token0,\\n    address _token1,\\n    uint256 _flashAmount\\n  ) external {\\n    bytes memory data = abi.encode(_startOnUniswap, _token0, _token1);\\n\\n    // Token to flash loan, by default we are flash loaning 1 token.\\n    IERC20[] memory tokens = new IERC20[](1);\\n    tokens[0] = IERC20(_token0);\\n\\n    // Flash loan amount.\\n    uint256[] memory amounts = new uint256[](1);\\n    amounts[0] = _flashAmount;\\n\\n    vault.flashLoan(this, tokens, amounts, data);\\n  }\\n\\n  function receiveFlashLoan(\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256[] memory feeAmounts,\\n    bytes memory userData\\n  ) external override {\\n    require(msg.sender == address(vault));\\n\\n    uint256 flashAmount = amounts[0];\\n\\n    (bool startOnUniswap, address token0, address token1) = abi.decode(\\n      userData,\\n      (bool, address, address)\\n    );\\n\\n    // Use the money here!\\n    address[] memory path = new address[](2);\\n\\n    path[0] = token0;\\n    path[1] = token1;\\n\\n    if (startOnUniswap) {\\n      _swapOnUniswap(path, flashAmount, 0);\\n\\n      path[0] = token1;\\n      path[1] = token0;\\n\\n      _swapOnSushiswap(\\n        path,\\n        IERC20(token1).balanceOf(address(this)),\\n        flashAmount\\n      );\\n    } else {\\n      _swapOnSushiswap(path, flashAmount, 0);\\n\\n      path[0] = token1;\\n      path[1] = token0;\\n\\n      _swapOnUniswap(\\n        path,\\n        IERC20(token1).balanceOf(address(this)),\\n        flashAmount\\n      );\\n    }\\n\\n    IERC20(token0).transfer(address(vault), flashAmount);\\n\\n    IERC20(token0).transfer(owner, IERC20(token0).balanceOf(address(this)));\\n  }\\n\\n  // -- INTERNAL FUNCTIONS -- //\\n\\n  function _swapOnUniswap(\\n    address[] memory _path,\\n    uint256 _amountIn,\\n    uint256 _amountOut\\n  ) internal {\\n    require(\\n      IERC20(_path[0]).approve(address(uRouter), _amountIn),\\n      \\\"Uniswap approval failed.\\\"\\n    );\\n\\n    uRouter.swapExactTokensForTokens(\\n      _amountIn,\\n      _amountOut,\\n      _path,\\n      address(this),\\n      (block.timestamp + 1200)\\n    );\\n  }\\n\\n  function _swapOnSushiswap(\\n    address[] memory _path,\\n    uint256 _amountIn,\\n    uint256 _amountOut\\n  ) internal {\\n    require(\\n      IERC20(_path[0]).approve(address(sRouter), _amountIn),\\n      \\\"Sushiswap approval failed.\\\"\\n    );\\n\\n    sRouter.swapExactTokensForTokens(\\n      _amountIn,\\n      _amountOut,\\n      _path,\\n      address(this),\\n      (block.timestamp + 1200)\\n    );\\n  }\\n}\\n\"},\"IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\n// Inspired by Aave Protocol\\u0027s IFlashLoanReceiver.\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface IFlashLoanRecipient {\\r\\n    /**\\r\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\r\\n     *\\r\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\r\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\r\\n     * Vault, or else the entire flash loan will revert.\\r\\n     *\\r\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\r\\n     */\\r\\n    function receiveFlashLoan(\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        uint256[] memory feeAmounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// import \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\r\\n// import \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\r\\n// import \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\r\\n// import \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\r\\n// import \\\"../solidity-utils/misc/IWETH.sol\\\";\\r\\n\\r\\n// import \\\"./IAsset.sol\\\";\\r\\n// import \\\"./IAuthorizer.sol\\\";\\r\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\r\\n// import \\\"./IProtocolFeesCollector.sol\\\";\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\n\\r\\ninterface IAuthentication {\\r\\n    /**\\r\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\r\\n     */\\r\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\r\\n */\\r\\ninterface ISignaturesValidator {\\r\\n    /**\\r\\n     * @dev Returns the EIP712 domain separator.\\r\\n     */\\r\\n    function getDomainSeparator() external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next nonce used by an address to sign messages.\\r\\n     */\\r\\n    function getNextNonce(address user) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface for the TemporarilyPausable helper.\\r\\n */\\r\\ninterface ITemporarilyPausable {\\r\\n    /**\\r\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\r\\n     */\\r\\n    event PausedStateChanged(bool paused);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current paused state.\\r\\n     */\\r\\n    function getPausedState()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool paused,\\r\\n            uint256 pauseWindowEndTime,\\r\\n            uint256 bufferPeriodEndTime\\r\\n        );\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface for WETH9.\\r\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\r\\n */\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\r\\n * address sentinel value). We\\u0027re just relying on the fact that `interface` can be used to declare new address-like\\r\\n * types.\\r\\n *\\r\\n * This concept is unrelated to a Pool\\u0027s Asset Managers.\\r\\n */\\r\\ninterface IAsset {\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n}\\r\\n\\r\\ninterface IAuthorizer {\\r\\n    /**\\r\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\r\\n     */\\r\\n    function canPerform(\\r\\n        bytes32 actionId,\\r\\n        address account,\\r\\n        address where\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IProtocolFeesCollector {\\r\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\r\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\r\\n\\r\\n    function withdrawCollectedFees(\\r\\n        IERC20[] calldata tokens,\\r\\n        uint256[] calldata amounts,\\r\\n        address recipient\\r\\n    ) external;\\r\\n\\r\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\r\\n\\r\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\r\\n\\r\\n    function getSwapFeePercentage() external view returns (uint256);\\r\\n\\r\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\r\\n\\r\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\r\\n\\r\\n    function getAuthorizer() external view returns (IAuthorizer);\\r\\n\\r\\n    function vault() external view returns (IVault);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\r\\n * don\\u0027t override one of these declarations.\\r\\n */\\r\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\r\\n    // Generalities about the Vault:\\r\\n    //\\r\\n    // - Whenever documentation refers to \\u0027tokens\\u0027, it strictly refers to ERC20-compliant token contracts. Tokens are\\r\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\r\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\r\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\r\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\r\\n    //\\r\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\r\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\r\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\r\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\r\\n    //\\r\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\r\\n\\r\\n    // Authorizer\\r\\n    //\\r\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\r\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\r\\n    // can perform a given action.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Vault\\u0027s Authorizer.\\r\\n     */\\r\\n    function getAuthorizer() external view returns (IAuthorizer);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\r\\n     *\\r\\n     * Emits an `AuthorizerChanged` event.\\r\\n     */\\r\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\r\\n     */\\r\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\r\\n\\r\\n    // Relayers\\r\\n    //\\r\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\r\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be \\u0027relayers\\u0027 for these Vault functions,\\r\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\r\\n    // this power, two things must occur:\\r\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\r\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\r\\n    //    functions.\\r\\n    //  - Each user must approve the relayer to act on their behalf.\\r\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\r\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\r\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\r\\n     */\\r\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\r\\n     *\\r\\n     * Emits a `RelayerApprovalChanged` event.\\r\\n     */\\r\\n    function setRelayerApproval(\\r\\n        address sender,\\r\\n        address relayer,\\r\\n        bool approved\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\r\\n     */\\r\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\r\\n\\r\\n    // Internal Balance\\r\\n    //\\r\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\r\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\r\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\r\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\r\\n    //\\r\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n    // operations of different kinds, with different senders and recipients, at once.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `user`\\u0027s Internal Balance for a set of tokens.\\r\\n     */\\r\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\r\\n     * and plain ERC20 transfers using the Vault\\u0027s allowance. This last feature is particularly useful for relayers, as\\r\\n     * it lets integrators reuse a user\\u0027s Vault allowance.\\r\\n     *\\r\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     */\\r\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\r\\n     without manual WETH wrapping or unwrapping.\\r\\n     */\\r\\n    struct UserBalanceOp {\\r\\n        UserBalanceOpKind kind;\\r\\n        IAsset asset;\\r\\n        uint256 amount;\\r\\n        address sender;\\r\\n        address payable recipient;\\r\\n    }\\r\\n\\r\\n    // There are four possible operations in `manageUserBalance`:\\r\\n    //\\r\\n    // - DEPOSIT_INTERNAL\\r\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\r\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\r\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\r\\n    // relevant for relayers).\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - WITHDRAW_INTERNAL\\r\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\r\\n    //\\r\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\r\\n    // it to the recipient as ETH.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_INTERNAL\\r\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `InternalBalanceChanged` event.\\r\\n    //\\r\\n    //\\r\\n    // - TRANSFER_EXTERNAL\\r\\n    // Transfers tokens from `sender` to `recipient`, using the Vault\\u0027s ERC20 allowance. This is typically used by\\r\\n    // relayers, as it lets them reuse a user\\u0027s Vault allowance.\\r\\n    //\\r\\n    // Reverts if the ETH sentinel value is passed.\\r\\n    //\\r\\n    // Emits an `ExternalBalanceTransfer` event.\\r\\n\\r\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a user\\u0027s Internal Balance changes, either from calls to `manageUserBalance`, or through\\r\\n     * interacting with Pools using Internal Balance.\\r\\n     *\\r\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\r\\n     * address.\\r\\n     */\\r\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a user\\u0027s Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\r\\n     */\\r\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\r\\n\\r\\n    // Pools\\r\\n    //\\r\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\r\\n    // functionality:\\r\\n    //\\r\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\r\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\r\\n    // which increase with the number of registered tokens.\\r\\n    //\\r\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\r\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\r\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\r\\n    // independent of the number of registered tokens.\\r\\n    //\\r\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\r\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\r\\n\\r\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool\\u0027s ID, which\\r\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool\\u0027s specialization be\\r\\n     * changed.\\r\\n     *\\r\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\r\\n     * depending on the chosen specialization setting. This contract is known as the Pool\\u0027s contract.\\r\\n     *\\r\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\r\\n     * multiple Pools may share the same contract.\\r\\n     *\\r\\n     * Emits a `PoolRegistered` event.\\r\\n     */\\r\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\r\\n     */\\r\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool\\u0027s contract address and specialization setting.\\r\\n     */\\r\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\r\\n\\r\\n    /**\\r\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool\\u0027s contract.\\r\\n     *\\r\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\r\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\r\\n     *\\r\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\r\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\r\\n     * ascending order.\\r\\n     *\\r\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\r\\n     * Manager for the corresponding token. Asset Managers can manage a Pool\\u0027s tokens via `managePoolBalance`,\\r\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\r\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\r\\n     * Asset Manager should not be made lightly.\\r\\n     *\\r\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\r\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\r\\n     * different Asset Manager.\\r\\n     *\\r\\n     * Emits a `TokensRegistered` event.\\r\\n     */\\r\\n    function registerTokens(\\r\\n        bytes32 poolId,\\r\\n        IERC20[] memory tokens,\\r\\n        address[] memory assetManagers\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\r\\n     */\\r\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\r\\n\\r\\n    /**\\r\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool\\u0027s contract.\\r\\n     *\\r\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\r\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\r\\n     * must be deregistered in the same `deregisterTokens` call.\\r\\n     *\\r\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\r\\n     *\\r\\n     * Emits a `TokensDeregistered` event.\\r\\n     */\\r\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\r\\n     */\\r\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns detailed information for a Pool\\u0027s registered token.\\r\\n     *\\r\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\r\\n     * withdrawn and held outside the Vault by the Pool\\u0027s token Asset Manager. The Pool\\u0027s total balance for `token`\\r\\n     * equals the sum of `cash` and `managed`.\\r\\n     *\\r\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool\\u0027s token `cash`,\\r\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\r\\n     *\\r\\n     * `lastChangeBlock` is the number of the block in which `token`\\u0027s total balance was last modified (via either a\\r\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called \\u0027sandwich attacks\\u0027, for\\r\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\r\\n     * change for this purpose, and will update `lastChangeBlock`.\\r\\n     *\\r\\n     * `assetManager` is the Pool\\u0027s token Asset Manager.\\r\\n     */\\r\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 cash,\\r\\n            uint256 managed,\\r\\n            uint256 lastChangeBlock,\\r\\n            address assetManager\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a Pool\\u0027s registered tokens, the total balance for each, and the latest block when *any* of\\r\\n     * the tokens\\u0027 `balances` changed.\\r\\n     *\\r\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\r\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\r\\n     *\\r\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\r\\n     * order as passed to `registerTokens`.\\r\\n     *\\r\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool\\u0027s Asset Managers. These are\\r\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\r\\n     * instead.\\r\\n     */\\r\\n    function getPoolTokens(bytes32 poolId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IERC20[] memory tokens,\\r\\n            uint256[] memory balances,\\r\\n            uint256 lastChangeBlock\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool\\u0027s balance. This will\\r\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\r\\n     * Pool shares.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\r\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\r\\n     * these maximums.\\r\\n     *\\r\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\r\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\r\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\r\\n     * back to the caller (not the sender, which is important for relayers).\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\r\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\r\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the caller\\u0027s Internal Balance will be preferred: ERC20 transfers will only\\r\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\r\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool\\u0027s contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\r\\n     * directly to the Pool\\u0027s contract, as is `recipient`.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function joinPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        JoinPoolRequest memory request\\r\\n    ) external payable;\\r\\n\\r\\n    struct JoinPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] maxAmountsIn;\\r\\n        bytes userData;\\r\\n        bool fromInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool\\u0027s balance to `recipient`. This will\\r\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\r\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool\\u0027s `cash` balance (see\\r\\n     * `getPoolTokenInfo`).\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\r\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\r\\n     * it just enforces these minimums.\\r\\n     *\\r\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\r\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\r\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\r\\n     *\\r\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\r\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\r\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\r\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`\\u0027s Internal Balance. Otherwise,\\r\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\r\\n     * do so will trigger a revert.\\r\\n     *\\r\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\r\\n     * `tokens` array. This array must match the Pool\\u0027s registered tokens.\\r\\n     *\\r\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool\\u0027s contract, where Pools implement\\r\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\r\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\r\\n     * passed directly to the Pool\\u0027s contract.\\r\\n     *\\r\\n     * Emits a `PoolBalanceChanged` event.\\r\\n     */\\r\\n    function exitPool(\\r\\n        bytes32 poolId,\\r\\n        address sender,\\r\\n        address payable recipient,\\r\\n        ExitPoolRequest memory request\\r\\n    ) external;\\r\\n\\r\\n    struct ExitPoolRequest {\\r\\n        IAsset[] assets;\\r\\n        uint256[] minAmountsOut;\\r\\n        bytes userData;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\r\\n     */\\r\\n    event PoolBalanceChanged(\\r\\n        bytes32 indexed poolId,\\r\\n        address indexed liquidityProvider,\\r\\n        IERC20[] tokens,\\r\\n        int256[] deltas,\\r\\n        uint256[] protocolFeeAmounts\\r\\n    );\\r\\n\\r\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\r\\n\\r\\n    // Swaps\\r\\n    //\\r\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\r\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\r\\n    // aware of the Pools\\u0027 pricing algorithms in order to estimate the prices Pools will quote.\\r\\n    //\\r\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\r\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the \\u0027token in\\u0027),\\r\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the \\u0027token out\\u0027).\\r\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\r\\n    // individual swaps.\\r\\n    //\\r\\n    // There are two swap kinds:\\r\\n    //  - \\u0027given in\\u0027 swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\r\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\r\\n    //  - \\u0027given out\\u0027 swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\r\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\r\\n    //\\r\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\r\\n    // the calculated output of the previous swap. If the previous swap was \\u0027given in\\u0027, this will be the calculated\\r\\n    // tokenOut amount. If the previous swap was \\u0027given out\\u0027, it will use the calculated tokenIn amount. These extended\\r\\n    // swaps are known as \\u0027multihop\\u0027 swaps, since they \\u0027hop\\u0027 through a number of intermediate tokens before arriving at\\r\\n    // the final intended token.\\r\\n    //\\r\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\r\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\r\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\r\\n    // much less gas than they would otherwise.\\r\\n    //\\r\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\r\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\r\\n    // updating the Pool\\u0027s internal accounting).\\r\\n    //\\r\\n    // To protect users from front-running or the market changing rapidly, they supply a list of \\u0027limits\\u0027 for each token\\r\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\r\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\r\\n    //\\r\\n    // Additionally, a \\u0027deadline\\u0027 timestamp can also be provided, forcing the swap to fail if it occurs after\\r\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\r\\n    //\\r\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\r\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\r\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\r\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\r\\n    //\\r\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\r\\n\\r\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a swap with a single Pool.\\r\\n     *\\r\\n     * If the swap is \\u0027given in\\u0027 (the number of tokens to send to the Pool is known), it returns the amount of tokens\\r\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\r\\n     *\\r\\n     * If the swap is \\u0027given out\\u0027 (the number of tokens to take from the Pool is known), it returns the amount of tokens\\r\\n     * sent to the Pool, which must be less than or equal to `limit`.\\r\\n     *\\r\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\r\\n     *\\r\\n     * Emits a `Swap` event.\\r\\n     */\\r\\n    function swap(\\r\\n        SingleSwap memory singleSwap,\\r\\n        FundManagement memory funds,\\r\\n        uint256 limit,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\r\\n     * the `kind` value.\\r\\n     *\\r\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\r\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct SingleSwap {\\r\\n        bytes32 poolId;\\r\\n        SwapKind kind;\\r\\n        IAsset assetIn;\\r\\n        IAsset assetOut;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\r\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\r\\n     *\\r\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\r\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\r\\n     * the same index in the `assets` array.\\r\\n     *\\r\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\r\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\r\\n     * `amountOut` depending on the swap kind.\\r\\n     *\\r\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\r\\n     * of the previous swap to be used as the amount in for the current one. In a \\u0027given in\\u0027 swap, \\u0027tokenIn\\u0027 must equal\\r\\n     * the previous swap\\u0027s `tokenOut`. For a \\u0027given out\\u0027 swap, `tokenOut` must equal the previous swap\\u0027s `tokenIn`.\\r\\n     *\\r\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\r\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\r\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\r\\n     * or unwrapped from WETH by the Vault.\\r\\n     *\\r\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\r\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\r\\n     *\\r\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\r\\n     * equivalent `swap` call.\\r\\n     *\\r\\n     * Emits `Swap` events.\\r\\n     */\\r\\n    function batchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds,\\r\\n        int256[] memory limits,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (int256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\r\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\r\\n     *\\r\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\r\\n     * from the previous swap, depending on the swap kind.\\r\\n     *\\r\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\r\\n     * used to extend swap behavior.\\r\\n     */\\r\\n    struct BatchSwapStep {\\r\\n        bytes32 poolId;\\r\\n        uint256 assetInIndex;\\r\\n        uint256 assetOutIndex;\\r\\n        uint256 amount;\\r\\n        bytes userData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\r\\n     */\\r\\n    event Swap(\\r\\n        bytes32 indexed poolId,\\r\\n        IERC20 indexed tokenIn,\\r\\n        IERC20 indexed tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\r\\n     * `recipient` account.\\r\\n     *\\r\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\r\\n     *\\r\\n     * If `fromInternalBalance` is true, the `sender`\\u0027s Internal Balance will be preferred, performing an ERC20\\r\\n     * transfer for the difference between the requested amount and the User\\u0027s Internal Balance (if any). The `sender`\\r\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\r\\n     * `joinPool`.\\r\\n     *\\r\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`\\u0027s internal balance instead of\\r\\n     * transferred. This matches the behavior of `exitPool`.\\r\\n     *\\r\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\r\\n     * revert.\\r\\n     */\\r\\n    struct FundManagement {\\r\\n        address sender;\\r\\n        bool fromInternalBalance;\\r\\n        address payable recipient;\\r\\n        bool toInternalBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\r\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\r\\n     *\\r\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\r\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\r\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\r\\n     *\\r\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\r\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\r\\n     * approve them for the Vault, or even know a user\\u0027s address.\\r\\n     *\\r\\n     * Note that this function is not \\u0027view\\u0027 (due to implementation details): the client code must explicitly execute\\r\\n     * eth_call instead of eth_sendTransaction.\\r\\n     */\\r\\n    function queryBatchSwap(\\r\\n        SwapKind kind,\\r\\n        BatchSwapStep[] memory swaps,\\r\\n        IAsset[] memory assets,\\r\\n        FundManagement memory funds\\r\\n    ) external returns (int256[] memory assetDeltas);\\r\\n\\r\\n    // Flash Loans\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a \\u0027flash loan\\u0027, sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\r\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\r\\n     *\\r\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\r\\n     * for each token contract. `tokens` must be sorted in ascending order.\\r\\n     *\\r\\n     * The \\u0027userData\\u0027 field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\r\\n     * `receiveFlashLoan` call.\\r\\n     *\\r\\n     * Emits `FlashLoan` events.\\r\\n     */\\r\\n    function flashLoan(\\r\\n        IFlashLoanRecipient recipient,\\r\\n        IERC20[] memory tokens,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory userData\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\r\\n     */\\r\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\r\\n\\r\\n    // Asset Management\\r\\n    //\\r\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool\\u0027s\\r\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\r\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\r\\n    // controls one of the tokens in a Pool, a malicious manager could set that token\\u0027s balance to manipulate the\\r\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\r\\n    // not constrained to the tokens they are managing, but extends to the entire Pool\\u0027s holdings.\\r\\n    //\\r\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool\\u0027s benefit,\\r\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\r\\n    //\\r\\n    // This concept is unrelated to the IAsset interface.\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\r\\n     *\\r\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\r\\n     * operations of different kinds, with different Pools and tokens, at once.\\r\\n     *\\r\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\r\\n     */\\r\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\r\\n\\r\\n    struct PoolBalanceOp {\\r\\n        PoolBalanceOpKind kind;\\r\\n        bytes32 poolId;\\r\\n        IERC20 token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdrawals decrease the Pool\\u0027s cash, but increase its managed balance, leaving the total balance unchanged.\\r\\n     *\\r\\n     * Deposits increase the Pool\\u0027s cash, but decrease its managed balance, leaving the total balance unchanged.\\r\\n     *\\r\\n     * Updates don\\u0027t affect the Pool\\u0027s cash balance, but because the managed balance changes, it does alter the total.\\r\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\r\\n     */\\r\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a Pool\\u0027s token Asset Manager alters its balance via `managePoolBalance`.\\r\\n     */\\r\\n    event PoolBalanceManaged(\\r\\n        bytes32 indexed poolId,\\r\\n        address indexed assetManager,\\r\\n        IERC20 indexed token,\\r\\n        int256 cashDelta,\\r\\n        int256 managedDelta\\r\\n    );\\r\\n\\r\\n    // Protocol Fees\\r\\n    //\\r\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\r\\n    // permissioned accounts.\\r\\n    //\\r\\n    // There are two kinds of protocol fees:\\r\\n    //\\r\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\r\\n    //\\r\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\r\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\r\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\r\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\r\\n    // exiting a Pool in debt without first paying their share.\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current protocol fee module.\\r\\n     */\\r\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\r\\n\\r\\n    /**\\r\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\r\\n     * error in some part of the system.\\r\\n     *\\r\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\r\\n     *\\r\\n     * While the contract is paused, the following features are disabled:\\r\\n     * - depositing and transferring internal balance\\r\\n     * - transferring external balance (using the Vault\\u0027s allowance)\\r\\n     * - swaps\\r\\n     * - joining Pools\\r\\n     * - Asset Manager interactions\\r\\n     *\\r\\n     * Internal Balance can still be withdrawn, and Pools exited.\\r\\n     */\\r\\n    function setPaused(bool paused) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Vault\\u0027s WETH instance.\\r\\n     */\\r\\n    function WETH() external view returns (IWETH);\\r\\n    // solhint-disable-previous-line func-name-mixedcase\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_startOnUniswap\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flashAmount\",\"type\":\"uint256\"}],\"name\":\"executeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Arbitrage", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://51514cc732068c23c0e550d684b502fb13f926e4887994c8dd0c84fabdb36eda"}