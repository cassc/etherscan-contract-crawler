{"SourceCode": "// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Muldiv operation overflow.\r\n     */\r\n    error MathOverflowedMulDiv();\r\n\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            return a / b;\r\n        }\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                revert MathOverflowedMulDiv();\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\r\n\r\n//\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n//\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n//\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n//\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n//\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC721.sol\r\n\r\n//\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Simple ERC721 implementation with storage hitchhiking.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\r\n///\r\n/// @dev Note:\r\n/// The ERC721 standard allows for self-approvals.\r\n/// For performance, this implementation WILL NOT revert for such actions.\r\n/// Please add any checks with overrides if desired.\r\nabstract contract ERC721 {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev An account can hold up to 4294967295 tokens.\r\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Only the token owner or an approved account can manage the token.\r\n    error NotOwnerNorApproved();\r\n\r\n    /// @dev The token does not exist.\r\n    error TokenDoesNotExist();\r\n\r\n    /// @dev The token already exists.\r\n    error TokenAlreadyExists();\r\n\r\n    /// @dev Cannot query the balance for the zero address.\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /// @dev Cannot mint or transfer to the zero address.\r\n    error TransferToZeroAddress();\r\n\r\n    /// @dev The token must be owned by `from`.\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /// @dev The recipient's balance has overflowed.\r\n    error AccountBalanceOverflow();\r\n\r\n    /// @dev Cannot safely transfer to a contract that does not implement\r\n    /// the ERC721Receiver interface.\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\r\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\r\n\r\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\r\n\r\n    /// @dev `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\r\n    0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    /// @dev `keccak256(bytes(\"Approval(address,address,uint256)\"))`.\r\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\r\n    0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\r\n\r\n    /// @dev `keccak256(bytes(\"ApprovalForAll(address,address,bool)\"))`.\r\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\r\n    0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The ownership data slot of `id` is given by:\r\n    /// ```\r\n    ///     mstore(0x00, id)\r\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n    /// ```\r\n    /// Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `extraData`\r\n    ///\r\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\r\n    ///\r\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\r\n    ///\r\n    /// The balance slot of `owner` is given by:\r\n    /// ```\r\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n    ///     mstore(0x00, owner)\r\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\r\n    /// ```\r\n    /// Bits Layout:\r\n    /// - [0..31]   `balance`\r\n    /// - [32..225] `aux`\r\n    ///\r\n    /// The `operator` approval slot of `owner` is given by:\r\n    /// ```\r\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\r\n    ///     mstore(0x00, owner)\r\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\r\n    /// ```\r\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\r\n\r\n    /// @dev Pre-shifted and pre-masked constant.\r\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                      ERC721 METADATA                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the token collection name.\r\n    function name() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the token collection symbol.\r\n    function symbol() public view virtual returns (string memory);\r\n\r\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           ERC721                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the owner of token `id`.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function ownerOf(uint256 id) public view virtual returns (address result) {\r\n        result = _ownerOf(id);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(result) {\r\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the number of tokens owned by `owner`.\r\n    ///\r\n    /// Requirements:\r\n    /// - `owner` must not be the zero address.\r\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Revert if the `owner` is the zero address.\r\n            if iszero(owner) {\r\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the account approved to managed token `id`.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function getApproved(uint256 id) public view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, id)\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n            if iszero(shr(96, shl(96, sload(ownershipSlot)))) {\r\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            result := sload(add(1, ownershipSlot))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets `account` as the approved account to manage token `id`.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    /// - The caller must be the owner of the token,\r\n    ///   or an approved operator for the token owner.\r\n    ///\r\n    /// Emits a {Approval} event.\r\n    function approve(address account, uint256 id) public payable virtual {\r\n        _approve(msg.sender, account, id);\r\n    }\r\n\r\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\r\n    function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    returns (bool result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x1c, operator)\r\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\r\n            mstore(0x00, owner)\r\n            result := sload(keccak256(0x0c, 0x30))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\r\n    ///\r\n    /// Emits a {ApprovalForAll} event.\r\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Convert to 0 or 1.\r\n            isApproved := iszero(iszero(isApproved))\r\n        // Update the `isApproved` for (`msg.sender`, `operator`).\r\n            mstore(0x1c, operator)\r\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\r\n            mstore(0x00, caller())\r\n            sstore(keccak256(0x0c, 0x30), isApproved)\r\n        // Emit the {ApprovalForAll} event.\r\n            mstore(0x00, isApproved)\r\n            log3(\r\n            0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator))\r\n            )\r\n        }\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - The caller must be the owner of the token, or be approved to manage the token.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\r\n        _beforeTokenTransfer(from, to, id);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Clear the upper 96 bits.\r\n            let bitmaskAddress := shr(96, not(0))\r\n            from := and(bitmaskAddress, from)\r\n            to := and(bitmaskAddress, to)\r\n        // Load the ownership data.\r\n            mstore(0x00, id)\r\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\r\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n            let ownershipPacked := sload(ownershipSlot)\r\n            let owner := and(bitmaskAddress, ownershipPacked)\r\n        // Revert if `from` is not the owner, or does not exist.\r\n            if iszero(mul(owner, eq(owner, from))) {\r\n                if iszero(owner) {\r\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // Revert if `to` is the zero address.\r\n            if iszero(to) {\r\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // Load, check, and update the token approval.\r\n            {\r\n                mstore(0x00, from)\r\n                let approvedAddress := sload(add(1, ownershipSlot))\r\n            // Revert if the caller is not the owner, nor approved.\r\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\r\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\r\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\r\n                        revert(0x1c, 0x04)\r\n                    }\r\n                }\r\n            // Delete the approved address if any.\r\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\r\n            }\r\n        // Update with the new owner.\r\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\r\n        // Decrement the balance of `from`.\r\n            {\r\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\r\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\r\n            }\r\n        // Increment the balance of `to`.\r\n            {\r\n                mstore(0x00, to)\r\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\r\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\r\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\r\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                sstore(toBalanceSlot, toBalanceSlotPacked)\r\n            }\r\n        // Emit the {Transfer} event.\r\n            log4(0x00, 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\r\n        }\r\n        _afterTokenTransfer(from, to, id);\r\n    }\r\n\r\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \"\")`.\r\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\r\n        transferFrom(from, to, id);\r\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \"\");\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - The caller must be the owner of the token, or be approved to manage the token.\r\n    /// - If `to` refers to a smart contract, it must implement\r\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\r\n    public\r\n    payable\r\n    virtual\r\n    {\r\n        transferFrom(from, to, id);\r\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\r\n    }\r\n\r\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-165\r\n    /// This function call must use less than 30000 gas.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let s := shr(224, interfaceId)\r\n        // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\r\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  INTERNAL QUERY FUNCTIONS                  */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns if token `id` exists.\r\n    function _exists(uint256 id) internal view virtual returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, id)\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            result := shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the owner of token `id`.\r\n    /// Returns the zero address instead of reverting if the token does not exist.\r\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, id)\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the auxiliary data for `owner`.\r\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\r\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\r\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\r\n        }\r\n    }\r\n\r\n    /// @dev Set the auxiliary data for `owner` to `value`.\r\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\r\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\r\n    function _setAux(address owner, uint224 value) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            mstore(0x00, owner)\r\n            let balanceSlot := keccak256(0x0c, 0x1c)\r\n            let packed := sload(balanceSlot)\r\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the extra data for token `id`.\r\n    /// Minting, transferring, burning a token will not change the extra data.\r\n    /// The extra data can be set on a non-existent token.\r\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, id)\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the extra data for token `id` to `value`.\r\n    /// Minting, transferring, burning a token will not change the extra data.\r\n    /// The extra data can be set on a non-existent token.\r\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, id)\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n            let packed := sload(ownershipSlot)\r\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  INTERNAL MINT FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Mints token `id` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must not exist.\r\n    /// - `to` cannot be the zero address.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _mint(address to, uint256 id) internal virtual {\r\n        _beforeTokenTransfer(address(0), to, id);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Clear the upper 96 bits.\r\n            to := shr(96, shl(96, to))\r\n        // Revert if `to` is the zero address.\r\n            if iszero(to) {\r\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // Load the ownership data.\r\n            mstore(0x00, id)\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n            let ownershipPacked := sload(ownershipSlot)\r\n        // Revert if the token already exists.\r\n            if shl(96, ownershipPacked) {\r\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // Update with the owner.\r\n            sstore(ownershipSlot, or(ownershipPacked, to))\r\n        // Increment the balance of the owner.\r\n            {\r\n                mstore(0x00, to)\r\n                let balanceSlot := keccak256(0x0c, 0x1c)\r\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\r\n                if iszero(and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\r\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                sstore(balanceSlot, balanceSlotPacked)\r\n            }\r\n        // Emit the {Transfer} event.\r\n            log4(0x00, 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\r\n        }\r\n        _afterTokenTransfer(address(0), to, id);\r\n    }\r\n\r\n    /// @dev Equivalent to `_safeMint(to, id, \"\")`.\r\n    function _safeMint(address to, uint256 id) internal virtual {\r\n        _safeMint(to, id, \"\");\r\n    }\r\n\r\n    /// @dev Mints token `id` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must not exist.\r\n    /// - `to` cannot be the zero address.\r\n    /// - If `to` refers to a smart contract, it must implement\r\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\r\n        _mint(to, id);\r\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  INTERNAL BURN FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Equivalent to `_burn(address(0), id)`.\r\n    function _burn(uint256 id) internal virtual {\r\n        _burn(address(0), id);\r\n    }\r\n\r\n    /// @dev Destroys token `id`, using `by`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - If `by` is not the zero address,\r\n    ///   it must be the owner of the token, or be approved to manage the token.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _burn(address by, uint256 id) internal virtual {\r\n        address owner = ownerOf(id);\r\n        _beforeTokenTransfer(owner, address(0), id);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Clear the upper 96 bits.\r\n            by := shr(96, shl(96, by))\r\n        // Load the ownership data.\r\n            mstore(0x00, id)\r\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\r\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n            let ownershipPacked := sload(ownershipSlot)\r\n        // Reload the owner in case it is changed in `_beforeTokenTransfer`.\r\n            owner := shr(96, shl(96, ownershipPacked))\r\n        // Revert if the token does not exist.\r\n            if iszero(owner) {\r\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // Load and check the token approval.\r\n            {\r\n                mstore(0x00, owner)\r\n                let approvedAddress := sload(add(1, ownershipSlot))\r\n            // If `by` is not the zero address, do the authorization check.\r\n            // Revert if the `by` is not the owner, nor approved.\r\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\r\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\r\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\r\n                        revert(0x1c, 0x04)\r\n                    }\r\n                }\r\n            // Delete the approved address if any.\r\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\r\n            }\r\n        // Clear the owner.\r\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\r\n        // Decrement the balance of `owner`.\r\n            {\r\n                let balanceSlot := keccak256(0x0c, 0x1c)\r\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\r\n            }\r\n        // Emit the {Transfer} event.\r\n            log4(0x00, 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\r\n        }\r\n        _afterTokenTransfer(owner, address(0), id);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to managed it.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    function _isApprovedOrOwner(address account, uint256 id)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (bool result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := 1\r\n        // Clear the upper 96 bits.\r\n            account := shr(96, shl(96, account))\r\n        // Load the ownership data.\r\n            mstore(0x00, id)\r\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\r\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\r\n        // Revert if the token does not exist.\r\n            if iszero(owner) {\r\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // Check if `account` is the `owner`.\r\n            if iszero(eq(account, owner)) {\r\n                mstore(0x00, owner)\r\n            // Check if `account` is approved to\r\n                if iszero(sload(keccak256(0x0c, 0x30))) {\r\n                    result := eq(account, sload(add(1, ownershipSlot)))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the account approved to manage token `id`.\r\n    /// Returns the zero address instead of reverting if the token does not exist.\r\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, id)\r\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\r\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\r\n    function _approve(address account, uint256 id) internal virtual {\r\n        _approve(address(0), account, id);\r\n    }\r\n\r\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\r\n    ///\r\n    /// Requirements:\r\n    /// - Token `id` must exist.\r\n    /// - If `by` is not the zero address, `by` must be the owner\r\n    ///   or an approved operator for the token owner.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _approve(address by, address account, uint256 id) internal virtual {\r\n        assembly {\r\n        // Clear the upper 96 bits.\r\n            let bitmaskAddress := shr(96, not(0))\r\n            account := and(bitmaskAddress, account)\r\n            by := and(bitmaskAddress, by)\r\n        // Load the owner of the token.\r\n            mstore(0x00, id)\r\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\r\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\r\n        // Revert if the token does not exist.\r\n            if iszero(owner) {\r\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // If `by` is not the zero address, do the authorization check.\r\n        // Revert if `by` is not the owner, nor approved.\r\n            if iszero(or(iszero(by), eq(by, owner))) {\r\n                mstore(0x00, owner)\r\n                if iszero(sload(keccak256(0x0c, 0x30))) {\r\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n            }\r\n        // Sets `account` as the approved account to manage `id`.\r\n            sstore(add(1, ownershipSlot), account)\r\n        // Emit the {Approval} event.\r\n            log4(0x00, 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\r\n        }\r\n    }\r\n\r\n    /// @dev Approve or remove the `operator` as an operator for `by`,\r\n    /// without authorization checks.\r\n    ///\r\n    /// Emits a {ApprovalForAll} event.\r\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Clear the upper 96 bits.\r\n            by := shr(96, shl(96, by))\r\n            operator := shr(96, shl(96, operator))\r\n        // Convert to 0 or 1.\r\n            isApproved := iszero(iszero(isApproved))\r\n        // Update the `isApproved` for (`by`, `operator`).\r\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\r\n            mstore(0x00, by)\r\n            sstore(keccak256(0x0c, 0x30), isApproved)\r\n        // Emit the {ApprovalForAll} event.\r\n            mstore(0x00, isApproved)\r\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\r\n    function _transfer(address from, address to, uint256 id) internal virtual {\r\n        _transfer(address(0), from, to, id);\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - If `by` is not the zero address,\r\n    ///   it must be the owner of the token, or be approved to manage the token.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\r\n        _beforeTokenTransfer(from, to, id);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Clear the upper 96 bits.\r\n            let bitmaskAddress := shr(96, not(0))\r\n            from := and(bitmaskAddress, from)\r\n            to := and(bitmaskAddress, to)\r\n            by := and(bitmaskAddress, by)\r\n        // Load the ownership data.\r\n            mstore(0x00, id)\r\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\r\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\r\n            let ownershipPacked := sload(ownershipSlot)\r\n            let owner := and(bitmaskAddress, ownershipPacked)\r\n        // Revert if `from` is not the owner, or does not exist.\r\n            if iszero(mul(owner, eq(owner, from))) {\r\n                if iszero(owner) {\r\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // Revert if `to` is the zero address.\r\n            if iszero(to) {\r\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        // Load, check, and update the token approval.\r\n            {\r\n                mstore(0x00, from)\r\n                let approvedAddress := sload(add(1, ownershipSlot))\r\n            // If `by` is not the zero address, do the authorization check.\r\n            // Revert if the `by` is not the owner, nor approved.\r\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\r\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\r\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\r\n                        revert(0x1c, 0x04)\r\n                    }\r\n                }\r\n            // Delete the approved address if any.\r\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\r\n            }\r\n        // Update with the new owner.\r\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\r\n        // Decrement the balance of `from`.\r\n            {\r\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\r\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\r\n            }\r\n        // Increment the balance of `to`.\r\n            {\r\n                mstore(0x00, to)\r\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\r\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\r\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\r\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n                sstore(toBalanceSlot, toBalanceSlotPacked)\r\n            }\r\n        // Emit the {Transfer} event.\r\n            log4(0x00, 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\r\n        }\r\n        _afterTokenTransfer(from, to, id);\r\n    }\r\n\r\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \"\")`.\r\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\r\n        _safeTransfer(from, to, id, \"\");\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - The caller must be the owner of the token, or be approved to manage the token.\r\n    /// - If `to` refers to a smart contract, it must implement\r\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\r\n    internal\r\n    virtual\r\n    {\r\n        _transfer(address(0), from, to, id);\r\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\r\n    }\r\n\r\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \"\")`.\r\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\r\n        _safeTransfer(by, from, to, id, \"\");\r\n    }\r\n\r\n    /// @dev Transfers token `id` from `from` to `to`.\r\n    ///\r\n    /// Requirements:\r\n    ///\r\n    /// - Token `id` must exist.\r\n    /// - `from` must be the owner of the token.\r\n    /// - `to` cannot be the zero address.\r\n    /// - If `by` is not the zero address,\r\n    ///   it must be the owner of the token, or be approved to manage the token.\r\n    /// - If `to` refers to a smart contract, it must implement\r\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n    ///\r\n    /// Emits a {Transfer} event.\r\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\r\n    internal\r\n    virtual\r\n    {\r\n        _transfer(by, from, to, id);\r\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                    HOOKS FOR OVERRIDING                    */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Hook that is called before any token transfers, including minting and burning.\r\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\r\n\r\n    /// @dev Hook that is called after any token transfers, including minting and burning.\r\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                      PRIVATE HELPERS                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns if `a` has bytecode of non-zero length.\r\n    function _hasCode(address a) private view returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := extcodesize(a) // Can handle dirty upper bits.\r\n        }\r\n    }\r\n\r\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\r\n    /// Reverts if the target does not support the function correctly.\r\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\r\n    private\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Prepare the calldata.\r\n            let m := mload(0x40)\r\n            let onERC721ReceivedSelector := 0x150b7a02\r\n            mstore(m, onERC721ReceivedSelector)\r\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\r\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\r\n            mstore(add(m, 0x60), id)\r\n            mstore(add(m, 0x80), 0x80)\r\n            let n := mload(data)\r\n            mstore(add(m, 0xa0), n)\r\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\r\n        // Revert if the call reverts.\r\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\r\n                if returndatasize() {\r\n                // Bubble up the revert if the call reverts.\r\n                    returndatacopy(0x00, 0x00, returndatasize())\r\n                    revert(0x00, returndatasize())\r\n                }\r\n                mstore(m, 0)\r\n            }\r\n        // Load the returndata and compare it.\r\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\r\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/LibPRNG.sol\r\n\r\n//\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Library for generating psuedorandom numbers.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibPRNG.sol)\r\nlibrary LibPRNG {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STRUCTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev A psuedorandom number state in memory.\r\n    struct PRNG {\r\n        uint256 state;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         OPERATIONS                         */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Seeds the `prng` with `state`.\r\n    function seed(PRNG memory prng, uint256 state) internal pure {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(prng, state)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the next psuedorandom uint256.\r\n    /// All bits of the returned uint256 pass the NIST Statistical Test Suite.\r\n    function next(PRNG memory prng) internal pure returns (uint256 result) {\r\n        // We simply use `keccak256` for a great balance between\r\n        // runtime gas costs, bytecode size, and statistical properties.\r\n        //\r\n        // A high-quality LCG with a 32-byte state\r\n        // is only about 30% more gas efficient during runtime,\r\n        // but requires a 32-byte multiplier, which can cause bytecode bloat\r\n        // when this function is inlined.\r\n        //\r\n        // Using this method is about 2x more efficient than\r\n        // `nextRandomness = uint256(keccak256(abi.encode(randomness)))`.\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := keccak256(prng, 0x20)\r\n            mstore(prng, result)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a psuedorandom uint256, uniformly distributed\r\n    /// between 0 (inclusive) and `upper` (exclusive).\r\n    /// If your modulus is big, this method is recommended\r\n    /// for uniform sampling to avoid modulo bias.\r\n    /// For uniform sampling across all uint256 values,\r\n    /// or for small enough moduli such that the bias is neligible,\r\n    /// use {next} instead.\r\n    function uniform(PRNG memory prng, uint256 upper) internal pure returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for {} 1 {} {\r\n                result := keccak256(prng, 0x20)\r\n                mstore(prng, result)\r\n                if iszero(lt(result, mod(sub(0, upper), upper))) { break }\r\n            }\r\n            result := mod(result, upper)\r\n        }\r\n    }\r\n\r\n    /// @dev Shuffles the array in-place with Fisher-Yates shuffle.\r\n    function shuffle(PRNG memory prng, uint256[] memory a) internal pure {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let n := mload(a)\r\n            let w := not(0)\r\n            let mask := shr(128, w)\r\n            if n {\r\n                for { a := add(a, 0x20) } 1 {} {\r\n                // We can just directly use `keccak256`, cuz\r\n                // the other approaches don't save much.\r\n                    let r := keccak256(prng, 0x20)\r\n                    mstore(prng, r)\r\n\r\n                // Note that there will be a very tiny modulo bias\r\n                // if the length of the array is not a power of 2.\r\n                // For all practical purposes, it is negligible\r\n                // and will not be a fairness or security concern.\r\n                    {\r\n                        let j := add(a, shl(5, mod(shr(128, r), n)))\r\n                        n := add(n, w) // `sub(n, 1)`.\r\n                        if iszero(n) { break }\r\n\r\n                        let i := add(a, shl(5, n))\r\n                        let t := mload(i)\r\n                        mstore(i, mload(j))\r\n                        mstore(j, t)\r\n                    }\r\n\r\n                    {\r\n                        let j := add(a, shl(5, mod(and(r, mask), n)))\r\n                        n := add(n, w) // `sub(n, 1)`.\r\n                        if iszero(n) { break }\r\n\r\n                        let i := add(a, shl(5, n))\r\n                        let t := mload(i)\r\n                        mstore(i, mload(j))\r\n                        mstore(j, t)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Shuffles the bytes in-place with Fisher-Yates shuffle.\r\n    function shuffle(PRNG memory prng, bytes memory a) internal pure {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let n := mload(a)\r\n            let w := not(0)\r\n            let mask := shr(128, w)\r\n            if n {\r\n                let b := add(a, 0x01)\r\n                for { a := add(a, 0x20) } 1 {} {\r\n                // We can just directly use `keccak256`, cuz\r\n                // the other approaches don't save much.\r\n                    let r := keccak256(prng, 0x20)\r\n                    mstore(prng, r)\r\n\r\n                // Note that there will be a very tiny modulo bias\r\n                // if the length of the array is not a power of 2.\r\n                // For all practical purposes, it is negligible\r\n                // and will not be a fairness or security concern.\r\n                    {\r\n                        let o := mod(shr(128, r), n)\r\n                        n := add(n, w) // `sub(n, 1)`.\r\n                        if iszero(n) { break }\r\n\r\n                        let t := mload(add(b, n))\r\n                        mstore8(add(a, n), mload(add(b, o)))\r\n                        mstore8(add(a, o), t)\r\n                    }\r\n\r\n                    {\r\n                        let o := mod(and(r, mask), n)\r\n                        n := add(n, w) // `sub(n, 1)`.\r\n                        if iszero(n) { break }\r\n\r\n                        let t := mload(add(b, n))\r\n                        mstore8(add(a, n), mload(add(b, o)))\r\n                        mstore8(add(a, o), t)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/LibString.sol\r\n\r\n//\r\npragma solidity ^0.8.4;\r\n\r\n/// @notice Library for converting numbers into strings and other string operations.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\r\nlibrary LibString {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The `length` of the output is too small to contain all the hex digits.\r\n    error HexLengthInsufficient();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The constant returned when the `search` is not found in the string.\r\n    uint256 internal constant NOT_FOUND = type(uint256).max;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     DECIMAL OPERATIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the base 10 decimal representation of `value`.\r\n    function toString(uint256 value) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\r\n        // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\r\n        // We will need 1 word for the trailing zeros padding, 1 word for the length,\r\n        // and 3 words for a maximum of 78 digits.\r\n            str := add(mload(0x40), 0x80)\r\n        // Update the free memory pointer to allocate.\r\n            mstore(0x40, add(str, 0x20))\r\n        // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n        // Cache the end of the memory to calculate the length later.\r\n            let end := str\r\n\r\n            let w := not(0) // Tsk.\r\n        // We write the string from rightmost digit to leftmost digit.\r\n        // The following is essentially a do-while loop that also handles the zero case.\r\n            for { let temp := value } 1 {} {\r\n                str := add(str, w) // `sub(str, 1)`.\r\n            // Write the character to the pointer.\r\n            // The ASCII index of the '0' character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n            // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            let length := sub(end, str)\r\n        // Move the pointer 32 bytes leftwards to make room for the length.\r\n            str := sub(str, 0x20)\r\n        // Store the length.\r\n            mstore(str, length)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the base 10 decimal representation of `value`.\r\n    function toString(int256 value) internal pure returns (string memory str) {\r\n        if (value >= 0) {\r\n            return toString(uint256(value));\r\n        }\r\n    unchecked {\r\n        str = toString(uint256(-value));\r\n    }\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // We still have some spare memory space on the left,\r\n        // as we have allocated 3 words (96 bytes) for up to 78 digits.\r\n            let length := mload(str) // Load the string length.\r\n            mstore(str, 0x2d) // Store the '-' character.\r\n            str := sub(str, 1) // Move back the string pointer by a byte.\r\n            mstore(str, add(length, 1)) // Update the string length.\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   HEXADECIMAL OPERATIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`,\r\n    /// left-padded to an input length of `length` bytes.\r\n    /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\r\n    /// giving a total length of `length * 2 + 2` bytes.\r\n    /// Reverts if `length` is too small for the output to contain all the digits.\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(value, length);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(str, 0x3078) // Write the \"0x\" prefix.\r\n            str := sub(str, 2) // Move the pointer.\r\n            mstore(str, strLength) // Write the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`,\r\n    /// left-padded to an input length of `length` bytes.\r\n    /// The output is prefixed with \"0x\" encoded using 2 hexadecimal digits per byte,\r\n    /// giving a total length of `length * 2` bytes.\r\n    /// Reverts if `length` is too small for the output to contain all the digits.\r\n    function toHexStringNoPrefix(uint256 value, uint256 length)\r\n    internal\r\n    pure\r\n    returns (string memory str)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\r\n        // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\r\n        // We add 0x20 to the total and round down to a multiple of 0x20.\r\n        // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\r\n            str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\r\n        // Allocate the memory.\r\n            mstore(0x40, add(str, 0x20))\r\n        // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n        // Cache the end to calculate the length later.\r\n            let end := str\r\n        // Store \"0123456789abcdef\" in scratch space.\r\n            mstore(0x0f, 0x30313233343536373839616263646566)\r\n\r\n            let start := sub(str, add(length, length))\r\n            let w := not(1) // Tsk.\r\n            let temp := value\r\n        // We write the string from rightmost digit to leftmost digit.\r\n        // The following is essentially a do-while loop that also handles the zero case.\r\n            for {} 1 {} {\r\n                str := add(str, w) // `sub(str, 2)`.\r\n                mstore8(add(str, 1), mload(and(temp, 15)))\r\n                mstore8(str, mload(and(shr(4, temp), 15)))\r\n                temp := shr(8, temp)\r\n                if iszero(xor(str, start)) { break }\r\n            }\r\n\r\n            if temp {\r\n            // Store the function selector of `HexLengthInsufficient()`.\r\n                mstore(0x00, 0x2194895a)\r\n            // Revert with (offset, size).\r\n                revert(0x1c, 0x04)\r\n            }\r\n\r\n        // Compute the string's length.\r\n            let strLength := sub(end, str)\r\n        // Move the pointer and write the length.\r\n            str := sub(str, 0x20)\r\n            mstore(str, strLength)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\r\n    /// As address are 20 bytes long, the output will left-padded to have\r\n    /// a length of `20 * 2 + 2` bytes.\r\n    function toHexString(uint256 value) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(value);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(str, 0x3078) // Write the \"0x\" prefix.\r\n            str := sub(str, 2) // Move the pointer.\r\n            mstore(str, strLength) // Write the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is encoded using 2 hexadecimal digits per byte.\r\n    /// As address are 20 bytes long, the output will left-padded to have\r\n    /// a length of `20 * 2` bytes.\r\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\r\n        // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\r\n        // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\r\n            str := add(mload(0x40), 0x80)\r\n        // Allocate the memory.\r\n            mstore(0x40, add(str, 0x20))\r\n        // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n        // Cache the end to calculate the length later.\r\n            let end := str\r\n        // Store \"0123456789abcdef\" in scratch space.\r\n            mstore(0x0f, 0x30313233343536373839616263646566)\r\n\r\n            let w := not(1) // Tsk.\r\n        // We write the string from rightmost digit to leftmost digit.\r\n        // The following is essentially a do-while loop that also handles the zero case.\r\n            for { let temp := value } 1 {} {\r\n                str := add(str, w) // `sub(str, 2)`.\r\n                mstore8(add(str, 1), mload(and(temp, 15)))\r\n                mstore8(str, mload(and(shr(4, temp), 15)))\r\n                temp := shr(8, temp)\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n        // Compute the string's length.\r\n            let strLength := sub(end, str)\r\n        // Move the pointer and write the length.\r\n            str := sub(str, 0x20)\r\n            mstore(str, strLength)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is prefixed with \"0x\", encoded using 2 hexadecimal digits per byte,\r\n    /// and the alphabets are capitalized conditionally according to\r\n    /// https://eips.ethereum.org/EIPS/eip-55\r\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\r\n        str = toHexString(value);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\r\n            let o := add(str, 0x22)\r\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\r\n            let t := shl(240, 136) // `0b10001000 << 240`\r\n            for { let i := 0 } 1 {} {\r\n                mstore(add(i, i), mul(t, byte(i, hashed)))\r\n                i := add(i, 1)\r\n                if eq(i, 20) { break }\r\n            }\r\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\r\n            o := add(o, 0x20)\r\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is prefixed with \"0x\" and encoded using 2 hexadecimal digits per byte.\r\n    function toHexString(address value) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(value);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(str, 0x3078) // Write the \"0x\" prefix.\r\n            str := sub(str, 2) // Move the pointer.\r\n            mstore(str, strLength) // Write the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hexadecimal representation of `value`.\r\n    /// The output is encoded using 2 hexadecimal digits per byte.\r\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            str := mload(0x40)\r\n\r\n        // Allocate the memory.\r\n        // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\r\n        // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\r\n        // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\r\n            mstore(0x40, add(str, 0x80))\r\n\r\n        // Store \"0123456789abcdef\" in scratch space.\r\n            mstore(0x0f, 0x30313233343536373839616263646566)\r\n\r\n            str := add(str, 2)\r\n            mstore(str, 40)\r\n\r\n            let o := add(str, 0x20)\r\n            mstore(add(o, 40), 0)\r\n\r\n            value := shl(96, value)\r\n\r\n        // We write the string from rightmost digit to leftmost digit.\r\n        // The following is essentially a do-while loop that also handles the zero case.\r\n            for { let i := 0 } 1 {} {\r\n                let p := add(o, add(i, i))\r\n                let temp := byte(i, value)\r\n                mstore8(add(p, 1), mload(and(temp, 15)))\r\n                mstore8(p, mload(shr(4, temp)))\r\n                i := add(i, 1)\r\n                if eq(i, 20) { break }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hex encoded string from the raw bytes.\r\n    /// The output is encoded using 2 hexadecimal digits per byte.\r\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\r\n        str = toHexStringNoPrefix(raw);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let strLength := add(mload(str), 2) // Compute the length.\r\n            mstore(str, 0x3078) // Write the \"0x\" prefix.\r\n            str := sub(str, 2) // Move the pointer.\r\n            mstore(str, strLength) // Write the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the hex encoded string from the raw bytes.\r\n    /// The output is encoded using 2 hexadecimal digits per byte.\r\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let length := mload(raw)\r\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\r\n            mstore(str, add(length, length)) // Store the length of the output.\r\n\r\n        // Store \"0123456789abcdef\" in scratch space.\r\n            mstore(0x0f, 0x30313233343536373839616263646566)\r\n\r\n            let o := add(str, 0x20)\r\n            let end := add(raw, length)\r\n\r\n            for {} iszero(eq(raw, end)) {} {\r\n                raw := add(raw, 1)\r\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\r\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\r\n                o := add(o, 2)\r\n            }\r\n            mstore(o, 0) // Zeroize the slot after the string.\r\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   RUNE STRING OPERATIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the number of UTF characters in the string.\r\n    function runeCount(string memory s) internal pure returns (uint256 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if mload(s) {\r\n                mstore(0x00, div(not(0), 255))\r\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\r\n                let o := add(s, 0x20)\r\n                let end := add(o, mload(s))\r\n                for { result := 1 } 1 { result := add(result, 1) } {\r\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\r\n                    if iszero(lt(o, end)) { break }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns if this string is a 7-bit ASCII string.\r\n    /// (i.e. all characters codes are in [0..127])\r\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let mask := shl(7, div(not(0), 255))\r\n            result := 1\r\n            let n := mload(s)\r\n            if n {\r\n                let o := add(s, 0x20)\r\n                let end := add(o, n)\r\n                let last := mload(end)\r\n                mstore(end, 0)\r\n                for {} 1 {} {\r\n                    if and(mask, mload(o)) {\r\n                        result := 0\r\n                        break\r\n                    }\r\n                    o := add(o, 0x20)\r\n                    if iszero(lt(o, end)) { break }\r\n                }\r\n                mstore(end, last)\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   BYTE STRING OPERATIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    // For performance and bytecode compactness, all indices of the following operations\r\n    // are byte (ASCII) offsets, not UTF character offsets.\r\n\r\n    /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\r\n    function replace(string memory subject, string memory search, string memory replacement)\r\n    internal\r\n    pure\r\n    returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let subjectLength := mload(subject)\r\n            let searchLength := mload(search)\r\n            let replacementLength := mload(replacement)\r\n\r\n            subject := add(subject, 0x20)\r\n            search := add(search, 0x20)\r\n            replacement := add(replacement, 0x20)\r\n            result := add(mload(0x40), 0x20)\r\n\r\n            let subjectEnd := add(subject, subjectLength)\r\n            if iszero(gt(searchLength, subjectLength)) {\r\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\r\n                let h := 0\r\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\r\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\r\n                let s := mload(search)\r\n                for {} 1 {} {\r\n                    let t := mload(subject)\r\n                // Whether the first `searchLength % 32` bytes of\r\n                // `subject` and `search` matches.\r\n                    if iszero(shr(m, xor(t, s))) {\r\n                        if h {\r\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\r\n                                mstore(result, t)\r\n                                result := add(result, 1)\r\n                                subject := add(subject, 1)\r\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                                continue\r\n                            }\r\n                        }\r\n                    // Copy the `replacement` one word at a time.\r\n                        for { let o := 0 } 1 {} {\r\n                            mstore(add(result, o), mload(add(replacement, o)))\r\n                            o := add(o, 0x20)\r\n                            if iszero(lt(o, replacementLength)) { break }\r\n                        }\r\n                        result := add(result, replacementLength)\r\n                        subject := add(subject, searchLength)\r\n                        if searchLength {\r\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                            continue\r\n                        }\r\n                    }\r\n                    mstore(result, t)\r\n                    result := add(result, 1)\r\n                    subject := add(subject, 1)\r\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                }\r\n            }\r\n\r\n            let resultRemainder := result\r\n            result := add(mload(0x40), 0x20)\r\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\r\n        // Copy the rest of the string one word at a time.\r\n            for {} lt(subject, subjectEnd) {} {\r\n                mstore(resultRemainder, mload(subject))\r\n                resultRemainder := add(resultRemainder, 0x20)\r\n                subject := add(subject, 0x20)\r\n            }\r\n            result := sub(result, 0x20)\r\n            let last := add(add(result, 0x20), k) // Zeroize the slot after the string.\r\n            mstore(last, 0)\r\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\r\n            mstore(result, k) // Store the length.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\r\n    /// searching from left to right, starting from `from`.\r\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\r\n    function indexOf(string memory subject, string memory search, uint256 from)\r\n    internal\r\n    pure\r\n    returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for { let subjectLength := mload(subject) } 1 {} {\r\n                if iszero(mload(search)) {\r\n                    if iszero(gt(from, subjectLength)) {\r\n                        result := from\r\n                        break\r\n                    }\r\n                    result := subjectLength\r\n                    break\r\n                }\r\n                let searchLength := mload(search)\r\n                let subjectStart := add(subject, 0x20)\r\n\r\n                result := not(0) // Initialize to `NOT_FOUND`.\r\n\r\n                subject := add(subjectStart, from)\r\n                let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\r\n\r\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\r\n                let s := mload(add(search, 0x20))\r\n\r\n                if iszero(and(lt(subject, end), lt(from, subjectLength))) { break }\r\n\r\n                if iszero(lt(searchLength, 0x20)) {\r\n                    for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\r\n                        if iszero(shr(m, xor(mload(subject), s))) {\r\n                            if eq(keccak256(subject, searchLength), h) {\r\n                                result := sub(subject, subjectStart)\r\n                                break\r\n                            }\r\n                        }\r\n                        subject := add(subject, 1)\r\n                        if iszero(lt(subject, end)) { break }\r\n                    }\r\n                    break\r\n                }\r\n                for {} 1 {} {\r\n                    if iszero(shr(m, xor(mload(subject), s))) {\r\n                        result := sub(subject, subjectStart)\r\n                        break\r\n                    }\r\n                    subject := add(subject, 1)\r\n                    if iszero(lt(subject, end)) { break }\r\n                }\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\r\n    /// searching from left to right.\r\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\r\n    function indexOf(string memory subject, string memory search)\r\n    internal\r\n    pure\r\n    returns (uint256 result)\r\n    {\r\n        result = indexOf(subject, search, 0);\r\n    }\r\n\r\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\r\n    /// searching from right to left, starting from `from`.\r\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\r\n    function lastIndexOf(string memory subject, string memory search, uint256 from)\r\n    internal\r\n    pure\r\n    returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for {} 1 {} {\r\n                result := not(0) // Initialize to `NOT_FOUND`.\r\n                let searchLength := mload(search)\r\n                if gt(searchLength, mload(subject)) { break }\r\n                let w := result\r\n\r\n                let fromMax := sub(mload(subject), searchLength)\r\n                if iszero(gt(fromMax, from)) { from := fromMax }\r\n\r\n                let end := add(add(subject, 0x20), w)\r\n                subject := add(add(subject, 0x20), from)\r\n                if iszero(gt(subject, end)) { break }\r\n            // As this function is not too often used,\r\n            // we shall simply use keccak256 for smaller bytecode size.\r\n                for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\r\n                    if eq(keccak256(subject, searchLength), h) {\r\n                        result := sub(subject, add(end, 1))\r\n                        break\r\n                    }\r\n                    subject := add(subject, w) // `sub(subject, 1)`.\r\n                    if iszero(gt(subject, end)) { break }\r\n                }\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\r\n    /// searching from right to left.\r\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\r\n    function lastIndexOf(string memory subject, string memory search)\r\n    internal\r\n    pure\r\n    returns (uint256 result)\r\n    {\r\n        result = lastIndexOf(subject, search, uint256(int256(-1)));\r\n    }\r\n\r\n    /// @dev Returns whether `subject` starts with `search`.\r\n    function startsWith(string memory subject, string memory search)\r\n    internal\r\n    pure\r\n    returns (bool result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let searchLength := mload(search)\r\n        // Just using keccak256 directly is actually cheaper.\r\n        // forgefmt: disable-next-item\r\n            result := and(\r\n            iszero(gt(searchLength, mload(subject))),\r\n            eq(\r\n            keccak256(add(subject, 0x20), searchLength),\r\n            keccak256(add(search, 0x20), searchLength)\r\n            )\r\n            )\r\n        }\r\n    }\r\n\r\n    /// @dev Returns whether `subject` ends with `search`.\r\n    function endsWith(string memory subject, string memory search)\r\n    internal\r\n    pure\r\n    returns (bool result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let searchLength := mload(search)\r\n            let subjectLength := mload(subject)\r\n        // Whether `search` is not longer than `subject`.\r\n            let withinRange := iszero(gt(searchLength, subjectLength))\r\n        // Just using keccak256 directly is actually cheaper.\r\n        // forgefmt: disable-next-item\r\n            result := and(\r\n            withinRange,\r\n            eq(\r\n            keccak256(\r\n            // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\r\n            add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\r\n            searchLength\r\n            ),\r\n            keccak256(add(search, 0x20), searchLength)\r\n            )\r\n            )\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `subject` repeated `times`.\r\n    function repeat(string memory subject, uint256 times)\r\n    internal\r\n    pure\r\n    returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let subjectLength := mload(subject)\r\n            if iszero(or(iszero(times), iszero(subjectLength))) {\r\n                subject := add(subject, 0x20)\r\n                result := mload(0x40)\r\n                let output := add(result, 0x20)\r\n                for {} 1 {} {\r\n                // Copy the `subject` one word at a time.\r\n                    for { let o := 0 } 1 {} {\r\n                        mstore(add(output, o), mload(add(subject, o)))\r\n                        o := add(o, 0x20)\r\n                        if iszero(lt(o, subjectLength)) { break }\r\n                    }\r\n                    output := add(output, subjectLength)\r\n                    times := sub(times, 1)\r\n                    if iszero(times) { break }\r\n                }\r\n                mstore(output, 0) // Zeroize the slot after the string.\r\n                let resultLength := sub(output, add(result, 0x20))\r\n                mstore(result, resultLength) // Store the length.\r\n            // Allocate the memory.\r\n                mstore(0x40, add(result, add(resultLength, 0x20)))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\r\n    /// `start` and `end` are byte offsets.\r\n    function slice(string memory subject, uint256 start, uint256 end)\r\n    internal\r\n    pure\r\n    returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let subjectLength := mload(subject)\r\n            if iszero(gt(subjectLength, end)) { end := subjectLength }\r\n            if iszero(gt(subjectLength, start)) { start := subjectLength }\r\n            if lt(start, end) {\r\n                result := mload(0x40)\r\n                let resultLength := sub(end, start)\r\n                mstore(result, resultLength)\r\n                subject := add(subject, start)\r\n                let w := not(0x1f)\r\n            // Copy the `subject` one word at a time, backwards.\r\n                for { let o := and(add(resultLength, 0x1f), w) } 1 {} {\r\n                    mstore(add(result, o), mload(add(subject, o)))\r\n                    o := add(o, w) // `sub(o, 0x20)`.\r\n                    if iszero(o) { break }\r\n                }\r\n            // Zeroize the slot after the string.\r\n                mstore(add(add(result, 0x20), resultLength), 0)\r\n            // Allocate memory for the length and the bytes,\r\n            // rounded up to a multiple of 32.\r\n                mstore(0x40, add(result, and(add(resultLength, 0x3f), w)))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\r\n    /// `start` is a byte offset.\r\n    function slice(string memory subject, uint256 start)\r\n    internal\r\n    pure\r\n    returns (string memory result)\r\n    {\r\n        result = slice(subject, start, uint256(int256(-1)));\r\n    }\r\n\r\n    /// @dev Returns all the indices of `search` in `subject`.\r\n    /// The indices are byte offsets.\r\n    function indicesOf(string memory subject, string memory search)\r\n    internal\r\n    pure\r\n    returns (uint256[] memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let subjectLength := mload(subject)\r\n            let searchLength := mload(search)\r\n\r\n            if iszero(gt(searchLength, subjectLength)) {\r\n                subject := add(subject, 0x20)\r\n                search := add(search, 0x20)\r\n                result := add(mload(0x40), 0x20)\r\n\r\n                let subjectStart := subject\r\n                let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\r\n                let h := 0\r\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\r\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\r\n                let s := mload(search)\r\n                for {} 1 {} {\r\n                    let t := mload(subject)\r\n                // Whether the first `searchLength % 32` bytes of\r\n                // `subject` and `search` matches.\r\n                    if iszero(shr(m, xor(t, s))) {\r\n                        if h {\r\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\r\n                                subject := add(subject, 1)\r\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                                continue\r\n                            }\r\n                        }\r\n                    // Append to `result`.\r\n                        mstore(result, sub(subject, subjectStart))\r\n                        result := add(result, 0x20)\r\n                    // Advance `subject` by `searchLength`.\r\n                        subject := add(subject, searchLength)\r\n                        if searchLength {\r\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                            continue\r\n                        }\r\n                    }\r\n                    subject := add(subject, 1)\r\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\r\n                }\r\n                let resultEnd := result\r\n            // Assign `result` to the free memory pointer.\r\n                result := mload(0x40)\r\n            // Store the length of `result`.\r\n                mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\r\n            // Allocate memory for result.\r\n            // We allocate one more word, so this array can be recycled for {split}.\r\n                mstore(0x40, add(resultEnd, 0x20))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\r\n    function split(string memory subject, string memory delimiter)\r\n    internal\r\n    pure\r\n    returns (string[] memory result)\r\n    {\r\n        uint256[] memory indices = indicesOf(subject, delimiter);\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let w := not(0x1f)\r\n            let indexPtr := add(indices, 0x20)\r\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\r\n            mstore(add(indicesEnd, w), mload(subject))\r\n            mstore(indices, add(mload(indices), 1))\r\n            let prevIndex := 0\r\n            for {} 1 {} {\r\n                let index := mload(indexPtr)\r\n                mstore(indexPtr, 0x60)\r\n                if iszero(eq(index, prevIndex)) {\r\n                    let element := mload(0x40)\r\n                    let elementLength := sub(index, prevIndex)\r\n                    mstore(element, elementLength)\r\n                // Copy the `subject` one word at a time, backwards.\r\n                    for { let o := and(add(elementLength, 0x1f), w) } 1 {} {\r\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\r\n                        o := add(o, w) // `sub(o, 0x20)`.\r\n                        if iszero(o) { break }\r\n                    }\r\n                // Zeroize the slot after the string.\r\n                    mstore(add(add(element, 0x20), elementLength), 0)\r\n                // Allocate memory for the length and the bytes,\r\n                // rounded up to a multiple of 32.\r\n                    mstore(0x40, add(element, and(add(elementLength, 0x3f), w)))\r\n                // Store the `element` into the array.\r\n                    mstore(indexPtr, element)\r\n                }\r\n                prevIndex := add(index, mload(delimiter))\r\n                indexPtr := add(indexPtr, 0x20)\r\n                if iszero(lt(indexPtr, indicesEnd)) { break }\r\n            }\r\n            result := indices\r\n            if iszero(mload(delimiter)) {\r\n                result := add(indices, 0x20)\r\n                mstore(result, sub(mload(indices), 2))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a concatenated string of `a` and `b`.\r\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\r\n    function concat(string memory a, string memory b)\r\n    internal\r\n    pure\r\n    returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let w := not(0x1f)\r\n            result := mload(0x40)\r\n            let aLength := mload(a)\r\n        // Copy `a` one word at a time, backwards.\r\n            for { let o := and(add(mload(a), 0x20), w) } 1 {} {\r\n                mstore(add(result, o), mload(add(a, o)))\r\n                o := add(o, w) // `sub(o, 0x20)`.\r\n                if iszero(o) { break }\r\n            }\r\n            let bLength := mload(b)\r\n            let output := add(result, mload(a))\r\n        // Copy `b` one word at a time, backwards.\r\n            for { let o := and(add(bLength, 0x20), w) } 1 {} {\r\n                mstore(add(output, o), mload(add(b, o)))\r\n                o := add(o, w) // `sub(o, 0x20)`.\r\n                if iszero(o) { break }\r\n            }\r\n            let totalLength := add(aLength, bLength)\r\n            let last := add(add(result, 0x20), totalLength)\r\n        // Zeroize the slot after the string.\r\n            mstore(last, 0)\r\n        // Stores the length.\r\n            mstore(result, totalLength)\r\n        // Allocate memory for the length and the bytes,\r\n        // rounded up to a multiple of 32.\r\n            mstore(0x40, and(add(last, 0x1f), w))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\r\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\r\n    function toCase(string memory subject, bool toUpper)\r\n    internal\r\n    pure\r\n    returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let length := mload(subject)\r\n            if length {\r\n                result := add(mload(0x40), 0x20)\r\n                subject := add(subject, 1)\r\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\r\n                let w := not(0)\r\n                for { let o := length } 1 {} {\r\n                    o := add(o, w)\r\n                    let b := and(0xff, mload(add(subject, o)))\r\n                    mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\r\n                    if iszero(o) { break }\r\n                }\r\n                result := mload(0x40)\r\n                mstore(result, length) // Store the length.\r\n                let last := add(add(result, 0x20), length)\r\n                mstore(last, 0) // Zeroize the slot after the string.\r\n                mstore(0x40, add(last, 0x20)) // Allocate the memory.\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a lowercased copy of the string.\r\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\r\n    function lower(string memory subject) internal pure returns (string memory result) {\r\n        result = toCase(subject, false);\r\n    }\r\n\r\n    /// @dev Returns an UPPERCASED copy of the string.\r\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\r\n    function upper(string memory subject) internal pure returns (string memory result) {\r\n        result = toCase(subject, true);\r\n    }\r\n\r\n    /// @dev Escapes the string to be used within HTML tags.\r\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for {\r\n                let end := add(s, mload(s))\r\n                result := add(mload(0x40), 0x20)\r\n            // Store the bytes of the packed offsets and strides into the scratch space.\r\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\r\n                mstore(0x1f, 0x900094)\r\n                mstore(0x08, 0xc0000000a6ab)\r\n            // Store \"&quot;&amp;&#39;&lt;&gt;\" into the scratch space.\r\n                mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\r\n            } iszero(eq(s, end)) {} {\r\n                s := add(s, 1)\r\n                let c := and(mload(s), 0xff)\r\n            // Not in `[\"\\\"\",\"'\",\"&\",\"<\",\">\"]`.\r\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\r\n                    mstore8(result, c)\r\n                    result := add(result, 1)\r\n                    continue\r\n                }\r\n                let t := shr(248, mload(c))\r\n                mstore(result, mload(and(t, 0x1f)))\r\n                result := add(result, shr(5, t))\r\n            }\r\n            let last := result\r\n            mstore(last, 0) // Zeroize the slot after the string.\r\n            result := mload(0x40)\r\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\r\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\r\n        }\r\n    }\r\n\r\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\r\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for {\r\n                let end := add(s, mload(s))\r\n                result := add(mload(0x40), 0x20)\r\n            // Store \"\\\\u0000\" in scratch space.\r\n            // Store \"0123456789abcdef\" in scratch space.\r\n            // Also, store `{0x08:\"b\", 0x09:\"t\", 0x0a:\"n\", 0x0c:\"f\", 0x0d:\"r\"}`.\r\n            // into the scratch space.\r\n                mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\r\n            // Bitmask for detecting `[\"\\\"\",\"\\\\\"]`.\r\n                let e := or(shl(0x22, 1), shl(0x5c, 1))\r\n            } iszero(eq(s, end)) {} {\r\n                s := add(s, 1)\r\n                let c := and(mload(s), 0xff)\r\n                if iszero(lt(c, 0x20)) {\r\n                    if iszero(and(shl(c, 1), e)) {\r\n                    // Not in `[\"\\\"\",\"\\\\\"]`.\r\n                        mstore8(result, c)\r\n                        result := add(result, 1)\r\n                        continue\r\n                    }\r\n                    mstore8(result, 0x5c) // \"\\\\\".\r\n                    mstore8(add(result, 1), c)\r\n                    result := add(result, 2)\r\n                    continue\r\n                }\r\n                if iszero(and(shl(c, 1), 0x3700)) {\r\n                // Not in `[\"\\b\",\"\\t\",\"\\n\",\"\\f\",\"\\d\"]`.\r\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\r\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\r\n                    mstore(result, mload(0x19)) // \"\\\\u00XX\".\r\n                    result := add(result, 6)\r\n                    continue\r\n                }\r\n                mstore8(result, 0x5c) // \"\\\\\".\r\n                mstore8(add(result, 1), mload(add(c, 8)))\r\n                result := add(result, 2)\r\n            }\r\n            let last := result\r\n            mstore(last, 0) // Zeroize the slot after the string.\r\n            result := mload(0x40)\r\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\r\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\r\n        }\r\n    }\r\n\r\n    /// @dev Returns whether `a` equals `b`.\r\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\r\n        assembly {\r\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\r\n        }\r\n    }\r\n\r\n    /// @dev Packs a single string with its length into a single word.\r\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\r\n    function packOne(string memory a) internal pure returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // We don't need to zero right pad the string,\r\n        // since this is our own custom non-standard packing scheme.\r\n            result :=\r\n            mul(\r\n            // Load the length and the bytes.\r\n            mload(add(a, 0x1f)),\r\n            // `length != 0 && length < 32`. Abuses underflow.\r\n            // Assumes that the length is valid and within the block gas limit.\r\n            lt(sub(mload(a), 1), 0x1f)\r\n            )\r\n        }\r\n    }\r\n\r\n    /// @dev Unpacks a string packed using {packOne}.\r\n    /// Returns the empty string if `packed` is `bytes32(0)`.\r\n    /// If `packed` is not an output of {packOne}, the output behaviour is undefined.\r\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Grab the free memory pointer.\r\n            result := mload(0x40)\r\n        // Allocate 2 words (1 for the length, 1 for the bytes).\r\n            mstore(0x40, add(result, 0x40))\r\n        // Zeroize the length slot.\r\n            mstore(result, 0)\r\n        // Store the length and bytes.\r\n            mstore(add(result, 0x1f), packed)\r\n        // Right pad with zeroes.\r\n            mstore(add(add(result, 0x20), mload(result)), 0)\r\n        }\r\n    }\r\n\r\n    /// @dev Packs two strings with their lengths into a single word.\r\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\r\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let aLength := mload(a)\r\n        // We don't need to zero right pad the strings,\r\n        // since this is our own custom non-standard packing scheme.\r\n            result :=\r\n            mul(\r\n            // Load the length and the bytes of `a` and `b`.\r\n            or(\r\n            shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))),\r\n            mload(sub(add(b, 0x1e), aLength))\r\n            ),\r\n            // `totalLength != 0 && totalLength < 31`. Abuses underflow.\r\n            // Assumes that the lengths are valid and within the block gas limit.\r\n            lt(sub(add(aLength, mload(b)), 1), 0x1e)\r\n            )\r\n        }\r\n    }\r\n\r\n    /// @dev Unpacks strings packed using {packTwo}.\r\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\r\n    /// If `packed` is not an output of {packTwo}, the output behaviour is undefined.\r\n    function unpackTwo(bytes32 packed)\r\n    internal\r\n    pure\r\n    returns (string memory resultA, string memory resultB)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // Grab the free memory pointer.\r\n            resultA := mload(0x40)\r\n            resultB := add(resultA, 0x40)\r\n        // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\r\n            mstore(0x40, add(resultB, 0x40))\r\n        // Zeroize the length slots.\r\n            mstore(resultA, 0)\r\n            mstore(resultB, 0)\r\n        // Store the lengths and bytes.\r\n            mstore(add(resultA, 0x1f), packed)\r\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\r\n        // Right pad with zeroes.\r\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\r\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\r\n        }\r\n    }\r\n\r\n    /// @dev Directly returns `a` without copying.\r\n    function directReturn(string memory a) internal pure {\r\n        assembly {\r\n        // Assumes that the string does not start from the scratch space.\r\n            let retStart := sub(a, 0x20)\r\n            let retSize := add(mload(a), 0x40)\r\n        // Right pad with zeroes. Just in case the string is produced\r\n        // by a method that doesn't zero right pad.\r\n            mstore(add(retStart, retSize), 0)\r\n        // Store the return offset.\r\n            mstore(retStart, 0x20)\r\n        // End the transaction, returning the string.\r\n            return(retStart, retSize)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ERC721r.sol\r\n\r\n//\r\npragma solidity ^0.8.17;\r\n\r\n//import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\n\r\n\r\n//import {ERC721} from \"solady/src/tokens/ERC721.sol\";\r\n//import {LibPRNG} from \"solady/src/utils/LibPRNG.sol\";\r\n//import {LibString} from \"solady/src/utils/LibString.sol\";\r\n\r\n\r\nabstract contract ERC721r is ERC721 {\r\n    using LibPRNG for LibPRNG.PRNG;\r\n    using LibString for uint256;\r\n\r\n    error ContractsCannotMint();\r\n    error MustMintAtLeastOneToken();\r\n    error NotEnoughAvailableTokens();\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(uint256 => uint256) private _availableTokens;\r\n    uint256 public remainingSupply;\r\n\r\n    uint256 public immutable maxSupply;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint256 maxSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        maxSupply = maxSupply_;\r\n        remainingSupply = maxSupply_;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return maxSupply - remainingSupply;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function numberMinted(address minter) public view virtual returns (uint32) {\r\n        return uint32(ERC721._getAux(minter) >> 192);\r\n    }\r\n\r\n    function _mintRandom(address to, uint256 _numToMint) internal virtual {\r\n        if (msg.sender != tx.origin) revert ContractsCannotMint();\r\n        if (_numToMint == 0) revert MustMintAtLeastOneToken();\r\n        if (remainingSupply < _numToMint) revert NotEnoughAvailableTokens();\r\n\r\n        LibPRNG.PRNG memory prng = LibPRNG.PRNG(uint256(keccak256(abi.encodePacked(\r\n            block.timestamp, block.prevrandao\r\n        ))));\r\n\r\n        uint256 updatedRemainingSupply = remainingSupply;\r\n\r\n        for (uint256 i; i < _numToMint; ) {\r\n            uint256 randomIndex = prng.uniform(updatedRemainingSupply);\r\n\r\n            uint256 tokenId = getAvailableTokenAtIndex(randomIndex, updatedRemainingSupply);\r\n\r\n            _mint(to, tokenId);\r\n\r\n            --updatedRemainingSupply;\r\n\r\n        unchecked {++i;}\r\n        }\r\n\r\n        _incrementAmountMinted(to, uint32(_numToMint));\r\n        remainingSupply = updatedRemainingSupply;\r\n    }\r\n\r\n    // Must be called in descending order of index\r\n    function _mintAtIndex(address to, uint256 index) internal virtual {\r\n        if (msg.sender != tx.origin) revert ContractsCannotMint();\r\n        if (remainingSupply == 0) revert NotEnoughAvailableTokens();\r\n\r\n        uint256 tokenId = getAvailableTokenAtIndex(index, remainingSupply);\r\n\r\n        --remainingSupply;\r\n        _incrementAmountMinted(to, 1);\r\n\r\n        _mint(to, tokenId);\r\n    }\r\n\r\n    // Implements https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle. Code taken from CryptoPhunksV2\r\n    function getAvailableTokenAtIndex(uint256 indexToUse, uint256 updatedNumAvailableTokens)\r\n    private\r\n    returns (uint256 result)\r\n    {\r\n        uint256 valAtIndex = _availableTokens[indexToUse];\r\n        uint256 lastIndex = updatedNumAvailableTokens - 1;\r\n        uint256 lastValInArray = _availableTokens[lastIndex];\r\n\r\n        result = valAtIndex == 0 ? indexToUse : valAtIndex;\r\n\r\n        if (indexToUse != lastIndex) {\r\n            _availableTokens[indexToUse] = lastValInArray == 0 ? lastIndex : lastValInArray;\r\n        }\r\n\r\n        if (lastValInArray != 0) {\r\n            delete _availableTokens[lastIndex];\r\n        }\r\n    }\r\n\r\n    function _setExtraAddressData(address minter, uint192 extraData) internal virtual {\r\n        uint32 numMinted = numberMinted(minter);\r\n\r\n        ERC721._setAux(\r\n            minter,\r\n            uint224((uint256(numMinted) << 192)) | uint224(extraData)\r\n        );\r\n    }\r\n\r\n    function _getAddressExtraData(address minter) internal view virtual returns (uint192) {\r\n        return uint192(_getAux(minter));\r\n    }\r\n\r\n    function _incrementAmountMinted(address minter, uint32 newMints) private {\r\n        uint32 numMinted = numberMinted(minter);\r\n        uint32 newMintNumMinted = numMinted + uint32(newMints);\r\n        uint224 auxData = ERC721._getAux(minter);\r\n\r\n        ERC721._setAux(\r\n            minter,\r\n            uint224(uint256(newMintNumMinted) << 192) | uint224(uint192(auxData))\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/MetaLifeVehicle.sol\r\n\r\n//\r\npragma solidity 0.8.23;\r\n\r\n\r\n\r\n\r\ncontract MetaLifeVehicle is ReentrancyGuard, Ownable, ERC721r {\r\n\r\n    using Strings for uint256;\r\n    string public baseURI;\r\n    uint16 public mainMaxSupply = 1200;\r\n\r\n    uint16 public nbMintedCouncil = 0;\r\n    uint16 public nbMintedHonorary = 0;\r\n    uint16 public nbMintedGuardian = 0;\r\n    uint16 public nbMintedJudge = 0;\r\n    uint16 public nbMintedWhale = 0;\r\n\r\n    uint16 public maxSupplyCouncil = 250;\r\n    uint16 public maxSupplyHonorary = 66;\r\n    uint16 public maxSupplyGuardian = 22;\r\n    uint16 public maxSupplyJudge = 10;\r\n    uint16 public maxSupplyWhale = 31;\r\n\r\n    // Fri May 31 2024 21:59:59 GMT+0000\r\n    uint256 public limitSpecialMint = 1717192799;\r\n    address public originOwner = 0x87a1AB9Aab7BAE43AD4ce4951A93e7F5bBCAc230;\r\n    address payable public collector;\r\n\r\n    struct Eligibility {\r\n        uint8 total;\r\n        uint8 claimed;\r\n    }\r\n\r\n    mapping(address => Eligibility) public allowlistRandom;\r\n    event MintedRandom(address indexed from, uint256 timestamp);\r\n\r\n    uint16 private _tokenIdCurrentCouncil = 822;\r\n    mapping(address => Eligibility) public allowlistCouncil;\r\n    event MintedCouncil(address indexed from, uint256 timestamp, uint16[] tokenIds);\r\n\r\n    uint16 private _tokenIdCurrentHonorary = 1072;\r\n    mapping(address => Eligibility) public allowlistHonorary;\r\n    event MintedHonorary(address indexed from, uint256 timestamp, uint16[] tokenIds);\r\n\r\n    uint16 private _tokenIdCurrentGuardian = 1138;\r\n    mapping(address => Eligibility) public allowlistGuardian;\r\n    event MintedGuardian(address indexed from, uint256 timestamp, uint16 tokenId);\r\n\r\n    uint16 private _tokenIdCurrentJudge = 1160;\r\n    mapping(address => Eligibility) public allowlistJudge;\r\n    event MintedJudge(address indexed from, uint256 timestamp, uint16 tokenId);\r\n\r\n    uint16 private _tokenIdCurrentWhale = 1170;\r\n    mapping(address => Eligibility) public allowlistWhale;\r\n    event MintedWhale(address indexed from, uint256 timestamp, uint16[] tokenIds);\r\n\r\n    constructor() ERC721r('Meta-Life Vehicle', 'MLV', 8_20) Ownable(originOwner){}\r\n\r\n    function withdrawAll() public payable onlyOwner {\r\n        collector.transfer(address(this).balance);\r\n    }\r\n\r\n    function setCollector(address payable _newCollector) public onlyOwner {\r\n        collector = _newCollector;\r\n    }\r\n\r\n    function _setBaseURI(string memory _newBaseURI) public onlyOwner {\r\n        baseURI = _newBaseURI;\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), 'unknow token');\r\n        string memory uri = _baseURI();\r\n        return bytes(uri).length > 0 ? string(abi.encodePacked(uri, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    function tokenExist(uint256 tokenId) public view returns(bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function mainTotalSupply() public view returns (uint256){\r\n        return totalSupply() + nbMintedCouncil + nbMintedHonorary + nbMintedGuardian + nbMintedJudge + nbMintedWhale;\r\n    }\r\n\r\n    function remainingRandom(address wallet) public view virtual returns (uint8) {\r\n        return allowlistRandom[wallet].total - allowlistRandom[wallet].claimed;\r\n    }\r\n\r\n    function remainingCouncil(address wallet) public view virtual returns (uint8) {\r\n        return allowlistCouncil[wallet].total - allowlistCouncil[wallet].claimed;\r\n    }\r\n\r\n    function remainingHonorary(address wallet) public view virtual returns (uint8) {\r\n        return allowlistHonorary[wallet].total - allowlistHonorary[wallet].claimed;\r\n    }\r\n\r\n    function remainingWhale(address wallet) public view virtual returns (uint8) {\r\n        return allowlistWhale[wallet].total - allowlistWhale[wallet].claimed;\r\n    }\r\n\r\n    function remainingJudge(address wallet) public view virtual returns (uint8) {\r\n        return allowlistJudge[wallet].total - allowlistJudge[wallet].claimed;\r\n    }\r\n\r\n    function remainingGuardian(address wallet) public view virtual returns (uint8) {\r\n        return allowlistGuardian[wallet].total - allowlistGuardian[wallet].claimed;\r\n    }\r\n\r\n    function addAllowlistRandom(address[] calldata _toAddAddresses, uint8[] calldata _quantities) external onlyOwner {\r\n        require(_toAddAddresses.length == _quantities.length, 'Nb address and nb quantities must be equal');\r\n        for (uint i = 0; i < _toAddAddresses.length; i++) {\r\n            allowlistRandom[_toAddAddresses[i]].total += _quantities[i];\r\n        }\r\n    }\r\n\r\n    function mintRandom(uint8 _quantities) external {\r\n        require(remainingRandom(msg.sender) > 0, \"Not eligible\");\r\n        require(remainingRandom(msg.sender) >= _quantities, \"Not enough claimable tokens\");\r\n        require(maxSupply >= totalSupply() + _quantities, \"Supply limit exceed\");\r\n        allowlistRandom[msg.sender].claimed += _quantities;\r\n        _mintRandom(msg.sender, _quantities);\r\n        emit MintedRandom(msg.sender, block.timestamp);\r\n    }\r\n\r\n    function addAllowlistCouncil(address[] calldata _toAddAddresses, uint8[] calldata _quantities) external onlyOwner {\r\n        require(_toAddAddresses.length == _quantities.length, 'Nb address and nb quantities must be equal');\r\n        for (uint i = 0; i < _toAddAddresses.length; i++) {\r\n            allowlistCouncil[_toAddAddresses[i]].total = _quantities[i];\r\n        }\r\n    }\r\n\r\n    function mintCouncil(uint8 _quantities) external {\r\n        require(block.timestamp < limitSpecialMint, \"Council mint close\");\r\n        require(remainingCouncil(msg.sender) > 0, \"Not eligible\");\r\n        require(remainingCouncil(msg.sender) >= _quantities, \"Not enough claimable tokens\");\r\n        require(nbMintedCouncil + _quantities <= maxSupplyCouncil, \"Max supply council exceed\");\r\n        uint16[] memory _tokenIdsMinted = new uint16[](_quantities);\r\n        allowlistCouncil[msg.sender].claimed += _quantities;\r\n        for (uint8 i = 0; i < _quantities; i++) {\r\n            _safeMint(msg.sender, _tokenIdCurrentCouncil);\r\n            _tokenIdsMinted[i] = _tokenIdCurrentCouncil;\r\n            _tokenIdCurrentCouncil++;\r\n            nbMintedCouncil++;\r\n        }\r\n        emit MintedCouncil(msg.sender, block.timestamp, _tokenIdsMinted);\r\n    }\r\n\r\n    function addAllowlistHonorary(address[] calldata _toAddAddresses, uint8[] calldata _quantities) external onlyOwner {\r\n        require(_toAddAddresses.length == _quantities.length, 'Nb address and nb quantities must be equal');\r\n        for (uint i = 0; i < _toAddAddresses.length; i++) {\r\n            allowlistHonorary[_toAddAddresses[i]].total = _quantities[i];\r\n        }\r\n    }\r\n\r\n    function mintHonorary(uint8 _quantities) external {\r\n        require(block.timestamp < limitSpecialMint, \"Honorary mint close\");\r\n        require(remainingHonorary(msg.sender) > 0, \"Not eligible\");\r\n        require(remainingHonorary(msg.sender) >= _quantities, \"Not enough claimable tokens\");\r\n        require(nbMintedHonorary + _quantities <= maxSupplyHonorary, \"Max supply honorary exceed\");\r\n        uint16[] memory _tokenIdsMinted = new uint16[](_quantities);\r\n        allowlistHonorary[msg.sender].claimed += _quantities;\r\n        for (uint8 i = 0; i < _quantities; i++) {\r\n            _safeMint(msg.sender, _tokenIdCurrentHonorary);\r\n            _tokenIdsMinted[i] = _tokenIdCurrentHonorary;\r\n            _tokenIdCurrentHonorary++;\r\n            nbMintedHonorary++;\r\n        }\r\n        emit MintedHonorary(msg.sender, block.timestamp, _tokenIdsMinted);\r\n    }\r\n\r\n    function addAllowlistGuardian(address[] calldata _toAddAddresses) external onlyOwner {\r\n        for (uint i = 0; i < _toAddAddresses.length; i++) {\r\n            allowlistGuardian[_toAddAddresses[i]].total = 1;\r\n        }\r\n    }\r\n\r\n    function mintGuardian() external {\r\n        require(block.timestamp < limitSpecialMint, \"Guardian mint close\");\r\n        require(remainingGuardian(msg.sender) > 0, \"No giveway\");\r\n        require(nbMintedGuardian + 1 <= maxSupplyGuardian, \"Max supply guardian exceed\");\r\n        allowlistGuardian[msg.sender].claimed = 1;\r\n        _safeMint(msg.sender, _tokenIdCurrentGuardian);\r\n        emit MintedGuardian(msg.sender, block.timestamp, _tokenIdCurrentGuardian);\r\n        _tokenIdCurrentGuardian++;\r\n        nbMintedGuardian++;\r\n    }\r\n\r\n    function addAllowlistJudge(address[] calldata _toAddAddresses) external onlyOwner {\r\n        for (uint i = 0; i < _toAddAddresses.length; i++) {\r\n            allowlistJudge[_toAddAddresses[i]].total = 1;\r\n        }\r\n    }\r\n\r\n    function mintJudge() external {\r\n        require(block.timestamp < limitSpecialMint, \"Judge mint close\");\r\n        require(remainingJudge(msg.sender) > 0, \"Not eligible\");\r\n        require(nbMintedJudge + 1 <= maxSupplyJudge, \"Max supply judge exceed\");\r\n        allowlistJudge[msg.sender].claimed = 1;\r\n        _safeMint(msg.sender, _tokenIdCurrentJudge);\r\n        emit MintedJudge(msg.sender, block.timestamp, _tokenIdCurrentJudge);\r\n        _tokenIdCurrentJudge++;\r\n        nbMintedJudge++;\r\n    }\r\n\r\n    function addAllowlistWhale(address[] calldata _toAddAddresses, uint8[] calldata _quantities) external onlyOwner {\r\n        for (uint i = 0; i < _toAddAddresses.length; i++) {\r\n            allowlistWhale[_toAddAddresses[i]].total = _quantities[i];\r\n        }\r\n    }\r\n\r\n    function mintWhale(uint8 _quantities) external {\r\n        require(block.timestamp < limitSpecialMint, \"Whale mint close\");\r\n        require(remainingWhale(msg.sender) > 0, \"Not eligible\");\r\n        require(remainingWhale(msg.sender) >= _quantities, \"Not enough claimable tokens\");\r\n        require(nbMintedWhale + _quantities <= maxSupplyCouncil, \"Max supply whale exceed\");\r\n        uint16[] memory _tokenIdsMinted = new uint16[](_quantities);\r\n        allowlistWhale[msg.sender].claimed += _quantities;\r\n        for (uint8 i = 0; i < _quantities; i++) {\r\n            _safeMint(msg.sender, _tokenIdCurrentWhale);\r\n            _tokenIdsMinted[i] = _tokenIdCurrentWhale;\r\n            _tokenIdCurrentWhale++;\r\n            nbMintedWhale++;\r\n        }\r\n        emit MintedWhale(msg.sender, block.timestamp, _tokenIdsMinted);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractsCannotMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustMintAtLeastOneToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAvailableTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"MintedCouncil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"MintedGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"MintedHonorary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"MintedJudge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MintedRandom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"MintedWhale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"_setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_quantities\",\"type\":\"uint8[]\"}],\"name\":\"addAllowlistCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddAddresses\",\"type\":\"address[]\"}],\"name\":\"addAllowlistGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_quantities\",\"type\":\"uint8[]\"}],\"name\":\"addAllowlistHonorary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddAddresses\",\"type\":\"address[]\"}],\"name\":\"addAllowlistJudge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_quantities\",\"type\":\"uint8[]\"}],\"name\":\"addAllowlistRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_toAddAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_quantities\",\"type\":\"uint8[]\"}],\"name\":\"addAllowlistWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistCouncil\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"claimed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistGuardian\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"claimed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistHonorary\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"claimed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistJudge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"claimed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistRandom\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"claimed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistWhale\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"claimed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSpecialMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainMaxSupply\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyCouncil\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyGuardian\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyHonorary\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyJudge\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyWhale\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_quantities\",\"type\":\"uint8\"}],\"name\":\"mintCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_quantities\",\"type\":\"uint8\"}],\"name\":\"mintHonorary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintJudge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_quantities\",\"type\":\"uint8\"}],\"name\":\"mintRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_quantities\",\"type\":\"uint8\"}],\"name\":\"mintWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nbMintedCouncil\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nbMintedGuardian\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nbMintedHonorary\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nbMintedJudge\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nbMintedWhale\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"remainingCouncil\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"remainingGuardian\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"remainingHonorary\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"remainingJudge\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"remainingRandom\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"remainingWhale\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MetaLifeVehicle", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e90b78fd1e48f9522ce04e38979dd9b18bffed2f6a6e775afd6152c433fa7509"}