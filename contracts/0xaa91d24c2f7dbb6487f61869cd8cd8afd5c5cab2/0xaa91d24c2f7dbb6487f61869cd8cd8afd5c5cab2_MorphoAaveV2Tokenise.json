{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IMain.sol\\\";\\nimport \\\"./IRewardable.sol\\\";\\n\\n// Not used directly in the IAsset interface, but used by many consumers to save stack space\\nstruct Price {\\n    uint192 low; // {UoA/tok}\\n    uint192 high; // {UoA/tok}\\n}\\n\\n/**\\n * @title IAsset\\n * @notice Supertype. Any token that interacts with our system must be wrapped in an asset,\\n * whether it is used as RToken backing or not. Any token that can report a price in the UoA\\n * is eligible to be an asset.\\n */\\ninterface IAsset is IRewardable {\\n    /// Refresh saved price\\n    /// The Reserve protocol calls this at least once per transaction, before relying on\\n    /// the Asset's other functions.\\n    /// @dev Called immediately after deployment, before use\\n    function refresh() external;\\n\\n    /// Should not revert\\n    /// @return low {UoA/tok} The lower end of the price estimate\\n    /// @return high {UoA/tok} The upper end of the price estimate\\n    function price() external view returns (uint192 low, uint192 high);\\n\\n    /// Should not revert\\n    /// lotLow should be nonzero when the asset might be worth selling\\n    /// @return lotLow {UoA/tok} The lower end of the lot price estimate\\n    /// @return lotHigh {UoA/tok} The upper end of the lot price estimate\\n    function lotPrice() external view returns (uint192 lotLow, uint192 lotHigh);\\n\\n    /// @return {tok} The balance of the ERC20 in whole tokens\\n    function bal(address account) external view returns (uint192);\\n\\n    /// @return The ERC20 contract of the token with decimals() available\\n    function erc20() external view returns (IERC20Metadata);\\n\\n    /// @return The number of decimals in the ERC20; just for gas optimization\\n    function erc20Decimals() external view returns (uint8);\\n\\n    /// @return If the asset is an instance of ICollateral or not\\n    function isCollateral() external view returns (bool);\\n\\n    /// @return {UoA} The max trade volume, in UoA\\n    function maxTradeVolume() external view returns (uint192);\\n\\n    /// @return {s} The timestamp of the last refresh() that saved prices\\n    function lastSave() external view returns (uint48);\\n}\\n\\n// Used only in Testing. Strictly speaking an Asset does not need to adhere to this interface\\ninterface TestIAsset is IAsset {\\n    /// @return The address of the chainlink feed\\n    function chainlinkFeed() external view returns (AggregatorV3Interface);\\n\\n    /// {1} The max % deviation allowed by the oracle\\n    function oracleError() external view returns (uint192);\\n\\n    /// @return {s} Seconds that an oracle value is considered valid\\n    function oracleTimeout() external view returns (uint48);\\n\\n    /// @return {s} Seconds that the lotPrice should decay over, after stale price\\n    function priceTimeout() external view returns (uint48);\\n}\\n\\n/// CollateralStatus must obey a linear ordering. That is:\\n/// - being DISABLED is worse than being IFFY, or SOUND\\n/// - being IFFY is worse than being SOUND.\\nenum CollateralStatus {\\n    SOUND,\\n    IFFY, // When a peg is not holding or a chainlink feed is stale\\n    DISABLED // When the collateral has completely defaulted\\n}\\n\\n/// Upgrade-safe maximum operator for CollateralStatus\\nlibrary CollateralStatusComparator {\\n    /// @return Whether a is worse than b\\n    function worseThan(CollateralStatus a, CollateralStatus b) internal pure returns (bool) {\\n        return uint256(a) > uint256(b);\\n    }\\n}\\n\\n/**\\n * @title ICollateral\\n * @notice A subtype of Asset that consists of the tokens eligible to back the RToken.\\n */\\ninterface ICollateral is IAsset {\\n    /// Emitted whenever the collateral status is changed\\n    /// @param newStatus The old CollateralStatus\\n    /// @param newStatus The updated CollateralStatus\\n    event CollateralStatusChanged(\\n        CollateralStatus indexed oldStatus,\\n        CollateralStatus indexed newStatus\\n    );\\n\\n    /// @dev refresh()\\n    /// Refresh exchange rates and update default status.\\n    /// VERY IMPORTANT: In any valid implemntation, status() MUST become DISABLED in refresh() if\\n    /// refPerTok() has ever decreased since last call.\\n\\n    /// @return The canonical name of this collateral's target unit.\\n    function targetName() external view returns (bytes32);\\n\\n    /// @return The status of this collateral asset. (Is it defaulting? Might it soon?)\\n    function status() external view returns (CollateralStatus);\\n\\n    // ==== Exchange Rates ====\\n\\n    /// @return {ref/tok} Quantity of whole reference units per whole collateral tokens\\n    function refPerTok() external view returns (uint192);\\n\\n    /// @return {target/ref} Quantity of whole target units per whole reference unit in the peg\\n    function targetPerRef() external view returns (uint192);\\n}\\n\\n// Used only in Testing. Strictly speaking a Collateral does not need to adhere to this interface\\ninterface TestICollateral is TestIAsset, ICollateral {\\n    /// @return The epoch timestamp when the collateral will default from IFFY to DISABLED\\n    function whenDefault() external view returns (uint256);\\n\\n    /// @return The amount of time a collateral must be in IFFY status until being DISABLED\\n    function delayUntilDefault() external view returns (uint48);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\n\\n/// A serialization of the AssetRegistry to be passed around in the P1 impl for gas optimization\\nstruct Registry {\\n    IERC20[] erc20s;\\n    IAsset[] assets;\\n}\\n\\n/**\\n * @title IAssetRegistry\\n * @notice The AssetRegistry is in charge of maintaining the ERC20 tokens eligible\\n *   to be handled by the rest of the system. If an asset is in the registry, this means:\\n *      1. Its ERC20 contract has been vetted\\n *      2. The asset is the only asset for that ERC20\\n *      3. The asset can be priced in the UoA, usually via an oracle\\n */\\ninterface IAssetRegistry is IComponent {\\n    /// Emitted when an asset is added to the registry\\n    /// @param erc20 The ERC20 contract for the asset\\n    /// @param asset The asset contract added to the registry\\n    event AssetRegistered(IERC20 indexed erc20, IAsset indexed asset);\\n\\n    /// Emitted when an asset is removed from the registry\\n    /// @param erc20 The ERC20 contract for the asset\\n    /// @param asset The asset contract removed from the registry\\n    event AssetUnregistered(IERC20 indexed erc20, IAsset indexed asset);\\n\\n    // Initialization\\n    function init(IMain main_, IAsset[] memory assets_) external;\\n\\n    /// Fully refresh all asset state\\n    /// @custom:interaction\\n    function refresh() external;\\n\\n    /// Register `asset`\\n    /// If either the erc20 address or the asset was already registered, fail\\n    /// @return true if the erc20 address was not already registered.\\n    /// @custom:governance\\n    function register(IAsset asset) external returns (bool);\\n\\n    /// Register `asset` if and only if its erc20 address is already registered.\\n    /// If the erc20 address was not registered, revert.\\n    /// @return swapped If the asset was swapped for a previously-registered asset\\n    /// @custom:governance\\n    function swapRegistered(IAsset asset) external returns (bool swapped);\\n\\n    /// Unregister an asset, requiring that it is already registered\\n    /// @custom:governance\\n    function unregister(IAsset asset) external;\\n\\n    /// @return {s} The timestamp of the last refresh\\n    function lastRefresh() external view returns (uint48);\\n\\n    /// @return The corresponding asset for ERC20, or reverts if not registered\\n    function toAsset(IERC20 erc20) external view returns (IAsset);\\n\\n    /// @return The corresponding collateral, or reverts if unregistered or not collateral\\n    function toColl(IERC20 erc20) external view returns (ICollateral);\\n\\n    /// @return If the ERC20 is registered\\n    function isRegistered(IERC20 erc20) external view returns (bool);\\n\\n    /// @return A list of all registered ERC20s\\n    function erc20s() external view returns (IERC20[] memory);\\n\\n    /// @return reg The list of registered ERC20s and Assets, in the same order\\n    function getRegistry() external view returns (Registry memory reg);\\n\\n    /// @return The number of registered ERC20s\\n    function size() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBackingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IBroker.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./ITrading.sol\\\";\\n\\n/**\\n * @title IBackingManager\\n * @notice The BackingManager handles changes in the ERC20 balances that back an RToken.\\n *   - It computes which trades to perform, if any, and initiates these trades with the Broker.\\n *     - rebalance()\\n *   - If already collateralized, excess assets are transferred to RevenueTraders.\\n *     - forwardRevenue(IERC20[] calldata erc20s)\\n */\\ninterface IBackingManager is IComponent, ITrading {\\n    /// Emitted when the trading delay is changed\\n    /// @param oldVal The old trading delay\\n    /// @param newVal The new trading delay\\n    event TradingDelaySet(uint48 oldVal, uint48 newVal);\\n\\n    /// Emitted when the backing buffer is changed\\n    /// @param oldVal The old backing buffer\\n    /// @param newVal The new backing buffer\\n    event BackingBufferSet(uint192 oldVal, uint192 newVal);\\n\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        uint48 tradingDelay_,\\n        uint192 backingBuffer_,\\n        uint192 maxTradeSlippage_,\\n        uint192 minTradeVolume_\\n    ) external;\\n\\n    // Give RToken max allowance over a registered token\\n    /// @custom:refresher\\n    /// @custom:interaction\\n    function grantRTokenAllowance(IERC20) external;\\n\\n    /// Apply the overall backing policy using the specified TradeKind, taking a haircut if unable\\n    /// @param kind TradeKind.DUTCH_AUCTION or TradeKind.BATCH_AUCTION\\n    /// @custom:interaction RCEI\\n    function rebalance(TradeKind kind) external;\\n\\n    /// Forward revenue to RevenueTraders; reverts if not fully collateralized\\n    /// @param erc20s The tokens to forward\\n    /// @custom:interaction RCEI\\n    function forwardRevenue(IERC20[] calldata erc20s) external;\\n}\\n\\ninterface TestIBackingManager is IBackingManager, TestITrading {\\n    function tradingDelay() external view returns (uint48);\\n\\n    function backingBuffer() external view returns (uint192);\\n\\n    function setTradingDelay(uint48 val) external;\\n\\n    function setBackingBuffer(uint192 val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasketHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\n\\nstruct BasketRange {\\n    uint192 bottom; // {BU}\\n    uint192 top; // {BU}\\n}\\n\\n/**\\n * @title IBasketHandler\\n * @notice The BasketHandler aims to maintain a reference basket of constant target unit amounts.\\n * When a collateral token defaults, a new reference basket of equal target units is set.\\n * When _all_ collateral tokens default for a target unit, only then is the basket allowed to fall\\n *   in terms of target unit amounts. The basket is considered defaulted in this case.\\n */\\ninterface IBasketHandler is IComponent {\\n    /// Emitted when the prime basket is set\\n    /// @param erc20s The collateral tokens for the prime basket\\n    /// @param targetAmts {target/BU} A list of quantities of target unit per basket unit\\n    /// @param targetNames Each collateral token's targetName\\n    event PrimeBasketSet(IERC20[] erc20s, uint192[] targetAmts, bytes32[] targetNames);\\n\\n    /// Emitted when the reference basket is set\\n    /// @param nonce {basketNonce} The basket nonce\\n    /// @param erc20s The list of collateral tokens in the reference basket\\n    /// @param refAmts {ref/BU} The reference amounts of the basket collateral tokens\\n    /// @param disabled True when the list of erc20s + refAmts may not be correct\\n    event BasketSet(uint256 indexed nonce, IERC20[] erc20s, uint192[] refAmts, bool disabled);\\n\\n    /// Emitted when a backup config is set for a target unit\\n    /// @param targetName The name of the target unit as a bytes32\\n    /// @param max The max number to use from `erc20s`\\n    /// @param erc20s The set of backup collateral tokens\\n    event BackupConfigSet(bytes32 indexed targetName, uint256 max, IERC20[] erc20s);\\n\\n    /// Emitted when the warmup period is changed\\n    /// @param oldVal The old warmup period\\n    /// @param newVal The new warmup period\\n    event WarmupPeriodSet(uint48 oldVal, uint48 newVal);\\n\\n    /// Emitted when the status of a basket has changed\\n    /// @param oldStatus The previous basket status\\n    /// @param newStatus The new basket status\\n    event BasketStatusChanged(CollateralStatus oldStatus, CollateralStatus newStatus);\\n\\n    // Initialization\\n    function init(IMain main_, uint48 warmupPeriod_) external;\\n\\n    /// Set the prime basket\\n    /// @param erc20s The collateral tokens for the new prime basket\\n    /// @param targetAmts The target amounts (in) {target/BU} for the new prime basket\\n    ///                   required range: 1e9 values; absolute range irrelevant.\\n    /// @custom:governance\\n    function setPrimeBasket(IERC20[] memory erc20s, uint192[] memory targetAmts) external;\\n\\n    /// Set the backup configuration for a given target\\n    /// @param targetName The name of the target as a bytes32\\n    /// @param max The maximum number of collateral tokens to use from this target\\n    ///            Required range: 1-255\\n    /// @param erc20s A list of ordered backup collateral tokens\\n    /// @custom:governance\\n    function setBackupConfig(\\n        bytes32 targetName,\\n        uint256 max,\\n        IERC20[] calldata erc20s\\n    ) external;\\n\\n    /// Default the basket in order to schedule a basket refresh\\n    /// @custom:protected\\n    function disableBasket() external;\\n\\n    /// Governance-controlled setter to cause a basket switch explicitly\\n    /// @custom:governance\\n    /// @custom:interaction\\n    function refreshBasket() external;\\n\\n    /// Track the basket status changes\\n    /// @custom:refresher\\n    function trackStatus() external;\\n\\n    /// @return If the BackingManager has sufficient collateral to redeem the entire RToken supply\\n    function fullyCollateralized() external view returns (bool);\\n\\n    /// @return status The worst CollateralStatus of all collateral in the basket\\n    function status() external view returns (CollateralStatus status);\\n\\n    /// @return If the basket is ready to issue and trade\\n    function isReady() external view returns (bool);\\n\\n    /// @param erc20 The ERC20 token contract for the asset\\n    /// @return {tok/BU} The whole token quantity of token in the reference basket\\n    /// Returns 0 if erc20 is not registered or not in the basket\\n    /// Returns FIX_MAX (in lieu of +infinity) if Collateral.refPerTok() is 0.\\n    /// Otherwise, returns (token's basket.refAmts / token's Collateral.refPerTok())\\n    function quantity(IERC20 erc20) external view returns (uint192);\\n\\n    /// Like quantity(), but unsafe because it DOES NOT CONFIRM THAT THE ASSET IS CORRECT\\n    /// @param erc20 The ERC20 token contract for the asset\\n    /// @param asset The registered asset plugin contract for the erc20\\n    /// @return {tok/BU} The whole token quantity of token in the reference basket\\n    /// Returns 0 if erc20 is not registered or not in the basket\\n    /// Returns FIX_MAX (in lieu of +infinity) if Collateral.refPerTok() is 0.\\n    /// Otherwise, returns (token's basket.refAmts / token's Collateral.refPerTok())\\n    function quantityUnsafe(IERC20 erc20, IAsset asset) external view returns (uint192);\\n\\n    /// @param amount {BU}\\n    /// @return erc20s The addresses of the ERC20 tokens in the reference basket\\n    /// @return quantities {qTok} The quantity of each ERC20 token to issue `amount` baskets\\n    function quote(uint192 amount, RoundingMode rounding)\\n        external\\n        view\\n        returns (address[] memory erc20s, uint256[] memory quantities);\\n\\n    /// Return the redemption value of `amount` BUs for a linear combination of historical baskets\\n    /// @param basketNonces An array of basket nonces to do redemption from\\n    /// @param portions {1} An array of Fix quantities that must add up to FIX_ONE\\n    /// @param amount {BU}\\n    /// @return erc20s The backing collateral erc20s\\n    /// @return quantities {qTok} ERC20 token quantities equal to `amount` BUs\\n    function quoteCustomRedemption(\\n        uint48[] memory basketNonces,\\n        uint192[] memory portions,\\n        uint192 amount\\n    ) external view returns (address[] memory erc20s, uint256[] memory quantities);\\n\\n    /// @return top {BU} The number of partial basket units: e.g max(coll.map((c) => c.balAsBUs())\\n    ///         bottom {BU} The number of whole basket units held by the account\\n    function basketsHeldBy(address account) external view returns (BasketRange memory);\\n\\n    /// Should not revert\\n    /// @return low {UoA/BU} The lower end of the price estimate\\n    /// @return high {UoA/BU} The upper end of the price estimate\\n    function price() external view returns (uint192 low, uint192 high);\\n\\n    /// Should not revert\\n    /// lotLow should be nonzero if a BU could be worth selling\\n    /// @return lotLow {UoA/tok} The lower end of the lot price estimate\\n    /// @return lotHigh {UoA/tok} The upper end of the lot price estimate\\n    function lotPrice() external view returns (uint192 lotLow, uint192 lotHigh);\\n\\n    /// @return timestamp The timestamp at which the basket was last set\\n    function timestamp() external view returns (uint48);\\n\\n    /// @return The current basket nonce, regardless of status\\n    function nonce() external view returns (uint48);\\n}\\n\\ninterface TestIBasketHandler is IBasketHandler {\\n    function warmupPeriod() external view returns (uint48);\\n\\n    function setWarmupPeriod(uint48 val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBroker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./IGnosis.sol\\\";\\nimport \\\"./ITrade.sol\\\";\\n\\nenum TradeKind {\\n    DUTCH_AUCTION,\\n    BATCH_AUCTION\\n}\\n\\n/// Cache of all (lot) prices for a pair to prevent re-lookup\\nstruct TradePrices {\\n    uint192 sellLow; // {UoA/sellTok} can be 0\\n    uint192 sellHigh; // {UoA/sellTok} should not be 0\\n    uint192 buyLow; // {UoA/buyTok} should not be 0\\n    uint192 buyHigh; // {UoA/buyTok} should not be 0 or FIX_MAX\\n}\\n\\n/// The data format that describes a request for trade with the Broker\\nstruct TradeRequest {\\n    IAsset sell;\\n    IAsset buy;\\n    uint256 sellAmount; // {qSellTok}\\n    uint256 minBuyAmount; // {qBuyTok}\\n}\\n\\n/**\\n * @title IBroker\\n * @notice The Broker deploys oneshot Trade contracts for Traders and monitors\\n *   the continued proper functioning of trading platforms.\\n */\\ninterface IBroker is IComponent {\\n    event GnosisSet(IGnosis oldVal, IGnosis newVal);\\n    event BatchTradeImplementationSet(ITrade oldVal, ITrade newVal);\\n    event DutchTradeImplementationSet(ITrade oldVal, ITrade newVal);\\n    event BatchAuctionLengthSet(uint48 oldVal, uint48 newVal);\\n    event DutchAuctionLengthSet(uint48 oldVal, uint48 newVal);\\n    event BatchTradeDisabledSet(bool prevVal, bool newVal);\\n    event DutchTradeDisabledSet(IERC20Metadata indexed erc20, bool prevVal, bool newVal);\\n\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        IGnosis gnosis_,\\n        ITrade batchTradeImplemention_,\\n        uint48 batchAuctionLength_,\\n        ITrade dutchTradeImplemention_,\\n        uint48 dutchAuctionLength_\\n    ) external;\\n\\n    /// Request a trade from the broker\\n    /// @dev Requires setting an allowance in advance\\n    /// @custom:interaction\\n    function openTrade(\\n        TradeKind kind,\\n        TradeRequest memory req,\\n        TradePrices memory prices\\n    ) external returns (ITrade);\\n\\n    /// Only callable by one of the trading contracts the broker deploys\\n    function reportViolation() external;\\n\\n    function batchTradeDisabled() external view returns (bool);\\n\\n    function dutchTradeDisabled(IERC20Metadata erc20) external view returns (bool);\\n}\\n\\ninterface TestIBroker is IBroker {\\n    function gnosis() external view returns (IGnosis);\\n\\n    function batchTradeImplementation() external view returns (ITrade);\\n\\n    function dutchTradeImplementation() external view returns (ITrade);\\n\\n    function batchAuctionLength() external view returns (uint48);\\n\\n    function dutchAuctionLength() external view returns (uint48);\\n\\n    function setGnosis(IGnosis newGnosis) external;\\n\\n    function setBatchTradeImplementation(ITrade newTradeImplementation) external;\\n\\n    function setBatchAuctionLength(uint48 newAuctionLength) external;\\n\\n    function setDutchTradeImplementation(ITrade newTradeImplementation) external;\\n\\n    function setDutchAuctionLength(uint48 newAuctionLength) external;\\n\\n    function enableBatchTrade() external;\\n\\n    function enableDutchTrade(IERC20Metadata erc20) external;\\n\\n    // only present on pre-3.0.0 Brokers; used by EasyAuction regression test\\n    function disabled() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./IMain.sol\\\";\\nimport \\\"./IVersioned.sol\\\";\\n\\n/**\\n * @title IComponent\\n * @notice A Component is the central building block of all our system contracts. Components\\n *   contain important state that must be migrated during upgrades, and they delegate\\n *   their ownership to Main's owner.\\n */\\ninterface IComponent is IVersioned {\\n    function main() external view returns (IMain);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\n\\nuint256 constant MAX_DISTRIBUTION = 1e4; // 10,000\\nuint8 constant MAX_DESTINATIONS = 100; // maximum number of RevenueShare destinations\\n\\nstruct RevenueShare {\\n    uint16 rTokenDist; // {revShare} A value between [0, 10,000]\\n    uint16 rsrDist; // {revShare} A value between [0, 10,000]\\n}\\n\\n/// Assumes no more than 100 independent distributions.\\nstruct RevenueTotals {\\n    uint24 rTokenTotal; // {revShare}\\n    uint24 rsrTotal; // {revShare}\\n}\\n\\n/**\\n * @title IDistributor\\n * @notice The Distributor Component maintains a revenue distribution table that dictates\\n *   how to divide revenue across the Furnace, StRSR, and any other destinations.\\n */\\ninterface IDistributor is IComponent {\\n    /// Emitted when a distribution is set\\n    /// @param dest The address set to receive the distribution\\n    /// @param rTokenDist The distribution of RToken that should go to `dest`\\n    /// @param rsrDist The distribution of RSR that should go to `dest`\\n    event DistributionSet(address indexed dest, uint16 rTokenDist, uint16 rsrDist);\\n\\n    /// Emitted when revenue is distributed\\n    /// @param erc20 The token being distributed, either RSR or the RToken itself\\n    /// @param source The address providing the revenue\\n    /// @param amount The amount of the revenue\\n    event RevenueDistributed(IERC20 indexed erc20, address indexed source, uint256 amount);\\n\\n    // Initialization\\n    function init(IMain main_, RevenueShare memory dist) external;\\n\\n    /// @custom:governance\\n    function setDistribution(address dest, RevenueShare memory share) external;\\n\\n    /// Distribute the `erc20` token across all revenue destinations\\n    /// Only callable by RevenueTraders\\n    /// @custom:protected\\n    function distribute(IERC20 erc20, uint256 amount) external;\\n\\n    /// @return revTotals The total of all  destinations\\n    function totals() external view returns (RevenueTotals memory revTotals);\\n}\\n\\ninterface TestIDistributor is IDistributor {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function FURNACE() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ST_RSR() external view returns (address);\\n\\n    /// @return rTokenDist The RToken distribution for the address\\n    /// @return rsrDist The RSR distribution for the address\\n    function distribution(address) external view returns (uint16 rTokenDist, uint16 rsrDist);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFurnace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\n\\n/**\\n * @title IFurnace\\n * @notice A helper contract to burn RTokens slowly and permisionlessly.\\n */\\ninterface IFurnace is IComponent {\\n    // Initialization\\n    function init(IMain main_, uint192 ratio_) external;\\n\\n    /// Emitted when the melting ratio is changed\\n    /// @param oldRatio The old ratio\\n    /// @param newRatio The new ratio\\n    event RatioSet(uint192 oldRatio, uint192 newRatio);\\n\\n    function ratio() external view returns (uint192);\\n\\n    ///    Needed value range: [0, 1], granularity 1e-9\\n    /// @custom:governance\\n    function setRatio(uint192) external;\\n\\n    /// Performs any RToken melting that has vested since the last payout.\\n    /// @custom:refresher\\n    function melt() external;\\n}\\n\\ninterface TestIFurnace is IFurnace {\\n    function lastPayout() external view returns (uint256);\\n\\n    function lastPayoutBal() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGnosis.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct GnosisAuctionData {\\n    IERC20 auctioningToken;\\n    IERC20 biddingToken;\\n    uint256 orderCancellationEndDate;\\n    uint256 auctionEndDate;\\n    bytes32 initialAuctionOrder;\\n    uint256 minimumBiddingAmountPerOrder;\\n    uint256 interimSumBidAmount;\\n    bytes32 interimOrder;\\n    bytes32 clearingPriceOrder;\\n    uint96 volumeClearingPriceOrder;\\n    bool minFundingThresholdNotReached;\\n    bool isAtomicClosureAllowed;\\n    uint256 feeNumerator;\\n    uint256 minFundingThreshold;\\n}\\n\\n/// The relevant portion of the interface of the live Gnosis EasyAuction contract\\n/// https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\ninterface IGnosis {\\n    function initiateAuction(\\n        IERC20 auctioningToken,\\n        IERC20 biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 auctionedSellAmount,\\n        uint96 minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256 auctionId);\\n\\n    function auctionData(uint256 auctionId) external view returns (GnosisAuctionData memory);\\n\\n    /// @param auctionId The external auction id\\n    /// @dev See here for decoding: https://git.io/JMang\\n    /// @return encodedOrder The order, encoded in a bytes 32\\n    function settleAuction(uint256 auctionId) external returns (bytes32 encodedOrder);\\n\\n    /// @return The numerator over a 1000-valued denominator\\n    function feeNumerator() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAssetRegistry.sol\\\";\\nimport \\\"./IBasketHandler.sol\\\";\\nimport \\\"./IBackingManager.sol\\\";\\nimport \\\"./IBroker.sol\\\";\\nimport \\\"./IGnosis.sol\\\";\\nimport \\\"./IFurnace.sol\\\";\\nimport \\\"./IDistributor.sol\\\";\\nimport \\\"./IRToken.sol\\\";\\nimport \\\"./IRevenueTrader.sol\\\";\\nimport \\\"./IStRSR.sol\\\";\\nimport \\\"./ITrading.sol\\\";\\nimport \\\"./IVersioned.sol\\\";\\n\\n// === Auth roles ===\\n\\nbytes32 constant OWNER = bytes32(bytes(\\\"OWNER\\\"));\\nbytes32 constant SHORT_FREEZER = bytes32(bytes(\\\"SHORT_FREEZER\\\"));\\nbytes32 constant LONG_FREEZER = bytes32(bytes(\\\"LONG_FREEZER\\\"));\\nbytes32 constant PAUSER = bytes32(bytes(\\\"PAUSER\\\"));\\n\\n/**\\n * Main is a central hub that maintains a list of Component contracts.\\n *\\n * Components:\\n *   - perform a specific function\\n *   - defer auth to Main\\n *   - usually (but not always) contain sizeable state that require a proxy\\n */\\nstruct Components {\\n    // Definitely need proxy\\n    IRToken rToken;\\n    IStRSR stRSR;\\n    IAssetRegistry assetRegistry;\\n    IBasketHandler basketHandler;\\n    IBackingManager backingManager;\\n    IDistributor distributor;\\n    IFurnace furnace;\\n    IBroker broker;\\n    IRevenueTrader rsrTrader;\\n    IRevenueTrader rTokenTrader;\\n}\\n\\ninterface IAuth is IAccessControlUpgradeable {\\n    /// Emitted when `unfreezeAt` is changed\\n    /// @param oldVal The old value of `unfreezeAt`\\n    /// @param newVal The new value of `unfreezeAt`\\n    event UnfreezeAtSet(uint48 oldVal, uint48 newVal);\\n\\n    /// Emitted when the short freeze duration governance param is changed\\n    /// @param oldDuration The old short freeze duration\\n    /// @param newDuration The new short freeze duration\\n    event ShortFreezeDurationSet(uint48 oldDuration, uint48 newDuration);\\n\\n    /// Emitted when the long freeze duration governance param is changed\\n    /// @param oldDuration The old long freeze duration\\n    /// @param newDuration The new long freeze duration\\n    event LongFreezeDurationSet(uint48 oldDuration, uint48 newDuration);\\n\\n    /// Emitted when the system is paused or unpaused for trading\\n    /// @param oldVal The old value of `tradingPaused`\\n    /// @param newVal The new value of `tradingPaused`\\n    event TradingPausedSet(bool oldVal, bool newVal);\\n\\n    /// Emitted when the system is paused or unpaused for issuance\\n    /// @param oldVal The old value of `issuancePaused`\\n    /// @param newVal The new value of `issuancePaused`\\n    event IssuancePausedSet(bool oldVal, bool newVal);\\n\\n    /**\\n     * Trading Paused: Disable everything except for OWNER actions, RToken.issue, RToken.redeem,\\n     * StRSR.stake, and StRSR.payoutRewards\\n     * Issuance Paused: Disable RToken.issue\\n     * Frozen: Disable everything except for OWNER actions + StRSR.stake (for governance)\\n     */\\n\\n    function tradingPausedOrFrozen() external view returns (bool);\\n\\n    function issuancePausedOrFrozen() external view returns (bool);\\n\\n    function frozen() external view returns (bool);\\n\\n    function shortFreeze() external view returns (uint48);\\n\\n    function longFreeze() external view returns (uint48);\\n\\n    // ====\\n\\n    // onlyRole(OWNER)\\n    function freezeForever() external;\\n\\n    // onlyRole(SHORT_FREEZER)\\n    function freezeShort() external;\\n\\n    // onlyRole(LONG_FREEZER)\\n    function freezeLong() external;\\n\\n    // onlyRole(OWNER)\\n    function unfreeze() external;\\n\\n    function pauseTrading() external;\\n\\n    function unpauseTrading() external;\\n\\n    function pauseIssuance() external;\\n\\n    function unpauseIssuance() external;\\n}\\n\\ninterface IComponentRegistry {\\n    // === Component setters/getters ===\\n\\n    event RTokenSet(IRToken indexed oldVal, IRToken indexed newVal);\\n\\n    function rToken() external view returns (IRToken);\\n\\n    event StRSRSet(IStRSR oldVal, IStRSR newVal);\\n\\n    function stRSR() external view returns (IStRSR);\\n\\n    event AssetRegistrySet(IAssetRegistry oldVal, IAssetRegistry newVal);\\n\\n    function assetRegistry() external view returns (IAssetRegistry);\\n\\n    event BasketHandlerSet(IBasketHandler oldVal, IBasketHandler newVal);\\n\\n    function basketHandler() external view returns (IBasketHandler);\\n\\n    event BackingManagerSet(IBackingManager oldVal, IBackingManager newVal);\\n\\n    function backingManager() external view returns (IBackingManager);\\n\\n    event DistributorSet(IDistributor oldVal, IDistributor newVal);\\n\\n    function distributor() external view returns (IDistributor);\\n\\n    event RSRTraderSet(IRevenueTrader oldVal, IRevenueTrader newVal);\\n\\n    function rsrTrader() external view returns (IRevenueTrader);\\n\\n    event RTokenTraderSet(IRevenueTrader oldVal, IRevenueTrader newVal);\\n\\n    function rTokenTrader() external view returns (IRevenueTrader);\\n\\n    event FurnaceSet(IFurnace oldVal, IFurnace newVal);\\n\\n    function furnace() external view returns (IFurnace);\\n\\n    event BrokerSet(IBroker oldVal, IBroker newVal);\\n\\n    function broker() external view returns (IBroker);\\n}\\n\\n/**\\n * @title IMain\\n * @notice The central hub for the entire system. Maintains components and an owner singleton role\\n */\\ninterface IMain is IVersioned, IAuth, IComponentRegistry {\\n    function poke() external; // not used in p1\\n\\n    // === Initialization ===\\n\\n    event MainInitialized();\\n\\n    function init(\\n        Components memory components,\\n        IERC20 rsr_,\\n        uint48 shortFreeze_,\\n        uint48 longFreeze_\\n    ) external;\\n\\n    function rsr() external view returns (IERC20);\\n}\\n\\ninterface TestIMain is IMain {\\n    /// @custom:governance\\n    function setShortFreeze(uint48) external;\\n\\n    /// @custom:governance\\n    function setLongFreeze(uint48) external;\\n\\n    function shortFreeze() external view returns (uint48);\\n\\n    function longFreeze() external view returns (uint48);\\n\\n    function longFreezes(address account) external view returns (uint256);\\n\\n    function tradingPaused() external view returns (bool);\\n\\n    function issuancePaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevenueTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./IBroker.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./ITrading.sol\\\";\\n\\n/**\\n * @title IRevenueTrader\\n * @notice The RevenueTrader is an extension of the trading mixin that trades all\\n *   assets at its address for a single target asset. There are two runtime instances\\n *   of the RevenueTrader, 1 for RToken and 1 for RSR.\\n */\\ninterface IRevenueTrader is IComponent, ITrading {\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        IERC20 tokenToBuy_,\\n        uint192 maxTradeSlippage_,\\n        uint192 minTradeVolume_\\n    ) external;\\n\\n    /// Distribute tokenToBuy to its destinations\\n    /// @dev Special-case of manageTokens()\\n    /// @custom:interaction\\n    function distributeTokenToBuy() external;\\n\\n    /// Return registered ERC20s to the BackingManager if distribution for tokenToBuy is 0\\n    /// @custom:interaction\\n    function returnTokens(IERC20[] memory erc20s) external;\\n\\n    /// Process some number of tokens\\n    /// If the tokenToBuy is included in erc20s, RevenueTrader will distribute it at end of the tx\\n    /// @param erc20s The ERC20s to manage; can be tokenToBuy or anything registered\\n    /// @param kinds The kinds of auctions to launch: DUTCH_AUCTION | BATCH_AUCTION\\n    /// @custom:interaction\\n    function manageTokens(IERC20[] memory erc20s, TradeKind[] memory kinds) external;\\n\\n    function tokenToBuy() external view returns (IERC20);\\n}\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface TestIRevenueTrader is IRevenueTrader, TestITrading {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./IMain.sol\\\";\\n\\n/**\\n * @title IRewardable\\n * @notice A simple interface mixin to support claiming of rewards.\\n */\\ninterface IRewardable {\\n    /// Emitted whenever a reward token balance is claimed\\n    event RewardsClaimed(IERC20 indexed erc20, uint256 amount);\\n\\n    /// Claim rewards earned by holding a balance of the ERC20 token\\n    /// Must emit `RewardsClaimed` for each token rewards are claimed for\\n    /// @custom:interaction\\n    function claimRewards() external;\\n}\\n\\n/**\\n * @title IRewardableComponent\\n * @notice A simple interface mixin to support claiming of rewards.\\n */\\ninterface IRewardableComponent is IRewardable {\\n    /// Claim rewards for a single ERC20\\n    /// Must emit `RewardsClaimed` for each token rewards are claimed for\\n    /// @custom:interaction\\n    function claimRewardsSingle(IERC20 erc20) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"../libraries/Throttle.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./IMain.sol\\\";\\nimport \\\"./IRewardable.sol\\\";\\n\\n/**\\n * @title IRToken\\n * @notice An RToken is an ERC20 that is permissionlessly issuable/redeemable and tracks an\\n *   exchange rate against a single unit: baskets, or {BU} in our type notation.\\n */\\ninterface IRToken is IComponent, IERC20MetadataUpgradeable, IERC20PermitUpgradeable {\\n    /// Emitted when an issuance of RToken occurs, whether it occurs via slow minting or not\\n    /// @param issuer The address holding collateral tokens\\n    /// @param recipient The address of the recipient of the RTokens\\n    /// @param amount The quantity of RToken being issued\\n    /// @param baskets The corresponding number of baskets\\n    event Issuance(\\n        address indexed issuer,\\n        address indexed recipient,\\n        uint256 amount,\\n        uint192 baskets\\n    );\\n\\n    /// Emitted when a redemption of RToken occurs\\n    /// @param redeemer The address holding RToken\\n    /// @param recipient The address of the account receiving the backing collateral tokens\\n    /// @param amount The quantity of RToken being redeemed\\n    /// @param baskets The corresponding number of baskets\\n    /// @param amount {qRTok} The amount of RTokens canceled\\n    event Redemption(\\n        address indexed redeemer,\\n        address indexed recipient,\\n        uint256 amount,\\n        uint192 baskets\\n    );\\n\\n    /// Emitted when the number of baskets needed changes\\n    /// @param oldBasketsNeeded Previous number of baskets units needed\\n    /// @param newBasketsNeeded New number of basket units needed\\n    event BasketsNeededChanged(uint192 oldBasketsNeeded, uint192 newBasketsNeeded);\\n\\n    /// Emitted when RToken is melted, i.e the RToken supply is decreased but basketsNeeded is not\\n    /// @param amount {qRTok}\\n    event Melted(uint256 amount);\\n\\n    /// Emitted when issuance SupplyThrottle params are set\\n    event IssuanceThrottleSet(ThrottleLib.Params oldVal, ThrottleLib.Params newVal);\\n\\n    /// Emitted when redemption SupplyThrottle params are set\\n    event RedemptionThrottleSet(ThrottleLib.Params oldVal, ThrottleLib.Params newVal);\\n\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        string memory name_,\\n        string memory symbol_,\\n        string memory mandate_,\\n        ThrottleLib.Params calldata issuanceThrottleParams,\\n        ThrottleLib.Params calldata redemptionThrottleParams\\n    ) external;\\n\\n    /// Issue an RToken with basket collateral\\n    /// @param amount {qRTok} The quantity of RToken to issue\\n    /// @custom:interaction\\n    function issue(uint256 amount) external;\\n\\n    /// Issue an RToken with basket collateral, to a particular recipient\\n    /// @param recipient The address to receive the issued RTokens\\n    /// @param amount {qRTok} The quantity of RToken to issue\\n    /// @custom:interaction\\n    function issueTo(address recipient, uint256 amount) external;\\n\\n    /// Redeem RToken for basket collateral\\n    /// @dev Use redeemCustom for non-current baskets\\n    /// @param amount {qRTok} The quantity {qRToken} of RToken to redeem\\n    /// @custom:interaction\\n    function redeem(uint256 amount) external;\\n\\n    /// Redeem RToken for basket collateral to a particular recipient\\n    /// @dev Use redeemCustom for non-current baskets\\n    /// @param recipient The address to receive the backing collateral tokens\\n    /// @param amount {qRTok} The quantity {qRToken} of RToken to redeem\\n    /// @custom:interaction\\n    function redeemTo(address recipient, uint256 amount) external;\\n\\n    /// Redeem RToken for a linear combination of historical baskets, to a particular recipient\\n    /// @dev Allows partial redemptions up to the minAmounts\\n    /// @param recipient The address to receive the backing collateral tokens\\n    /// @param amount {qRTok} The quantity {qRToken} of RToken to redeem\\n    /// @param basketNonces An array of basket nonces to do redemption from\\n    /// @param portions {1} An array of Fix quantities that must add up to FIX_ONE\\n    /// @param expectedERC20sOut An array of ERC20s expected out\\n    /// @param minAmounts {qTok} The minimum ERC20 quantities the caller should receive\\n    /// @custom:interaction\\n    function redeemCustom(\\n        address recipient,\\n        uint256 amount,\\n        uint48[] memory basketNonces,\\n        uint192[] memory portions,\\n        address[] memory expectedERC20sOut,\\n        uint256[] memory minAmounts\\n    ) external;\\n\\n    /// Mint an amount of RToken equivalent to baskets BUs, scaling basketsNeeded up\\n    /// Callable only by BackingManager\\n    /// @param baskets {BU} The number of baskets to mint RToken for\\n    /// @custom:protected\\n    function mint(uint192 baskets) external;\\n\\n    /// Melt a quantity of RToken from the caller's account\\n    /// @param amount {qRTok} The amount to be melted\\n    /// @custom:protected\\n    function melt(uint256 amount) external;\\n\\n    /// Burn an amount of RToken from caller's account and scale basketsNeeded down\\n    /// Callable only by BackingManager\\n    /// @custom:protected\\n    function dissolve(uint256 amount) external;\\n\\n    /// Set the number of baskets needed directly, callable only by the BackingManager\\n    /// @param basketsNeeded {BU} The number of baskets to target\\n    ///                      needed range: pretty interesting\\n    /// @custom:protected\\n    function setBasketsNeeded(uint192 basketsNeeded) external;\\n\\n    /// @return {BU} How many baskets are being targeted\\n    function basketsNeeded() external view returns (uint192);\\n\\n    /// @return {qRTok} The maximum issuance that can be performed in the current block\\n    function issuanceAvailable() external view returns (uint256);\\n\\n    /// @return {qRTok} The maximum redemption that can be performed in the current block\\n    function redemptionAvailable() external view returns (uint256);\\n}\\n\\ninterface TestIRToken is IRToken {\\n    function setIssuanceThrottleParams(ThrottleLib.Params calldata) external;\\n\\n    function setRedemptionThrottleParams(ThrottleLib.Params calldata) external;\\n\\n    function issuanceThrottleParams() external view returns (ThrottleLib.Params memory);\\n\\n    function redemptionThrottleParams() external view returns (ThrottleLib.Params memory);\\n\\n    function increaseAllowance(address, uint256) external returns (bool);\\n\\n    function decreaseAllowance(address, uint256) external returns (bool);\\n\\n    function monetizeDonations(IERC20) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStRSR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./IMain.sol\\\";\\n\\n/**\\n * @title IStRSR\\n * @notice An ERC20 token representing shares of the RSR over-collateralization pool.\\n *\\n * StRSR permits the BackingManager to take RSR in times of need. In return, the BackingManager\\n * benefits the StRSR pool with RSR rewards purchased with a portion of its revenue.\\n *\\n * In the absence of collateral default or losses due to slippage, StRSR should have a\\n * monotonically increasing exchange rate with respect to RSR, meaning that over time\\n * StRSR is redeemable for more RSR. It is non-rebasing.\\n */\\ninterface IStRSR is IERC20MetadataUpgradeable, IERC20PermitUpgradeable, IComponent {\\n    /// Emitted when RSR is staked\\n    /// @param era The era at time of staking\\n    /// @param staker The address of the staker\\n    /// @param rsrAmount {qRSR} How much RSR was staked\\n    /// @param stRSRAmount {qStRSR} How much stRSR was minted by this staking\\n    event Staked(\\n        uint256 indexed era,\\n        address indexed staker,\\n        uint256 rsrAmount,\\n        uint256 stRSRAmount\\n    );\\n\\n    /// Emitted when an unstaking is started\\n    /// @param draftId The id of the draft.\\n    /// @param draftEra The era of the draft.\\n    /// @param staker The address of the unstaker\\n    ///   The triple (staker, draftEra, draftId) is a unique ID\\n    /// @param rsrAmount {qRSR} How much RSR this unstaking will be worth, absent seizures\\n    /// @param stRSRAmount {qStRSR} How much stRSR was burned by this unstaking\\n    event UnstakingStarted(\\n        uint256 indexed draftId,\\n        uint256 indexed draftEra,\\n        address indexed staker,\\n        uint256 rsrAmount,\\n        uint256 stRSRAmount,\\n        uint256 availableAt\\n    );\\n\\n    /// Emitted when RSR is unstaked\\n    /// @param firstId The beginning of the range of draft IDs withdrawn in this transaction\\n    /// @param endId The end of range of draft IDs withdrawn in this transaction\\n    ///   (ID i was withdrawn if firstId <= i < endId)\\n    /// @param draftEra The era of the draft.\\n    ///   The triple (staker, draftEra, id) is a unique ID among drafts\\n    /// @param staker The address of the unstaker\\n\\n    /// @param rsrAmount {qRSR} How much RSR this unstaking was worth\\n    event UnstakingCompleted(\\n        uint256 indexed firstId,\\n        uint256 indexed endId,\\n        uint256 draftEra,\\n        address indexed staker,\\n        uint256 rsrAmount\\n    );\\n\\n    /// Emitted when RSR unstaking is cancelled\\n    /// @param firstId The beginning of the range of draft IDs withdrawn in this transaction\\n    /// @param endId The end of range of draft IDs withdrawn in this transaction\\n    ///   (ID i was withdrawn if firstId <= i < endId)\\n    /// @param draftEra The era of the draft.\\n    ///   The triple (staker, draftEra, id) is a unique ID among drafts\\n    /// @param staker The address of the unstaker\\n\\n    /// @param rsrAmount {qRSR} How much RSR this unstaking was worth\\n    event UnstakingCancelled(\\n        uint256 indexed firstId,\\n        uint256 indexed endId,\\n        uint256 draftEra,\\n        address indexed staker,\\n        uint256 rsrAmount\\n    );\\n\\n    /// Emitted whenever the exchange rate changes\\n    event ExchangeRateSet(uint192 oldVal, uint192 newVal);\\n\\n    /// Emitted whenever RSR are paids out\\n    event RewardsPaid(uint256 rsrAmt);\\n\\n    /// Emitted if all the RSR in the staking pool is seized and all balances are reset to zero.\\n    event AllBalancesReset(uint256 indexed newEra);\\n    /// Emitted if all the RSR in the unstakin pool is seized, and all ongoing unstaking is voided.\\n    event AllUnstakingReset(uint256 indexed newEra);\\n\\n    event UnstakingDelaySet(uint48 oldVal, uint48 newVal);\\n    event RewardRatioSet(uint192 oldVal, uint192 newVal);\\n    event WithdrawalLeakSet(uint192 oldVal, uint192 newVal);\\n\\n    // Initialization\\n    function init(\\n        IMain main_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint48 unstakingDelay_,\\n        uint192 rewardRatio_,\\n        uint192 withdrawalLeak_\\n    ) external;\\n\\n    /// Gather and payout rewards from rsrTrader\\n    /// @custom:interaction\\n    function payoutRewards() external;\\n\\n    /// Stakes an RSR `amount` on the corresponding RToken to earn yield and over-collateralized\\n    /// the system\\n    /// @param amount {qRSR}\\n    /// @custom:interaction\\n    function stake(uint256 amount) external;\\n\\n    /// Begins a delayed unstaking for `amount` stRSR\\n    /// @param amount {qStRSR}\\n    /// @custom:interaction\\n    function unstake(uint256 amount) external;\\n\\n    /// Complete delayed unstaking for the account, up to (but not including!) `endId`\\n    /// @custom:interaction\\n    function withdraw(address account, uint256 endId) external;\\n\\n    /// Cancel unstaking for the account, up to (but not including!) `endId`\\n    /// @custom:interaction\\n    function cancelUnstake(uint256 endId) external;\\n\\n    /// Seize RSR, only callable by main.backingManager()\\n    /// @custom:protected\\n    function seizeRSR(uint256 amount) external;\\n\\n    /// Reset all stakes and advance era\\n    /// @custom:governance\\n    function resetStakes() external;\\n\\n    /// Return the maximum valid value of endId such that withdraw(endId) should immediately work\\n    function endIdForWithdraw(address account) external view returns (uint256 endId);\\n\\n    /// @return {qRSR/qStRSR} The exchange rate between RSR and StRSR\\n    function exchangeRate() external view returns (uint192);\\n}\\n\\ninterface TestIStRSR is IStRSR {\\n    function rewardRatio() external view returns (uint192);\\n\\n    function setRewardRatio(uint192) external;\\n\\n    function unstakingDelay() external view returns (uint48);\\n\\n    function setUnstakingDelay(uint48) external;\\n\\n    function withdrawalLeak() external view returns (uint192);\\n\\n    function setWithdrawalLeak(uint192) external;\\n\\n    function increaseAllowance(address, uint256) external returns (bool);\\n\\n    function decreaseAllowance(address, uint256) external returns (bool);\\n\\n    /// @return {qStRSR/qRSR} The exchange rate between StRSR and RSR\\n    function exchangeRate() external view returns (uint192);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IBroker.sol\\\";\\n\\nenum TradeStatus {\\n    NOT_STARTED, // before init()\\n    OPEN, // after init() and before settle()\\n    CLOSED, // after settle()\\n    // === Intermediate-tx state ===\\n    PENDING // during init() or settle() (reentrancy protection)\\n}\\n\\n/**\\n * Simple generalized trading interface for all Trade contracts to obey\\n *\\n * Usage: if (canSettle()) settle()\\n */\\ninterface ITrade {\\n    /// Complete the trade and transfer tokens back to the origin trader\\n    /// @return soldAmt {qSellTok} The quantity of tokens sold\\n    /// @return boughtAmt {qBuyTok} The quantity of tokens bought\\n    function settle() external returns (uint256 soldAmt, uint256 boughtAmt);\\n\\n    function sell() external view returns (IERC20Metadata);\\n\\n    function buy() external view returns (IERC20Metadata);\\n\\n    /// @return The timestamp at which the trade is projected to become settle-able\\n    function endTime() external view returns (uint48);\\n\\n    /// @return True if the trade can be settled\\n    /// @dev Should be guaranteed to be true eventually as an invariant\\n    function canSettle() external view returns (bool);\\n\\n    /// @return TradeKind.DUTCH_AUCTION or TradeKind.BATCH_AUCTION\\n    // solhint-disable-next-line func-name-mixedcase\\n    function KIND() external view returns (TradeKind);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrading.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libraries/Fixed.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IComponent.sol\\\";\\nimport \\\"./ITrade.sol\\\";\\nimport \\\"./IRewardable.sol\\\";\\n\\n/**\\n * @title ITrading\\n * @notice Common events and refresher function for all Trading contracts\\n */\\ninterface ITrading is IComponent, IRewardableComponent {\\n    event MaxTradeSlippageSet(uint192 oldVal, uint192 newVal);\\n    event MinTradeVolumeSet(uint192 oldVal, uint192 newVal);\\n\\n    /// Emitted when a trade is started\\n    /// @param trade The one-time-use trade contract that was just deployed\\n    /// @param sell The token to sell\\n    /// @param buy The token to buy\\n    /// @param sellAmount {qSellTok} The quantity of the selling token\\n    /// @param minBuyAmount {qBuyTok} The minimum quantity of the buying token to accept\\n    event TradeStarted(\\n        ITrade indexed trade,\\n        IERC20 indexed sell,\\n        IERC20 indexed buy,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount\\n    );\\n\\n    /// Emitted after a trade ends\\n    /// @param trade The one-time-use trade contract\\n    /// @param sell The token to sell\\n    /// @param buy The token to buy\\n    /// @param sellAmount {qSellTok} The quantity of the token sold\\n    /// @param buyAmount {qBuyTok} The quantity of the token bought\\n    event TradeSettled(\\n        ITrade indexed trade,\\n        IERC20 indexed sell,\\n        IERC20 indexed buy,\\n        uint256 sellAmount,\\n        uint256 buyAmount\\n    );\\n\\n    /// Settle a single trade, expected to be used with multicall for efficient mass settlement\\n    /// @param sell The sell token in the trade\\n    /// @return The trade settled\\n    /// @custom:refresher\\n    function settleTrade(IERC20 sell) external returns (ITrade);\\n\\n    /// @return {%} The maximum trade slippage acceptable\\n    function maxTradeSlippage() external view returns (uint192);\\n\\n    /// @return {UoA} The minimum trade volume in UoA, applies to all assets\\n    function minTradeVolume() external view returns (uint192);\\n\\n    /// @return The ongoing trade for a sell token, or the zero address\\n    function trades(IERC20 sell) external view returns (ITrade);\\n\\n    /// @return The number of ongoing trades open\\n    function tradesOpen() external view returns (uint48);\\n\\n    /// @return The number of total trades ever opened\\n    function tradesNonce() external view returns (uint256);\\n}\\n\\ninterface TestITrading is ITrading {\\n    /// @custom:governance\\n    function setMaxTradeSlippage(uint192 val) external;\\n\\n    /// @custom:governance\\n    function setMinTradeVolume(uint192 val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVersioned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\ninterface IVersioned {\\n    function version() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Fixed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\n// solhint-disable func-name-mixedcase func-visibility\\npragma solidity ^0.8.19;\\n\\n/// @title FixedPoint, a fixed-point arithmetic library defining the custom type uint192\\n/// @author Matt Elder <matt.elder@reserve.org> and the Reserve Team <https://reserve.org>\\n\\n/** The logical type `uint192 ` is a 192 bit value, representing an 18-decimal Fixed-point\\n    fractional value.  This is what's described in the Solidity documentation as\\n    \\\"fixed192x18\\\" -- a value represented by 192 bits, that makes 18 digits available to\\n    the right of the decimal point.\\n\\n    The range of values that uint192 can represent is about [-1.7e20, 1.7e20].\\n    Unless a function explicitly says otherwise, it will fail on overflow.\\n    To be clear, the following should hold:\\n    toFix(0) == 0\\n    toFix(1) == 1e18\\n*/\\n\\n// Analysis notes:\\n//   Every function should revert iff its result is out of bounds.\\n//   Unless otherwise noted, when a rounding mode is given, that mode is applied to\\n//     a single division that may happen as the last step in the computation.\\n//   Unless otherwise noted, when a rounding mode is *not* given but is needed, it's FLOOR.\\n//   For each, we comment:\\n//   - @return is the value expressed  in \\\"value space\\\", where uint192(1e18) \\\"is\\\" 1.0\\n//   - as-ints: is the value expressed in \\\"implementation space\\\", where uint192(1e18) \\\"is\\\" 1e18\\n//   The \\\"@return\\\" expression is suitable for actually using the library\\n//   The \\\"as-ints\\\" expression is suitable for testing\\n\\n// A uint value passed to this library was out of bounds for uint192 operations\\nerror UIntOutOfBounds();\\nbytes32 constant UIntOutofBoundsHash = keccak256(abi.encodeWithSignature(\\\"UIntOutOfBounds()\\\"));\\n\\n// Used by P1 implementation for easier casting\\nuint256 constant FIX_ONE_256 = 1e18;\\nuint8 constant FIX_DECIMALS = 18;\\n\\n// If a particular uint192 is represented by the uint192 n, then the uint192 represents the\\n// value n/FIX_SCALE.\\nuint64 constant FIX_SCALE = 1e18;\\n\\n// FIX_SCALE Squared:\\nuint128 constant FIX_SCALE_SQ = 1e36;\\n\\n// The largest integer that can be converted to uint192 .\\n// This is a bit bigger than 3.1e39\\nuint192 constant FIX_MAX_INT = type(uint192).max / FIX_SCALE;\\n\\nuint192 constant FIX_ZERO = 0; // The uint192 representation of zero.\\nuint192 constant FIX_ONE = FIX_SCALE; // The uint192 representation of one.\\nuint192 constant FIX_MAX = type(uint192).max; // The largest uint192. (Not an integer!)\\nuint192 constant FIX_MIN = 0; // The smallest uint192.\\n\\n/// An enum that describes a rounding approach for converting to ints\\nenum RoundingMode {\\n    FLOOR, // Round towards zero\\n    ROUND, // Round to the nearest int\\n    CEIL // Round away from zero\\n}\\n\\nRoundingMode constant FLOOR = RoundingMode.FLOOR;\\nRoundingMode constant ROUND = RoundingMode.ROUND;\\nRoundingMode constant CEIL = RoundingMode.CEIL;\\n\\n/* @dev Solidity 0.8.x only allows you to change one of type or size per type conversion.\\n   Thus, all the tedious-looking double conversions like uint256(uint256 (foo))\\n   See: https://docs.soliditylang.org/en/v0.8.17/080-breaking-changes.html#new-restrictions\\n */\\n\\n/// Explicitly convert a uint256 to a uint192. Revert if the input is out of bounds.\\nfunction _safeWrap(uint256 x) pure returns (uint192) {\\n    if (FIX_MAX < x) revert UIntOutOfBounds();\\n    return uint192(x);\\n}\\n\\n/// Convert a uint to its Fix representation.\\n/// @return x\\n// as-ints: x * 1e18\\nfunction toFix(uint256 x) pure returns (uint192) {\\n    return _safeWrap(x * FIX_SCALE);\\n}\\n\\n/// Convert a uint to its fixed-point representation, and left-shift its value `shiftLeft`\\n/// decimal digits.\\n/// @return x * 10**shiftLeft\\n// as-ints: x * 10**(shiftLeft + 18)\\nfunction shiftl_toFix(uint256 x, int8 shiftLeft) pure returns (uint192) {\\n    return shiftl_toFix(x, shiftLeft, FLOOR);\\n}\\n\\n/// @return x * 10**shiftLeft\\n// as-ints: x * 10**(shiftLeft + 18)\\nfunction shiftl_toFix(\\n    uint256 x,\\n    int8 shiftLeft,\\n    RoundingMode rounding\\n) pure returns (uint192) {\\n    // conditions for avoiding overflow\\n    if (x == 0) return 0;\\n    if (shiftLeft <= -96) return (rounding == CEIL ? 1 : 0); // 0 < uint.max / 10**77 < 0.5\\n    if (40 <= shiftLeft) revert UIntOutOfBounds(); // 10**56 < FIX_MAX < 10**57\\n\\n    shiftLeft += 18;\\n\\n    uint256 coeff = 10**abs(shiftLeft);\\n    uint256 shifted = (shiftLeft >= 0) ? x * coeff : _divrnd(x, coeff, rounding);\\n\\n    return _safeWrap(shifted);\\n}\\n\\n/// Divide a uint by a uint192, yielding a uint192\\n/// This may also fail if the result is MIN_uint192! not fixing this for optimization's sake.\\n/// @return x / y\\n// as-ints: x * 1e36 / y\\nfunction divFix(uint256 x, uint192 y) pure returns (uint192) {\\n    // If we didn't have to worry about overflow, we'd just do `return x * 1e36 / _y`\\n    // If it's safe to do this operation the easy way, do it:\\n    if (x < uint256(type(uint256).max / FIX_SCALE_SQ)) {\\n        return _safeWrap(uint256(x * FIX_SCALE_SQ) / y);\\n    } else {\\n        return _safeWrap(mulDiv256(x, FIX_SCALE_SQ, y));\\n    }\\n}\\n\\n/// Divide a uint by a uint, yielding a  uint192\\n/// @return x / y\\n// as-ints: x * 1e18 / y\\nfunction divuu(uint256 x, uint256 y) pure returns (uint192) {\\n    return _safeWrap(mulDiv256(FIX_SCALE, x, y));\\n}\\n\\n/// @return min(x,y)\\n// as-ints: min(x,y)\\nfunction fixMin(uint192 x, uint192 y) pure returns (uint192) {\\n    return x < y ? x : y;\\n}\\n\\n/// @return max(x,y)\\n// as-ints: max(x,y)\\nfunction fixMax(uint192 x, uint192 y) pure returns (uint192) {\\n    return x > y ? x : y;\\n}\\n\\n/// @return absoluteValue(x,y)\\n// as-ints: absoluteValue(x,y)\\nfunction abs(int256 x) pure returns (uint256) {\\n    return x < 0 ? uint256(-x) : uint256(x);\\n}\\n\\n/// Divide two uints, returning a uint, using rounding mode `rounding`.\\n/// @return numerator / divisor\\n// as-ints: numerator / divisor\\nfunction _divrnd(\\n    uint256 numerator,\\n    uint256 divisor,\\n    RoundingMode rounding\\n) pure returns (uint256) {\\n    uint256 result = numerator / divisor;\\n\\n    if (rounding == FLOOR) return result;\\n\\n    if (rounding == ROUND) {\\n        if (numerator % divisor > (divisor - 1) / 2) {\\n            result++;\\n        }\\n    } else {\\n        if (numerator % divisor > 0) {\\n            result++;\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nlibrary FixLib {\\n    /// Again, all arithmetic functions fail if and only if the result is out of bounds.\\n\\n    /// Convert this fixed-point value to a uint. Round towards zero if needed.\\n    /// @return x\\n    // as-ints: x / 1e18\\n    function toUint(uint192 x) internal pure returns (uint136) {\\n        return toUint(x, FLOOR);\\n    }\\n\\n    /// Convert this uint192 to a uint\\n    /// @return x\\n    // as-ints: x / 1e18 with rounding\\n    function toUint(uint192 x, RoundingMode rounding) internal pure returns (uint136) {\\n        return uint136(_divrnd(uint256(x), FIX_SCALE, rounding));\\n    }\\n\\n    /// Return the uint192 shifted to the left by `decimal` digits\\n    /// (Similar to a bitshift but in base 10)\\n    /// @return x * 10**decimals\\n    // as-ints: x * 10**decimals\\n    function shiftl(uint192 x, int8 decimals) internal pure returns (uint192) {\\n        return shiftl(x, decimals, FLOOR);\\n    }\\n\\n    /// Return the uint192 shifted to the left by `decimal` digits\\n    /// (Similar to a bitshift but in base 10)\\n    /// @return x * 10**decimals\\n    // as-ints: x * 10**decimals\\n    function shiftl(\\n        uint192 x,\\n        int8 decimals,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        // Handle overflow cases\\n        if (x == 0) return 0;\\n        if (decimals <= -59) return (rounding == CEIL ? 1 : 0); // 59, because 1e58 > 2**192\\n        if (58 <= decimals) revert UIntOutOfBounds(); // 58, because x * 1e58 > 2 ** 192 if x != 0\\n\\n        uint256 coeff = uint256(10**abs(decimals));\\n        return _safeWrap(decimals >= 0 ? x * coeff : _divrnd(x, coeff, rounding));\\n    }\\n\\n    /// Add a uint192 to this uint192\\n    /// @return x + y\\n    // as-ints: x + y\\n    function plus(uint192 x, uint192 y) internal pure returns (uint192) {\\n        return x + y;\\n    }\\n\\n    /// Add a uint to this uint192\\n    /// @return x + y\\n    // as-ints: x + y*1e18\\n    function plusu(uint192 x, uint256 y) internal pure returns (uint192) {\\n        return _safeWrap(x + y * FIX_SCALE);\\n    }\\n\\n    /// Subtract a uint192 from this uint192\\n    /// @return x - y\\n    // as-ints: x - y\\n    function minus(uint192 x, uint192 y) internal pure returns (uint192) {\\n        return x - y;\\n    }\\n\\n    /// Subtract a uint from this uint192\\n    /// @return x - y\\n    // as-ints: x - y*1e18\\n    function minusu(uint192 x, uint256 y) internal pure returns (uint192) {\\n        return _safeWrap(uint256(x) - uint256(y * FIX_SCALE));\\n    }\\n\\n    /// Multiply this uint192 by a uint192\\n    /// Round truncated values to the nearest available value. 5e-19 rounds away from zero.\\n    /// @return x * y\\n    // as-ints: x * y/1e18  [division using ROUND, not FLOOR]\\n    function mul(uint192 x, uint192 y) internal pure returns (uint192) {\\n        return mul(x, y, ROUND);\\n    }\\n\\n    /// Multiply this uint192 by a uint192\\n    /// @return x * y\\n    // as-ints: x * y/1e18\\n    function mul(\\n        uint192 x,\\n        uint192 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return _safeWrap(_divrnd(uint256(x) * uint256(y), FIX_SCALE, rounding));\\n    }\\n\\n    /// Multiply this uint192 by a uint\\n    /// @return x * y\\n    // as-ints: x * y\\n    function mulu(uint192 x, uint256 y) internal pure returns (uint192) {\\n        return _safeWrap(x * y);\\n    }\\n\\n    /// Divide this uint192 by a uint192\\n    /// @return x / y\\n    // as-ints: x * 1e18 / y\\n    function div(uint192 x, uint192 y) internal pure returns (uint192) {\\n        return div(x, y, FLOOR);\\n    }\\n\\n    /// Divide this uint192 by a uint192\\n    /// @return x / y\\n    // as-ints: x * 1e18 / y\\n    function div(\\n        uint192 x,\\n        uint192 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        // Multiply-in FIX_SCALE before dividing by y to preserve precision.\\n        return _safeWrap(_divrnd(uint256(x) * FIX_SCALE, y, rounding));\\n    }\\n\\n    /// Divide this uint192 by a uint\\n    /// @return x / y\\n    // as-ints: x / y\\n    function divu(uint192 x, uint256 y) internal pure returns (uint192) {\\n        return divu(x, y, FLOOR);\\n    }\\n\\n    /// Divide this uint192 by a uint\\n    /// @return x / y\\n    // as-ints: x / y\\n    function divu(\\n        uint192 x,\\n        uint256 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return _safeWrap(_divrnd(x, y, rounding));\\n    }\\n\\n    uint64 constant FIX_HALF = uint64(FIX_SCALE) / 2;\\n\\n    /// Raise this uint192 to a nonnegative integer power. Requires that x_ <= FIX_ONE\\n    /// Gas cost is O(lg(y)), precision is +- 1e-18.\\n    /// @return x_ ** y\\n    // as-ints: x_ ** y / 1e18**(y-1)    <- technically correct for y = 0. :D\\n    function powu(uint192 x_, uint48 y) internal pure returns (uint192) {\\n        require(x_ <= FIX_ONE);\\n        if (y == 1) return x_;\\n        if (x_ == FIX_ONE || y == 0) return FIX_ONE;\\n        uint256 x = uint256(x_) * FIX_SCALE; // x is D36\\n        uint256 result = FIX_SCALE_SQ; // result is D36\\n        while (true) {\\n            if (y & 1 == 1) result = (result * x + FIX_SCALE_SQ / 2) / FIX_SCALE_SQ;\\n            if (y <= 1) break;\\n            y = (y >> 1);\\n            x = (x * x + FIX_SCALE_SQ / 2) / FIX_SCALE_SQ;\\n        }\\n        return _safeWrap(result / FIX_SCALE);\\n    }\\n\\n    /// Comparison operators...\\n    function lt(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x < y;\\n    }\\n\\n    function lte(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x <= y;\\n    }\\n\\n    function gt(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x > y;\\n    }\\n\\n    function gte(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x >= y;\\n    }\\n\\n    function eq(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x == y;\\n    }\\n\\n    function neq(uint192 x, uint192 y) internal pure returns (bool) {\\n        return x != y;\\n    }\\n\\n    /// Return whether or not this uint192 is less than epsilon away from y.\\n    /// @return |x - y| < epsilon\\n    // as-ints: |x - y| < epsilon\\n    function near(\\n        uint192 x,\\n        uint192 y,\\n        uint192 epsilon\\n    ) internal pure returns (bool) {\\n        uint192 diff = x <= y ? y - x : x - y;\\n        return diff < epsilon;\\n    }\\n\\n    // ================ Chained Operations ================\\n    // The operation foo_bar() always means:\\n    //   Do foo() followed by bar(), and overflow only if the _end_ result doesn't fit in an uint192\\n\\n    /// Shift this uint192 left by `decimals` digits, and convert to a uint\\n    /// @return x * 10**decimals\\n    // as-ints: x * 10**(decimals - 18)\\n    function shiftl_toUint(uint192 x, int8 decimals) internal pure returns (uint256) {\\n        return shiftl_toUint(x, decimals, FLOOR);\\n    }\\n\\n    /// Shift this uint192 left by `decimals` digits, and convert to a uint.\\n    /// @return x * 10**decimals\\n    // as-ints: x * 10**(decimals - 18)\\n    function shiftl_toUint(\\n        uint192 x,\\n        int8 decimals,\\n        RoundingMode rounding\\n    ) internal pure returns (uint256) {\\n        // Handle overflow cases\\n        if (x == 0) return 0; // always computable, no matter what decimals is\\n        if (decimals <= -42) return (rounding == CEIL ? 1 : 0);\\n        if (96 <= decimals) revert UIntOutOfBounds();\\n\\n        decimals -= 18; // shift so that toUint happens at the same time.\\n\\n        uint256 coeff = uint256(10**abs(decimals));\\n        return decimals >= 0 ? uint256(x * coeff) : uint256(_divrnd(x, coeff, rounding));\\n    }\\n\\n    /// Multiply this uint192 by a uint, and output the result as a uint\\n    /// @return x * y\\n    // as-ints: x * y / 1e18\\n    function mulu_toUint(uint192 x, uint256 y) internal pure returns (uint256) {\\n        return mulDiv256(uint256(x), y, FIX_SCALE);\\n    }\\n\\n    /// Multiply this uint192 by a uint, and output the result as a uint\\n    /// @return x * y\\n    // as-ints: x * y / 1e18\\n    function mulu_toUint(\\n        uint192 x,\\n        uint256 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint256) {\\n        return mulDiv256(uint256(x), y, FIX_SCALE, rounding);\\n    }\\n\\n    /// Multiply this uint192 by a uint192 and output the result as a uint\\n    /// @return x * y\\n    // as-ints: x * y / 1e36\\n    function mul_toUint(uint192 x, uint192 y) internal pure returns (uint256) {\\n        return mulDiv256(uint256(x), uint256(y), FIX_SCALE_SQ);\\n    }\\n\\n    /// Multiply this uint192 by a uint192 and output the result as a uint\\n    /// @return x * y\\n    // as-ints: x * y / 1e36\\n    function mul_toUint(\\n        uint192 x,\\n        uint192 y,\\n        RoundingMode rounding\\n    ) internal pure returns (uint256) {\\n        return mulDiv256(uint256(x), uint256(y), FIX_SCALE_SQ, rounding);\\n    }\\n\\n    /// Compute x * y / z avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function muluDivu(\\n        uint192 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint192) {\\n        return muluDivu(x, y, z, FLOOR);\\n    }\\n\\n    /// Compute x * y / z, avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function muluDivu(\\n        uint192 x,\\n        uint256 y,\\n        uint256 z,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return _safeWrap(mulDiv256(x, y, z, rounding));\\n    }\\n\\n    /// Compute x * y / z on Fixes, avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function mulDiv(\\n        uint192 x,\\n        uint192 y,\\n        uint192 z\\n    ) internal pure returns (uint192) {\\n        return mulDiv(x, y, z, FLOOR);\\n    }\\n\\n    /// Compute x * y / z on Fixes, avoiding intermediate overflow\\n    /// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n    /// @return x * y / z\\n    // as-ints: x * y / z\\n    function mulDiv(\\n        uint192 x,\\n        uint192 y,\\n        uint192 z,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        return _safeWrap(mulDiv256(x, y, z, rounding));\\n    }\\n\\n    // === safe*() ===\\n\\n    /// Multiply two fixes, rounding up to FIX_MAX and down to 0\\n    /// @param a First param to multiply\\n    /// @param b Second param to multiply\\n    function safeMul(\\n        uint192 a,\\n        uint192 b,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        // untestable:\\n        //      a will never = 0 here because of the check in _price()\\n        if (a == 0 || b == 0) return 0;\\n        // untestable:\\n        //      a = FIX_MAX iff b = 0\\n        if (a == FIX_MAX || b == FIX_MAX) return FIX_MAX;\\n\\n        // return FIX_MAX instead of throwing overflow errors.\\n        unchecked {\\n            // p and mul *are* Fix values, so have 18 decimals (D18)\\n            uint256 rawDelta = uint256(b) * a; // {D36} = {D18} * {D18}\\n            // if we overflowed, then return FIX_MAX\\n            if (rawDelta / b != a) return FIX_MAX;\\n            uint256 shiftDelta = rawDelta;\\n\\n            // add in rounding\\n            if (rounding == RoundingMode.ROUND) shiftDelta += (FIX_ONE / 2);\\n            else if (rounding == RoundingMode.CEIL) shiftDelta += FIX_ONE - 1;\\n\\n            // untestable (here there be dragons):\\n            // (below explanation is for the ROUND case, but it extends to the FLOOR/CEIL too)\\n            //          A)  shiftDelta = rawDelta + (FIX_ONE / 2)\\n            //      shiftDelta overflows if:\\n            //          B)  shiftDelta = MAX_UINT256 - FIX_ONE/2 + 1\\n            //              rawDelta + (FIX_ONE/2) = MAX_UINT256 - FIX_ONE/2 + 1\\n            //              b * a = MAX_UINT256 - FIX_ONE + 1\\n            //      therefore shiftDelta overflows if:\\n            //          C)  b = (MAX_UINT256 - FIX_ONE + 1) / a\\n            //      MAX_UINT256 ~= 1e77 , FIX_MAX ~= 6e57 (6e20 difference in magnitude)\\n            //      a <= 1e21 (MAX_TARGET_AMT)\\n            //      a must be between 1e19 & 1e20 in order for b in (C) to be uint192,\\n            //      but a would have to be < 1e18 in order for (A) to overflow\\n            if (shiftDelta < rawDelta) return FIX_MAX;\\n\\n            // return FIX_MAX if return result would truncate\\n            if (shiftDelta / FIX_ONE > FIX_MAX) return FIX_MAX;\\n\\n            // return _div(rawDelta, FIX_ONE, rounding)\\n            return uint192(shiftDelta / FIX_ONE); // {D18} = {D36} / {D18}\\n        }\\n    }\\n\\n    /// Divide two fixes, rounding up to FIX_MAX and down to 0\\n    /// @param a Numerator\\n    /// @param b Denominator\\n    function safeDiv(\\n        uint192 a,\\n        uint192 b,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192) {\\n        if (a == 0) return 0;\\n        if (b == 0) return FIX_MAX;\\n\\n        uint256 raw = _divrnd(FIX_ONE_256 * a, uint256(b), rounding);\\n        if (raw >= FIX_MAX) return FIX_MAX;\\n        return uint192(raw); // don't need _safeWrap\\n    }\\n\\n    /// Multiplies two fixes and divide by a third\\n    /// @param a First to multiply\\n    /// @param b Second to multiply\\n    /// @param c Denominator\\n    function safeMulDiv(\\n        uint192 a,\\n        uint192 b,\\n        uint192 c,\\n        RoundingMode rounding\\n    ) internal pure returns (uint192 result) {\\n        if (a == 0 || b == 0) return 0;\\n        if (a == FIX_MAX || b == FIX_MAX || c == 0) return FIX_MAX;\\n\\n        uint256 result_256;\\n        unchecked {\\n            (uint256 hi, uint256 lo) = fullMul(a, b);\\n            if (hi >= c) return FIX_MAX;\\n            uint256 mm = mulmod(a, b, c);\\n            if (mm > lo) hi -= 1;\\n            lo -= mm;\\n            uint256 pow2 = c & (0 - c);\\n\\n            uint256 c_256 = uint256(c);\\n            // Warning: Should not access c below this line\\n\\n            c_256 /= pow2;\\n            lo /= pow2;\\n            lo += hi * ((0 - pow2) / pow2 + 1);\\n            uint256 r = 1;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            r *= 2 - c_256 * r;\\n            result_256 = lo * r;\\n\\n            // Apply rounding\\n            if (rounding == CEIL) {\\n                if (mm > 0) result_256 += 1;\\n            } else if (rounding == ROUND) {\\n                if (mm > ((c_256 - 1) / 2)) result_256 += 1;\\n            }\\n        }\\n\\n        if (result_256 >= FIX_MAX) return FIX_MAX;\\n        return uint192(result_256);\\n    }\\n}\\n\\n// ================ a couple pure-uint helpers================\\n// as-ints comments are omitted here, because they're the same as @return statements, because\\n// these are all pure uint functions\\n\\n/// Return (x*y/z), avoiding intermediate overflow.\\n//  Adapted from sources:\\n//    https://medium.com/coinmonks/4db014e080b1, https://medium.com/wicketh/afa55870a65\\n//    and quite a few of the other excellent \\\"Mathemagic\\\" posts from https://medium.com/wicketh\\n/// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n/// @return result x * y / z\\nfunction mulDiv256(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z\\n) pure returns (uint256 result) {\\n    unchecked {\\n        (uint256 hi, uint256 lo) = fullMul(x, y);\\n        if (hi >= z) revert UIntOutOfBounds();\\n        uint256 mm = mulmod(x, y, z);\\n        if (mm > lo) hi -= 1;\\n        lo -= mm;\\n        uint256 pow2 = z & (0 - z);\\n        z /= pow2;\\n        lo /= pow2;\\n        lo += hi * ((0 - pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        result = lo * r;\\n    }\\n}\\n\\n/// Return (x*y/z), avoiding intermediate overflow.\\n/// @dev Only use if you need to avoid overflow; costlier than x * y / z\\n/// @return x * y / z\\nfunction mulDiv256(\\n    uint256 x,\\n    uint256 y,\\n    uint256 z,\\n    RoundingMode rounding\\n) pure returns (uint256) {\\n    uint256 result = mulDiv256(x, y, z);\\n    if (rounding == FLOOR) return result;\\n\\n    uint256 mm = mulmod(x, y, z);\\n    if (rounding == CEIL) {\\n        if (mm > 0) result += 1;\\n    } else {\\n        if (mm > ((z - 1) / 2)) result += 1; // z should be z-1\\n    }\\n    return result;\\n}\\n\\n/// Return (x*y) as a \\\"virtual uint512\\\" (lo, hi), representing (hi*2**256 + lo)\\n///   Adapted from sources:\\n///   https://medium.com/wicketh/27650fec525d, https://medium.com/coinmonks/4db014e080b1\\n/// @dev Intended to be internal to this library\\n/// @return hi (hi, lo) satisfies  hi*(2**256) + lo == x * y\\n/// @return lo (paired with `hi`)\\nfunction fullMul(uint256 x, uint256 y) pure returns (uint256 hi, uint256 lo) {\\n    unchecked {\\n        uint256 mm = mulmod(x, y, uint256(0) - uint256(1));\\n        lo = x * y;\\n        hi = mm - lo;\\n        if (mm < lo) hi -= 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Throttle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport \\\"./Fixed.sol\\\";\\n\\nuint48 constant ONE_HOUR = 3600; // {seconds/hour}\\n\\n/**\\n * @title ThrottleLib\\n * A library that implements a usage throttle that can be used to ensure net issuance\\n * or net redemption for an RToken never exceeds some bounds per unit time (hour).\\n *\\n * It is expected for the RToken to use this library with two instances, one for issuance\\n * and one for redemption. Issuance causes the available redemption amount to increase, and\\n * visa versa.\\n */\\nlibrary ThrottleLib {\\n    using FixLib for uint192;\\n\\n    struct Params {\\n        uint256 amtRate; // {qRTok/hour} a quantity of RToken hourly; cannot be 0\\n        uint192 pctRate; // {1/hour} a fraction of RToken hourly; can be 0\\n    }\\n\\n    struct Throttle {\\n        // === Gov params ===\\n        Params params;\\n        // === Cache ===\\n        uint48 lastTimestamp; // {seconds}\\n        uint256 lastAvailable; // {qRTok}\\n    }\\n\\n    /// Reverts if usage amount exceeds available amount\\n    /// @param supply {qRTok} Total RToken supply beforehand\\n    /// @param amount {qRTok} Amount of RToken to use. Should be negative for the issuance\\n    ///   throttle during redemption and for the redemption throttle during issuance.\\n    function useAvailable(\\n        Throttle storage throttle,\\n        uint256 supply,\\n        int256 amount\\n    ) internal {\\n        // untestable: amtRate will always be greater > 0 due to previous validations\\n        if (throttle.params.amtRate == 0 && throttle.params.pctRate == 0) return;\\n\\n        // Calculate hourly limit\\n        uint256 limit = hourlyLimit(throttle, supply); // {qRTok}\\n\\n        // Calculate available amount before supply change\\n        uint256 available = currentlyAvailable(throttle, limit);\\n\\n        // Update throttle.timestamp if available amount changed or at limit\\n        if (available != throttle.lastAvailable || available == limit) {\\n            throttle.lastTimestamp = uint48(block.timestamp);\\n        }\\n\\n        // Update throttle.lastAvailable\\n        if (amount > 0) {\\n            require(uint256(amount) <= available, \\\"supply change throttled\\\");\\n            available -= uint256(amount);\\n            // untestable: the final else statement, amount will never be 0\\n        } else if (amount < 0) {\\n            available += uint256(-amount);\\n        }\\n        throttle.lastAvailable = available;\\n    }\\n\\n    /// @param limit {qRTok/hour} The hourly limit\\n    /// @return available {qRTok} Amount currently available for consumption\\n    function currentlyAvailable(Throttle storage throttle, uint256 limit)\\n        internal\\n        view\\n        returns (uint256 available)\\n    {\\n        uint48 delta = uint48(block.timestamp) - throttle.lastTimestamp; // {seconds}\\n        available = throttle.lastAvailable + (limit * delta) / ONE_HOUR;\\n        if (available > limit) available = limit;\\n    }\\n\\n    /// @return limit {qRTok} The hourly limit\\n    function hourlyLimit(Throttle storage throttle, uint256 supply)\\n        internal\\n        view\\n        returns (uint256 limit)\\n    {\\n        Params storage params = throttle.params;\\n\\n        // Calculate hourly limit as: max(params.amtRate, supply.mul(params.pctRate))\\n        limit = (supply * params.pctRate) / FIX_ONE_256; // {qRTok}\\n        if (params.amtRate > limit) limit = params.amtRate;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/erc20/RewardableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity ^0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../interfaces/IRewardable.sol\\\";\\n\\n/**\\n * @title RewardableERC20\\n * @notice An abstract class that can be extended to create rewardable wrapper.\\n * @notice `_claimAssetRewards` keeps tracks of rewards by snapshotting the balance\\n * and calculating the difference between the current balance and the previous balance.\\n * @dev To inherit:\\n *   - override _claimAssetRewards()\\n *   - call ERC20 constructor elsewhere during construction\\n */\\nabstract contract RewardableERC20 is IRewardable, ERC20, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public immutable one; // {qShare/share}\\n    IERC20 public immutable rewardToken;\\n\\n    uint256 public rewardsPerShare; // {qRewards/share}\\n    mapping(address => uint256) public lastRewardsPerShare; // {qRewards/share}\\n    mapping(address => uint256) public accumulatedRewards; // {qRewards}\\n    mapping(address => uint256) public claimedRewards; // {qRewards}\\n\\n    // Used to keep track of how many reward the Vault has accumulated\\n    // Whenever _claimAndSyncRewards() is called we will calculate the difference\\n    // between the current balance and `lastRewardBalance` to figure out how much to distribute\\n    uint256 internal lastRewardBalance = 0;\\n\\n    /// @dev Extending class must ensure ERC20 constructor is called\\n    constructor(IERC20 _rewardToken, uint8 _decimals) {\\n        rewardToken = _rewardToken;\\n        one = 10**_decimals; // set via pass-in to prevent inheritance issues\\n    }\\n\\n    function claimRewards() external nonReentrant {\\n        _claimAndSyncRewards();\\n        _syncAccount(msg.sender);\\n        _claimAccountRewards(msg.sender);\\n    }\\n\\n    function _syncAccount(address account) internal {\\n        if (account == address(0)) return;\\n\\n        // {qRewards/share}\\n        uint256 accountRewardsPerShare = lastRewardsPerShare[account];\\n\\n        // {qShare}\\n        uint256 shares = balanceOf(account);\\n\\n        // {qRewards}\\n        uint256 _accumulatedRewards = accumulatedRewards[account];\\n\\n        // {qRewards/share}\\n        uint256 _rewardsPerShare = rewardsPerShare;\\n        if (accountRewardsPerShare < _rewardsPerShare) {\\n            // {qRewards/share}\\n            uint256 delta = _rewardsPerShare - accountRewardsPerShare;\\n\\n            // {qRewards} = {qRewards/share} * {qShare}\\n            _accumulatedRewards += (delta * shares) / one;\\n        }\\n        lastRewardsPerShare[account] = _rewardsPerShare;\\n        accumulatedRewards[account] = _accumulatedRewards;\\n    }\\n\\n    function _claimAndSyncRewards() internal virtual {\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            return;\\n        }\\n        _claimAssetRewards();\\n        uint256 balanceAfterClaimingRewards = rewardToken.balanceOf(address(this));\\n\\n        uint256 _rewardsPerShare = rewardsPerShare;\\n        uint256 _previousBalance = lastRewardBalance;\\n\\n        if (balanceAfterClaimingRewards > _previousBalance) {\\n            uint256 delta = balanceAfterClaimingRewards - _previousBalance;\\n            uint256 deltaPerShare = (delta * one) / _totalSupply;\\n\\n            balanceAfterClaimingRewards = _previousBalance + (deltaPerShare * _totalSupply) / one;\\n\\n            // {qRewards/share} += {qRewards} * {qShare/share} / {qShare}\\n            _rewardsPerShare += deltaPerShare;\\n        }\\n\\n        lastRewardBalance = balanceAfterClaimingRewards;\\n        rewardsPerShare = _rewardsPerShare;\\n    }\\n\\n    function _claimAccountRewards(address account) internal {\\n        uint256 claimableRewards = accumulatedRewards[account] - claimedRewards[account];\\n\\n        emit RewardsClaimed(IERC20(address(rewardToken)), claimableRewards);\\n\\n        if (claimableRewards == 0) {\\n            return;\\n        }\\n\\n        claimedRewards[account] = accumulatedRewards[account];\\n\\n        uint256 currentRewardTokenBalance = rewardToken.balanceOf(address(this));\\n\\n        // This is just to handle the edge case where totalSupply() == 0 and there\\n        // are still reward tokens in the contract.\\n        uint256 nonDistributed = currentRewardTokenBalance > lastRewardBalance\\n            ? currentRewardTokenBalance - lastRewardBalance\\n            : 0;\\n\\n        rewardToken.safeTransfer(account, claimableRewards);\\n\\n        currentRewardTokenBalance = rewardToken.balanceOf(address(this));\\n        lastRewardBalance = currentRewardTokenBalance > nonDistributed\\n            ? currentRewardTokenBalance - nonDistributed\\n            : 0;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal virtual override {\\n        _claimAndSyncRewards();\\n        _syncAccount(from);\\n        _syncAccount(to);\\n    }\\n\\n    /// === Must override ===\\n\\n    function _claimAssetRewards() internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/erc20/RewardableERC4626Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../../interfaces/IRewardable.sol\\\";\\nimport \\\"../../../vendor/oz/ERC4626.sol\\\";\\nimport \\\"./RewardableERC20.sol\\\";\\n\\n/**\\n * @title RewardableERC4626Vault\\n * @notice A transferrable ERC4626 vault wrapping an inner position that earns rewards.\\n *   Holding the vault token for a period of time earns the holder the right to\\n *   their prorata share of the global rewards earned during that time.\\n * @dev To inherit:\\n *   - override _claimAssetRewards()\\n *   - consider overriding _afterDeposit() and _beforeWithdraw()\\n */\\nabstract contract RewardableERC4626Vault is ERC4626, RewardableERC20 {\\n    // solhint-disable no-empty-blocks\\n    constructor(\\n        IERC20Metadata _asset,\\n        string memory _name,\\n        string memory _symbol,\\n        ERC20 _rewardToken\\n    )\\n        ERC4626(_asset, _name, _symbol)\\n        RewardableERC20(_rewardToken, _asset.decimals() + _decimalsOffset())\\n    {}\\n\\n    // solhint-enable no-empty-blocks\\n\\n    function decimals() public view virtual override(ERC4626, ERC20) returns (uint8) {\\n        return ERC4626.decimals();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(RewardableERC20, ERC20) {\\n        RewardableERC20._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _decimalsOffset() internal view virtual override returns (uint8) {\\n        return 9;\\n    }\\n\\n    /// === Must override ===\\n\\n    // function _claimAssetRewards() internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/morpho-aave/IMorpho.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\n\\nimport { IERC20Metadata } from \\\"../erc20/RewardableERC4626Vault.sol\\\";\\nimport { IERC4626 } from \\\"../../../vendor/oz/IERC4626.sol\\\";\\n\\ninterface IMorpho {\\n    function supply(address _poolToken, uint256 _amount) external;\\n\\n    function supply(\\n        address _poolToken,\\n        address _onBehalf,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdraw(address _poolToken, uint256 _amount) external;\\n}\\n\\ninterface IMorphoRewardsDistributor {\\n    function claim(\\n        address _account,\\n        uint256 _claimable,\\n        bytes32[] calldata _proof\\n    ) external;\\n}\\n\\n// Used by Morphos Aave V2 and Compound V2 vaults\\ninterface IMorphoUsersLens {\\n    function getCurrentSupplyBalanceInOf(address _poolToken, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 balanceInP2P,\\n            uint256 balanceOnPool,\\n            uint256 totalBalance\\n        );\\n}\\n\\ninterface IMorphoToken is IERC20Metadata {\\n    function setPublicCapability(bytes4 functionSig, bool enabled) external;\\n\\n    function setUserRole(\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) external;\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/morpho-aave/MorphoAaveV2TokenisedDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20, IERC20Metadata } from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport { IMorpho, IMorphoRewardsDistributor, IMorphoUsersLens } from \\\"./IMorpho.sol\\\";\\nimport { MorphoTokenisedDeposit, MorphoTokenisedDepositConfig } from \\\"./MorphoTokenisedDeposit.sol\\\";\\n\\nstruct MorphoAaveV2TokenisedDepositConfig {\\n    IMorpho morphoController;\\n    IMorphoUsersLens morphoLens;\\n    IMorphoRewardsDistributor rewardsDistributor;\\n    IERC20Metadata underlyingERC20;\\n    IERC20Metadata poolToken;\\n    ERC20 rewardToken;\\n}\\n\\ncontract MorphoAaveV2TokenisedDeposit is MorphoTokenisedDeposit {\\n    IMorphoUsersLens public immutable morphoLens;\\n\\n    constructor(MorphoAaveV2TokenisedDepositConfig memory config)\\n        MorphoTokenisedDeposit(\\n            MorphoTokenisedDepositConfig({\\n                morphoController: config.morphoController,\\n                rewardsDistributor: config.rewardsDistributor,\\n                underlyingERC20: config.underlyingERC20,\\n                poolToken: config.poolToken,\\n                rewardToken: config.rewardToken\\n            })\\n        )\\n    {\\n        morphoLens = config.morphoLens;\\n    }\\n\\n    function getMorphoPoolBalance(address _poolToken)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        (, , uint256 supplyBalance) = morphoLens.getCurrentSupplyBalanceInOf(\\n            _poolToken,\\n            address(this)\\n        );\\n        return supplyBalance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/plugins/assets/morpho-aave/MorphoTokenisedDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.19;\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20, IERC20Metadata } from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport { IMorpho, IMorphoRewardsDistributor, IMorphoUsersLens } from \\\"./IMorpho.sol\\\";\\nimport { RewardableERC4626Vault } from \\\"../erc20/RewardableERC4626Vault.sol\\\";\\n\\nstruct MorphoTokenisedDepositConfig {\\n    IMorpho morphoController;\\n    IMorphoRewardsDistributor rewardsDistributor;\\n    IERC20Metadata underlyingERC20;\\n    IERC20Metadata poolToken;\\n    ERC20 rewardToken;\\n}\\n\\nabstract contract MorphoTokenisedDeposit is RewardableERC4626Vault {\\n    IMorphoRewardsDistributor public immutable rewardsDistributor;\\n    IMorpho public immutable morphoController;\\n    address public immutable poolToken;\\n    address public immutable underlying;\\n\\n    constructor(MorphoTokenisedDepositConfig memory config)\\n        RewardableERC4626Vault(\\n            config.underlyingERC20,\\n            string.concat(\\\"Tokenised Morpho Position - \\\", config.poolToken.name()),\\n            string.concat(\\\"mrp-\\\", config.poolToken.symbol()),\\n            config.rewardToken\\n        )\\n    {\\n        underlying = address(config.underlyingERC20);\\n        morphoController = config.morphoController;\\n        poolToken = address(config.poolToken);\\n        rewardsDistributor = config.rewardsDistributor;\\n    }\\n\\n    function rewardTokenBalance(address account) external returns (uint256 claimableRewards) {\\n        _claimAndSyncRewards();\\n        _syncAccount(account);\\n        claimableRewards = accumulatedRewards[account] - claimedRewards[account];\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimAssetRewards() internal virtual override {}\\n\\n    function getMorphoPoolBalance(address poolToken) internal view virtual returns (uint256);\\n\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return getMorphoPoolBalance(poolToken);\\n    }\\n\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual override {\\n        SafeERC20.safeTransferFrom(IERC20(underlying), caller, address(this), assets);\\n        SafeERC20.safeApprove(IERC20(underlying), address(morphoController), assets);\\n        morphoController.supply(poolToken, assets);\\n\\n        _mint(receiver, shares);\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual override returns (uint8) {\\n        return 9;\\n    }\\n\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual override {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n        morphoController.withdraw(poolToken, assets);\\n\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(IERC20(underlying), receiver, assets);\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/oz/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n *\\n * code taken from openzeppelin-contracts, commit hash: eedca5d\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(\\n        IERC20 asset_,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return assets.mulDiv(totalSupply() + 10**_decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10**_decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/oz/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IMorpho\",\"name\":\"morphoController\",\"type\":\"address\"},{\"internalType\":\"contract IMorphoUsersLens\",\"name\":\"morphoLens\",\"type\":\"address\"},{\"internalType\":\"contract IMorphoRewardsDistributor\",\"name\":\"rewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"underlyingERC20\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct MorphoAaveV2TokenisedDepositConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"morphoController\",\"outputs\":[{\"internalType\":\"contract IMorpho\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"morphoLens\",\"outputs\":[{\"internalType\":\"contract IMorphoUsersLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"one\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"contract IMorphoRewardsDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MorphoAaveV2TokenisedDeposit", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000777777c9898d384f785ee44acfe945efdff5f3e0000000000000000000000000507fa343d0a90786d86c7cd885f5c49263a91ff40000000000000000000000003b14e5c73e0a56d607a8688098326fd4b4292135000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000003ed3b47dd13ec9a98b44e6204a523e766b2258110000000000000000000000009994e35db50125e0df82e4c2dde62496ce330999", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}