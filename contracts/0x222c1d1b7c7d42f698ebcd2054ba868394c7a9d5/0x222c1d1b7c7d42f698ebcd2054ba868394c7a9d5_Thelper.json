{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface ISwapRouterV3 {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    function exactInputSingle(ExactInputSingleParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountOut); // V3\r\n}\r\n\r\n//import \"github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\";\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeApprove: approve failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeTransfer: transfer failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::transferFrom: transferFrom failed\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract Thelper {\r\n    address public immutable _owner;\r\n    ISwapRouterV3 public _swapRouter =\r\n        ISwapRouterV3(0xE592427A0AEce92De3Edee1F18E0157C05861564); // UniswapV3 SwapRouter\r\n    address public _approveAddr =\r\n        address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function adminSetSwapRouter(address swapRouter, address approveAddr)\r\n        external\r\n    {\r\n        require(msg.sender == _owner, \"Only admin\");\r\n        _swapRouter = ISwapRouterV3(swapRouter);\r\n        _approveAddr = address(approveAddr);\r\n    }\r\n\r\n    function trade(\r\n        address tokenToSell,\r\n        address tokenToBuy,\r\n        uint24 uniswapV3PoolFee,\r\n        uint256 amountSellOptional\r\n    ) external {\r\n        require(msg.sender == _owner, \"Only admin\");\r\n\r\n        if (amountSellOptional == 0x0) {\r\n            amountSellOptional = IERC20(tokenToSell).balanceOf(address(this));\r\n        }\r\n\r\n        TransferHelper.safeApprove(\r\n            tokenToSell,\r\n            _approveAddr,\r\n            amountSellOptional\r\n        );\r\n\r\n        ISwapRouterV3.ExactInputSingleParams memory params = ISwapRouterV3\r\n            .ExactInputSingleParams(\r\n                tokenToSell, // tokenIn\r\n                tokenToBuy, // tokenOut\r\n                uniswapV3PoolFee, // fee\r\n                address(this), // recipient\r\n                block.timestamp + 1, // deadline now+1s\r\n                amountSellOptional, // amountIn\r\n                1, // amountOutMinimum\r\n                0 // sqrtPriceLimitX96\r\n            );\r\n        _swapRouter.exactInputSingle(params);\r\n        uint256 amountOut = IERC20(tokenToBuy).balanceOf(address(this));\r\n\r\n        TransferHelper.safeTransfer(tokenToBuy, msg.sender, amountOut);\r\n    }\r\n\r\n    function claimTokens(address _token) external {\r\n        if (_token == address(0x0)) {\r\n            payable(_owner).transfer(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 erc20token = IERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(address(this));\r\n        erc20token.transfer(_owner, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_approveAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouterV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveAddr\",\"type\":\"address\"}],\"name\":\"adminSetSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"uniswapV3PoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountSellOptional\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Thelper", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9b3de90990ca2c4480fa9217359d486685965347cd40ae8fe791fdeaf9c535b4"}