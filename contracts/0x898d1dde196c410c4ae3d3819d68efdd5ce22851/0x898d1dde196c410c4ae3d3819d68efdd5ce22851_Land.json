{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Land.sol\": {\r\n      \"content\": \"// https://farmland.build/\\n// https://twitter.com/landERC20721\\n// https://t.me/Land_Erc20721\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Metadata.sol\\\";\\n\\nimport { WrappedLand } from \\\"./WrappedLand.sol\\\";\\n\\nimport {Emissions} from \\\"./Emissions.sol\\\";\\n\\ninterface Receiver {\\n  function onERC721Received(\\n    address _operator,\\n    address _from,\\n    uint256 _tokenId,\\n    bytes calldata _data\\n  ) external returns (bytes4);\\n}\\n\\ninterface Router {\\n  function WETH() external pure returns (address);\\n  function factory() external pure returns (address);\\n  function addLiquidityETH(\\n    address,\\n    uint256,\\n    uint256,\\n    uint256,\\n    address,\\n    uint256\\n  ) external payable returns (uint256, uint256, uint256);\\n}\\n\\ninterface Factory {\\n  function createPair(address, address) external returns (address);\\n}\\n\\ncontract Land is Emissions {\\n  uint256 private constant UINT_MAX = type(uint256).max;\\n  uint256 private constant TOTAL_SUPPLY = 256;\\n  uint256 private constant LIQUIDITY_TOKENS = 32;\\n  Router private constant ROUTER =\\n    Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n  uint256 private constant M1 =\\n    0x5555555555555555555555555555555555555555555555555555555555555555;\\n  uint256 private constant M2 =\\n    0x3333333333333333333333333333333333333333333333333333333333333333;\\n  uint256 private constant M4 =\\n    0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\n  uint256 private constant H01 =\\n    0x0101010101010101010101010101010101010101010101010101010101010101;\\n  bytes32 private constant TRANSFER_TOPIC =\\n    keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"));\\n  bytes32 private constant APPROVAL_TOPIC =\\n    keccak256(bytes(\\\"Approval(address,address,uint256)\\\"));\\n\\n  uint256 public constant MINT_COST = 0.15 ether;\\n  uint256 public constant HOUSE_COST = 0.05 ether;\\n\\n  uint8 public constant decimals = 0;\\n\\n  struct User {\\n    bytes32 mask;\\n    mapping(address => uint256) allowance;\\n    mapping(address => bool) approved;\\n  }\\n\\n  struct Info {\\n    bytes32 salt;\\n    address pair;\\n    address owner;\\n    Metadata metadata;\\n    mapping(address => User) users;\\n    mapping(uint256 => address) approved;\\n    address[] holders;\\n  }\\n  Info private info;\\n\\n  mapping(bytes4 => bool) public supportsInterface;\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed tokenId\\n  );\\n  event ERC20Transfer(\\n    bytes32 indexed topic0,\\n    address indexed from,\\n    address indexed to,\\n    uint256 tokens\\n  ) anonymous;\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 indexed tokenId\\n  );\\n  event ERC20Approval(\\n    bytes32 indexed topic0,\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 tokens\\n  ) anonymous;\\n  event ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n  );\\n\\n  modifier _onlyOwner() {\\n    require(msg.sender == owner());\\n    _;\\n  }\\n\\n  constructor() {\\n    info.owner = tx.origin;\\n    info.metadata = new Metadata();\\n    supportsInterface[0x01ffc9a7] = true; // ERC-165\\n    supportsInterface[0x80ac58cd] = true; // ERC-721\\n    supportsInterface[0x5b5e139f] = true; // Metadata\\n    info.salt = keccak256(\\n      abi.encodePacked(\\\"Salt:\\\", blockhash(block.number - 1))\\n    );\\n  }\\n\\n  function setOwner(address _owner) external _onlyOwner {\\n    info.owner = _owner;\\n  }\\n\\n  function setMetadata(Metadata _metadata) external _onlyOwner {\\n    info.metadata = _metadata;\\n  }\\n\\n  function initialize() external {\\n    require(pair() == address(0x0));\\n\\n    address _this = address(this);\\n    info.users[_this].mask = bytes32(UINT_MAX);\\n    info.holders.push(_this);\\n    emit ERC20Transfer(TRANSFER_TOPIC, address(0x0), _this, TOTAL_SUPPLY);\\n    for (uint256 i = 0; i < TOTAL_SUPPLY; i++) {\\n      emit Transfer(address(0x0), _this, TOTAL_SUPPLY + i + 1);\\n    }\\n    _approveERC20(_this, address(ROUTER), LIQUIDITY_TOKENS);\\n    _transferERC20(_this, tx.origin, 32); // for wLAND LP\\n    _transferERC20(_this, msg.sender, 60); // for emissions\\n    _transferERC20(_this, owner(), 4); // developer tokens\\n  }\\n\\n  function initLP() payable external {\\n    require(msg.value > 0);\\n    address _weth = ROUTER.WETH();\\n    address _this = address(this);\\n    info.pair = Factory(ROUTER.factory()).createPair(_weth, _this);\\n    ROUTER.addLiquidityETH{ value: _this.balance }(\\n      _this,\\n      LIQUIDITY_TOKENS,\\n      0,\\n      0,\\n      owner(),\\n      block.timestamp\\n    );\\n  }\\n\\n  function mint() external payable {\\n    address _this = address(this);\\n    uint256 _available = balanceOf(_this);\\n    require(1 <= _available);\\n    uint256 _cost = 1 * MINT_COST;\\n    require(msg.value >= _cost);\\n    _transferERC20(_this, msg.sender, 1);\\n    payable(owner()).transfer(_cost);\\n    if (msg.value > _cost) {\\n      payable(msg.sender).transfer(msg.value - _cost);\\n    }\\n  }\\n\\n  function addHouse(uint256 tokenId) external payable {\\n    uint256 currentCount = houseCount[tokenId];\\n\\n    require(currentCount < 4, \\\"MAX houses\\\"); // max 4 houses\\n    require(msg.value >= HOUSE_COST);\\n\\n    payable(owner()).transfer(HOUSE_COST);\\n\\n    houseCount[tokenId]++;\\n    totalSupplyScaled++;\\n\\n    if (msg.value > HOUSE_COST) {\\n      payable(msg.sender).transfer(msg.value - HOUSE_COST);\\n    }\\n\\n\\n  }\\n\\n  function approve(address _spender, uint256 _tokens) external returns (bool) {\\n    if (_tokens > TOTAL_SUPPLY && _tokens <= 2 * TOTAL_SUPPLY) {\\n      _approveNFT(_spender, _tokens);\\n    } else {\\n      _approveERC20(msg.sender, _spender, _tokens);\\n    }\\n    return true;\\n  }\\n\\n  function setApprovalForAll(address _operator, bool _approved) external {\\n    info.users[msg.sender].approved[_operator] = _approved;\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\n  }\\n\\n  function transfer(address _to, uint256 _tokens) external returns (bool) {\\n    _transferERC20(msg.sender, _to, _tokens);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokens\\n  ) external returns (bool) {\\n    if (_tokens > TOTAL_SUPPLY && _tokens <= 2 * TOTAL_SUPPLY) {\\n      _transferNFT(_from, _to, _tokens);\\n    } else {\\n      uint256 _allowance = allowance(_from, msg.sender);\\n      require(_allowance >= _tokens);\\n      if (_allowance != UINT_MAX) {\\n        info.users[_from].allowance[msg.sender] -= _tokens;\\n      }\\n      _transferERC20(_from, _to, _tokens);\\n    }\\n    return true;\\n  }\\n\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  ) external {\\n    safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n  }\\n\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    bytes memory _data\\n  ) public {\\n    _transferNFT(_from, _to, _tokenId);\\n    uint32 _size;\\n    assembly {\\n      _size := extcodesize(_to)\\n    }\\n    if (_size > 0) {\\n      require(\\n        Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) ==\\n          0x150b7a02\\n      );\\n    }\\n  }\\n\\n  function bulkTransfer(address _to, uint256[] memory _tokenIds) external {\\n    _transferNFTs(_to, _tokenIds);\\n  }\\n\\n  function owner() public view returns (address) {\\n    return info.owner;\\n  }\\n\\n  function pair() public view returns (address) {\\n    return info.pair;\\n  }\\n\\n  function holders() public view returns (address[] memory) {\\n    return info.holders;\\n  }\\n\\n  function salt() external view returns (bytes32) {\\n    return info.salt;\\n  }\\n\\n  function metadata() external view returns (address) {\\n    return address(info.metadata);\\n  }\\n\\n  function name() external view returns (string memory) {\\n    return info.metadata.name();\\n  }\\n\\n  function symbol() external view returns (string memory) {\\n    return info.metadata.symbol();\\n  }\\n\\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\\n    return info.metadata.tokenURI(_tokenId, houseCount[_tokenId]);\\n  }\\n\\n  function totalSupply() public pure returns (uint256) {\\n    return TOTAL_SUPPLY;\\n  }\\n\\n  function maskOf(address _user) public view returns (bytes32) {\\n    return info.users[_user].mask;\\n  }\\n\\n  function balanceOf(address _user) public view returns (uint256) {\\n    return _popcount(maskOf(_user));\\n  }\\n\\n  function allowance(\\n    address _user,\\n    address _spender\\n  ) public view returns (uint256) {\\n    return info.users[_user].allowance[_spender];\\n  }\\n\\n  function ownerOf(uint256 _tokenId) public view returns (address) {\\n    unchecked {\\n      require(_tokenId > TOTAL_SUPPLY && _tokenId <= 2 * TOTAL_SUPPLY);\\n      bytes32 _mask = bytes32(1 << (_tokenId - TOTAL_SUPPLY - 1));\\n      address[] memory _holders = holders();\\n      for (uint256 i = 0; i < _holders.length; i++) {\\n        if (maskOf(_holders[i]) & _mask == _mask) {\\n          return _holders[i];\\n        }\\n      }\\n      return address(0x0);\\n    }\\n  }\\n\\n  function getApproved(uint256 _tokenId) public view returns (address) {\\n    require(_tokenId > TOTAL_SUPPLY && _tokenId <= 2 * TOTAL_SUPPLY);\\n    return info.approved[_tokenId];\\n  }\\n\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  ) public view returns (bool) {\\n    return info.users[_owner].approved[_operator];\\n  }\\n\\n  function getToken(\\n    uint256 _tokenId\\n  )\\n    public\\n    view\\n    returns (address tokenOwner, address approved, string memory uri, uint256 xCoord, uint256 yCoord)\\n  {\\n    return (ownerOf(_tokenId), getApproved(_tokenId), tokenURI(_tokenId), info.metadata.getX(_tokenId), info.metadata.getY(_tokenId));\\n  }\\n\\n  function getTokens(\\n    uint256[] memory _tokenIds\\n  )\\n    public\\n    view\\n    returns (\\n      address[] memory owners,\\n      address[] memory approveds,\\n      string[] memory uris,\\n      uint256[] memory xCoords,\\n      uint256[] memory yCoords\\n    )\\n  {\\n    uint256 _length = _tokenIds.length;\\n    owners = new address[](_length);\\n    approveds = new address[](_length);\\n    uris = new string[](_length);\\n    xCoords = new uint256[](_length);\\n    yCoords = new uint256[](_length);\\n    for (uint256 i = 0; i < _length; i++) {\\n      (owners[i], approveds[i], uris[i], xCoords[i], yCoords[i]) = getToken(_tokenIds[i]);\\n    }\\n  }\\n\\n  function _approveERC20(\\n    address _owner,\\n    address _spender,\\n    uint256 _tokens\\n  ) internal {\\n    info.users[_owner].allowance[_spender] = _tokens;\\n    emit ERC20Approval(APPROVAL_TOPIC, _owner, _spender, _tokens);\\n  }\\n\\n  function _approveNFT(address _spender, uint256 _tokenId) internal {\\n    bytes32 _mask = bytes32(1 << (_tokenId - TOTAL_SUPPLY - 1));\\n    require(maskOf(msg.sender) & _mask == _mask);\\n    info.approved[_tokenId] = _spender;\\n    emit Approval(msg.sender, _spender, _tokenId);\\n  }\\n\\n  function _transferERC20(\\n    address _from,\\n    address _to,\\n    uint256 _tokens\\n  ) internal {\\n    unchecked {\\n      bytes32 _mask;\\n      uint256 _pos = 0;\\n      uint256 _count = 0;\\n      uint256 _n = uint256(maskOf(_from));\\n      uint256[] memory _tokenIds = new uint256[](_tokens);\\n      while (_n > 0 && _count < _tokens) {\\n        if (_n & 1 == 1) {\\n          _mask |= bytes32(1 << _pos);\\n          _tokenIds[_count++] = TOTAL_SUPPLY + _pos + 1;\\n        }\\n        _pos++;\\n        _n >>= 1;\\n      }\\n      require(_count == _tokens);\\n      require(maskOf(_from) & _mask == _mask);\\n      _transfer(_from, _to, _mask, _tokenIds);\\n    }\\n  }\\n\\n  function _transferNFT(address _from, address _to, uint256 _tokenId) internal {\\n    unchecked {\\n      require(_tokenId > TOTAL_SUPPLY && _tokenId <= 2 * TOTAL_SUPPLY);\\n      bytes32 _mask = bytes32(1 << (_tokenId - TOTAL_SUPPLY - 1));\\n      require(maskOf(_from) & _mask == _mask);\\n      require(\\n        msg.sender == _from ||\\n          msg.sender == getApproved(_tokenId) ||\\n          isApprovedForAll(_from, msg.sender)\\n      );\\n      uint256[] memory _tokenIds = new uint256[](1);\\n      _tokenIds[0] = _tokenId;\\n      _transfer(_from, _to, _mask, _tokenIds);\\n    }\\n  }\\n\\n  function _transferNFTs(address _to, uint256[] memory _tokenIds) internal {\\n    unchecked {\\n      bytes32 _mask;\\n      for (uint256 i = 0; i < _tokenIds.length; i++) {\\n        _mask |= bytes32(1 << (_tokenIds[i] - TOTAL_SUPPLY - 1));\\n      }\\n      require(_popcount(_mask) == _tokenIds.length);\\n      require(maskOf(msg.sender) & _mask == _mask);\\n      _transfer(msg.sender, _to, _mask, _tokenIds);\\n    }\\n  }\\n\\n  function _transfer(\\n    address _from,\\n    address _to,\\n    bytes32 _mask,\\n    uint256[] memory _tokenIds\\n  ) internal {\\n    unchecked {\\n      require(_tokenIds.length > 0);\\n      for (uint256 i = 0; i < _tokenIds.length; i++) {\\n        if (getApproved(_tokenIds[i]) != address(0x0)) {\\n          info.approved[_tokenIds[i]] = address(0x0);\\n          emit Approval(address(0x0), address(0x0), _tokenIds[i]);\\n        }\\n        emit Transfer(_from, _to, _tokenIds[i]);\\n      }\\n      info.users[_from].mask ^= _mask;\\n      bool _from0 = maskOf(_from) == 0x0;\\n      bool _to0 = maskOf(_to) == 0x0;\\n      info.users[_to].mask |= _mask;\\n      if (_from0) {\\n        uint256 _index;\\n        address[] memory _holders = holders();\\n        for (uint256 i = 0; i < _holders.length; i++) {\\n          if (_holders[i] == _from) {\\n            _index = i;\\n            break;\\n          }\\n        }\\n        if (_to0) {\\n          info.holders[_index] = _to;\\n        } else {\\n          info.holders[_index] = _holders[_holders.length - 1];\\n          info.holders.pop();\\n        }\\n      } else if (_to0) {\\n        info.holders.push(_to);\\n      }\\n      require(maskOf(_from) & maskOf(_to) == 0x0);\\n      emit ERC20Transfer(TRANSFER_TOPIC, _from, _to, _tokenIds.length);\\n    }\\n  }\\n\\n  function _popcount(bytes32 _b) internal pure returns (uint256) {\\n    uint256 _n = uint256(_b);\\n    if (_n == UINT_MAX) {\\n      return 256;\\n    }\\n    unchecked {\\n      _n -= (_n >> 1) & M1;\\n      _n = (_n & M2) + ((_n >> 2) & M2);\\n      _n = (_n + (_n >> 4)) & M4;\\n      _n = (_n * H01) >> 248;\\n    }\\n    return _n;\\n  }\\n\\n  function getAllData() public view returns (\\n      address[] memory owners,\\n      string[] memory uris,\\n      uint256[] memory xCoords,\\n      uint256[] memory yCoords,\\n      uint256[] memory tokenIdList\\n    ) {\\n    tokenIdList = new uint256[](256);\\n    for (uint256 i = 257; i < 513; i++) {\\n        tokenIdList[i - 257] = i;\\n    }\\n\\n    (owners, , uris, xCoords, yCoords) = getTokens(tokenIdList);\\n    return (owners, uris, xCoords, yCoords, tokenIdList);\\n  }\\n\\n  function getReward(uint256 _tokenId) public updateReward(_tokenId) {\\n      require(ownerOf(_tokenId) == msg.sender, \\\"Not Owner\\\");\\n\\n      uint reward = rewards[_tokenId];\\n\\n      if (reward > 0) {\\n          rewards[_tokenId] = 0;\\n          rewardsToken.transfer(msg.sender, reward);\\n      }\\n  }\\n\\n  function getMultipleRewards(uint256[] calldata tokenIds) external {\\n      for (uint i = 0; i < tokenIds.length; i++) {\\n          getReward(tokenIds[i]);\\n      }\\n  }\\n}\\n\\ncontract Deploy {\\n  Land public immutable land;\\n  WrappedLand public immutable wLand;\\n  constructor() {\\n    // deploy Land\\n    land = new Land();\\n    land.initialize();\\n\\n    // deploy Wrapped Land (wLAND)\\n    wLand = new WrappedLand(address(land));\\n    uint256 landBal = land.balanceOf(address(this));\\n    land.approve(address(wLand), type(uint256).max);\\n    wLand.wrap(landBal);\\n    uint256 wLandBal = wLand.balanceOf(address(this));\\n\\n    // set reward token\\n    land.setRewardToken(address(wLand));\\n    land.setRewardsDuration(7 days);\\n\\n    // add rewards\\n    wLand.transfer(address(land), wLandBal);\\n    land.notifyRewardAmount(wLandBal);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/Metadata.sol\": {\r\n      \"content\": \"// https://farmland.build/\\n// https://twitter.com/landERC20721\\n// https://t.me/Land_Erc20721\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Base64 {\\n  bytes internal constant TABLE =\\n    \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(\\n          out,\\n          and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n        )\\n        out := shl(8, out)\\n        out := add(\\n          out,\\n          and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n        )\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\\ninterface LAND {\\n  function salt() external view returns (bytes32);\\n}\\n\\ncontract Metadata {\\n  string public name = \\\"Land\\\";\\n  string public symbol = \\\"LAND\\\";\\n\\n  LAND public immutable land;\\n\\n  uint256 constant WIDTH = 16;\\n  uint256 constant HEIGHT = 16;\\n\\n\\n  constructor() {\\n    land = LAND(msg.sender);\\n  }\\n\\n  function tokenURI(uint256 tokenId, uint256 _houseCount) external view returns (string memory) {\\n    tokenId = tokenId - 256;\\n\\n    string memory fillColor;\\n\\n    if (_houseCount == 0) {\\n      fillColor = \\\"13fc03\\\";\\n    } else if (_houseCount == 1) {\\n      fillColor = \\\"f8fc03\\\";\\n    } else if (_houseCount == 2) {\\n      fillColor = \\\"fcad03\\\";\\n    } else if (_houseCount == 3) {\\n      fillColor = \\\"fc0303\\\";\\n    } else if (_houseCount == 4) {\\n      fillColor = \\\"d203fc\\\";\\n    }\\n\\n    string[17] memory parts;\\n    parts[\\n      0\\n    ] = string(abi.encodePacked('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { font-family: monospace; font-size: 28px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#', fillColor,'\\\" /><text x=\\\"50%\\\" y=\\\"50%\\\" text-anchor=\\\"middle\\\" fill=\\\"#648efa\\\" class=\\\"base\\\">('));\\n\\n    parts[1] = Strings.toString(getX(tokenId));\\n\\n    parts[2] = \\\",\\\";\\n\\n    parts[3] = Strings.toString(getY(tokenId));\\n\\n    parts[4] = \\\")</text></svg>\\\";\\n\\n    string memory output = string(\\n      abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4])\\n    );\\n\\n    string memory json = Base64.encode(\\n      bytes(\\n        string(\\n          abi.encodePacked(\\n            '{\\\"name\\\": \\\"Land (',\\n            Strings.toString(getX(tokenId)),\\n            \\\",\\\",\\n            Strings.toString(getY(tokenId)),\\n            ')\\\", \\\"description\\\": \\\"Land is stored on chain and represents a ',\\n            Strings.toString(WIDTH),\\n            \\\"x\\\",\\n            Strings.toString(HEIGHT),\\n            ' grid of land. Earn emissions by buying houses!\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n            Base64.encode(bytes(output)),\\n            '\\\"}'\\n          )\\n        )\\n      )\\n    );\\n    output = string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n\\n    return output;\\n  }\\n\\n  function getX(uint256 tokenId) public pure returns (uint256) {\\n    return (tokenId - 1) % WIDTH;\\n  }\\n\\n  function getY(uint256 tokenId) public pure returns (uint256) {\\n    return ((tokenId - 1) / HEIGHT) % HEIGHT;\\n  }\\n}\\n\\n\\n\"\r\n    },\r\n    \"src/WrappedLand.sol\": {\r\n      \"content\": \"// https://farmland.build/\\n// https://twitter.com/landERC20721\\n// https://t.me/Land_Erc20721\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface Callable {\\n  function tokenCallback(\\n    address _from,\\n    uint256 _tokens,\\n    bytes calldata _data\\n  ) external returns (bool);\\n}\\n\\ninterface ILand {\\n  function balanceOf(address) external view returns (uint256);\\n  function allowance(address, address) external view returns (uint256);\\n  function isApprovedForAll(address, address) external view returns (bool);\\n  function transfer(address _to, uint256 _tokens) external returns (bool);\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokens\\n  ) external returns (bool);\\n}\\n\\ncontract WrappedLand {\\n  uint256 private constant UINT_MAX = type(uint256).max;\\n\\n  ILand public immutable land;\\n\\n  string public constant name = \\\"Wrapped Land\\\";\\n  string public constant symbol = \\\"wLAND\\\";\\n  uint8 public constant decimals = 18;\\n\\n  struct User {\\n    uint256 balance;\\n    mapping(address => uint256) allowance;\\n  }\\n\\n  struct Info {\\n    mapping(address => User) users;\\n  }\\n  Info private info;\\n\\n  event Transfer(address indexed from, address indexed to, uint256 tokens);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 tokens\\n  );\\n  event Wrap(address indexed owner, uint256 tokens);\\n  event Unwrap(address indexed owner, uint256 tokens);\\n\\n  constructor(address _land) {\\n    land = ILand(_land);\\n  }\\n\\n  function wrap(uint256 _tokensOrTokenId) external {\\n    uint256 _balanceBefore = land.balanceOf(address(this));\\n    land.transferFrom(msg.sender, address(this), _tokensOrTokenId);\\n    uint256 _wrapped = land.balanceOf(address(this)) - _balanceBefore;\\n    require(_wrapped > 0);\\n    info.users[msg.sender].balance += _wrapped * 1e18;\\n    emit Transfer(address(0x0), msg.sender, _wrapped * 1e18);\\n    emit Wrap(msg.sender, _wrapped);\\n  }\\n\\n  function unwrap(uint256 _tokens) external {\\n    require(_tokens > 0);\\n    require(balanceOf(msg.sender) >= _tokens * 1e18);\\n    info.users[msg.sender].balance -= _tokens * 1e18;\\n    land.transfer(msg.sender, _tokens);\\n    emit Transfer(msg.sender, address(0x0), _tokens * 1e18);\\n    emit Unwrap(msg.sender, _tokens);\\n  }\\n\\n  function transfer(address _to, uint256 _tokens) external returns (bool) {\\n    return _transfer(msg.sender, _to, _tokens);\\n  }\\n\\n  function approve(address _spender, uint256 _tokens) external returns (bool) {\\n    info.users[msg.sender].allowance[_spender] = _tokens;\\n    emit Approval(msg.sender, _spender, _tokens);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _tokens\\n  ) external returns (bool) {\\n    uint256 _allowance = allowance(_from, msg.sender);\\n    require(_allowance >= _tokens);\\n    if (_allowance != UINT_MAX) {\\n      info.users[_from].allowance[msg.sender] -= _tokens;\\n    }\\n    return _transfer(_from, _to, _tokens);\\n  }\\n\\n  function transferAndCall(\\n    address _to,\\n    uint256 _tokens,\\n    bytes calldata _data\\n  ) external returns (bool) {\\n    _transfer(msg.sender, _to, _tokens);\\n    uint32 _size;\\n    assembly {\\n      _size := extcodesize(_to)\\n    }\\n    if (_size > 0) {\\n      require(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\\n    }\\n    return true;\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return land.balanceOf(address(this)) * 1e18;\\n  }\\n\\n  function balanceOf(address _user) public view returns (uint256) {\\n    return info.users[_user].balance;\\n  }\\n\\n  function allowance(\\n    address _user,\\n    address _spender\\n  ) public view returns (uint256) {\\n    return info.users[_user].allowance[_spender];\\n  }\\n\\n  function allInfoFor(\\n    address _user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalTokens,\\n      uint256 userLANDs,\\n      uint256 userAllowance,\\n      bool userApprovedForAll,\\n      uint256 userBalance\\n    )\\n  {\\n    totalTokens = totalSupply();\\n    userLANDs = land.balanceOf(_user);\\n    userAllowance = land.allowance(_user, address(this));\\n    userApprovedForAll = land.isApprovedForAll(_user, address(this));\\n    userBalance = balanceOf(_user);\\n  }\\n\\n  function _transfer(\\n    address _from,\\n    address _to,\\n    uint256 _tokens\\n  ) internal returns (bool) {\\n    unchecked {\\n      require(balanceOf(_from) >= _tokens);\\n      info.users[_from].balance -= _tokens;\\n      info.users[_to].balance += _tokens;\\n      emit Transfer(_from, _to, _tokens);\\n      return true;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/Emissions.sol\": {\r\n      \"content\": \"// https://farmland.build/\\n// https://twitter.com/landERC20721\\n// https://t.me/Land_Erc20721\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract Emissions {\\n    IERC20 public rewardsToken;\\n\\n    address public ownerEmissions;\\n\\n    // Duration of rewards to be paid out (in seconds)\\n    uint public duration;\\n    // Timestamp of when the rewards finish\\n    uint public finishAt;\\n    // Minimum of last updated time and reward finish time\\n    uint public updatedAt;\\n    // Reward to be paid out per second\\n    uint public rewardRate;\\n    // Sum of (reward rate * dt * 1e18 / total supply)\\n    uint public rewardPerTokenStored;\\n    // User address => rewardPerTokenStored\\n    mapping(uint256 => uint) public userRewardPerTokenPaid;\\n    // User address => rewards to be claimed\\n    mapping(uint256 => uint) public rewards;\\n\\n    // Total staked\\n    uint public totalSupplyScaled = 256; // all LAND\\n    // User address => staked amount\\n    mapping(uint256 => uint) public balanceOfTokenId;\\n\\n    // house\\n    mapping(uint256 tokenId => uint256) public houseCount;\\n\\n    constructor() {\\n        ownerEmissions = msg.sender;\\n    }\\n\\n    function setRewardToken(address _rewardToken) external onlyOwner {\\n        rewardsToken = IERC20(_rewardToken);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == ownerEmissions, \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(uint256 _tokenId) {\\n        rewardPerTokenStored = rewardPerToken();\\n        updatedAt = lastTimeRewardApplicable();\\n\\n        if (_tokenId != 0) {\\n            rewards[_tokenId] = earned(_tokenId);\\n            userRewardPerTokenPaid[_tokenId] = rewardPerTokenStored;\\n        }\\n\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint) {\\n        return _min(finishAt, block.timestamp);\\n    }\\n\\n    function rewardPerToken() public view returns (uint) {\\n        if (totalSupplyScaled == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\\n            totalSupplyScaled;\\n    }\\n\\n    function earned(uint256 _tokenId) public view returns (uint) {\\n        return\\n            (((1 + houseCount[_tokenId]) *\\n                (rewardPerToken() - userRewardPerTokenPaid[_tokenId])) / 1e18) +\\n            rewards[_tokenId];\\n    }\\n\\n    function setRewardsDuration(uint _duration) external onlyOwner {\\n        require(finishAt < block.timestamp, \\\"reward duration not finished\\\");\\n        duration = _duration;\\n    }\\n\\n    function notifyRewardAmount(\\n        uint _amount\\n    ) external onlyOwner updateReward(0) {\\n        if (block.timestamp >= finishAt) {\\n            rewardRate = _amount / duration;\\n        } else {\\n            uint remainingRewards = (finishAt - block.timestamp) * rewardRate;\\n            rewardRate = (_amount + remainingRewards) / duration;\\n        }\\n\\n        require(rewardRate > 0, \\\"reward rate = 0\\\");\\n        require(\\n            rewardRate * duration <= rewardsToken.balanceOf(address(this)),\\n            \\\"reward amount > balance\\\"\\n        );\\n\\n        finishAt = block.timestamp + duration;\\n        updatedAt = block.timestamp;\\n    }\\n\\n    function _min(uint x, uint y) private pure returns (uint) {\\n        return x <= y ? x : y;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"topic0\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ERC20Approval\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"topic0\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOUSE_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addHouse\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOfTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xCoords\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yCoords\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getMultipleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"xCoord\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yCoord\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"xCoords\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yCoords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"houseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"maskOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerEmissions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Metadata\",\"name\":\"_metadata\",\"type\":\"address\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyScaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Land", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}