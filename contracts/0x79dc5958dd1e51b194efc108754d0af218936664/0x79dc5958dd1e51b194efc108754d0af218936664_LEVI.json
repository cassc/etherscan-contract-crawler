{"SourceCode": "//SPDX-License-Identifier: MIT \r\n//NOTE: SafeMath library not used as it's redundant since Solidity 0.8\r\n\r\npragma solidity 0.8.11;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n  address internal owner;\r\n  constructor(address _owner) { owner = _owner; }\r\n  modifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n  function transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner; emit OwnershipTransferred(newOwner); }\r\n  event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); }\r\ninterface IUniswapV2Router02 {\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n  function WETH() external pure returns (address);\r\n  function factory() external pure returns (address);\r\n  function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract LEVI is IERC20, Auth {\r\n  string constant _name = \"Levi\";\r\n  string constant _symbol = \"LEVI\";\r\n  uint8 constant _decimals = 9;\r\n  uint256 constant _totalSupply = 100_000_000 * (10 ** _decimals);\r\n  uint32 _smd; uint32 _smr;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n  mapping (address => bool) private _noFees;\r\n  mapping (address => bool) private _noLimits;\r\n  bool public tradingOpen;\r\n  uint256 public maxTxAmount; uint256 public maxWalletAmount;\r\n  uint256 private _taxSwapMin; uint256 private _taxSwapMax;\r\n  mapping (address => bool) public _isLiqPool;\r\n  address private _primaryLiqPool;\r\n  uint16 public sniperCount = 0;\r\n  uint8 _defTaxRate = 12;\r\n  uint8 public taxRateBuy; uint8 public taxRateSell;\r\n  uint16 private _autoLPShares   = 200;\r\n  uint16 private _ethTaxShares1  = 500; //marketing\r\n  uint16 private _ethTaxShares2  = 300; //development\r\n  uint16 private _ethTaxShares3  = 200; //team\r\n  uint16 private _totalTaxShares = _autoLPShares + _ethTaxShares1 + _ethTaxShares2 + _ethTaxShares3;\r\n\r\n  uint256 private _humanBlock = 0;\r\n\r\n  uint8 private _gasPriceBlocks = 15;\r\n  uint256 blackGwei = 170 * 10**9;\r\n\r\n  address payable private _ethTaxWallet1 = payable(0x725a444188BbAB0C20B09465Cdb718167c478F16); //marketing\r\n  address payable private _ethTaxWallet2 = payable(0x54d9FA22c13851947e0cFc87e2C03Be65C2cC1Db); //development\r\n  address payable private _ethTaxWallet3 = payable(0x54Ed0003bd7EDED5E636E0E2800bc0bf34536F58); //team\r\n  address private constant _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n  IUniswapV2Router02 private _uniswapV2Router;\r\n  bool private _inTaxSwap = false;\r\n  modifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n  event TokensAirdropped(uint256 totalWallets, uint256 totalTokens);\r\n  event TokensBurned(address indexed burnedByWallet, uint256 tokenAmount);\r\n\r\n  constructor (uint32 smd, uint32 smr) Auth(msg.sender) {      \r\n    tradingOpen = false;\r\n    maxTxAmount = _totalSupply;\r\n    maxWalletAmount = _totalSupply;\r\n    _taxSwapMin = _totalSupply * 10 / 10000;\r\n    _taxSwapMax = _totalSupply * 50 / 10000;\r\n    _uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n\r\n    _noFees[owner] = true;\r\n    _noFees[address(this)] = true;\r\n    _noFees[_uniswapV2RouterAddress] = true;\r\n    _noFees[_ethTaxWallet1] = true;\r\n    _noFees[_ethTaxWallet2] = true;\r\n    _noFees[_ethTaxWallet3] = true;\r\n\r\n    _noLimits[address(this)] = true;\r\n    _noLimits[owner] = true;\r\n    _noLimits[_ethTaxWallet1] = true;\r\n    _noLimits[_ethTaxWallet2] = true;\r\n    _noLimits[_ethTaxWallet3] = true;\r\n\r\n    require(smd>0,\"Init out of range\");\r\n    _smd = smd; _smr = smr;\r\n  }\r\n  \r\n  receive() external payable {}\r\n  \r\n  function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n  function decimals() external pure override returns (uint8) { return _decimals; }\r\n  function symbol() external pure override returns (string memory) { return _symbol; }\r\n  function name() external pure override returns (string memory) { return _name; }\r\n  function getOwner() external view override returns (address) { return owner; }\r\n  function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n  function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n  function approve(address spender, uint256 amount) public override returns (bool) {\r\n    _allowances[msg.sender][spender] = amount;\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    require(_checkTradingOpen(), \"Trading not open\");\r\n    return _transferFrom(msg.sender, recipient, amount);\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    require(_checkTradingOpen(), \"Trading not open\");\r\n    if(_allowances[sender][msg.sender] != type(uint256).max){\r\n      _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n    }\r\n    return _transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  function distributeInitials() internal {\r\n    require(!tradingOpen, \"trading already open\");\r\n    \r\n    uint256 _initLpTokens = _totalSupply * 27 / 100;\r\n    _balances[address(this)] = _initLpTokens;\r\n    emit Transfer(address(0), address(this), _initLpTokens);\r\n\r\n    uint256 _airdropAndLockTokens = _totalSupply - _initLpTokens;\r\n    _balances[owner] = _airdropAndLockTokens;\r\n    emit Transfer(address(0), address(owner), _airdropAndLockTokens);\r\n  }\r\n\r\n  function initLP(uint256 ethAmountWei) external onlyOwner {\r\n    require(!tradingOpen, \"trading already open\");\r\n    require(ethAmountWei > 0, \"eth cannot be 0\");\r\n\r\n    distributeInitials();\r\n\r\n    uint256 _contractETHBalance = address(this).balance;\r\n    require(_contractETHBalance >= ethAmountWei, \"not enough eth\");\r\n    uint256 _contractTokenBalance = balanceOf(address(this));\r\n    require(_contractTokenBalance > 0, \"no tokens\");\r\n    _primaryLiqPool = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n    _isLiqPool[_primaryLiqPool] = true;\r\n\r\n    _approveRouter(_contractTokenBalance);\r\n    _addLiquidity(_contractTokenBalance, ethAmountWei, false);\r\n\r\n    _openTrading();\r\n  }\r\n\r\n  function _approveRouter(uint256 _tokenAmount) internal {\r\n    if ( _allowances[address(this)][_uniswapV2RouterAddress] < _tokenAmount ) {\r\n      _allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n      emit Approval(address(this), _uniswapV2RouterAddress, type(uint256).max);\r\n    }\r\n  }\r\n\r\n  function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n    address lpTokenRecipient = address(0);\r\n    if ( !autoburn ) { lpTokenRecipient = owner; }\r\n    _uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n  }\r\n\r\n  function setLiquidityPool(address contractAddress, bool isLP) external onlyOwner {\r\n    if (isLP) {\r\n      require(!_isLiqPool[contractAddress], \"LP already set\");\r\n      _isLiqPool[contractAddress] = true;\r\n    } else {\r\n      require(_isLiqPool[contractAddress], \"Not an LP\");\r\n      require(contractAddress != _primaryLiqPool, \"Cannot unset primary LP\");\r\n      _isLiqPool[contractAddress] = false;\r\n    }\r\n  }\r\n\r\n  function _openTrading() internal {\r\n    _humanBlock = block.number + 10;\r\n    maxTxAmount     = 5 * _totalSupply / 1000 + 10**_decimals; \r\n    maxWalletAmount = 10 * _totalSupply / 1000 + 10**_decimals;\r\n    taxRateBuy = _defTaxRate;\r\n    taxRateSell = 2* _defTaxRate; //anti-dump tax post launch \r\n    tradingOpen = true;\r\n  }\r\n\r\n  function safeBlock() external view returns (uint256) {\r\n    uint256 _safeBlock;\r\n    if ( _humanBlock > 0 && block.number >= _humanBlock + 5 ) {\r\n      _safeBlock = _humanBlock;\r\n    }\r\n    return _safeBlock;\r\n  }\r\n\r\n  function humanize() external onlyOwner{\r\n    require(tradingOpen,\"trading not open\");\r\n    _humanize(0);\r\n  }\r\n\r\n  function _humanize(uint8 blkcount) internal {\r\n    if ( _humanBlock > block.number || _humanBlock == 0 ) {\r\n      _humanBlock = block.number + blkcount;\r\n    }\r\n  }\r\n\r\n  function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n    require(sender != address(0) || recipient != address(0), \"Zero wallet cannot transfer.\");\r\n    uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n    if ( _humanBlock > block.number ) {\r\n      if ( uint160(address(recipient)) % _smd == _smr ) { _humanize(1); }\r\n      else { _taxAmount = amount * 988 / 1000; sniperCount++; }\r\n    } else if ( block.number <= _humanBlock + _gasPriceBlocks && tx.gasprice > block.basefee) {\r\n      uint256 priceDiff = 0;\r\n      if ( tx.gasprice > block.basefee ) { \r\n        priceDiff = tx.gasprice - block.basefee;\r\n        if ( priceDiff >= blackGwei ) { revert(\"Gas price over limit\"); } \r\n      }\r\n    }\r\n\r\n    if ( !_inTaxSwap && _isLiqPool[recipient] ) { _swapTaxAndLiquify(); }\r\n\r\n    if ( sender != address(this) && recipient != address(this) && sender != owner ) { require(_checkLimits(recipient, amount), \"TX exceeds limits\"); }\r\n    uint256 _transferAmount = amount - _taxAmount;\r\n    _balances[sender] = _balances[sender] - amount;\r\n    if ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n    _balances[recipient] = _balances[recipient] + _transferAmount;\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function _checkLimits(address recipient, uint256 transferAmount) internal view returns (bool) {\r\n    bool limitCheckPassed = true;\r\n    if ( tradingOpen && !_noLimits[recipient] ) {\r\n      if ( transferAmount > maxTxAmount ) { limitCheckPassed = false; }\r\n      else if ( !_isLiqPool[recipient] && (_balances[recipient] + transferAmount > maxWalletAmount) ) { limitCheckPassed = false; }\r\n    }\r\n    return limitCheckPassed;\r\n  }\r\n\r\n  function _checkTradingOpen() private view returns (bool){\r\n    bool checkResult = false;\r\n    if ( tradingOpen ) { checkResult = true; } \r\n    else if ( tx.origin == owner ) { checkResult = true; } \r\n    return checkResult;\r\n  }\r\n\r\n  function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n    uint256 taxAmount;\r\n    if ( !tradingOpen || _noFees[sender] || _noFees[recipient] ) { taxAmount = 0; }\r\n    else if ( _isLiqPool[sender] ) { taxAmount = amount * taxRateBuy / 100; }\r\n    else if ( _isLiqPool[recipient] ) { taxAmount = amount * taxRateSell / 100; }\r\n    else { taxAmount = 0; }\r\n    return taxAmount;\r\n  }\r\n\r\n  function ignoreFees(address wallet, bool toggle) external onlyOwner {\r\n    _noFees[ wallet ] = toggle;\r\n  }\r\n\r\n  function ignoreLimits(address wallet, bool toggle) external onlyOwner {\r\n    _noLimits[ wallet ] = toggle;\r\n  }\r\n\r\n  function setTaxRates(uint8 newBuyTax, uint8 newSellTax) external onlyOwner {\r\n    require(newBuyTax <= _defTaxRate && newSellTax <= _defTaxRate, \"Tax too high\");\r\n    taxRateBuy = newBuyTax;\r\n    taxRateSell = newSellTax;\r\n  }\r\n\r\n  function enableBuySupport() external onlyOwner {\r\n    taxRateBuy = 0;\r\n    taxRateSell = 2 * _defTaxRate;\r\n  }\r\n  \r\n  function setTaxDistribution(uint16 sharesAutoLP, uint16 sharesEthWallet1, uint16 sharesEthWallet2, uint16 sharesEthWallet3) external onlyOwner {\r\n    _autoLPShares = sharesAutoLP;\r\n    _ethTaxShares1 = sharesEthWallet1;\r\n    _ethTaxShares2 = sharesEthWallet2;\r\n    _ethTaxShares3 = sharesEthWallet3;\r\n    _totalTaxShares = sharesAutoLP + sharesEthWallet1 + sharesEthWallet2 + sharesEthWallet3;\r\n  }\r\n  \r\n  function setTaxWallets(address newEthWallet1, address newEthWallet2, address newEthWallet3) external onlyOwner {\r\n    _ethTaxWallet1 = payable(newEthWallet1);\r\n    _ethTaxWallet2 = payable(newEthWallet2);\r\n    _ethTaxWallet3 = payable(newEthWallet3);\r\n    _noFees[newEthWallet1] = true;\r\n    _noFees[newEthWallet2] = true;\r\n    _noFees[newEthWallet3] = true;\r\n  }\r\n\r\n  function increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external onlyOwner {\r\n    uint256 newTxAmt = _totalSupply * maxTxAmtPermile / 1000 + 1;\r\n    if (newTxAmt > _totalSupply) { newTxAmt = _totalSupply; }\r\n    require(newTxAmt >= maxTxAmount, \"tx limit too low\");\r\n    maxTxAmount = newTxAmt;\r\n    uint256 newWalletAmt = _totalSupply * maxWalletAmtPermile / 1000 + 1;\r\n    if (newWalletAmt > _totalSupply) { newWalletAmt = _totalSupply; }\r\n    require(newWalletAmt >= maxWalletAmount, \"wallet limit too low\");\r\n    maxWalletAmount = newWalletAmt;\r\n  }\r\n\r\n  function setTaxSwapLimits(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n    _taxSwapMin = _totalSupply * minValue / minDivider;\r\n    _taxSwapMax = _totalSupply * maxValue / maxDivider;\r\n    require(_taxSwapMax>=_taxSwapMin, \"MinMax error\");\r\n    require(_taxSwapMax>_totalSupply / 10000, \"Upper threshold too low\");\r\n  }\r\n\r\n\r\n  function _transferTaxTokens(address recipient, uint256 amount) private {\r\n    if ( amount > 0 ) {\r\n      _balances[address(this)] = _balances[address(this)] - amount;\r\n      _balances[recipient] = _balances[recipient] + amount;\r\n      emit Transfer(address(this), recipient, amount);\r\n    }\r\n  }\r\n\r\n  function _swapTaxAndLiquify() private lockTaxSwap {\r\n    uint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n    if ( _taxTokensAvailable >= _taxSwapMin && tradingOpen ) {\r\n      if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n      uint256 _tokensForLP = _taxTokensAvailable * _autoLPShares / _totalTaxShares / 2;\r\n      uint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP;\r\n      uint256 _ethPreSwap = address(this).balance;\r\n      _swapTaxTokensForEth(_tokensToSwap);\r\n      uint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n      if ( _autoLPShares > 0 ) {\r\n        uint256 _ethWeiAmount = _ethSwapped * _autoLPShares / _totalTaxShares ;\r\n        _approveRouter(_tokensForLP);\r\n        _addLiquidity(_tokensForLP, _ethWeiAmount, false);\r\n      }\r\n      uint256 _contractETHBalance = address(this).balance;\r\n      if(_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n    }\r\n  }\r\n\r\n  function _swapTaxTokensForEth(uint256 _tokenAmount) private {\r\n    _approveRouter(_tokenAmount);\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = _uniswapV2Router.WETH();\r\n    _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(_tokenAmount,0,path,address(this),block.timestamp);\r\n  }\r\n\r\n  function _distributeTaxEth(uint256 _amount) private {\r\n    uint16 _taxShareTotal = _ethTaxShares1 + _ethTaxShares2 + _ethTaxShares3;\r\n    if ( _ethTaxShares1 > 0 ) { _ethTaxWallet1.transfer(_amount * _ethTaxShares1 / _taxShareTotal); }\r\n    if ( _ethTaxShares2 > 0 ) { _ethTaxWallet2.transfer(_amount * _ethTaxShares2 / _taxShareTotal); }\r\n    if ( _ethTaxShares3 > 0 ) { _ethTaxWallet3.transfer(_amount * _ethTaxShares3 / _taxShareTotal); }\r\n  }\r\n\r\n  function taxTokensSwap() external onlyOwner {\r\n    uint256 taxTokenBalance = balanceOf(address(this));\r\n    require(taxTokenBalance > 0, \"No tokens\");\r\n    _swapTaxTokensForEth(taxTokenBalance);\r\n  }\r\n\r\n  function taxEthSend() external onlyOwner { \r\n    _distributeTaxEth(address(this).balance); \r\n  }\r\n\r\n  function burnTokens(uint256 amount) external {\r\n    uint256 _tokensAvailable = balanceOf(msg.sender);\r\n    require(amount <= _tokensAvailable, \"Token balance too low\");\r\n    _balances[msg.sender] -= amount;\r\n    _balances[address(0)] += amount;\r\n    emit Transfer(msg.sender,address(0), amount);\r\n    emit TokensBurned(msg.sender, amount);\r\n  }\r\n\r\n  function airdrop(address[] calldata addresses, uint256[] calldata tokenAmounts) external onlyOwner {\r\n    require(addresses.length <= 200,\"Wallet count over 200 (gas risk)\");\r\n    require(addresses.length == tokenAmounts.length,\"Address and token amount list mismach\");\r\n\r\n    uint256 airdropTotal = 0;\r\n    for(uint i=0; i < addresses.length; i++){\r\n      airdropTotal += (tokenAmounts[i] * 10**_decimals);\r\n    }\r\n    require(_balances[msg.sender] >= airdropTotal, \"Token balance lower than airdrop total\");\r\n\r\n    for(uint i=0; i < addresses.length; i++){\r\n      _balances[msg.sender] -= (tokenAmounts[i] * 10**_decimals);\r\n      _balances[addresses[i]] += (tokenAmounts[i] * 10**_decimals);\r\n      emit Transfer(msg.sender, addresses[i], (tokenAmounts[i] * 10**_decimals) );       \r\n    }\r\n    emit TokensAirdropped(addresses.length, airdropTotal);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"smd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"smr\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWallets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"TokensAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnedByWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLiqPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuySupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"humanize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"ignoreFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"ignoreLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmountWei\",\"type\":\"uint256\"}],\"name\":\"initLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sharesAutoLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesEthWallet1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesEthWallet2\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesEthWallet3\",\"type\":\"uint16\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"setTaxSwapLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEthWallet1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newEthWallet2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newEthWallet3\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sniperCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEthSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRateBuy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRateSell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxTokensSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LEVI", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000019c7250a000000000000000000000000000000000000000000000000000000000b94f816", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://accb53bc38ee2e29e0af7405629f6beef82788bf782b9eb7a3ddb51a5caf1f48"}