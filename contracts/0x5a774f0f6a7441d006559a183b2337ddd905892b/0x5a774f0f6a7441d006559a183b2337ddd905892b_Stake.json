{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-11-24\r\n*/\r\n\r\npragma solidity ^0.8.4;\r\npragma abicoder v2;\r\n\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the BEP20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\ncontract Stake is Ownable, Pausable {\r\n    using ECDSA for address;\r\n    address public signer;\r\n    address public stakeFactory;\r\n    address public burnWallet = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public APR_PERCENT;\r\n    uint256 public duration = 1 days;\r\n    uint256 public stakeDuration = 30 days;\r\n    uint256 public phase_duration_1 = 9 days;\r\n    uint256 public phase_duration_2 = 25 days;\r\n    uint256 public phase_duration_3 = 29 days;\r\n    uint256 public adminPercent = 4e18;\r\n    uint256[2] public penalityPercent = [50e18, 80e18];\r\n    bool public isInitialized;\r\n    bool public isBurn;\r\n\r\n    IERC20 public rewardToken;\r\n    IERC20 public stakeToken;\r\n\r\n    event StakeDetails(\r\n        address indexed from,\r\n        uint256 amount,\r\n        bool autoRenewal,\r\n        uint16 time\r\n    );\r\n    event Withdraw(\r\n        address indexed from,\r\n        uint256 amount,\r\n        uint256 reward,\r\n        uint256 burnPercentage,\r\n        uint16 time\r\n    );\r\n    event AutoInjection(\r\n        address indexed from,\r\n        uint256 amount,\r\n        uint256 depositTime,\r\n        uint256 APR\r\n    );\r\n\r\n    struct UserDetails {\r\n        uint256 depositAmount;\r\n        bool autoDeposit;\r\n        uint256 stakeTime;\r\n        uint256 endTime;\r\n        uint256 earnings;\r\n        uint256 apr;\r\n    }\r\n\r\n    mapping(address => UserDetails) public users;\r\n    mapping(bytes32 => bool)public msgHash;\r\n\r\n    constructor() { stakeFactory = _msgSender(); }\r\n\r\n    receive() external payable {}\r\n\r\n    function initialize (\r\n        IERC20 _stake,\r\n        IERC20 _reward,\r\n        uint256 _apr,\r\n        bool _burnEnable,\r\n        address _admin,\r\n        address _signer\r\n    ) external {\r\n        require(!isInitialized, \"Already initialized\");\r\n        require(_msgSender() == stakeFactory, \"Not factory\");\r\n\r\n        isInitialized = true;\r\n\r\n        stakeToken = _stake;\r\n        rewardToken = _reward;\r\n\r\n        APR_PERCENT = _apr;\r\n        isBurn = _burnEnable;\r\n        signer = _signer;\r\n\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    function updateTokens(IERC20 _stake,IERC20 _reward) external onlyOwner {\r\n        stakeToken = _stake;\r\n        rewardToken = _reward;\r\n    }\r\n\r\n    function emergencyWithdraw(\r\n        address _token,\r\n        address _user,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        if (_token == address(0)) payable(_user).transfer(_amount);\r\n        else tokenSafeTransfer(IERC20(_token), _user, _amount);\r\n    }\r\n\r\n    function updateBurnOption (bool _status) external onlyOwner {\r\n        isBurn = _status;\r\n    }\r\n\r\n    function updateSigner (address _signer) external onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function updateBurnWallet (address _burn) external  onlyOwner {\r\n        burnWallet = _burn;\r\n    }\r\n\r\n    function updatePenalityPercent(\r\n        uint256 _percent_1,\r\n        uint256 _percent_2\r\n    ) external onlyOwner {\r\n        penalityPercent[0] = _percent_1;\r\n        penalityPercent[1] = _percent_2;\r\n    }\r\n\r\n    function updateDurations(\r\n        uint256 _stakeDuration,\r\n        uint256 _duration\r\n    ) external onlyOwner {\r\n        stakeDuration = _stakeDuration;\r\n        duration = _duration;\r\n    }\r\n\r\n    function updatePhaseeDuration(\r\n        uint256 _phase_duration_1,\r\n        uint256 _phase_duration_2,\r\n        uint256 _phase_duration_3\r\n    ) external onlyOwner {\r\n        phase_duration_1 = _phase_duration_1;\r\n        phase_duration_2 = _phase_duration_2;\r\n        phase_duration_3 = _phase_duration_3;\r\n    }\r\n\r\n    function updateAPR_Percent(uint256 _apr) external onlyOwner {\r\n        APR_PERCENT = _apr;\r\n    }\r\n\r\n    function updateAdminPercent(uint256 _adminPercent) external onlyOwner {\r\n        adminPercent = _adminPercent;\r\n    }\r\n\r\n    function manageAutoRnewal (bool _isAutoDeposit) external {\r\n        UserDetails storage user = users[_msgSender()];\r\n        require (user.depositAmount > 0 && user.stakeTime > 0,'No current staking');\r\n        user.autoDeposit = _isAutoDeposit;\r\n    }\r\n\r\n    function stake(uint256 _amount, bool _isAutoDeposit) external {\r\n        require(address(stakeToken) != address(0), \"Invalid token\");\r\n        require(_amount > 0, \"Invalid amount\");\r\n        address caller = _msgSender();\r\n        tokenSafeTransferFrom(stakeToken, caller, address(this), _amount);\r\n        internalUpdate(caller, _amount, _isAutoDeposit);\r\n        emit StakeDetails(\r\n            caller,\r\n            _amount,\r\n            _isAutoDeposit,\r\n            uint16(block.timestamp)\r\n        );\r\n    }\r\n\r\n    function internalUpdate(\r\n        address _user,\r\n        uint256 _amt,\r\n        bool _isAutoDeposit\r\n    ) internal {\r\n        UserDetails storage user = users[_user];\r\n        user.depositAmount += _amt;\r\n        user.autoDeposit = _isAutoDeposit;\r\n        user.stakeTime = block.timestamp;\r\n        user.endTime = user.stakeTime + stakeDuration;\r\n        user.earnings = 0;\r\n        user.apr = (user.depositAmount * APR_PERCENT / 100e18) * 10 ** rewardToken.decimals();\r\n        user.apr = user.apr / 10 ** stakeToken.decimals();\r\n    }\r\n\r\n    function withdraw(bytes calldata signature,uint256 _percent,uint256 _expiry) external {\r\n\r\n        address _user = _msgSender();\r\n\r\n        bytes32 messageHash = message(_user,_percent,_expiry);\r\n        require(!msgHash[messageHash], \"claim: signature duplicate\");\r\n\r\n        address src = verifySignature(messageHash, signature);\r\n        require(signer == src, \" claim: unauthorized\");\r\n\r\n        UserDetails storage user = users[_user];\r\n        require(user.depositAmount > 0, \"Invalid user\");\r\n        require(\r\n            block.timestamp > user.stakeTime + phase_duration_1,\r\n            \"No unstake on cooling period\"\r\n        );\r\n        uint256 reward = this.viewReward(_user);\r\n        rewardValidate(_user, reward,_percent);\r\n        msgHash[messageHash] = true;\r\n    }\r\n\r\n    function resetAmt(address _user) internal {\r\n        UserDetails storage user = users[_user];\r\n        user.stakeTime = 0;\r\n        user.endTime = 0;\r\n        user.depositAmount = 0;\r\n        user.autoDeposit = false;\r\n    }\r\n\r\n    function amountSpilit(\r\n        uint256 depAmt,\r\n        address user,\r\n        uint256 reward,\r\n        uint256 _fee,\r\n        uint256 _burnPercent\r\n    ) internal {\r\n        tokenSafeTransfer(stakeToken, user, depAmt);\r\n\r\n        if (_fee > 0) tokenSafeTransfer(rewardToken, owner(), _fee);\r\n\r\n        if (reward > 0) {\r\n            if (_burnPercent > 0 && isBurn) {\r\n                uint256 burnFee = reward * _burnPercent / 100e18;\r\n                reward = reward - burnFee;\r\n                tokenSafeTransfer(rewardToken, burnWallet, burnFee);\r\n            }\r\n            tokenSafeTransfer(rewardToken, user, reward);\r\n            users[user].earnings = reward;\r\n        }\r\n\r\n        emit Withdraw(user, depAmt, reward, _burnPercent,uint16(block.timestamp));\r\n    }\r\n\r\n    function rewardValidate(address _user, uint256 _reward,uint256 _percent) internal {\r\n        UserDetails storage user = users[_user];\r\n        uint256 adminFee;\r\n\r\n        if (\r\n            block.timestamp > user.stakeTime + stakeDuration + duration &&\r\n            user.autoDeposit\r\n        ) {\r\n            internalUpdate(\r\n                _user,\r\n                _reward - ((_reward * adminPercent) / 100e18),\r\n                false\r\n            );\r\n            emit AutoInjection(\r\n                _user,\r\n                user.depositAmount,\r\n                user.stakeTime,\r\n                user.apr\r\n            );\r\n            return;\r\n        } else if (block.timestamp >= user.stakeTime + phase_duration_3) {\r\n            amountSpilit(\r\n                user.depositAmount,\r\n                _user,\r\n                _reward - ((_reward * adminPercent) / 100e18),\r\n                0,\r\n                _percent\r\n            );\r\n            resetAmt(_user);\r\n            return;\r\n        } else if (block.timestamp >= user.stakeTime + phase_duration_2) {\r\n            adminFee = (_reward * adminPercent) / 100e18;\r\n            amountSpilit(\r\n                user.depositAmount,\r\n                _user,\r\n                (((_reward - adminFee) * penalityPercent[1]) / 100e18),\r\n                adminFee,\r\n                _percent\r\n            );\r\n            resetAmt(_user);\r\n            return;\r\n        } else if (\r\n            block.timestamp >= user.stakeTime + phase_duration_1 &&\r\n            block.timestamp <= user.stakeTime + phase_duration_2\r\n        ) {\r\n            adminFee = (_reward * adminPercent) / 100e18;\r\n            amountSpilit(\r\n                user.depositAmount,\r\n                _user,\r\n                (((_reward - adminFee) * penalityPercent[0]) / 100e18),\r\n                adminFee,\r\n                _percent\r\n            );\r\n            resetAmt(_user);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function viewReward(address _user) external view returns (uint256 reward) {\r\n        UserDetails storage user = users[_user];\r\n\r\n        require(user.depositAmount > 0, \"Invalid user\");\r\n\r\n        uint256 calc;\r\n\r\n        if (user.endTime > block.timestamp)\r\n            calc = (block.timestamp - user.stakeTime) / duration;\r\n        else calc = stakeDuration / duration;\r\n\r\n        reward = (user.apr / 365) * calc;\r\n    }\r\n\r\n    function tokenSafeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\r\n            mstore(\r\n                freeMemoryPointer,\r\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\r\n            )\r\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\r\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\r\n\r\n            success := and(\r\n                // Set success to whether the call reverted, if not we check it either\r\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\r\n                or(\r\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\r\n                    iszero(returndatasize())\r\n                ),\r\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\r\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\r\n                // Counterintuitively, this call must be positioned second to the or() call in the\r\n                // surrounding and() call or else returndatasize() will be zero during the computation.\r\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\r\n            )\r\n        }\r\n\r\n        require(success, \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function tokenSafeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\r\n            mstore(\r\n                freeMemoryPointer,\r\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\r\n            )\r\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\r\n\r\n            success := and(\r\n                // Set success to whether the call reverted, if not we check it either\r\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\r\n                or(\r\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\r\n                    iszero(returndatasize())\r\n                ),\r\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\r\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\r\n                // Counterintuitively, this call must be positioned second to the or() call in the\r\n                // surrounding and() call or else returndatasize() will be zero during the computation.\r\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\r\n            )\r\n        }\r\n\r\n        require(success, \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function message(address  _receiver,uint256 _burnPercent,uint256 time)\r\n        public view returns(bytes32 messageHash)\r\n    {\r\n        messageHash = keccak256(abi.encodePacked(_receiver,isBurn,_burnPercent,time));\r\n    }\r\n\r\n    function verifySignature(bytes32 _messageHash, bytes memory _signature) public pure returns (address signatureAddress)\r\n    {\r\n        bytes32 hash = ECDSA.toEthSignedMessageHash(_messageHash);\r\n        signatureAddress = ECDSA.recover(hash, _signature);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract StakeFactory is Ownable {\r\n\r\n    event NewStakeContract(address indexed smartChef);\r\n    address[] public stakeAddressList;\r\n    uint public stakePoolCount;\r\n\r\n\r\n    function deploy (\r\n        IERC20 _stakedToken,\r\n        IERC20 _rewardToken,\r\n        uint256 _apr,\r\n        bool _activateBurn,\r\n        address _admin,\r\n        address _signer\r\n    ) external onlyOwner {\r\n\r\n        require(_stakedToken.totalSupply() >= 0,\"revert by staked token\");\r\n        require(_rewardToken.totalSupply() >= 0,\"revert by reward token\");\r\n\r\n        bytes memory bytecode = type(Stake).creationCode;\r\n\r\n        bytes32 salt = keccak256(abi.encodePacked(_stakedToken, _rewardToken, _apr,_activateBurn,_admin,block.timestamp));\r\n        address payable stakeAddress;\r\n\r\n        assembly {\r\n            stakeAddress := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n\r\n        Stake(stakeAddress).initialize(\r\n            _stakedToken,\r\n            _rewardToken,\r\n            _apr,\r\n            _activateBurn,\r\n            _admin,\r\n            _signer\r\n        );\r\n        stakeAddressList.push(stakeAddress);\r\n        stakePoolCount = stakeAddressList.length;\r\n\r\n        emit NewStakeContract(stakeAddress);\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"APR\",\"type\":\"uint256\"}],\"name\":\"AutoInjection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoRenewal\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"time\",\"type\":\"uint16\"}],\"name\":\"StakeDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"time\",\"type\":\"uint16\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APR_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_burnEnable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAutoDeposit\",\"type\":\"bool\"}],\"name\":\"manageAutoRnewal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"message\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"msgHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"penalityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase_duration_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase_duration_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase_duration_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAutoDeposit\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"updateAPR_Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adminPercent\",\"type\":\"uint256\"}],\"name\":\"updateAdminPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateBurnOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burn\",\"type\":\"address\"}],\"name\":\"updateBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"updateDurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent_1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent_2\",\"type\":\"uint256\"}],\"name\":\"updatePenalityPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phase_duration_1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase_duration_2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase_duration_3\",\"type\":\"uint256\"}],\"name\":\"updatePhaseeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stake\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"updateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoDeposit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signatureAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Stake", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://71fa1f038db6b9494e3cc7f22ad0f139e8bce783d879d36a0acbd75c4de72143"}