{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/configuration/PoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"../../dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"../../interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IParaProxy} from \\\"../../interfaces/IParaProxy.sol\\\";\\nimport {InitializableImmutableAdminUpgradeabilityProxy} from \\\"../libraries/paraspace-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\\\";\\nimport {ParaProxy} from \\\"../libraries/paraspace-upgradeability/ParaProxy.sol\\\";\\nimport {DataTypes} from \\\"../../protocol/libraries/types/DataTypes.sol\\\";\\nimport {Address} from \\\"../../dependencies/openzeppelin/contracts/Address.sol\\\";\\nimport {Errors} from \\\"../../protocol/libraries/helpers/Errors.sol\\\";\\n\\n/**\\n * @title PoolAddressesProvider\\n *\\n * @notice Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * @dev Acts as factory of proxies and admin of those, so with right to change its implementations\\n * @dev Owned by the ParaSpace Governance\\n **/\\ncontract PoolAddressesProvider is Ownable, IPoolAddressesProvider {\\n    // Identifier of the ParaSpace Market\\n    string private _marketId;\\n\\n    // Map of registered addresses (identifier => registeredAddress)\\n    mapping(bytes32 => address) private _addresses;\\n\\n    // Map of marketplace contracts (id => address)\\n    mapping(bytes32 => DataTypes.Marketplace) internal _marketplaces;\\n\\n    // Main identifiers\\n    bytes32 private constant POOL = \\\"POOL\\\";\\n    bytes32 private constant POOL_CONFIGURATOR = \\\"POOL_CONFIGURATOR\\\";\\n    bytes32 private constant PRICE_ORACLE = \\\"PRICE_ORACLE\\\";\\n    bytes32 private constant ACL_MANAGER = \\\"ACL_MANAGER\\\";\\n    bytes32 private constant ACL_ADMIN = \\\"ACL_ADMIN\\\";\\n    bytes32 private constant PRICE_ORACLE_SENTINEL = \\\"PRICE_ORACLE_SENTINEL\\\";\\n    bytes32 private constant DATA_PROVIDER = \\\"DATA_PROVIDER\\\";\\n    bytes32 private constant WETH = \\\"WETH\\\";\\n\\n    /**\\n     * @dev Constructor.\\n     * @param marketId The identifier of the market.\\n     * @param owner The owner address of this contract.\\n     */\\n    constructor(string memory marketId, address owner) {\\n        _setMarketId(marketId);\\n        transferOwnership(owner);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getMarketId() external view override returns (string memory) {\\n        return _marketId;\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setMarketId(\\n        string memory newMarketId\\n    ) external override onlyOwner {\\n        _setMarketId(newMarketId);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getAddress(bytes32 id) public view override returns (address) {\\n        return _addresses[id];\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setAddress(\\n        bytes32 id,\\n        address newAddress\\n    ) external override onlyOwner {\\n        address oldAddress = _addresses[id];\\n        _addresses[id] = newAddress;\\n        emit AddressSet(id, oldAddress, newAddress);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external override onlyOwner {\\n        require(id != POOL, Errors.INVALID_ADDRESSES_PROVIDER_ID);\\n\\n        address proxyAddress = _addresses[id];\\n        address oldImplementationAddress = _getProxyImplementation(id);\\n        _updateImpl(id, newImplementationAddress);\\n        emit AddressSetAsProxy(\\n            id,\\n            proxyAddress,\\n            oldImplementationAddress,\\n            newImplementationAddress\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getPool() external view override returns (address) {\\n        return getAddress(POOL);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function updatePoolImpl(\\n        IParaProxy.ProxyImplementation[] calldata implementationParams,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override onlyOwner {\\n        _updateParaProxyImpl(POOL, implementationParams, _init, _calldata);\\n\\n        emit PoolUpdated(implementationParams, _init, _calldata);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getPoolConfigurator() external view override returns (address) {\\n        return getAddress(POOL_CONFIGURATOR);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setPoolConfiguratorImpl(\\n        address newPoolConfiguratorImpl\\n    ) external override onlyOwner {\\n        address oldPoolConfiguratorImpl = _getProxyImplementation(\\n            POOL_CONFIGURATOR\\n        );\\n        _updateImpl(POOL_CONFIGURATOR, newPoolConfiguratorImpl);\\n        emit PoolConfiguratorUpdated(\\n            oldPoolConfiguratorImpl,\\n            newPoolConfiguratorImpl\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getPriceOracle() external view override returns (address) {\\n        return getAddress(PRICE_ORACLE);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setPriceOracle(\\n        address newPriceOracle\\n    ) external override onlyOwner {\\n        address oldPriceOracle = _addresses[PRICE_ORACLE];\\n        _addresses[PRICE_ORACLE] = newPriceOracle;\\n        emit PriceOracleUpdated(oldPriceOracle, newPriceOracle);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getACLManager() external view override returns (address) {\\n        return getAddress(ACL_MANAGER);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setACLManager(address newAclManager) external override onlyOwner {\\n        address oldAclManager = _addresses[ACL_MANAGER];\\n        _addresses[ACL_MANAGER] = newAclManager;\\n        emit ACLManagerUpdated(oldAclManager, newAclManager);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getACLAdmin() external view override returns (address) {\\n        return getAddress(ACL_ADMIN);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setACLAdmin(address newAclAdmin) external override onlyOwner {\\n        address oldAclAdmin = _addresses[ACL_ADMIN];\\n        _addresses[ACL_ADMIN] = newAclAdmin;\\n        emit ACLAdminUpdated(oldAclAdmin, newAclAdmin);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getPriceOracleSentinel() external view override returns (address) {\\n        return getAddress(PRICE_ORACLE_SENTINEL);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setPriceOracleSentinel(\\n        address newPriceOracleSentinel\\n    ) external override onlyOwner {\\n        address oldPriceOracleSentinel = _addresses[PRICE_ORACLE_SENTINEL];\\n        _addresses[PRICE_ORACLE_SENTINEL] = newPriceOracleSentinel;\\n        emit PriceOracleSentinelUpdated(\\n            oldPriceOracleSentinel,\\n            newPriceOracleSentinel\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getPoolDataProvider() external view override returns (address) {\\n        return getAddress(DATA_PROVIDER);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getWETH() external view override returns (address) {\\n        return getAddress(WETH);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function getMarketplace(\\n        bytes32 id\\n    ) external view override returns (DataTypes.Marketplace memory) {\\n        DataTypes.Marketplace memory marketplace = _marketplaces[id];\\n        if (\\n            marketplace.marketplace != address(0) &&\\n            Address.isContract(marketplace.marketplace)\\n        ) {\\n            return marketplace;\\n        } else {\\n            revert(Errors.INVALID_MARKETPLACE_ID);\\n        }\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setProtocolDataProvider(\\n        address newDataProvider\\n    ) external override onlyOwner {\\n        address oldDataProvider = _addresses[DATA_PROVIDER];\\n        _addresses[DATA_PROVIDER] = newDataProvider;\\n        emit ProtocolDataProviderUpdated(oldDataProvider, newDataProvider);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setWETH(address newWETH) external override onlyOwner {\\n        address oldWETH = _addresses[WETH];\\n        _addresses[WETH] = newWETH;\\n        emit WETHUpdated(oldWETH, newWETH);\\n    }\\n\\n    /// @inheritdoc IPoolAddressesProvider\\n    function setMarketplace(\\n        bytes32 id,\\n        address marketplace,\\n        address adapter,\\n        address operator,\\n        bool paused\\n    ) external override onlyOwner {\\n        _marketplaces[id] = DataTypes.Marketplace(\\n            marketplace,\\n            adapter,\\n            operator,\\n            paused\\n        );\\n        emit MarketplaceUpdated(id, marketplace, adapter, operator, paused);\\n    }\\n\\n    /**\\n     * @notice Internal function to update the implementation of a specific proxied component of the protocol.\\n     * @dev If there is no proxy registered with the given identifier, it creates the proxy setting `newAddress`\\n     *   as implementation and calls the initialize() function on the proxy\\n     * @dev If there is already a proxy registered, it just updates the implementation to `newAddress` and\\n     *   calls the initialize() function via upgradeToAndCall() in the proxy\\n     * @param id The id of the proxy to be updated\\n     * @param newAddress The address of the new implementation\\n     **/\\n    function _updateImpl(bytes32 id, address newAddress) internal {\\n        require(newAddress != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n        address proxyAddress = _addresses[id];\\n        InitializableImmutableAdminUpgradeabilityProxy proxy;\\n        bytes memory params = abi.encodeWithSignature(\\n            \\\"initialize(address)\\\",\\n            address(this)\\n        );\\n\\n        if (proxyAddress == address(0)) {\\n            proxy = new InitializableImmutableAdminUpgradeabilityProxy(\\n                address(this)\\n            );\\n            proxy.initialize(newAddress, params);\\n            _addresses[id] = proxyAddress = address(proxy);\\n            emit ProxyCreated(id, proxyAddress, newAddress);\\n        } else {\\n            proxy = InitializableImmutableAdminUpgradeabilityProxy(\\n                payable(proxyAddress)\\n            );\\n            proxy.upgradeToAndCall(newAddress, params);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to update the implementation of a specific proxied component of the protocol that uses ParaProxy.\\n     * @dev If there is no proxy registered with the given identifier, it creates the proxy setting `newAddress`\\n     *   as implementation and calls the calldata on the _init\\n     * @dev If there is already a proxy registered, it just updates the implementation using the implementationParams\\n     * @param id The id of the proxy to be updated\\n     * @param implementationParams Contains the implementation addresses and function selectors\\n     * @param _init The address of the contract or implementation to execute _calldata\\n     * @param _calldata A function call, including function selector and arguments\\n     *                  _calldata is executed with delegatecall on _init\\n     **/\\n    function _updateParaProxyImpl(\\n        bytes32 id,\\n        IParaProxy.ProxyImplementation[] calldata implementationParams,\\n        address _init,\\n        bytes calldata _calldata\\n    ) internal {\\n        address proxyAddress = _addresses[id];\\n\\n        IParaProxy proxy;\\n\\n        if (proxyAddress == address(0)) {\\n            proxy = IParaProxy(address(new ParaProxy(address(this))));\\n            proxy.updateImplementation(implementationParams, _init, _calldata);\\n            _addresses[id] = proxyAddress = address(proxy);\\n            emit ParaProxyCreated(id, proxyAddress, implementationParams);\\n        } else {\\n            proxy = IParaProxy(payable(proxyAddress));\\n\\n            proxy.updateImplementation(implementationParams, _init, _calldata);\\n            emit ParaProxyUpdated(id, proxyAddress, implementationParams);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the identifier of the ParaSpace market.\\n     * @param newMarketId The new id of the market\\n     **/\\n    function _setMarketId(string memory newMarketId) internal {\\n        string memory oldMarketId = _marketId;\\n        _marketId = newMarketId;\\n        emit MarketIdSet(oldMarketId, newMarketId);\\n    }\\n\\n    /**\\n     * @notice Returns the the implementation contract of the proxy contract by its identifier.\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @dev It reverts if the registered address with the given id is not `InitializableImmutableAdminUpgradeabilityProxy`\\n     * @param id The id\\n     * @return The address of the implementation contract\\n     */\\n    function _getProxyImplementation(bytes32 id) internal returns (address) {\\n        address proxyAddress = _addresses[id];\\n        if (proxyAddress == address(0)) {\\n            return address(0);\\n        } else {\\n            address payable payableProxyAddress = payable(proxyAddress);\\n            return\\n                InitializableImmutableAdminUpgradeabilityProxy(\\n                    payableProxyAddress\\n                ).implementation();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\nimport {IParaProxy} from \\\"../interfaces/IParaProxy.sol\\\";\\n\\n/**\\n * @title IPoolAddressesProvider\\n *\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param implementationParams The old address of the Pool\\n     * @param _init The new address to call upon upgrade\\n     * @param _calldata The calldata input for the call\\n     */\\n    event PoolUpdated(\\n        IParaProxy.ProxyImplementation[] indexed implementationParams,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the WETH is updated.\\n     * @param oldAddress The old address of the WETH\\n     * @param newAddress The new address of the WETH\\n     */\\n    event WETHUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event ProtocolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationParams The params of the implementation update\\n     */\\n    event ParaProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        IParaProxy.ProxyImplementation[] indexed implementationParams\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationParams The params of the implementation update\\n     */\\n    event ParaProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        IParaProxy.ProxyImplementation[] indexed implementationParams\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the marketplace registered is updated\\n     * @param id The identifier of the marketplace\\n     * @param marketplace The address of the marketplace contract\\n     * @param adapter The address of the marketplace adapter contract\\n     * @param operator The address of the marketplace transfer helper\\n     * @param paused Is the marketplace adapter paused\\n     */\\n    event MarketplaceUpdated(\\n        bytes32 indexed id,\\n        address indexed marketplace,\\n        address indexed adapter,\\n        address operator,\\n        bool paused\\n    );\\n\\n    /**\\n     * @notice Returns the id of the ParaSpace market to which this contract points to.\\n     * @return The market id\\n     **/\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple ParaSpace markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     **/\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param implementationParams Contains the implementation addresses and function selectors\\n     * @param _init The address of the contract or implementation to execute _calldata\\n     * @param _calldata A function call, including function selector and arguments\\n     *                  _calldata is executed with delegatecall on _init\\n     **/\\n    function updatePoolImpl(\\n        IParaProxy.ProxyImplementation[] calldata implementationParams,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     **/\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     **/\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     **/\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     **/\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the Wrapped ETH.\\n     * @return The address of the Wrapped ETH\\n     */\\n    function getWETH() external view returns (address);\\n\\n    /**\\n     * @notice Returns the info of the marketplace.\\n     * @return The info of the marketplace\\n     */\\n    function getMarketplace(\\n        bytes32 id\\n    ) external view returns (DataTypes.Marketplace memory);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     **/\\n    function setProtocolDataProvider(address newDataProvider) external;\\n\\n    /**\\n     * @notice Updates the address of the WETH.\\n     * @param newWETH The address of the new WETH\\n     **/\\n    function setWETH(address newWETH) external;\\n\\n    /**\\n     * @notice Updates the info of the marketplace.\\n     * @param marketplace The address of the marketplace\\n     *  @param adapter The contract which handles marketplace logic\\n     * @param operator The contract which operates users' tokens\\n     **/\\n    function setMarketplace(\\n        bytes32 id,\\n        address marketplace,\\n        address adapter,\\n        address operator,\\n        bool paused\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IParaProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* EIP-2535: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IParaProxy {\\n    enum ProxyImplementationAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct ProxyImplementation {\\n        address implAddress;\\n        ProxyImplementationAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _implementationParams Contains the implementation addresses and function selectors\\n    /// @param _init The address of the contract or implementation to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function updateImplementation(\\n        ProxyImplementation[] calldata _implementationParams,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event ImplementationUpdated(\\n        ProxyImplementation[] _implementationParams,\\n        address _init,\\n        bytes _calldata\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/paraspace-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {InitializableUpgradeabilityProxy} from \\\"../../../dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\\\";\\nimport {Proxy} from \\\"../../../dependencies/openzeppelin/upgradeability/Proxy.sol\\\";\\nimport {BaseImmutableAdminUpgradeabilityProxy} from \\\"./BaseImmutableAdminUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n *\\n * @dev Extends BaseAdminUpgradeabilityProxy with an initializer function\\n */\\ncontract InitializableImmutableAdminUpgradeabilityProxy is\\n    BaseImmutableAdminUpgradeabilityProxy,\\n    InitializableUpgradeabilityProxy\\n{\\n    /**\\n     * @dev Constructor.\\n     * @param admin The address of the admin\\n     */\\n    constructor(address admin) BaseImmutableAdminUpgradeabilityProxy(admin) {\\n        // Intentionally left blank\\n    }\\n\\n    /// @inheritdoc BaseImmutableAdminUpgradeabilityProxy\\n    function _willFallback()\\n        internal\\n        override(BaseImmutableAdminUpgradeabilityProxy, Proxy)\\n    {\\n        BaseImmutableAdminUpgradeabilityProxy._willFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/paraspace-upgradeability/ParaProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* A custom implementation of EIP-2535\\n* EIP-2535: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {ParaProxyLib} from \\\"./lib/ParaProxyLib.sol\\\";\\nimport {IParaProxy} from \\\"../../../interfaces/IParaProxy.sol\\\";\\n\\ncontract ParaProxy is IParaProxy {\\n    constructor(address _contractOwner) payable {\\n        ParaProxyLib.setContractOwner(_contractOwner);\\n    }\\n\\n    function updateImplementation(\\n        ProxyImplementation[] calldata _implementationParams,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        ParaProxyLib.enforceIsContractOwner();\\n        ParaProxyLib.updateImplementation(\\n            _implementationParams,\\n            _init,\\n            _calldata\\n        );\\n    }\\n\\n    // Find implementation for function that is called and execute the\\n    // function if a implementation is found and return any value.\\n    fallback() external payable {\\n        ParaProxyLib.ProxyStorage storage ds;\\n        bytes32 position = ParaProxyLib.PROXY_STORAGE_POSITION;\\n        // get proxy storage\\n        assembly {\\n            ds.slot := position\\n        }\\n        // get implementation from function selector\\n        address implementation = ds\\n            .selectorToImplAndPosition[msg.sig]\\n            .implAddress;\\n        require(\\n            implementation != address(0),\\n            \\\"ParaProxy: Function does not exist\\\"\\n        );\\n        // Execute external function from implementation using delegatecall and return any value.\\n        assembly {\\n            // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // execute function call using the implementation\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {OfferItem, ConsiderationItem} from \\\"../../../dependencies/seaport/contracts/lib/ConsiderationStructs.sol\\\";\\nimport {IStakefishValidator} from \\\"../../../interfaces/IStakefishValidator.sol\\\";\\n\\nlibrary DataTypes {\\n    enum AssetType {\\n        ERC20,\\n        ERC721\\n    }\\n\\n    address public constant SApeAddress = address(0x1);\\n    uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1e18;\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //xToken address\\n        address xTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //address of the auction strategy\\n        address auctionStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        // timelock strategy\\n        address timeLockStrategyAddress;\\n        // use uint128 to be used for crosschain in the future\\n        // after position move\\n        uint128 unbacked;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62-63: reserved\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n        // auction validity time for closing invalid auctions in one tx.\\n        uint256 auctionValidityTime;\\n    }\\n\\n    struct ERC721SupplyParams {\\n        uint256 tokenId;\\n        bool useAsCollateral;\\n    }\\n\\n    struct StakefishNTokenData {\\n        uint256 validatorIndex;\\n        bytes pubkey;\\n        uint256 withdrawnBalance;\\n        address feePoolAddress;\\n        string nftArtUrl;\\n        uint256 protocolFee;\\n        IStakefishValidator.StateChange[] stateHistory;\\n        uint256[2] pendingFeePoolReward;\\n    }\\n\\n    struct NTokenData {\\n        uint256 tokenId;\\n        uint256 multiplier;\\n        bool useAsCollateral;\\n        bool isAuctioned;\\n        StakefishNTokenData stakefishNTokenData;\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address xTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidateParams {\\n        uint256 reservesCount;\\n        uint256 liquidationAmount;\\n        uint256 collateralTokenId;\\n        uint256 auctionRecoveryHealthFactor;\\n        address weth;\\n        address collateralAsset;\\n        address liquidationAsset;\\n        address borrower;\\n        address liquidator;\\n        bool receiveXToken;\\n        address priceOracle;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteAuctionParams {\\n        uint256 reservesCount;\\n        uint256 auctionRecoveryHealthFactor;\\n        uint256 collateralTokenId;\\n        address collateralAsset;\\n        address user;\\n        address priceOracle;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        address payer;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteSupplyERC721Params {\\n        address asset;\\n        DataTypes.ERC721SupplyParams[] tokenData;\\n        address onBehalfOf;\\n        address payer;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 reservesCount;\\n        address oracle;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        address payer;\\n        bool usePTokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n    }\\n\\n    struct ExecuteWithdrawERC721Params {\\n        address asset;\\n        uint256[] tokenIds;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n    }\\n\\n    struct ExecuteDecreaseUniswapV3LiquidityParams {\\n        address user;\\n        address asset;\\n        uint256 tokenId;\\n        uint256 reservesCount;\\n        uint128 liquidityDecrease;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        bool receiveEthAsWeth;\\n        address oracle;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        bool usedAsCollateral;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n    }\\n\\n    struct FinalizeTransferERC721Params {\\n        address asset;\\n        address from;\\n        address to;\\n        bool usedAsCollateral;\\n        uint256 tokenId;\\n        uint256 balanceFromBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        uint256 reservesCount;\\n        address oracle;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ValidateLiquidateERC20Params {\\n        ReserveCache liquidationAssetReserveCache;\\n        address liquidationAsset;\\n        address weth;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        uint256 liquidationAmount;\\n        uint256 actualLiquidationAmount;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ValidateLiquidateERC721Params {\\n        ReserveCache liquidationAssetReserveCache;\\n        address liquidationAsset;\\n        address liquidator;\\n        address borrower;\\n        uint256 globalDebt;\\n        uint256 healthFactor;\\n        address collateralAsset;\\n        uint256 tokenId;\\n        address weth;\\n        uint256 actualLiquidationAmount;\\n        uint256 maxLiquidationAmount;\\n        uint256 auctionRecoveryHealthFactor;\\n        address priceOracleSentinel;\\n        address xTokenAddress;\\n        bool auctionEnabled;\\n    }\\n\\n    struct ValidateAuctionParams {\\n        address user;\\n        uint256 auctionRecoveryHealthFactor;\\n        uint256 erc721HealthFactor;\\n        address collateralAsset;\\n        uint256 tokenId;\\n        address xTokenAddress;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalVariableDebt;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address xToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address xTokenAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        address auctionStrategyAddress;\\n        address timeLockStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n\\n    struct ExecuteFlashClaimParams {\\n        address receiverAddress;\\n        address[] nftAssets;\\n        uint256[][] nftTokenIds;\\n        bytes params;\\n        address oracle;\\n    }\\n\\n    struct Credit {\\n        address token;\\n        uint256 amount;\\n        bytes orderId;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct ExecuteMarketplaceParams {\\n        bytes32 marketplaceId;\\n        bytes payload;\\n        Credit credit;\\n        uint256 ethLeft;\\n        DataTypes.Marketplace marketplace;\\n        OrderInfo orderInfo;\\n        address weth;\\n        uint16 referralCode;\\n        uint256 reservesCount;\\n        address oracle;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct OrderInfo {\\n        address maker;\\n        address taker;\\n        bytes id;\\n        OfferItem[] offer;\\n        ConsiderationItem[] consideration;\\n    }\\n\\n    struct Marketplace {\\n        address marketplace;\\n        address adapter;\\n        address operator;\\n        bool paused;\\n    }\\n\\n    struct Auction {\\n        uint256 startTime;\\n    }\\n\\n    struct AuctionData {\\n        address asset;\\n        uint256 tokenId;\\n        uint256 startTime;\\n        uint256 currentPriceMultiplier;\\n        uint256 maxPriceMultiplier;\\n        uint256 minExpPriceMultiplier;\\n        uint256 minPriceMultiplier;\\n        uint256 stepLinear;\\n        uint256 stepExp;\\n        uint256 tickLength;\\n    }\\n\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    enum ApeCompoundType {\\n        SwapAndSupply\\n    }\\n\\n    enum ApeCompoundTokenOut {\\n        USDC,\\n        WETH\\n    }\\n\\n    struct ApeCompoundStrategy {\\n        ApeCompoundType ty;\\n        ApeCompoundTokenOut swapTokenOut;\\n        uint256 swapPercent;\\n    }\\n\\n    struct PoolStorage {\\n        // Map of reserves and their data (underlyingAssetOfReserve => reserveData)\\n        mapping(address => ReserveData) _reserves;\\n        // Map of users address and their configuration data (userAddress => userConfiguration)\\n        mapping(address => UserConfigurationMap) _usersConfig;\\n        // List of reserves as a map (reserveId => reserve).\\n        // It is structured as a mapping for gas savings reasons, using the reserve id as index\\n        mapping(uint256 => address) _reservesList;\\n        // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list\\n        uint16 _reservesCount;\\n        // Auction recovery health factor\\n        uint64 _auctionRecoveryHealthFactor;\\n        // Incentive fee for claim ape reward to compound\\n        uint16 _apeCompoundFee;\\n        // Map of user's ape compound strategies\\n        mapping(address => ApeCompoundStrategy) _apeCompoundStrategies;\\n    }\\n\\n    struct ReserveConfigData {\\n        uint256 decimals;\\n        uint256 ltv;\\n        uint256 liquidationThreshold;\\n        uint256 liquidationBonus;\\n        uint256 reserveFactor;\\n        bool usageAsCollateralEnabled;\\n        bool borrowingEnabled;\\n        bool isActive;\\n        bool isFrozen;\\n        bool isPaused;\\n    }\\n\\n    struct TimeLockParams {\\n        uint48 releaseTime;\\n        TimeLockActionType actionType;\\n    }\\n\\n    struct TimeLockFactorParams {\\n        AssetType assetType;\\n        address asset;\\n        uint256 amount;\\n    }\\n\\n    enum TimeLockActionType {\\n        BORROW,\\n        WITHDRAW\\n    }\\n\\n    struct ParaSpacePositionMoveInfo {\\n        address[] cTokens;\\n        DataTypes.AssetType[] cTypes;\\n        uint256[][] cAmountsOrTokenIds;\\n        address[] dTokens;\\n        uint256[] dAmounts;\\n        address to;\\n    }\\n\\n    struct ParaSpacePositionMoveParams {\\n        address user;\\n        address[] cTokens;\\n        DataTypes.AssetType[] cTypes;\\n        uint256[][] cAmountsOrTokenIds;\\n        address[] dTokens;\\n        uint256[] dAmounts;\\n        address to;\\n        address priceOracle;\\n        address priceOracleSentinel;\\n        uint256 reservesCount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n *\\n * @notice Defines the error messages emitted by the different contracts of the ParaSpace protocol\\n */\\nlibrary Errors {\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\n    string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\n    string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\n    string public constant CALLER_NOT_XTOKEN = \\\"11\\\"; // 'The caller of the function is not an PToken or NToken'\\n    string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\n    string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\n    string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\n    string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\n    string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\n    string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\n    string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\n    string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\n    string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\n    string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\n        \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\n    string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\n    string public constant COLLATERAL_CANNOT_BE_AUCTIONED_OR_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be auctioned OR liquidated'\\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\n    string public constant SAME_BLOCK_BORROW_REPAY = \\\"48\\\"; // 'Borrow and repay in same block is not allowed'\\n    string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\n    string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\n    string public constant XTOKEN_SUPPLY_NOT_ZERO = \\\"54\\\"; // 'PToken supply is not zero'\\n    string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\n    string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\n    string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\n    string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\n    string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\n    string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\n    string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n    string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\n    string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\n    string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\n    string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\n    string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\n    string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\n    string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\n    string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\n    string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\n    string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n    string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\n    string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\n    string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\n    string public constant NOT_THE_OWNER = \\\"91\\\"; // user is not the owner of a given asset\\n    string public constant LIQUIDATION_AMOUNT_NOT_ENOUGH = \\\"92\\\";\\n    string public constant INVALID_ASSET_TYPE = \\\"93\\\"; // invalid asset type for action.\\n    string public constant INVALID_FLASH_CLAIM_RECEIVER = \\\"94\\\"; // invalid flash claim receiver.\\n    string public constant ERC721_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"95\\\"; // ERC721 Health factor is not below the threshold. Can only liquidate ERC20.\\n    string public constant UNDERLYING_ASSET_CAN_NOT_BE_TRANSFERRED = \\\"96\\\"; //underlying asset can not be transferred.\\n    string public constant TOKEN_TRANSFERRED_CAN_NOT_BE_SELF_ADDRESS = \\\"97\\\"; //token transferred can not be self address.\\n    string public constant INVALID_AIRDROP_CONTRACT_ADDRESS = \\\"98\\\"; //invalid airdrop contract address.\\n    string public constant INVALID_AIRDROP_PARAMETERS = \\\"99\\\"; //invalid airdrop parameters.\\n    string public constant CALL_AIRDROP_METHOD_FAILED = \\\"100\\\"; //call airdrop method failed.\\n    string public constant SUPPLIER_NOT_NTOKEN = \\\"101\\\"; //supplier is not the NToken contract\\n    string public constant CALL_MARKETPLACE_FAILED = \\\"102\\\"; //call marketplace failed.\\n    string public constant INVALID_MARKETPLACE_ID = \\\"103\\\"; //invalid marketplace id.\\n    string public constant INVALID_MARKETPLACE_ORDER = \\\"104\\\"; //invalid marketplace id.\\n    string public constant CREDIT_DOES_NOT_MATCH_ORDER = \\\"105\\\"; //credit doesn't match order.\\n    string public constant PAYNOW_NOT_ENOUGH = \\\"106\\\"; //paynow not enough.\\n    string public constant INVALID_CREDIT_SIGNATURE = \\\"107\\\"; //invalid credit signature.\\n    string public constant INVALID_ORDER_TAKER = \\\"108\\\"; //invalid order taker.\\n    string public constant MARKETPLACE_PAUSED = \\\"109\\\"; //marketplace paused.\\n    string public constant INVALID_AUCTION_RECOVERY_HEALTH_FACTOR = \\\"110\\\"; //invalid auction recovery health factor.\\n    string public constant AUCTION_ALREADY_STARTED = \\\"111\\\"; //auction already started.\\n    string public constant AUCTION_NOT_STARTED = \\\"112\\\"; //auction not started yet.\\n    string public constant AUCTION_NOT_ENABLED = \\\"113\\\"; //auction not enabled on the reserve.\\n    string public constant ERC721_HEALTH_FACTOR_NOT_ABOVE_THRESHOLD = \\\"114\\\"; //ERC721 Health factor is not above the threshold.\\n    string public constant TOKEN_IN_AUCTION = \\\"115\\\"; //tokenId is in auction.\\n    string public constant AUCTIONED_BALANCE_NOT_ZERO = \\\"116\\\"; //auctioned balance not zero.\\n    string public constant LIQUIDATOR_CAN_NOT_BE_SELF = \\\"117\\\"; //user can not liquidate himself.\\n    string public constant INVALID_RECIPIENT = \\\"118\\\"; //invalid recipient specified in order.\\n    string public constant FLASHCLAIM_NOT_ALLOWED = \\\"119\\\"; //flash claim is not allowed for UniswapV3 & Stakefish\\n    string public constant NTOKEN_BALANCE_EXCEEDED = \\\"120\\\"; //ntoken balance exceed limit.\\n    string public constant ORACLE_PRICE_NOT_READY = \\\"121\\\"; //oracle price not ready.\\n    string public constant SET_ORACLE_SOURCE_NOT_ALLOWED = \\\"122\\\"; //source of oracle not allowed to set.\\n    string public constant INVALID_LIQUIDATION_ASSET = \\\"123\\\"; //invalid liquidation asset.\\n    string public constant XTOKEN_TYPE_NOT_ALLOWED = \\\"124\\\"; //the corresponding xTokenType not allowed in this action\\n    string public constant GLOBAL_DEBT_IS_ZERO = \\\"125\\\"; //liquidation is not allowed when global debt is zero.\\n    string public constant ORACLE_PRICE_EXPIRED = \\\"126\\\"; //oracle price expired.\\n    string public constant APE_STAKING_POSITION_EXISTED = \\\"127\\\"; //ape staking position is existed.\\n    string public constant SAPE_NOT_ALLOWED = \\\"128\\\"; //operation is not allow for sApe.\\n    string public constant TOTAL_STAKING_AMOUNT_WRONG = \\\"129\\\"; //cash plus borrow amount not equal to total staking amount.\\n    string public constant NOT_THE_BAKC_OWNER = \\\"130\\\"; //user is not the bakc owner.\\n    string public constant CALLER_NOT_EOA = \\\"131\\\"; //The caller of the function is not an EOA account\\n    string public constant MAKER_SAME_AS_TAKER = \\\"132\\\"; //maker and taker shouldn't be the same address\\n    string public constant TOKEN_ALREADY_DELEGATED = \\\"133\\\"; //token is already delegted\\n    string public constant INVALID_STATE = \\\"134\\\"; //invalid token status\\n    string public constant INVALID_TOKEN_ID = \\\"135\\\"; //invalid token id\\n    string public constant SENDER_SAME_AS_RECEIVER = \\\"136\\\"; //sender and receiver shouldn't be the same address\\n    string public constant INVALID_YIELD_UNDERLYING_TOKEN = \\\"137\\\"; //invalid yield underlying token\\n    string public constant CALLER_NOT_OPERATOR = \\\"138\\\"; // The caller of the function is not operator\\n    string public constant INVALID_FEE_VALUE = \\\"139\\\"; // invalid fee rate value\\n    string public constant TOKEN_NOT_ALLOW_RESCUE = \\\"140\\\"; // token is not allow rescue\\n\\n    string public constant INVALID_PARAMETER = \\\"170\\\"; //invalid parameter\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n    /**\\n     * @dev Contract initializer.\\n     * @param _logic Address of the initial implementation.\\n     * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n     * It should include the signature and the parameters of the function to be called, as described in\\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n     * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n     */\\n    function initialize(address _logic, bytes memory _data) public payable {\\n        require(_implementation() == address(0));\\n        assert(\\n            IMPLEMENTATION_SLOT ==\\n                bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1)\\n        );\\n        _setImplementation(_logic);\\n        if (_data.length > 0) {\\n            (bool success, ) = _logic.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Fallback function.\\n     * Will run if no other function in the contract matches the call data.\\n     * Implemented entirely in `_fallback`.\\n     */\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @return The Address of the implementation.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * This is a low level function that doesn't return to its internal call site.\\n     * It will return to the external caller whatever the implementation returns.\\n     * @param implementation Address to delegate.\\n     */\\n    function _delegate(address implementation) internal {\\n        //solium-disable-next-line\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that is run as the first thing in the fallback function.\\n     * Can be redefined in derived contracts to add functionality.\\n     * Redefinitions must call super._willFallback().\\n     */\\n    function _willFallback() internal virtual {}\\n\\n    /**\\n     * @dev fallback implementation.\\n     * Extracted to enable manual triggering.\\n     */\\n    function _fallback() internal {\\n        _willFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/paraspace-upgradeability/BaseImmutableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {BaseUpgradeabilityProxy} from \\\"../../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title BaseImmutableAdminUpgradeabilityProxy\\n * , inspired by the OpenZeppelin upgradeability proxy pattern\\n * @notice This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * @dev The _admin role is stored in an immutable, which helps saving transactions costs\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseImmutableAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n    address internal immutable _admin;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param admin_ The address of the admin\\n     */\\n    constructor(address admin_) {\\n        _admin = admin_;\\n    }\\n\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @notice Return the admin address\\n     * @return The address of the proxy admin.\\n     */\\n    function admin() external ifAdmin returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @notice Return the implementation address\\n     * @return The address of the implementation.\\n     */\\n    function implementation() external ifAdmin returns (address) {\\n        return _implementation();\\n    }\\n\\n    /**\\n     * @notice Upgrade the backing implementation of the proxy.\\n     * @dev Only the admin can call this function.\\n     * @param newImplementation The address of the new implementation.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @notice Upgrade the backing implementation of the proxy and call a function\\n     * on the new implementation.\\n     * @dev This is useful to initialize the proxied contract.\\n     * @param newImplementation The address of the new implementation.\\n     * @param data Data to send as msg.data in the low level call.\\n     * It should include the signature and the parameters of the function to be called, as described in\\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n     */\\n    function upgradeToAndCall(\\n        address newImplementation,\\n        bytes calldata data\\n    ) external payable ifAdmin {\\n        _upgradeTo(newImplementation);\\n        (bool success, ) = newImplementation.delegatecall(data);\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Only fall back when the sender is not the admin.\\n     */\\n    function _willFallback() internal virtual override {\\n        require(\\n            msg.sender != _admin,\\n            \\\"Cannot call fallback function from the proxy admin\\\"\\n        );\\n        super._willFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/paraspace-upgradeability/lib/ParaProxyLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IParaProxy} from \\\"../../../../interfaces/IParaProxy.sol\\\";\\n\\nlibrary ParaProxyLib {\\n    bytes32 constant PROXY_STORAGE_POSITION =\\n        bytes32(\\n            uint256(keccak256(\\\"paraspace.proxy.implementation.storage\\\")) - 1\\n        );\\n\\n    struct ImplementationAddressAndPosition {\\n        address implAddress;\\n        uint96 functionSelectorPosition; // position in implementationFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct ImplementationFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 implementationAddressPosition; // position of implAddress in implementationAddresses array\\n    }\\n\\n    struct ProxyStorage {\\n        // maps function selector to the implementation address and\\n        // the position of the selector in the implementationFunctionSelectors.selectors array\\n        mapping(bytes4 => ImplementationAddressAndPosition) selectorToImplAndPosition;\\n        // maps implementation addresses to function selectors\\n        mapping(address => ImplementationFunctionSelectors) implementationFunctionSelectors;\\n        // implementation addresses\\n        address[] implementationAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (ProxyStorage storage ds) {\\n        bytes32 position = PROXY_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        ProxyStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"ParaProxy: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event ImplementationUpdated(\\n        IParaProxy.ProxyImplementation[] _implementationData,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function updateImplementation(\\n        IParaProxy.ProxyImplementation[] memory _implementationData,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 implIndex;\\n            implIndex < _implementationData.length;\\n            implIndex++\\n        ) {\\n            IParaProxy.ProxyImplementationAction action = _implementationData[\\n                implIndex\\n            ].action;\\n            if (action == IParaProxy.ProxyImplementationAction.Add) {\\n                addFunctions(\\n                    _implementationData[implIndex].implAddress,\\n                    _implementationData[implIndex].functionSelectors\\n                );\\n            } else if (action == IParaProxy.ProxyImplementationAction.Replace) {\\n                replaceFunctions(\\n                    _implementationData[implIndex].implAddress,\\n                    _implementationData[implIndex].functionSelectors\\n                );\\n            } else if (action == IParaProxy.ProxyImplementationAction.Remove) {\\n                removeFunctions(\\n                    _implementationData[implIndex].implAddress,\\n                    _implementationData[implIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"ParaProxy: Incorrect ProxyImplementationAction\\\");\\n            }\\n        }\\n        emit ImplementationUpdated(_implementationData, _init, _calldata);\\n        initializeImplementation(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _implementationAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"ParaProxy: No selectors in implementation to cut\\\"\\n        );\\n        ProxyStorage storage ds = diamondStorage();\\n        require(\\n            _implementationAddress != address(0),\\n            \\\"ParaProxy: Add implementation can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .functionSelectors\\n                .length\\n        );\\n        // add new implementation address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _implementationAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldImplementationAddress = ds\\n                .selectorToImplAndPosition[selector]\\n                .implAddress;\\n            require(\\n                oldImplementationAddress == address(0),\\n                \\\"ParaProxy: Can't add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _implementationAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _implementationAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"ParaProxy: No selectors in implementation to cut\\\"\\n        );\\n        ProxyStorage storage ds = diamondStorage();\\n        require(\\n            _implementationAddress != address(0),\\n            \\\"ParaProxy: Add implementation can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .functionSelectors\\n                .length\\n        );\\n        // add new implementation address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _implementationAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldImplementationAddress = ds\\n                .selectorToImplAndPosition[selector]\\n                .implAddress;\\n            require(\\n                oldImplementationAddress != _implementationAddress,\\n                \\\"ParaProxy: Can't replace function with same function\\\"\\n            );\\n            removeFunction(ds, oldImplementationAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _implementationAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _implementationAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"ParaProxy: No selectors in implementation to cut\\\"\\n        );\\n        ProxyStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _implementationAddress == address(0),\\n            \\\"ParaProxy: Remove implementation address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldImplementationAddress = ds\\n                .selectorToImplAndPosition[selector]\\n                .implAddress;\\n            removeFunction(ds, oldImplementationAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(\\n        ProxyStorage storage ds,\\n        address _implementationAddress\\n    ) internal {\\n        enforceHasContractCode(\\n            _implementationAddress,\\n            \\\"ParaProxy: New implementation has no code\\\"\\n        );\\n        ds\\n            .implementationFunctionSelectors[_implementationAddress]\\n            .implementationAddressPosition = ds.implementationAddresses.length;\\n        ds.implementationAddresses.push(_implementationAddress);\\n    }\\n\\n    function addFunction(\\n        ProxyStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _implementationAddress\\n    ) internal {\\n        ds\\n            .selectorToImplAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds\\n            .implementationFunctionSelectors[_implementationAddress]\\n            .functionSelectors\\n            .push(_selector);\\n        ds\\n            .selectorToImplAndPosition[_selector]\\n            .implAddress = _implementationAddress;\\n    }\\n\\n    function removeFunction(\\n        ProxyStorage storage ds,\\n        address _implementationAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _implementationAddress != address(0),\\n            \\\"ParaProxy: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a paraProxy\\n        require(\\n            _implementationAddress != address(this),\\n            \\\"ParaProxy: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToImplAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .implementationFunctionSelectors[_implementationAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .functionSelectors[selectorPosition] = lastSelector;\\n            ds\\n                .selectorToImplAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds\\n            .implementationFunctionSelectors[_implementationAddress]\\n            .functionSelectors\\n            .pop();\\n        delete ds.selectorToImplAndPosition[_selector];\\n\\n        // if no more selectors for implementation address then delete the implementation address\\n        if (lastSelectorPosition == 0) {\\n            // replace implementation address with last implementation address and delete last implementation address\\n            uint256 lastImplementationAddressPosition = ds\\n                .implementationAddresses\\n                .length - 1;\\n            uint256 implementationAddressPosition = ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .implementationAddressPosition;\\n            if (\\n                implementationAddressPosition !=\\n                lastImplementationAddressPosition\\n            ) {\\n                address lastImplementationAddress = ds.implementationAddresses[\\n                    lastImplementationAddressPosition\\n                ];\\n                ds.implementationAddresses[\\n                    implementationAddressPosition\\n                ] = lastImplementationAddress;\\n                ds\\n                    .implementationFunctionSelectors[lastImplementationAddress]\\n                    .implementationAddressPosition = implementationAddressPosition;\\n            }\\n            ds.implementationAddresses.pop();\\n            delete ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .implementationAddressPosition;\\n        }\\n    }\\n\\n    function initializeImplementation(\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"ParaProxy: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"ParaProxy: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"ParaProxy: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"ParaProxy: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/lib/ConsiderationStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    OrderType,\\n    BasicOrderType,\\n    ItemType,\\n    Side\\n} from \\\"./ConsiderationEnums.sol\\\";\\n\\n/**\\n * @dev An order contains eleven components: an offerer, a zone (or account that\\n *      can cancel the order or restrict who can fulfill the order depending on\\n *      the type), the order type (specifying partial fill support as well as\\n *      restricted order status), the start and end time, a hash that will be\\n *      provided to the zone when validating restricted orders, a salt, a key\\n *      corresponding to a given conduit, a counter, and an arbitrary number of\\n *      offer items that can be spent along with consideration items that must\\n *      be received by their respective recipient.\\n */\\nstruct OrderComponents {\\n    address offerer;\\n    address zone;\\n    OfferItem[] offer;\\n    ConsiderationItem[] consideration;\\n    OrderType orderType;\\n    uint256 startTime;\\n    uint256 endTime;\\n    bytes32 zoneHash;\\n    uint256 salt;\\n    bytes32 conduitKey;\\n    uint256 counter;\\n}\\n\\n/**\\n * @dev An offer item has five components: an item type (ETH or other native\\n *      tokens, ERC20, ERC721, and ERC1155, as well as criteria-based ERC721 and\\n *      ERC1155), a token address, a dual-purpose \\\"identifierOrCriteria\\\"\\n *      component that will either represent a tokenId or a merkle root\\n *      depending on the item type, and a start and end amount that support\\n *      increasing or decreasing amounts over the duration of the respective\\n *      order.\\n */\\nstruct OfferItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifierOrCriteria;\\n    uint256 startAmount;\\n    uint256 endAmount;\\n}\\n\\n/**\\n * @dev A consideration item has the same five components as an offer item and\\n *      an additional sixth component designating the required recipient of the\\n *      item.\\n */\\nstruct ConsiderationItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifierOrCriteria;\\n    uint256 startAmount;\\n    uint256 endAmount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev A spent item is translated from a utilized offer item and has four\\n *      components: an item type (ETH or other native tokens, ERC20, ERC721, and\\n *      ERC1155), a token address, a tokenId, and an amount.\\n */\\nstruct SpentItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifier;\\n    uint256 amount;\\n}\\n\\n/**\\n * @dev A received item is translated from a utilized consideration item and has\\n *      the same four components as a spent item, as well as an additional fifth\\n *      component designating the required recipient of the item.\\n */\\nstruct ReceivedItem {\\n    ItemType itemType;\\n    address token;\\n    uint256 identifier;\\n    uint256 amount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n *      matching, a group of six functions may be called that only requires a\\n *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n *      of the basic order (a simple derivation function for the basic order\\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n */\\nstruct BasicOrderParameters {\\n    // calldata offset\\n    address considerationToken; // 0x24\\n    uint256 considerationIdentifier; // 0x44\\n    uint256 considerationAmount; // 0x64\\n    address payable offerer; // 0x84\\n    address zone; // 0xa4\\n    address offerToken; // 0xc4\\n    uint256 offerIdentifier; // 0xe4\\n    uint256 offerAmount; // 0x104\\n    BasicOrderType basicOrderType; // 0x124\\n    uint256 startTime; // 0x144\\n    uint256 endTime; // 0x164\\n    bytes32 zoneHash; // 0x184\\n    uint256 salt; // 0x1a4\\n    bytes32 offererConduitKey; // 0x1c4\\n    bytes32 fulfillerConduitKey; // 0x1e4\\n    uint256 totalOriginalAdditionalRecipients; // 0x204\\n    AdditionalRecipient[] additionalRecipients; // 0x224\\n    bytes signature; // 0x244\\n    // Total length, excluding dynamic array data: 0x264 (580)\\n}\\n\\n/**\\n * @dev Basic orders can supply any number of additional recipients, with the\\n *      implied assumption that they are supplied from the offered ETH (or other\\n *      native token) or ERC20 token for the order.\\n */\\nstruct AdditionalRecipient {\\n    uint256 amount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev The full set of order components, with the exception of the counter,\\n *      must be supplied when fulfilling more sophisticated orders or groups of\\n *      orders. The total number of original consideration items must also be\\n *      supplied, as the caller may specify additional consideration items.\\n */\\nstruct OrderParameters {\\n    address offerer; // 0x00\\n    address zone; // 0x20\\n    OfferItem[] offer; // 0x40\\n    ConsiderationItem[] consideration; // 0x60\\n    OrderType orderType; // 0x80\\n    uint256 startTime; // 0xa0\\n    uint256 endTime; // 0xc0\\n    bytes32 zoneHash; // 0xe0\\n    uint256 salt; // 0x100\\n    bytes32 conduitKey; // 0x120\\n    uint256 totalOriginalConsiderationItems; // 0x140\\n    // offer.length                          // 0x160\\n}\\n\\n/**\\n * @dev Orders require a signature in addition to the other order parameters.\\n */\\nstruct Order {\\n    OrderParameters parameters;\\n    bytes signature;\\n}\\n\\n/**\\n * @dev Advanced orders include a numerator (i.e. a fraction to attempt to fill)\\n *      and a denominator (the total size of the order) in addition to the\\n *      signature and other order parameters. It also supports an optional field\\n *      for supplying extra data; this data will be included in a staticcall to\\n *      `isValidOrderIncludingExtraData` on the zone for the order if the order\\n *      type is restricted and the offerer or zone are not the caller.\\n */\\nstruct AdvancedOrder {\\n    OrderParameters parameters;\\n    uint120 numerator;\\n    uint120 denominator;\\n    bytes signature;\\n    bytes extraData;\\n}\\n\\n/**\\n * @dev Orders can be validated (either explicitly via `validate`, or as a\\n *      consequence of a full or partial fill), specifically cancelled (they can\\n *      also be cancelled in bulk via incrementing a per-zone counter), and\\n *      partially or fully filled (with the fraction filled represented by a\\n *      numerator and denominator).\\n */\\nstruct OrderStatus {\\n    bool isValidated;\\n    bool isCancelled;\\n    uint120 numerator;\\n    uint120 denominator;\\n}\\n\\n/**\\n * @dev A criteria resolver specifies an order, side (offer vs. consideration),\\n *      and item index. It then provides a chosen identifier (i.e. tokenId)\\n *      alongside a merkle proof demonstrating the identifier meets the required\\n *      criteria.\\n */\\nstruct CriteriaResolver {\\n    uint256 orderIndex;\\n    Side side;\\n    uint256 index;\\n    uint256 identifier;\\n    bytes32[] criteriaProof;\\n}\\n\\n/**\\n * @dev A fulfillment is applied to a group of orders. It decrements a series of\\n *      offer and consideration items, then generates a single execution\\n *      element. A given fulfillment can be applied to as many offer and\\n *      consideration items as desired, but must contain at least one offer and\\n *      at least one consideration that match. The fulfillment must also remain\\n *      consistent on all key parameters across all offer items (same offerer,\\n *      token, type, tokenId, and conduit preference) as well as across all\\n *      consideration items (token, type, tokenId, and recipient).\\n */\\nstruct Fulfillment {\\n    FulfillmentComponent[] offerComponents;\\n    FulfillmentComponent[] considerationComponents;\\n}\\n\\n/**\\n * @dev Each fulfillment component contains one index referencing a specific\\n *      order and another referencing a specific offer or consideration item.\\n */\\nstruct FulfillmentComponent {\\n    uint256 orderIndex;\\n    uint256 itemIndex;\\n}\\n\\n/**\\n * @dev An execution is triggered once all consideration items have been zeroed\\n *      out. It sends the item in question from the offerer to the item's\\n *      recipient, optionally sourcing approvals from either this contract\\n *      directly or from the offerer's chosen conduit if one is specified. An\\n *      execution is not provided as an argument, but rather is derived via\\n *      orders, criteria resolvers, and fulfillments (where the total number of\\n *      executions will be less than or equal to the total number of indicated\\n *      fulfillments) and returned as part of `matchOrders`.\\n */\\nstruct Execution {\\n    ReceivedItem item;\\n    address offerer;\\n    bytes32 conduitKey;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakefishValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title The interface for StakefishValidator\\n/// @notice Defines implementation of the wallet (deposit, withdraw, collect fees)\\ninterface IStakefishValidator {\\n    enum State {\\n        PreDeposit,\\n        PostDeposit,\\n        Active,\\n        ExitRequested,\\n        Exited,\\n        Withdrawn,\\n        Burnable\\n    }\\n\\n    /// @dev aligns into 32 byte\\n    struct StateChange {\\n        State state; // 1 byte\\n        bytes15 userData; // 15 byte (future use)\\n        uint128 changedAt; // 16 byte\\n    }\\n\\n    function validatorIndex() external view returns (uint256);\\n\\n    function pubkey() external view returns (bytes memory);\\n\\n    function withdrawnBalance() external view returns (uint256);\\n\\n    function feePoolAddress() external view returns (address);\\n\\n    function stateHistory(\\n        uint256 index\\n    ) external view returns (StateChange memory);\\n\\n    /// @notice Inspect state of the change\\n    function lastStateChange() external view returns (StateChange memory);\\n\\n    /// @notice NFT Owner requests a validator exit\\n    /// State.Running -> State.ExitRequested\\n    /// emit ValidatorExitRequest(pubkey)\\n    function requestExit() external;\\n\\n    /// @notice user withdraw balance and charge a fee\\n    function withdraw() external;\\n\\n    /// @notice get pending fee pool rewards\\n    function pendingFeePoolReward() external view returns (uint256, uint256);\\n\\n    /// @notice claim fee pool and forward to nft owner\\n    function claimFeePool(uint256 amountRequested) external;\\n\\n    function getProtocolFee() external view returns (uint256);\\n\\n    function getNFTArtUrl() external view returns (string memory);\\n\\n    /// @notice computes commission, useful for showing on UI\\n    function computeCommission(uint256 amount) external view returns (uint256);\\n\\n    function render() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../contracts/Address.sol\\\";\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     * @param implementation Address of the new implementation.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * @return impl Address of the current implementation\\n     */\\n    function _implementation() internal view override returns (address impl) {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        //solium-disable-next-line\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation address of the proxy.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function _setImplementation(address newImplementation) internal {\\n        require(\\n            Address.isContract(newImplementation),\\n            \\\"Cannot set a proxy implementation to a non-contract address\\\"\\n        );\\n\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n        //solium-disable-next-line\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/seaport/contracts/lib/ConsiderationEnums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// prettier-ignore\\nenum OrderType {\\n    // 0: no partial fills, anyone can execute\\n    FULL_OPEN,\\n\\n    // 1: partial fills supported, anyone can execute\\n    PARTIAL_OPEN,\\n\\n    // 2: no partial fills, only offerer or zone can execute\\n    FULL_RESTRICTED,\\n\\n    // 3: partial fills supported, only offerer or zone can execute\\n    PARTIAL_RESTRICTED\\n}\\n\\n// prettier-ignore\\nenum BasicOrderType {\\n    // 0: no partial fills, anyone can execute\\n    ETH_TO_ERC721_FULL_OPEN,\\n\\n    // 1: partial fills supported, anyone can execute\\n    ETH_TO_ERC721_PARTIAL_OPEN,\\n\\n    // 2: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC721_FULL_RESTRICTED,\\n\\n    // 3: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n    // 4: no partial fills, anyone can execute\\n    ETH_TO_ERC1155_FULL_OPEN,\\n\\n    // 5: partial fills supported, anyone can execute\\n    ETH_TO_ERC1155_PARTIAL_OPEN,\\n\\n    // 6: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC1155_FULL_RESTRICTED,\\n\\n    // 7: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n    // 8: no partial fills, anyone can execute\\n    ERC20_TO_ERC721_FULL_OPEN,\\n\\n    // 9: partial fills supported, anyone can execute\\n    ERC20_TO_ERC721_PARTIAL_OPEN,\\n\\n    // 10: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC721_FULL_RESTRICTED,\\n\\n    // 11: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n    // 12: no partial fills, anyone can execute\\n    ERC20_TO_ERC1155_FULL_OPEN,\\n\\n    // 13: partial fills supported, anyone can execute\\n    ERC20_TO_ERC1155_PARTIAL_OPEN,\\n\\n    // 14: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC1155_FULL_RESTRICTED,\\n\\n    // 15: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n    // 16: no partial fills, anyone can execute\\n    ERC721_TO_ERC20_FULL_OPEN,\\n\\n    // 17: partial fills supported, anyone can execute\\n    ERC721_TO_ERC20_PARTIAL_OPEN,\\n\\n    // 18: no partial fills, only offerer or zone can execute\\n    ERC721_TO_ERC20_FULL_RESTRICTED,\\n\\n    // 19: partial fills supported, only offerer or zone can execute\\n    ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n\\n    // 20: no partial fills, anyone can execute\\n    ERC1155_TO_ERC20_FULL_OPEN,\\n\\n    // 21: partial fills supported, anyone can execute\\n    ERC1155_TO_ERC20_PARTIAL_OPEN,\\n\\n    // 22: no partial fills, only offerer or zone can execute\\n    ERC1155_TO_ERC20_FULL_RESTRICTED,\\n\\n    // 23: partial fills supported, only offerer or zone can execute\\n    ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n}\\n\\n// prettier-ignore\\nenum BasicOrderRouteType {\\n    // 0: provide Ether (or other native token) to receive offered ERC721 item.\\n    ETH_TO_ERC721,\\n\\n    // 1: provide Ether (or other native token) to receive offered ERC1155 item.\\n    ETH_TO_ERC1155,\\n\\n    // 2: provide ERC20 item to receive offered ERC721 item.\\n    ERC20_TO_ERC721,\\n\\n    // 3: provide ERC20 item to receive offered ERC1155 item.\\n    ERC20_TO_ERC1155,\\n\\n    // 4: provide ERC721 item to receive offered ERC20 item.\\n    ERC721_TO_ERC20,\\n\\n    // 5: provide ERC1155 item to receive offered ERC20 item.\\n    ERC1155_TO_ERC20\\n}\\n\\n// prettier-ignore\\nenum ItemType {\\n    // 0: ETH on mainnet, MATIC on polygon, etc.\\n    NATIVE,\\n\\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n    ERC20,\\n\\n    // 2: ERC721 items\\n    ERC721,\\n\\n    // 3: ERC1155 items\\n    ERC1155,\\n\\n    // 4: ERC721 items where a number of tokenIds are supported\\n    ERC721_WITH_CRITERIA,\\n\\n    // 5: ERC1155 items where a number of ids are supported\\n    ERC1155_WITH_CRITERIA\\n}\\n\\n// prettier-ignore\\nenum Side {\\n    // 0: Items that can be spent\\n    OFFER,\\n\\n    // 1: Items that must be received\\n    CONSIDERATION\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@matterlabs/=node_modules/@matterlabs/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@prb/=node_modules/@prb/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"contracts/=contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"pnm-contracts/=lib/pnm-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ACLAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ACLManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementationAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementationAddress\",\"type\":\"address\"}],\"name\":\"AddressSetAsProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"oldMarketId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newMarketId\",\"type\":\"string\"}],\"name\":\"MarketIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"MarketplaceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"enum IParaProxy.ProxyImplementationAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":true,\"internalType\":\"struct IParaProxy.ProxyImplementation[]\",\"name\":\"implementationParams\",\"type\":\"tuple[]\"}],\"name\":\"ParaProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"enum IParaProxy.ProxyImplementationAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":true,\"internalType\":\"struct IParaProxy.ProxyImplementation[]\",\"name\":\"implementationParams\",\"type\":\"tuple[]\"}],\"name\":\"ParaProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PoolConfiguratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"enum IParaProxy.ProxyImplementationAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":true,\"internalType\":\"struct IParaProxy.ProxyImplementation[]\",\"name\":\"implementationParams\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PriceOracleSentinelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PriceOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ProtocolDataProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"WETHUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getACLAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getACLManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getMarketplace\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.Marketplace\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracleSentinel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAclAdmin\",\"type\":\"address\"}],\"name\":\"setACLAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAclManager\",\"type\":\"address\"}],\"name\":\"setACLManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newImplementationAddress\",\"type\":\"address\"}],\"name\":\"setAddressAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newMarketId\",\"type\":\"string\"}],\"name\":\"setMarketId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPoolConfiguratorImpl\",\"type\":\"address\"}],\"name\":\"setPoolConfiguratorImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPriceOracleSentinel\",\"type\":\"address\"}],\"name\":\"setPriceOracleSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDataProvider\",\"type\":\"address\"}],\"name\":\"setProtocolDataProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWETH\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"enum IParaProxy.ProxyImplementationAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IParaProxy.ProxyImplementation[]\",\"name\":\"implementationParams\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"updatePoolImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PoolAddressesProvider", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000002f2d07d60ea7330dd2314f4413ccbb2dc25276ef000000000000000000000000000000000000000000000000000000000000000b5061726153706163654d4d000000000000000000000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}