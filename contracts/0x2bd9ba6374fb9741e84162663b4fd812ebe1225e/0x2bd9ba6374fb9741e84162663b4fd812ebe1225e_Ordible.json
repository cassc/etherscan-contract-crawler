{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nBRC20\u00a0Tools\u00a0and\u00a0Portofolio Management\u00a0Service\u00a0on Telegram.\r\n\r\nWebsite link: https://ordible.bot\r\nTwitter: https://x.com/ordible_bot\r\nMedium: https://ordible.medium.com\r\nYoutube: https://youtube.com/@ordible\r\nTelegram: https://t.me/ordiblebot\r\nOther Useful links: https://linktr.ee/Ordible\r\n\r\n**/\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @title Context\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, but through this contract instead.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @title IERC20\r\n * @dev Interface for the ERC20 standard token.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Contract module that provides basic authorization control functions.\r\n * Implements a modified version of the OpenZeppelin Ownable contract.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title IUniswapV2Factory\r\n * @dev Interface for the Uniswap V2 Factory contract.\r\n */\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n/**\r\n * @title IUniswapV2Router02\r\n * @dev Interface for the Uniswap V2 Router02 contract.\r\n */\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n/**\r\n * @title Ordible\r\n * @dev ERC20 token contract with additional features for tax, liquidity, and ownership.\r\n */\r\ncontract Ordible is Context, IERC20, Ownable {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    address payable private _taxWallet;\r\n    address private constant deadAddress = address(0xdead);\r\n    address private constant uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    uint256 private initialBuyTaxRate  = 20;\r\n    uint256 private initialSellTaxRate = 25;\r\n    uint256 private finalBuyTaxRate  = 4;\r\n    uint256 private finalSellTaxRate = 4;\r\n    uint256 private buyTaxReductionThreshold  = 30;\r\n    uint256 private sellTaxReductionThreshold = 45;\r\n    uint256 private buyCountSwapThreshold = 40;\r\n    uint256 private totalBuysCount = 0;\r\n\r\n    string private constant _name = \"Ordible\";\r\n    string private constant _symbol = \"ORB\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 100000000 * 10**_decimals;\r\n\r\n    uint256 public _maxTxAmount = 1000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 1000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold = 100000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap = 1000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n\r\n    bool private tradingOpen;\r\n    bool private limitEffect = true;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address payable taxWalletAddress) {\r\n        _taxWallet = taxWalletAddress;\r\n        _balances[_msgSender()] = _totalSupply;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[deadAddress] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     */\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total token supply.\r\n     */\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the balance of the specified address.\r\n     * @param account The address to query the balance of.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens to `recipient`.\r\n     * @param recipient The address to transfer to.\r\n     * @param amount The amount to be transferred.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     * @param owner The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of tokens to allow.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     * @param sender The address which owns the funds.\r\n     * @param recipient The address which will receive the funds.\r\n     * @param amount The amount to be transferred.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`'s tokens.\r\n     * @param owner The address which owns the funds.\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of tokens to allow.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `from` to `to`.\r\n     * @param from The address which owns the funds.\r\n     * @param to The address which will receive the funds.\r\n     * @param amount The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 taxAmount = 0;\r\n        \r\n        if (from != owner() && to != owner()) {\r\n\r\n            if (!tradingOpen) {\r\n                require( \r\n                  _isExcludedFromFee[from] || _isExcludedFromFee[to],\r\n                  \"Trading is not yet open\"\r\n                );\r\n            }\r\n\r\n        if (from == uniswapV2Pair) {\r\n            // This is a buy transaction\r\n            if (limitEffect && to != address(uniswapV2Router) && ! _isExcludedFromFee[to]) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            } \r\n            taxAmount = calculateTax(amount, true, totalBuysCount > buyTaxReductionThreshold);\r\n            totalBuysCount++;\r\n        } else if (to == uniswapV2Pair) {\r\n            // This is a sell transaction\r\n            taxAmount = calculateTax(amount, false, totalBuysCount > sellTaxReductionThreshold);\r\n        }\r\n            if (taxAmount > 0) {\r\n                _balances[address(this)] += taxAmount;\r\n                emit Transfer(from, address(this), taxAmount);\r\n            }\r\n        }\r\n\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount - taxAmount;\r\n        emit Transfer(from, to, amount - taxAmount);\r\n\r\n        if (contractTokenBalance > _taxSwapThreshold && to == uniswapV2Pair && !inSwap && swapEnabled && totalBuysCount > buyCountSwapThreshold) {\r\n            swapAndSendToFee();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the tax amount based on the given amount and tax rate.\r\n     * @param amount The amount to calculate the tax for.\r\n     * @param reduced Whether the tax rate should be reduced or not.\r\n     * @return The calculated tax amount.\r\n     */\r\n    function calculateTax(uint256 amount, bool isBuy, bool reduced) private view returns (uint256) {\r\n        uint256 taxRate;\r\n        if (isBuy) {\r\n            taxRate = reduced ? finalBuyTaxRate : initialBuyTaxRate;\r\n        } else {\r\n            taxRate = reduced ? finalSellTaxRate : initialSellTaxRate;\r\n        }\r\n        return (amount * taxRate) / 100;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Swaps tokens for ETH and sends the ETH to the tax wallet.\r\n     */\r\n    function swapAndSendToFee() private lockTheSwap {\r\n        uint256 contractTokenBalance = _balances[address(this)];\r\n        uint256 amountToSwap = min(contractTokenBalance, _maxTaxSwap);\r\n        swapTokensForEth(amountToSwap);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            _taxWallet.transfer(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum of two numbers.\r\n     * @param a The first number.\r\n     * @param b The second number.\r\n     * @return The minimum of the two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps tokens for ETH using the Uniswap V2 Router.\r\n     * @param tokenAmount The amount of tokens to swap.\r\n     */\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract by creating a Uniswap V2 pair and adding liquidity.\r\n     * Can only be called by the owner.\r\n     */\r\n    function initialize() external onlyOwner() {\r\n        require(!tradingOpen, \"initialize is already added\");\r\n\r\n        // Adjusted to use native Solidity arithmetic\r\n        uint256 tokenAmount = balanceOf(address(this)) - (_totalSupply * initialBuyTaxRate / 100);\r\n\r\n        uniswapV2Router = IUniswapV2Router02(uniswapV2RouterAddress);\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this), \r\n            uniswapV2Router.WETH()\r\n        );\r\n\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance} (\r\n            address(this),\r\n            tokenAmount,\r\n            0,  // min amount of token\r\n            0,  // min amount of ETH\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes the limits on transaction amount and wallet size.\r\n     * Can only be called by the owner.\r\n     * @return A boolean indicating whether the limits were successfully removed.\r\n     */\r\n    function removeLimits() external onlyOwner returns (bool) {\r\n        limitEffect = false;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Reduces the tax rate for buying and selling.\r\n     * Can only be called by the owner.\r\n     * @param _value The new tax rate value.\r\n     * @return A boolean indicating whether the tax rate was successfully reduced.\r\n     */\r\n    function reduceTax(uint256 _value) external onlyOwner returns (bool) {\r\n        finalBuyTaxRate = _value;\r\n        finalSellTaxRate = _value;\r\n        require(_value <= 50);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Opens trading by enabling swaps.\r\n     * Can only be called by the owner.\r\n     * @return A boolean indicating whether trading was successfully opened.\r\n     */\r\n    function openTrading() external onlyOwner returns (bool) {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Clears any stuck ETH in the contract by transferring it to the tax wallet.\r\n     * @return A boolean indicating whether the stuck ETH was successfully cleared.\r\n     */\r\n    function clearstuckETH() external returns (bool) {\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            _taxWallet.transfer(ethBalance);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Clears any stuck tokens in the contract by transferring them to the tax wallet.\r\n     * @param tokenAddress The address of the token to clear.\r\n     * @return A boolean indicating whether the stuck tokens were successfully cleared.\r\n     */\r\n    function clearstuckToken(address tokenAddress) external returns (bool) {\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            IERC20(tokenAddress).transfer(_taxWallet, tokenBalance);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function to receive ETH.\r\n     */\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"taxWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearstuckETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"clearstuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reduceTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Ordible", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008f7f777f3cadb61f2474c6cb6d835c83ab31918e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18417c42a6dc69f191bbc8db86aa6b8f4fba22d3abcaadb2a9ccdfa8e590d1c6"}