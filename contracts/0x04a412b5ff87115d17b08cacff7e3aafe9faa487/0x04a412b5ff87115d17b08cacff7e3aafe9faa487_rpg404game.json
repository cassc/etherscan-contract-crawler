{"SourceCode": "/* \r\nMedieval RPG is the first ERC404-powered blockchain game that merges immersive RPG adventures with unique NFT collectibles. \r\nEach ERC404 token represents a character that players can control within the game.\r\n X: https://x.com/MedievalERC404\r\n web: https://medieval404.com/\r\n telegram: https://t.me/medieval404game\r\n*/\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ncontract rpg404game {\r\n    string internal _name = \"Medieval RPG\";\r\n    string internal _symbol = \"RPG404\";\r\n    uint internal _totalSupply = 4000 * 10**6;\r\n    uint internal _decimals = 6;\r\n    uint one = 10**6; \r\n    uint cent = 10**4;\r\n    uint public id;\r\n    uint excess;\r\n\r\n    address public dev;\r\n    address[3] public pairs;\r\n    uint minted;\r\n\r\n    bool fromPair; \r\n    bool toPair;\r\n    bool wholeInitFrom; \r\n    bool wholeInitTo;\r\n    bool wholePostFrom;\r\n    bool wholePostTo;\r\n\r\n    mapping(address => uint) internal _balanceOf;\r\n    mapping(address => mapping(address => uint)) internal _allowance;\r\n    mapping(uint256 => address) public ownerOf;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    mapping(address => uint16[]) public ownedNFTs;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n    event ERC20Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed amount, uint256 id);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    modifier onlyDev() {require(msg.sender == dev, \"not the rpg master\");_;}\r\n\r\n    constructor() {\r\n        _balanceOf[msg.sender] = _totalSupply; \r\n        dev = msg.sender;\r\n    }\r\n\r\n    function name() public view returns (string memory) { return _name; }\r\n    function symbol() public view returns (string memory) { return _symbol; }\r\n    function decimals() public view returns (uint) { return _decimals; }\r\n    function totalSupply() public view returns (uint) { return _totalSupply; }\r\n    function balanceOf(address account) public view returns (uint) { return _balanceOf[account]; }\r\n    function allowance(address owner, address spender) public view returns (uint) { return _allowance[owner][spender]; }\r\n    function setPairs(address pair1, address pair2, address pair3) public onlyDev {pairs[0] = pair1;pairs[1] = pair2;pairs[2] = pair3;}\r\n    function length() public view returns (uint) {return ownedNFTs[msg.sender].length;}\r\n\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        if (amount > 10**6) {\r\n            _allowance[msg.sender][spender] = amount;\r\n            setApprovalForAll(spender, true);\r\n            emit Approval(msg.sender, spender, amount, 0);\r\n        }\r\n        else {\r\n            address owner = ownerOf[amount];\r\n            if (msg.sender != owner && !isApprovedForAll(owner, msg.sender)) revert(\"Unauthorized\");\r\n            _tokenApprovals[amount] = spender;\r\n            emit Approval(owner, spender, one, uint16(amount));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer20(address from, address to, uint amount) internal virtual {\r\n        excess = amount % cent; \r\n        amount -= excess;\r\n        fromPair = from == pairs[0] || from == pairs[1] || from == pairs[2];\r\n        toPair = to == pairs[0] || to == pairs[1] || to == pairs[2];\r\n        wholeInitFrom = _balanceOf[from] % one == 0; \r\n        wholeInitTo = _balanceOf[to] % one == 0;\r\n        wholePostFrom = (_balanceOf[from] - amount) % one == 0; \r\n        wholePostTo = (_balanceOf[to] + amount) % one == 0;\r\n\r\n        require(_balanceOf[from] >= amount, \"transfer amount exceeds balance\");\r\n\r\n        _balanceOf[from] -= amount; \r\n        _balanceOf[to] += amount;\r\n        emit ERC20Transfer(from, to, amount);\r\n    }\r\n\r\n    function _transfer721(address from, address to, uint tokenId) internal virtual {\r\n\r\n    bool isFromPair = from == pairs[0] || from == pairs[1] || from == pairs[2];\r\n    require(\r\n        from == ownerOf[tokenId] || \r\n        (isFromPair && (msg.sender == getApproved(tokenId) || isApprovedForAll(ownerOf[tokenId], msg.sender))),\r\n        \"transfer not allowed\"\r\n    );\r\n\r\n    delete _tokenApprovals[tokenId];\r\n    ownerOf[tokenId] = to;\r\n\r\n \r\n    for (uint i = 0; i < ownedNFTs[from].length; i++) {\r\n        if (ownedNFTs[from][i] == tokenId) {\r\n            ownedNFTs[from][i] = ownedNFTs[from][ownedNFTs[from].length - 1]; \r\n            ownedNFTs[from].pop(); \r\n            break;\r\n        }\r\n    }\r\n    ownedNFTs[to].push(uint16(tokenId));\r\n\r\n    emit Transfer(from, to, tokenId);\r\n}\r\n\r\n    function transfer(address to, uint amount) public returns (bool) {\r\n        if (amount >= cent) {\r\n            _transfer20(msg.sender, to, amount);\r\n        } else {\r\n            _transfer721(msg.sender, to, amount);\r\n            _balanceOf[msg.sender] -= one;\r\n            _balanceOf[to] += one;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint amount) public returns (bool) {\r\n        if (amount >= cent) {\r\n            require(_allowance[from][msg.sender] >= amount, \"transfer amount exceeds allowance\");\r\n            _spendAllowance(from, msg.sender, amount);\r\n            _transfer20(from, to, amount);\r\n        } else {\r\n            require(\r\n                from == ownerOf[amount] &&\r\n                (msg.sender == from || msg.sender == getApproved(amount) || isApprovedForAll(from, msg.sender)),\r\n                \"transfer not allowed\"\r\n            );\r\n            _transfer721(from, to, amount);\r\n            _balanceOf[from] -= one;\r\n            _balanceOf[to] += one;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint amount) internal {\r\n        require(_allowance[owner][spender] >= amount, \"insufficient allowance\");\r\n        _allowance[owner][spender] -= amount;\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(ownerOf[tokenId] != address(0), \"token does not exist\");\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    \r\n    \r\n    function _true(uint256 tokenId) internal view returns (bool) {\r\n\r\n    return ownerOf[tokenId] != address(0);\r\n}\r\n\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        require(_true(tokenId), \"ERC721Metadata: URI query for nonexistent NFT\");\r\n\r\n        if (tokenId >= 1 && tokenId <= 1000) {\r\n            return \"ipfs://QmTs9qWSw2CghJyeMj5VqCRPRpi1ArVWGhbRfz7MUHKgY4\";\r\n        } else if (tokenId > 1000 && tokenId <= 2000) {\r\n            return \"ipfs://QmTYxWxqyewrwYLw6njyZPzuVLJpSzWiVG7gCYPtSXCi8k\";\r\n        } else if (tokenId > 2000 && tokenId <= 3000) {\r\n            return \"ipfs://QmQBohkhJ3BYoLks1m3Sg2pA2Geaq2oGtmRHUtbSQmi2pY\";\r\n        } else if (tokenId > 3000 && tokenId <= 4000) {\r\n            return \"ipfs://QmZAcCyp9sowQXBU3tZXbH4uGjeDggwTs93BEkF6zQwaED\";\r\n        } else {\r\n            revert(\"Invalid token ID\");\r\n        }\r\n    }\r\n\r\n    \r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + value % 10));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedNFTs\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair3\",\"type\":\"address\"}],\"name\":\"setPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "rpg404game", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1c08ad4077ed2952fd113361a40bc7ae809d16bfab23ccb0455abec9fb8484d3"}