{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DoomsdaySettlersDisastersV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport \\\"./interfaces/ISettlers.sol\\\";\\r\\n\\r\\ncontract DoomsdaySettlersDisastersV2 {\\r\\n\\r\\n    struct Disaster{\\r\\n        int64[2] _coordinates;\\r\\n        int64 _radius;\\r\\n        uint8 _type;\\r\\n    }\\r\\n\\r\\n    uint256 constant MAP_WIDTH      = 6_500_000;\\r\\n    int64 constant MAP_WIDTH_64     = 6_500_000;\\r\\n    uint256 constant MAP_HEIGHT     = 3_000_000;\\r\\n    int64 constant MAP_HEIGHT_64    = 3_000_000;\\r\\n    uint256 constant BASE_DISASTER_RADIUS = 240_000;\\r\\n    uint256   constant DISASTER_BLOCK_INTERVAL = 75;\\r\\n    address immutable SETTLERS;\\r\\n    address darkAge;\\r\\n    mapping(bytes32 => Disaster) endTimes;\\r\\n\\r\\n    constructor(address _settlers){\\r\\n        SETTLERS = _settlers;\\r\\n        darkAge = msg.sender;\\r\\n    }\\r\\n\\r\\n    function readDisaster() external view returns(\\r\\n        int64[2] memory _coordinates,\\r\\n        int64 _radius,\\r\\n        uint8 _type,\\r\\n        bytes5 _disasterId\\r\\n    ){\\r\\n        uint256 eliminationBlock = block.number - (block.number % DISASTER_BLOCK_INTERVAL) - 1;\\r\\n        bytes32 _disasterHash = blockhash(eliminationBlock);\\r\\n        _disasterId = bytes5( _disasterHash << 216);\\r\\n        return (\\r\\n            endTimes[_disasterHash]._coordinates,\\r\\n            endTimes[_disasterHash]._radius,\\r\\n            endTimes[_disasterHash]._type,\\r\\n            _disasterId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function recordDisaster() external {\\r\\n        require(darkAge == msg.sender,\\\"msg.sender\\\");\\r\\n        unchecked{\\r\\n            uint256 eliminationBlock = block.number - (block.number % DISASTER_BLOCK_INTERVAL) - 1;\\r\\n            bytes32 _disasterHash = blockhash(eliminationBlock);\\r\\n            ( int64[2] memory _coordinates, int64 _radius, uint8 _type, bytes5 _disasterId ) = currentDisaster();\\r\\n            _disasterId;\\r\\n\\r\\n            if( endTimes[_disasterHash]._radius == 0){\\r\\n                endTimes[_disasterHash]._coordinates  = _coordinates;\\r\\n                endTimes[_disasterHash]._radius       = _radius;\\r\\n                endTimes[_disasterHash]._type         = _type;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function currentDisaster() public view returns (\\r\\n        int64[2] memory _coordinates,\\r\\n        int64 _radius,\\r\\n        uint8 _type,\\r\\n        bytes5 _disasterId\\r\\n    ){\\r\\n        unchecked{\\r\\n            uint256 eliminationBlock = block.number - (block.number % DISASTER_BLOCK_INTERVAL) - 1;\\r\\n            bytes32 _disasterHash = blockhash(eliminationBlock);\\r\\n            _disasterId = bytes5( _disasterHash << 216);\\r\\n            if(endTimes[_disasterHash]._radius != 0){\\r\\n                return (\\r\\n                    endTimes[_disasterHash]._coordinates,\\r\\n                    endTimes[_disasterHash]._radius,\\r\\n                    endTimes[_disasterHash]._type,\\r\\n                    _disasterId\\r\\n                );\\r\\n            }\\r\\n            uint256 hash = uint256(_disasterHash);\\r\\n            _type = getGeography(_disasterHash);\\r\\n\\r\\n            uint256 _totalSupply = ISettlers(SETTLERS).totalSupply();\\r\\n            uint256 o = 14 * MAP_HEIGHT/2/(_totalSupply+1) / 10;\\r\\n\\r\\n            if(o < BASE_DISASTER_RADIUS){\\r\\n                o = BASE_DISASTER_RADIUS;\\r\\n            }\\r\\n\\r\\n            if(_totalSupply < 20){\\r\\n                o += MAP_HEIGHT* (20 - _totalSupply) / 25 / 3;\\r\\n            }\\r\\n\\r\\n\\r\\n\\r\\n    (_coordinates[0],_coordinates[1]) = getCoordinates(_disasterHash);\\r\\n            _radius = int64( uint64( (hash/MAP_WIDTH/MAP_HEIGHT)%o + o ) );\\r\\n\\r\\n\\r\\n            return(_coordinates,_radius, _type, _disasterId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setDarkAge(address _darkAge) public {\\r\\n        require(msg.sender == darkAge,\\\"msg.sender\\\");\\r\\n        darkAge = _darkAge;\\r\\n    }\\r\\n\\r\\n    function getCoordinates(bytes32 _hash) public pure returns(int64 x, int64 y){\\r\\n        unchecked{\\r\\n            x = int64( uint64(   uint32( uint256(_hash)  >> 128    ) )   ) % MAP_WIDTH_64;\\r\\n            y = int64( uint64(   uint32( uint256(_hash)  % 2** 128 ) )   ) % MAP_HEIGHT_64;\\r\\n            return (x,y);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getGeography(bytes32 _hash) public pure returns(uint8){\\r\\n        unchecked{\\r\\n            return uint8(uint256(_hash))%4;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISettlers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\ninterface ISettlers {\\r\\n    function totalSupply()          external view returns(uint256);\\r\\n\\r\\n    function hashOf(uint32 _tokenId)  external view returns(bytes32);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settlers\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"currentDisaster\",\"outputs\":[{\"internalType\":\"int64[2]\",\"name\":\"_coordinates\",\"type\":\"int64[2]\"},{\"internalType\":\"int64\",\"name\":\"_radius\",\"type\":\"int64\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes5\",\"name\":\"_disasterId\",\"type\":\"bytes5\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getCoordinates\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"x\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"y\",\"type\":\"int64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getGeography\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readDisaster\",\"outputs\":[{\"internalType\":\"int64[2]\",\"name\":\"_coordinates\",\"type\":\"int64[2]\"},{\"internalType\":\"int64\",\"name\":\"_radius\",\"type\":\"int64\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes5\",\"name\":\"_disasterId\",\"type\":\"bytes5\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordDisaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_darkAge\",\"type\":\"address\"}],\"name\":\"setDarkAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DoomsdaySettlersDisastersV2", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000028f670c8d3edca52db147b694030d4cf80ddcd7b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}