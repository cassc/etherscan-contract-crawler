{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/eligibility/OrCombiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2024 PROOF Holdings Inc\\npragma solidity >=0.8.16 <0.9.0;\\n\\nimport {IEligibilityConstraint} from \\\"./IEligibilityConstraint.sol\\\";\\n\\n/**\\n * @notice Eligibility criterion that OR-combines other criteria.\\n */\\ncontract OrCombiner is IEligibilityConstraint {\\n    IEligibilityConstraint[] public constraints;\\n\\n    constructor(IEligibilityConstraint[] memory constraints_) {\\n        constraints = constraints_;\\n    }\\n\\n    /**\\n     * @inheritdoc IEligibilityConstraint\\n     */\\n    function isEligible(uint256 tokenID) public view virtual returns (bool) {\\n        uint256 num = constraints.length;\\n        for (uint256 i; i < num; ++i) {\\n            if (constraints[i].isEligible(tokenID)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/eligibility/IEligibilityConstraint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2022 PROOF Holdings Inc\\npragma solidity >=0.8.16 <0.9.0;\\n\\n/**\\n * @notice Interface to encapsulate generic eligibility requirements.\\n * @dev This is intended to be used with the activation of Mutators.\\n */\\ninterface IEligibilityConstraint {\\n    /**\\n     * @notice Checks if a given moonbird is eligible.\\n     */\\n    function isEligible(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@divergencetech/ethier/=lib/ethier_0_27_0/\",\r\n      \"erc721a/=lib/ERC721A/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"ethier/=lib/ethier/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"inflate-sol/=lib/inflate-sol/contracts/\",\r\n      \"moonbirds-inchain/=src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"moonbirds/=lib/moonbirds-contract/contracts/\",\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"solidify-contracts/=lib/solidify/contracts/\",\r\n      \"erc4626-tests/=lib/solidify/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"ethier_0_27_0/=lib/ethier_0_27_0/\",\r\n      \"moonbirds-contract/=lib/moonbirds-contract/\",\r\n      \"solidify-test/=lib/solidify/./test/\",\r\n      \"solidify/=lib/solidify/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"lib/solidify/contracts/InflateLibWrapper.sol\": {\r\n        \"PublicInflateLibWrapper\": \"0x8d69408205dEc1F1Eb5A2250C8638017Ef6069b6\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IEligibilityConstraint[]\",\"name\":\"constraints_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"constraints\",\"outputs\":[{\"internalType\":\"contract IEligibilityConstraint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OrCombiner", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000700000000000000000000000050f722711673d5ecffbe236cc4efd5fdd6f77402000000000000000000000000294760287ada4c819f5b4f89874da5fd7d55319c0000000000000000000000004542874cab16b45164e6ea8506cabb40c804bf8d0000000000000000000000005ef32a5c51c94c82a28e04ce0036621bc0aa60d7000000000000000000000000936fcb04ab0049104d27ad2b104cbe0d9eb09b9c0000000000000000000000007a2df40eebf9fb3136a531c963b50e3ca525537700000000000000000000000038088c03df9c61dd9d1b94dd07baea0020fb2d3c", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}