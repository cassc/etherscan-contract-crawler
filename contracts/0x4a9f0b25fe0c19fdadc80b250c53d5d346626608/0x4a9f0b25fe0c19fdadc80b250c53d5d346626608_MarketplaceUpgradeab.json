{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/marketplace/MarketplaceUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControlUpgradeable.sol\\\";\\nimport \\\"./MarketplaceCore.sol\\\";\\n\\ncontract MarketplaceUpgradeable is\\n    AdminControlUpgradeable,\\n    MarketplaceCore,\\n    ReentrancyGuardUpgradeable\\n{\\n    /**\\n     * Initializer\\n     */\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _setEnabled(true);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AdminControlUpgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IMarketplaceCore).interfaceId ||\\n            AdminControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-setFees}.\\n     */\\n    function setFees(\\n        uint16 marketplaceFeeBPS\\n    ) external virtual override adminRequired {\\n        _setFees(marketplaceFeeBPS);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-setCurationFee}.\\n     */\\n    function setCurationFee(\\n        uint40 listingId,\\n        uint16 curationFeeBPS\\n    ) external virtual override adminRequired {\\n        _setCurationFee(listingId, curationFeeBPS);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-setEnabled}.\\n     */\\n    function setEnabled(bool enabled) external virtual override adminRequired {\\n        _setEnabled(enabled);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-setRoyaltyEngineV1}.\\n     */\\n    function setRoyaltyEngineV1(\\n        address royaltyEngineV1\\n    ) external virtual override adminRequired {\\n        _setRoyaltyEngineV1(royaltyEngineV1);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-cancel}.\\n     */\\n    function cancel(\\n        uint40 listingId,\\n        uint16 holdbackBPS\\n    ) external virtual override nonReentrant {\\n        _cancel(listingId, holdbackBPS);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-withdraw}.\\n     */\\n    function withdraw(\\n        uint256 amount,\\n        address payable receiver\\n    ) external virtual override adminRequired nonReentrant {\\n        _withdraw(address(0), amount, receiver);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-withdraw}.\\n     */\\n    function withdraw(\\n        address erc20,\\n        uint256 amount,\\n        address payable receiver\\n    ) external virtual override adminRequired nonReentrant {\\n        _withdraw(erc20, amount, receiver);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-withdrawEscrow}.\\n     */\\n    function withdrawEscrow(\\n        uint256 amount\\n    ) external virtual override nonReentrant {\\n        _withdrawEscrow(address(0), amount);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplace-withdrawEscrow}.\\n     */\\n    function withdrawEscrow(\\n        address erc20,\\n        uint256 amount\\n    ) external virtual override nonReentrant {\\n        _withdrawEscrow(erc20, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/AdminControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControlUpgradeable is OwnableUpgradeable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/marketplace/MarketplaceCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"./IMarketplaceCore.sol\\\";\\n\\nimport \\\"./libs/MarketplaceLib.sol\\\";\\nimport \\\"./libs/SettlementLib.sol\\\";\\nimport \\\"./libs/TokenLib.sol\\\";\\n\\nabstract contract MarketplaceCore is IMarketplaceCore, IERC721Receiver {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bool private _enabled;\\n\\n    uint40 private _listingCounter;\\n    mapping(uint40 => MarketplaceLib.Listing) private _listings;\\n    mapping(uint40 => mapping(address => MarketplaceLib.Offer))\\n        private _listingOffers;\\n    mapping(uint40 => EnumerableSet.AddressSet) private _listingOfferAddresses;\\n    mapping(address => mapping(address => uint256)) private _escrow;\\n    mapping(uint40 => mapping(uint16 => MarketplaceLib.Bid)) private _bids;\\n\\n    // Marketplace fee\\n    uint16 public feeBPS;\\n    mapping(address => uint256) _feesCollected;\\n\\n    // Royalty Engine\\n    address private _royaltyEngineV1;\\n\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Set enabled\\n     */\\n    function _setEnabled(bool enabled) internal {\\n        _enabled = enabled;\\n        emit MarketplaceEnabled(msg.sender, enabled);\\n    }\\n\\n    /**\\n     * @dev Set royalty engine\\n     */\\n    function _setRoyaltyEngineV1(address royaltyEngineV1) internal {\\n        require(_royaltyEngineV1 == address(0), \\\"Invalid state\\\");\\n        emit MarketplaceRoyaltyEngineUpdate(royaltyEngineV1);\\n        _royaltyEngineV1 = royaltyEngineV1;\\n    }\\n\\n    /**\\n     * @dev Set marketplace fees\\n     */\\n    function _setFees(uint16 feeBPS_) internal {\\n        require(feeBPS_ <= 1500, \\\"Invalid config\\\");\\n        feeBPS = feeBPS_;\\n        emit MarketplaceFees(msg.sender, feeBPS);\\n    }\\n\\n    /**\\n     * @dev Set listing curation fees\\n     */\\n    function _setCurationFee(uint40 listingId, uint16 feeBPS_) internal {\\n        require(listingId <= _listingCounter, \\\"Invalid listing id\\\");\\n        require(feeBPS_ <= 10000, \\\"Invalid curation fee\\\");\\n        MarketplaceLib.Listing storage listing = _listings[_listingCounter];\\n        listing.curationBPS = feeBPS_;\\n        emit CurationFee(listingId, feeBPS_);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated fees from marketplace\\n     */\\n    function _withdraw(\\n        address erc20,\\n        uint256 amount,\\n        address payable receiver\\n    ) internal {\\n        require(_feesCollected[erc20] >= amount, \\\"Invalid amount\\\");\\n        _feesCollected[erc20] -= amount;\\n        SettlementLib.sendTokens(erc20, address(this), receiver, amount);\\n        emit MarketplaceWithdraw(msg.sender, erc20, amount, receiver);\\n    }\\n\\n    /**\\n     * @dev Withdraw escrow amounts\\n     */\\n    function _withdrawEscrow(address erc20, uint256 amount) internal {\\n        require(_escrow[msg.sender][erc20] >= amount, \\\"Invalid amount\\\");\\n        _escrow[msg.sender][erc20] -= amount;\\n        SettlementLib.sendTokens(\\n            erc20,\\n            address(this),\\n            payable(msg.sender),\\n            amount\\n        );\\n        emit MarketplaceWithdrawEscrow(msg.sender, erc20, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        require(operator == from, \\\"Unauthorized\\\");\\n        (\\n            MarketplaceLib.ListingDetails memory listingDetails,\\n            MarketplaceLib.TokenDetails memory tokenDetails,\\n            MarketplaceLib.DeliveryFees memory deliveryFees,\\n            MarketplaceLib.ListingReceiver[] memory listingReceivers,\\n            bool acceptOffers\\n        ) = abi.decode(\\n                data,\\n                (\\n                    MarketplaceLib.ListingDetails,\\n                    MarketplaceLib.TokenDetails,\\n                    MarketplaceLib.DeliveryFees,\\n                    MarketplaceLib.ListingReceiver[],\\n                    bool\\n                )\\n            );\\n        require(\\n            msg.sender == tokenDetails.address_ &&\\n                tokenId == tokenDetails.id &&\\n                tokenDetails.spec == TokenLib.Spec.ERC721,\\n            \\\"Invalid config\\\"\\n        );\\n        _createListing(\\n            from,\\n            listingDetails,\\n            tokenDetails,\\n            deliveryFees,\\n            listingReceivers,\\n            acceptOffers,\\n            false\\n        );\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        uint256 count,\\n        bytes calldata data\\n    ) external virtual returns (bytes4) {\\n        if (operator != address(this)) {\\n            require(operator == from, \\\"Unauthorized\\\");\\n            (\\n                MarketplaceLib.ListingDetails memory listingDetails,\\n                MarketplaceLib.TokenDetails memory tokenDetails,\\n                MarketplaceLib.DeliveryFees memory deliveryFees,\\n                MarketplaceLib.ListingReceiver[] memory listingReceivers,\\n                bool acceptOffers\\n            ) = abi.decode(\\n                    data,\\n                    (\\n                        MarketplaceLib.ListingDetails,\\n                        MarketplaceLib.TokenDetails,\\n                        MarketplaceLib.DeliveryFees,\\n                        MarketplaceLib.ListingReceiver[],\\n                        bool\\n                    )\\n                );\\n            require(\\n                msg.sender == tokenDetails.address_ &&\\n                    tokenId == tokenDetails.id &&\\n                    tokenDetails.spec == TokenLib.Spec.ERC1155 &&\\n                    count == listingDetails.totalAvailable,\\n                \\\"Invalid config\\\"\\n            );\\n            _createListing(\\n                from,\\n                listingDetails,\\n                tokenDetails,\\n                deliveryFees,\\n                listingReceivers,\\n                acceptOffers,\\n                false\\n            );\\n        }\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-createListing}.\\n     */\\n    function createListing(\\n        MarketplaceLib.ListingDetails calldata listingDetails,\\n        MarketplaceLib.TokenDetails calldata tokenDetails,\\n        MarketplaceLib.DeliveryFees calldata deliveryFees,\\n        MarketplaceLib.ListingReceiver[] calldata listingReceivers,\\n        bool acceptOffers\\n    ) external virtual returns (uint40) {\\n        return\\n            _createListing(\\n                msg.sender,\\n                listingDetails,\\n                tokenDetails,\\n                deliveryFees,\\n                listingReceivers,\\n                acceptOffers,\\n                true\\n            );\\n    }\\n\\n    function _createListing(\\n        address seller,\\n        MarketplaceLib.ListingDetails memory listingDetails,\\n        MarketplaceLib.TokenDetails memory tokenDetails,\\n        MarketplaceLib.DeliveryFees memory deliveryFees,\\n        MarketplaceLib.ListingReceiver[] memory listingReceivers,\\n        bool acceptOffers,\\n        bool intake\\n    ) private returns (uint40) {\\n        require(_enabled, \\\"Disabled\\\");\\n\\n        _listingCounter++;\\n        MarketplaceLib.Listing storage listing = _listings[_listingCounter];\\n        listing.marketplaceBPS = feeBPS;\\n        listing.curationBPS = 2000; // 20% as default\\n        MarketplaceLib.constructListing(\\n            seller,\\n            _listingCounter,\\n            listing,\\n            listingDetails,\\n            tokenDetails,\\n            deliveryFees,\\n            listingReceivers,\\n            acceptOffers,\\n            intake\\n        );\\n\\n        return _listingCounter;\\n    }\\n\\n    function setAllowListMerkleRoot(\\n        uint40 listingId,\\n        bytes32 merkleRoot\\n    ) external virtual {\\n        require(_enabled, \\\"Disabled\\\");\\n\\n        MarketplaceLib.Listing storage listing = _listings[listingId];\\n        require(listing.seller == msg.sender, \\\"Unauthorized\\\");\\n\\n        listing.merkleRoot = merkleRoot;\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-modifyListing}.\\n     */\\n    function modifyListing(\\n        uint40 listingId,\\n        uint256 initialAmount,\\n        uint48 startTime,\\n        uint48 endTime\\n    ) external virtual override {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        MarketplaceLib.modifyListing(\\n            listingId,\\n            listing,\\n            initialAmount,\\n            startTime,\\n            endTime\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-purchase}.\\n     */\\n    function purchase(\\n        uint40 listingId,\\n        bytes32[] calldata merkleProof\\n    ) external payable virtual override {\\n        _purchase(listingId, 1, merkleProof);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-purchase}.\\n     */\\n    function purchase(\\n        uint40 listingId,\\n        uint24 count,\\n        bytes32[] calldata merkleProof\\n    ) external payable virtual override {\\n        _purchase(listingId, count, merkleProof);\\n    }\\n\\n    function _purchase(\\n        uint40 listingId,\\n        uint24 count,\\n        bytes32[] calldata merkleProof\\n    ) private {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        bytes32 leaf = keccak256(abi.encode(msg.sender));\\n        if (listing.merkleRoot != 0) {\\n            // Check the merkle proof\\n            require(\\n                MerkleProof.verify(merkleProof, listing.merkleRoot, leaf),\\n                \\\"Invalid proof\\\"\\n            );\\n        }\\n\\n        SettlementLib.performPurchase(\\n            _royaltyEngineV1,\\n            listingId,\\n            listing,\\n            count,\\n            _feesCollected\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-bid}.\\n     */\\n    function bid(\\n        uint40 listingId,\\n        uint24 count,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) external payable virtual override {\\n        _bid(count, msg.value, listingId, increase, merkleProof);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-bid}.\\n     */\\n    function bid(\\n        uint40 listingId,\\n        uint24 count,\\n        uint256 bidAmount,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) external virtual override {\\n        _bid(count, bidAmount, listingId, increase, merkleProof);\\n    }\\n\\n    function _bid(\\n        uint24 count,\\n        uint256 bidAmount,\\n        uint40 listingId,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) private {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        bytes32 leaf = keccak256(abi.encode(msg.sender));\\n        if (listing.merkleRoot != 0) {\\n            // Check the merkle proof\\n            require(\\n                MerkleProof.verify(merkleProof, listing.merkleRoot, leaf),\\n                \\\"Invalid proof\\\"\\n            );\\n        }\\n\\n        SettlementLib.performBid(\\n            listingId,\\n            listing,\\n            count,\\n            bidAmount,\\n            increase,\\n            _escrow,\\n            _bids\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-offer}.\\n     */\\n    function offer(\\n        uint40 listingId,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) external payable virtual override {\\n        _offer(msg.value, listingId, increase, merkleProof);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-offer}.\\n     */\\n    function offer(\\n        uint40 listingId,\\n        uint256 offerAmount,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) external virtual override {\\n        _offer(offerAmount, listingId, increase, merkleProof);\\n    }\\n\\n    function _offer(\\n        uint256 offerAmount,\\n        uint40 listingId,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) private {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        bytes32 leaf = keccak256(abi.encode(msg.sender));\\n        if (listing.merkleRoot != 0) {\\n            // Check the merkle proof\\n            require(\\n                MerkleProof.verify(merkleProof, listing.merkleRoot, leaf),\\n                \\\"Invalid proof\\\"\\n            );\\n        }\\n\\n        SettlementLib.makeOffer(\\n            listingId,\\n            listing,\\n            offerAmount,\\n            _listingOffers[listingId],\\n            _listingOfferAddresses[listingId],\\n            increase\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-rescind}.\\n     */\\n    function rescind(uint40 listingId) public virtual override {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        MarketplaceLib.ListingType listingType = listing.details.type_;\\n\\n        // Can only rescind offers if\\n        // 1. Listing is NOT an OFFERS_ONLY type\\n        // 2. Listing has been finalized\\n        // 3. Listing IS an OFFERS_ONLY type that has ended over 24 hours ago\\n        // it has been finalized, or it has been 24 hours after the listing end time\\n        require(\\n            listingType != MarketplaceLib.ListingType.OFFERS_ONLY ||\\n                MarketplaceLib.isFinalized(listing.flags) ||\\n                (listing.details.endTime + 86400) < block.timestamp,\\n            \\\"Cannot be rescinded yet\\\"\\n        );\\n\\n        SettlementLib.rescindOffer(\\n            listingId,\\n            listing,\\n            msg.sender,\\n            _listingOffers[listingId],\\n            _listingOfferAddresses[listingId]\\n        );\\n    }\\n\\n    function rescind(uint40[] calldata listingIds) external virtual override {\\n        for (uint i; i < listingIds.length; ) {\\n            rescind(listingIds[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function rescind(\\n        uint40 listingId,\\n        address[] calldata offerAddresses\\n    ) external virtual override {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        require(listing.seller == msg.sender, \\\"Permission denied\\\");\\n\\n        for (uint i; i < offerAddresses.length; ) {\\n            SettlementLib.rescindOffer(\\n                listingId,\\n                listing,\\n                offerAddresses[i],\\n                _listingOffers[listingId],\\n                _listingOfferAddresses[listingId]\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-accept}.\\n     */\\n    function accept(\\n        uint40 listingId,\\n        address[] calldata addresses,\\n        uint256[] calldata amounts,\\n        uint256 maxAmount\\n    ) external virtual override {\\n        uint256 addressLength = addresses.length;\\n        require(addressLength == amounts.length, \\\"Invalid input\\\");\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        MarketplaceLib.ListingType listingType = listing.details.type_;\\n        require(\\n            msg.sender == listing.seller &&\\n                !MarketplaceLib.isFinalized(listing.flags),\\n            \\\"Invalid listing\\\"\\n        );\\n\\n        // Mark as finalized first to prevent re-entrancy\\n        listing.flags |= MarketplaceLib.FLAG_MASK_FINALIZED;\\n        // End the listing\\n        if (listing.details.startTime == 0)\\n            listing.details.startTime = uint48(block.timestamp);\\n        if (listing.details.endTime > block.timestamp)\\n            listing.details.endTime = uint48(block.timestamp);\\n\\n        if (MarketplaceLib.isAuction(listingType)) {\\n            require(\\n                !MarketplaceLib.hasBid(listing.flags),\\n                \\\"Cannot accept offers when bid has been made\\\"\\n            );\\n            require(addressLength == 1, \\\"Too many offers accepted\\\");\\n            listing.totalSold += 1;\\n            _accept(\\n                listingId,\\n                listing,\\n                payable(addresses[0]),\\n                amounts[0],\\n                maxAmount,\\n                0\\n            );\\n        } else if (MarketplaceLib.isOffer(listingType)) {\\n            require(\\n                addressLength <= listing.details.totalAvailable,\\n                \\\"Too many offers accepted\\\"\\n            );\\n            listing.totalSold += uint24(addressLength);\\n            for (uint i; i < addressLength; ) {\\n                _accept(\\n                    listingId,\\n                    listing,\\n                    payable(addresses[i]),\\n                    amounts[i],\\n                    maxAmount,\\n                    i\\n                );\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _accept(\\n        uint40 listingId,\\n        MarketplaceLib.Listing storage listing,\\n        address payable offerAddress,\\n        uint256 expectedAmount,\\n        uint256 maxAmount,\\n        uint256 index\\n    ) private {\\n        require(\\n            _listingOfferAddresses[listingId].contains(offerAddress),\\n            \\\"Invalid address\\\"\\n        );\\n        MarketplaceLib.Offer storage currentOffer = _listingOffers[listingId][\\n            offerAddress\\n        ];\\n        require(currentOffer.amount == expectedAmount, \\\"Invalid state\\\");\\n        if (listing.token.lazy) {\\n            SettlementLib.deliverTokenLazy(\\n                listingId,\\n                listing,\\n                offerAddress,\\n                1,\\n                expectedAmount,\\n                index\\n            );\\n        } else {\\n            SettlementLib.deliverToken(\\n                listing,\\n                offerAddress,\\n                1,\\n                expectedAmount,\\n                false\\n            );\\n        }\\n        // Settle offer\\n        SettlementLib.settleOffer(\\n            _royaltyEngineV1,\\n            listingId,\\n            listing,\\n            currentOffer,\\n            offerAddress,\\n            _feesCollected,\\n            maxAmount,\\n            _escrow\\n        );\\n    }\\n\\n    /**\\n     * Cancel an active sale and refund outstanding amounts\\n     */\\n    function _cancel(uint40 listingId, uint16 holdbackBPS) internal virtual {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        require(!MarketplaceLib.isFinalized(listing.flags), \\\"Invalid listing\\\");\\n        require(holdbackBPS <= 1000, \\\"Invalid input\\\");\\n        require(listing.seller == msg.sender, \\\"Permission denied\\\");\\n        require(holdbackBPS == 0, \\\"Invalid input\\\");\\n        require(!MarketplaceLib.hasBid(listing.flags), \\\"Invalid state\\\");\\n\\n        // Immediately end and finalize to prevent re-entrancy\\n        if (listing.details.startTime == 0)\\n            listing.details.startTime = uint48(block.timestamp);\\n        listing.details.endTime = uint48(block.timestamp);\\n        listing.flags |= MarketplaceLib.FLAG_MASK_FINALIZED;\\n\\n        // handle other auction types\\n\\n        if (!listing.token.lazy) {\\n            // Return remaining items to seller\\n            SettlementLib.deliverToken(listing, listing.seller, 1, 0, true);\\n        }\\n        emit MarketplaceLib.CancelListing(listingId, msg.sender, holdbackBPS);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-finalize}.\\n     */\\n    function finalize(uint40 listingId) external payable virtual override {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        MarketplaceLib.ListingType listingType = listing.details.type_;\\n        require(!MarketplaceLib.isOffer(listingType), \\\"Invalid type\\\");\\n        if (listingType == MarketplaceLib.ListingType.SETTLEMENT_DUTCH_AUCTION)\\n            require(MarketplaceLib.isFinalizedLogically(listing.flags), \\\"Invalid listing\\\");\\n        else\\n            require(!MarketplaceLib.isFinalized(listing.flags), \\\"Invalid listing\\\");\\n        require(\\n            listing.details.startTime != 0 &&\\n                listing.details.endTime < block.timestamp,\\n            \\\"Invalid state\\\"\\n        );\\n\\n        // Mark as finalized first to prevent re-entrancy\\n        listing.flags |= MarketplaceLib.FLAG_MASK_FINALIZED;\\n\\n        if (!MarketplaceLib.hasBid(listing.flags)) {\\n            if (!listing.token.lazy) {\\n                // No buyer, return to seller\\n                SettlementLib.deliverToken(listing, listing.seller, 1, 0, true);\\n            }\\n        } else if (\\n            listingType == MarketplaceLib.ListingType.INDIVIDUAL_AUCTION\\n        ) {\\n            listing.totalSold += 1;\\n            MarketplaceLib.Bid storage currentBid = _bids[listingId][0];\\n            if (listing.token.lazy) {\\n                SettlementLib.deliverTokenLazy(\\n                    listingId,\\n                    listing,\\n                    currentBid.bidder,\\n                    1,\\n                    currentBid.amount,\\n                    0\\n                );\\n            } else {\\n                SettlementLib.deliverToken(\\n                    listing,\\n                    currentBid.bidder,\\n                    1,\\n                    currentBid.amount,\\n                    false\\n                );\\n            }\\n\\n            // Settle bid\\n            SettlementLib.settleBid(\\n                _royaltyEngineV1,\\n                currentBid,\\n                listing,\\n                _feesCollected\\n            );\\n            // Mark delivered\\n            currentBid.delivered = true;\\n        } else if (listingType == MarketplaceLib.ListingType.RANKED_AUCTION) {\\n            uint24 totalPerSale = listing.details.totalAvailable /\\n                listing.details.editionSize;\\n            for (uint16 index = 0; index < listing.bidCount; index++) {\\n                listing.totalSold += totalPerSale;\\n                MarketplaceLib.Bid storage currentBid = _bids[listingId][index];\\n                if (listing.token.lazy) {\\n                    SettlementLib.deliverTokenLazy(\\n                        listingId,\\n                        listing,\\n                        currentBid.bidder,\\n                        totalPerSale,\\n                        currentBid.amount,\\n                        0\\n                    );\\n                } else {\\n                    SettlementLib.deliverToken(\\n                        listing,\\n                        currentBid.bidder,\\n                        totalPerSale,\\n                        currentBid.amount,\\n                        false\\n                    );\\n                }\\n\\n                // Settle bid\\n                SettlementLib.settleBid(\\n                    _royaltyEngineV1,\\n                    currentBid,\\n                    listing,\\n                    _feesCollected\\n                );\\n                // Mark delivered\\n                currentBid.delivered = true;\\n            }\\n        } else if (\\n            listingType == MarketplaceLib.ListingType.SETTLEMENT_DUTCH_AUCTION\\n        ) {\\n            uint256 floorAmount = _bids[listingId][listing.bidCount - 1].amount;\\n            for (uint16 index = 0; index < listing.bidCount; index++) {\\n                MarketplaceLib.Bid storage currentBid = _bids[listingId][index];\\n\\n                if (currentBid.amount > floorAmount) {\\n                    SettlementLib.refundTokens(\\n                        listing.details.erc20,\\n                        currentBid.bidder,\\n                        currentBid.amount - floorAmount,\\n                        _escrow\\n                    );\\n                }\\n\\n                currentBid.amount = floorAmount;\\n                // Settle bid\\n                SettlementLib.settleBid(\\n                    _royaltyEngineV1,\\n                    currentBid,\\n                    listing,\\n                    _feesCollected\\n                );\\n                // Mark delivered\\n                currentBid.delivered = true;\\n            }\\n        } else {\\n            // Invalid type\\n            revert(\\\"Invalid type\\\");\\n        }\\n\\n        emit MarketplaceLib.FinalizeListing(listingId);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-getListing}.\\n     */\\n    function getListing(\\n        uint40 listingId\\n    ) external view override returns (Listing memory listing) {\\n        MarketplaceLib.Listing memory internalListing = _getListing(listingId);\\n        listing.id = listingId;\\n        listing.seller = internalListing.seller;\\n        listing.finalized = MarketplaceLib.isFinalized(internalListing.flags);\\n        listing.totalSold = internalListing.totalSold;\\n        listing.marketplaceBPS = internalListing.marketplaceBPS;\\n        listing.curationBPS = internalListing.curationBPS;\\n        listing.details = internalListing.details;\\n        listing.token = internalListing.token;\\n        listing.receivers = internalListing.receivers;\\n        listing.fees = internalListing.fees;\\n        listing.offersAccepted =\\n            (internalListing.flags & MarketplaceLib.FLAG_MASK_ACCEPT_OFFERS) !=\\n            0;\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-getListingCurrentPrice}.\\n     */\\n    function getListingCurrentPrice(\\n        uint40 listingId\\n    ) external view override returns (uint256) {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        return SettlementLib.computeListingPrice(listingId, listing, _bids);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-getListingTotalPrice}.\\n     */\\n    function getListingTotalPrice(\\n        uint40 listingId,\\n        uint24 count\\n    ) external view override returns (uint256) {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        return SettlementLib.computeTotalPrice(listing, count);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-geListingDeliverFee}.\\n     */\\n    function getListingDeliverFee(\\n        uint40 listingId,\\n        uint256 price\\n    ) external view override returns (uint256) {\\n        MarketplaceLib.Listing storage listing = _getListing(listingId);\\n        return SettlementLib.computeDeliverFee(listing, price);\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-getBids}.\\n     */\\n    function getBids(\\n        uint40 listingId\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (MarketplaceLib.Bid[] memory bids)\\n    {\\n        MarketplaceLib.Listing memory listing = _getListing(listingId);\\n        if (MarketplaceLib.hasBid(listing.flags)) {\\n            bids = new MarketplaceLib.Bid[](listing.bidCount);\\n            for (uint16 index = 0; index < listing.bidCount; index++) {\\n                bids[index] = _bids[listingId][index];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IMarketplaceCore-getOffers}\\n     */\\n    function getOffers(\\n        uint40 listingId\\n    ) external view override returns (Offer[] memory offers) {\\n        EnumerableSet.AddressSet\\n            storage offerAddresses = _listingOfferAddresses[listingId];\\n        uint256 offerCount = offerAddresses.length();\\n        offers = new Offer[](offerCount);\\n        for (uint i; i < offerCount; ) {\\n            address offerer = offerAddresses.at(i);\\n            MarketplaceLib.Offer memory internalOffer = _listingOffers[\\n                listingId\\n            ][offerer];\\n            offers[i].offerer = offerer;\\n            offers[i].amount = internalOffer.amount;\\n            offers[i].timestamp = internalOffer.timestamp;\\n            offers[i].accepted = internalOffer.accepted;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function _getListing(\\n        uint40 listingId\\n    ) private view returns (MarketplaceLib.Listing storage) {\\n        require(\\n            listingId > 0 && listingId <= _listingCounter,\\n            \\\"Invalid listing\\\"\\n        );\\n        return _listings[listingId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/IMarketplaceCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"./libs/MarketplaceLib.sol\\\";\\n\\n/**\\n * Core Marketplace interface\\n */\\ninterface IMarketplaceCore {\\n    event MarketplaceEnabled(address requestor, bool value);\\n    event MarketplaceFees(address requestor, uint16 feeBPS);\\n    event CurationFee(uint40 listingId, uint16 feeBPS);\\n    event MarketplaceSellerRegistry(address requestor, address registry);\\n    event MarketplaceWithdraw(\\n        address requestor,\\n        address erc20,\\n        uint256 amount,\\n        address receiver\\n    );\\n    event MarketplaceWithdrawEscrow(\\n        address requestor,\\n        address erc20,\\n        uint256 amount\\n    );\\n    event MarketplaceRoyaltyEngineUpdate(address royaltyEngineV1);\\n\\n    /**\\n     * @dev Listing structure\\n     *\\n     * @param id              - id of listing\\n     * @param seller          - the selling party\\n     * @param finalized       - Whether or not this listing has completed accepting bids/purchases\\n     * @param totalSold       - total number of items sold.\\n     * @param marketplaceBPS  - Marketplace fee BPS\\n     * @param curationBPS     - Curation fee BPS\\n     * @param details         - ListingDetails.  Contains listing configuration\\n     * @param token           - TokenDetails.  Contains the details of token being sold\\n     * @param receivers       - Array of ListingReceiver structs.  If provided, will distribute sales proceeds to receivers accordingly.\\n     * @param fees            - DeliveryFees.  Contains the delivery fee configuration for the listing\\n     */\\n    struct Listing {\\n        uint256 id;\\n        address payable seller;\\n        bool finalized;\\n        uint24 totalSold;\\n        uint16 marketplaceBPS;\\n        uint16 curationBPS;\\n        MarketplaceLib.ListingDetails details;\\n        MarketplaceLib.TokenDetails token;\\n        MarketplaceLib.ListingReceiver[] receivers;\\n        MarketplaceLib.DeliveryFees fees;\\n        bool offersAccepted;\\n    }\\n\\n    /**\\n     * @dev Offer structure\\n     *\\n     * @param offerer     - The address that made the offer\\n     * @param amount      - The offer amount\\n     * @param timestamp   - The time the offer was made\\n     * @param accepted    - Whether or not the offer was accepted\\n     */\\n    struct Offer {\\n        address offerer;\\n        uint256 amount;\\n        uint48 timestamp;\\n        bool accepted;\\n    }\\n\\n    /**\\n     * @dev Set marketplace fee\\n     */\\n    function setFees(uint16 marketplaceFeeBPS) external;\\n\\n    /**\\n     * @dev Set curation fee\\n     */\\n    function setCurationFee(uint40 listingId, uint16 curationFeeBPS) external;\\n\\n    /**\\n     * @dev Set marketplace enabled\\n     */\\n    function setEnabled(bool enabled) external;\\n\\n    /**\\n     * @dev See RoyaltyEngineV1 location. Can only be set once\\n     */\\n    function setRoyaltyEngineV1(address royaltyEngineV1) external;\\n\\n    /**\\n     * @dev Withdraw from treasury\\n     */\\n    function withdraw(uint256 amount, address payable receiver) external;\\n\\n    /**\\n     * @dev Withdraw from treasury\\n     */\\n    function withdraw(\\n        address erc20,\\n        uint256 amount,\\n        address payable receiver\\n    ) external;\\n\\n    /**\\n     * @dev Withdraw from escrow\\n     */\\n    function withdrawEscrow(uint256 amount) external;\\n\\n    /**\\n     * @dev Withdraw from escrow\\n     */\\n    function withdrawEscrow(address erc20, uint256 amount) external;\\n\\n    /**\\n     * @dev Create listing\\n     */\\n    function createListing(\\n        MarketplaceLib.ListingDetails calldata listingDetails,\\n        MarketplaceLib.TokenDetails calldata tokenDetails,\\n        MarketplaceLib.DeliveryFees calldata deliveryFees,\\n        MarketplaceLib.ListingReceiver[] calldata listingReceivers,\\n        bool acceptOffers\\n    ) external returns (uint40);\\n\\n    /**\\n     * @dev set allowlist merkleroot\\n     */\\n    function setAllowListMerkleRoot(\\n        uint40 listingId,\\n        bytes32 merkleRoot\\n    ) external;\\n\\n    /**\\n     * @dev Modify listing\\n     */\\n    function modifyListing(\\n        uint40 listingId,\\n        uint256 initialAmount,\\n        uint48 startTime,\\n        uint48 endTime\\n    ) external;\\n\\n    /**\\n     * @dev Purchase a listed item\\n     */\\n    function purchase(\\n        uint40 listingId,\\n        bytes32[] calldata merkleProof\\n    ) external payable;\\n\\n    /**\\n     * @dev Purchase a listed item\\n     */\\n    function purchase(\\n        uint40 listingId,\\n        uint24 count,\\n        bytes32[] calldata merkleProof\\n    ) external payable;\\n\\n    /**\\n     * @dev Bid on a listed item\\n     */\\n    function bid(\\n        uint40 listingId,\\n        uint24 count,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) external payable;\\n\\n    /**\\n     * @dev Bid on a listed item\\n     */\\n    function bid(\\n        uint40 listingId,\\n        uint24 count,\\n        uint256 bidAmount,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) external;\\n\\n    /**\\n     * @dev Make offer on a listed item\\n     */\\n    function offer(\\n        uint40 listingId,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) external payable;\\n\\n    /**\\n     * @dev Make offer on a listed item\\n     */\\n    function offer(\\n        uint40 listingId,\\n        uint256 offerAmount,\\n        bool increase,\\n        bytes32[] calldata merkleProof\\n    ) external;\\n\\n    /**\\n     * @dev Rescind an offer on a listed item\\n     */\\n    function rescind(uint40 listingId) external;\\n\\n    function rescind(uint40[] calldata listingIds) external;\\n\\n    function rescind(\\n        uint40 listingId,\\n        address[] calldata offerAddresses\\n    ) external;\\n\\n    /**\\n     * @dev Accept offer(s) on a listed item\\n     */\\n    function accept(\\n        uint40 listingId,\\n        address[] calldata addresses,\\n        uint256[] calldata amounts,\\n        uint256 maxAmount\\n    ) external;\\n\\n    /**\\n     * @dev Finalize a listed item (post-purchase)\\n     */\\n    function finalize(uint40 listingId) external payable;\\n\\n    /**\\n     * @dev Cancel listing\\n     */\\n    function cancel(uint40 listingId, uint16 holdbackBPS) external;\\n\\n    /**\\n     * @dev Get listing details\\n     */\\n    function getListing(\\n        uint40 listingId\\n    ) external view returns (Listing memory);\\n\\n    /**\\n     * @dev Get the listing's current price\\n     */\\n    function getListingCurrentPrice(\\n        uint40 listingId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Get the listing's deliver fee\\n     */\\n    function getListingDeliverFee(\\n        uint40 listingId,\\n        uint256 price\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Get the total listing price for multiple items\\n     */\\n    function getListingTotalPrice(\\n        uint40 listingId,\\n        uint24 count\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns bids of a listing. No ordering guarantees\\n     */\\n    function getBids(\\n        uint40 listingId\\n    ) external view returns (MarketplaceLib.Bid[] memory);\\n\\n    /**\\n     * @dev Returns offers of a listing. No ordering guarantees\\n     */\\n    function getOffers(uint40 listingId) external view returns (Offer[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/libs/MarketplaceLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\\\";\\n\\nimport \\\"../ILazyDelivery.sol\\\";\\n\\nimport \\\"./TokenLib.sol\\\";\\n\\n/**\\n * Interface for Ownable contracts\\n */\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\\n/**\\n * @dev Marketplace libraries\\n */\\nlibrary MarketplaceLib {\\n    using AddressUpgradeable for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Events\\n    event CreateListing(\\n        uint40 indexed listingId,\\n        uint16 marketplaceBPS,\\n        uint8 listingType,\\n        uint24 totalAvailable,\\n        uint24 editionSize,\\n        uint48 startTime,\\n        uint48 endTime,\\n        uint256 initialAmount,\\n        uint16 extensionInterval,\\n        uint16 minIncrementBPS,\\n        address erc20\\n    );\\n    event CreateListingTokenDetails(\\n        uint40 indexed listingId,\\n        uint256 id,\\n        address address_,\\n        uint8 spec,\\n        bool lazy\\n    );\\n    event CreateListingFees(\\n        uint40 indexed listingId,\\n        uint16 deliverBPS,\\n        uint240 deliverFixed\\n    );\\n\\n    event PurchaseEvent(\\n        uint40 indexed listingId,\\n        address buyer,\\n        uint24 count,\\n        uint256 amount\\n    );\\n    event BidEvent(uint40 indexed listingId, address bidder, uint256 amount);\\n    event OfferEvent(uint40 indexed listingId, address oferrer, uint256 amount);\\n    event RescindOfferEvent(\\n        uint40 indexed listingId,\\n        address oferrer,\\n        uint256 amount\\n    );\\n    event AcceptOfferEvent(\\n        uint40 indexed listingId,\\n        address oferrer,\\n        uint256 amount\\n    );\\n    event ModifyListing(\\n        uint40 indexed listingId,\\n        uint256 initialAmount,\\n        uint48 startTime,\\n        uint48 endTime\\n    );\\n    event CancelListing(\\n        uint40 indexed listingId,\\n        address requestor,\\n        uint16 holdbackBPS\\n    );\\n    event FinalizeListing(uint40 indexed listingId);\\n\\n    // Listing types\\n    enum ListingType {\\n        INVALID,\\n        FIXED_PRICE,\\n        OFFERS_ONLY,\\n        INDIVIDUAL_AUCTION,\\n        RANKED_AUCTION,\\n        LINEAR_DUTCH_AUCTION,\\n        EXPO_DUTCH_AUCTION,\\n        SETTLEMENT_DUTCH_AUCTION\\n    }\\n\\n    /**\\n     * @dev Listing structure\\n     *\\n     * @param seller          - the selling party\\n     * @param flags           - bit flag (hasBid, finalized, tokenCreator).  See FLAG_MASK_*\\n     * @param totalSold       - total number of items sold.\\n     * @param marketplaceBPS  - Marketplace fee BPS\\n     * @param curationBPS     - curation fee BPS\\n     * @param bidCount        - bid count\\n     * @param details         - ListingDetails.  Contains listing configuration\\n     * @param token           - TokenDetails.  Contains the details of token being sold\\n     * @param receivers       - Array of ListingReceiver structs.  If provided, will distribute sales proceeds to receivers accordingly.\\n     * @param fees            - DeliveryFees.  Contains the delivery fee configuration for the listing\\n     * @param markleRoot      - MerkleRoot for whitelisted listing\\n     */\\n    struct Listing {\\n        address payable seller;\\n        uint8 flags;\\n        uint24 totalSold;\\n        uint16 marketplaceBPS;\\n        uint16 curationBPS;\\n        uint16 bidCount;\\n        ListingDetails details;\\n        TokenDetails token;\\n        ListingReceiver[] receivers;\\n        DeliveryFees fees;\\n        bytes32 merkleRoot;\\n    }\\n\\n    uint8 internal constant FLAG_MASK_HAS_BID = 0x1;\\n    uint8 internal constant FLAG_MASK_FINALIZED = 0x2;\\n    uint8 internal constant FLAG_MASK_TOKEN_CREATOR = 0x4;\\n    uint8 internal constant FLAG_MASK_ACCEPT_OFFERS = 0x8;\\n    uint8 internal constant FLAG_MASK_FINALIZED_LOGICALLY = 0x10;\\n\\n    /**\\n     * @dev Listing details structure\\n     *\\n     * @param initialAmount     - The initial amount of the listing. For auctions, it represents the reserve price.\\n     * @param restingAmount     - The resting amount of the listing.\\n     * @param dutchDecAmount    - The reduction amount of the dutch auction.\\n     * @param type_             - Listing type\\n     * @param totalAvailable    - Total number of tokens available.\\n     * @param editionSize       - Total number of winners.\\n     * @param extensionInterval - Only valid for *_AUCTION types. Indicates how long an auction will extend if a bid is made within the last <extensionInterval> seconds of the auction.\\n     * @param minIncrementBPS   - Only valid for *_AUCTION types. Indicates the minimum bid increase required\\n     * @param erc20             - If not 0x0, it indicates the erc20 token accepted for this sale\\n     * @param startTime         - The start time of the sale.  If set to 0, startTime will be set to the first bid/purchase.\\n     * @param endTime           - The end time of the sale.  If startTime is 0, represents the duration of the listing upon first bid/purchase.\\n     */\\n    struct ListingDetails {\\n        uint256 initialAmount;\\n        uint256 restingAmount;\\n        uint256 dutchDecAmount;\\n        ListingType type_;\\n        uint24 totalAvailable;\\n        uint16 editionSize;\\n        uint16 extensionInterval;\\n        uint16 minIncrementBPS;\\n        uint16 dutchInterval;\\n        address erc20;\\n        uint48 startTime;\\n        uint48 endTime;\\n    }\\n\\n    /**\\n     * @dev Token detail structure\\n     *\\n     * @param address_  - The contract address of the token\\n     * @param id        - The token id (or for a lazy asset, the asset id)\\n     * @param spec      - The spec of the token.  If it's a lazy token, it must be blank.\\n     * @param lazy      - True if token is to be lazy minted, false otherwise.  If lazy, the contract address must support ILazyDelivery\\n     */\\n    struct TokenDetails {\\n        uint256 id;\\n        address address_;\\n        TokenLib.Spec spec;\\n        bool lazy;\\n    }\\n\\n    /**\\n     * @dev Fee configuration for listing\\n     *\\n     * @param deliverBPS         - Additional fee needed to deliver the token (BPS)\\n     * @param deliverFixed       - Additional fee needed to deliver the token (fixed)\\n     */\\n    struct DeliveryFees {\\n        uint16 deliverBPS;\\n        uint240 deliverFixed;\\n    }\\n\\n    /**\\n     * Listing receiver.  The array of listing receivers must add up to 10000 BPS if provided.\\n     */\\n    struct ListingReceiver {\\n        address payable receiver;\\n        uint16 receiverBPS;\\n    }\\n\\n    /**\\n     * Represents an active bid\\n     *\\n     * @param amount       - The bid amount\\n     * @param bidder       - The bidder\\n     * @param delivered    - Whether or not the token has been delivered.\\n     * @param settled      - Whether or not the seller has been paid\\n     * @param refunded     - Whether or not the bid has been refunded\\n     * @param timestamp    - Timestamp of bid\\n     */\\n    struct Bid {\\n        uint256 amount;\\n        address payable bidder;\\n        bool delivered;\\n        bool settled;\\n        bool refunded;\\n        uint48 timestamp;\\n    }\\n\\n    /**\\n     * Represents an active offer\\n     *\\n     * @param amount        - The offer amount\\n     * @param timestamp     - Timestamp of offer\\n     * @param accepted      - Whether or not the offer was accepted (seller was paid)\\n     * @param erc20         - Currently unused.\\n     *                        Offers can only be made on the listing currency\\n     */\\n    struct Offer {\\n        uint200 amount;\\n        uint48 timestamp;\\n        bool accepted;\\n        address erc20;\\n    }\\n\\n    /**\\n     * Construct a marketplace listing\\n     */\\n    function constructListing(\\n        address seller,\\n        uint40 listingId,\\n        Listing storage listing,\\n        ListingDetails calldata listingDetails,\\n        TokenDetails calldata tokenDetails,\\n        DeliveryFees calldata deliveryFees,\\n        ListingReceiver[] calldata listingReceivers,\\n        bool acceptOffers,\\n        bool intake\\n    ) public {\\n        require(\\n            tokenDetails.address_.isContract(),\\n            \\\"Token address must be a contract\\\"\\n        );\\n        require(\\n            listingDetails.endTime > listingDetails.startTime,\\n            \\\"End time must be after start time\\\"\\n        );\\n        require(\\n            listingDetails.startTime == 0 ||\\n                listingDetails.startTime > block.timestamp,\\n            \\\"Start and end time cannot occur in the past\\\"\\n        );\\n        require(\\n            listingDetails.totalAvailable % listingDetails.editionSize == 0,\\n            \\\"Invalid token config\\\"\\n        );\\n        require(\\n            !acceptOffers ||\\n                listingDetails.type_ == ListingType.INDIVIDUAL_AUCTION ||\\n                listingDetails.type_ == ListingType.RANKED_AUCTION ||\\n                listingDetails.type_ == ListingType.LINEAR_DUTCH_AUCTION ||\\n                listingDetails.type_ == ListingType.EXPO_DUTCH_AUCTION ||\\n                listingDetails.type_ == ListingType.SETTLEMENT_DUTCH_AUCTION,\\n            \\\"Type cannot accept offers\\\"\\n        );\\n\\n        if (listingReceivers.length > 0) {\\n            uint256 totalBPS;\\n            for (uint i; i < listingReceivers.length; ) {\\n                listing.receivers.push(listingReceivers[i]);\\n                totalBPS += listingReceivers[i].receiverBPS;\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            require(totalBPS == 10000, \\\"Invalid receiver config\\\");\\n        }\\n\\n        if (listingDetails.type_ == ListingType.INDIVIDUAL_AUCTION) {\\n            require(listingDetails.editionSize == 1, \\\"Invalid token config\\\");\\n        } else if (listingDetails.type_ == ListingType.OFFERS_ONLY) {\\n            require(\\n                listingDetails.initialAmount == 0 &&\\n                    listingDetails.startTime > block.timestamp,\\n                \\\"Invalid listing config\\\"\\n            );\\n        }\\n\\n        // Purchase types\\n        if (isPurchase(listingDetails.type_) || isOffer(listingDetails.type_)) {\\n            require(\\n                deliveryFees.deliverBPS == 0 &&\\n                    deliveryFees.deliverFixed == 0 &&\\n                    listingDetails.extensionInterval == 0 &&\\n                    listingDetails.minIncrementBPS == 0,\\n                \\\"Invalid listing config\\\"\\n            );\\n        }\\n\\n        if (tokenDetails.lazy) {\\n            require(\\n                ERC165Checker.supportsInterface(\\n                    tokenDetails.address_,\\n                    type(ILazyDelivery).interfaceId\\n                ),\\n                \\\"Lazy delivery requires token address to implement ILazyDelivery\\\"\\n            );\\n        } else {\\n            require(\\n                listingDetails.type_ == ListingType.INDIVIDUAL_AUCTION ||\\n                    listingDetails.type_ == ListingType.RANKED_AUCTION ||\\n                    listingDetails.type_ == ListingType.LINEAR_DUTCH_AUCTION ||\\n                    listingDetails.type_ == ListingType.EXPO_DUTCH_AUCTION ||\\n                    listingDetails.type_ ==\\n                    ListingType.SETTLEMENT_DUTCH_AUCTION ||\\n                    listingDetails.type_ == ListingType.OFFERS_ONLY ||\\n                    listingDetails.type_ == ListingType.FIXED_PRICE,\\n                \\\"Invalid type\\\"\\n            );\\n            if (intake) {\\n                _intakeToken(\\n                    tokenDetails.spec,\\n                    tokenDetails.address_,\\n                    tokenDetails.id,\\n                    listingDetails.totalAvailable,\\n                    seller\\n                );\\n            }\\n        }\\n\\n        // Set Listing Data\\n        listing.seller = payable(seller);\\n        listing.details = listingDetails;\\n        listing.token = tokenDetails;\\n        listing.fees = deliveryFees;\\n\\n        // Token ownership check\\n        if (\\n            ERC165Checker.supportsInterface(\\n                tokenDetails.address_,\\n                type(IAdminControl).interfaceId\\n            ) && IAdminControl(tokenDetails.address_).isAdmin(seller)\\n        ) {\\n            listing.flags |= FLAG_MASK_TOKEN_CREATOR;\\n        } else {\\n            try IOwnable(tokenDetails.address_).owner() returns (\\n                address owner\\n            ) {\\n                if (owner == seller) listing.flags |= FLAG_MASK_TOKEN_CREATOR;\\n            } catch {}\\n        }\\n\\n        if (acceptOffers) {\\n            listing.flags |= FLAG_MASK_ACCEPT_OFFERS;\\n        }\\n\\n        _emitCreateListing(listingId, listing);\\n    }\\n\\n    function _emitCreateListing(\\n        uint40 listingId,\\n        Listing storage listing\\n    ) private {\\n        emit CreateListing(\\n            listingId,\\n            listing.marketplaceBPS,\\n            uint8(listing.details.type_),\\n            listing.details.totalAvailable,\\n            listing.details.editionSize,\\n            listing.details.startTime,\\n            listing.details.endTime,\\n            listing.details.initialAmount,\\n            listing.details.extensionInterval,\\n            listing.details.minIncrementBPS,\\n            listing.details.erc20\\n        );\\n        emit CreateListingTokenDetails(\\n            listingId,\\n            listing.token.id,\\n            listing.token.address_,\\n            uint8(listing.token.spec),\\n            listing.token.lazy\\n        );\\n        if (listing.fees.deliverBPS > 0 || listing.fees.deliverFixed > 0) {\\n            emit CreateListingFees(\\n                listingId,\\n                listing.fees.deliverBPS,\\n                listing.fees.deliverFixed\\n            );\\n        }\\n    }\\n\\n    function _intakeToken(\\n        TokenLib.Spec tokenSpec,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 tokensToTransfer,\\n        address from\\n    ) private {\\n        if (tokenSpec == TokenLib.Spec.ERC721) {\\n            require(\\n                tokensToTransfer == 1,\\n                \\\"ERC721 invalid number of tokens to transfer\\\"\\n            );\\n            TokenLib._erc721Transfer(\\n                tokenAddress,\\n                tokenId,\\n                from,\\n                address(this)\\n            );\\n        } else if (tokenSpec == TokenLib.Spec.ERC1155) {\\n            TokenLib._erc1155Transfer(\\n                tokenAddress,\\n                tokenId,\\n                tokensToTransfer,\\n                from,\\n                address(this)\\n            );\\n        } else {\\n            revert(\\\"Unsupported token spec\\\");\\n        }\\n    }\\n\\n    function isAuction(ListingType type_) internal pure returns (bool) {\\n        return (type_ == ListingType.INDIVIDUAL_AUCTION ||\\n            type_ == ListingType.RANKED_AUCTION ||\\n            type_ == ListingType.SETTLEMENT_DUTCH_AUCTION);\\n    }\\n\\n    function isPurchase(ListingType type_) internal pure returns (bool) {\\n        return (type_ == ListingType.FIXED_PRICE ||\\n            type_ == ListingType.LINEAR_DUTCH_AUCTION ||\\n            type_ == ListingType.EXPO_DUTCH_AUCTION);\\n    }\\n\\n    function isOffer(ListingType type_) internal pure returns (bool) {\\n        return (type_ == ListingType.OFFERS_ONLY);\\n    }\\n\\n    function canOffer(\\n        ListingType type_,\\n        uint8 listingFlags\\n    ) internal pure returns (bool) {\\n        // Can only make an offer if:\\n        // 1. Listing is an OFFERS_ONLY type\\n        // 2. Listing is an INDIVIDUAL_AUCTION that has offers enabled and no bids\\n        return (isOffer(type_) ||\\n            (isAuction(type_) &&\\n                (listingFlags & FLAG_MASK_ACCEPT_OFFERS) != 0 &&\\n                !hasBid(listingFlags)));\\n    }\\n\\n    function hasBid(uint8 listingFlags) internal pure returns (bool) {\\n        return listingFlags & FLAG_MASK_HAS_BID != 0;\\n    }\\n\\n    function isFinalized(uint8 listingFlags) internal pure returns (bool) {\\n        return listingFlags & FLAG_MASK_FINALIZED != 0;\\n    }\\n\\n    function isFinalizedLogically(uint8 listingFlags) internal pure returns (bool) {\\n        return listingFlags & FLAG_MASK_FINALIZED_LOGICALLY != 0;\\n    }\\n\\n    function sellerIsTokenCreator(\\n        uint8 listingFlags\\n    ) internal pure returns (bool) {\\n        return listingFlags & FLAG_MASK_TOKEN_CREATOR != 0;\\n    }\\n\\n    function modifyListing(\\n        uint40 listingId,\\n        Listing storage listing,\\n        uint256 initialAmount,\\n        uint48 startTime,\\n        uint48 endTime\\n    ) public {\\n        require(listing.seller == msg.sender, \\\"Permission denied\\\");\\n        require(endTime > startTime, \\\"End time must be after start time\\\");\\n        require(\\n            startTime == 0 ||\\n                (startTime == listing.details.startTime &&\\n                    endTime > block.timestamp) ||\\n                startTime > block.timestamp,\\n            \\\"Start and end time cannot occur in the past\\\"\\n        );\\n        require(\\n            !isFinalized(listing.flags) &&\\n                ((!isAuction(listing.details.type_) &&\\n                    listing.totalSold == 0) ||\\n                    (isAuction(listing.details.type_) &&\\n                        listing.bidCount == 0)),\\n            \\\"Cannot modify listing that has already started or completed\\\"\\n        );\\n        listing.details.initialAmount = initialAmount;\\n        listing.details.startTime = startTime;\\n        listing.details.endTime = endTime;\\n\\n        emit ModifyListing(listingId, initialAmount, startTime, endTime);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/libs/SettlementLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\\\";\\n\\nimport \\\"../ILazyDelivery.sol\\\";\\n\\nimport \\\"./MarketplaceLib.sol\\\";\\nimport \\\"./TokenLib.sol\\\";\\n\\n/**\\n * @dev Marketplace settlement logic\\n */\\nlibrary SettlementLib {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event Escrow(address indexed receiver, address erc20, uint256 amount);\\n\\n    /**\\n     * Purchase logic\\n     */\\n    function performPurchase(\\n        address royaltyEngineV1,\\n        uint40 listingId,\\n        MarketplaceLib.Listing storage listing,\\n        uint24 count,\\n        mapping(address => uint256) storage feesCollected\\n    ) public {\\n        require(\\n            MarketplaceLib.isPurchase(listing.details.type_),\\n            \\\"Not available to purchase\\\"\\n        );\\n        require(\\n            listing.details.startTime <= block.timestamp,\\n            \\\"Listing has not started\\\"\\n        );\\n        require(\\n            listing.details.endTime > block.timestamp ||\\n                listing.details.startTime == 0,\\n            \\\"Listing is expired\\\"\\n        );\\n\\n        listing.totalSold += count;\\n        require(\\n            listing.totalSold <= listing.details.totalAvailable,\\n            \\\"Not enough left\\\"\\n        );\\n\\n        // If startTime is 0, start on first purchase\\n        if (listing.details.startTime == 0) {\\n            listing.details.startTime = uint48(block.timestamp);\\n            listing.details.endTime += uint48(block.timestamp);\\n        }\\n\\n        uint256 totalPrice = _computeTotalPrice(listing, count);\\n        if (listing.details.erc20 == address(0)) {\\n            if (\\n                listing.details.type_ ==\\n                MarketplaceLib.ListingType.LINEAR_DUTCH_AUCTION ||\\n                listing.details.type_ ==\\n                MarketplaceLib.ListingType.EXPO_DUTCH_AUCTION\\n            ) {\\n                // For dutch auctions, price may have changed so allow for a mismatch of funds sent\\n                receiveTokens(listing, msg.sender, totalPrice, true, false);\\n            } else {\\n                receiveTokens(listing, msg.sender, totalPrice, false, true);\\n            }\\n        } else {\\n            require(msg.value == 0, \\\"Invalid amount\\\");\\n        }\\n\\n        if (listing.token.lazy) {\\n            // Lazy delivered\\n            deliverTokenLazy(\\n                listingId,\\n                listing,\\n                msg.sender,\\n                count,\\n                totalPrice,\\n                0\\n            );\\n        } else {\\n            // Single item\\n            deliverToken(listing, msg.sender, count, totalPrice, false);\\n        }\\n\\n        // Automatically finalize listing if all sold\\n        if (listing.details.totalAvailable == listing.totalSold) {\\n            listing.flags |= MarketplaceLib.FLAG_MASK_FINALIZED;\\n        }\\n\\n        // Pay seller\\n        if (listing.details.erc20 == address(0)) {\\n            _paySeller(\\n                royaltyEngineV1,\\n                listing,\\n                address(this),\\n                totalPrice,\\n                feesCollected\\n            );\\n        } else {\\n            _paySeller(\\n                royaltyEngineV1,\\n                listing,\\n                msg.sender,\\n                totalPrice,\\n                feesCollected\\n            );\\n        }\\n\\n        emit MarketplaceLib.PurchaseEvent(\\n            listingId,\\n            msg.sender,\\n            count,\\n            totalPrice\\n        );\\n    }\\n\\n    /**\\n     * Bid logic\\n     */\\n    function _preBidCheck(MarketplaceLib.Listing storage listing) private {\\n        require(\\n            MarketplaceLib.isAuction(listing.details.type_),\\n            \\\"Not available to bid\\\"\\n        );\\n        require(\\n            listing.details.startTime <= block.timestamp,\\n            \\\"Listing has not started\\\"\\n        );\\n        require(\\n            listing.details.endTime > block.timestamp ||\\n                listing.details.startTime == 0,\\n            \\\"Listing is expired\\\"\\n        );\\n\\n        // If startTime is 0, start on first purchase\\n        if (listing.details.startTime == 0) {\\n            listing.details.startTime = uint48(block.timestamp);\\n            listing.details.endTime += uint48(block.timestamp);\\n        }\\n    }\\n\\n    function _postBidExtension(MarketplaceLib.Listing storage listing) private {\\n        if (\\n            listing.details.extensionInterval > 0 &&\\n            listing.details.endTime <=\\n            (block.timestamp + listing.details.extensionInterval)\\n        ) {\\n            // Extend auction time if necessary\\n            listing.details.endTime =\\n                uint48(block.timestamp) +\\n                listing.details.extensionInterval;\\n        }\\n    }\\n\\n    function performBid(\\n        uint40 listingId,\\n        MarketplaceLib.Listing storage listing,\\n        uint24 count,\\n        uint256 bidAmount,\\n        bool increase,\\n        mapping(address => mapping(address => uint256)) storage escrow,\\n        mapping(uint40 => mapping(uint16 => MarketplaceLib.Bid)) storage bids\\n    ) public {\\n        // Basic auction\\n        _preBidCheck(listing);\\n\\n        address payable bidder = payable(msg.sender);\\n\\n        if (\\n            listing.details.type_ ==\\n            MarketplaceLib.ListingType.INDIVIDUAL_AUCTION\\n        ) {\\n            require(count == 1, \\\"Invalid Count\\\");\\n\\n            performIndividualAuctionBid(\\n                listingId,\\n                bidder,\\n                listing,\\n                bidAmount,\\n                increase,\\n                escrow,\\n                bids\\n            );\\n        } else if (\\n            listing.details.type_ == MarketplaceLib.ListingType.RANKED_AUCTION\\n        ) {\\n            require(count == 1, \\\"Invalid Count\\\");\\n\\n            performRankedAuctionBid(\\n                listingId,\\n                bidder,\\n                listing,\\n                bidAmount,\\n                increase,\\n                escrow,\\n                bids\\n            );\\n        } else if (\\n            listing.details.type_ ==\\n            MarketplaceLib.ListingType.SETTLEMENT_DUTCH_AUCTION\\n        ) {\\n            performSettlementDutchAuctionBid(\\n                listingId,\\n                bidder,\\n                listing,\\n                count,\\n                bids\\n            );\\n        }\\n\\n        emit MarketplaceLib.BidEvent(listingId, bidder, bidAmount);\\n\\n        _postBidExtension(listing);\\n    }\\n\\n    function performIndividualAuctionBid(\\n        uint40 listingId,\\n        address payable bidder,\\n        MarketplaceLib.Listing storage listing,\\n        uint256 bidAmount,\\n        bool increase,\\n        mapping(address => mapping(address => uint256)) storage escrow,\\n        mapping(uint40 => mapping(uint16 => MarketplaceLib.Bid)) storage bids\\n    ) public {\\n        MarketplaceLib.Bid storage currentBid = bids[listingId][0];\\n        if (MarketplaceLib.hasBid(listing.flags)) {\\n            if (currentBid.bidder == bidder) {\\n                // Bidder is the current high bidder\\n                require(bidAmount > 0 && increase, \\\"Existing bid\\\");\\n                receiveTokens(listing, bidder, bidAmount, false, true);\\n                bidAmount += currentBid.amount;\\n            } else {\\n                // Bidder is not the current high bidder\\n                // Check minimum bid requirements\\n                require(\\n                    bidAmount >=\\n                        computeMinBid(\\n                            listing.details.initialAmount,\\n                            currentBid.amount,\\n                            listing.details.minIncrementBPS\\n                        ),\\n                    \\\"Minimum bid not met\\\"\\n                );\\n                receiveTokens(listing, bidder, bidAmount, false, true);\\n                // Refund bid amount\\n                refundTokens(\\n                    listing.details.erc20,\\n                    currentBid.bidder,\\n                    currentBid.amount,\\n                    escrow\\n                );\\n            }\\n        } else {\\n            // Check minimum bid requirements\\n            require(\\n                bidAmount >= listing.details.initialAmount,\\n                \\\"Invalid bid amount\\\"\\n            );\\n            // Set has bid flag first to prevent re-entrancy\\n            listing.flags |= MarketplaceLib.FLAG_MASK_HAS_BID;\\n            receiveTokens(listing, bidder, bidAmount, false, true);\\n            listing.bidCount++;\\n        }\\n        // Update bidder if necessary\\n        if (currentBid.bidder != bidder) currentBid.bidder = bidder;\\n        // Update amount and timestamp\\n        currentBid.amount = bidAmount;\\n        currentBid.timestamp = uint48(block.timestamp);\\n    }\\n\\n    function performRankedAuctionBid(\\n        uint40 listingId,\\n        address payable bidder,\\n        MarketplaceLib.Listing storage listing,\\n        uint256 bidAmount,\\n        bool increase,\\n        mapping(address => mapping(address => uint256)) storage escrow,\\n        mapping(uint40 => mapping(uint16 => MarketplaceLib.Bid)) storage bids\\n    ) public {\\n        uint16 editionSize = listing.details.editionSize;\\n\\n        if (increase) {\\n            require(bidAmount > 0, \\\"none bid amount\\\");\\n\\n            uint16 pos = 0;\\n            for (; pos < listing.bidCount; pos++) {\\n                if (bids[listingId][pos].bidder == bidder) {\\n                    break;\\n                }\\n            }\\n\\n            require(pos < listing.bidCount, \\\"existing bid\\\");\\n\\n            receiveTokens(listing, bidder, bidAmount, false, true);\\n\\n            uint256 newBidAmount = bids[listingId][pos].amount + bidAmount;\\n            uint16 index = pos;\\n            for (; index > 0; index--) {\\n                if (newBidAmount <= bids[listingId][index - 1].amount) {\\n                    break;\\n                }\\n                bids[listingId][index] = bids[listingId][index - 1];\\n            }\\n            bids[listingId][index].bidder = bidder;\\n            bids[listingId][index].amount = newBidAmount;\\n            bids[listingId][index].timestamp = uint48(block.timestamp);\\n        } else {\\n            if (listing.bidCount < editionSize) {\\n                // Check minimum bid requirements\\n                require(\\n                    bidAmount >= listing.details.initialAmount,\\n                    \\\"Invalid bid amount\\\"\\n                );\\n\\n                uint16 index = listing.bidCount;\\n                for (; index > 0; index--) {\\n                    if (bidAmount <= bids[listingId][index].amount) {\\n                        break;\\n                    }\\n                    bids[listingId][index] = bids[listingId][index - 1];\\n                }\\n                bids[listingId][index].bidder = bidder;\\n                bids[listingId][index].amount = bidAmount;\\n                bids[listingId][index].timestamp = uint48(block.timestamp);\\n                // Set has bid flag first to prevent re-entrancy\\n                listing.flags |= MarketplaceLib.FLAG_MASK_HAS_BID;\\n                listing.bidCount++;\\n                receiveTokens(listing, bidder, bidAmount, false, true);\\n            } else {\\n                require(\\n                    bidAmount >=\\n                        computeMinBid(\\n                            listing.details.initialAmount,\\n                            bids[listingId][editionSize - 1].amount,\\n                            listing.details.minIncrementBPS\\n                        ),\\n                    \\\"Minimum bid not met\\\"\\n                );\\n\\n                receiveTokens(listing, bidder, bidAmount, false, true);\\n                // Refund bid amount\\n                refundTokens(\\n                    listing.details.erc20,\\n                    bids[listingId][editionSize - 1].bidder,\\n                    bids[listingId][editionSize - 1].amount,\\n                    escrow\\n                );\\n\\n                uint16 index = editionSize - 1;\\n                for (; index > 0; index--) {\\n                    if (bidAmount <= bids[listingId][index - 1].amount) {\\n                        break;\\n                    }\\n                    bids[listingId][index] = bids[listingId][index - 1];\\n                }\\n                bids[listingId][index].bidder = bidder;\\n                bids[listingId][index].amount = bidAmount;\\n                bids[listingId][index].timestamp = uint48(block.timestamp);\\n            }\\n        }\\n    }\\n\\n    function performSettlementDutchAuctionBid(\\n        uint40 listingId,\\n        address payable bidder,\\n        MarketplaceLib.Listing storage listing,\\n        uint24 count,\\n        mapping(uint40 => mapping(uint16 => MarketplaceLib.Bid)) storage bids\\n    ) public {\\n        uint16 editionSize = listing.details.editionSize;\\n\\n        require(\\n            listing.bidCount < editionSize,\\n            \\\"No more bid can be performed!\\\"\\n        );\\n\\n        listing.totalSold += count;\\n\\n        require(\\n            listing.totalSold <= listing.details.totalAvailable,\\n            \\\"Not enough left\\\"\\n        );\\n\\n        uint256 totalPrice = _computeTotalPrice(listing, count);\\n        bids[listingId][listing.bidCount].bidder = bidder;\\n        bids[listingId][listing.bidCount].amount = totalPrice;\\n        bids[listingId][listing.bidCount].timestamp = uint48(block.timestamp);\\n        // Set has bid flag first to prevent re-entrancy\\n        listing.flags |= MarketplaceLib.FLAG_MASK_HAS_BID;\\n        listing.bidCount++;\\n        receiveTokens(listing, bidder, totalPrice, false, true);\\n\\n        if (listing.token.lazy) {\\n            // Lazy delivered\\n            deliverTokenLazy(\\n                listingId,\\n                listing,\\n                msg.sender,\\n                count,\\n                totalPrice,\\n                0\\n            );\\n        } else {\\n            // Single item\\n            deliverToken(listing, msg.sender, count, totalPrice, false);\\n        }\\n\\n        // Automatically finalize listing if all sold\\n        if (\\n            listing.details.totalAvailable == listing.totalSold ||\\n            listing.bidCount == editionSize\\n        ) {\\n            listing.flags |= MarketplaceLib.FLAG_MASK_FINALIZED_LOGICALLY;\\n        }\\n    }\\n\\n    /**\\n     * Offer logic\\n     */\\n    function makeOffer(\\n        uint40 listingId,\\n        MarketplaceLib.Listing storage listing,\\n        uint256 offerAmount,\\n        mapping(address => MarketplaceLib.Offer) storage offers,\\n        EnumerableSet.AddressSet storage offerAddresses,\\n        bool increase\\n    ) public {\\n        require(\\n            MarketplaceLib.canOffer(listing.details.type_, listing.flags),\\n            \\\"Cannot make offer\\\"\\n        );\\n        require(\\n            offerAmount <= 0xffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n        require(\\n            listing.details.startTime <= block.timestamp,\\n            \\\"Listing has not started\\\"\\n        );\\n        require(\\n            listing.details.endTime > block.timestamp ||\\n                listing.details.startTime == 0,\\n            \\\"Listing is expired\\\"\\n        );\\n\\n        receiveTokens(listing, payable(msg.sender), offerAmount, false, true);\\n        MarketplaceLib.Offer storage currentOffer = offers[msg.sender];\\n        currentOffer.timestamp = uint48(block.timestamp);\\n        if (offerAddresses.contains(msg.sender)) {\\n            // Has existing offer, increase offer\\n            require(increase, \\\"Existing offer\\\");\\n            currentOffer.amount += uint200(offerAmount);\\n        } else {\\n            offerAddresses.add(msg.sender);\\n            currentOffer.amount = uint200(offerAmount);\\n        }\\n        emit MarketplaceLib.OfferEvent(\\n            listingId,\\n            msg.sender,\\n            currentOffer.amount\\n        );\\n    }\\n\\n    function rescindOffer(\\n        uint40 listingId,\\n        MarketplaceLib.Listing storage listing,\\n        address offerAddress,\\n        mapping(address => MarketplaceLib.Offer) storage offers,\\n        EnumerableSet.AddressSet storage offerAddresses\\n    ) public {\\n        require(offerAddresses.contains(offerAddress), \\\"No offers found\\\");\\n        MarketplaceLib.Offer storage currentOffer = offers[offerAddress];\\n        require(!currentOffer.accepted, \\\"Offer already accepted\\\");\\n        uint256 offerAmount = currentOffer.amount;\\n\\n        // Remove offers first to prevent re-entrancy\\n        offerAddresses.remove(offerAddress);\\n        delete offers[offerAddress];\\n\\n        refundTokens(listing.details.erc20, payable(offerAddress), offerAmount);\\n\\n        emit MarketplaceLib.RescindOfferEvent(\\n            listingId,\\n            offerAddress,\\n            offerAmount\\n        );\\n    }\\n\\n    /**\\n     * Deliver tokens\\n     */\\n    function deliverToken(\\n        MarketplaceLib.Listing storage listing,\\n        address to,\\n        uint24 count,\\n        uint256 payableAmount,\\n        bool reverse\\n    ) public {\\n        // Check listing deliver fees if applicable\\n        if (\\n            payableAmount > 0 &&\\n            (listing.fees.deliverBPS > 0 || listing.fees.deliverFixed > 0)\\n        ) {\\n            uint256 deliveryFee = computeDeliverFee(listing, payableAmount);\\n            receiveTokens(listing, msg.sender, deliveryFee, false, true);\\n            // Pay out\\n            distributeProceeds(listing, address(this), deliveryFee);\\n        }\\n\\n        if (listing.token.spec == TokenLib.Spec.ERC721) {\\n            require(count == 1, \\\"Invalid amount\\\");\\n            TokenLib._erc721Transfer(\\n                listing.token.address_,\\n                listing.token.id,\\n                address(this),\\n                to\\n            );\\n        } else if (listing.token.spec == TokenLib.Spec.ERC1155) {\\n            if (!reverse) {\\n                TokenLib._erc1155Transfer(\\n                    listing.token.address_,\\n                    listing.token.id,\\n                    count,\\n                    address(this),\\n                    to\\n                );\\n            } else if (listing.details.totalAvailable > listing.totalSold) {\\n                require(count == 1, \\\"Invalid amount\\\");\\n                TokenLib._erc1155Transfer(\\n                    listing.token.address_,\\n                    listing.token.id,\\n                    listing.details.totalAvailable - listing.totalSold,\\n                    address(this),\\n                    to\\n                );\\n            }\\n        } else {\\n            revert(\\\"Unsupported token spec\\\");\\n        }\\n    }\\n\\n    /**\\n     * Deliver lazy tokens\\n     */\\n    function deliverTokenLazy(\\n        uint40 listingId,\\n        MarketplaceLib.Listing storage listing,\\n        address to,\\n        uint24 count,\\n        uint256 payableAmount,\\n        uint256 index\\n    ) public {\\n        // Check listing deliver fees if applicable\\n        if (\\n            payableAmount > 0 &&\\n            (listing.fees.deliverBPS > 0 || listing.fees.deliverFixed > 0)\\n        ) {\\n            // Receive tokens for fees\\n            uint256 deliveryFee = computeDeliverFee(listing, payableAmount);\\n            receiveTokens(listing, msg.sender, deliveryFee, false, true);\\n            // Pay out\\n            distributeProceeds(listing, address(this), deliveryFee);\\n        }\\n\\n        // Call deliver (which can mint)\\n        ILazyDelivery(listing.token.address_).deliver(\\n            listingId,\\n            to,\\n            listing.token.id,\\n            count,\\n            payableAmount,\\n            listing.details.erc20,\\n            index\\n        );\\n    }\\n\\n    /**\\n     * Distribute proceeds\\n     */\\n    function distributeProceeds(\\n        MarketplaceLib.Listing storage listing,\\n        address source,\\n        uint256 amount\\n    ) public {\\n        if (listing.receivers.length > 0) {\\n            uint256 totalSent;\\n            uint256 receiverIndex;\\n            for (\\n                receiverIndex;\\n                receiverIndex < listing.receivers.length - 1;\\n\\n            ) {\\n                uint256 receiverAmount = (amount *\\n                    listing.receivers[receiverIndex].receiverBPS) / 10000;\\n                sendTokens(\\n                    listing.details.erc20,\\n                    source,\\n                    listing.receivers[receiverIndex].receiver,\\n                    receiverAmount\\n                );\\n                totalSent += receiverAmount;\\n                unchecked {\\n                    ++receiverIndex;\\n                }\\n            }\\n            require(totalSent < amount, \\\"Settlement error\\\");\\n            sendTokens(\\n                listing.details.erc20,\\n                source,\\n                listing.receivers[receiverIndex].receiver,\\n                amount - totalSent\\n            );\\n        } else {\\n            sendTokens(listing.details.erc20, source, listing.seller, amount);\\n        }\\n    }\\n\\n    /**\\n     * Receive tokens.  Returns amount received.\\n     */\\n    function receiveTokens(\\n        MarketplaceLib.Listing storage listing,\\n        address source,\\n        uint256 amount,\\n        bool refundExcess,\\n        bool strict\\n    ) public {\\n        if (source == address(this)) return;\\n\\n        if (listing.details.erc20 == address(0)) {\\n            if (strict) {\\n                require(\\n                    msg.value == amount,\\n                    msg.value < amount ? \\\"Insufficient funds\\\" : \\\"Invalid amount\\\"\\n                );\\n            } else {\\n                if (msg.value < amount) {\\n                    revert(\\\"Insufficient funds\\\");\\n                } else if (msg.value > amount && refundExcess) {\\n                    // Refund excess\\n                    (bool success, ) = payable(source).call{\\n                        value: msg.value - amount\\n                    }(\\\"\\\");\\n                    require(success, \\\"Token send failure\\\");\\n                }\\n            }\\n        } else {\\n            require(msg.value == 0, \\\"Invalid amount\\\");\\n            require(\\n                IERC20(listing.details.erc20).transferFrom(\\n                    source,\\n                    address(this),\\n                    amount\\n                ),\\n                \\\"Insufficient funds\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Send proceeds to receiver\\n     */\\n    function sendTokens(\\n        address erc20,\\n        address source,\\n        address payable to,\\n        uint256 amount\\n    ) public {\\n        require(source != to, \\\"Invalid send request\\\");\\n\\n        if (erc20 == address(0)) {\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Token send failure\\\");\\n        } else {\\n            if (source == address(this)) {\\n                require(\\n                    IERC20(erc20).transfer(to, amount),\\n                    \\\"Insufficient funds\\\"\\n                );\\n            } else {\\n                require(\\n                    IERC20(erc20).transferFrom(source, to, amount),\\n                    \\\"Insufficient funds\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Refund tokens\\n     */\\n    function refundTokens(\\n        address erc20,\\n        address payable to,\\n        uint256 amount,\\n        mapping(address => mapping(address => uint256)) storage escrow\\n    ) public {\\n        if (erc20 == address(0)) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to.call{value: amount, gas: 20000}(\\\"\\\");\\n            if (!success) {\\n                escrow[to][erc20] += amount;\\n                emit Escrow(to, erc20, amount);\\n            }\\n        } else {\\n            try IERC20(erc20).transfer(to, amount) {} catch {\\n                escrow[to][erc20] += amount;\\n                emit Escrow(to, erc20, amount);\\n            }\\n        }\\n    }\\n\\n    function refundTokens(\\n        address erc20,\\n        address payable to,\\n        uint256 amount\\n    ) public {\\n        if (erc20 == address(0)) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success);\\n        } else {\\n            IERC20(erc20).transfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * Compute deliver fee\\n     */\\n    function computeDeliverFee(\\n        MarketplaceLib.Listing memory listing,\\n        uint256 price\\n    ) public pure returns (uint256) {\\n        return\\n            (price * listing.fees.deliverBPS) /\\n            10000 +\\n            listing.fees.deliverFixed;\\n    }\\n\\n    /**\\n     * Compute current listing price\\n     */\\n    function computeListingPrice(\\n        uint40 listingId,\\n        MarketplaceLib.Listing storage listing,\\n        mapping(uint40 => mapping(uint16 => MarketplaceLib.Bid)) storage bids\\n    ) public view returns (uint256 currentPrice) {\\n        require(\\n            listing.details.endTime > block.timestamp ||\\n                listing.details.startTime == 0 ||\\n                !MarketplaceLib.isFinalized(listing.flags),\\n            \\\"Listing is expired\\\"\\n        );\\n        currentPrice = listing.details.initialAmount;\\n        if (\\n            listing.details.type_ ==\\n            MarketplaceLib.ListingType.LINEAR_DUTCH_AUCTION\\n        ) {\\n            uint256 totalDecAmount = (listing.details.dutchDecAmount *\\n                (block.timestamp - listing.details.startTime)) /\\n                listing.details.dutchInterval;\\n            currentPrice = listing.details.restingAmount;\\n            if (listing.details.initialAmount > totalDecAmount) {\\n                uint256 reducedPrice = listing.details.initialAmount -\\n                    totalDecAmount;\\n                if (currentPrice < reducedPrice) {\\n                    currentPrice = reducedPrice;\\n                }\\n            }\\n        } else if (\\n            listing.details.type_ ==\\n            MarketplaceLib.ListingType.EXPO_DUTCH_AUCTION ||\\n            listing.details.type_ ==\\n            MarketplaceLib.ListingType.SETTLEMENT_DUTCH_AUCTION\\n        ) {\\n            uint256 halfCount = (block.timestamp - listing.details.startTime) /\\n                listing.details.dutchInterval;\\n            currentPrice = listing.details.restingAmount;\\n            uint256 reducedPrice = listing.details.initialAmount /\\n                (2 ** halfCount);\\n            if (currentPrice < reducedPrice) {\\n                currentPrice = reducedPrice;\\n            }\\n        } else {\\n            if (MarketplaceLib.hasBid(listing.flags)) {\\n                if (\\n                    listing.details.type_ ==\\n                    MarketplaceLib.ListingType.INDIVIDUAL_AUCTION\\n                ) {\\n                    currentPrice = computeMinBid(\\n                        listing.details.initialAmount,\\n                        bids[listingId][0].amount,\\n                        listing.details.minIncrementBPS\\n                    );\\n                }\\n            }\\n        }\\n        return currentPrice;\\n    }\\n\\n    /**\\n     * Compute total price for a <COUNT> of items to buy\\n     */\\n    function computeTotalPrice(\\n        MarketplaceLib.Listing storage listing,\\n        uint24 count\\n    ) public view returns (uint256) {\\n        require(\\n            listing.details.endTime > block.timestamp ||\\n                listing.details.startTime == 0 ||\\n                !MarketplaceLib.isFinalized(listing.flags),\\n            \\\"Listing is expired\\\"\\n        );\\n        return _computeTotalPrice(listing, count);\\n    }\\n\\n    function _computeTotalPrice(\\n        MarketplaceLib.Listing storage listing,\\n        uint24 count\\n    ) private view returns (uint256 price) {\\n        if (\\n            listing.details.type_ ==\\n            MarketplaceLib.ListingType.LINEAR_DUTCH_AUCTION\\n        ) {\\n            uint256 totalDecAmount = (listing.details.dutchDecAmount *\\n                (block.timestamp - listing.details.startTime)) /\\n                listing.details.dutchInterval;\\n            uint256 currentAmount = listing.details.restingAmount;\\n            if (listing.details.initialAmount > totalDecAmount) {\\n                uint256 reducedAmount = listing.details.initialAmount -\\n                    totalDecAmount;\\n                if (currentAmount < reducedAmount) {\\n                    currentAmount = reducedAmount;\\n                }\\n            }\\n            price = currentAmount * count;\\n        } else if (\\n            listing.details.type_ ==\\n            MarketplaceLib.ListingType.EXPO_DUTCH_AUCTION ||\\n            listing.details.type_ ==\\n            MarketplaceLib.ListingType.SETTLEMENT_DUTCH_AUCTION\\n        ) {\\n            uint256 halfCount = (block.timestamp - listing.details.startTime) /\\n                listing.details.dutchInterval;\\n            uint256 currentAmount = listing.details.restingAmount;\\n            uint256 reducedAmount = listing.details.initialAmount /\\n                (2 ** halfCount);\\n            if (currentAmount < reducedAmount) {\\n                currentAmount = reducedAmount;\\n            }\\n            price = currentAmount * count;\\n        } else {\\n            price = listing.details.initialAmount * count;\\n        }\\n    }\\n\\n    /**\\n     * Get the min bid\\n     */\\n    function computeMinBid(\\n        uint256 baseAmount,\\n        uint256 currentAmount,\\n        uint16 minIncrementBPS\\n    ) public pure returns (uint256) {\\n        if (currentAmount == 0) {\\n            return baseAmount;\\n        }\\n        if (minIncrementBPS == 0) {\\n            return currentAmount + 1;\\n        }\\n        uint256 incrementAmount = (currentAmount * minIncrementBPS) / 10000;\\n        if (incrementAmount == 0) incrementAmount = 1;\\n        return currentAmount + incrementAmount;\\n    }\\n\\n    /**\\n     * Helper to settle bid, which pays seller\\n     */\\n    function settleBid(\\n        address royaltyEngineV1,\\n        MarketplaceLib.Bid storage bid,\\n        MarketplaceLib.Listing storage listing,\\n        mapping(address => uint256) storage feesCollected\\n    ) public {\\n        settleBid(royaltyEngineV1, bid, listing, 0, feesCollected);\\n    }\\n\\n    function settleBid(\\n        address royaltyEngineV1,\\n        MarketplaceLib.Bid storage bid,\\n        MarketplaceLib.Listing storage listing,\\n        uint256 refundAmount,\\n        mapping(address => uint256) storage feesCollected\\n    ) public {\\n        require(!bid.refunded, \\\"Bid has been refunded\\\");\\n\\n        if (!bid.settled) {\\n            // Set to settled first to prevent re-entrancy\\n            bid.settled = true;\\n            _paySeller(\\n                royaltyEngineV1,\\n                listing,\\n                address(this),\\n                bid.amount - refundAmount,\\n                feesCollected\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Refund bid\\n     */\\n    function refundBid(\\n        MarketplaceLib.Bid storage bid,\\n        MarketplaceLib.Listing storage listing,\\n        uint256 holdbackBPS,\\n        mapping(address => mapping(address => uint256)) storage escrow\\n    ) public {\\n        require(\\n            listing.details.type_ ==\\n                MarketplaceLib.ListingType.INDIVIDUAL_AUCTION,\\n            \\\"Cannot refund for this type of auction\\\"\\n        );\\n        require(!bid.settled, \\\"Cannot refund, already settled\\\");\\n        if (!bid.refunded) {\\n            // Set to refunded first to prevent re-entrancy\\n            bid.refunded = true;\\n            _refundBid(bid.bidder, bid.amount, listing, holdbackBPS, escrow);\\n        }\\n    }\\n\\n    function _refundBid(\\n        address payable bidder,\\n        uint256 amount,\\n        MarketplaceLib.Listing storage listing,\\n        uint256 holdbackBPS,\\n        mapping(address => mapping(address => uint256)) storage escrow\\n    ) private {\\n        uint256 refundAmount = amount;\\n\\n        // Refund amount (less holdback)\\n        if (holdbackBPS > 0) {\\n            uint256 holdbackAmount = (refundAmount * holdbackBPS) / 10000;\\n            refundAmount -= holdbackAmount;\\n            // Distribute holdback\\n            distributeProceeds(listing, address(this), holdbackAmount);\\n        }\\n        // Refund bidder\\n        refundTokens(listing.details.erc20, bidder, refundAmount, escrow);\\n    }\\n\\n    /**\\n     * Helper to settle offer, which pays seller\\n     */\\n    function settleOffer(\\n        address royaltyEngineV1,\\n        uint40 listingId,\\n        MarketplaceLib.Listing storage listing,\\n        MarketplaceLib.Offer storage offer,\\n        address payable offerAddress,\\n        mapping(address => uint256) storage feesCollected,\\n        uint256 maxAmount,\\n        mapping(address => mapping(address => uint256)) storage escrow\\n    ) public {\\n        require(!offer.accepted, \\\"Already settled\\\");\\n\\n        // Set to accepted first to prevent re-entrancy\\n        offer.accepted = true;\\n        uint256 offerAmount = offer.amount;\\n        if (maxAmount > 0 && maxAmount < offerAmount) {\\n            // Refund the difference\\n            refundTokens(\\n                listing.details.erc20,\\n                offerAddress,\\n                offerAmount - maxAmount,\\n                escrow\\n            );\\n            // Set offerAmount to the max amount\\n            offerAmount = maxAmount;\\n        }\\n        _paySeller(\\n            royaltyEngineV1,\\n            listing,\\n            address(this),\\n            offerAmount,\\n            feesCollected\\n        );\\n        emit MarketplaceLib.AcceptOfferEvent(\\n            listingId,\\n            offerAddress,\\n            offerAmount\\n        );\\n    }\\n\\n    /**\\n     * Helper to pay seller given amount\\n     */\\n    function _paySeller(\\n        address royaltyEngineV1,\\n        MarketplaceLib.Listing storage listing,\\n        address source,\\n        uint256 amount,\\n        mapping(address => uint256) storage feesCollected\\n    ) private {\\n        uint256 sellerAmount = amount;\\n        if (listing.marketplaceBPS > 0) {\\n            uint256 marketplaceAmount = (amount * listing.marketplaceBPS) /\\n                10000;\\n            sellerAmount -= marketplaceAmount;\\n            receiveTokens(listing, source, marketplaceAmount, false, false);\\n            feesCollected[listing.details.erc20] += marketplaceAmount;\\n        }\\n        if (listing.curationBPS > 0) {\\n            uint256 curationFeeAmount = (amount * listing.curationBPS) / 10000;\\n            sellerAmount -= curationFeeAmount;\\n            receiveTokens(listing, source, curationFeeAmount, false, false);\\n            feesCollected[listing.details.erc20] += curationFeeAmount;\\n        }\\n\\n        if (\\n            !MarketplaceLib.sellerIsTokenCreator(listing.flags) &&\\n            !listing.token.lazy\\n        ) {\\n            // Handle royalties if not listed by token creator and not a lazy mint (lazy mints don't have royalties)\\n            try\\n                IRoyaltyEngineV1(royaltyEngineV1).getRoyalty(\\n                    listing.token.address_,\\n                    listing.token.id,\\n                    amount\\n                )\\n            returns (\\n                address payable[] memory recipients,\\n                uint256[] memory amounts\\n            ) {\\n                // Only pay royalties if properly configured\\n                if (\\n                    recipients.length > 1 ||\\n                    (recipients.length == 1 &&\\n                        recipients[0] != listing.seller &&\\n                        recipients[0] != address(0))\\n                ) {\\n                    for (uint i; i < recipients.length; ) {\\n                        if (recipients[i] != address(0) && amounts[i] > 0) {\\n                            sellerAmount -= amounts[i];\\n                            sendTokens(\\n                                listing.details.erc20,\\n                                source,\\n                                recipients[i],\\n                                amounts[i]\\n                            );\\n                        }\\n                        unchecked {\\n                            ++i;\\n                        }\\n                    }\\n                }\\n            } catch {}\\n        }\\n        distributeProceeds(listing, source, sellerAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/libs/TokenLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @dev Token specs and functions\\n */\\nlibrary TokenLib {\\n    // Spec types\\n    enum Spec {\\n        NONE,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    function _erc721Transfer(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal {\\n        // Transfer token\\n        IERC721(tokenAddress).transferFrom(from, to, tokenId);\\n    }\\n\\n    function _erc1155Transfer(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value,\\n        address from,\\n        address to\\n    ) internal {\\n        // Transfer token\\n        IERC1155(tokenAddress).safeTransferFrom(from, to, tokenId, value, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/ILazyDelivery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: VERTICAL.art\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILazyDelivery is IERC165 {\\n    /**\\n     *  @dev Deliver an asset and deliver to the specified party\\n     *  When implementing this interface, please ensure you restrict access.\\n     *  If using LazyDeliver.sol, you can use authorizedDelivererRequired modifier to restrict access.\\n     *  Delivery can be for an existing asset or newly minted assets.\\n     *\\n     *  @param listingId      The listingId associated with this delivery.  Useful for permissioning.\\n     *  @param to             The address to deliver the asset to\\n     *  @param assetId        The assetId to deliver\\n     *  @param payableCount   The number of assets to deliver\\n     *  @param payableAmount  The amount seller will receive upon delivery of asset\\n     *  @param payableERC20   The erc20 token address of the amount (0x0 if ETH)\\n     *  @param index          (Optional): Index value for certain sales methods\\n     *\\n     *  Suggestion: If determining a refund amount based on total sales data, do not enable this function\\n     *              until the sales data is finalized and recorded in contract\\n     *\\n     *  Exploit Prevention for dynamic/random assignment\\n     *  1. Ensure attributes are not assigned until AFTER underlying mint if using _safeMint.\\n     *     This is to ensure a receiver cannot check attribute values on receive and revert transaction.\\n     *     However, even if this is the case, the recipient can wrap its mint in a contract that checks\\n     *     post mint completion and reverts if unsuccessful.\\n     *  2. Ensure that \\\"to\\\" is not a contract address. This prevents a contract from doing the lazy\\n     *     mint, which could exploit random assignment by reverting if they do not receive the desired\\n     *     item post mint.\\n     */\\n    function deliver(\\n        uint40 listingId,\\n        address to,\\n        uint256 assetId,\\n        uint24 payableCount,\\n        uint256 payableAmount,\\n        address payableERC20,\\n        uint256 index\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value)\\n        external\\n        returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value)\\n        external\\n        view\\n        returns (address payable[] memory recipients, uint256[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/marketplace/libs/MarketplaceLib.sol\": {\r\n        \"MarketplaceLib\": \"0xcd877c0eb8425eec54b9f1e135df77def8d83d36\"\r\n      },\r\n      \"contracts/marketplace/libs/SettlementLib.sol\": {\r\n        \"SettlementLib\": \"0x12b88b557e4b92a66e4393bd4d15b4cd73ca4152\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feeBPS\",\"type\":\"uint16\"}],\"name\":\"CurationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"MarketplaceEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feeBPS\",\"type\":\"uint16\"}],\"name\":\"MarketplaceFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyEngineV1\",\"type\":\"address\"}],\"name\":\"MarketplaceRoyaltyEngineUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"MarketplaceSellerRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"MarketplaceWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketplaceWithdrawEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"accept\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"count\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"count\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"holdbackBPS\",\"type\":\"uint16\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dutchDecAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum MarketplaceLib.ListingType\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"totalAvailable\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"extensionInterval\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minIncrementBPS\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dutchInterval\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"}],\"internalType\":\"struct MarketplaceLib.ListingDetails\",\"name\":\"listingDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"enum TokenLib.Spec\",\"name\":\"spec\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"lazy\",\"type\":\"bool\"}],\"internalType\":\"struct MarketplaceLib.TokenDetails\",\"name\":\"tokenDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"deliverBPS\",\"type\":\"uint16\"},{\"internalType\":\"uint240\",\"name\":\"deliverFixed\",\"type\":\"uint240\"}],\"internalType\":\"struct MarketplaceLib.DeliveryFees\",\"name\":\"deliveryFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"receiverBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct MarketplaceLib.ListingReceiver[]\",\"name\":\"listingReceivers\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"acceptOffers\",\"type\":\"bool\"}],\"name\":\"createListing\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"}],\"name\":\"getBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"delivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"timestamp\",\"type\":\"uint48\"}],\"internalType\":\"struct MarketplaceLib.Bid[]\",\"name\":\"bids\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"totalSold\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"marketplaceBPS\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"curationBPS\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dutchDecAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum MarketplaceLib.ListingType\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"totalAvailable\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"extensionInterval\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minIncrementBPS\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dutchInterval\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"}],\"internalType\":\"struct MarketplaceLib.ListingDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"enum TokenLib.Spec\",\"name\":\"spec\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"lazy\",\"type\":\"bool\"}],\"internalType\":\"struct MarketplaceLib.TokenDetails\",\"name\":\"token\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"receiverBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct MarketplaceLib.ListingReceiver[]\",\"name\":\"receivers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"deliverBPS\",\"type\":\"uint16\"},{\"internalType\":\"uint240\",\"name\":\"deliverFixed\",\"type\":\"uint240\"}],\"internalType\":\"struct MarketplaceLib.DeliveryFees\",\"name\":\"fees\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"offersAccepted\",\"type\":\"bool\"}],\"internalType\":\"struct IMarketplaceCore.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"}],\"name\":\"getListingCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getListingDeliverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"count\",\"type\":\"uint24\"}],\"name\":\"getListingTotalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"}],\"name\":\"getOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"timestamp\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"internalType\":\"struct IMarketplaceCore.Offer[]\",\"name\":\"offers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"}],\"name\":\"modifyListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"offerAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"count\",\"type\":\"uint24\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40[]\",\"name\":\"listingIds\",\"type\":\"uint40[]\"}],\"name\":\"rescind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"address[]\",\"name\":\"offerAddresses\",\"type\":\"address[]\"}],\"name\":\"rescind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"}],\"name\":\"rescind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setAllowListMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"listingId\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"curationFeeBPS\",\"type\":\"uint16\"}],\"name\":\"setCurationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"marketplaceFeeBPS\",\"type\":\"uint16\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyEngineV1\",\"type\":\"address\"}],\"name\":\"setRoyaltyEngineV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketplaceUpgradeable", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}