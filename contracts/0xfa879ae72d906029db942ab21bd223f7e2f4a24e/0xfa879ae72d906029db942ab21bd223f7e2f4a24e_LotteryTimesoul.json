{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lottery/LotteryTimesoul.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LotteryTimesoul is Ownable {\\n    uint randNonce;\\n    uint public lotteryID;\\n\\n    address[] wallets;\\n    mapping(address => uint) tickets;\\n    mapping(address => bool) winnersMap;\\n\\n    address[] winners;\\n    string[] public prizes;\\n\\n    error LotteryCompleted();\\n    error LotteryNotCompleted();\\n    error NoTickets(address);\\n    error NoWallets();\\n    error DuplicateWallet(address);\\n    error PrizesRequired();\\n    error NotEnoughWalletsForDraw(uint required, uint provided);\\n\\n    event NewWinner(address wallet, string prize);\\n\\n    struct Participant {\\n        address wallet;\\n        uint tickets;\\n    }\\n\\n    struct Winner {\\n        address wallet;\\n        string prize;\\n    }\\n\\n    constructor(uint _lotteryID, uint _randNonce, string[] memory _prizes) {\\n        if (_prizes.length == 0) {\\n            revert PrizesRequired();\\n        }\\n\\n        randNonce = _randNonce;\\n        lotteryID = _lotteryID;\\n        prizes = _prizes;\\n    }\\n\\n    function addParticipants(Participant[] calldata parts) external onlyOwner {\\n        if (winners.length > 0) {\\n            revert LotteryCompleted();\\n        }\\n\\n        for (uint i = 0; i < parts.length; i++) {\\n            Participant memory p = parts[i];\\n            if (p.tickets == 0) {\\n                revert NoTickets(p.wallet);\\n            }\\n\\n            if (tickets[p.wallet] == 0) {\\n                wallets.push(p.wallet);\\n            }\\n\\n            tickets[p.wallet] = p.tickets;\\n        }\\n    }\\n\\n    function walletBet(address wallet) external view returns (uint) {\\n        require(\\n            tickets[wallet] > 0,\\n            \\\"wallet does not participate in the lottery\\\"\\n        );\\n\\n        return tickets[wallet];\\n    }\\n\\n    function getWinners() external view returns (Winner[] memory) {\\n        require(winners.length > 0, \\\"lottery is not over yet\\\");\\n\\n        Winner[] memory winnersWallets = new Winner[](prizes.length);\\n        for (uint i = 0; i < prizes.length; i++) {\\n            winnersWallets[i] = Winner(winners[i], prizes[i]);\\n        }\\n\\n        return (winnersWallets);\\n    }\\n\\n    function draw() external onlyOwner {\\n        if (winners.length > 0) {\\n            revert LotteryCompleted();\\n        }\\n\\n        if (wallets.length == 0) {\\n            revert NoWallets();\\n        }\\n\\n        if (prizes.length > wallets.length) {\\n            revert NotEnoughWalletsForDraw(prizes.length, wallets.length);\\n        }\\n\\n        winners = new address[](prizes.length);\\n        uint[] memory weightSum = new uint[](wallets.length);\\n\\n        weightSum[0] = tickets[wallets[0]];\\n        for (uint j = 1; j < weightSum.length; j++) {\\n            weightSum[j] = weightSum[j - 1] + tickets[wallets[j]];\\n        }\\n\\n        uint maxWeight = weightSum[weightSum.length - 1];\\n        uint prizeIdx = 0;\\n        while (prizeIdx < prizes.length) {\\n            uint winnerIdx = getRandomIdx(\\n                weightSum,\\n                weightSum.length,\\n                maxWeight\\n            );\\n\\n            address winner = wallets[winnerIdx];\\n            if (winnersMap[winner]) {\\n                continue;\\n            }\\n\\n            winners[prizeIdx] = winner;\\n            emit NewWinner(winner, prizes[prizeIdx]);\\n\\n            winnersMap[winner] = true;\\n            prizeIdx++;\\n        }\\n    }\\n\\n    function getRandomIdx(\\n        uint[] memory weightSum,\\n        uint len,\\n        uint maxWeight\\n    ) internal returns (uint) {\\n        uint weight = randMod(maxWeight + 1);\\n        uint left = 0;\\n        uint right = len - 1;\\n\\n        while (left < right) {\\n            uint mid = (left + right) / 2;\\n\\n            if (weightSum[mid] == weight) {\\n                return mid;\\n            } else if (weightSum[mid] < weight) {\\n                left = mid + 1;\\n            } else {\\n                right = mid;\\n            }\\n        }\\n\\n        return left;\\n    }\\n\\n    function randMod(uint _modulus) internal returns (uint) {\\n        randNonce++;\\n\\n        return\\n            uint(\\n                keccak256(\\n                    abi.encodePacked(block.timestamp, msg.sender, randNonce)\\n                )\\n            ) % _modulus;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randNonce\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_prizes\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DuplicateWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LotteryCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LotteryNotCompleted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NoTickets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoWallets\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"NotEnoughWalletsForDraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrizesRequired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prize\",\"type\":\"string\"}],\"name\":\"NewWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"}],\"internalType\":\"struct LotteryTimesoul.Participant[]\",\"name\":\"parts\",\"type\":\"tuple[]\"}],\"name\":\"addParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"prize\",\"type\":\"string\"}],\"internalType\":\"struct LotteryTimesoul.Winner[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"walletBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LotteryTimesoul", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003530955e0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000001654686520576f7272696564204d6565726b617420233100000000000000000000000000000000000000000000000000000000000000000000000000000000001654686520576f7272696564204d6565726b617420233200000000000000000000000000000000000000000000000000000000000000000000000000000000001654686520576f7272696564204d6565726b617420233300000000000000000000000000000000000000000000000000000000000000000000000000000000001654686520576f7272696564204d6565726b617420233400000000000000000000000000000000000000000000000000000000000000000000000000000000001654686520576f7272696564204d6565726b617420233500000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}