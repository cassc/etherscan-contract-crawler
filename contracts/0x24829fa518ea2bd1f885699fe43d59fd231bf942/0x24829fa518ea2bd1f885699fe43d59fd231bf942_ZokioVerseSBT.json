{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC1155P.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC1155P Contracts v1.1\\n// Creator: 0xjustadev/0xth0mas\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IERC1155P.sol\\\";\\n\\n/**\\n * @dev Interface of ERC1155 token receiver.\\n */\\ninterface ERC1155P__IERC1155Receiver {\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Interface for IERC1155MetadataURI.\\n */\\n\\ninterface ERC1155P__IERC1155MetadataURI {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\\n /**\\n * @title ERC1155P\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155 including the Metadata extension.\\n * Optimized for lower gas for users collecting multiple tokens.\\n *\\n * Assumptions:\\n * - An owner cannot have more than 2**16 - 1 of a single token\\n * - The maximum token ID cannot exceed 2**100 - 1\\n */\\nabstract contract ERC1155P is IERC1155P, ERC1155P__IERC1155MetadataURI {\\n\\n    /**\\n     * @dev MAX_ACCOUNT_TOKEN_BALANCE is 2^16-1 because token balances are\\n     *      are being packed into 16 bits within each bucket.\\n     */\\n    uint256 private constant MAX_ACCOUNT_TOKEN_BALANCE = 0xFFFF;\\n\\n    uint256 private constant BALANCE_STORAGE_OFFSET =\\n        0xE000000000000000000000000000000000000000000000000000000000000000;\\n\\n    uint256 private constant APPROVAL_STORAGE_OFFSET =\\n        0xD000000000000000000000000000000000000000000000000000000000000000;\\n\\n    /**\\n     * @dev MAX_TOKEN_ID is derived from custom storage pointer location for \\n     *      account/token balance data. Wallet address is shifted 92 bits left\\n     *      and leaves 92 bits for bucket #'s. Each bucket holds 8 token balances\\n     *      2^92*8-1 = MAX_TOKEN_ID\\n     */\\n    uint256 private constant MAX_TOKEN_ID = 0x07FFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    // The `TransferSingle` event signature is given by:\\n    // `keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_SINGLE_EVENT_SIGNATURE =\\n        0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n    // The `TransferBatch` event signature is given by:\\n    // `keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\\n    bytes32 private constant _TRANSFER_BATCH_EVENT_SIGNATURE =\\n        0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\\n    // The `ApprovalForAll` event signature is given by:\\n    // `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    bytes32 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /// @dev Returns the name of the token.\\n    function name() public view virtual returns(string memory);\\n\\n    /// @dev Returns the symbol of the token.\\n    function symbol() public view virtual returns(string memory);\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0xd9b67a26 || // ERC165 interface ID for ERC1155.\\n            interfaceId == 0x0e89341c; // ERC165 interface ID for ERC1155MetadataURI.\\n    }\\n\\n    /// @dev Returns the URI for token `id`.\\n    ///\\n    /// You can either return the same templated URI for all token IDs,\\n    /// (e.g. \\\"https://example.com/api/{id}.json\\\"),\\n    /// or return a unique URI for each `id`.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        if(account == address(0)) { _revert(BalanceQueryForZeroAddress.selector); }\\n        return getBalance(account, id);\\n    }\\n\\n    /**\\n     * @dev Gets the amount of tokens minted by an account for a given token id\\n     */\\n    function _numberMinted(address account, uint256 id) internal view returns (uint256) {\\n        if(account == address(0)) { _revert(BalanceQueryForZeroAddress.selector); }\\n        return getMinted(account, id);\\n    }\\n\\n    /**\\n     * @dev Gets the balance of an account's token id from packed token data\\n     *\\n     */\\n    function getBalance(address account, uint256 id) private view returns (uint256 _balance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, or(BALANCE_STORAGE_OFFSET, or(shr(4, shl(96, account)), shr(3, id))))\\n            _balance := shr(shl(5, and(id, 0x07)), and(sload(keccak256(0x00, 0x20)), shl(shl(5, and(id, 0x07)), 0x0000FFFF)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the balance of an account's token id in packed token data\\n     *\\n     */\\n    function setBalance(address account, uint256 id, uint256 amount) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, or(BALANCE_STORAGE_OFFSET, or(shr(4, shl(96, account)), shr(3, id))))\\n            mstore(0x00, keccak256(0x00, 0x20))\\n            sstore(mload(0x00), or(and(not(shl(shl(5, and(id, 0x07)), 0x0000FFFF)), sload(mload(0x00))), shl(shl(5, and(id, 0x07)), amount)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets the number minted of an account's token id from packed token data\\n     *\\n     */\\n    function getMinted(address account, uint256 id) private view returns (uint256 _minted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, or(BALANCE_STORAGE_OFFSET, or(shr(4, shl(96, account)), shr(3, id))))\\n            _minted := shr(16, shr(shl(5, and(id, 0x07)), and(sload(keccak256(0x00, 0x20)), shl(shl(5, and(id, 0x07)), 0xFFFF0000))))\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the number minted of an account's token id in packed token data\\n     *\\n     */\\n    function setMinted(address account, uint256 id, uint256 amount) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, or(BALANCE_STORAGE_OFFSET, or(shr(4, shl(96, account)), shr(3, id))))\\n            mstore(0x00, keccak256(0x00, 0x20))\\n            sstore(mload(0x00), or(and(not(shl(shl(5, and(id, 0x07)), 0xFFFF0000)), sload(mload(0x00))), shl(shl(5, and(id, 0x07)), shl(16, amount))))\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        if(accounts.length != ids.length) { _revert(ArrayLengthMismatch.selector); }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for(uint256 i = 0; i < accounts.length;) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool _approved) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, shr(96, shl(96, account)))\\n            mstore(0x20, or(APPROVAL_STORAGE_OFFSET, shr(96, shl(96, operator))))\\n            mstore(0x00, keccak256(0x00, 0x40))\\n            _approved := sload(mload(0x00))\\n        }\\n        return _approved; \\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if(id > MAX_TOKEN_ID) { _revert(ExceedsMaximumTokenId.selector); }\\n        if(to == address(0)) { _revert(TransferToZeroAddress.selector); }\\n        \\n        if(from != _msgSenderERC1155P())\\n            if (!isApprovedForAll(from, _msgSenderERC1155P())) _revert(TransferCallerNotOwnerNorApproved.selector);\\n\\n        address operator = _msgSenderERC1155P();\\n\\n        _beforeTokenTransfer(operator, from, to, id, amount, data);\\n\\n        uint256 fromBalance = getBalance(from, id);\\n        if(amount > fromBalance) { _revert(TransferExceedsBalance.selector); }\\n\\n        if(from != to) {\\n            uint256 toBalance = getBalance(to, id);\\n            unchecked {\\n                fromBalance -= amount;\\n                toBalance += amount;\\n            }\\n            if(toBalance > MAX_ACCOUNT_TOKEN_BALANCE) { _revert(ExceedsMaximumBalance.selector); }\\n            setBalance(from, id, fromBalance);\\n            setBalance(to, id, toBalance);   \\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Emit the `TransferSingle` event.\\n            let memOffset := mload(0x40)\\n            mstore(memOffset, id)\\n            mstore(add(memOffset, 0x20), amount)\\n            log4(\\n                memOffset, // Start of data .\\n                0x40, // Length of data.\\n                _TRANSFER_SINGLE_EVENT_SIGNATURE, // Signature.\\n                operator, // `operator`.\\n                from, // `from`.\\n                to // `to`.\\n            )\\n        }\\n\\n        _afterTokenTransfer(operator, from, to, id, amount, data);\\n\\n        if(to.code.length != 0)\\n            if(!_checkContractOnERC1155Received(from, to, id, amount, data))  {\\n                _revert(TransferToNonERC1155ReceiverImplementer.selector);\\n            }\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if(to == address(0)) { _revert(TransferToZeroAddress.selector); }\\n        if(ids.length != amounts.length) { _revert(ArrayLengthMismatch.selector); }\\n\\n        if(from != _msgSenderERC1155P())\\n            if (!isApprovedForAll(from, _msgSenderERC1155P())) _revert(TransferCallerNotOwnerNorApproved.selector);\\n\\n        address operator = _msgSenderERC1155P();\\n\\n        _beforeBatchTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length;) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            if(id > MAX_TOKEN_ID) { _revert(ExceedsMaximumTokenId.selector); }\\n\\n            uint256 fromBalance = getBalance(from, id);\\n            if(amount > fromBalance) { _revert(TransferExceedsBalance.selector); }\\n\\n            if(from != to) {\\n                uint256 toBalance = getBalance(to, id);\\n                unchecked {\\n                    fromBalance -= amount;\\n                    toBalance += amount;\\n                }\\n                if(toBalance > MAX_ACCOUNT_TOKEN_BALANCE) { _revert(ExceedsMaximumBalance.selector); }\\n                setBalance(from, id, fromBalance);\\n                setBalance(to, id, toBalance);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(memOffset, 0x40)\\n            mstore(add(memOffset,0x20), add(0x60, mul(0x20,ids.length)))\\n            mstore(add(memOffset,0x40), ids.length)\\n            calldatacopy(add(memOffset,0x60), ids.offset, mul(0x20,ids.length))\\n            mstore(add(add(memOffset,0x60),mul(0x20,ids.length)), amounts.length)\\n            calldatacopy(add(add(memOffset,0x80),mul(0x20,ids.length)), amounts.offset, mul(0x20,amounts.length))\\n            log4(\\n                memOffset, \\n                add(0x80,mul(0x40,amounts.length)),\\n                _TRANSFER_BATCH_EVENT_SIGNATURE, // Signature.\\n                operator, // `operator`.\\n                from, // `from`.\\n                to // `to`.\\n            )\\n        }\\n\\n        _afterBatchTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\n        if(to.code.length != 0)\\n            if(!_checkContractOnERC1155BatchReceived(from, to, ids, amounts, data))  {\\n                _revert(TransferToNonERC1155ReceiverImplementer.selector);\\n            }\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        if(id > MAX_TOKEN_ID) { _revert(ExceedsMaximumTokenId.selector); }\\n        if(to == address(0)) { _revert(MintToZeroAddress.selector); }\\n        if(amount == 0) { _revert(MintZeroQuantity.selector); }\\n\\n        address operator = _msgSenderERC1155P();\\n\\n        _beforeTokenTransfer(operator, address(0), to, id, amount, data);\\n\\n        uint256 toBalanceBefore = getBalance(to, id);\\n        uint256 toBalanceAfter;\\n        unchecked {\\n            toBalanceAfter = toBalanceBefore + amount;\\n        }\\n        if(toBalanceAfter > MAX_ACCOUNT_TOKEN_BALANCE) { _revert(ExceedsMaximumBalance.selector); }\\n        if(toBalanceAfter < toBalanceBefore) { _revert(ExceedsMaximumBalance.selector); } // catches overflow\\n        setBalance(to, id, toBalanceAfter);\\n\\n        uint256 toMintedBefore = getMinted(to, id);\\n        uint256 toMintedAfter;\\n        unchecked {\\n            toMintedAfter = toMintedBefore + amount;\\n        }\\n        if(toMintedAfter > MAX_ACCOUNT_TOKEN_BALANCE) { _revert(ExceedsMaximumBalance.selector); }\\n        if(toMintedAfter < toMintedBefore) { _revert(ExceedsMaximumBalance.selector); } // catches overflow\\n        setMinted(to, id, toMintedAfter);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Emit the `TransferSingle` event.\\n            let memOffset := mload(0x40)\\n            mstore(memOffset, id)\\n            mstore(add(memOffset, 0x20), amount)\\n            log4(\\n                memOffset, // Start of data .\\n                0x40, // Length of data.\\n                _TRANSFER_SINGLE_EVENT_SIGNATURE, // Signature.\\n                operator, // `operator`.\\n                0, // `from`.\\n                to // `to`.\\n            )\\n        }\\n\\n        _afterTokenTransfer(operator, address(0), to, id, amount, data);\\n\\n        if(to.code.length != 0)\\n            if(!_checkContractOnERC1155Received(address(0), to, id, amount, data))  {\\n                _revert(TransferToNonERC1155ReceiverImplementer.selector);\\n            }\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if(to == address(0)) { _revert(MintToZeroAddress.selector); }\\n        if(ids.length != amounts.length) { _revert(ArrayLengthMismatch.selector); }\\n\\n        address operator = _msgSenderERC1155P();\\n\\n        _beforeBatchTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        uint256 id;\\n        uint256 amount;\\n        for (uint256 i = 0; i < ids.length;) {\\n            id = ids[i];\\n            amount = amounts[i];\\n            if(id > MAX_TOKEN_ID) { _revert(ExceedsMaximumTokenId.selector); }\\n            if(amount == 0) { _revert(MintZeroQuantity.selector); }\\n\\n            uint256 toBalanceBefore = getBalance(to, id);\\n            uint256 toBalanceAfter;\\n            unchecked {\\n                toBalanceAfter = toBalanceBefore + amount;\\n            }\\n            if(toBalanceAfter > MAX_ACCOUNT_TOKEN_BALANCE) { _revert(ExceedsMaximumBalance.selector); }\\n            if(toBalanceAfter < toBalanceBefore) { _revert(ExceedsMaximumBalance.selector); } // catches overflow\\n            setBalance(to, id, toBalanceAfter);\\n\\n            uint256 toMintedBefore = getMinted(to, id);\\n            uint256 toMintedAfter;\\n            unchecked {\\n                toMintedAfter = toMintedBefore + amount;\\n            }\\n            if(toMintedAfter > MAX_ACCOUNT_TOKEN_BALANCE) { _revert(ExceedsMaximumBalance.selector); }\\n            if(toMintedAfter < toMintedBefore) { _revert(ExceedsMaximumBalance.selector); } // catches overflow\\n            setMinted(to, id, toMintedAfter);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(memOffset, 0x40)\\n            mstore(add(memOffset,0x20), add(0x60, mul(0x20,ids.length)))\\n            mstore(add(memOffset,0x40), ids.length)\\n            calldatacopy(add(memOffset,0x60), ids.offset, mul(0x20,ids.length))\\n            mstore(add(add(memOffset,0x60),mul(0x20,ids.length)), amounts.length)\\n            calldatacopy(add(add(memOffset,0x80),mul(0x20,ids.length)), amounts.offset, mul(0x20,amounts.length))\\n            log4(\\n                memOffset, \\n                add(0x80,mul(0x40,amounts.length)),\\n                _TRANSFER_BATCH_EVENT_SIGNATURE, // Signature.\\n                operator, // `operator`.\\n                0, // `from`.\\n                to // `to`.\\n            )\\n        }\\n\\n        _afterBatchTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        if(to.code.length != 0)\\n            if(!_checkContractOnERC1155BatchReceived(address(0), to, ids, amounts, data))  {\\n                _revert(TransferToNonERC1155ReceiverImplementer.selector);\\n            }\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        if(id > MAX_TOKEN_ID) { _revert(ExceedsMaximumTokenId.selector); }\\n        if(from == address(0)) { _revert(BurnFromZeroAddress.selector); }\\n\\n        address operator = _msgSenderERC1155P();\\n\\n        _beforeTokenTransfer(operator, from, address(0), id, amount, \\\"\\\");\\n\\n        uint256 fromBalance = getBalance(from, id);\\n        if(amount > fromBalance) { _revert(BurnExceedsBalance.selector); }\\n        unchecked {\\n            fromBalance -= amount;\\n        }\\n        setBalance(from, id, fromBalance);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Emit the `TransferSingle` event.\\n            let memOffset := mload(0x40)\\n            mstore(memOffset, id)\\n            mstore(add(memOffset, 0x20), amount)\\n            log4(\\n                memOffset, // Start of data.\\n                0x40, // Length of data.\\n                _TRANSFER_SINGLE_EVENT_SIGNATURE, // Signature.\\n                operator, // `operator`.\\n                from, // `from`.\\n                0 // `to`.\\n            )\\n        }\\n\\n        _afterTokenTransfer(operator, from, address(0), id, amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] calldata ids, uint256[] calldata amounts) internal virtual {\\n        if(from == address(0)) { _revert(BurnFromZeroAddress.selector); }\\n        if(ids.length != amounts.length) { _revert(ArrayLengthMismatch.selector); }\\n\\n        address operator = _msgSenderERC1155P();\\n\\n        _beforeBatchTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length;) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            if(id > MAX_TOKEN_ID) { _revert(ExceedsMaximumTokenId.selector); }\\n\\n            uint256 fromBalance = getBalance(from, id);\\n            if(amount > fromBalance) { _revert(BurnExceedsBalance.selector); }\\n            unchecked {\\n                fromBalance -= amount;\\n            }\\n            setBalance(from, id, fromBalance);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let memOffset := mload(0x40)\\n            mstore(memOffset, 0x40)\\n            mstore(add(memOffset,0x20), add(0x60, mul(0x20,ids.length)))\\n            mstore(add(memOffset,0x40), ids.length)\\n            calldatacopy(add(memOffset,0x60), ids.offset, mul(0x20,ids.length))\\n            mstore(add(add(memOffset,0x60),mul(0x20,ids.length)), amounts.length)\\n            calldatacopy(add(add(memOffset,0x80),mul(0x20,ids.length)), amounts.offset, mul(0x20,amounts.length))\\n            log4(\\n                memOffset, \\n                add(0x80,mul(0x40,amounts.length)),\\n                _TRANSFER_BATCH_EVENT_SIGNATURE, // Signature.\\n                operator, // `operator`.\\n                from, // `from`.\\n                0 // `to`.\\n            )\\n        }\\n\\n        _afterBatchTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, caller())\\n            mstore(0x20, or(APPROVAL_STORAGE_OFFSET, shr(96, shl(96, operator))))\\n            mstore(0x00, keccak256(0x00, 0x40))\\n            mstore(0x20, approved)\\n            sstore(mload(0x00), mload(0x20))\\n            log3(\\n                0x20,\\n                0x20,\\n                _APPROVAL_FOR_ALL_EVENT_SIGNATURE,\\n                caller(),\\n                shr(96, shl(96, operator))\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any single token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    \\n\\n    /**\\n     * @dev Hook that is called before any batch token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    \\n    function _beforeBatchTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any single token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any batch token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    \\n    function _afterBatchTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC1155Receiver-onERC155Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `id` - Token ID to be transferred.\\n     * `amount` - Balance of token to be transferred\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC1155Received(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC1155P__IERC1155Receiver(to).onERC1155Received(_msgSenderERC1155P(), from, id, amount, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC1155P__IERC1155Receiver(to).onERC1155Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                _revert(TransferToNonERC1155ReceiverImplementer.selector);\\n            }\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                revert(add(32, reason), mload(reason))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC1155Receiver-onERC155Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `id` - Token ID to be transferred.\\n     * `amount` - Balance of token to be transferred\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC1155BatchReceived(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC1155P__IERC1155Receiver(to).onERC1155BatchReceived(_msgSenderERC1155P(), from, ids, amounts, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC1155P__IERC1155Receiver(to).onERC1155BatchReceived.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                _revert(TransferToNonERC1155ReceiverImplementer.selector);\\n            }\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                revert(add(32, reason), mload(reason))\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC1155P() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n\\n    /**\\n     * @dev For more efficient reverts.\\n     */\\n    function _revert(bytes4 errorSelector) internal pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, errorSelector)\\n            revert(0x00, 0x04)\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/IERC1155P.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721P Contracts v1.1\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155P {\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Arrays cannot be different lengths.\\n     */\\n    error ArrayLengthMismatch();\\n\\n    /**\\n     * Cannot burn from the zero address.\\n     */\\n    error BurnFromZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The quantity of tokens being burned is greater than account balance.\\n     */\\n    error BurnExceedsBalance();\\n\\n    /**\\n     * The quantity of tokens being transferred is greater than account balance.\\n     */\\n    error TransferExceedsBalance();\\n\\n    /**\\n     * The resulting token balance exceeds the maximum storable by ERC1155P\\n     */\\n    error ExceedsMaximumBalance();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC1155Receiver interface.\\n     */\\n    error TransferToNonERC1155ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * Exceeds max token ID\\n     */\\n    error ExceedsMaximumTokenId();\\n    \\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/ZokioVerseSBT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nimport {Ownable} from \\\"solady/src/auth/Ownable.sol\\\";\\r\\nimport {ERC1155P} from \\\"./ERC1155P.sol\\\";\\r\\n\\r\\ncontract ZokioVerseSBT is ERC1155P, Ownable {\\r\\n    error ExceedMaxPerWallet();\\r\\n    error WrongValueSent();\\r\\n    error FailedToWithdraw();\\r\\n    error NotLive();\\r\\n    error ExceedMaxSupply();\\r\\n    error CannotApprove();\\r\\n    error CannotTransfer();\\r\\n\\r\\n    event Soulbound(uint256 indexed id, bool bounded);\\r\\n\\r\\n    /// @notice Token id\\r\\n    uint256 public constant ZOKIO_SBT_ID = 1;\\r\\n\\r\\n    /// @notice Token base uri\\r\\n    string internal _uri;\\r\\n\\r\\n    /// @notice Mint start time\\r\\n    uint256 public startsAt = 1703116800;\\r\\n\\r\\n    /// @notice Mint end time\\r\\n    uint256 public endsAt = 1703203200;\\r\\n\\r\\n    /// @notice Max mints per wallet\\r\\n    uint256 public maxPerWallet = 5;\\r\\n\\r\\n    /// @notice Token unit price\\r\\n    uint256 public price = 0.04 ether;\\r\\n\\r\\n    /// @notice Max supply of token\\r\\n    uint256 public maxSupply = 1000;\\r\\n\\r\\n    /// @notice Total minted supply of token\\r\\n    uint256 public totalMinted = 0;\\r\\n\\r\\n    /// @notice Total burned tokens\\r\\n    uint256 public numBurned = 0;\\r\\n\\r\\n    /// @notice Soulbound token associations\\r\\n    mapping(uint256 => bool) private soulbounds;\\r\\n\\r\\n    constructor(string memory zokioUri) ERC1155P() {\\r\\n        _initializeOwner(msg.sender);\\r\\n        _uri = zokioUri;\\r\\n        setSoulbound(ZOKIO_SBT_ID, true);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the name of the token.\\r\\n    function name() public view virtual override returns(string memory){\\r\\n        return \\\"ZokioVerseSBT\\\";\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the symbol of the token.\\r\\n    function symbol() public view virtual override returns(string memory){\\r\\n        return \\\"ZKSBT\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Public mint\\r\\n    * @param amount The amount of nfs to send\\r\\n    */\\r\\n    function mint(uint256 amount) external payable {\\r\\n        if (block.timestamp < startsAt || block.timestamp > endsAt) revert NotLive();\\r\\n        if (amount + _numberMinted(msg.sender, ZOKIO_SBT_ID) > maxPerWallet) revert ExceedMaxPerWallet();\\r\\n        if (msg.value != price * amount) revert WrongValueSent();\\r\\n        if (amount + totalMinted > maxSupply) revert ExceedMaxSupply();\\r\\n        totalMinted += amount;\\r\\n        _mint(msg.sender, ZOKIO_SBT_ID, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Burn token\\r\\n    * @param amount The amount of nfs to burn\\r\\n    */\\r\\n    function burn(uint256 amount) external payable {\\r\\n        numBurned += amount;\\r\\n        _burn(msg.sender, ZOKIO_SBT_ID, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev This just ignores the token id\\r\\n    * @notice Returns the total supply of a token id\\r\\n    * @param tokenId The token id to consider for supply\\r\\n    */\\r\\n    function totalSupply(uint256 tokenId) external view returns (uint256) {\\r\\n        return totalMinted - numBurned;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Owner mint\\r\\n    * @param to Address to send to\\r\\n    * @param amount The amount of nfs to send\\r\\n    */\\r\\n    function ownerMint(address to, uint256 amount) external onlyOwner {\\r\\n        if (amount + totalMinted > maxSupply) revert ExceedMaxSupply();\\r\\n        totalMinted += amount;\\r\\n        _mint(to, ZOKIO_SBT_ID, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /// @dev Just return a single templated string\\r\\n    function uri(uint256 id) public view override returns (string memory){\\r\\n        return _uri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set new uri\\r\\n    * @param uri_ A templated uri string\\r\\n    */\\r\\n    function setBaseUri(string calldata uri_) external onlyOwner {\\r\\n        _uri = uri_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set a mint configuration window\\r\\n    * @param _startsAt The mint start time\\r\\n    * @param _endsAt The mint end time\\r\\n    * @param _price The mint price\\r\\n    * @param _maxSupply The mint max supply\\r\\n    * @param _maxPerWallet The mint max per wallet\\r\\n    */\\r\\n    function setMintConfig(uint256 _startsAt, uint256 _endsAt, uint256 _price, uint256 _maxSupply, uint256 _maxPerWallet) external onlyOwner {\\r\\n        startsAt = _startsAt;\\r\\n        endsAt = _endsAt;\\r\\n        price = _price;\\r\\n        maxSupply = _maxSupply;\\r\\n        maxPerWallet = _maxPerWallet;\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw the eths\\r\\n    function withdraw() external onlyOwner {\\r\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) revert FailedToWithdraw();\\r\\n    }\\r\\n\\r\\n    /// @dev Returns true if a token type `id` is soulbound.\\r\\n    function isSoulbound(uint256 id) public view virtual returns (bool) {\\r\\n        return soulbounds[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set whether a token is soulbound or not\\r\\n    * @param id The token id to bound\\r\\n    * @param soulbound Is it soulbound?\\r\\n    */\\r\\n    function setSoulbound(uint256 id, bool soulbound) public onlyOwner {\\r\\n        soulbounds[id] = soulbound;\\r\\n        emit Soulbound(id, soulbound);\\r\\n    }\\r\\n\\r\\n    /// @dev Prevent any listings\\r\\n    function setApprovalForAll(address operator, bool approved) public override {\\r\\n        revert CannotApprove();\\r\\n    }\\r\\n\\r\\n    /// @dev Prevent transfers to addresses outside of zero addy\\r\\n    function _beforeTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(operator, from, to, id, amount, data);\\r\\n        if (isSoulbound(id) && from != address(0) && to != address(0)) {\\r\\n            revert CannotTransfer();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Prevent transfers to addresses outside of zero addy\\r\\n    function _beforeBatchTokenTransfer(\\r\\n        address operator,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata amounts,\\r\\n        bytes memory data\\r\\n    ) internal virtual override {\\r\\n        super._beforeBatchTokenTransfer(operator, from, to, ids, amounts, data);\\r\\n        for (uint256 i = 0; i < ids.length; ++i) {\\r\\n            if (isSoulbound(ids[i]) && from != address(0) && to != address(0)) {\\r\\n                revert CannotTransfer();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"solady/src/auth/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n///\\n/// @dev Note:\\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\\n///\\n/// While the ownable portion follows\\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /// @dev Cannot double-initialize.\\n    error AlreadyInitialized();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The owner slot is given by:\\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\\\"_OWNER_SLOT_NOT\\\")))))`.\\n    /// It is intentionally chosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    bytes32 internal constant _OWNER_SLOT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                if sload(ownerSlot) {\\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(_OWNER_SLOT, newOwner)\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    /// Override to return a different value if needed.\\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(_OWNER_SLOT)\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 3333\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"zokioUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotApprove\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMaxPerWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaximumBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaximumTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC1155ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongValueSent\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bounded\",\"type\":\"bool\"}],\"name\":\"Soulbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ZOKIO_SBT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isSoulbound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerWallet\",\"type\":\"uint256\"}],\"name\":\"setMintConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"soulbound\",\"type\":\"bool\"}],\"name\":\"setSoulbound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZokioVerseSBT", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "3333", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004c697066733a2f2f626166796265696663337a7a756a6c6634616862757032657a7179366f71797168373533736474786f6c67657634797774743369776174776c76752f7b69647d2e6a736f6e0000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}