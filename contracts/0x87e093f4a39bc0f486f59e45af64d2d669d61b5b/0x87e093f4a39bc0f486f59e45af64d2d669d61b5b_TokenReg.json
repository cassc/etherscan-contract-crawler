{"SourceCode": "contract TokenReg {\r\n    modifier only_owner { if (msg.sender != owner) return; _ }\r\n    event NewOwner(address indexed old, address indexed current);\r\n    function setOwner(address _new) only_owner { NewOwner(owner, _new); owner = _new; }\r\n    address public owner = msg.sender;\r\n    struct Token {\r\n        address addr;\r\n        string tla;\r\n        uint base;\r\n        string name;\r\n        address owner;\r\n        mapping (bytes32 => bytes32) meta;\r\n    }\r\n\r\n    modifier when_fee_paid { if (msg.value < fee) return; _ }\r\n    modifier when_address_free(address _addr) { if (mapFromAddress[_addr] != 0) return; _ }\r\n    modifier when_tla_free(string _tla) { if (mapFromTLA[_tla] != 0) return; _ }\r\n    modifier when_is_tla(string _tla) { if (bytes(_tla).length != 3) return; _ }\r\n    modifier when_has_tla(string _tla) { if (mapFromTLA[_tla] == 0) return; _ }\r\n    modifier only_token_owner(uint _id) { if (tokens[_id].owner != msg.sender) return; _ }\r\n\r\n    event Registered(string indexed tla, uint indexed id, address addr, string name);\r\n    event Unregistered(string indexed tla, uint indexed id);\r\n    event MetaChanged(uint indexed id, bytes32 indexed key, bytes32 value);\r\n\r\n    function register(address _addr, string _tla, uint _base, string _name) returns (bool) {\r\n        return registerAs(_addr, _tla, _base, _name, msg.sender);\r\n    }\r\n\r\n    function registerAs(address _addr, string _tla, uint _base, string _name, address _owner) when_fee_paid when_address_free(_addr) when_is_tla(_tla) when_tla_free(_tla) returns (bool) {\r\n        tokens.push(Token(_addr, _tla, _base, _name, _owner));\r\n        mapFromAddress[_addr] = tokens.length;\r\n        mapFromTLA[_tla] = tokens.length;\r\n        Registered(_tla, tokens.length - 1, _addr, _name);\r\n        return true;\r\n    }\r\n\r\n    function unregister(uint _id) only_owner {\r\n        Unregistered(tokens[_id].tla, _id);\r\n        delete mapFromAddress[tokens[_id].addr];\r\n        delete mapFromTLA[tokens[_id].tla];\r\n        delete tokens[_id];\r\n    }\r\n\r\n    function setFee(uint _fee) only_owner {\r\n        fee = _fee;\r\n    }\r\n\r\n    function tokenCount() constant returns (uint) { return tokens.length; }\r\n    function token(uint _id) constant returns (address addr, string tla, uint base, string name, address owner) {\r\n        var t = tokens[_id];\r\n        addr = t.addr;\r\n        tla = t.tla;\r\n        base = t.base;\r\n        name = t.name;\r\n        owner = t.owner;\r\n    }\r\n\r\n    function fromAddress(address _addr) constant returns (uint id, string tla, uint base, string name, address owner) {\r\n        id = mapFromAddress[_addr] - 1;\r\n        var t = tokens[id];\r\n        tla = t.tla;\r\n        base = t.base;\r\n        name = t.name;\r\n        owner = t.owner;\r\n    }\r\n\r\n    function fromTLA(string _tla) constant returns (uint id, address addr, uint base, string name, address owner) {\r\n        id = mapFromTLA[_tla] - 1;\r\n        var t = tokens[id];\r\n        addr = t.addr;\r\n        base = t.base;\r\n        name = t.name;\r\n        owner = t.owner;\r\n    }\r\n\r\n    function meta(uint _id, bytes32 _key) constant returns (bytes32) {\r\n        return tokens[_id].meta[_key];\r\n    }\r\n\r\n    function setMeta(uint _id, bytes32 _key, bytes32 _value) only_token_owner(_id) {\r\n        tokens[_id].meta[_key] = _value;\r\n        MetaChanged(_id, _key, _value);\r\n    }\r\n\r\n    function drain() only_owner {\r\n        if (!msg.sender.send(this.balance))\r\n            throw;\r\n    }\r\n\r\n    mapping (address => uint) mapFromAddress;\r\n    mapping (string => uint) mapFromTLA;\r\n    Token[] tokens;\r\n    uint public fee = 1 ether;\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"token\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tla\",\"type\":\"string\"},{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_tla\",\"type\":\"string\"},{\"name\":\"_base\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"meta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_tla\",\"type\":\"string\"},{\"name\":\"_base\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"registerAs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tla\",\"type\":\"string\"}],\"name\":\"fromTLA\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unregister\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"fromAddress\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"tla\",\"type\":\"string\"},{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setMeta\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tla\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tla\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"MetaChanged\",\"type\":\"event\"}]", "ContractName": "TokenReg", "CompilerVersion": "v0.3.6+commit.3fc68da", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}