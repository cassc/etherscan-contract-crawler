{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\n// File: contracts/ERC165.sol\r\n\r\ninterface ERC165 {\r\n  /// @notice Query if a contract implements an interface\r\n  /// @param interfaceID The interface identifier, as specified in ERC-165\r\n  /// @dev Interface identification is specified in ERC-165. This function\r\n  ///  uses less than 30,000 gas.\r\n  /// @return `true` if the contract implements `interfaceID` and\r\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n  function supportsInterface(bytes4 interfaceID) external pure returns (bool);\r\n}\r\n\r\n// File: contracts/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\r\n}\r\n\r\n// File: contracts/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: contracts/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether there is code in the target address\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address address to check\r\n   * @return whether there is code in the target address\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n  * @param _tokenId uint256 ID of the token to validate\r\n  */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns whether the specified token exists\r\n  * @param _tokenId uint256 ID of the token to query the existance of\r\n  * @return whether the token exists\r\n  */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to transfer the given token ID\r\n  * @dev The zero address indicates there is no approved address.\r\n  * @dev There can only be one approved address per token at a given time.\r\n  * @dev Can only be called by the token owner or an approved operator.\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets or unsets the approval of a given operator\r\n  * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n  * @param _to operator address to set the approval\r\n  * @param _approved representing the status of the approval to be set\r\n  */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes data to send along with a safe transfer check\r\n  */\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @dev Reverts if the given address is not indeed the owner of the token\r\n  * @param _owner owner of the token\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to invoke `onERC721Received` on a target address\r\n  * @dev The call is not executed if the target address is not a contract\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _to target address that will receive the tokens\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes optional data to send along with the call\r\n  * @return whether the call correctly returned the expected magic value\r\n  */\r\n  function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool) {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n  * @dev Constructor function\r\n  */\r\n  function ERC721Token(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token name\r\n  * @return string representing the token name\r\n  */\r\n  function name() public view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token symbol\r\n  * @return string representing the token symbol\r\n  */\r\n  function symbol() public view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns an URI for a given token ID\r\n  * @dev Throws if the token ID does not exist. May return an empty string.\r\n  * @param _tokenId uint256 ID of the token to query\r\n  */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to set the token URI for a given token\r\n  * @dev Reverts if the token ID does not exist\r\n  * @param _tokenId uint256 ID of the token to set its URI\r\n  * @param _uri string URI to assign\r\n  */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n  * @param _owner address owning the tokens list to be accessed\r\n  * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n  * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n  */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of all the tokens in this contract\r\n  * @dev Reverts if the index is greater or equal to the total number of tokens\r\n  * @param _index uint256 representing the index to be accessed of the tokens list\r\n  * @return uint256 token ID at the given index of the tokens list\r\n  */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to address the beneficiary that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _owner owner of the token to burn\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Strings.sol\r\n\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    bytes memory babcde = bytes(abcde);\r\n    uint k = 0;\r\n    for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    return string(babcde);\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n    return strConcat(_a, _b, _c, _d, \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n    return strConcat(_a, _b, _c, \"\", \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b) internal pure returns (string) {\r\n    return strConcat(_a, _b, \"\", \"\", \"\");\r\n  }\r\n\r\n  function bytes16ToStr(bytes16 _bytes16, uint8 _start, uint8 _end) internal pure returns (string) {\r\n    bytes memory bytesArray = new bytes(_end - _start);\r\n    uint8 pos = 0;\r\n    for (uint8 i = _start; i < _end; i++) {\r\n      bytesArray[pos] = _bytes16[i];\r\n      pos++;\r\n    }\r\n    return string(bytesArray);\r\n  }\r\n}\r\n\r\n// File: contracts/KnownOriginDigitalAsset.sol\r\n\r\n/**\r\n* @title KnownOriginDigitalAsset\r\n*\r\n* http://www.knownorigin.io/\r\n*\r\n* ERC721 compliant digital assets for real-world artwork.\r\n* BE ORIGINAL. BUY ORIGINAL.\r\n*\r\n*/\r\ncontract KnownOriginDigitalAsset is ERC721Token, ERC165 {\r\n  using SafeMath for uint256;\r\n\r\n  bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\r\n    /*\r\n    bytes4(keccak256('supportsInterface(bytes4)'));\r\n    */\r\n\r\n  bytes4 constant InterfaceSignature_ERC721Enumerable = 0x780e9d63;\r\n    /*\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n    bytes4(keccak256('tokenByIndex(uint256)'));\r\n    */\r\n\r\n  bytes4 constant InterfaceSignature_ERC721Metadata = 0x5b5e139f;\r\n    /*\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('tokenURI(uint256)'));\r\n    */\r\n\r\n  bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\r\n    /*\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('getApproved(uint256)')) ^\r\n    bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n    bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'));\r\n    */\r\n\r\n  bytes4 public constant InterfaceSignature_ERC721Optional =- 0x4f558e79;\r\n    /*\r\n    bytes4(keccak256('exists(uint256)'));\r\n    */\r\n\r\n  /**\r\n   * @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n   * @dev Returns true for any standardized interfaces implemented by this contract.\r\n   * @param _interfaceID bytes4 the interface to check for\r\n   * @return true for any standardized interfaces implemented by this contract.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\r\n    return ((_interfaceID == InterfaceSignature_ERC165)\r\n    || (_interfaceID == InterfaceSignature_ERC721)\r\n    || (_interfaceID == InterfaceSignature_ERC721Optional)\r\n    || (_interfaceID == InterfaceSignature_ERC721Enumerable)\r\n    || (_interfaceID == InterfaceSignature_ERC721Metadata));\r\n  }\r\n\r\n  struct CommissionStructure {\r\n    uint8 curator;\r\n    uint8 developer;\r\n  }\r\n\r\n  string internal tokenBaseURI = \"https://ipfs.infura.io/ipfs/\";\r\n\r\n  // creates and owns the original assets all primary purchases transferred to this account\r\n  address public curatorAccount;\r\n\r\n  // the person who is responsible for designing and building the contract\r\n  address public developerAccount;\r\n\r\n  // total wei been processed through the contract\r\n  uint256 public totalPurchaseValueInWei;\r\n\r\n  // number of assets sold of any type\r\n  uint256 public totalNumberOfPurchases;\r\n\r\n  // A pointer to the next token to be minted, zero indexed\r\n  uint256 public tokenIdPointer = 0;\r\n\r\n  enum PurchaseState {Unsold, EtherPurchase, FiatPurchase}\r\n\r\n  mapping(string => CommissionStructure) internal editionTypeToCommission;\r\n  mapping(uint256 => PurchaseState) internal tokenIdToPurchased;\r\n\r\n  mapping(uint256 => bytes16) internal tokenIdToEdition;\r\n  mapping(uint256 => uint256) internal tokenIdToPriceInWei;\r\n  mapping(uint256 => uint32) internal tokenIdToPurchaseFromTime;\r\n\r\n  mapping(bytes16 => uint256) internal editionToEditionNumber;\r\n  mapping(bytes16 => address) internal editionToArtistAccount;\r\n\r\n  event PurchasedWithEther(uint256 indexed _tokenId, address indexed _buyer);\r\n\r\n  event PurchasedWithFiat(uint256 indexed _tokenId);\r\n\r\n  event PurchasedWithFiatReversed(uint256 indexed _tokenId);\r\n\r\n  modifier onlyCurator() {\r\n    require(msg.sender == curatorAccount);\r\n    _;\r\n  }\r\n\r\n  modifier onlyUnsold(uint256 _tokenId) {\r\n    require(tokenIdToPurchased[_tokenId] == PurchaseState.Unsold);\r\n    _;\r\n  }\r\n\r\n  modifier onlyFiatPurchased(uint256 _tokenId) {\r\n    require(tokenIdToPurchased[_tokenId] == PurchaseState.FiatPurchase);\r\n    _;\r\n  }\r\n\r\n  modifier onlyKnownOriginOwnedToken(uint256 _tokenId) {\r\n    require(tokenOwner[_tokenId] == curatorAccount || tokenOwner[_tokenId] == developerAccount);\r\n    _;\r\n  }\r\n\r\n  modifier onlyKnownOrigin() {\r\n    require(msg.sender == curatorAccount || msg.sender == developerAccount);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAfterPurchaseFromTime(uint256 _tokenId) {\r\n    require(tokenIdToPurchaseFromTime[_tokenId] <= block.timestamp);\r\n    _;\r\n  }\r\n\r\n  function KnownOriginDigitalAsset(address _curatorAccount) public ERC721Token(\"KnownOriginDigitalAsset\", \"KODA\") {\r\n    developerAccount = msg.sender;\r\n    curatorAccount = _curatorAccount;\r\n  }\r\n\r\n  // don't accept payment directly to contract\r\n  function() public payable {\r\n    revert();\r\n  }\r\n\r\n  /**\r\n   * @dev Mint a new KODA token\r\n   * @dev Reverts if not called by management\r\n   * @param _tokenURI the IPFS or equivalent hash\r\n   * @param _edition the identifier of the edition - leading 3 bytes are the artist code, trailing 3 bytes are the asset type\r\n   * @param _priceInWei the price of the KODA token\r\n   * @param _auctionStartDate the date when the token is available for sale\r\n   */\r\n  function mint(string _tokenURI, bytes16 _edition, uint256 _priceInWei, uint32 _auctionStartDate, address _artistAccount) external onlyKnownOrigin {\r\n    require(_artistAccount != address(0));\r\n\r\n    uint256 _tokenId = tokenIdPointer;\r\n\r\n    super._mint(msg.sender, _tokenId);\r\n    super._setTokenURI(_tokenId, _tokenURI);\r\n\r\n    editionToArtistAccount[_edition] = _artistAccount;\r\n\r\n    _populateTokenData(_tokenId, _edition, _priceInWei, _auctionStartDate);\r\n\r\n    tokenIdPointer = tokenIdPointer.add(1);\r\n  }\r\n\r\n  function _populateTokenData(uint _tokenId, bytes16 _edition, uint256 _priceInWei, uint32 _purchaseFromTime) internal {\r\n    tokenIdToEdition[_tokenId] = _edition;\r\n    editionToEditionNumber[_edition] = editionToEditionNumber[_edition].add(1);\r\n    tokenIdToPriceInWei[_tokenId] = _priceInWei;\r\n    tokenIdToPurchaseFromTime[_tokenId] = _purchaseFromTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a KODA token\r\n   * @dev Reverts if token is not unsold or not owned by management\r\n   * @param _tokenId the KODA token ID\r\n   */\r\n  function burn(uint256 _tokenId) public onlyKnownOrigin onlyUnsold(_tokenId) onlyKnownOriginOwnedToken(_tokenId) {\r\n    require(exists(_tokenId));\r\n    super._burn(ownerOf(_tokenId), _tokenId);\r\n\r\n    bytes16 edition = tokenIdToEdition[_tokenId];\r\n\r\n    delete tokenIdToEdition[_tokenId];\r\n    delete tokenIdToPriceInWei[_tokenId];\r\n    delete tokenIdToPurchaseFromTime[_tokenId];\r\n\r\n    editionToEditionNumber[edition] = editionToEditionNumber[edition].sub(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Utility function for updating a KODA assets token URI\r\n   * @dev Reverts if not called by management\r\n   * @param _tokenId the KODA token ID\r\n   * @param _uri the token URI, will be concatenated with baseUri\r\n   */\r\n  function setTokenURI(uint256 _tokenId, string _uri) external onlyKnownOrigin {\r\n    require(exists(_tokenId));\r\n    _setTokenURI(_tokenId, _uri);\r\n  }\r\n\r\n  /**\r\n   * @dev Utility function for updating a KODA assets price\r\n   * @dev Reverts if token is not unsold or not called by management\r\n   * @param _tokenId the KODA token ID\r\n   * @param _priceInWei the price in wei\r\n   */\r\n  function setPriceInWei(uint _tokenId, uint256 _priceInWei) external onlyKnownOrigin onlyUnsold(_tokenId) {\r\n    require(exists(_tokenId));\r\n    tokenIdToPriceInWei[_tokenId] = _priceInWei;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to pre-approve a purchaser in order for internal purchase methods\r\n   * to succeed without calling approve() directly\r\n   * @param _tokenId the KODA token ID\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function _approvePurchaser(address _to, uint256 _tokenId) internal {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != address(0));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the commission structure for the given _type\r\n   * @dev Reverts if not called by management\r\n   * @param _type the asset type\r\n   * @param _curator the curators commission\r\n   * @param _developer the developers commission\r\n   */\r\n  function updateCommission(string _type, uint8 _curator, uint8 _developer) external onlyKnownOrigin {\r\n    require(_curator > 0);\r\n    require(_developer > 0);\r\n    require((_curator + _developer) < 100);\r\n\r\n    editionTypeToCommission[_type] = CommissionStructure({curator : _curator, developer : _developer});\r\n  }\r\n\r\n  /**\r\n   * @dev Utility function for retrieving the commission structure for the provided _type\r\n   * @param _type the asset type\r\n   * @return the commission structure or zero for both values when not found\r\n   */\r\n  function getCommissionForType(string _type) public view returns (uint8 _curator, uint8 _developer) {\r\n    CommissionStructure storage commission = editionTypeToCommission[_type];\r\n    return (commission.curator, commission.developer);\r\n  }\r\n\r\n  /**\r\n   * @dev Purchase the provide token in Ether\r\n   * @dev Reverts if token not unsold and not available to be purchased\r\n   * msg.sender will become the owner of the token\r\n   * msg.value needs to be >= to the token priceInWei\r\n   * @param _tokenId the KODA token ID\r\n   * @return true/false depending on success\r\n   */\r\n  function purchaseWithEther(uint256 _tokenId) public payable onlyUnsold(_tokenId) onlyKnownOriginOwnedToken(_tokenId) onlyAfterPurchaseFromTime(_tokenId) {\r\n    require(exists(_tokenId));\r\n\r\n    uint256 priceInWei = tokenIdToPriceInWei[_tokenId];\r\n    require(msg.value >= priceInWei);\r\n\r\n    // approve sender as they have paid the required amount\r\n    _approvePurchaser(msg.sender, _tokenId);\r\n\r\n    // transfer assets from contract creator (curator) to new owner\r\n    safeTransferFrom(ownerOf(_tokenId), msg.sender, _tokenId);\r\n\r\n    // now purchased - don't allow re-purchase!\r\n    tokenIdToPurchased[_tokenId] = PurchaseState.EtherPurchase;\r\n\r\n    totalPurchaseValueInWei = totalPurchaseValueInWei.add(msg.value);\r\n    totalNumberOfPurchases = totalNumberOfPurchases.add(1);\r\n\r\n    // Only apply commission if the art work has value\r\n    if (priceInWei > 0) {\r\n      _applyCommission(_tokenId);\r\n    }\r\n\r\n    PurchasedWithEther(_tokenId, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Purchase the provide token in FIAT, management command only for taking fiat payments during KODA physical exhibitions\r\n   * Equivalent to taking the KODA token off the market and marking as sold\r\n   * @dev Reverts if token not unsold and not available to be purchased and not called by management\r\n   * @param _tokenId the KODA token ID\r\n   */\r\n  function purchaseWithFiat(uint256 _tokenId) public onlyKnownOrigin onlyUnsold(_tokenId) onlyAfterPurchaseFromTime(_tokenId) {\r\n    require(exists(_tokenId));\r\n\r\n    // now purchased - don't allow re-purchase!\r\n    tokenIdToPurchased[_tokenId] = PurchaseState.FiatPurchase;\r\n\r\n    totalNumberOfPurchases = totalNumberOfPurchases.add(1);\r\n\r\n    PurchasedWithFiat(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverse a fiat purchase made by calling purchaseWithFiat()\r\n   * @dev Reverts if token not purchased with fiat and not available to be purchased and not called by management\r\n   * @param _tokenId the KODA token ID\r\n   */\r\n  function reverseFiatPurchase(uint256 _tokenId) public onlyKnownOrigin onlyFiatPurchased(_tokenId) onlyAfterPurchaseFromTime(_tokenId) {\r\n    require(exists(_tokenId));\r\n\r\n    // reset to Unsold\r\n    tokenIdToPurchased[_tokenId] = PurchaseState.Unsold;\r\n\r\n    totalNumberOfPurchases = totalNumberOfPurchases.sub(1);\r\n\r\n    PurchasedWithFiatReversed(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for apply commission on purchase\r\n   */\r\n  function _applyCommission(uint256 _tokenId) internal {\r\n    bytes16 edition = tokenIdToEdition[_tokenId];\r\n\r\n    string memory typeCode = getTypeFromEdition(edition);\r\n\r\n    CommissionStructure memory commission = editionTypeToCommission[typeCode];\r\n\r\n    // split & transfer fee for curator\r\n    uint curatorAccountFee = msg.value / 100 * commission.curator;\r\n    curatorAccount.transfer(curatorAccountFee);\r\n\r\n    // split & transfer fee for developer\r\n    uint developerAccountFee = msg.value / 100 * commission.developer;\r\n    developerAccount.transfer(developerAccountFee);\r\n\r\n    // final payment to commission would be the remaining value\r\n    uint finalCommissionTotal = msg.value - (curatorAccountFee + developerAccountFee);\r\n\r\n    // send ether\r\n    address artistAccount = editionToArtistAccount[edition];\r\n    artistAccount.transfer(finalCommissionTotal);\r\n  }\r\n\r\n  /**\r\n   * @dev Retrieve all asset information for the provided token\r\n   * @param _tokenId the KODA token ID\r\n   * @return tokenId, owner, purchaseState, priceInWei, purchaseFromDateTime\r\n   */\r\n  function assetInfo(uint _tokenId) public view returns (\r\n    uint256 _tokId,\r\n    address _owner,\r\n    PurchaseState _purchaseState,\r\n    uint256 _priceInWei,\r\n    uint32 _purchaseFromTime\r\n  ) {\r\n    return (\r\n      _tokenId,\r\n      tokenOwner[_tokenId],\r\n      tokenIdToPurchased[_tokenId],\r\n      tokenIdToPriceInWei[_tokenId],\r\n      tokenIdToPurchaseFromTime[_tokenId]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Retrieve all edition information for the provided token\r\n   * @param _tokenId the KODA token ID\r\n   * @return tokenId, edition, editionNumber, tokenUri\r\n   */\r\n  function editionInfo(uint256 _tokenId) public view returns (\r\n    uint256 _tokId,\r\n    bytes16 _edition,\r\n    uint256 _editionNumber,\r\n    string _tokenURI,\r\n    address _artistAccount\r\n  ) {\r\n    bytes16 edition = tokenIdToEdition[_tokenId];\r\n    return (\r\n      _tokenId,\r\n      edition,\r\n      editionToEditionNumber[edition],\r\n      tokenURI(_tokenId),\r\n      editionToArtistAccount[edition]\r\n    );\r\n  }\r\n\r\n  function tokensOf(address _owner) public view returns (uint256[] _tokenIds) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Return the total number of assets in an edition\r\n   * @param _edition the edition identifier\r\n   */\r\n  function numberOf(bytes16 _edition) public view returns (uint256) {\r\n    return editionToEditionNumber[_edition];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the token purchase state for the given token\r\n   * @param _tokenId the KODA token ID\r\n   * @return the purchase sate, either 0, 1, 2, reverts if token not found\r\n   */\r\n  function isPurchased(uint256 _tokenId) public view returns (PurchaseState _purchased) {\r\n    require(exists(_tokenId));\r\n    return tokenIdToPurchased[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the edition identifier for the given token\r\n   * @param _tokenId the KODA token ID\r\n   * @return the edition is found, reverts if token not found\r\n   */\r\n  function editionOf(uint256 _tokenId) public view returns (bytes16 _edition) {\r\n    require(exists(_tokenId));\r\n    return tokenIdToEdition[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the purchase from time for the given token\r\n   * @param _tokenId the KODA token ID\r\n   * @return the purchased from time, reverts if token not found\r\n   */\r\n  function purchaseFromTime(uint256 _tokenId) public view returns (uint32 _purchaseFromTime) {\r\n    require(exists(_tokenId));\r\n    return tokenIdToPurchaseFromTime[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the price in wei for the given token\r\n   * @param _tokenId the KODA token ID\r\n   * @return the price in wei, reverts if token not found\r\n   */\r\n  function priceInWei(uint256 _tokenId) public view returns (uint256 _priceInWei) {\r\n    require(exists(_tokenId));\r\n    return tokenIdToPriceInWei[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the type for the provided edition, useful for testing purposes\r\n   * @param _edition the edition identifier\r\n   * @return the type or blank string\r\n   */\r\n  function getTypeFromEdition(bytes16 _edition) public pure returns (string) {\r\n    // return last 3 chars that represent the edition type\r\n    return Strings.bytes16ToStr(_edition, 13, 16);\r\n  }\r\n\r\n  /**\r\n   * @dev Get token URI fro the given token, useful for testing purposes\r\n   * @param _tokenId the KODA token ID\r\n   * @return the token ID or only the base URI if not found\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    return Strings.strConcat(tokenBaseURI, tokenURIs[_tokenId]);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows management to update the base tokenURI path\r\n   * @dev Reverts if not called by management\r\n   * @param _newBaseURI the new base URI to set\r\n   */\r\n  function setTokenBaseURI(string _newBaseURI) external onlyKnownOrigin {\r\n    tokenBaseURI = _newBaseURI;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows management to update the artist account (where commission is sent)\r\n   * @dev Reverts if not called by management\r\n   * @param _edition edition to adjust\r\n    * @param _artistAccount address of artist on blockchain\r\n   */\r\n  function setArtistAccount(bytes16 _edition, address _artistAccount) external onlyKnownOrigin {\r\n    require(_artistAccount != address(0));\r\n\r\n    editionToArtistAccount[_edition] = _artistAccount;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseWithFiat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_edition\",\"type\":\"bytes16\"}],\"name\":\"getTypeFromEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPurchaseValueInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isPurchased\",\"outputs\":[{\"name\":\"_purchased\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIdPointer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberOfPurchases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"editionOf\",\"outputs\":[{\"name\":\"_edition\",\"type\":\"bytes16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceSignature_ERC721Optional\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceInWei\",\"outputs\":[{\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_edition\",\"type\":\"bytes16\"},{\"name\":\"_artistAccount\",\"type\":\"address\"}],\"name\":\"setArtistAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"setPriceInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reverseFiatPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setTokenBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"assetInfo\",\"outputs\":[{\"name\":\"_tokId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_purchaseState\",\"type\":\"uint8\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_purchaseFromTime\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"editionInfo\",\"outputs\":[{\"name\":\"_tokId\",\"type\":\"uint256\"},{\"name\":\"_edition\",\"type\":\"bytes16\"},{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_artistAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"getCommissionForType\",\"outputs\":[{\"name\":\"_curator\",\"type\":\"uint8\"},{\"name\":\"_developer\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_curator\",\"type\":\"uint8\"},{\"name\":\"_developer\",\"type\":\"uint8\"}],\"name\":\"updateCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curatorAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_edition\",\"type\":\"bytes16\"}],\"name\":\"numberOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_edition\",\"type\":\"bytes16\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_auctionStartDate\",\"type\":\"uint32\"},{\"name\":\"_artistAccount\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseFromTime\",\"outputs\":[{\"name\":\"_purchaseFromTime\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseWithEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_curatorAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"PurchasedWithEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"PurchasedWithFiat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"PurchasedWithFiatReversed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]", "ContractName": "KnownOriginDigitalAsset", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005bfff3cb3231cf81487e80358b644f1a670fd98b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4c1964d9912e723f1aa7123939f8f4cddb97095a442d81d24167dadbf6641ec5"}