{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\ncontract RandomNumberGenerator {\r\n    uint256 private constant MAX_NUMBER = 10000;\r\n    uint256 private seed;\r\n    address private deployer;\r\n    struct RandomNumberData {\r\n        uint256 randomNumber;\r\n        uint256 timestamp;\r\n    }\r\n    RandomNumberData[] private randomNumberHistory;\r\n    event NewRandomNumber(uint256 randomNumber, uint256 timestamp);\r\n\r\n    constructor() {\r\n        // Set the seed to a combination of the block timestamp2 and the address of the last miner 1\r\n        seed = uint256(\r\n            keccak256(abi.encodePacked(block.timestamp, block.coinbase))\r\n        );\r\n        // Set the deployer as the contract creator\r\n        deployer = msg.sender;\r\n    }\r\n\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployer, \"Caller is not the deployer\");\r\n        _;\r\n    }\r\n\r\n    function generateRandomNumber() public onlyDeployer {\r\n        // Generate the random number between 1 and MAX_NUMBER\r\n        uint256 randomNumber = (uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp,\r\n                    block.difficulty,\r\n                    msg.sender,\r\n                    seed\r\n                )\r\n            )\r\n        ) % MAX_NUMBER) + 1;\r\n        // Update the seed for the next random number generation\r\n        seed = randomNumber;\r\n        // Create a new RandomNumberData struct\r\n        RandomNumberData memory data = RandomNumberData(\r\n            randomNumber,\r\n            block.timestamp\r\n        );\r\n        // Add the new random number data to the history\r\n        randomNumberHistory.push(data);\r\n        // Emit the event with the new random number and timestamp\r\n        emit NewRandomNumber(randomNumber, block.timestamp);\r\n    }\r\n\r\n    function getHistory() public view returns (RandomNumberData[] memory) {\r\n        return randomNumberHistory;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewRandomNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"generateRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RandomNumberGenerator.RandomNumberData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RandomNumberGenerator", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab0d223f918b79f1508efee14a5a011b0866abaf2d7f4d19130ba6a0156e4825"}