{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                set._values[toDeleteIndex] = lastValue;\\n                set._indexes[lastValue] = valueIndex;\\n            }\\n\\n            delete set._values[lastIndex];\\n            set._values.pop();\\n\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    //======== Bytes32Set ========\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(Bytes32Set storage set)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    //======== AddressSet ========\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function values(AddressSet storage set)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    //======== UintSet ========\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) public returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function values(UintSet storage set)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FilesRepo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./RulesParser.sol\\\";\\n\\nlibrary FilesRepo {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    enum StateOfFile {\\n        ZeroPoint,  // 0\\n        Created,    // 1\\n        Circulated, // 2\\n        Proposed,   // 3\\n        Approved,   // 4\\n        Rejected,   // 5\\n        Closed,     // 6\\n        Revoked     // 7\\n    }\\n\\n    struct Head {\\n        uint48 circulateDate;\\n        uint8 signingDays;\\n        uint8 closingDays;\\n        uint16 seqOfVR;\\n        uint8 frExecDays;\\n        uint8 dtExecDays;\\n        uint8 dtConfirmDays;\\n        uint48 proposeDate;\\n        uint8 invExitDays;\\n        uint8 votePrepareDays;\\n        uint8 votingDays;\\n        uint8 execDaysForPutOpt;\\n        uint64 seqOfMotion;\\n        uint8 state;\\n    }\\n\\n    struct Ref {\\n        bytes32 docUrl;\\n        bytes32 docHash;\\n    }\\n\\n    struct File {\\n        bytes32 snOfDoc;\\n        Head head;\\n        Ref ref;\\n    }\\n\\n    struct Repo {\\n        mapping(address => File) files;\\n        EnumerableSet.AddressSet filesList;\\n    }\\n\\n    //####################\\n    //##    modifier    ##\\n    //####################\\n\\n    modifier onlyRegistered(Repo storage repo, address body) {\\n        require(repo.filesList.contains(body),\\n            \\\"FR.md.OR: doc NOT registered\\\");\\n        _;\\n    }\\n\\n    //##################\\n    //##  Write I/O   ##\\n    //##################\\n\\n    function regFile(Repo storage repo, bytes32 snOfDoc, address body) \\n        public returns (bool flag)\\n    {\\n        if (repo.filesList.add(body)) {\\n\\n            File storage file = repo.files[body];\\n            \\n            file.snOfDoc = snOfDoc;\\n            file.head.state = uint8(StateOfFile.Created);\\n            flag = true;\\n        }\\n    }\\n\\n    function circulateFile(\\n        Repo storage repo,\\n        address body,\\n        uint16 signingDays,\\n        uint16 closingDays,\\n        RulesParser.VotingRule memory vr,\\n        bytes32 docUrl,\\n        bytes32 docHash\\n    ) public onlyRegistered(repo, body) returns (Head memory head){\\n\\n        require(\\n            repo.files[body].head.state == uint8(StateOfFile.Created),\\n            \\\"FR.CF: Doc not pending\\\"\\n        );\\n\\n        head = Head({\\n            circulateDate: uint48(block.timestamp),\\n            signingDays: uint8(signingDays),\\n            closingDays: uint8(closingDays),\\n            seqOfVR: vr.seqOfRule,\\n            frExecDays: vr.frExecDays,\\n            dtExecDays: vr.dtExecDays,\\n            dtConfirmDays: vr.dtConfirmDays,\\n            proposeDate: 0,\\n            invExitDays: vr.invExitDays,\\n            votePrepareDays: vr.votePrepareDays,\\n            votingDays: vr.votingDays,\\n            execDaysForPutOpt: vr.execDaysForPutOpt,\\n            seqOfMotion: 0,\\n            state: uint8(StateOfFile.Circulated)\\n        });\\n\\n        require(head.signingDays > 0, \\\"FR.CF: zero signingDays\\\");\\n\\n        require(head.closingDays >= signingDays + vr.frExecDays + vr.dtExecDays + vr.dtConfirmDays + \\n                vr.invExitDays + vr.votePrepareDays + vr.votingDays,\\n            \\\"FR.CF: insufficient closingDays\\\");\\n\\n        File storage file = repo.files[body];\\n\\n        file.head = head;\\n\\n        if (docUrl != bytes32(0) || docHash != bytes32(0)){\\n            file.ref = Ref({\\n                docUrl: docUrl,\\n                docHash: docHash\\n            });   \\n        }\\n        return file.head;\\n    }\\n\\n    function proposeFile(\\n        Repo storage repo,\\n        address body,\\n        uint64 seqOfMotion\\n    ) public onlyRegistered(repo, body) returns(Head memory){\\n\\n        require(repo.files[body].head.state == uint8(StateOfFile.Circulated),\\n            \\\"FR.PF: Doc not circulated\\\");\\n\\n        uint48 timestamp = uint48(block.timestamp);\\n\\n        require(timestamp >= dtExecDeadline(repo, body), \\n            \\\"FR.proposeFile: still in dtExecPeriod\\\");\\n\\n        File storage file = repo.files[body];\\n\\n        require(timestamp < terminateStartpoint(repo, body) || (file.head.frExecDays\\n             + file.head.dtExecDays + file.head.dtConfirmDays) == 0, \\n            \\\"FR.proposeFile: missed proposeDeadline\\\");\\n\\n        file.head.proposeDate = timestamp;\\n        file.head.seqOfMotion = seqOfMotion;\\n        file.head.state = uint8(StateOfFile.Proposed);\\n\\n        return file.head;\\n    }\\n\\n    function voteCountingForFile(\\n        Repo storage repo,\\n        address body,\\n        bool approved\\n    ) public onlyRegistered(repo, body) {\\n\\n        require(repo.files[body].head.state == uint8(StateOfFile.Proposed),\\n            \\\"FR.VCFF: Doc not proposed\\\");\\n\\n        uint48 timestamp = uint48(block.timestamp);\\n\\n        require(timestamp >= votingDeadline(repo, body), \\n            \\\"FR.voteCounting: still in votingPeriod\\\");\\n\\n        File storage file = repo.files[body];\\n\\n        file.head.state = approved ? \\n            uint8(StateOfFile.Approved) : uint8(StateOfFile.Rejected);\\n    }\\n\\n    function execFile(\\n        Repo storage repo,\\n        address body\\n    ) public onlyRegistered(repo, body) {\\n\\n        File storage file = repo.files[body];\\n\\n        require(file.head.state == uint8(StateOfFile.Approved),\\n            \\\"FR.EF: Doc not approved\\\");\\n\\n        uint48 timestamp = uint48(block.timestamp);\\n\\n        require(timestamp < closingDeadline(repo, body), \\n            \\\"FR.EF: missed closingDeadline\\\");\\n\\n        file.head.state = uint8(StateOfFile.Closed);\\n    }\\n\\n    function terminateFile(\\n        Repo storage repo,\\n        address body\\n    ) public onlyRegistered(repo, body) {\\n\\n        File storage file = repo.files[body];\\n\\n        require(file.head.state != uint8(StateOfFile.Closed),\\n            \\\"FR.terminateFile: Doc is closed\\\");\\n\\n        file.head.state = uint8(StateOfFile.Revoked);\\n    }\\n\\n    function setStateOfFile(Repo storage repo, address body, uint state) \\n        public onlyRegistered(repo, body)\\n    {\\n        repo.files[body].head.state = uint8(state);\\n    }\\n\\n    //##################\\n    //##   read I/O   ##\\n    //##################\\n\\n    function signingDeadline(Repo storage repo, address body) \\n        public view returns (uint48) {\\n        \\n        File storage file = repo.files[body];\\n        \\n        return file.head.circulateDate + uint48(file.head.signingDays) * 86400;\\n    }\\n\\n    function closingDeadline(Repo storage repo, address body) \\n        public view returns (uint48) {\\n        \\n        File storage file = repo.files[body];\\n        \\n        return file.head.circulateDate + uint48(file.head.closingDays) * 86400;\\n    }\\n\\n    function frExecDeadline(Repo storage repo, address body) \\n        public view returns (uint48) {\\n        \\n        File storage file = repo.files[body];\\n        \\n        return file.head.circulateDate + uint48(file.head.signingDays + \\n            file.head.frExecDays) * 86400;\\n    }\\n\\n    function dtExecDeadline(Repo storage repo, address body) \\n        public view returns (uint48) {\\n        \\n        File storage file = repo.files[body];\\n        \\n        return file.head.circulateDate + uint48(file.head.signingDays + \\n            file.head.frExecDays + file.head.dtExecDays) * 86400;\\n    }\\n\\n    function terminateStartpoint(Repo storage repo, address body) \\n        public view returns (uint48) {\\n        \\n        File storage file = repo.files[body];\\n        \\n        return file.head.circulateDate + (uint48(file.head.signingDays + \\n            file.head.frExecDays + file.head.dtExecDays + file.head.dtConfirmDays)) * 86400;\\n    }\\n\\n    function votingDeadline(Repo storage repo, address body) \\n        public view returns (uint48) {\\n        \\n        File storage file = repo.files[body];\\n        \\n        return file.head.proposeDate + (uint48(file.head.invExitDays + \\n            file.head.votePrepareDays + file.head.votingDays)) * 86400;\\n    }    \\n\\n    function isRegistered(Repo storage repo, address body) public view returns (bool) {\\n        return repo.filesList.contains(body);\\n    }\\n\\n    function qtyOfFiles(Repo storage repo) public view returns (uint256) {\\n        return repo.filesList.length();\\n    }\\n\\n    function getFilesList(Repo storage repo) public view returns (address[] memory) {\\n        return repo.filesList.values();\\n    }\\n\\n    function getFile(Repo storage repo, address body) public view returns (File memory) {\\n        return repo.files[body];\\n    }\\n\\n    function getHeadOfFile(Repo storage repo, address body)\\n        public view onlyRegistered(repo, body) returns (Head memory)\\n    {\\n        return repo.files[body].head;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/RulesParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nlibrary RulesParser {\\n\\n    // ======== GovernanceRule ========\\n\\n    // bytes32 public constant SHA_INIT_GR = \\n    //     bytes32(uint(0x0000000000000000010000000000000000000000000000000000000000000000));\\n\\n    struct GovernanceRule {\\n        uint32 fundApprovalThreshold; \\n        bool basedOnPar;\\n        uint16 proposeWeightRatioOfGM; \\n        uint16 proposeHeadRatioOfMembers; \\n        uint16 proposeHeadRatioOfDirectorsInGM;\\n        uint16 proposeHeadRatioOfDirectorsInBoard;\\n        uint16 maxQtyOfMembers;\\n        uint16 quorumOfGM;  \\n        uint8 maxNumOfDirectors;\\n        uint16 tenureMonOfBoard;\\n        uint16 quorumOfBoardMeeting;\\n        uint48 establishedDate;    \\n        uint8 businessTermInYears;\\n        uint8 typeOfComp;\\n        uint16 minVoteRatioOnChain;\\n    }\\n\\n    function governanceRuleParser(bytes32 sn) public pure returns (GovernanceRule memory rule) {\\n        uint _sn = uint(sn);\\n\\n        rule = GovernanceRule({\\n            fundApprovalThreshold: uint32(_sn >> 224),\\n            basedOnPar: uint8(_sn >> 216) == 1,\\n            proposeWeightRatioOfGM: uint16(_sn >> 200),\\n            proposeHeadRatioOfMembers: uint16(_sn >> 184),\\n            proposeHeadRatioOfDirectorsInGM: uint16(_sn >> 168),\\n            proposeHeadRatioOfDirectorsInBoard: uint16(_sn >> 152),\\n            maxQtyOfMembers: uint16(_sn >> 136),\\n            quorumOfGM: uint16(_sn >> 120),\\n            maxNumOfDirectors: uint8(_sn >> 112),\\n            tenureMonOfBoard: uint16(_sn >> 96),\\n            quorumOfBoardMeeting: uint16(_sn >> 80),\\n            establishedDate: uint48(_sn >> 32),\\n            businessTermInYears: uint8(_sn >> 24),\\n            typeOfComp: uint8(_sn >> 16),\\n            minVoteRatioOnChain: uint16(_sn)\\n        });\\n    }\\n\\n    // ---- VotingRule ----\\n\\n    // bytes32 public constant SHA_INIT_VR = \\n    //     bytes32(uint(0x00080c080100001a0b0000010000000000000100000000000000000000000000));\\n\\n    struct VotingRule{\\n        uint16 seqOfRule;\\n        uint8 qtyOfSubRule;\\n        uint8 seqOfSubRule;\\n        uint8 authority;\\n        uint16 headRatio;\\n        uint16 amountRatio;\\n        bool onlyAttendance;\\n        bool impliedConsent;\\n        bool partyAsConsent;\\n        bool againstShallBuy;\\n        uint8 frExecDays;\\n        uint8 dtExecDays;\\n        uint8 dtConfirmDays;\\n        uint8 invExitDays;\\n        uint8 votePrepareDays;\\n        uint8 votingDays;\\n        uint8 execDaysForPutOpt;\\n        uint40[2] vetoers;\\n        uint16 para;\\n    }\\n\\n    function votingRuleParser(bytes32 sn) public pure returns (VotingRule memory rule) {\\n        uint _sn = uint(sn);\\n\\n        rule = VotingRule({\\n            seqOfRule: uint16(_sn >> 240),\\n            qtyOfSubRule: uint8(_sn >> 232),\\n            seqOfSubRule: uint8(_sn >> 224),\\n            authority: uint8(_sn >> 216),\\n            headRatio: uint16(_sn >> 200),\\n            amountRatio: uint16(_sn >> 184),\\n            onlyAttendance: uint8(_sn >> 176) == 1,\\n            impliedConsent: uint8(_sn >> 168) == 1,\\n            partyAsConsent: uint8(_sn >> 160) == 1,\\n            againstShallBuy: uint8(_sn >> 152) == 1,\\n            frExecDays: uint8(_sn >> 144),\\n            dtExecDays: uint8(_sn >> 136),\\n            dtConfirmDays: uint8(_sn >> 128),\\n            invExitDays: uint8(_sn >> 120),\\n            votePrepareDays: uint8(_sn >> 112),\\n            votingDays: uint8(_sn >> 104),\\n            execDaysForPutOpt: uint8(_sn >> 96),\\n            vetoers: [uint40(_sn >> 56), uint40(_sn >> 16)],\\n            para: uint16(_sn)            \\n        });\\n    }\\n\\n    // ---- BoardSeatsRule ----\\n\\n/*\\n    1: Chairman;\\n    2: ViceChairman;\\n    3: Director;\\n    ...\\n*/\\n\\n    struct PositionAllocateRule {\\n        uint16 seqOfRule;\\n        uint8 qtyOfSubRule;\\n        uint8 seqOfSubRule; \\n        bool removePos; \\n        uint16 seqOfPos;\\n        uint16 titleOfPos;  \\n        uint40 nominator;   \\n        uint16 titleOfNominator;    \\n        uint16 seqOfVR; \\n        uint48 endDate;\\n        uint16 para;    \\n        uint16 argu;\\n        uint32 data;\\n    }\\n\\n    function positionAllocateRuleParser(bytes32 sn) public pure returns(PositionAllocateRule memory rule) {\\n        uint _sn = uint(sn);\\n\\n        rule = PositionAllocateRule({\\n            seqOfRule: uint16(_sn >> 240), \\n            qtyOfSubRule: uint8(_sn >> 232),\\n            seqOfSubRule: uint8(_sn >> 224), \\n            removePos: uint8(_sn >> 216) == 1,\\n            seqOfPos: uint16(_sn >> 200),\\n            titleOfPos: uint16(_sn >> 184),  \\n            nominator: uint40(_sn >> 144),   \\n            titleOfNominator: uint16(_sn >> 128),    \\n            seqOfVR: uint16(_sn >> 112), \\n            endDate: uint48(_sn >> 64),\\n            para: uint16(_sn >> 48),    \\n            argu: uint16(_sn >> 32),\\n            data: uint32(_sn)\\n        });\\n\\n    }\\n\\n    // ---- FirstRefusal Rule ----\\n\\n    struct FirstRefusalRule {\\n        uint16 seqOfRule;\\n        uint8 qtyOfSubRule;\\n        uint8 seqOfSubRule;\\n        uint8 typeOfDeal;\\n        bool membersEqual;\\n        bool proRata;\\n        bool basedOnPar;\\n        uint40[4] rightholders;\\n        uint16 para;\\n        uint16 argu;        \\n    }\\n\\n    function firstRefusalRuleParser(bytes32 sn) public pure returns(FirstRefusalRule memory rule) {\\n        uint _sn = uint(sn);\\n\\n        rule = FirstRefusalRule({\\n            seqOfRule: uint16(_sn >> 240),\\n            qtyOfSubRule: uint8(_sn >> 232),\\n            seqOfSubRule: uint8(_sn >> 224),\\n            typeOfDeal: uint8(_sn >> 216),\\n            membersEqual: uint8(_sn >> 208) == 1,\\n            proRata: uint8(_sn >> 200) == 1,\\n            basedOnPar: uint8(_sn >> 192) == 1,\\n            rightholders: [uint40(_sn >> 152), uint40(_sn >> 112), uint40(_sn >> 72), uint40(_sn >> 32)],\\n            para: uint16(_sn >> 16),\\n            argu: uint16(_sn)                    \\n        });\\n    }\\n\\n    // ---- GroupUpdateOrder ----\\n\\n    struct GroupUpdateOrder {\\n        uint16 seqOfRule;\\n        uint8 qtyOfSubRule;\\n        uint8 seqOfSubRule;\\n        bool addMember;\\n        uint40 groupRep;\\n        uint40[4] members;\\n        uint16 para;        \\n    }\\n\\n    function groupUpdateOrderParser(bytes32 sn) public pure returns(GroupUpdateOrder memory order) {\\n        uint _sn = uint(sn);\\n        \\n        order = GroupUpdateOrder({\\n            seqOfRule: uint16(_sn >> 240),\\n            qtyOfSubRule: uint8(_sn >> 232),\\n            seqOfSubRule: uint8(_sn >> 224),\\n            addMember: uint8(_sn >> 216) == 1,\\n            groupRep: uint40(_sn >> 176),\\n            members: [\\n                uint40(_sn >> 136),\\n                uint40(_sn >> 96),\\n                uint40(_sn >> 56),\\n                uint40(_sn >> 16)\\n            ],\\n            para: uint16(_sn)\\n        });\\n    }    \\n\\n    // ---- ListingRule ----\\n\\n    struct ListingRule {\\n        uint16 seqOfRule;\\n        uint16 titleOfIssuer;\\n        uint16 classOfShare;\\n        uint64 maxTotalPar;\\n        uint16 titleOfVerifier;\\n        uint16 maxQtyOfInvestors;\\n        uint32 ceilingPrice;\\n        uint32 floorPrice;\\n        uint16 lockupDays;\\n        uint16 offPrice;\\n        uint16 votingWeight;\\n    }\\n\\n    function listingRuleParser(bytes32 sn) public pure returns(ListingRule memory rule) {\\n        uint _sn = uint(sn);\\n        \\n        rule = ListingRule({\\n            seqOfRule: uint16(_sn >> 240),\\n            titleOfIssuer: uint16(_sn >> 224),\\n            classOfShare: uint16(_sn >> 208),\\n            maxTotalPar: uint64(_sn >> 144),\\n            titleOfVerifier: uint16(_sn >> 128), \\n            maxQtyOfInvestors: uint16(_sn >> 112),\\n            ceilingPrice: uint32(_sn >> 80),\\n            floorPrice: uint32(_sn >> 48),\\n            lockupDays: uint16(_sn >> 32),\\n            offPrice: uint16(_sn >> 16),\\n            votingWeight: uint16(_sn)\\n        });\\n    }    \\n\\n    // ======== LinkRule ========\\n\\n    struct LinkRule {\\n        uint48 triggerDate;\\n        uint16 effectiveDays;\\n        uint8 triggerType;  \\n        uint16 shareRatioThreshold;\\n        uint32 rate;\\n        bool proRata;\\n        uint16 seq;\\n        uint16 para;\\n        uint16 argu;\\n        uint16 ref;\\n        uint64 data;\\n    }\\n\\n    function linkRuleParser(bytes32 sn) public pure returns (LinkRule memory rule) {\\n        uint _sn = uint(sn);\\n\\n        rule = LinkRule({\\n            triggerDate: uint48(_sn >> 208),\\n            effectiveDays: uint16(_sn >> 192),\\n            triggerType: uint8(_sn >> 184),  \\n            shareRatioThreshold: uint16(_sn >> 168),\\n            rate: uint32(_sn >> 136),\\n            proRata: uint8(_sn >> 128) == 1,\\n            seq: uint16(_sn >> 112),\\n            para: uint16(_sn >> 96),\\n            argu: uint16(_sn >> 80),\\n            ref: uint16(_sn >> 64),\\n            data: uint64(_sn)\\n        });\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/EnumerableSet.sol\": {\r\n        \"EnumerableSet\": \"0xc4f24b69792ff96f0316fab2d7df198af8033930\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[]", "ContractName": "FilesRepo", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}