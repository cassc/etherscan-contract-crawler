{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n\r\ncontract ExchangePool{\r\n    using SafeMath for uint256;\r\n\r\n    address public manager;\r\n    uint256 public receivedAProportion = 10;\r\n    uint256 public receivedBProportion = 10;\r\n\r\n    constructor(address _manager) {\r\n        manager = _manager;\r\n    }\r\n\r\n    function addLiquidity() public {\r\n        address tokenA = Manager(manager).tokenA();\r\n        IERC20 superToken = IERC20(tokenA);\r\n        uint256 balance = superToken.balanceOf(address(this));\r\n        if(balance == 0){\r\n            return;\r\n        }\r\n        uint256 toReceiverA = balance.mul(receivedAProportion).div(100);\r\n        uint256 toReceiverB = balance.mul(receivedBProportion).div(100);\r\n        uint256 toSwap = (balance.sub(toReceiverA).sub(toReceiverB)).div(2);\r\n        superToken.transfer(Manager(manager).receiverA(),toReceiverA);\r\n        superToken.transfer(Manager(manager).receiverB(),toReceiverB);\r\n\r\n        address tokenB = Manager(manager).tokenB();\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        UniswapRouterV2(Manager(manager).uniswapRouterV2()).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            toSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n        UniswapRouterV2(Manager(manager).uniswapRouterV2()).addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            superToken.balanceOf(address(this)),\r\n            IERC20(tokenB).balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n\r\n    function setReceivedAProportion(uint256 _receivedProportion) public onlyOwner returns (bool){\r\n        require(receivedBProportion.add(_receivedProportion) <= 100,\"ExPool: receivedAProportion is too large\");\r\n        receivedAProportion = _receivedProportion;\r\n        return true;\r\n    }\r\n\r\n    function setReceivedBProportion(uint256 _receivedProportion) public onlyOwner returns (bool) {\r\n        require(receivedAProportion.add(_receivedProportion) <= 100,\"ExPool: receivedBProportion is too large\");\r\n        receivedBProportion = _receivedProportion;\r\n        return true;\r\n    }\r\n\r\n    function toApprove() public onlyOwner returns (bool){\r\n        if(IERC20(Manager(manager).tokenA()).allowance(address(this),Manager(manager).uniswapRouterV2()) == 0){\r\n            IERC20(Manager(manager).tokenA()).approve(Manager(manager).uniswapRouterV2(),2**256-1);\r\n        }\r\n        if(IERC20(Manager(manager).tokenB()).allowance(address(this),Manager(manager).uniswapRouterV2()) == 0){\r\n            IERC20(Manager(manager).tokenB()).approve(Manager(manager).uniswapRouterV2(),2**256-1);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function move(address _token,uint256 _amount,address _account) public onlyOwner {\r\n        IERC20 erc = IERC20(_token);\r\n        erc.transfer(_account,_amount);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == Manager(manager).owner(),\"ExchangePool: address is not owner\");\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\ninterface Manager {\r\n    function uniswapRouterV2() external view returns(address);\r\n    function tokenB() external view returns(address);\r\n    function iUniswapV2Factory() external view returns(address);\r\n    function owner() external view returns(address);\r\n    function tokenA() external view returns(address);\r\n    function lpToken() external view returns(address);\r\n    function vault() external view returns(address);\r\n    function stPool() external view returns(address);\r\n    function exPool() external view returns(address);\r\n    function pair() external view returns(address);\r\n    function receiverA() external view returns(address);\r\n    function receiverB() external view returns(address);\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface UniswapRouterV2 {\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function factory() view external returns(address);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivedAProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivedBProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedProportion\",\"type\":\"uint256\"}],\"name\":\"setReceivedAProportion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedProportion\",\"type\":\"uint256\"}],\"name\":\"setReceivedBProportion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExchangePool", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d58c7e6c942e252a0ad31ea00f02d1bdf9bcc47d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5c71da26b4e67243a4198484241cb1d4374a12a7417e9215b4bfb1705b758040"}