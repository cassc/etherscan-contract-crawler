{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/gateways/FxGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IFxMarket } from \\\"../interfaces/f(x)/IFxMarket.sol\\\";\\nimport { ITokenConverter } from \\\"../helpers/converter/ITokenConverter.sol\\\";\\n\\n// solhint-disable contract-name-camelcase\\n\\ncontract FxGateway is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @notice The address of base token.\\n  address public immutable baseToken;\\n\\n  /// @notice The address of Fractional Token.\\n  address public immutable fToken;\\n\\n  /// @notice The address of Leveraged Token.\\n  address public immutable xToken;\\n\\n  /// @notice The address of Market.\\n  address public immutable market;\\n\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  struct ZapInCall {\\n    address src;\\n    uint256 amount;\\n    address target;\\n    bytes data;\\n  }\\n\\n  struct ZapOutCall {\\n    address converter;\\n    uint256[] routes;\\n  }\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The list of approved target contracts.\\n  mapping(address => bool) public approvedTargets;\\n\\n  /************\\n   * Modifier *\\n   ************/\\n\\n  modifier zapInToken(ZapInCall memory _call) {\\n    require(approvedTargets[_call.target], \\\"target not approved\\\");\\n    _transferTokenIn(_call.src, _call.amount);\\n\\n    bool _success;\\n    if (_call.src == address(0)) {\\n      (_success, ) = _call.target.call{ value: _call.amount }(_call.data);\\n    } else {\\n      IERC20(_call.src).safeApprove(_call.target, 0);\\n      IERC20(_call.src).safeApprove(_call.target, _call.amount);\\n      (_success, ) = _call.target.call(_call.data);\\n    }\\n\\n    // below lines will propagate inner error up\\n    if (!_success) {\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        let ptr := mload(0x40)\\n        let size := returndatasize()\\n        returndatacopy(ptr, 0, size)\\n        revert(ptr, size)\\n      }\\n    }\\n\\n    _;\\n  }\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(\\n    address _market,\\n    address _baseToken,\\n    address _fToken,\\n    address _xToken\\n  ) {\\n    baseToken = _baseToken;\\n    fToken = _fToken;\\n    xToken = _xToken;\\n    market = _market;\\n\\n    IERC20(_baseToken).safeApprove(_market, uint256(-1));\\n    IERC20(_fToken).safeApprove(_market, uint256(-1));\\n    IERC20(_xToken).safeApprove(_market, uint256(-1));\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint some fToken with some ETH.\\n  /// @param _minFTokenMinted The minimum amount of fToken should be received.\\n  /// @return _fTokenMinted The amount of fToken received.\\n  function mintFToken(ZapInCall memory _call, uint256 _minFTokenMinted)\\n    external\\n    payable\\n    zapInToken(_call)\\n    returns (uint256 _fTokenMinted)\\n  {\\n    uint256 _amount = IERC20(baseToken).balanceOf(address(this));\\n    _fTokenMinted = IFxMarket(market).mintFToken(_amount, msg.sender, _minFTokenMinted);\\n\\n    _refund(baseToken, msg.sender);\\n  }\\n\\n  /// @notice Mint some xToken with some ETH.\\n  /// @param _minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return _xTokenMinted The amount of xToken received.\\n  /// @return _bonus The amount of bonus base token received.\\n  function mintXToken(ZapInCall memory _call, uint256 _minXTokenMinted)\\n    external\\n    payable\\n    zapInToken(_call)\\n    returns (uint256 _xTokenMinted, uint256 _bonus)\\n  {\\n    uint256 _amount = IERC20(baseToken).balanceOf(address(this));\\n    (_xTokenMinted, _bonus) = IFxMarket(market).mintXToken(_amount, msg.sender, _minXTokenMinted);\\n\\n    _refund(baseToken, msg.sender);\\n  }\\n\\n  /// @notice Mint some xToken by add some ETH as collateral.\\n  /// @param _minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return _xTokenMinted The amount of xToken received.\\n  function addBaseToken(ZapInCall memory _call, uint256 _minXTokenMinted)\\n    external\\n    payable\\n    zapInToken(_call)\\n    returns (uint256 _xTokenMinted)\\n  {\\n    uint256 _amount = IERC20(baseToken).balanceOf(address(this));\\n    _xTokenMinted = IFxMarket(market).addBaseToken(_amount, msg.sender, _minXTokenMinted);\\n\\n    _refund(baseToken, msg.sender);\\n  }\\n\\n  /// @notice Redeem and convert to some other token.\\n  /// @param _fTokenIn the amount of fToken to redeem, use `uint256(-1)` to redeem all fToken.\\n  /// @param _xTokenIn the amount of xToken to redeem, use `uint256(-1)` to redeem all xToken.\\n  /// @param _minBaseToken The minimum amount of base token should be received.\\n  /// @param _minDstToken The minimum amount of dst token should be received.\\n  /// @return _baseOut The amount of base token received.\\n  /// @return _dstOut The amount of dst token received.\\n  /// @return _bonus The amount of bonus base token received.\\n  function redeem(\\n    ZapOutCall memory _call,\\n    uint256 _fTokenIn,\\n    uint256 _xTokenIn,\\n    uint256 _minBaseToken,\\n    uint256 _minDstToken\\n  )\\n    external\\n    returns (\\n      uint256 _baseOut,\\n      uint256 _dstOut,\\n      uint256 _bonus\\n    )\\n  {\\n    require(_call.routes.length > 0, \\\"no routes\\\");\\n\\n    if (_xTokenIn == 0) {\\n      _fTokenIn = _transferTokenIn(fToken, _fTokenIn);\\n    } else {\\n      _xTokenIn = _transferTokenIn(xToken, _xTokenIn);\\n      _fTokenIn = 0;\\n    }\\n\\n    (_baseOut, _bonus) = IFxMarket(market).redeem(_fTokenIn, _xTokenIn, address(this), _minBaseToken);\\n    require(_baseOut >= _minBaseToken, \\\"insufficient base token\\\");\\n\\n    _dstOut = _baseOut;\\n    IERC20(baseToken).safeTransfer(_call.converter, _baseOut);\\n    for (uint256 i = 0; i < _call.routes.length; i++) {\\n      address _recipient = i == _call.routes.length - 1 ? msg.sender : _call.converter;\\n      _dstOut = ITokenConverter(_call.converter).convert(_call.routes[i], _dstOut, _recipient);\\n    }\\n    require(_dstOut >= _minDstToken, \\\"insufficient dst token\\\");\\n\\n    if (_fTokenIn > 0) {\\n      _refund(fToken, msg.sender);\\n    }\\n    if (_xTokenIn > 0) {\\n      _refund(xToken, msg.sender);\\n    }\\n    if (_bonus > 0) {\\n      _refund(baseToken, msg.sender);\\n    }\\n  }\\n\\n  /// @notice Swap between fToken and xToken\\n  /// @param _amountIn The amount of input token.\\n  /// @param _fTokenForXToken Whether swap fToken for xToken.\\n  /// @param _minOut The minimum amount of token should be received.\\n  /// @return _amountOut The amount of token received.\\n  /// @return _bonus The amount of bonus token received.\\n  function swap(\\n    uint256 _amountIn,\\n    bool _fTokenForXToken,\\n    uint256 _minOut\\n  ) external returns (uint256 _amountOut, uint256 _bonus) {\\n    if (_fTokenForXToken) {\\n      _amountIn = _transferTokenIn(fToken, _amountIn);\\n      (uint256 _baseOut, uint256 _redeemBonus) = IFxMarket(market).redeem(_amountIn, 0, address(this), 0);\\n      _bonus = _redeemBonus;\\n      (_amountOut, _redeemBonus) = IFxMarket(market).mintXToken(_baseOut, msg.sender, 0);\\n      _bonus += _redeemBonus;\\n      _refund(fToken, msg.sender);\\n    } else {\\n      _amountIn = _transferTokenIn(xToken, _amountIn);\\n      (uint256 _baseOut, uint256 _redeemBonus) = IFxMarket(market).redeem(0, _amountIn, address(this), 0);\\n      _bonus = _redeemBonus;\\n      _amountOut = IFxMarket(market).mintFToken(_baseOut, msg.sender, 0);\\n      _refund(xToken, msg.sender);\\n    }\\n    require(_amountOut >= _minOut, \\\"insufficient output\\\");\\n\\n    _refund(baseToken, msg.sender);\\n  }\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /************************\\n   * Restricted Functions *\\n   ************************/\\n\\n  /// @notice Update the status of a target contract.\\n  /// @param _target The address of target contract.\\n  /// @param _status The status to update.\\n  function updateTargetStatus(address _target, bool _status) external onlyOwner {\\n    approvedTargets[_target] = _status;\\n  }\\n\\n  /// @notice Emergency function\\n  function execute(\\n    address _to,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external payable onlyOwner returns (bool, bytes memory) {\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n    return (success, result);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to transfer token to this contract.\\n  /// @param _token The address of token to transfer.\\n  /// @param _amount The amount of token to transfer.\\n  /// @return uint256 The amount of token transfered.\\n  function _transferTokenIn(address _token, uint256 _amount) internal returns (uint256) {\\n    if (_token == address(0)) {\\n      require(msg.value == _amount, \\\"msg.value mismatch\\\");\\n      return _amount;\\n    }\\n\\n    if (_amount == uint256(-1)) {\\n      _amount = IERC20(_token).balanceOf(msg.sender);\\n    }\\n\\n    if (_amount > 0) {\\n      IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    return _amount;\\n  }\\n\\n  /// @dev Internal function to refund extra token.\\n  /// @param _token The address of token to refund.\\n  /// @param _recipient The address of the token receiver.\\n  function _refund(address _token, address _recipient) internal {\\n    uint256 _balance = IERC20(_token).balanceOf(address(this));\\n\\n    IERC20(_token).safeTransfer(_recipient, _balance);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ITokenConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface ITokenConverter {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of Converter Registry.\\n  function registry() external view returns (address);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Query the output token amount according to the encoding.\\n  ///\\n  /// @dev See the comments in `convert` for the meaning of encoding.\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param amountOut The amount of output token received.\\n  function queryConvert(uint256 encoding, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Convert input token to output token according to the encoding.\\n  /// Assuming that the input token is already in the contract.\\n  ///\\n  /// @dev encoding for single route\\n  /// |   8 bits  | 2 bits |  246 bits  |\\n  /// | pool_type | action | customized |\\n  ///\\n  /// + pool_type = 0: UniswapV2, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | 1 bit | ... |\\n  ///                | pool address | fee_num | zero_for_one | twamm | ... |\\n  /// + pool_type = 1: UniswapV3, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | ... |\\n  ///                | pool address | fee_num | zero_for_one | ... |\\n  /// + pool_type = 2: BalancerV1, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 3: BalancerV2, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 4: CurvePlainPool or CurveFactoryPlainPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 5: CurveAPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 6: CurveYPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 7: CurveMetaPool or CurveFactoryMetaPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 8: CurveCryptoPool or CurveFactoryCryptoPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 9: ERC4626, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 10: Lido, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  ///\\n  /// Note: tokens + 1 is the number of tokens of the pool\\n  ///\\n  /// + action = 0: swap\\n  /// + action = 1: add liquidity / wrap / stake\\n  /// + action = 2: remove liquidity / unwrap / unstake\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param recipient The address of token receiver.\\n  /// @return amountOut The amount of output token received.\\n  function convert(\\n    uint256 encoding,\\n    uint256 amountIn,\\n    address recipient\\n  ) external payable returns (uint256 amountOut);\\n\\n  /// @notice Withdraw dust assets in this contract.\\n  /// @param token The address of token to withdraw.\\n  /// @param recipient The address of token receiver.\\n  function withdrawFund(address token, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IFxMarket {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when fToken or xToken is minted.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param fTokenOut The amount of fToken minted.\\n  /// @param xTokenOut The amount of xToken minted.\\n  /// @param mintFee The amount of mint fee charged.\\n  event Mint(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 baseTokenIn,\\n    uint256 fTokenOut,\\n    uint256 xTokenOut,\\n    uint256 mintFee\\n  );\\n\\n  /// @notice Emitted when someone redeem base token with fToken or xToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param fTokenBurned The amount of fToken burned.\\n  /// @param xTokenBurned The amount of xToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param redeemFee The amount of redeem fee charged.\\n  event Redeem(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 fTokenBurned,\\n    uint256 xTokenBurned,\\n    uint256 baseTokenOut,\\n    uint256 redeemFee\\n  );\\n\\n  /// @notice Emitted when someone add more base token.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param xTokenMinted The amount of xToken minted.\\n  event AddCollateral(address indexed owner, address indexed recipient, uint256 baseTokenIn, uint256 xTokenMinted);\\n\\n  /// @notice Emitted when someone liquidate with fToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param fTokenBurned The amount of fToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  event UserLiquidate(address indexed owner, address indexed recipient, uint256 fTokenBurned, uint256 baseTokenOut);\\n\\n  /// @notice Emitted when self liquidate with fToken.\\n  /// @param caller The address of caller.\\n  /// @param baseSwapAmt The amount of base token used to swap.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param fTokenBurned The amount of fToken liquidated.\\n  event SelfLiquidate(address indexed caller, uint256 baseSwapAmt, uint256 baseTokenOut, uint256 fTokenBurned);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint both fToken and xToken with some base token.\\n  /// @param baseIn The amount of base token supplied.\\n  /// @param recipient The address of receiver for fToken and xToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function mint(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 fTokenMinted, uint256 xTokenMinted);\\n\\n  /// @notice Mint some fToken with some base token.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for fToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  function mintFToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted\\n  ) external returns (uint256 fTokenMinted);\\n\\n  /// @notice Mint some xToken with some base token.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for xToken.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  /// @return bonus The amount of base token as bonus.\\n  function mintXToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 xTokenMinted, uint256 bonus);\\n\\n  /// @notice Mint some xToken by add some base token as collateral.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for xToken.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function addBaseToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 xTokenMinted);\\n\\n  /// @notice Redeem base token with fToken and xToken.\\n  /// @param fTokenIn the amount of fToken to redeem, use `uint256(-1)` to redeem all fToken.\\n  /// @param xTokenIn the amount of xToken to redeem, use `uint256(-1)` to redeem all xToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of base token should be received.\\n  /// @return baseOut The amount of base token should be received.\\n  /// @return bonus The amount of base token as bonus.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut, uint256 bonus);\\n\\n  /// @notice Permissionless liquidate some fToken to increase the collateral ratio.\\n  /// @param fTokenIn the amount of fToken to supply, use `uint256(-1)` to liquidate all fToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of base token should be received.\\n  /// @return baseOut The amount of base token should be received.\\n  function liquidate(\\n    uint256 fTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct FxGateway.ZapInCall\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minXTokenMinted\",\"type\":\"uint256\"}],\"name\":\"addBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTargets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct FxGateway.ZapInCall\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minFTokenMinted\",\"type\":\"uint256\"}],\"name\":\"mintFToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct FxGateway.ZapInCall\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minXTokenMinted\",\"type\":\"uint256\"}],\"name\":\"mintXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FxGateway.ZapOutCall\",\"name\":\"_call\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_fTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBaseToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDstToken\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fTokenForXToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateTargetStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FxGateway", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e7b9c7c9ca85340b8c06fb805f7775e3015108db000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe8400000000000000000000000053805a76e1f5ebbfe7115f16f9c87c2f7e633726000000000000000000000000e063f04f280c60aeca68b38341c2eecbec703ae2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}