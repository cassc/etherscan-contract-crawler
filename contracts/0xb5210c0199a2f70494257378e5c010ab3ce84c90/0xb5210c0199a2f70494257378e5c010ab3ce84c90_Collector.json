{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: Collector.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Collector is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    receive() external payable {}\r\n\r\n    address payable wallet1;\r\n    address payable wallet2;\r\n    address payable wallet3;\r\n    address payable wallet4;\r\n\r\n    uint256 w1Percentage = 20; // \r\n    uint256 w2Percentage = 10; // \r\n    uint256 w3Percentage = 10; //\r\n    uint256 w4Percentage = 10; // \r\n\r\n    constructor(\r\n        address payable address1,\r\n        address payable address2,\r\n        address payable address3,\r\n        address payable address4\r\n    ) {\r\n        wallet1 = address1;\r\n        wallet2 = address2;\r\n        wallet3 = address3;\r\n        wallet4 = address4;\r\n    }\r\n\r\n    function setupPercentage(\r\n        uint256 w1,\r\n        uint256 w2,\r\n        uint256 w3,\r\n        uint256 w4\r\n    ) public onlyOwner {\r\n        require(w1.add(w2).add(w3).add(w4) == 50, \"Collector: Must be 50 or 5% based on Tax\");\r\n        w1Percentage = w1;\r\n        w2Percentage = w2;\r\n        w3Percentage = w3;\r\n        w4Percentage = w4;\r\n    }\r\n\r\n    function setupWallet(\r\n        address payable w1,\r\n        address payable w2,\r\n        address payable w3,\r\n        address payable w4\r\n    ) public onlyOwner {\r\n        wallet1 = w1;\r\n        wallet2 = w2;\r\n        wallet3 = w3;\r\n        wallet4 = w4;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"Collector: Insufficent balance\");\r\n        _withdraw(wallet1, ((balance * w1Percentage) / 50));\r\n        _withdraw(wallet2, ((balance * w2Percentage) / 50));\r\n        _withdraw(wallet3, ((balance * w3Percentage) / 50));\r\n        _withdraw(wallet4, ((balance * w4Percentage) / 50));\r\n    }\r\n\r\n    function _withdraw(address _address, uint256 _amount) private {\r\n        (bool success, ) = _address.call{value: _amount}(\"\");\r\n        require(success, \"Collector: Failed to widthdraw Ether\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"address3\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"address4\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"w1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"w2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"w3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"w4\",\"type\":\"uint256\"}],\"name\":\"setupPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"w1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"w2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"w3\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"w4\",\"type\":\"address\"}],\"name\":\"setupWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Collector", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002446a704d64cc526c26d17bd3925e1d8aaa287cf000000000000000000000000421a57df60cea94cec30452a8cdb37ce277d79df0000000000000000000000007e36413bf201122b0ee8f285c142a200f90b945f000000000000000000000000ca892d9c5a5323e4d46286e8862dc967f51d9f46", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8fed296f0a8eead5a1e6f515cc1d1a0577022aaba945d9cc7f5a5df191e14eb4"}