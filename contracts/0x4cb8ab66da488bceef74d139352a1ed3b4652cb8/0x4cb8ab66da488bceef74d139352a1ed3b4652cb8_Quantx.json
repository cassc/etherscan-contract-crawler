{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"mainnet/QuantX/Quantx.sol\": {\r\n      \"content\": \"// https://www.quantx.fi/\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./QuantxDividends.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\npragma solidity ^0.8.19;\\n\\ncontract Quantx is Ownable, ERC20 {\\n    uint256 public maxWallet;\\n    address public uniswapV2Pair;\\n    IUniswapV2Router02 immutable router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    QuantxDividends public dividends;\\n\\n    uint256 SUPPLY = 1000000 * 10**18;\\n\\n    uint256 snipeFee = 30; \\n    uint256 totalFee = 5; \\n    uint256 botFee = 3; \\n\\n    bool private inSwap = false;\\n    address public marketingWallet;\\n    address public devWallet;\\n    address public botWallet;\\n\\n    uint256 public openTradingBlock;\\n\\n    mapping (address => uint256) public receiveBlock;\\n\\n    uint256 public swapAt = SUPPLY / 1000; //0.1%\\n\\n    constructor() ERC20(\\\"QuantX\\\", \\\"QNX\\\") payable {\\n        _mint(msg.sender, SUPPLY * 23 / 1000);\\n        _mint(address(this), SUPPLY * 977 / 1000);\\n\\n        maxWallet = SUPPLY;\\n        marketingWallet = 0x992298A25795F814a81079971fB8Ef5F70F09492;\\n        devWallet = 0xB3E5E8A00dD923B919B6dC1806a50F243ba8E16c;\\n        botWallet = 0xfF37F38F8badDf59595F6dE130c5eA2e00Fb5553;\\n\\n        dividends = new QuantxDividends();\\n\\n        dividends.excludeFromDividends(address(dividends));\\n        dividends.excludeFromDividends(address(this));\\n        dividends.excludeFromDividends(owner());\\n    }\\n\\n    receive() external payable {}\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function updateBotWallet(address _botWallet) external onlyOwner {\\n        botWallet = _botWallet;\\n    }\\n\\n    function updateDividends(address _dividends) external onlyOwner {\\n        dividends = QuantxDividends(payable(_dividends));\\n\\n        dividends.excludeFromDividends(address(dividends));\\n        dividends.excludeFromDividends(address(this));\\n        dividends.excludeFromDividends(owner());\\n        dividends.excludeFromDividends(uniswapV2Pair);\\n        dividends.excludeFromDividends(address(router));\\n    }\\n\\n    function updateFee(uint256 _totalFee, uint256 _botFee) external onlyOwner {\\n        require(_totalFee <= 5 && _botFee <= _totalFee);\\n        totalFee = _totalFee;\\n        botFee = _botFee;\\n    }\\n\\n    function updateMaxHoldingPercent(uint256 percent) public onlyOwner {\\n        require(percent >= 1 && percent <= 100, \\\"invalid percent\\\");\\n        maxWallet = SUPPLY * percent / 100;\\n    }\\n\\n    function updateSwapAt(uint256 value) external onlyOwner() {\\n        require(value <= SUPPLY / 50);\\n        swapAt = value;\\n    }\\n\\n    function stats(address account) external view returns (uint256 withdrawableDividends, uint256 totalDividends) {\\n        (,withdrawableDividends,totalDividends) = dividends.getAccount(account);\\n    }\\n\\n    function claim() external {\\n\\t\\tdividends.claim(msg.sender);\\n    }\\n\\n    function openTrading() external onlyOwner {\\n\\n        address pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\\n        _approve(address(this), address(router), balanceOf(address(this)));\\n        router.addLiquidityETH{\\n            value: address(this).balance\\n        } (\\n            address(this),\\n            balanceOf(address(this)),\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n\\n        uniswapV2Pair = pair;\\n        openTradingBlock = block.number;\\n        dividends.excludeFromDividends(address(router));\\n        dividends.excludeFromDividends(pair);\\n\\n        updateMaxHoldingPercent(1);\\n\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal override {\\n        if(uniswapV2Pair == address(0)) {\\n            require(from == address(this) || from == address(0) || from == owner() || to == owner(), \\\"Not started\\\");\\n            super._transfer(from, to, amount);\\n            return;\\n        }\\n\\n        if(from == uniswapV2Pair && to != address(this) && to != owner() && to != address(router)) {\\n            require(super.balanceOf(to) + amount <= maxWallet, \\\"max wallet\\\");\\n        }\\n\\n        uint256 swapAmount = balanceOf(address(this));\\n\\n        if(swapAmount > swapAt) {\\n            swapAmount = swapAt;\\n        }\\n\\n        if(\\n            swapAt > 0 &&\\n            swapAmount == swapAt &&\\n            !inSwap &&\\n            from != uniswapV2Pair) {\\n\\n            inSwap = true;\\n\\n            swapTokensForEth(swapAmount);\\n\\n            uint256 balance = address(this).balance;\\n\\n            if(balance > 0) {\\n                withdraw(balance);\\n            }\\n\\n            inSwap = false;\\n        }\\n\\n        uint256 fee;\\n\\n        if(block.number <= openTradingBlock + 4 && from == uniswapV2Pair) {\\n            require(!isContract(to));\\n            fee = snipeFee;\\n        }\\n        else if(totalFee > 0) {\\n            fee = totalFee;\\n        }\\n            \\n        if(\\n            fee > 0 &&\\n            from != address(this) &&\\n            from != owner() &&\\n            from != address(router)\\n        ) {\\n            uint256 feeTokens = amount * fee / 100;\\n            amount -= feeTokens;\\n\\n            super._transfer(from, address(this), feeTokens);\\n        }\\n\\n        super._transfer(from, to, amount);\\n\\n        dividends.updateBalance(payable(from));\\n        dividends.updateBalance(payable(to));\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function sendFunds(address user, uint256 value) private {\\n        if(value > 0) {\\n            (bool success,) = user.call{value: value}(\\\"\\\");\\n            success;\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) private {\\n        uint256 botShare = totalFee > 0 ? botFee * 10000 / totalFee : 0;\\n\\n        uint256 toBot = amount * botShare / 10000;\\n        uint256 toMarketing = (amount - toBot) / 2;\\n        uint256 toDev = toMarketing;\\n\\n        sendFunds(marketingWallet, toMarketing);\\n        sendFunds(devWallet, toDev);\\n        sendFunds(botWallet, toBot);\\n    }\\n}\"\r\n    },\r\n    \"mainnet/QuantX/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\n\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"mainnet/QuantX/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\"\r\n    },\r\n    \"mainnet/QuantX/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"mainnet/QuantX/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"mainnet/QuantX/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"mainnet/QuantX/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"mainnet/QuantX/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Context.sol\\\";\\n\\npragma solidity ^0.8.19;\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"mainnet/QuantX/QuantxDividends.sol\": {\r\n      \"content\": \"// \\n//\\n//\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\npragma solidity ^0.8.19;\\n\\n\\ncontract DividendPayingToken is ERC20 {\\n  using SafeMath for uint256;\\n  using SafeMathUint for uint256;\\n  using SafeMathInt for int256;\\n\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\n  // For more discussion about choosing the value of `magnitude`,\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n  uint256 constant internal magnitude = 2**128;\\n\\n  uint256 internal magnifiedDividendPerShare;\\n\\n  // About dividendCorrection:\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n  //   `dividendOf(_user)` should not be changed,\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n  mapping(address => int256) internal magnifiedDividendCorrections;\\n  mapping(address => uint256) internal withdrawnDividends;\\n\\n  uint256 public totalDividendsDistributed;\\n\\n  event DividendsDistributed(address user, uint256 amount);\\n  event DividendWithdrawn(address user, uint256 amount);\\n\\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n\\n  }\\n\\n  /// @dev Distributes dividends whenever ether is paid to this contract.\\n  receive() external payable {\\n    distributeDividends();\\n  }\\n\\n  /// @notice Distributes ether to token holders as dividends.\\n  /// @dev It reverts if the total supply of tokens is 0.\\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\\n  /// About undistributed ether:\\n  ///   In each distribution, there is a small amount of ether not distributed,\\n  ///     the magnified amount of which is\\n  ///     `(msg.value * magnitude) % totalSupply()`.\\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\\n  ///     (de-magnified) in a distribution can be less than 1 wei.\\n  ///   We can actually keep track of the undistributed ether in a distribution\\n  ///     and try to distribute it in the next distribution,\\n  ///     but keeping track of such data on-chain costs much more than\\n  ///     the saved ether, so we don't do that.\\n  function distributeDividends() public virtual payable {\\n    require(totalSupply() > 0);\\n\\n    if (msg.value > 0) {\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n        (msg.value).mul(magnitude) / totalSupply()\\n      );\\n      emit DividendsDistributed(msg.sender, msg.value);\\n\\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\\n    }\\n  }\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n  function withdrawDividend() public virtual {\\n    _withdrawDividendOfUser(payable(msg.sender));\\n  }\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\\n    if (_withdrawableDividend > 0) {\\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\\n      emit DividendWithdrawn(user, _withdrawableDividend);\\n      (bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\\\"\\\");\\n\\n      if(!success) {\\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\n        return 0;\\n      }\\n\\n      return _withdrawableDividend;\\n    }\\n\\n    return 0;\\n  }\\n\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner) public view returns(uint256) {\\n    return withdrawableDividendOf(_owner);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableDividendOf(address _owner) public view returns(uint256) {\\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnDividendOf(address _owner) public view returns(uint256) {\\n    return withdrawnDividends[_owner];\\n  }\\n\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeDividendOf(address _owner) public view returns(uint256) {\\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\\n  }\\n\\n  /// @dev Internal function that transfer tokens from one address to another.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param from The address to transfer from.\\n  /// @param to The address to transfer to.\\n  /// @param value The amount to be transferred.\\n  function _transfer(address from, address to, uint256 value) internal virtual override {\\n    require(false);\\n\\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\\n  }\\n\\n  /// @dev Internal function that mints tokens to an account.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param account The account that will receive the created tokens.\\n  /// @param value The amount that will be created.\\n  function _mint(address account, uint256 value) internal override {\\n    super._mint(account, value);\\n\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\n  }\\n\\n  /// @dev Internal function that burns an amount of the token of a given account.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param account The account whose tokens will be burnt.\\n  /// @param value The amount that will be burnt.\\n  function _burn(address account, uint256 value) internal override {\\n    super._burn(account, value);\\n\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\n  }\\n\\n  function _setBalance(address account, uint256 newBalance) internal {\\n    uint256 currentBalance = balanceOf(account);\\n\\n    if(newBalance > currentBalance) {\\n      uint256 mintAmount = newBalance.sub(currentBalance);\\n      _mint(account, mintAmount);\\n    } else if(newBalance < currentBalance) {\\n      uint256 burnAmount = currentBalance.sub(newBalance);\\n      _burn(account, burnAmount);\\n    }\\n  }\\n}\\n\\n\\ncontract QuantxDividends is DividendPayingToken, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    IERC20 token;\\n\\n    mapping (address => bool) public excludedFromDividends;\\n\\n    address private deployer;\\n    uint256 public closeTime;\\n\\n    uint256 public constant claimGracePeriod = 30 days;\\n\\n    event ExcludeFromDividends(address indexed account);\\n\\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\n\\n    constructor() DividendPayingToken(\\\"QUANTX_Dividends\\\", \\\"QUANTX_Dividends\\\") {\\n        deployer = tx.origin;\\n        token = IERC20(msg.sender);\\n    }\\n\\n    bool noWarning;\\n\\n    function _transfer(address, address, uint256) internal override {\\n        require(false, \\\"No transfers allowed\\\");\\n        noWarning = noWarning;\\n    }\\n\\n    function withdrawDividend() public override {\\n        require(false, \\\"withdrawDividend disabled. Use the 'claim' function on the main token contract.\\\");\\n        noWarning = noWarning;\\n    }\\n\\n    function claim(address account) external onlyOwner {\\n        require(closeTime == 0 || block.timestamp < closeTime + claimGracePeriod, \\\"closed\\\");\\n        _withdrawDividendOfUser(payable(account));\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner {\\n    \\texcludedFromDividends[account] = true;\\n\\n    \\t_setBalance(account, 0);\\n\\n    \\temit ExcludeFromDividends(account);\\n    }\\n\\n    function getAccount(address _account)\\n        public view returns (\\n            address account,\\n            uint256 withdrawableDividends,\\n            uint256 totalDividends) {\\n        account = _account;\\n        withdrawableDividends = withdrawableDividendOf(account);\\n        totalDividends = accumulativeDividendOf(account);\\n    }\\n\\n    function updateBalance(address payable account) external {\\n    \\tif(excludedFromDividends[account]) {\\n    \\t\\treturn;\\n    \\t}\\n\\n        _setBalance(account, token.balanceOf(account));\\n    }\\n\\n    //If the dividend contract needs to be updated, we can close\\n    //this one, and let people claim for a month\\n    //After that is over, we can take the remaining funds and\\n    //use for the project\\n    function close() external onlyOwner {\\n        require(closeTime == 0, \\\"cannot take yet\\\");\\n        closeTime = block.timestamp;\\n    }\\n\\n    //Only allows funds to be taken if contract has been closed for a month\\n    function takeFunds() external onlyOwner {\\n        require(closeTime >= 0 && block.timestamp >= closeTime + claimGracePeriod, \\\"already closed\\\");\\n        (bool success,) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n}\"\r\n    },\r\n    \"mainnet/QuantX/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n}\\n\\n\\n/**\\n * @title SafeMathUint\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMathUint {\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0);\\n    return b;\\n  }\\n}\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividends\",\"outputs\":[{\"internalType\":\"contract QuantxDividends\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTradingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botWallet\",\"type\":\"address\"}],\"name\":\"updateBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dividends\",\"type\":\"address\"}],\"name\":\"updateDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_botFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateMaxHoldingPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSwapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Quantx", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}