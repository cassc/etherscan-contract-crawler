{"SourceCode": "pragma solidity ^0.4.15;\r\n\r\ncontract Utils {\r\n    /**\r\n        constructor\r\n    */\r\n    function Utils() internal {\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n    // Overflow protected math functions\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n}\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public constant returns (string) { name; }\r\n    function symbol() public constant returns (string) { symbol; }\r\n    function decimals() public constant returns (uint8) { decimals; }\r\n    function totalSupply() public constant returns (uint256) { totalSupply; }\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n\r\n/**\r\n    ERC20 Standard Token implementation\r\n*/\r\ncontract StandardERC20Token is IERC20Token, Utils {\r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply = 0;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n\r\n\r\n    /**\r\n        @dev constructor\r\n\r\n        @param _name        token name\r\n        @param _symbol      token symbol\r\n        @param _decimals    decimal points, for display purposes\r\n    */\r\n    function StandardERC20Token(string _name, string _symbol, uint8 _decimals) public{\r\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n     function balanceOf(address _owner) constant returns (uint256) {\r\n        return balanceOf[_owner];\r\n    }\r\n    function allowance(address _owner, address _spender) constant returns (uint256) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n    /**\r\n        @dev send coins\r\n        throws on any error rather then return a false flag to minimize user errors\r\n\r\n        @param _to      target address\r\n        @param _value   transfer amount\r\n\r\n        @return true if the transfer was successful, false if it wasn't\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        validAddress(_to)\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[msg.sender] >= _value && _value > 0);\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev an account/contract attempts to get the coins\r\n        throws on any error rather then return a false flag to minimize user errors\r\n\r\n        @param _from    source address\r\n        @param _to      target address\r\n        @param _value   transfer amount\r\n\r\n        @return true if the transfer was successful, false if it wasn't\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        validAddress(_from)\r\n        validAddress(_to)\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[_from] >= _value && _value > 0);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev allow another account/contract to spend some tokens on your behalf\r\n        throws on any error rather then return a false flag to minimize user errors\r\n\r\n        also, to minimize the risk of the approve/transferFrom attack vector\r\n        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\r\n        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\r\n\r\n        @param _spender approved address\r\n        @param _value   allowance amount\r\n\r\n        @return true if the approval was successful, false if it wasn't\r\n    */\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        validAddress(_spender)\r\n        returns (bool success)\r\n    {\r\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public constant returns (address) { owner; }\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n/*\r\n    Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\ncontract YooStop is Owned{\r\n\r\n    bool public stopped = false;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n    function stop() public ownerOnly{\r\n        stopped = true;\r\n    }\r\n    function start() public ownerOnly{\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract YOOBAToken is StandardERC20Token, Owned,YooStop {\r\n\r\n\r\n\r\n    uint256 constant public YOO_UNIT = 10 ** 18;\r\n    uint256 public totalSupply = 100 * (10**8) * YOO_UNIT;\r\n\r\n    //  Constants \r\n    uint256 constant public airdropSupply = 20 * 10**8 * YOO_UNIT;           \r\n    uint256 constant public earlyInvestorSupply = 5 * 10**8 * YOO_UNIT;    \r\n    uint256 constant public earlyCommunitySupply = 5 * 10**8 * YOO_UNIT;  \r\n    uint256 constant public icoReservedSupply = 40 * 10**8 * YOO_UNIT;          // ico Reserved,not for other usages.\r\n    uint256 constant public teamSupply = 12 * 10**8 * YOO_UNIT;         // Team,Community,Research\uff0cetc.\r\n    uint256 constant public ecosystemSupply = 18 * 10**8 * YOO_UNIT;         // Community,Research\uff0cInfrastructure\uff0cetc.\r\n    \r\n    uint256  public tokensReleasedToIco = 0;  //the tokens has released for ico.\r\n    uint256  public tokensReleasedToEarlyInvestor = 0;  //the tokens has released for early investor.\r\n    uint256  public tokensReleasedToTeam = 0;  //the tokens has released to team.\r\n    uint256  public tokensReleasedToEcosystem = 0;  //the tokens has released to ecosystem.\r\n    uint256  public currentSupply = 0;  //all tokens released currently.\r\n\r\n    \r\n    \r\n    address public airdropAddress;                                           \r\n    address public yoobaTeamAddress;     \r\n    address public earlyCommunityAddress;\r\n    address public ecosystemAddress;// use for community,Research\uff0cInfrastructure\uff0cetc.\r\n    address public backupAddress;\r\n\r\n\r\n    \r\n    \r\n    uint256 internal createTime = 1522261875;                                // will be replace by (UTC) contract create time (in seconds)\r\n    uint256 internal teamTranchesReleased = 0;                          // Track how many tranches (allocations of 6.25% teamSupply tokens) have been released\uff0cabout 4 years,teamSupply tokens will be allocate to team.\r\n    uint256 internal ecosystemTranchesReleased = 0;                          // Track how many tranches (allocations of 6.25% ecosystemSupply tokens) have been released.About 4 years,that will be release all. \r\n    uint256 internal maxTranches = 16;       \r\n    bool internal isInitAirdropAndEarlyAlloc = false;\r\n\r\n\r\n    /**\r\n        @dev constructor\r\n        \r\n    */\r\n    function YOOBAToken(address _airdropAddress, address _ecosystemAddress, address _backupAddress, address _yoobaTeamAddress,address _earlyCommunityAddress)\r\n    StandardERC20Token(\"Yooba token\", \"YOO\", 18) public\r\n     {\r\n        airdropAddress = _airdropAddress;\r\n        yoobaTeamAddress = _yoobaTeamAddress;\r\n        ecosystemAddress = _ecosystemAddress;\r\n        backupAddress = _backupAddress;\r\n        earlyCommunityAddress = _earlyCommunityAddress;\r\n        createTime = now;\r\n    }\r\n    \r\n    \r\n    /**\r\n        @dev \r\n        the tokens at the airdropAddress will be airdroped before 2018.12.31\r\n    */\r\n     function initAirdropAndEarlyAlloc()   public ownerOnly stoppable returns(bool success){\r\n         require(!isInitAirdropAndEarlyAlloc);\r\n         require(airdropAddress != 0x0 && earlyCommunityAddress != 0x0);\r\n         require((currentSupply + earlyCommunitySupply + airdropSupply) <= totalSupply);\r\n         balanceOf[earlyCommunityAddress] += earlyCommunitySupply; \r\n         currentSupply += earlyCommunitySupply;\r\n         Transfer(0x0, earlyCommunityAddress, earlyCommunitySupply);\r\n        balanceOf[airdropAddress] += airdropSupply;       \r\n        currentSupply += airdropSupply;\r\n        Transfer(0x0, airdropAddress, airdropSupply);\r\n        isInitAirdropAndEarlyAlloc = true;\r\n        return true;\r\n     }\r\n    \r\n\r\n\r\n    /**\r\n        @dev send tokens\r\n        throws on any error rather then return a false flag to minimize user errors\r\n        in addition to the standard checks, the function throws if transfers are disabled\r\n\r\n        @param _to      target address\r\n        @param _value   transfer amount\r\n\r\n        @return true if the transfer was successful, throws if it wasn't\r\n    */\r\n    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n        @dev \r\n        throws on any error rather then return a false flag to minimize user errors\r\n        in addition to the standard checks, the function throws if transfers are disabled\r\n\r\n        @param _from    source address\r\n        @param _to      target address\r\n        @param _value   transfer amount\r\n\r\n        @return true if the transfer was successful, throws if it wasn't\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\r\n            return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    /**\r\n        @dev Release one  tranche of the ecosystemSupply allocation to Yooba team,6.25% every tranche.About 4 years ecosystemSupply release over.\r\n       \r\n        @return true if successful, throws if not\r\n    */\r\n    function releaseForEcosystem()   public ownerOnly stoppable returns(bool success) {\r\n        require(now >= createTime + 12 weeks);\r\n        require(tokensReleasedToEcosystem < ecosystemSupply);\r\n\r\n        uint256 temp = ecosystemSupply / 10000;\r\n        uint256 allocAmount = safeMul(temp, 625);\r\n        uint256 currentTranche = uint256(now - createTime) /  12 weeks;\r\n\r\n        if(ecosystemTranchesReleased < maxTranches && currentTranche > ecosystemTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\r\n            ecosystemTranchesReleased++;\r\n            balanceOf[ecosystemAddress] = safeAdd(balanceOf[ecosystemAddress], allocAmount);\r\n            currentSupply += allocAmount;\r\n            tokensReleasedToEcosystem = safeAdd(tokensReleasedToEcosystem, allocAmount);\r\n            Transfer(0x0, ecosystemAddress, allocAmount);\r\n            return true;\r\n        }\r\n        revert();\r\n    }\r\n    \r\n       /**\r\n        @dev Release one  tranche of the teamSupply allocation to Yooba team,6.25% every tranche.About 4 years Yooba team will get teamSupply Tokens.\r\n       \r\n        @return true if successful, throws if not\r\n    */\r\n    function releaseForYoobaTeam()   public ownerOnly stoppable returns(bool success) {\r\n        require(now >= createTime + 12 weeks);\r\n        require(tokensReleasedToTeam < teamSupply);\r\n\r\n        uint256 temp = teamSupply / 10000;\r\n        uint256 allocAmount = safeMul(temp, 625);\r\n        uint256 currentTranche = uint256(now - createTime) / 12 weeks;\r\n\r\n        if(teamTranchesReleased < maxTranches && currentTranche > teamTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\r\n            teamTranchesReleased++;\r\n            balanceOf[yoobaTeamAddress] = safeAdd(balanceOf[yoobaTeamAddress], allocAmount);\r\n            currentSupply += allocAmount;\r\n            tokensReleasedToTeam = safeAdd(tokensReleasedToTeam, allocAmount);\r\n            Transfer(0x0, yoobaTeamAddress, allocAmount);\r\n            return true;\r\n        }\r\n        revert();\r\n    }\r\n\r\n  \r\n    \r\n        /**\r\n        @dev release ico Tokens \r\n\r\n        @return true if successful, throws if not\r\n    */\r\n    function releaseForIco(address _icoAddress, uint256 _value) public  ownerOnly stoppable returns(bool success) {\r\n          require(_icoAddress != address(0x0) && _value > 0  && (tokensReleasedToIco + _value) <= icoReservedSupply && (currentSupply + _value) <= totalSupply);\r\n          balanceOf[_icoAddress] = safeAdd(balanceOf[_icoAddress], _value);\r\n          currentSupply += _value;\r\n          tokensReleasedToIco += _value;\r\n          Transfer(0x0, _icoAddress, _value);\r\n         return true;\r\n    }\r\n\r\n        /**\r\n        @dev release  earlyInvestor Tokens \r\n\r\n        @return true if successful, throws if not\r\n    */\r\n    function releaseForEarlyInvestor(address _investorAddress, uint256 _value) public  ownerOnly  stoppable  returns(bool success) {\r\n          require(_investorAddress != address(0x0) && _value > 0  && (tokensReleasedToEarlyInvestor + _value) <= earlyInvestorSupply && (currentSupply + _value) <= totalSupply);\r\n          balanceOf[_investorAddress] = safeAdd(balanceOf[_investorAddress], _value);\r\n          currentSupply += _value;\r\n          tokensReleasedToEarlyInvestor += _value;\r\n          Transfer(0x0, _investorAddress, _value);\r\n         return true;\r\n    }\r\n    /**\r\n     @dev  This only run for urgent situation.Or Yooba mainnet is run well and all tokens release over. \r\n\r\n        @return true if successful, throws if not\r\n    */\r\n    function processWhenStop() public  ownerOnly   returns(bool success) {\r\n        require(currentSupply <=  totalSupply && stopped);\r\n        balanceOf[backupAddress] += (totalSupply - currentSupply);\r\n        currentSupply = totalSupply;\r\n       Transfer(0x0, backupAddress, (totalSupply - currentSupply));\r\n        return true;\r\n    }\r\n    \r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"backupAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedToIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ecosystemSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"releaseForEarlyInvestor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoReservedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyCommunityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseForEcosystem\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YOO_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseForYoobaTeam\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyCommunitySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedToEarlyInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedToTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedToEcosystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyInvestorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initAirdropAndEarlyAlloc\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yoobaTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"releaseForIco\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"processWhenStop\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_airdropAddress\",\"type\":\"address\"},{\"name\":\"_ecosystemAddress\",\"type\":\"address\"},{\"name\":\"_backupAddress\",\"type\":\"address\"},{\"name\":\"_yoobaTeamAddress\",\"type\":\"address\"},{\"name\":\"_earlyCommunityAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "YOOBAToken", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d66f5196fcb64503819d4a80f8c43bb1541ea38000000000000000000000000e3fe2b07fdd23bd530164f33fd8dc104ae5519f5000000000000000000000000e0930424d7503ba53d77e1813c930e251f7e1eb5000000000000000000000000829423e43b9bf417da9e91a437bc0f69d4a9eece000000000000000000000000c0ebea4505019a9a5ff58ecf304d1e037b5546a7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://36cacabf707cca6d28db68feb5d2fa867dcb9762f3862cd7472ca6327db4f446"}