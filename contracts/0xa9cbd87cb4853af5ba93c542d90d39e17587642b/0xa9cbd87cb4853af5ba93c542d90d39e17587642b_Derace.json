{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n/**\r\nHorse racing metaverse based on blockchain.\r\n\r\nWebsite:   https://www.derace.space\r\nTelegram: https://t.me/derace_erc\r\nTwitter: https://twitter.com/derace_erc\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function set(address) external;\r\n    function setSetter(address) external;\r\n}\r\n\r\ncontract Derace is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    string private _name = \"Derace\";\r\n    string private _symbol = \"DERACE\";\r\n        \r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply = 10 ** 9 * 10 ** 9;\r\n    uint256 public maxTxAmount = 20 * 10 ** 6 * 10 ** 9;\r\n    uint256 public maxWalletAmount = 20 * 10 ** 6 * 10 ** 9;\r\n    uint256 public swapThreshold = 10 ** 4 * 10 ** 9; \r\n\r\n    IUniswapRouter _uniswapRouter;\r\n    address _pairAddress;\r\n\r\n    uint256 _buyFeeLp = 0;\r\n    uint256 _buyFeeMkt = 22;\r\n    uint256 _devbuyFees = 0;\r\n    uint256 _buyFee = 22;\r\n\r\n    uint256 _taxSellLp = 0;\r\n    uint256 _taxSellMkt = 22;\r\n    uint256 _taxSellDev = 0;\r\n    uint256 _sellFee = 22;\r\n\r\n    address payable _marketingWallet;\r\n    address payable _devWallet;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) _isExFromAll;\r\n    mapping (address => bool) _isExFromWalletLimit;\r\n    mapping (address => bool) _isExFromTxLimit;\r\n    mapping (address => bool) _isPairAddress;\r\n    \r\n    bool swapping;\r\n    bool _swapFeeEnabled = true;\r\n    bool _maxTxDisabled = false;\r\n    bool _maxWalletDisabled = true;\r\n\r\n    uint256 _taxSeperateLp = 0;\r\n    uint256 _taxSeperateMkt = 10;\r\n    uint256 _taxSeperateDev = 0;\r\n    uint256 _taxSeperateTotal = 10;\r\n\r\n    modifier lockSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _balances[_msgSender()] = _totalSupply;\r\n        IUniswapRouter _uniswapV2Router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n        _pairAddress = IUniswapFactory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        _uniswapRouter = _uniswapV2Router;\r\n        _allowances[address(this)][address(_uniswapRouter)] = _totalSupply;\r\n        _marketingWallet = payable(0xe518fFBc7E52d4120ea82d21240E44b6223E3C2a);\r\n        _devWallet = payable(0xe518fFBc7E52d4120ea82d21240E44b6223E3C2a);\r\n        _buyFee = _buyFeeLp.add(_buyFeeMkt).add(_devbuyFees);\r\n        _sellFee = _taxSellLp.add(_taxSellMkt).add(_taxSellDev);\r\n        _taxSeperateTotal = _taxSeperateLp.add(_taxSeperateMkt).add(_taxSeperateDev);\r\n        \r\n        _isExFromAll[owner()] = true;\r\n        _isExFromAll[_marketingWallet] = true;\r\n        _isExFromWalletLimit[owner()] = true;\r\n        _isExFromWalletLimit[address(_pairAddress)] = true;\r\n        _isExFromWalletLimit[address(this)] = true;\r\n        _isExFromTxLimit[owner()] = true;\r\n        _isExFromTxLimit[_marketingWallet] = true;\r\n        _isExFromTxLimit[address(this)] = true;\r\n        _isPairAddress[address(_pairAddress)] = true;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n            \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function getTransferringTokens(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 fee = 0;\r\n        if(_isPairAddress[sender]) {fee = amount.mul(_buyFee).div(100);}\r\n        else if(_isPairAddress[recipient]) {fee = amount.mul(_sellFee).div(100);}\r\n        if(fee > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(fee);\r\n            emit Transfer(sender, address(this), fee);\r\n        }\r\n        return amount.sub(fee);\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function removeLimits() external onlyOwner {\r\n        maxTxAmount = _totalSupply;\r\n        _maxWalletDisabled = false;\r\n        _buyFeeMkt = 1;\r\n        _taxSellMkt = 1;\r\n        _buyFee = 1;\r\n        _sellFee = 1;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapRouter.WETH();\r\n\r\n        _approve(address(this), address(_uniswapRouter), tokenAmount);\r\n\r\n        // make the performSwap\r\n        _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if(swapping)\r\n        { \r\n            return _basicTransfer(sender, recipient, amount); \r\n        }\r\n        else\r\n        {\r\n            if(!_isExFromTxLimit[sender] && !_isExFromTxLimit[recipient]) {\r\n                require(amount <= maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            }            \r\n\r\n            uint256 swapAmount = balanceOf(address(this));\r\n            bool minimumSwap = swapAmount >= swapThreshold;\r\n            \r\n            if (minimumSwap && !swapping && _isPairAddress[recipient] && _swapFeeEnabled && !_isExFromAll[sender] && amount > swapThreshold) \r\n            {\r\n                if(_maxTxDisabled)\r\n                    swapAmount = swapThreshold;\r\n                performSwap(swapAmount);    \r\n            }\r\n\r\n            uint256 finalAmount;                                         \r\n            if (_isExFromAll[sender] || _isExFromAll[recipient]) {\r\n                finalAmount = amount;\r\n            } else {\r\n                finalAmount = getTransferringTokens(sender, recipient, amount);\r\n            }\r\n            if(_maxWalletDisabled && !_isExFromWalletLimit[recipient])\r\n                require(balanceOf(recipient).add(finalAmount) <= maxWalletAmount);\r\n\r\n            uint256 amountToReduce = (!_maxWalletDisabled && _isExFromAll[sender]) ? amount.sub(finalAmount) : amount;\r\n            _balances[sender] = _balances[sender].sub(amountToReduce, \"Insufficient Balance\");\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n                \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n        \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function performSwap(uint256 tAmount) private lockSwap {\r\n        uint256 lpFeetokens = tAmount.mul(_taxSeperateLp).div(_taxSeperateTotal).div(2);\r\n        uint256 tokensToSwap = tAmount.sub(lpFeetokens);\r\n\r\n        swapTokensForETH(tokensToSwap);\r\n        uint256 ethCA = address(this).balance;\r\n\r\n        uint256 totalETHFee = _taxSeperateTotal.sub(_taxSeperateLp.div(2));\r\n        \r\n        uint256 amountETHLiquidity = ethCA.mul(_taxSeperateLp).div(totalETHFee).div(2);\r\n        uint256 amountETHDevelopment = ethCA.mul(_taxSeperateDev).div(totalETHFee);\r\n        uint256 amountETHMarketing = ethCA.sub(amountETHLiquidity).sub(amountETHDevelopment);\r\n\r\n        if(amountETHMarketing > 0)\r\n            sendEth(_marketingWallet, amountETHMarketing);\r\n\r\n        if(amountETHDevelopment > 0)\r\n            sendEth(_devWallet, amountETHDevelopment);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function sendEth(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Derace", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab84102e483b35723ce42cd37b4e013057074df4834f874be53e8a9b1a35d3cb"}