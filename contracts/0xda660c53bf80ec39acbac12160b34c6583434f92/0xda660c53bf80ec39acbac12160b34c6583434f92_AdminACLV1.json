{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin-4.7/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.7/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdminACLV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/v0.8.x/IAdminACLV0.sol\\\";\\nimport \\\"./GenArt721CoreV3.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title Admin ACL contract, V1.\\n * @author Art Blocks Inc.\\n * @notice Privileged Roles and Ownership:\\n * This contract has a single superAdmin that passes all ACL checks. It also\\n * contains a set of payment approvers who may only call the function\\n * `GenArt721CoreV3.adminAcceptArtistAddressesAndSplits`. All checks for any\\n * other address will return false.\\n * The superAdmin can be changed by the current superAdmin.\\n * Payment approvers may only be changed by the current superAdmin.\\n * Care must be taken to ensure that the admin ACL contract is secure behind a\\n * multi-sig or other secure access control mechanism.\\n * This contract continues to broadcast support (and require future-adminACL\\n * broadcasted support) for IAdminACLV0 via ERC165 interface detection.\\n */\\ncontract AdminACLV1 is IAdminACLV0, ERC165 {\\n    /// New address added to set of addresses who may approve artist-proposed\\n    /// payment addresses.\\n    event PaymentApproverAdded(address indexed _approver);\\n\\n    /// Address removed from set of addresses who may approve artist-proposed\\n    /// payment addresses.\\n    event PaymentApproverRemoved(address indexed _approver);\\n\\n    // add Enumerable Set methods\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public AdminACLType = \\\"AdminACLV1\\\";\\n\\n    /// superAdmin is the only address that passes any and all ACL checks\\n    address public superAdmin;\\n\\n    // Set of addresses that have been granted admin approval of artist-\\n    // proposed payment address changes\\n    EnumerableSet.AddressSet private _paymentApprovers;\\n\\n    constructor() {\\n        superAdmin = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Allows superAdmin change the superAdmin address.\\n     * @param _newSuperAdmin The new superAdmin address.\\n     * @param _genArt721CoreAddressesToUpdate Array of genArt721Core\\n     * addresses to update to the new superAdmin, for indexing purposes only.\\n     * @dev this function is gated to only superAdmin address.\\n     */\\n    function changeSuperAdmin(\\n        address _newSuperAdmin,\\n        address[] calldata _genArt721CoreAddressesToUpdate\\n    ) external {\\n        require(msg.sender == superAdmin, \\\"Only superAdmin\\\");\\n        address previousSuperAdmin = superAdmin;\\n        superAdmin = _newSuperAdmin;\\n        emit SuperAdminTransferred(\\n            previousSuperAdmin,\\n            _newSuperAdmin,\\n            _genArt721CoreAddressesToUpdate\\n        );\\n    }\\n\\n    /**\\n     * Calls transferOwnership on other contract from this contract.\\n     * This is useful for updating to a new AdminACL contract.\\n     * @dev this function is gated to only superAdmin address.\\n     * @dev This implementation requires that the new AdminACL contract\\n     * broadcasts support of IAdminACLV0 via ERC165 interface detection.\\n     */\\n    function transferOwnershipOn(\\n        address _contract,\\n        address _newAdminACL\\n    ) external {\\n        require(msg.sender == superAdmin, \\\"Only superAdmin\\\");\\n        // ensure new AdminACL contract supports IAdminACLV0\\n        require(\\n            ERC165(_newAdminACL).supportsInterface(\\n                type(IAdminACLV0).interfaceId\\n            ),\\n            \\\"AdminACLV1: new admin ACL does not support IAdminACLV0\\\"\\n        );\\n        Ownable(_contract).transferOwnership(_newAdminACL);\\n    }\\n\\n    /**\\n     * @notice Calls renounceOwnership on other contract from this contract.\\n     * @dev this function is gated to only superAdmin address.\\n     */\\n    function renounceOwnershipOn(address _contract) external {\\n        require(msg.sender == superAdmin, \\\"Only superAdmin\\\");\\n        Ownable(_contract).renounceOwnership();\\n    }\\n\\n    /**\\n     * @notice Checks if sender `_sender` is allowed to call function with selector\\n     * `_selector` on contract `_contract`. Returns true if sender is superAdmin,\\n     * or if `_selector` is\\n     * GenArt721CoreV3.adminAcceptArtistAddressesAndSplits.selector and address\\n     * is in set of payment approvers.\\n     */\\n    function allowed(\\n        address _sender,\\n        address /*_contract*/,\\n        bytes4 _selector\\n    ) external view returns (bool) {\\n        // always allow superAdmin\\n        if (_sender == superAdmin) {\\n            return true;\\n        }\\n        // if calling payment approval function, check if sender is in approver\\n        // set\\n        if (\\n            _selector ==\\n            GenArt721CoreV3.adminAcceptArtistAddressesAndSplits.selector\\n        ) {\\n            return _paymentApprovers.contains(_sender);\\n        }\\n        // otherwise, return false\\n        return false;\\n    }\\n\\n    /**\\n     *\\n     * @notice Adds address to payment approvers set. Only callable by\\n     * superAdmin. Address must not already be in set.\\n     * @param _approver NFT core address to be registered.\\n     */\\n    function addPaymentApprover(address _approver) external {\\n        require(msg.sender == superAdmin, \\\"Only superAdmin\\\");\\n        require(\\n            _paymentApprovers.add(_approver),\\n            \\\"AdminACLV1: Already registered\\\"\\n        );\\n        emit PaymentApproverAdded(_approver);\\n    }\\n\\n    /**\\n     *\\n     * @notice Removes address to payment approvers set. Only callable by\\n     * superAdmin. Address must be in set.\\n     * @param _approver NFT core address to be registered.\\n     */\\n    function removePaymentApprover(address _approver) external {\\n        require(msg.sender == superAdmin, \\\"Only superAdmin\\\");\\n        require(\\n            _paymentApprovers.remove(_approver),\\n            \\\"AdminACLV1: Not registered\\\"\\n        );\\n        emit PaymentApproverRemoved(_approver);\\n    }\\n\\n    /**\\n     * @notice Gets quantity of addresses registered to approve artist-proposed\\n     * payment addresses.\\n     * @return uint256 quantity of addresses approved\\n     */\\n    function getNumPaymentApprovers() external view returns (uint256) {\\n        return _paymentApprovers.length();\\n    }\\n\\n    /**\\n     * @notice Get artist-proposed payment address approver address at index\\n     * `_index` of enumerable set.\\n     * @param _index enumerable set index to query.\\n     * @return NFTAddress payment approver address at index `_index`\\n     * @dev index must be < quantity of registered payment approvers\\n     */\\n    function getPaymentApproverAt(\\n        uint256 _index\\n    ) external view returns (address NFTAddress) {\\n        return _paymentApprovers.at(_index);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceId == type(IAdminACLV0).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GenArt721CoreV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// Created By: Art Blocks Inc.\\n\\nimport \\\"./interfaces/v0.8.x/IRandomizer_V3CoreBase.sol\\\";\\nimport \\\"./interfaces/v0.8.x/IAdminACLV0.sol\\\";\\nimport \\\"./interfaces/v0.8.x/IGenArt721CoreContractV3.sol\\\";\\nimport \\\"./interfaces/v0.8.x/IGenArt721CoreContractExposesHashSeed.sol\\\";\\nimport \\\"./interfaces/v0.8.x/IManifold.sol\\\";\\n\\nimport \\\"@openzeppelin-4.7/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/access/Ownable.sol\\\";\\nimport \\\"./libs/v0.8.x/ERC721_PackedHashSeed.sol\\\";\\nimport \\\"./libs/v0.8.x/BytecodeStorageV1.sol\\\";\\nimport \\\"./libs/v0.8.x/Bytes32Strings.sol\\\";\\n\\n/**\\n * @title Art Blocks ERC-721 core contract, V3.\\n * @author Art Blocks Inc.\\n * @notice Privileged Roles and Ownership:\\n * This contract is designed to be managed, with progressively limited powers\\n * as a project progresses from active to locked.\\n * Privileged roles and abilities are controlled by the admin ACL contract and\\n * artists. Both of these roles hold extensive power and can arbitrarily\\n * control and modify portions of projects, dependent upon project state. After\\n * a project is locked, important project metadata fields are locked including\\n * the project name, artist name, and script and display details. Edition size\\n * can never be increased.\\n * Care must be taken to ensure that the admin ACL contract and artist\\n * addresses are secure behind a multi-sig or other access control mechanism.\\n * ----------------------------------------------------------------------------\\n * The following functions are restricted to the Admin ACL contract:\\n * - updateArtblocksCurationRegistryAddress\\n * - updateArtblocksDependencyRegistryAddress\\n * - updateArtblocksPrimarySalesAddress\\n * - updateArtblocksSecondarySalesAddress\\n * - updateArtblocksPrimarySalesPercentage (up to 25%)\\n * - updateArtblocksSecondarySalesBPS (up to 100%)\\n * - updateMinterContract\\n * - updateRandomizerAddress\\n * - toggleProjectIsActive\\n * - addProject\\n * - forbidNewProjects (forever forbidding new projects)\\n * - updateDefaultBaseURI (used to initialize new project base URIs)\\n * ----------------------------------------------------------------------------\\n * The following functions are restricted to either the Artist address or\\n * the Admin ACL contract, only when the project is not locked:\\n * - updateProjectName\\n * - updateProjectArtistName\\n * - updateProjectLicense\\n * - Change project script via addProjectScript, updateProjectScript,\\n *   and removeProjectLastScript\\n * - updateProjectScriptType\\n * - updateProjectAspectRatio\\n * ----------------------------------------------------------------------------\\n * The following functions are restricted to only the Artist address:\\n * - proposeArtistPaymentAddressesAndSplits (Note that this has to be accepted\\n *   by adminAcceptArtistAddressesAndSplits to take effect, which is restricted\\n *   to the Admin ACL contract, or the artist if the core contract owner has\\n *   renounced ownership. Also note that a proposal will be automatically\\n *   accepted if the artist only proposes changed payee percentages without\\n *   modifying any payee addresses, or is only removing payee addresses.)\\n * - toggleProjectIsPaused (note the artist can still mint while paused)\\n * - updateProjectSecondaryMarketRoyaltyPercentage (up to\\n     ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE percent)\\n * - updateProjectWebsite\\n * - updateProjectMaxInvocations (to a number greater than or equal to the\\n *   current number of invocations, and less than current project maximum\\n *   invocations)\\n * - updateProjectBaseURI (controlling the base URI for tokens in the project)\\n * ----------------------------------------------------------------------------\\n * The following function is restricted to either the Admin ACL contract, or\\n * the Artist address if the core contract owner has renounced ownership:\\n * - adminAcceptArtistAddressesAndSplits\\n * - updateProjectArtistAddress (owner ultimately controlling the project and\\n *   its and-on revenue, unless owner has renounced ownership)\\n * ----------------------------------------------------------------------------\\n * The following function is restricted to the artist when a project is\\n * unlocked, and only callable by Admin ACL contract when a project is locked:\\n * - updateProjectDescription\\n * ----------------------------------------------------------------------------\\n * The following function is restricted to owner calling directly:\\n * - transferOwnership\\n * - renounceOwnership\\n * ----------------------------------------------------------------------------\\n * Additional admin and artist privileged roles may be described on minters,\\n * registries, and other contracts that may interact with this core contract.\\n */\\ncontract GenArt721CoreV3 is\\n    ERC721_PackedHashSeed,\\n    Ownable,\\n    IGenArt721CoreContractV3,\\n    IGenArt721CoreContractExposesHashSeed\\n{\\n    using BytecodeStorageWriter for string;\\n    using Bytes32Strings for bytes32;\\n    using Strings for uint256;\\n    uint256 constant ONE_HUNDRED = 100;\\n    uint256 constant ONE_MILLION = 1_000_000;\\n    uint24 constant ONE_MILLION_UINT24 = 1_000_000;\\n    uint256 constant FOUR_WEEKS_IN_SECONDS = 2_419_200;\\n    uint8 constant AT_CHARACTER_CODE = uint8(bytes1(\\\"@\\\")); // 0x40\\n\\n    // numeric constants\\n    uint256 constant ART_BLOCKS_MAX_PRIMARY_SALES_PERCENTAGE = 25; // 25%\\n    uint256 constant ART_BLOCKS_MAX_SECONDARY_SALES_BPS = 10000; // 10_000 BPS = 100%\\n    uint256 constant ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE = 95; // 95%\\n\\n    // This contract emits generic events that contain fields that indicate\\n    // which parameter has been updated. This is sufficient for application\\n    // state management, while also simplifying the contract and indexing code.\\n    // This was done as an alternative to having custom events that emit what\\n    // field-values have changed for each event, given that changed values can\\n    // be introspected by indexers due to the design of this smart contract\\n    // exposing these state changes via publicly viewable fields.\\n    //\\n    // The following fields are used to indicate which contract-level parameter\\n    // has been updated in the `PlatformUpdated` event:\\n    bytes32 constant FIELD_NEXT_PROJECT_ID = \\\"nextProjectId\\\";\\n    bytes32 constant FIELD_NEW_PROJECTS_FORBIDDEN = \\\"newProjectsForbidden\\\";\\n    bytes32 constant FIELD_DEFAULT_BASE_URI = \\\"defaultBaseURI\\\";\\n    bytes32 constant FIELD_ARTBLOCKS_PRIMARY_SALES_ADDRESS =\\n        \\\"artblocksPrimarySalesAddress\\\";\\n    bytes32 constant FIELD_ARTBLOCKS_SECONDARY_SALES_ADDRESS =\\n        \\\"artblocksSecondarySalesAddress\\\";\\n    bytes32 constant FIELD_RANDOMIZER_ADDRESS = \\\"randomizerAddress\\\";\\n    bytes32 constant FIELD_ARTBLOCKS_CURATION_REGISTRY_ADDRESS =\\n        \\\"curationRegistryAddress\\\";\\n    bytes32 constant FIELD_ARTBLOCKS_DEPENDENCY_REGISTRY_ADDRESS =\\n        \\\"dependencyRegistryAddress\\\";\\n    bytes32 constant FIELD_ARTBLOCKS_PRIMARY_SALES_PERCENTAGE =\\n        \\\"artblocksPrimaryPercentage\\\";\\n    bytes32 constant FIELD_ARTBLOCKS_SECONDARY_SALES_BPS =\\n        \\\"artblocksSecondaryBPS\\\";\\n    // The following fields are used to indicate which project-level parameter\\n    // has been updated in the `ProjectUpdated` event:\\n    bytes32 constant FIELD_PROJECT_COMPLETED = \\\"completed\\\";\\n    bytes32 constant FIELD_PROJECT_ACTIVE = \\\"active\\\";\\n    bytes32 constant FIELD_PROJECT_ARTIST_ADDRESS = \\\"artistAddress\\\";\\n    bytes32 constant FIELD_PROJECT_PAUSED = \\\"paused\\\";\\n    bytes32 constant FIELD_PROJECT_CREATED = \\\"created\\\";\\n    bytes32 constant FIELD_PROJECT_NAME = \\\"name\\\";\\n    bytes32 constant FIELD_PROJECT_ARTIST_NAME = \\\"artistName\\\";\\n    bytes32 constant FIELD_PROJECT_SECONDARY_MARKET_ROYALTY_PERCENTAGE =\\n        \\\"royaltyPercentage\\\";\\n    bytes32 constant FIELD_PROJECT_DESCRIPTION = \\\"description\\\";\\n    bytes32 constant FIELD_PROJECT_WEBSITE = \\\"website\\\";\\n    bytes32 constant FIELD_PROJECT_LICENSE = \\\"license\\\";\\n    bytes32 constant FIELD_PROJECT_MAX_INVOCATIONS = \\\"maxInvocations\\\";\\n    bytes32 constant FIELD_PROJECT_SCRIPT = \\\"script\\\";\\n    bytes32 constant FIELD_PROJECT_SCRIPT_TYPE = \\\"scriptType\\\";\\n    bytes32 constant FIELD_PROJECT_ASPECT_RATIO = \\\"aspectRatio\\\";\\n    bytes32 constant FIELD_PROJECT_BASE_URI = \\\"baseURI\\\";\\n\\n    // Art Blocks previous flagship ERC721 token addresses (for reference)\\n    /// Art Blocks Project ID range: [0-2]\\n    address public constant ART_BLOCKS_ERC721TOKEN_ADDRESS_V0 =\\n        0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a;\\n    /// Art Blocks Project ID range: [3-373]\\n    address public constant ART_BLOCKS_ERC721TOKEN_ADDRESS_V1 =\\n        0xa7d8d9ef8D8Ce8992Df33D8b8CF4Aebabd5bD270;\\n\\n    /// Curation registry managed by Art Blocks\\n    address public artblocksCurationRegistryAddress;\\n    /// Dependency registry managed by Art Blocks\\n    address public artblocksDependencyRegistryAddress;\\n\\n    /// current randomizer contract\\n    IRandomizer_V3CoreBase public randomizerContract;\\n\\n    /// append-only array of all randomizer contract addresses ever used by\\n    /// this contract\\n    address[] private _historicalRandomizerAddresses;\\n\\n    /// admin ACL contract\\n    IAdminACLV0 public adminACLContract;\\n\\n    struct Project {\\n        uint24 invocations;\\n        uint24 maxInvocations;\\n        uint24 scriptCount;\\n        // max uint64 ~= 1.8e19 sec ~= 570 billion years\\n        uint64 completedTimestamp;\\n        bool active;\\n        bool paused;\\n        string name;\\n        string artist;\\n        address descriptionAddress;\\n        string website;\\n        string license;\\n        string projectBaseURI;\\n        bytes32 scriptTypeAndVersion;\\n        string aspectRatio;\\n        // mapping from script index to address storing script in bytecode\\n        mapping(uint256 => address) scriptBytecodeAddresses;\\n    }\\n\\n    mapping(uint256 => Project) projects;\\n\\n    /// packed struct containing project financial information\\n    struct ProjectFinance {\\n        address payable additionalPayeePrimarySales;\\n        // packed uint: max of 95, max uint8 = 255\\n        uint8 secondaryMarketRoyaltyPercentage;\\n        address payable additionalPayeeSecondarySales;\\n        // packed uint: max of 100, max uint8 = 255\\n        uint8 additionalPayeeSecondarySalesPercentage;\\n        address payable artistAddress;\\n        // packed uint: max of 100, max uint8 = 255\\n        uint8 additionalPayeePrimarySalesPercentage;\\n    }\\n    // Project financials mapping\\n    mapping(uint256 => ProjectFinance) projectIdToFinancials;\\n\\n    /// hash of artist's proposed payment updates to be approved by admin\\n    mapping(uint256 => bytes32) public proposedArtistAddressesAndSplitsHash;\\n\\n    /// Art Blocks payment address for all primary sales revenues (packed)\\n    address payable public artblocksPrimarySalesAddress;\\n    /// Percentage of primary sales revenue allocated to Art Blocks (packed)\\n    // packed uint: max of 25, max uint8 = 255\\n    uint8 private _artblocksPrimarySalesPercentage = 10;\\n\\n    /// Art Blocks payment address for all secondary sales royalty revenues\\n    address payable public artblocksSecondarySalesAddress;\\n    /// Basis Points of secondary sales royalties allocated to Art Blocks\\n    uint256 public artblocksSecondarySalesBPS = 250;\\n\\n    /// single minter allowed for this core contract\\n    address public minterContract;\\n\\n    /// starting (initial) project ID on this contract\\n    uint256 public immutable startingProjectId;\\n\\n    /// next project ID to be created\\n    uint248 private _nextProjectId;\\n\\n    /// bool indicating if adding new projects is forbidden;\\n    /// default behavior is to allow new projects\\n    bool public newProjectsForbidden;\\n\\n    /// version & type of this core contract\\n    string public constant coreVersion = \\\"v3.2.2\\\";\\n    string public constant coreType = \\\"GenArt721CoreV3\\\";\\n\\n    /// default base URI to initialize all new project projectBaseURI values to\\n    string public defaultBaseURI;\\n\\n    function _onlyNonZeroAddress(address _address) internal pure {\\n        require(_address != address(0), \\\"Must input non-zero address\\\");\\n    }\\n\\n    function _onlyNonEmptyString(string memory _string) internal pure {\\n        require(bytes(_string).length != 0, \\\"Must input non-empty string\\\");\\n    }\\n\\n    function _onlyValidTokenId(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"Token ID does not exist\\\");\\n    }\\n\\n    function _onlyValidProjectId(uint256 _projectId) internal view {\\n        require(\\n            (_projectId >= startingProjectId) && (_projectId < _nextProjectId),\\n            \\\"Project ID does not exist\\\"\\n        );\\n    }\\n\\n    function _onlyUnlocked(uint256 _projectId) internal view {\\n        // Note: calling `_projectUnlocked` enforces that the `_projectId`\\n        //       passed in is valid.`\\n        require(_projectUnlocked(_projectId), \\\"Only if unlocked\\\");\\n    }\\n\\n    function _onlyAdminACL(bytes4 _selector) internal {\\n        require(\\n            adminACLAllowed(msg.sender, address(this), _selector),\\n            \\\"Only Admin ACL allowed\\\"\\n        );\\n    }\\n\\n    function _onlyArtist(uint256 _projectId) internal view {\\n        require(\\n            msg.sender == projectIdToFinancials[_projectId].artistAddress,\\n            \\\"Only artist\\\"\\n        );\\n    }\\n\\n    function _onlyArtistOrAdminACL(\\n        uint256 _projectId,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            msg.sender == projectIdToFinancials[_projectId].artistAddress ||\\n                adminACLAllowed(msg.sender, address(this), _selector),\\n            \\\"Only artist or Admin ACL allowed\\\"\\n        );\\n    }\\n\\n    /**\\n     * This modifier allows the artist of a project to call a function if the\\n     * owner of the contract has renounced ownership. This is to allow the\\n     * contract to continue to function if the owner decides to renounce\\n     * ownership.\\n     */\\n    function _onlyAdminACLOrRenouncedArtist(\\n        uint256 _projectId,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            adminACLAllowed(msg.sender, address(this), _selector) ||\\n                (owner() == address(0) &&\\n                    msg.sender ==\\n                    projectIdToFinancials[_projectId].artistAddress),\\n            \\\"Only Admin ACL allowed, or artist if owner has renounced\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Initializes contract.\\n     * @param _tokenName Name of token.\\n     * @param _tokenSymbol Token symbol.\\n     * @param _randomizerContract Randomizer contract.\\n     * @param _adminACLContract Address of admin access control contract, to be\\n     * set as contract owner.\\n     * @param _startingProjectId The initial next project ID.\\n     * @dev _startingProjectId should be set to a value much, much less than\\n     * max(uint248), but an explicit input type of `uint248` is used as it is\\n     * safer to cast up to `uint256` than it is to cast down for the purposes\\n     * of setting `_nextProjectId`.\\n     */\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _randomizerContract,\\n        address _adminACLContract,\\n        uint248 _startingProjectId\\n    ) ERC721_PackedHashSeed(_tokenName, _tokenSymbol) {\\n        _onlyNonZeroAddress(_randomizerContract);\\n        // record contracts starting project ID\\n        // casting-up is safe\\n        startingProjectId = uint256(_startingProjectId);\\n        _updateArtblocksPrimarySalesAddress(msg.sender);\\n        _updateArtblocksSecondarySalesAddress(msg.sender);\\n        _updateRandomizerAddress(_randomizerContract);\\n        // set AdminACL management contract as owner\\n        _transferOwnership(_adminACLContract);\\n        // initialize default base URI\\n        _updateDefaultBaseURI(\\\"https://token.artblocks.io/\\\");\\n        // initialize next project ID\\n        _nextProjectId = _startingProjectId;\\n        emit PlatformUpdated(FIELD_NEXT_PROJECT_ID);\\n    }\\n\\n    /**\\n     * @notice Mints a token from project `_projectId` and sets the\\n     * token's owner to `_to`. Hash may or may not be assigned to the token\\n     * during the mint transaction, depending on the randomizer contract.\\n     * @param _to Address to be the minted token's owner.\\n     * @param _projectId Project ID to mint a token on.\\n     * @param _by Purchaser of minted token.\\n     * @return _tokenId The ID of the minted token.\\n     * @dev sender must be the allowed minterContract\\n     * @dev name of function is optimized for gas usage\\n     */\\n    function mint_Ecf(\\n        address _to,\\n        uint256 _projectId,\\n        address _by\\n    ) external returns (uint256 _tokenId) {\\n        // CHECKS\\n        require(msg.sender == minterContract, \\\"Must mint from minter contract\\\");\\n        Project storage project = projects[_projectId];\\n        // load invocations into memory\\n        uint24 invocationsBefore = project.invocations;\\n        uint24 invocationsAfter;\\n        unchecked {\\n            // invocationsBefore guaranteed <= maxInvocations <= 1_000_000,\\n            // 1_000_000 << max uint24, so no possible overflow\\n            invocationsAfter = invocationsBefore + 1;\\n        }\\n        uint24 maxInvocations = project.maxInvocations;\\n\\n        require(\\n            invocationsBefore < maxInvocations,\\n            \\\"Must not exceed max invocations\\\"\\n        );\\n        require(\\n            project.active ||\\n                _by == projectIdToFinancials[_projectId].artistAddress,\\n            \\\"Project must exist and be active\\\"\\n        );\\n        require(\\n            !project.paused ||\\n                _by == projectIdToFinancials[_projectId].artistAddress,\\n            \\\"Purchases are paused.\\\"\\n        );\\n\\n        // EFFECTS\\n        // increment project's invocations\\n        project.invocations = invocationsAfter;\\n        uint256 thisTokenId;\\n        unchecked {\\n            // invocationsBefore is uint24 << max uint256. In production use,\\n            // _projectId * ONE_MILLION must be << max uint256, otherwise\\n            // tokenIdToProjectId function become invalid.\\n            // Therefore, no risk of overflow\\n            thisTokenId = (_projectId * ONE_MILLION) + invocationsBefore;\\n        }\\n\\n        // mark project as completed if hit max invocations\\n        if (invocationsAfter == maxInvocations) {\\n            _completeProject(_projectId);\\n        }\\n\\n        // INTERACTIONS\\n        _mint(_to, thisTokenId);\\n\\n        // token hash is updated by the randomizer contract on V3\\n        randomizerContract.assignTokenHash(thisTokenId);\\n\\n        // Do not need to also log `projectId` in event, as the `projectId` for\\n        // a given token can be derived from the `tokenId` with:\\n        //   projectId = tokenId / 1_000_000\\n        emit Mint(_to, thisTokenId);\\n\\n        return thisTokenId;\\n    }\\n\\n    /**\\n     * @notice Sets the hash seed for a given token ID `_tokenId`.\\n     * May only be called by the current randomizer contract.\\n     * May only be called for tokens that have not already been assigned a\\n     * non-zero hash.\\n     * @param _tokenId Token ID to set the hash for.\\n     * @param _hashSeed Hash seed to set for the token ID. Only last 12 bytes\\n     * will be used.\\n     * @dev gas-optimized function name because called during mint sequence\\n     * @dev if a separate event is required when the token hash is set, e.g.\\n     * for indexing purposes, it must be emitted by the randomizer. This is to\\n     * minimize gas when minting.\\n     */\\n    function setTokenHash_8PT(uint256 _tokenId, bytes32 _hashSeed) external {\\n        _onlyValidTokenId(_tokenId);\\n        OwnerAndHashSeed storage ownerAndHashSeed = _ownersAndHashSeeds[\\n            _tokenId\\n        ];\\n        require(\\n            msg.sender == address(randomizerContract),\\n            \\\"Only randomizer may set\\\"\\n        );\\n        require(\\n            ownerAndHashSeed.hashSeed == bytes12(0),\\n            \\\"Token hash already set\\\"\\n        );\\n        require(_hashSeed != bytes12(0), \\\"No zero hash seed\\\");\\n        ownerAndHashSeed.hashSeed = bytes12(_hashSeed);\\n    }\\n\\n    /**\\n     * @notice Allows owner (AdminACL) to revoke ownership of the contract.\\n     * Note that the contract is intended to continue to function after the\\n     * owner renounces ownership, but no new projects will be able to be added.\\n     * Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the\\n     * owner/AdminACL contract. The same is true for any dependent contracts\\n     * that also integrate with the owner/AdminACL contract (e.g. potentially\\n     * minter suite contracts, registry contracts, etc.).\\n     * After renouncing ownership, artists will be in control of updates to\\n     * their payment addresses and splits (see modifier\\n     * onlyAdminACLOrRenouncedArtist`).\\n     * While there is no currently intended reason to call this method based on\\n     * defined Art Blocks business practices, this method exists to allow\\n     * artists to continue to maintain the limited set of contract\\n     * functionality that exists post-project-lock in an environment in which\\n     * there is no longer an admin maintaining this smart contract.\\n     * @dev This function is intended to be called directly by the AdminACL,\\n     * not by an address allowed by the AdminACL contract.\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        // broadcast that new projects are no longer allowed (if not already)\\n        _forbidNewProjects();\\n        // renounce ownership viw Ownable\\n        Ownable.renounceOwnership();\\n    }\\n\\n    /**\\n     * @notice Updates reference to Art Blocks Curation Registry contract.\\n     * @param _artblocksCurationRegistryAddress Address of new Curation\\n     * Registry.\\n     */\\n    function updateArtblocksCurationRegistryAddress(\\n        address _artblocksCurationRegistryAddress\\n    ) external {\\n        _onlyAdminACL(this.updateArtblocksCurationRegistryAddress.selector);\\n        _onlyNonZeroAddress(_artblocksCurationRegistryAddress);\\n        artblocksCurationRegistryAddress = _artblocksCurationRegistryAddress;\\n        emit PlatformUpdated(FIELD_ARTBLOCKS_CURATION_REGISTRY_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Updates reference to Art Blocks Dependency Registry contract.\\n     * @param _artblocksDependencyRegistryAddress Address of new Dependency\\n     * Registry.\\n     */\\n    function updateArtblocksDependencyRegistryAddress(\\n        address _artblocksDependencyRegistryAddress\\n    ) external {\\n        _onlyAdminACL(this.updateArtblocksDependencyRegistryAddress.selector);\\n        _onlyNonZeroAddress(_artblocksDependencyRegistryAddress);\\n        artblocksDependencyRegistryAddress = _artblocksDependencyRegistryAddress;\\n        emit PlatformUpdated(FIELD_ARTBLOCKS_DEPENDENCY_REGISTRY_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Updates artblocksPrimarySalesAddress to\\n     * `_artblocksPrimarySalesAddress`.\\n     * @param _artblocksPrimarySalesAddress Address of new primary sales\\n     * payment address.\\n     */\\n    function updateArtblocksPrimarySalesAddress(\\n        address payable _artblocksPrimarySalesAddress\\n    ) external {\\n        _onlyAdminACL(this.updateArtblocksPrimarySalesAddress.selector);\\n        _onlyNonZeroAddress(_artblocksPrimarySalesAddress);\\n        _updateArtblocksPrimarySalesAddress(_artblocksPrimarySalesAddress);\\n    }\\n\\n    /**\\n     * @notice Updates Art Blocks secondary sales royalty payment address to\\n     * `_artblocksSecondarySalesAddress`.\\n     * @param _artblocksSecondarySalesAddress Address of new secondary sales\\n     * payment address.\\n     */\\n    function updateArtblocksSecondarySalesAddress(\\n        address payable _artblocksSecondarySalesAddress\\n    ) external {\\n        _onlyAdminACL(this.updateArtblocksSecondarySalesAddress.selector);\\n        _onlyNonZeroAddress(_artblocksSecondarySalesAddress);\\n        _updateArtblocksSecondarySalesAddress(_artblocksSecondarySalesAddress);\\n    }\\n\\n    /**\\n     * @notice Updates Art Blocks primary sales revenue percentage to\\n     * `artblocksPrimarySalesPercentage_`.\\n     * @param artblocksPrimarySalesPercentage_ New primary sales revenue\\n     * percentage.\\n     */\\n    function updateArtblocksPrimarySalesPercentage(\\n        uint256 artblocksPrimarySalesPercentage_\\n    ) external {\\n        _onlyAdminACL(this.updateArtblocksPrimarySalesPercentage.selector);\\n        require(\\n            artblocksPrimarySalesPercentage_ <=\\n                ART_BLOCKS_MAX_PRIMARY_SALES_PERCENTAGE,\\n            \\\"Max of ART_BLOCKS_MAX_PRIMARY_SALES_PERCENTAGE percent\\\"\\n        );\\n        _artblocksPrimarySalesPercentage = uint8(\\n            artblocksPrimarySalesPercentage_\\n        );\\n        emit PlatformUpdated(FIELD_ARTBLOCKS_PRIMARY_SALES_PERCENTAGE);\\n    }\\n\\n    /**\\n     * @notice Updates Art Blocks secondary sales royalty Basis Points to\\n     * `_artblocksSecondarySalesBPS`.\\n     * @param _artblocksSecondarySalesBPS New secondary sales royalty Basis\\n     * points.\\n     * @dev Due to secondary royalties being ultimately enforced via social\\n     * consensus, no hard upper limit is imposed on the BPS value, other than\\n     * <= 100% royalty, which would not make mathematical sense. Realistically,\\n     * changing this value is expected to either never occur, or be a rare\\n     * occurrence.\\n     */\\n    function updateArtblocksSecondarySalesBPS(\\n        uint256 _artblocksSecondarySalesBPS\\n    ) external {\\n        _onlyAdminACL(this.updateArtblocksSecondarySalesBPS.selector);\\n        require(\\n            _artblocksSecondarySalesBPS <= ART_BLOCKS_MAX_SECONDARY_SALES_BPS,\\n            \\\"Max of ART_BLOCKS_MAX_SECONDARY_SALES_BPS BPS\\\"\\n        );\\n        artblocksSecondarySalesBPS = _artblocksSecondarySalesBPS;\\n        emit PlatformUpdated(FIELD_ARTBLOCKS_SECONDARY_SALES_BPS);\\n    }\\n\\n    /**\\n     * @notice Updates minter to `_address`.\\n     * @param _address Address of new minter.\\n     */\\n    function updateMinterContract(address _address) external {\\n        _onlyAdminACL(this.updateMinterContract.selector);\\n        _onlyNonZeroAddress(_address);\\n        minterContract = _address;\\n        emit MinterUpdated(_address);\\n    }\\n\\n    /**\\n     * @notice Updates randomizer to `_randomizerAddress`.\\n     * @param _randomizerAddress Address of new randomizer.\\n     */\\n    function updateRandomizerAddress(address _randomizerAddress) external {\\n        _onlyAdminACL(this.updateRandomizerAddress.selector);\\n        _onlyNonZeroAddress(_randomizerAddress);\\n        _updateRandomizerAddress(_randomizerAddress);\\n    }\\n\\n    /**\\n     * @notice Toggles project `_projectId` as active/inactive.\\n     * @param _projectId Project ID to be toggled.\\n     */\\n    function toggleProjectIsActive(uint256 _projectId) external {\\n        _onlyAdminACL(this.toggleProjectIsActive.selector);\\n        _onlyValidProjectId(_projectId);\\n        projects[_projectId].active = !projects[_projectId].active;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_ACTIVE);\\n    }\\n\\n    /**\\n     * @notice Artist proposes updated set of artist address, additional payee\\n     * addresses, and percentage splits for project `_projectId`. Addresses and\\n     * percentages do not have to all be changed, but they must all be defined\\n     * as a complete set.\\n     * Note that if the artist is only proposing a change to the payee percentage\\n     * splits, without modifying the payee addresses, the proposal will be\\n     * automatically approved and the new splits will become active immediately.\\n     * Automatic approval will also be granted if the artist is only removing\\n     * additional payee addresses, without adding any new ones.\\n     * Also note that if the artist is proposing sending funds to the zero\\n     * address, this function will revert and the proposal will not be created.\\n     * @param _projectId Project ID.\\n     * @param _artistAddress Artist address that controls the project, and may\\n     * receive payments.\\n     * @param _additionalPayeePrimarySales Address that may receive a\\n     * percentage split of the artist's primary sales revenue.\\n     * @param _additionalPayeePrimarySalesPercentage Percent of artist's\\n     * portion of primary sale revenue that will be split to address\\n     * `_additionalPayeePrimarySales`.\\n     * @param _additionalPayeeSecondarySales Address that may receive a percentage\\n     * split of the secondary sales royalties.\\n     * @param _additionalPayeeSecondarySalesPercentage Percent of artist's portion\\n     * of secondary sale royalties that will be split to address\\n     * `_additionalPayeeSecondarySales`.\\n     * @dev `_artistAddress` must be a valid address (non-zero-address), but it\\n     * is intentionally allowable for `_additionalPayee{Primary,Secondaary}Sales`\\n     * and their associated percentages to be zero'd out by the controlling artist.\\n     */\\n    function proposeArtistPaymentAddressesAndSplits(\\n        uint256 _projectId,\\n        address payable _artistAddress,\\n        address payable _additionalPayeePrimarySales,\\n        uint256 _additionalPayeePrimarySalesPercentage,\\n        address payable _additionalPayeeSecondarySales,\\n        uint256 _additionalPayeeSecondarySalesPercentage\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyArtist(_projectId);\\n        _onlyNonZeroAddress(_artistAddress);\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            _projectId\\n        ];\\n        // checks\\n        require(\\n            _additionalPayeePrimarySalesPercentage <= ONE_HUNDRED &&\\n                _additionalPayeeSecondarySalesPercentage <= ONE_HUNDRED,\\n            \\\"Max of 100%\\\"\\n        );\\n        require(\\n            _additionalPayeePrimarySalesPercentage == 0 ||\\n                _additionalPayeePrimarySales != address(0),\\n            \\\"Primary payee is zero address\\\"\\n        );\\n        require(\\n            _additionalPayeeSecondarySalesPercentage == 0 ||\\n                _additionalPayeeSecondarySales != address(0),\\n            \\\"Secondary payee is zero address\\\"\\n        );\\n        // effects\\n        // emit event for off-chain indexing\\n        // note: always emit a proposal event, even in the pathway of\\n        // automatic approval, to simplify indexing expectations\\n        emit ProposedArtistAddressesAndSplits(\\n            _projectId,\\n            _artistAddress,\\n            _additionalPayeePrimarySales,\\n            _additionalPayeePrimarySalesPercentage,\\n            _additionalPayeeSecondarySales,\\n            _additionalPayeeSecondarySalesPercentage\\n        );\\n        // automatically accept if no proposed addresses modifications, or if\\n        // the proposal only removes payee addresses.\\n        // store proposal hash on-chain, only if not automatic accept\\n        bool automaticAccept;\\n        {\\n            // block scope to avoid stack too deep error\\n            bool artistUnchanged = _artistAddress ==\\n                projectFinance.artistAddress;\\n            bool additionalPrimaryUnchangedOrRemoved = (_additionalPayeePrimarySales ==\\n                    projectFinance.additionalPayeePrimarySales) ||\\n                    (_additionalPayeePrimarySales == address(0));\\n            bool additionalSecondaryUnchangedOrRemoved = (_additionalPayeeSecondarySales ==\\n                    projectFinance.additionalPayeeSecondarySales) ||\\n                    (_additionalPayeeSecondarySales == address(0));\\n            automaticAccept =\\n                artistUnchanged &&\\n                additionalPrimaryUnchangedOrRemoved &&\\n                additionalSecondaryUnchangedOrRemoved;\\n        }\\n        if (automaticAccept) {\\n            // clear any previously proposed values\\n            proposedArtistAddressesAndSplitsHash[_projectId] = bytes32(0);\\n            // update storage\\n            // (artist address cannot change during automatic accept)\\n            projectFinance\\n                .additionalPayeePrimarySales = _additionalPayeePrimarySales;\\n            // safe to cast as uint8 as max is 100%, max uint8 is 255\\n            projectFinance.additionalPayeePrimarySalesPercentage = uint8(\\n                _additionalPayeePrimarySalesPercentage\\n            );\\n            projectFinance\\n                .additionalPayeeSecondarySales = _additionalPayeeSecondarySales;\\n            // safe to cast as uint8 as max is 100%, max uint8 is 255\\n            projectFinance.additionalPayeeSecondarySalesPercentage = uint8(\\n                _additionalPayeeSecondarySalesPercentage\\n            );\\n            // emit event for off-chain indexing\\n            emit AcceptedArtistAddressesAndSplits(_projectId);\\n        } else {\\n            proposedArtistAddressesAndSplitsHash[_projectId] = keccak256(\\n                abi.encode(\\n                    _artistAddress,\\n                    _additionalPayeePrimarySales,\\n                    _additionalPayeePrimarySalesPercentage,\\n                    _additionalPayeeSecondarySales,\\n                    _additionalPayeeSecondarySalesPercentage\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin accepts a proposed set of updated artist address,\\n     * additional payee addresses, and percentage splits for project\\n     * `_projectId`. Addresses and percentages do not have to all be changed,\\n     * but they must all be defined as a complete set.\\n     * @param _projectId Project ID.\\n     * @param _artistAddress Artist address that controls the project, and may\\n     * receive payments.\\n     * @param _additionalPayeePrimarySales Address that may receive a\\n     * percentage split of the artist's primary sales revenue.\\n     * @param _additionalPayeePrimarySalesPercentage Percent of artist's\\n     * portion of primary sale revenue that will be split to address\\n     * `_additionalPayeePrimarySales`.\\n     * @param _additionalPayeeSecondarySales Address that may receive a percentage\\n     * split of the secondary sales royalties.\\n     * @param _additionalPayeeSecondarySalesPercentage Percent of artist's portion\\n     * of secondary sale royalties that will be split to address\\n     * `_additionalPayeeSecondarySales`.\\n     * @dev this must be called by the Admin ACL contract, and must only accept\\n     * the most recent proposed values for a given project (validated on-chain\\n     * by comparing the hash of the proposed and accepted values).\\n     * @dev `_artistAddress` must be a valid address (non-zero-address), but it\\n     * is intentionally allowable for `_additionalPayee{Primary,Secondaary}Sales`\\n     * and their associated percentages to be zero'd out by the controlling artist.\\n     */\\n    function adminAcceptArtistAddressesAndSplits(\\n        uint256 _projectId,\\n        address payable _artistAddress,\\n        address payable _additionalPayeePrimarySales,\\n        uint256 _additionalPayeePrimarySalesPercentage,\\n        address payable _additionalPayeeSecondarySales,\\n        uint256 _additionalPayeeSecondarySalesPercentage\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyAdminACLOrRenouncedArtist(\\n            _projectId,\\n            this.adminAcceptArtistAddressesAndSplits.selector\\n        );\\n        _onlyNonZeroAddress(_artistAddress);\\n        // checks\\n        require(\\n            proposedArtistAddressesAndSplitsHash[_projectId] ==\\n                keccak256(\\n                    abi.encode(\\n                        _artistAddress,\\n                        _additionalPayeePrimarySales,\\n                        _additionalPayeePrimarySalesPercentage,\\n                        _additionalPayeeSecondarySales,\\n                        _additionalPayeeSecondarySalesPercentage\\n                    )\\n                ),\\n            \\\"Must match artist proposal\\\"\\n        );\\n        // effects\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            _projectId\\n        ];\\n        projectFinance.artistAddress = _artistAddress;\\n        projectFinance\\n            .additionalPayeePrimarySales = _additionalPayeePrimarySales;\\n        projectFinance.additionalPayeePrimarySalesPercentage = uint8(\\n            _additionalPayeePrimarySalesPercentage\\n        );\\n        projectFinance\\n            .additionalPayeeSecondarySales = _additionalPayeeSecondarySales;\\n        projectFinance.additionalPayeeSecondarySalesPercentage = uint8(\\n            _additionalPayeeSecondarySalesPercentage\\n        );\\n        // clear proposed values\\n        proposedArtistAddressesAndSplitsHash[_projectId] = bytes32(0);\\n        // emit event for off-chain indexing\\n        emit AcceptedArtistAddressesAndSplits(_projectId);\\n    }\\n\\n    /**\\n     * @notice Updates artist of project `_projectId` to `_artistAddress`.\\n     * This is to only be used in the event that the artist address is\\n     * compromised or sanctioned.\\n     * @param _projectId Project ID.\\n     * @param _artistAddress New artist address.\\n     */\\n    function updateProjectArtistAddress(\\n        uint256 _projectId,\\n        address payable _artistAddress\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyAdminACLOrRenouncedArtist(\\n            _projectId,\\n            this.updateProjectArtistAddress.selector\\n        );\\n        _onlyNonZeroAddress(_artistAddress);\\n        projectIdToFinancials[_projectId].artistAddress = _artistAddress;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_ARTIST_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Toggles paused state of project `_projectId`.\\n     * @param _projectId Project ID to be toggled.\\n     */\\n    function toggleProjectIsPaused(uint256 _projectId) external {\\n        _onlyArtist(_projectId);\\n        projects[_projectId].paused = !projects[_projectId].paused;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_PAUSED);\\n    }\\n\\n    /**\\n     * @notice Adds new project `_projectName` by `_artistAddress`.\\n     * @param _projectName Project name.\\n     * @param _artistAddress Artist's address.\\n     * @dev token price now stored on minter\\n     */\\n    function addProject(\\n        string memory _projectName,\\n        address payable _artistAddress\\n    ) external {\\n        _onlyAdminACL(this.addProject.selector);\\n        _onlyNonEmptyString(_projectName);\\n        _onlyNonZeroAddress(_artistAddress);\\n        require(!newProjectsForbidden, \\\"New projects forbidden\\\");\\n        uint256 projectId = _nextProjectId;\\n        projectIdToFinancials[projectId].artistAddress = _artistAddress;\\n        projects[projectId].name = _projectName;\\n        projects[projectId].paused = true;\\n        projects[projectId].maxInvocations = ONE_MILLION_UINT24;\\n        projects[projectId].projectBaseURI = defaultBaseURI;\\n\\n        _nextProjectId = uint248(projectId) + 1;\\n        emit ProjectUpdated(projectId, FIELD_PROJECT_CREATED);\\n    }\\n\\n    /**\\n     * @notice Forever forbids new projects from being added to this contract.\\n     */\\n    function forbidNewProjects() external {\\n        _onlyAdminACL(this.forbidNewProjects.selector);\\n        require(!newProjectsForbidden, \\\"Already forbidden\\\");\\n        _forbidNewProjects();\\n    }\\n\\n    /**\\n     * @notice Updates name of project `_projectId` to be `_projectName`.\\n     * @param _projectId Project ID.\\n     * @param _projectName New project name.\\n     */\\n    function updateProjectName(\\n        uint256 _projectId,\\n        string memory _projectName\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.updateProjectName.selector);\\n        _onlyNonEmptyString(_projectName);\\n        projects[_projectId].name = _projectName;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_NAME);\\n    }\\n\\n    /**\\n     * @notice Updates artist name for project `_projectId` to be\\n     * `_projectArtistName`.\\n     * @param _projectId Project ID.\\n     * @param _projectArtistName New artist name.\\n     */\\n    function updateProjectArtistName(\\n        uint256 _projectId,\\n        string memory _projectArtistName\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectArtistName.selector\\n        );\\n        _onlyNonEmptyString(_projectArtistName);\\n        projects[_projectId].artist = _projectArtistName;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_ARTIST_NAME);\\n    }\\n\\n    /**\\n     * @notice Updates artist secondary market royalties for project\\n     * `_projectId` to be `_secondMarketRoyalty` percent.\\n     * This DOES NOT include the secondary market royalty percentages collected\\n     * by Art Blocks; this is only the total percentage of royalties that will\\n     * be split to artist and additionalSecondaryPayee.\\n     * @param _projectId Project ID.\\n     * @param _secondMarketRoyalty Percent of secondary sales revenue that will\\n     * be split to artist and additionalSecondaryPayee. This must be less than\\n     * or equal to ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE percent.\\n     */\\n    function updateProjectSecondaryMarketRoyaltyPercentage(\\n        uint256 _projectId,\\n        uint256 _secondMarketRoyalty\\n    ) external {\\n        _onlyArtist(_projectId);\\n        require(\\n            _secondMarketRoyalty <= ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE,\\n            \\\"Max of ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE percent\\\"\\n        );\\n        projectIdToFinancials[_projectId]\\n            .secondaryMarketRoyaltyPercentage = uint8(_secondMarketRoyalty);\\n        emit ProjectUpdated(\\n            _projectId,\\n            FIELD_PROJECT_SECONDARY_MARKET_ROYALTY_PERCENTAGE\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates description of project `_projectId`.\\n     * Only artist may call when unlocked, only admin may call when locked.\\n     * Note: The BytecodeStorage library is used to store the description to\\n     * reduce initial upload cost, however, even minor edits will require an\\n     * expensive, entirely new bytecode storage contract to be deployed instead\\n     * of relatively cheap updates to already-warm storage slots. This results\\n     * in an increased gas cost for minor edits to the description after the\\n     * initial upload, but an overall decrease in gas cost for projects with\\n     * less than ~3-5 edits (depending on the length of the description).\\n     * @param _projectId Project ID.\\n     * @param _projectDescription New project description.\\n     */\\n    function updateProjectDescription(\\n        uint256 _projectId,\\n        string memory _projectDescription\\n    ) external {\\n        // checks\\n        require(\\n            _projectUnlocked(_projectId)\\n                ? msg.sender == projectIdToFinancials[_projectId].artistAddress\\n                : adminACLAllowed(\\n                    msg.sender,\\n                    address(this),\\n                    this.updateProjectDescription.selector\\n                ),\\n            \\\"Only artist when unlocked, owner when locked\\\"\\n        );\\n        // effects\\n        // store description in contract bytecode, replacing reference address from\\n        // the old storage description with the newly created one\\n        projects[_projectId].descriptionAddress = _projectDescription\\n            .writeToBytecode();\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_DESCRIPTION);\\n    }\\n\\n    /**\\n     * @notice Updates website of project `_projectId` to be `_projectWebsite`.\\n     * @param _projectId Project ID.\\n     * @param _projectWebsite New project website.\\n     * @dev It is intentionally allowed for this to be set to the empty string.\\n     */\\n    function updateProjectWebsite(\\n        uint256 _projectId,\\n        string memory _projectWebsite\\n    ) external {\\n        _onlyArtist(_projectId);\\n        projects[_projectId].website = _projectWebsite;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_WEBSITE);\\n    }\\n\\n    /**\\n     * @notice Updates license for project `_projectId`.\\n     * @param _projectId Project ID.\\n     * @param _projectLicense New project license.\\n     */\\n    function updateProjectLicense(\\n        uint256 _projectId,\\n        string memory _projectLicense\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.updateProjectLicense.selector);\\n        _onlyNonEmptyString(_projectLicense);\\n        projects[_projectId].license = _projectLicense;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_LICENSE);\\n    }\\n\\n    /**\\n     * @notice Updates maximum invocations for project `_projectId` to\\n     * `_maxInvocations`. Maximum invocations may only be decreased by the\\n     * artist, and must be greater than or equal to current invocations.\\n     * New projects are created with maximum invocations of 1 million by\\n     * default.\\n     * @param _projectId Project ID.\\n     * @param _maxInvocations New maximum invocations.\\n     */\\n    function updateProjectMaxInvocations(\\n        uint256 _projectId,\\n        uint24 _maxInvocations\\n    ) external {\\n        _onlyArtist(_projectId);\\n        // CHECKS\\n        Project storage project = projects[_projectId];\\n        uint256 _invocations = project.invocations;\\n        require(\\n            (_maxInvocations < project.maxInvocations),\\n            \\\"maxInvocations may only be decreased\\\"\\n        );\\n        require(\\n            _maxInvocations >= _invocations,\\n            \\\"Only max invocations gte current invocations\\\"\\n        );\\n        // EFFECTS\\n        project.maxInvocations = _maxInvocations;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_MAX_INVOCATIONS);\\n\\n        // register completed timestamp if action completed the project\\n        if (_maxInvocations == _invocations) {\\n            _completeProject(_projectId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a script to project `_projectId`.\\n     * @param _projectId Project to be updated.\\n     * @param _script Script to be added. Required to be a non-empty string,\\n     * but no further validation is performed.\\n     */\\n    function addProjectScript(\\n        uint256 _projectId,\\n        string memory _script\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.addProjectScript.selector);\\n        _onlyNonEmptyString(_script);\\n        Project storage project = projects[_projectId];\\n        // store script in contract bytecode\\n        project.scriptBytecodeAddresses[project.scriptCount] = _script\\n            .writeToBytecode();\\n        project.scriptCount = project.scriptCount + 1;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_SCRIPT);\\n    }\\n\\n    /**\\n     * @notice Updates script for project `_projectId` at script ID `_scriptId`.\\n     * @param _projectId Project to be updated.\\n     * @param _scriptId Script ID to be updated.\\n     * @param _script The updated script value. Required to be a non-empty\\n     * string, but no further validation is performed.\\n     */\\n    function updateProjectScript(\\n        uint256 _projectId,\\n        uint256 _scriptId,\\n        string memory _script\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.updateProjectScript.selector);\\n        _onlyNonEmptyString(_script);\\n        Project storage project = projects[_projectId];\\n        require(_scriptId < project.scriptCount, \\\"scriptId out of range\\\");\\n        // store script in contract bytecode, replacing reference address from\\n        // the old storage contract with the newly created one\\n        project.scriptBytecodeAddresses[_scriptId] = _script.writeToBytecode();\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_SCRIPT);\\n    }\\n\\n    /**\\n     * @notice Removes last script from project `_projectId`.\\n     * @param _projectId Project to be updated.\\n     */\\n    function removeProjectLastScript(uint256 _projectId) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.removeProjectLastScript.selector\\n        );\\n        Project storage project = projects[_projectId];\\n        require(project.scriptCount > 0, \\\"there are no scripts to remove\\\");\\n        // delete reference to old storage contract address\\n        delete project.scriptBytecodeAddresses[project.scriptCount - 1];\\n        unchecked {\\n            project.scriptCount = project.scriptCount - 1;\\n        }\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_SCRIPT);\\n    }\\n\\n    /**\\n     * @notice Updates script type for project `_projectId`.\\n     * @param _projectId Project to be updated.\\n     * @param _scriptTypeAndVersion Script type and version e.g. \\\"p5js@1.0.0\\\",\\n     * as bytes32 encoded string.\\n     */\\n    function updateProjectScriptType(\\n        uint256 _projectId,\\n        bytes32 _scriptTypeAndVersion\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectScriptType.selector\\n        );\\n        Project storage project = projects[_projectId];\\n        // require exactly one @ symbol in _scriptTypeAndVersion\\n        require(\\n            _scriptTypeAndVersion.containsExactCharacterQty(\\n                AT_CHARACTER_CODE,\\n                uint8(1)\\n            ),\\n            \\\"must contain exactly one @\\\"\\n        );\\n        project.scriptTypeAndVersion = _scriptTypeAndVersion;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_SCRIPT_TYPE);\\n    }\\n\\n    /**\\n     * @notice Updates project's aspect ratio.\\n     * @param _projectId Project to be updated.\\n     * @param _aspectRatio Aspect ratio to be set. Intended to be string in the\\n     * format of a decimal, e.g. \\\"1\\\" for square, \\\"1.77777778\\\" for 16:9, etc.,\\n     * allowing for a maximum of 10 digits and one (optional) decimal separator.\\n     */\\n    function updateProjectAspectRatio(\\n        uint256 _projectId,\\n        string memory _aspectRatio\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectAspectRatio.selector\\n        );\\n        _onlyNonEmptyString(_aspectRatio);\\n        // Perform more detailed input validation for aspect ratio.\\n        bytes memory aspectRatioBytes = bytes(_aspectRatio);\\n        uint256 bytesLength = aspectRatioBytes.length;\\n        require(bytesLength <= 11, \\\"Aspect ratio format too long\\\");\\n        bool hasSeenDecimalSeparator = false;\\n        bool hasSeenNumber = false;\\n        for (uint256 i; i < bytesLength; i++) {\\n            bytes1 character = aspectRatioBytes[i];\\n            // Allow as many #s as desired.\\n            if (character >= 0x30 && character <= 0x39) {\\n                // 9-0\\n                // We need to ensure there is at least 1 `9-0` occurrence.\\n                hasSeenNumber = true;\\n                continue;\\n            }\\n            if (character == 0x2E) {\\n                // .\\n                // Allow no more than 1 `.` occurrence.\\n                if (!hasSeenDecimalSeparator) {\\n                    hasSeenDecimalSeparator = true;\\n                    continue;\\n                }\\n            }\\n            revert(\\\"Improperly formatted aspect ratio\\\");\\n        }\\n        require(hasSeenNumber, \\\"Aspect ratio has no numbers\\\");\\n\\n        projects[_projectId].aspectRatio = _aspectRatio;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_ASPECT_RATIO);\\n    }\\n\\n    /**\\n     * @notice Updates base URI for project `_projectId` to `_newBaseURI`.\\n     * This is the controlling base URI for all tokens in the project. The\\n     * contract-level defaultBaseURI is only used when initializing new\\n     * projects.\\n     * @param _projectId Project to be updated.\\n     * @param _newBaseURI New base URI.\\n     */\\n    function updateProjectBaseURI(\\n        uint256 _projectId,\\n        string memory _newBaseURI\\n    ) external {\\n        _onlyArtist(_projectId);\\n        _onlyNonEmptyString(_newBaseURI);\\n        projects[_projectId].projectBaseURI = _newBaseURI;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_BASE_URI);\\n    }\\n\\n    /**\\n     * @notice Updates default base URI to `_defaultBaseURI`. The\\n     * contract-level defaultBaseURI is only used when initializing new\\n     * projects. Token URIs are determined by their project's `projectBaseURI`.\\n     * @param _defaultBaseURI New default base URI.\\n     */\\n    function updateDefaultBaseURI(string memory _defaultBaseURI) external {\\n        _onlyAdminACL(this.updateDefaultBaseURI.selector);\\n        _onlyNonEmptyString(_defaultBaseURI);\\n        _updateDefaultBaseURI(_defaultBaseURI);\\n    }\\n\\n    /**\\n     * @notice Next project ID to be created on this contract.\\n     * @return uint256 Next project ID.\\n     */\\n    function nextProjectId() external view returns (uint256) {\\n        return _nextProjectId;\\n    }\\n\\n    /**\\n     * @notice Returns token hash for token ID `_tokenId`. Returns null if hash\\n     * has not been set.\\n     * @param _tokenId Token ID to be queried.\\n     * @return bytes32 Token hash.\\n     * @dev token hash is the keccak256 hash of the stored hash seed\\n     */\\n    function tokenIdToHash(uint256 _tokenId) external view returns (bytes32) {\\n        bytes12 _hashSeed = _ownersAndHashSeeds[_tokenId].hashSeed;\\n        if (_hashSeed == 0) {\\n            return 0;\\n        }\\n        return keccak256(abi.encode(_hashSeed));\\n    }\\n\\n    /**\\n     * @notice Returns token hash **seed** for token ID `_tokenId`. Returns\\n     * null if hash seed has not been set. The hash seed id the bytes12 value\\n     * which is hashed to produce the token hash.\\n     * @param _tokenId Token ID to be queried.\\n     * @return bytes12 Token hash seed.\\n     * @dev token hash seed is keccak256 hashed to give the token hash\\n     */\\n    function tokenIdToHashSeed(\\n        uint256 _tokenId\\n    ) external view returns (bytes12) {\\n        return _ownersAndHashSeeds[_tokenId].hashSeed;\\n    }\\n\\n    /**\\n     * @notice View function returning Art Blocks portion of primary sales, in\\n     * percent.\\n     * @return uint256 Art Blocks portion of primary sales, in percent.\\n     */\\n    function artblocksPrimarySalesPercentage() external view returns (uint256) {\\n        return _artblocksPrimarySalesPercentage;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's address for project\\n     * `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return address Artist's address.\\n     */\\n    function projectIdToArtistAddress(\\n        uint256 _projectId\\n    ) external view returns (address payable) {\\n        return projectIdToFinancials[_projectId].artistAddress;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's secondary market royalty\\n     * percentage for project `_projectId`.\\n     * This does not include Art Blocks portion of secondary market royalties.\\n     * @param _projectId Project ID to be queried.\\n     * @return uint256 Artist's secondary market royalty percentage.\\n     */\\n    function projectIdToSecondaryMarketRoyaltyPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256) {\\n        return\\n            projectIdToFinancials[_projectId].secondaryMarketRoyaltyPercentage;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's additional payee address for\\n     * primary sales, for project `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return address Artist's additional payee address for primary sales.\\n     */\\n    function projectIdToAdditionalPayeePrimarySales(\\n        uint256 _projectId\\n    ) external view returns (address payable) {\\n        return projectIdToFinancials[_projectId].additionalPayeePrimarySales;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's additional payee primary sales\\n     * percentage, for project `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return uint256 Artist's additional payee primary sales percentage.\\n     */\\n    function projectIdToAdditionalPayeePrimarySalesPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256) {\\n        return\\n            projectIdToFinancials[_projectId]\\n                .additionalPayeePrimarySalesPercentage;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's additional payee address for\\n     * secondary sales, for project `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return address payable Artist's additional payee address for secondary\\n     * sales.\\n     */\\n    function projectIdToAdditionalPayeeSecondarySales(\\n        uint256 _projectId\\n    ) external view returns (address payable) {\\n        return projectIdToFinancials[_projectId].additionalPayeeSecondarySales;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's additional payee secondary\\n     * sales percentage, for project `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return uint256 Artist's additional payee secondary sales percentage.\\n     */\\n    function projectIdToAdditionalPayeeSecondarySalesPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256) {\\n        return\\n            projectIdToFinancials[_projectId]\\n                .additionalPayeeSecondarySalesPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns project details for project `_projectId`.\\n     * @param _projectId Project to be queried.\\n     * @return projectName Name of project\\n     * @return artist Artist of project\\n     * @return description Project description\\n     * @return website Project website\\n     * @return license Project license\\n     * @dev this function was named projectDetails prior to V3 core contract.\\n     */\\n    function projectDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory projectName,\\n            string memory artist,\\n            string memory description,\\n            string memory website,\\n            string memory license\\n        )\\n    {\\n        Project storage project = projects[_projectId];\\n        projectName = project.name;\\n        artist = project.artist;\\n        address projectDescriptionBytecodeAddress = project.descriptionAddress;\\n        if (projectDescriptionBytecodeAddress == address(0)) {\\n            description = \\\"\\\";\\n        } else {\\n            description = _readFromBytecode(projectDescriptionBytecodeAddress);\\n        }\\n        website = project.website;\\n        license = project.license;\\n    }\\n\\n    /**\\n     * @notice Returns project state data for project `_projectId`.\\n     * @param _projectId Project to be queried\\n     * @return invocations Current number of invocations\\n     * @return maxInvocations Maximum allowed invocations\\n     * @return active Boolean representing if project is currently active\\n     * @return paused Boolean representing if project is paused\\n     * @return completedTimestamp zero if project not complete, otherwise\\n     * timestamp of project completion.\\n     * @return locked Boolean representing if project is locked\\n     * @dev price and currency info are located on minter contracts\\n     */\\n    function projectStateData(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 invocations,\\n            uint256 maxInvocations,\\n            bool active,\\n            bool paused,\\n            uint256 completedTimestamp,\\n            bool locked\\n        )\\n    {\\n        Project storage project = projects[_projectId];\\n        invocations = project.invocations;\\n        maxInvocations = project.maxInvocations;\\n        active = project.active;\\n        paused = project.paused;\\n        completedTimestamp = project.completedTimestamp;\\n        locked = !_projectUnlocked(_projectId);\\n    }\\n\\n    /**\\n     * @notice Returns artist payment information for project `_projectId`.\\n     * @param _projectId Project to be queried\\n     * @return artistAddress Project Artist's address\\n     * @return additionalPayeePrimarySales Additional payee address for primary\\n     * sales\\n     * @return additionalPayeePrimarySalesPercentage Percentage of artist revenue\\n     * to be sent to the additional payee address for primary sales\\n     * @return additionalPayeeSecondarySales Additional payee address for secondary\\n     * sales royalties\\n     * @return additionalPayeeSecondarySalesPercentage Percentage of artist revenue\\n     * to be sent to the additional payee address for secondary sales royalties\\n     * @return secondaryMarketRoyaltyPercentage Royalty percentage to be sent to\\n     * combination of artist and additional payee. This does not include the\\n     * platform's percentage of secondary sales royalties, which is defined by\\n     * `artblocksSecondarySalesBPS`.\\n     */\\n    function projectArtistPaymentInfo(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            address artistAddress,\\n            address additionalPayeePrimarySales,\\n            uint256 additionalPayeePrimarySalesPercentage,\\n            address additionalPayeeSecondarySales,\\n            uint256 additionalPayeeSecondarySalesPercentage,\\n            uint256 secondaryMarketRoyaltyPercentage\\n        )\\n    {\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            _projectId\\n        ];\\n        artistAddress = projectFinance.artistAddress;\\n        additionalPayeePrimarySales = projectFinance\\n            .additionalPayeePrimarySales;\\n        additionalPayeePrimarySalesPercentage = projectFinance\\n            .additionalPayeePrimarySalesPercentage;\\n        additionalPayeeSecondarySales = projectFinance\\n            .additionalPayeeSecondarySales;\\n        additionalPayeeSecondarySalesPercentage = projectFinance\\n            .additionalPayeeSecondarySalesPercentage;\\n        secondaryMarketRoyaltyPercentage = projectFinance\\n            .secondaryMarketRoyaltyPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns script information for project `_projectId`.\\n     * @param _projectId Project to be queried.\\n     * @return scriptTypeAndVersion Project's script type and version\\n     * (e.g. \\\"p5js(atSymbol)1.0.0\\\")\\n     * @return aspectRatio Aspect ratio of project (e.g. \\\"1\\\" for square,\\n     * \\\"1.77777778\\\" for 16:9, etc.)\\n     * @return scriptCount Count of scripts for project\\n     */\\n    function projectScriptDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory scriptTypeAndVersion,\\n            string memory aspectRatio,\\n            uint256 scriptCount\\n        )\\n    {\\n        Project storage project = projects[_projectId];\\n        scriptTypeAndVersion = project.scriptTypeAndVersion.toString();\\n        aspectRatio = project.aspectRatio;\\n        scriptCount = project.scriptCount;\\n    }\\n\\n    /**\\n     * @notice Returns address with bytecode containing project script for\\n     * project `_projectId` at script index `_index`.\\n     */\\n    function projectScriptBytecodeAddressByIndex(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external view returns (address) {\\n        return projects[_projectId].scriptBytecodeAddresses[_index];\\n    }\\n\\n    /**\\n     * @notice Returns script for project `_projectId` at script index `_index`.\\n     * @param _projectId Project to be queried.\\n     * @param _index Index of script to be queried.\\n     */\\n    function projectScriptByIndex(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external view returns (string memory) {\\n        Project storage project = projects[_projectId];\\n        // If trying to access an out-of-index script, return the empty string.\\n        if (_index >= project.scriptCount) {\\n            return \\\"\\\";\\n        }\\n        return _readFromBytecode(project.scriptBytecodeAddresses[_index]);\\n    }\\n\\n    /**\\n     * @notice Returns base URI for project `_projectId`.\\n     * @param _projectId Project to be queried.\\n     * @return projectBaseURI Base URI for project\\n     */\\n    function projectURIInfo(\\n        uint256 _projectId\\n    ) external view returns (string memory projectBaseURI) {\\n        projectBaseURI = projects[_projectId].projectBaseURI;\\n    }\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) function returning if `_minter` is\\n     * minterContract.\\n     * @param _minter Address to be queried.\\n     * @return bool Boolean representing if `_minter` is minterContract.\\n     */\\n    function isMintWhitelisted(address _minter) external view returns (bool) {\\n        return (minterContract == _minter);\\n    }\\n\\n    /**\\n     * @notice Gets qty of randomizers in history of all randomizers used by\\n     * this core contract. If a randomizer is switched away from then back to,\\n     * it will show up in the history twice.\\n     * @return randomizerHistoryCount Count of randomizers in history\\n     */\\n    function numHistoricalRandomizers() external view returns (uint256) {\\n        return _historicalRandomizerAddresses.length;\\n    }\\n\\n    /**\\n     * @notice Gets address of randomizer at index `_index` in history of all\\n     * randomizers used by this core contract. Index is zero-based.\\n     * @param _index Historical index of randomizer to be queried.\\n     * @return randomizerAddress Address of randomizer at index `_index`.\\n     * @dev If a randomizer is switched away from and then switched back to, it\\n     * will show up in the history twice.\\n     */\\n    function getHistoricalRandomizerAt(\\n        uint256 _index\\n    ) external view returns (address) {\\n        require(\\n            _index < _historicalRandomizerAddresses.length,\\n            \\\"Index out of bounds\\\"\\n        );\\n        return _historicalRandomizerAddresses[_index];\\n    }\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) function returning Art Blocks\\n     * primary sales payment address (now called artblocksPrimarySalesAddress).\\n     * @return address payable Art Blocks primary sales payment address\\n     */\\n    function artblocksAddress() external view returns (address payable) {\\n        return artblocksPrimarySalesAddress;\\n    }\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) function returning Art Blocks\\n     * primary sales percentage (now called artblocksPrimarySalesPercentage).\\n     * @return uint256 Art Blocks primary sales percentage\\n     */\\n    function artblocksPercentage() external view returns (uint256) {\\n        return _artblocksPrimarySalesPercentage;\\n    }\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) function.\\n     * Gets artist + artist's additional payee royalty data for token ID\\n     `_tokenId`.\\n     * WARNING: Does not include Art Blocks portion of royalties.\\n     * @param _tokenId Token ID to be queried.\\n     * @return artistAddress Artist's payment address\\n     * @return additionalPayee Additional payee's payment address\\n     * @return additionalPayeePercentage Percentage of artist revenue\\n     * to be sent to the additional payee's address\\n     * @return royaltyFeeByID Total royalty percentage to be sent to\\n     * combination of artist and additional payee\\n     * @dev Does not include Art Blocks portion of royalties.\\n     */\\n    function getRoyaltyData(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            address artistAddress,\\n            address additionalPayee,\\n            uint256 additionalPayeePercentage,\\n            uint256 royaltyFeeByID\\n        )\\n    {\\n        uint256 projectId = tokenIdToProjectId(_tokenId);\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            projectId\\n        ];\\n        artistAddress = projectFinance.artistAddress;\\n        additionalPayee = projectFinance.additionalPayeeSecondarySales;\\n        additionalPayeePercentage = projectFinance\\n            .additionalPayeeSecondarySalesPercentage;\\n        royaltyFeeByID = projectFinance.secondaryMarketRoyaltyPercentage;\\n    }\\n\\n    /**\\n     * @notice Gets royalty Basis Points (BPS) for token ID `_tokenId`.\\n     * This conforms to the IManifold interface designated in the Royalty\\n     * Registry's RoyaltyEngineV1.sol contract.\\n     * ref: https://github.com/manifoldxyz/royalty-registry-solidity\\n     * @param _tokenId Token ID to be queried.\\n     * @return recipients Array of royalty payment recipients\\n     * @return bps Array of Basis Points (BPS) allocated to each recipient,\\n     * aligned by index.\\n     * @dev reverts if invalid _tokenId\\n     * @dev only returns recipients that have a non-zero BPS allocation\\n     */\\n    function getRoyalties(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (address payable[] memory recipients, uint256[] memory bps)\\n    {\\n        _onlyValidTokenId(_tokenId);\\n        // initialize arrays with maximum potential length\\n        recipients = new address payable[](3);\\n        bps = new uint256[](3);\\n\\n        uint256 projectId = tokenIdToProjectId(_tokenId);\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            projectId\\n        ];\\n        // load values into memory\\n        uint256 royaltyPercentageForArtistAndAdditional = projectFinance\\n            .secondaryMarketRoyaltyPercentage;\\n        uint256 additionalPayeePercentage = projectFinance\\n            .additionalPayeeSecondarySalesPercentage;\\n        // calculate BPS = percentage * 100\\n        uint256 artistBPS = (ONE_HUNDRED - additionalPayeePercentage) *\\n            royaltyPercentageForArtistAndAdditional;\\n\\n        uint256 additionalBPS = additionalPayeePercentage *\\n            royaltyPercentageForArtistAndAdditional;\\n        uint256 artblocksBPS = artblocksSecondarySalesBPS;\\n        // populate arrays\\n        uint256 payeeCount;\\n        if (artistBPS > 0) {\\n            recipients[payeeCount] = projectFinance.artistAddress;\\n            bps[payeeCount++] = artistBPS;\\n        }\\n        if (additionalBPS > 0) {\\n            recipients[payeeCount] = projectFinance\\n                .additionalPayeeSecondarySales;\\n            bps[payeeCount++] = additionalBPS;\\n        }\\n        if (artblocksBPS > 0) {\\n            recipients[payeeCount] = artblocksSecondarySalesAddress;\\n            bps[payeeCount++] = artblocksBPS;\\n        }\\n        // trim arrays if necessary\\n        if (3 > payeeCount) {\\n            assembly {\\n                let decrease := sub(3, payeeCount)\\n                mstore(recipients, sub(mload(recipients), decrease))\\n                mstore(bps, sub(mload(bps), decrease))\\n            }\\n        }\\n        return (recipients, bps);\\n    }\\n\\n    /**\\n     * @notice View function that returns appropriate revenue splits between\\n     * different Art Blocks, Artist, and Artist's additional primary sales\\n     * payee given a sale price of `_price` on project `_projectId`.\\n     * This always returns three revenue amounts and three addresses, but if a\\n     * revenue is zero for either Artist or additional payee, the corresponding\\n     * address returned will also be null (for gas optimization).\\n     * Does not account for refund if user overpays for a token (minter should\\n     * handle a refund of the difference, if appropriate).\\n     * Some minters may have alternative methods of splitting payments, in\\n     * which case they should implement their own payment splitting logic.\\n     * @param _projectId Project ID to be queried.\\n     * @param _price Sale price of token.\\n     * @return artblocksRevenue_ amount of revenue to be sent to Art Blocks\\n     * @return artblocksAddress_ address to send Art Blocks revenue to\\n     * @return artistRevenue_ amount of revenue to be sent to Artist\\n     * @return artistAddress_ address to send Artist revenue to. Will be null\\n     * if no revenue is due to artist (gas optimization).\\n     * @return additionalPayeePrimaryRevenue_ amount of revenue to be sent to\\n     * additional payee for primary sales\\n     * @return additionalPayeePrimaryAddress_ address to send Artist's\\n     * additional payee for primary sales revenue to. Will be null if no\\n     * revenue is due to additional payee for primary sales (gas optimization).\\n     * @dev this always returns three addresses and three revenues, but if the\\n     * revenue is zero, the corresponding address will be address(0). It is up\\n     * to the contract performing the revenue split to handle this\\n     * appropriately.\\n     */\\n    function getPrimaryRevenueSplits(\\n        uint256 _projectId,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 artblocksRevenue_,\\n            address payable artblocksAddress_,\\n            uint256 artistRevenue_,\\n            address payable artistAddress_,\\n            uint256 additionalPayeePrimaryRevenue_,\\n            address payable additionalPayeePrimaryAddress_\\n        )\\n    {\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            _projectId\\n        ];\\n        // calculate revenues\\n        artblocksRevenue_ =\\n            (_price * uint256(_artblocksPrimarySalesPercentage)) /\\n            ONE_HUNDRED;\\n        uint256 projectFunds;\\n        unchecked {\\n            // artblocksRevenue_ is always <=25, so guaranteed to never underflow\\n            projectFunds = _price - artblocksRevenue_;\\n        }\\n        additionalPayeePrimaryRevenue_ =\\n            (projectFunds *\\n                projectFinance.additionalPayeePrimarySalesPercentage) /\\n            ONE_HUNDRED;\\n        unchecked {\\n            // projectIdToAdditionalPayeePrimarySalesPercentage is always\\n            // <=100, so guaranteed to never underflow\\n            artistRevenue_ = projectFunds - additionalPayeePrimaryRevenue_;\\n        }\\n        // set addresses from storage\\n        artblocksAddress_ = artblocksPrimarySalesAddress;\\n        if (artistRevenue_ > 0) {\\n            artistAddress_ = projectFinance.artistAddress;\\n        }\\n        if (additionalPayeePrimaryRevenue_ > 0) {\\n            additionalPayeePrimaryAddress_ = projectFinance\\n                .additionalPayeePrimarySales;\\n        }\\n    }\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) getter returning contract admin\\n     * @return address Address of contract admin (same as owner)\\n     */\\n    function admin() external view returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @notice Gets the project ID for a given `_tokenId`.\\n     * @param _tokenId Token ID to be queried.\\n     * @return _projectId Project ID for given `_tokenId`.\\n     */\\n    function tokenIdToProjectId(\\n        uint256 _tokenId\\n    ) public pure returns (uint256 _projectId) {\\n        return _tokenId / ONE_MILLION;\\n    }\\n\\n    /**\\n     * @notice Convenience function that returns whether `_sender` is allowed\\n     * to call function with selector `_selector` on contract `_contract`, as\\n     * determined by this contract's current Admin ACL contract. Expected use\\n     * cases include minter contracts checking if caller is allowed to call\\n     * admin-gated functions on minter contracts.\\n     * @param _sender Address of the sender calling function with selector\\n     * `_selector` on contract `_contract`.\\n     * @param _contract Address of the contract being called by `_sender`.\\n     * @param _selector Function selector of the function being called by\\n     * `_sender`.\\n     * @return bool Whether `_sender` is allowed to call function with selector\\n     * `_selector` on contract `_contract`.\\n     * @dev assumes the Admin ACL contract is the owner of this contract, which\\n     * is expected to always be true.\\n     * @dev adminACLContract is expected to either be null address (if owner\\n     * has renounced ownership), or conform to IAdminACLV0 interface. Check for\\n     * null address first to avoid revert when admin has renounced ownership.\\n     */\\n    function adminACLAllowed(\\n        address _sender,\\n        address _contract,\\n        bytes4 _selector\\n    ) public returns (bool) {\\n        return\\n            owner() != address(0) &&\\n            adminACLContract.allowed(_sender, _contract, _selector);\\n    }\\n\\n    /**\\n     * @notice Returns contract owner. Set to deployer's address by default on\\n     * contract deployment.\\n     * @return address Address of contract owner.\\n     * @dev ref: https://docs.openzeppelin.com/contracts/4.x/api/access#Ownable\\n     * @dev owner role was called `admin` prior to V3 core contract\\n     */\\n    function owner()\\n        public\\n        view\\n        override(Ownable, IGenArt721CoreContractV3_Base)\\n        returns (address)\\n    {\\n        return Ownable.owner();\\n    }\\n\\n    /**\\n     * @notice Gets token URI for token ID `_tokenId`.\\n     * @param _tokenId Token ID to be queried.\\n     * @return string URI of token ID `_tokenId`.\\n     * @dev token URIs are the concatenation of the project base URI and the\\n     * token ID.\\n     */\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view override returns (string memory) {\\n        _onlyValidTokenId(_tokenId);\\n        string memory _projectBaseURI = projects[tokenIdToProjectId(_tokenId)]\\n            .projectBaseURI;\\n        return string.concat(_projectBaseURI, _tokenId.toString());\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IManifold).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Forbids new projects from being created\\n     * @dev only performs operation and emits event if contract is not already\\n     * forbidding new projects.\\n     */\\n    function _forbidNewProjects() internal {\\n        if (!newProjectsForbidden) {\\n            newProjectsForbidden = true;\\n            emit PlatformUpdated(FIELD_NEW_PROJECTS_FORBIDDEN);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param newOwner New owner.\\n     * @dev owner role was called `admin` prior to V3 core contract.\\n     * @dev Overrides and wraps OpenZeppelin's _transferOwnership function to\\n     * also update adminACLContract for improved introspection.\\n     */\\n    function _transferOwnership(address newOwner) internal override {\\n        Ownable._transferOwnership(newOwner);\\n        adminACLContract = IAdminACLV0(newOwner);\\n    }\\n\\n    /**\\n     * @notice Updates Art Blocks payment address to `_artblocksPrimarySalesAddress`.\\n     * @param _artblocksPrimarySalesAddress New Art Blocks payment address.\\n     * @dev Note that this method does not check that the input address is\\n     * not `address(0)`, as it is expected that callers of this method should\\n     * perform input validation where applicable.\\n     */\\n    function _updateArtblocksPrimarySalesAddress(\\n        address _artblocksPrimarySalesAddress\\n    ) internal {\\n        artblocksPrimarySalesAddress = payable(_artblocksPrimarySalesAddress);\\n        emit PlatformUpdated(FIELD_ARTBLOCKS_PRIMARY_SALES_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Updates Art Blocks secondary sales royalty payment address to\\n     * `_artblocksSecondarySalesAddress`.\\n     * @param _artblocksSecondarySalesAddress New Art Blocks secondary sales\\n     * payment address.\\n     * @dev Note that this method does not check that the input address is\\n     * not `address(0)`, as it is expected that callers of this method should\\n     * perform input validation where applicable.\\n     */\\n    function _updateArtblocksSecondarySalesAddress(\\n        address _artblocksSecondarySalesAddress\\n    ) internal {\\n        artblocksSecondarySalesAddress = payable(\\n            _artblocksSecondarySalesAddress\\n        );\\n        emit PlatformUpdated(FIELD_ARTBLOCKS_SECONDARY_SALES_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Updates randomizer address to `_randomizerAddress`.\\n     * @param _randomizerAddress New randomizer address.\\n     * @dev Note that this method does not check that the input address is\\n     * not `address(0)`, as it is expected that callers of this method should\\n     * perform input validation where applicable.\\n     */\\n    function _updateRandomizerAddress(address _randomizerAddress) internal {\\n        randomizerContract = IRandomizer_V3CoreBase(_randomizerAddress);\\n        // populate historical randomizer array\\n        _historicalRandomizerAddresses.push(_randomizerAddress);\\n        emit PlatformUpdated(FIELD_RANDOMIZER_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Updates default base URI to `_defaultBaseURI`.\\n     * When new projects are added, their `projectBaseURI` is automatically\\n     * initialized to `_defaultBaseURI`.\\n     * @param _defaultBaseURI New default base URI.\\n     * @dev Note that this method does not check that the input string is not\\n     * the empty string, as it is expected that callers of this method should\\n     * perform input validation where applicable.\\n     */\\n    function _updateDefaultBaseURI(string memory _defaultBaseURI) internal {\\n        defaultBaseURI = _defaultBaseURI;\\n        emit PlatformUpdated(FIELD_DEFAULT_BASE_URI);\\n    }\\n\\n    /**\\n     * @notice Internal function to complete a project.\\n     * @param _projectId Project ID to be completed.\\n     */\\n    function _completeProject(uint256 _projectId) internal {\\n        projects[_projectId].completedTimestamp = uint64(block.timestamp);\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_COMPLETED);\\n    }\\n\\n    /**\\n     * @notice Internal function that returns whether a project is unlocked.\\n     * Projects automatically lock four weeks after they are completed.\\n     * Projects are considered completed when they have been invoked the\\n     * maximum number of times.\\n     * @param _projectId Project ID to be queried.\\n     * @return bool true if project is unlocked, false otherwise.\\n     * @dev This also enforces that the `_projectId` passed in is valid.\\n     */\\n    function _projectUnlocked(uint256 _projectId) internal view returns (bool) {\\n        _onlyValidProjectId(_projectId);\\n        uint256 projectCompletedTimestamp = projects[_projectId]\\n            .completedTimestamp;\\n        bool projectOpen = projectCompletedTimestamp == 0;\\n        return\\n            projectOpen ||\\n            (block.timestamp - projectCompletedTimestamp <\\n                FOUR_WEEKS_IN_SECONDS);\\n    }\\n\\n    /**\\n     * Helper for calling `BytecodeStorageReader` external library reader method,\\n     * added for bytecode size reduction purposes.\\n     */\\n    function _readFromBytecode(\\n        address _address\\n    ) internal view returns (string memory) {\\n        return BytecodeStorageReader.readFromBytecode(_address);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v0.8.x/IAdminACLV0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAdminACLV0 {\\n    /**\\n     * @notice Token ID `_tokenId` minted to `_to`.\\n     * @param previousSuperAdmin The previous superAdmin address.\\n     * @param newSuperAdmin The new superAdmin address.\\n     * @param genArt721CoreAddressesToUpdate Array of genArt721Core\\n     * addresses to update to the new superAdmin, for indexing purposes only.\\n     */\\n    event SuperAdminTransferred(\\n        address indexed previousSuperAdmin,\\n        address indexed newSuperAdmin,\\n        address[] genArt721CoreAddressesToUpdate\\n    );\\n\\n    /// Type of the Admin ACL contract, e.g. \\\"AdminACLV0\\\"\\n    function AdminACLType() external view returns (string memory);\\n\\n    /// super admin address\\n    function superAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Calls transferOwnership on other contract from this contract.\\n     * This is useful for updating to a new AdminACL contract.\\n     * @dev this function should be gated to only superAdmin-like addresses.\\n     */\\n    function transferOwnershipOn(\\n        address _contract,\\n        address _newAdminACL\\n    ) external;\\n\\n    /**\\n     * @notice Calls renounceOwnership on other contract from this contract.\\n     * @dev this function should be gated to only superAdmin-like addresses.\\n     */\\n    function renounceOwnershipOn(address _contract) external;\\n\\n    /**\\n     * @notice Checks if sender `_sender` is allowed to call function with selector\\n     * `_selector` on contract `_contract`.\\n     */\\n    function allowed(\\n        address _sender,\\n        address _contract,\\n        bytes4 _selector\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v0.8.x/IGenArt721CoreContractExposesHashSeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArt721CoreContractExposesHashSeed {\\n    // function to read the hash-seed for a given tokenId\\n    function tokenIdToHashSeed(\\n        uint256 _tokenId\\n    ) external view returns (bytes12);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v0.8.x/IGenArt721CoreContractV3_Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAdminACLV0.sol\\\";\\n/// use the Royalty Registry's IManifold interface for token royalties\\nimport \\\"./IManifold.sol\\\";\\n\\n/**\\n * @title This interface is intended to house interface items that are common\\n * across all GenArt721CoreContractV3 flagship and derivative implementations.\\n * This interface extends the IManifold royalty interface in order to\\n * add support the Royalty Registry by default.\\n * @author Art Blocks Inc.\\n */\\ninterface IGenArt721CoreContractV3_Base is IManifold {\\n    /**\\n     * @notice Token ID `_tokenId` minted to `_to`.\\n     */\\n    event Mint(address indexed _to, uint256 indexed _tokenId);\\n\\n    /**\\n     * @notice currentMinter updated to `_currentMinter`.\\n     * @dev Implemented starting with V3 core\\n     */\\n    event MinterUpdated(address indexed _currentMinter);\\n\\n    /**\\n     * @notice Platform updated on bytes32-encoded field `_field`.\\n     */\\n    event PlatformUpdated(bytes32 indexed _field);\\n\\n    /**\\n     * @notice Project ID `_projectId` updated on bytes32-encoded field\\n     * `_update`.\\n     */\\n    event ProjectUpdated(uint256 indexed _projectId, bytes32 indexed _update);\\n\\n    event ProposedArtistAddressesAndSplits(\\n        uint256 indexed _projectId,\\n        address _artistAddress,\\n        address _additionalPayeePrimarySales,\\n        uint256 _additionalPayeePrimarySalesPercentage,\\n        address _additionalPayeeSecondarySales,\\n        uint256 _additionalPayeeSecondarySalesPercentage\\n    );\\n\\n    event AcceptedArtistAddressesAndSplits(uint256 indexed _projectId);\\n\\n    // version and type of the core contract\\n    // coreVersion is a string of the form \\\"0.x.y\\\"\\n    function coreVersion() external view returns (string memory);\\n\\n    // coreType is a string of the form \\\"GenArt721CoreV3\\\"\\n    function coreType() external view returns (string memory);\\n\\n    // owner (pre-V3 was named admin) of contract\\n    // this is expected to be an Admin ACL contract for V3\\n    function owner() external view returns (address);\\n\\n    // Admin ACL contract for V3, will be at the address owner()\\n    function adminACLContract() external returns (IAdminACLV0);\\n\\n    // backwards-compatible (pre-V3) admin - equal to owner()\\n    function admin() external view returns (address);\\n\\n    /**\\n     * Function determining if _sender is allowed to call function with\\n     * selector _selector on contract `_contract`. Intended to be used with\\n     * peripheral contracts such as minters, as well as internally by the\\n     * core contract itself.\\n     */\\n    function adminACLAllowed(\\n        address _sender,\\n        address _contract,\\n        bytes4 _selector\\n    ) external returns (bool);\\n\\n    /// getter function of public variable\\n    function startingProjectId() external view returns (uint256);\\n\\n    // getter function of public variable\\n    function nextProjectId() external view returns (uint256);\\n\\n    // getter function of public mapping\\n    function tokenIdToProjectId(\\n        uint256 tokenId\\n    ) external view returns (uint256 projectId);\\n\\n    // @dev this is not available in V0\\n    function isMintWhitelisted(address minter) external view returns (bool);\\n\\n    function projectIdToArtistAddress(\\n        uint256 _projectId\\n    ) external view returns (address payable);\\n\\n    function projectIdToAdditionalPayeePrimarySales(\\n        uint256 _projectId\\n    ) external view returns (address payable);\\n\\n    function projectIdToAdditionalPayeePrimarySalesPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function projectIdToSecondaryMarketRoyaltyPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function projectURIInfo(\\n        uint256 _projectId\\n    ) external view returns (string memory projectBaseURI);\\n\\n    // @dev new function in V3\\n    function projectStateData(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 invocations,\\n            uint256 maxInvocations,\\n            bool active,\\n            bool paused,\\n            uint256 completedTimestamp,\\n            bool locked\\n        );\\n\\n    function projectDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory projectName,\\n            string memory artist,\\n            string memory description,\\n            string memory website,\\n            string memory license\\n        );\\n\\n    function projectScriptDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory scriptTypeAndVersion,\\n            string memory aspectRatio,\\n            uint256 scriptCount\\n        );\\n\\n    function projectScriptByIndex(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external view returns (string memory);\\n\\n    function tokenIdToHash(uint256 _tokenId) external view returns (bytes32);\\n\\n    // function to set a token's hash (must be guarded)\\n    function setTokenHash_8PT(uint256 _tokenId, bytes32 _hash) external;\\n\\n    // @dev gas-optimized signature in V3 for `mint`\\n    function mint_Ecf(\\n        address _to,\\n        uint256 _projectId,\\n        address _by\\n    ) external returns (uint256 tokenId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v0.8.x/IGenArt721CoreContractV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAdminACLV0.sol\\\";\\nimport \\\"./IGenArt721CoreContractV3_Base.sol\\\";\\n\\n/**\\n * @title This interface extends IGenArt721CoreContractV3_Base with functions\\n * that are part of the Art Blocks Flagship core contract.\\n * @author Art Blocks Inc.\\n */\\n// This interface extends IGenArt721CoreContractV3_Base with functions that are\\n// in part of the Art Blocks Flagship core contract.\\ninterface IGenArt721CoreContractV3 is IGenArt721CoreContractV3_Base {\\n    // @dev new function in V3\\n    function getPrimaryRevenueSplits(\\n        uint256 _projectId,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 artblocksRevenue_,\\n            address payable artblocksAddress_,\\n            uint256 artistRevenue_,\\n            address payable artistAddress_,\\n            uint256 additionalPayeePrimaryRevenue_,\\n            address payable additionalPayeePrimaryAddress_\\n        );\\n\\n    // @dev Art Blocks primary sales payment address\\n    function artblocksPrimarySalesAddress()\\n        external\\n        view\\n        returns (address payable);\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) function returning Art Blocks\\n     * primary sales payment address (now called artblocksPrimarySalesAddress).\\n     */\\n    function artblocksAddress() external view returns (address payable);\\n\\n    // @dev Percentage of primary sales allocated to Art Blocks\\n    function artblocksPrimarySalesPercentage() external view returns (uint256);\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) function returning Art Blocks\\n     * primary sales percentage (now called artblocksPrimarySalesPercentage).\\n     */\\n    function artblocksPercentage() external view returns (uint256);\\n\\n    // @dev Art Blocks secondary sales royalties payment address\\n    function artblocksSecondarySalesAddress()\\n        external\\n        view\\n        returns (address payable);\\n\\n    // @dev Basis points of secondary sales allocated to Art Blocks\\n    function artblocksSecondarySalesBPS() external view returns (uint256);\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) function  that gets artist +\\n     * artist's additional payee royalty data for token ID `_tokenId`.\\n     * WARNING: Does not include Art Blocks portion of royalties.\\n     */\\n    function getRoyaltyData(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            address artistAddress,\\n            address additionalPayee,\\n            uint256 additionalPayeePercentage,\\n            uint256 royaltyFeeByID\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v0.8.x/IManifold.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @dev Royalty Registry interface, used to support the Royalty Registry.\\n/// @dev Source: https://github.com/manifoldxyz/royalty-registry-solidity/blob/main/contracts/specs/IManifold.sol\\n\\n/// @author: manifold.xyz\\n\\n/**\\n * @dev Royalty interface for creator core classes\\n */\\ninterface IManifold {\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    function getRoyalties(\\n        uint256 tokenId\\n    ) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/v0.8.x/IRandomizer_V3CoreBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Creatd By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizer_V3CoreBase {\\n    /**\\n     * @notice This function is intended to be called by a core contract, and\\n     * the core contract can be assured that the randomizer will call back to\\n     * the calling contract to set the token hash seed for `_tokenId` via\\n     * `setTokenHash_8PT`.\\n     * @dev This function may revert if hash seed generation is improperly\\n     * configured (for example, if in polyptych mode, but no hash seed has been\\n     * previously configured).\\n     * @dev This function is not specifically gated to any specific caller, but\\n     * will only call back to the calling contract, `msg.sender`, to set the\\n     * specified token's hash seed.\\n     * A third party contract calling this function will not be able to set the\\n     * token hash seed on a different core contract.\\n     * @param _tokenId The token ID must be assigned a hash.\\n     */\\n    function assignTokenHash(uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/v0.8.x/BytecodeStorageV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Art Blocks Script Storage Library\\n * @notice Utilize contract bytecode as persistent storage for large chunks of script string data.\\n *         This library is intended to have an external deployed copy that is released in the future,\\n *         and, as such, has been designed to support both updated V1 (versioned, with purging removed)\\n *         reads as well as backwards-compatible reads for both a) the unversioned \\\"V0\\\" storage contracts\\n *         which were deployed by the original version of this libary and b) contracts that were deployed\\n *         using one of the SSTORE2 implementations referenced below.\\n *         For these pre-V1 storage contracts (which themselves did not have any explicit versioning semantics)\\n *         backwards-compatible reads are optimistic, and only expected to work for contracts actually\\n *         deployed by the original version of this library \u2013\u00a0and may fail ungracefully if attempted to be\\n *         used to read from other contracts.\\n *         This library is split into two components, intended to be updated in tandem, and thus included\\n *         here in the same source file. One component is an internal library that is intended to be embedded\\n *         directly into other contracts and provides all _write_ functionality. The other is a public library\\n *         that is intended to be deployed as a standalone contract and provides all _read_ functionality.\\n *\\n * @author Art Blocks Inc.\\n * @author Modified from 0xSequence (https://github.com/0xsequence/sstore2/blob/master/contracts/SSTORE2.sol)\\n * @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SSTORE2.sol)\\n *\\n * @dev Compared to the above two rerferenced libraries, this contracts-as-storage implementation makes a few\\n *      notably different design decisions:\\n *      - uses the `string` data type for input/output on reads, rather than speaking in bytes directly\\n *      - stores the \\\"writer\\\" address (library user) in the deployed contract bytes, which is useful for\\n *        on-chain introspection and provenance purposes\\n *      - stores a very simple versioning string in the deployed contract bytes, which captures the version\\n *        of the library that was used to deploy the storage contract and useful for supporting future\\n *        compatibility management as this library evolves (e.g. in response to EOF v1 migration plans)\\n *      Also, given that much of this library is written in assembly, this library makes use of a slightly\\n *      different convention (when compared to the rest of the Art Blocks smart contract repo) around\\n *      pre-defining return values in some cases in order to simplify need to directly memory manage these\\n *      return values.\\n */\\n\\n/**\\n * @title Art Blocks Script Storage Library (Public, Reads)\\n * @author Art Blocks Inc.\\n * @notice The public library for reading from storage contracts. This library is intended to be deployed as a\\n *         standalone contract, and provides all _read_ functionality.\\n */\\nlibrary BytecodeStorageReader {\\n    // Define the set of known valid version strings that may be stored in the deployed storage contract bytecode\\n    // note: These are all intentionally exactly 32-bytes and are null-terminated. Null-termination is used due\\n    //       to this being the standard expected formatting in common web3 tooling such as ethers.js. Please see\\n    //       the following for additional context: https://docs.ethers.org/v5/api/utils/strings/#Bytes32String\\n    // Used for storage contracts that were deployed by an unknown source\\n    bytes32 public constant UNKNOWN_VERSION_STRING =\\n        \\\"UNKNOWN_VERSION_STRING_________ \\\";\\n    // Pre-dates versioning string, so this doesn't actually exist in any deployed contracts,\\n    // but is useful for backwards-compatible semantics with original version of this library\\n    bytes32 public constant V0_VERSION_STRING =\\n        \\\"BytecodeStorage_V0.0.0_________ \\\";\\n    // The first versioned storage contract, deployed by an updated version of this library\\n    bytes32 public constant V1_VERSION_STRING =\\n        \\\"BytecodeStorage_V1.0.0_________ \\\";\\n    // The current version of this library.\\n    bytes32 public constant CURRENT_VERSION = V1_VERSION_STRING;\\n\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // Starting Index | Size | Ending Index | Description                                                            //\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // 0              | N/A  | 0            |                                                                        //\\n    // 0              | 1    | 1            | single byte opcode for making the storage contract non-executable      //\\n    // 1              | 32   | 33           | the 32 byte slot used for storing a basic versioning string            //\\n    // 33             | 32   | 65           | the 32 bytes for storing the deploying contract's (0-padded) address   //\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // Define the offset for where the \\\"meta bytes\\\" end, and the \\\"data bytes\\\" begin. Note that this is a manually\\n    // calculated value, and must be updated if the above table is changed. It is expected that tests will fail\\n    // loudly if these values are not updated in-step with eachother.\\n    uint256 private constant VERSION_OFFSET = 1;\\n    uint256 private constant ADDRESS_OFFSET = 33;\\n    uint256 private constant DATA_OFFSET = 65;\\n\\n    // Define the set of known *historic* offset values for where the \\\"meta bytes\\\" end, and the \\\"data bytes\\\" begin.\\n    // SSTORE2 deployed storage contracts take the general format of:\\n    // concat(0x00, data)\\n    // note: this is true for both variants of the SSTORE2 library\\n    uint256 private constant SSTORE2_DATA_OFFSET = 1;\\n    // V0 deployed storage contracts take the general format of:\\n    // concat(gated-cleanup-logic, deployer-address, data)\\n    uint256 private constant V0_ADDRESS_OFFSET = 72;\\n    uint256 private constant V0_DATA_OFFSET = 104;\\n    // V1 deployed storage contracts take the general format of:\\n    // concat(invalid opcode, version, deployer-address, data)\\n    uint256 private constant V1_ADDRESS_OFFSET = ADDRESS_OFFSET;\\n    uint256 private constant V1_DATA_OFFSET = DATA_OFFSET;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               READ LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Read a string from contract bytecode\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @return data string read from contract bytecode\\n     * @dev This function performs input validation that the contract to read is in an expected format\\n     */\\n    function readFromBytecode(\\n        address _address\\n    ) public view returns (string memory data) {\\n        uint256 dataOffset = _bytecodeDataOffsetAt(_address);\\n        return string(readBytesFromBytecode(_address, dataOffset));\\n    }\\n\\n    /**\\n     * @notice Read the bytes from contract bytecode that was written to the EVM using SSTORE2\\n     * @param _address address of deployed contract with bytecode stored in the SSTORE2 format\\n     * @return data bytes read from contract bytecode\\n     * @dev This function performs no input validation on the provided contract,\\n     *      other than that there is content to read (but not that its a \\\"storage contract\\\")\\n     */\\n    function readBytesFromSSTORE2Bytecode(\\n        address _address\\n    ) public view returns (bytes memory data) {\\n        return readBytesFromBytecode(_address, SSTORE2_DATA_OFFSET);\\n    }\\n\\n    /**\\n     * @notice Read the bytes from contract bytecode, with an explicitly provided starting offset\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @param _offset offset to read from in contract bytecode, explicitly provided (not calculated)\\n     * @return data bytes read from contract bytecode\\n     * @dev This function performs no input validation on the provided contract,\\n     *      other than that there is content to read (but not that its a \\\"storage contract\\\")\\n     */\\n    function readBytesFromBytecode(\\n        address _address,\\n        uint256 _offset\\n    ) public view returns (bytes memory data) {\\n        // get the size of the bytecode\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // handle case where address contains code < _offset\\n        if (bytecodeSize < _offset) {\\n            revert(\\\"ContractAsStorage: Read Error\\\");\\n        }\\n\\n        // handle case where address contains code >= dataOffset\\n        // decrement by dataOffset to account for header info\\n        uint256 size;\\n        unchecked {\\n            size = bytecodeSize - _offset;\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            data := mload(0x40)\\n            // update free memory pointer\\n            // use and(x, not(0x1f) as cheaper equivalent to sub(x, mod(x, 0x20)).\\n            // adding 0x1f to size + logic above ensures the free memory pointer\\n            // remains word-aligned, following the Solidity convention.\\n            mstore(0x40, add(data, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            // store length of data in first 32 bytes\\n            mstore(data, size)\\n            // copy code to memory, excluding the deployer-address\\n            extcodecopy(_address, add(data, 0x20), _offset, size)\\n        }\\n    }\\n\\n    /**\\n     * @notice Get address for deployer for given contract bytecode\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @return writerAddress address read from contract bytecode\\n     */\\n    function getWriterAddressForBytecode(\\n        address _address\\n    ) public view returns (address) {\\n        // get the size of the data\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // the dataOffset for the bytecode\\n        uint256 addressOffset = _bytecodeAddressOffsetAt(_address);\\n        // handle case where address contains code < addressOffset + 32 (address takes a whole slot)\\n        if (bytecodeSize < (addressOffset + 32)) {\\n            revert(\\\"ContractAsStorage: Read Error\\\");\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            let writerAddress := mload(0x40)\\n            // shift free memory pointer by one slot\\n            mstore(0x40, add(mload(0x40), 0x20))\\n            // copy the 32-byte address of the data contract writer to memory\\n            // note: this relies on the assumption noted at the top-level of\\n            //       this file that the storage layout for the deployed\\n            //       contracts-as-storage contract looks like::\\n            //       | invalid opcode | version-string (unless v0) | deployer-address (padded) | data |\\n            extcodecopy(\\n                _address,\\n                writerAddress,\\n                addressOffset,\\n                0x20 // full 32-bytes, as address is expected to be zero-padded\\n            )\\n            return(\\n                writerAddress,\\n                0x20 // return size is entire slot, as it is zero-padded\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Get version for given contract bytecode\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @return version version read from contract bytecode\\n     */\\n    function getLibraryVersionForBytecode(\\n        address _address\\n    ) public view returns (bytes32) {\\n        return _bytecodeVersionAt(_address);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns the size of the bytecode at address `_address`\\n     * @param _address address that may or may not contain bytecode\\n     * @return size size of the bytecode code at `_address`\\n     */\\n    function _bytecodeSizeAt(\\n        address _address\\n    ) private view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_address)\\n        }\\n        if (size == 0) {\\n            revert(\\\"ContractAsStorage: Read Error\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the offset of the data in the bytecode at address `_address`\\n     * @param _address address that may or may not contain bytecode\\n     * @return dataOffset offset of data in bytecode if a known version, otherwise 0\\n     */\\n    function _bytecodeDataOffsetAt(\\n        address _address\\n    ) private view returns (uint256 dataOffset) {\\n        bytes32 version = _bytecodeVersionAt(_address);\\n        if (version == V1_VERSION_STRING) {\\n            dataOffset = V1_DATA_OFFSET;\\n        } else if (version == V0_VERSION_STRING) {\\n            dataOffset = V0_DATA_OFFSET;\\n        } else {\\n            // unknown version, revert\\n            revert(\\\"ContractAsStorage: Unsupported Version\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the offset of the address in the bytecode at address `_address`\\n     * @param _address address that may or may not contain bytecode\\n     * @return addressOffset offset of address in bytecode if a known version, otherwise 0\\n     */\\n    function _bytecodeAddressOffsetAt(\\n        address _address\\n    ) private view returns (uint256 addressOffset) {\\n        bytes32 version = _bytecodeVersionAt(_address);\\n        if (version == V1_VERSION_STRING) {\\n            addressOffset = V1_ADDRESS_OFFSET;\\n        } else if (version == V0_VERSION_STRING) {\\n            addressOffset = V0_ADDRESS_OFFSET;\\n        } else {\\n            // unknown version, revert\\n            revert(\\\"ContractAsStorage: Unsupported Version\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Get version string for given contract bytecode\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @return version version string read from contract bytecode\\n     */\\n    function _bytecodeVersionAt(\\n        address _address\\n    ) private view returns (bytes32 version) {\\n        // get the size of the data\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // handle case where address contains code < minimum expected version string size,\\n        // by returning early with the unknown version string\\n        if (bytecodeSize < (VERSION_OFFSET + 32)) {\\n            return UNKNOWN_VERSION_STRING;\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            let versionString := mload(0x40)\\n            // shift free memory pointer by one slot\\n            mstore(0x40, add(mload(0x40), 0x20))\\n            // copy the 32-byte version string of the bytecode library to memory\\n            // note: this relies on the assumption noted at the top-level of\\n            //       this file that the storage layout for the deployed\\n            //       contracts-as-storage contract looks like:\\n            //       | invalid opcode | version-string (unless v0) | deployer-address (padded) | data |\\n            extcodecopy(\\n                _address,\\n                versionString,\\n                VERSION_OFFSET,\\n                0x20 // 32-byte version string\\n            )\\n            // note: must check against literal strings, as Yul does not allow for\\n            //       dynamic strings in switch statements.\\n            switch mload(versionString)\\n            case \\\"BytecodeStorage_V1.0.0_________ \\\" {\\n                version := V1_VERSION_STRING\\n            }\\n            case 0x2060486000396000513314601057fe5b60013614601957fe5b6000357fff0000 {\\n                // the v0 variant of this library pre-dates formal versioning w/ version strings,\\n                // so we check the first 32 bytes of the execution bytecode itself which\\n                // is static and known across all storage contracts deployed with the first version\\n                // of this library.\\n                version := V0_VERSION_STRING\\n            }\\n            default {\\n                version := UNKNOWN_VERSION_STRING\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @title Art Blocks Script Storage Library (Internal, Writes)\\n * @author Art Blocks Inc.\\n * @notice The internal library for writing to storage contracts. This library is intended to be deployed\\n *         within library client contracts that use this library to perform _write_ operations on storage.\\n */\\nlibrary BytecodeStorageWriter {\\n    /*//////////////////////////////////////////////////////////////\\n                           WRITE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Write a string to contract bytecode\\n     * @param _data string to be written to contract. No input validation is performed on this parameter.\\n     * @param address_ address of deployed contract with bytecode stored in the V0 or V1 format\\n     */\\n    function writeToBytecode(\\n        string memory _data\\n    ) internal returns (address address_) {\\n        // prefix bytecode with\\n        bytes memory creationCode = abi.encodePacked(\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // a.) creation code returns all code in the contract except for the first 11 (0B in hex) bytes, as these 11\\n            //     bytes are the creation code itself which we do not want to store in the deployed storage contract result\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x60_0B            | PUSH1 11     | codeOffset                                                     //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset                                                   //\\n            // 0x81    |  0x81               | DUP2         | codeOffset 0 codeOffset                                        //\\n            // 0x38    |  0x38               | CODESIZE     | codeSize codeOffset 0 codeOffset                               //\\n            // 0x03    |  0x03               | SUB          | (codeSize - codeOffset) 0 codeOffset                           //\\n            // 0x80    |  0x80               | DUP          | (codeSize - codeOffset) (codeSize - codeOffset) 0 codeOffset   //\\n            // 0x92    |  0x92               | SWAP3        | codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset)   //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset) //\\n            // 0x39    |  0x39               | CODECOPY     | 0 (codeSize - codeOffset)                                      //\\n            // 0xF3    |  0xF3               | RETURN       |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (11 bytes)\\n            hex\\\"60_0B_59_81_38_03_80_92_59_39_F3\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // b.) ensure that the deployed storage contract is non-executeable (first opcode is the `invalid` opcode)\\n            //---------------------------------------------------------------------------------------------------------------//\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0xFE    |  0xFE               | INVALID      |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (1 byte)\\n            hex\\\"FE\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // c.) store the version string, which is already represented as a 32-byte value\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (32 bytes)\\n            BytecodeStorageReader.CURRENT_VERSION,\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // d.) store the deploying-contract's address with 0-padding to fit a 20-byte address into a 32-byte slot\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (12 bytes)\\n            hex\\\"00_00_00_00_00_00_00_00_00_00_00_00\\\",\\n            // (20 bytes)\\n            address(this),\\n            // uploaded data (stored as bytecode) comes last\\n            _data\\n        );\\n\\n        assembly {\\n            // deploy a new contract with the generated creation code.\\n            // start 32 bytes into creationCode to avoid copying the byte length.\\n            address_ := create(0, add(creationCode, 0x20), mload(creationCode))\\n        }\\n\\n        // address must be non-zero if contract was deployed successfully\\n        require(address_ != address(0), \\\"ContractAsStorage: Write Error\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/v0.8.x/Bytes32Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n// Inspired by: https://ethereum.stackexchange.com/a/123950/103422\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Operations on bytes32 data type, dealing with conversion to string.\\n */\\nlibrary Bytes32Strings {\\n    /**\\n     * @notice Intended to convert a `bytes32`-encoded string literal to `string`.\\n     * Trims zero padding to arrive at original string literal.\\n     */\\n    function toString(\\n        bytes32 source\\n    ) internal pure returns (string memory result) {\\n        uint8 length;\\n        while (source[length] != 0 && length < 32) {\\n            length++;\\n        }\\n        assembly {\\n            // free memory pointer\\n            result := mload(0x40)\\n            // update free memory pointer to new \\\"memory end\\\"\\n            // (offset is 64-bytes: 32 for length, 32 for data)\\n            mstore(0x40, add(result, 0x40))\\n            // store length in first 32-byte memory slot\\n            mstore(result, length)\\n            // write actual data in second 32-byte memory slot\\n            mstore(add(result, 0x20), source)\\n        }\\n    }\\n\\n    /**\\n     * @notice Intended to check if a `bytes32`-encoded string contains a given\\n     * character with UTF-8 character code `utf8CharCode exactly `targetQty`\\n     * times. Does not support searching for multi-byte characters, only\\n     * characters with UTF-8 character codes < 0x80.\\n     */\\n    function containsExactCharacterQty(\\n        bytes32 source,\\n        uint8 utf8CharCode,\\n        uint8 targetQty\\n    ) internal pure returns (bool) {\\n        uint8 _occurrences;\\n        uint8 i;\\n        for (i; i < 32; ) {\\n            uint8 _charCode = uint8(source[i]);\\n            // if not a null byte, or a multi-byte UTF-8 character, check match\\n            if (_charCode != 0 && _charCode < 0x80) {\\n                if (_charCode == utf8CharCode) {\\n                    unchecked {\\n                        // no risk of overflow since max 32 iterations < max uin8=255\\n                        ++_occurrences;\\n                    }\\n                }\\n            }\\n            unchecked {\\n                // no risk of overflow since max 32 iterations < max uin8=255\\n                ++i;\\n            }\\n        }\\n        return _occurrences == targetQty;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/v0.8.x/ERC721_PackedHashSeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin-4.7/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Forked version of the OpenZeppelin v4.7.1 ERC721 contract. Utilizes a\\n * struct to pack owner and hash seed into a single storage slot.\\n * ---------------------\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721_PackedHashSeed is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    /// struct to pack a token owner and hash seed into same storage slot\\n    struct OwnerAndHashSeed {\\n        // 20 bytes for address of token's owner\\n        address owner;\\n        // remaining 12 bytes allocated to token hash seed\\n        bytes12 hashSeed;\\n    }\\n\\n    /// mapping of token ID to OwnerAndHashSeed\\n    /// @dev visibility internal so inheriting contracts can access\\n    mapping(uint256 => OwnerAndHashSeed) internal _ownersAndHashSeeds;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: address zero is not a valid owner\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        address owner = _ownersAndHashSeeds[tokenId].owner;\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721_PackedHashSeed.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownersAndHashSeeds[tokenId].owner != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = ERC721_PackedHashSeed.ownerOf(tokenId);\\n        return (spender == owner ||\\n            isApprovedForAll(owner, spender) ||\\n            getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _ownersAndHashSeeds[tokenId].owner = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721_PackedHashSeed.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _ownersAndHashSeeds[tokenId].owner;\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721_PackedHashSeed.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _ownersAndHashSeeds[tokenId].owner = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721_PackedHashSeed.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 25\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"PaymentApproverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"PaymentApproverRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSuperAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSuperAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"genArt721CoreAddressesToUpdate\",\"type\":\"address[]\"}],\"name\":\"SuperAdminTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AdminACLType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"addPaymentApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSuperAdmin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_genArt721CoreAddressesToUpdate\",\"type\":\"address[]\"}],\"name\":\"changeSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPaymentApprovers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPaymentApproverAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"NFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"removePaymentApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"renounceOwnershipOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdminACL\",\"type\":\"address\"}],\"name\":\"transferOwnershipOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdminACLV1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "25", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}