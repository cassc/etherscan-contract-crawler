{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport { ERC20 }       from \\\"../modules/erc20/contracts/ERC20.sol\\\";\\nimport { ERC20Helper } from \\\"../modules/erc20-helper/src/ERC20Helper.sol\\\";\\n\\nimport { IPoolManagerLike } from \\\"./interfaces/Interfaces.sol\\\";\\nimport { IERC20, IPool }    from \\\"./interfaces/IPool.sol\\\";\\n\\n/*\\n\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\\n    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\\n    \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\\n    \u2588\u2588\u2551     \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n    \u255a\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n\\n*/\\n\\ncontract Pool is IPool, ERC20 {\\n\\n    uint256 public immutable override BOOTSTRAP_MINT;\\n\\n    address public override asset;    // Underlying ERC-20 asset handled by the ERC-4626 contract.\\n    address public override manager;  // Address of the contract that manages administrative functionality.\\n\\n    uint256 private _locked = 1;  // Used when checking for reentrancy.\\n\\n    constructor(\\n        address manager_,\\n        address asset_,\\n        address destination_,\\n        uint256 bootstrapMint_,\\n        uint256 initialSupply_,\\n        string memory name_,\\n        string memory symbol_\\n    )\\n        ERC20(name_, symbol_, ERC20(asset_).decimals())\\n    {\\n        require((manager = manager_) != address(0), \\\"P:C:ZERO_MANAGER\\\");\\n        require((asset   = asset_)   != address(0), \\\"P:C:ZERO_ASSET\\\");\\n\\n        if (initialSupply_ != 0) {\\n            _mint(destination_, initialSupply_);\\n        }\\n\\n        BOOTSTRAP_MINT = bootstrapMint_;\\n\\n        require(ERC20Helper.approve(asset_, manager_, type(uint256).max), \\\"P:C:FAILED_APPROVE\\\");\\n    }\\n\\n    /******************************************************************************************************************************/\\n    /*** Modifiers                                                                                                              ***/\\n    /******************************************************************************************************************************/\\n\\n    modifier checkCall(bytes32 functionId_) {\\n        ( bool success_, string memory errorMessage_ ) = IPoolManagerLike(manager).canCall(functionId_, msg.sender, msg.data[4:]);\\n\\n        require(success_, errorMessage_);\\n\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_locked == 1, \\\"P:LOCKED\\\");\\n\\n        _locked = 2;\\n\\n        _;\\n\\n        _locked = 1;\\n    }\\n\\n    /******************************************************************************************************************************/\\n    /*** LP Functions                                                                                                           ***/\\n    /******************************************************************************************************************************/\\n\\n    function deposit(uint256 assets_, address receiver_) external override nonReentrant checkCall(\\\"P:deposit\\\") returns (uint256 shares_) {\\n        _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);\\n    }\\n\\n    function depositWithPermit(\\n        uint256 assets_,\\n        address receiver_,\\n        uint256 deadline_,\\n        uint8   v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    )\\n        external override nonReentrant checkCall(\\\"P:depositWithPermit\\\") returns (uint256 shares_)\\n    {\\n        ERC20(asset).permit(msg.sender, address(this), assets_, deadline_, v_, r_, s_);\\n        _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);\\n    }\\n\\n    function mint(uint256 shares_, address receiver_) external override nonReentrant checkCall(\\\"P:mint\\\") returns (uint256 assets_) {\\n        _mint(shares_, assets_ = previewMint(shares_), receiver_, msg.sender);\\n    }\\n\\n    function mintWithPermit(\\n        uint256 shares_,\\n        address receiver_,\\n        uint256 maxAssets_,\\n        uint256 deadline_,\\n        uint8   v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    )\\n        external override nonReentrant checkCall(\\\"P:mintWithPermit\\\") returns (uint256 assets_)\\n    {\\n        require((assets_ = previewMint(shares_)) <= maxAssets_, \\\"P:MWP:INSUFFICIENT_PERMIT\\\");\\n\\n        ERC20(asset).permit(msg.sender, address(this), maxAssets_, deadline_, v_, r_, s_);\\n        _mint(shares_, assets_, receiver_, msg.sender);\\n    }\\n\\n    function redeem(uint256 shares_, address receiver_, address owner_) external override nonReentrant checkCall(\\\"P:redeem\\\") returns (uint256 assets_) {\\n        uint256 redeemableShares_;\\n        ( redeemableShares_, assets_ ) = IPoolManagerLike(manager).processRedeem(shares_, owner_, msg.sender);\\n        _burn(redeemableShares_, assets_, receiver_, owner_, msg.sender);\\n    }\\n\\n    function withdraw(uint256 assets_, address receiver_, address owner_) external override nonReentrant checkCall(\\\"P:withdraw\\\") returns (uint256 shares_) {\\n        ( shares_, assets_ ) = IPoolManagerLike(manager).processWithdraw(assets_, owner_, msg.sender);\\n        _burn(shares_, assets_, receiver_, owner_, msg.sender);\\n    }\\n\\n    /******************************************************************************************************************************/\\n    /*** ERC-20 Overridden Functions                                                                                            ***/\\n    /******************************************************************************************************************************/\\n\\n    function transfer(\\n        address recipient_,\\n        uint256 amount_\\n    )\\n        public override(IERC20, ERC20) checkCall(\\\"P:transfer\\\") returns (bool success_)\\n    {\\n        success_ = super.transfer(recipient_, amount_);\\n    }\\n\\n    function transferFrom(\\n        address owner_,\\n        address recipient_,\\n        uint256 amount_\\n    )\\n        public override(IERC20, ERC20) checkCall(\\\"P:transferFrom\\\") returns (bool success_)\\n    {\\n        success_ = super.transferFrom(owner_, recipient_, amount_);\\n    }\\n\\n    /******************************************************************************************************************************/\\n    /*** Withdrawal Request Functions                                                                                           ***/\\n    /******************************************************************************************************************************/\\n\\n    function removeShares(uint256 shares_, address owner_) external override nonReentrant checkCall(\\\"P:removeShares\\\") returns (uint256 sharesReturned_) {\\n        if (msg.sender != owner_) _decreaseAllowance(owner_, msg.sender, shares_);\\n\\n        emit SharesRemoved(\\n            owner_,\\n            sharesReturned_ = IPoolManagerLike(manager).removeShares(shares_, owner_)\\n        );\\n    }\\n\\n    function requestRedeem(uint256 shares_, address owner_) external override nonReentrant checkCall(\\\"P:requestRedeem\\\") returns (uint256 escrowedShares_) {\\n        emit RedemptionRequested(\\n            owner_,\\n            shares_,\\n            escrowedShares_ = _requestRedeem(shares_, owner_)\\n        );\\n    }\\n\\n    function requestWithdraw(uint256 assets_, address owner_) external override nonReentrant checkCall(\\\"P:requestWithdraw\\\") returns (uint256 escrowedShares_) {\\n        emit WithdrawRequested(\\n            owner_,\\n            assets_,\\n            escrowedShares_ = _requestWithdraw(assets_, owner_)\\n        );\\n    }\\n\\n    /******************************************************************************************************************************/\\n    /*** Internal Functions                                                                                                     ***/\\n    /******************************************************************************************************************************/\\n\\n    function _burn(uint256 shares_, uint256 assets_, address receiver_, address owner_, address caller_) internal {\\n        require(receiver_ != address(0), \\\"P:B:ZERO_RECEIVER\\\");\\n\\n        if (shares_ == 0) return;\\n\\n        if (caller_ != owner_) {\\n            _decreaseAllowance(owner_, caller_, shares_);\\n        }\\n\\n        _burn(owner_, shares_);\\n\\n        emit Withdraw(caller_, receiver_, owner_, assets_, shares_);\\n\\n        require(ERC20Helper.transfer(asset, receiver_, assets_), \\\"P:B:TRANSFER\\\");\\n    }\\n\\n    function _divRoundUp(uint256 numerator_, uint256 divisor_) internal pure returns (uint256 result_) {\\n        result_ = (numerator_ + divisor_ - 1) / divisor_;\\n    }\\n\\n    function _mint(uint256 shares_, uint256 assets_, address receiver_, address caller_) internal {\\n        require(receiver_ != address(0), \\\"P:M:ZERO_RECEIVER\\\");\\n        require(shares_   != uint256(0), \\\"P:M:ZERO_SHARES\\\");\\n        require(assets_   != uint256(0), \\\"P:M:ZERO_ASSETS\\\");\\n\\n        if (totalSupply == 0 && BOOTSTRAP_MINT != 0) {\\n            _mint(address(0), BOOTSTRAP_MINT);\\n\\n            emit BootstrapMintPerformed(caller_, receiver_, assets_, shares_, BOOTSTRAP_MINT);\\n\\n            shares_ -= BOOTSTRAP_MINT;\\n        }\\n\\n        _mint(receiver_, shares_);\\n\\n        emit Deposit(caller_, receiver_, assets_, shares_);\\n\\n        require(ERC20Helper.transferFrom(asset, caller_, address(this), assets_), \\\"P:M:TRANSFER_FROM\\\");\\n    }\\n\\n    function _requestRedeem(uint256 shares_, address owner_) internal returns (uint256 escrowShares_) {\\n        address destination_;\\n\\n        ( escrowShares_, destination_ ) = IPoolManagerLike(manager).getEscrowParams(owner_, shares_);\\n\\n        if (msg.sender != owner_) {\\n            _decreaseAllowance(owner_, msg.sender, escrowShares_);\\n        }\\n\\n        if (escrowShares_ != 0 && destination_ != address(0)) {\\n            _transfer(owner_, destination_, escrowShares_);\\n        }\\n\\n        IPoolManagerLike(manager).requestRedeem(escrowShares_, owner_, msg.sender);\\n    }\\n\\n    function _requestWithdraw(uint256 assets_, address owner_) internal returns (uint256 escrowShares_) {\\n        address destination_;\\n\\n        ( escrowShares_, destination_ ) = IPoolManagerLike(manager).getEscrowParams(owner_, convertToExitShares(assets_));\\n\\n        if (msg.sender != owner_) {\\n            _decreaseAllowance(owner_, msg.sender, escrowShares_);\\n        }\\n\\n        if (escrowShares_ != 0 && destination_ != address(0)) {\\n            _transfer(owner_, destination_, escrowShares_);\\n        }\\n\\n        IPoolManagerLike(manager).requestWithdraw(escrowShares_, assets_, owner_, msg.sender);\\n    }\\n\\n    /******************************************************************************************************************************/\\n    /*** External View Functions                                                                                                ***/\\n    /******************************************************************************************************************************/\\n\\n    function balanceOfAssets(address account_) external view override returns (uint256 balanceOfAssets_) {\\n        balanceOfAssets_ = convertToAssets(balanceOf[account_]);\\n    }\\n\\n    function maxDeposit(address receiver_) external view override returns (uint256 maxAssets_) {\\n        maxAssets_ = IPoolManagerLike(manager).maxDeposit(receiver_);\\n    }\\n\\n    function maxMint(address receiver_) external view override returns (uint256 maxShares_) {\\n        maxShares_ = IPoolManagerLike(manager).maxMint(receiver_);\\n    }\\n\\n    function maxRedeem(address owner_) external view override returns (uint256 maxShares_) {\\n        maxShares_ = IPoolManagerLike(manager).maxRedeem(owner_);\\n    }\\n\\n    function maxWithdraw(address owner_) external view override returns (uint256 maxAssets_) {\\n        maxAssets_ = IPoolManagerLike(manager).maxWithdraw(owner_);\\n    }\\n\\n    function previewRedeem(uint256 shares_) external view override returns (uint256 assets_) {\\n        assets_ = IPoolManagerLike(manager).previewRedeem(msg.sender, shares_);\\n    }\\n\\n    function previewWithdraw(uint256 assets_) external view override returns (uint256 shares_) {\\n        shares_ = IPoolManagerLike(manager).previewWithdraw(msg.sender, assets_);\\n    }\\n\\n    /******************************************************************************************************************************/\\n    /*** Public View Functions                                                                                                  ***/\\n    /******************************************************************************************************************************/\\n\\n    function convertToAssets(uint256 shares_) public view override returns (uint256 assets_) {\\n        uint256 totalSupply_ = totalSupply;\\n\\n        assets_ = totalSupply_ == 0 ? shares_ : (shares_ * totalAssets()) / totalSupply_;\\n    }\\n\\n    function convertToExitAssets(uint256 shares_) public view override returns (uint256 assets_) {\\n        uint256 totalSupply_ = totalSupply;\\n\\n        assets_ = totalSupply_ == 0 ? shares_ : shares_ * (totalAssets() - unrealizedLosses()) / totalSupply_;\\n    }\\n\\n    function convertToShares(uint256 assets_) public view override returns (uint256 shares_) {\\n        uint256 totalSupply_ = totalSupply;\\n\\n        shares_ = totalSupply_ == 0 ? assets_ : (assets_ * totalSupply_) / totalAssets();\\n    }\\n\\n    function convertToExitShares(uint256 amount_) public view override returns (uint256 shares_) {\\n        shares_ = _divRoundUp(amount_ * totalSupply, totalAssets() - unrealizedLosses());\\n    }\\n\\n    function previewDeposit(uint256 assets_) public view override returns (uint256 shares_) {\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\n        // it should round DOWN if it\u2019s calculating the amount of shares to issue to a user, given an amount of assets provided.\\n        shares_ = convertToShares(assets_);\\n    }\\n\\n    function previewMint(uint256 shares_) public view override returns (uint256 assets_) {\\n        uint256 totalSupply_ = totalSupply;\\n\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\n        // it should round UP if it\u2019s calculating the amount of assets a user must provide, to be issued a given amount of shares.\\n        assets_ = totalSupply_ == 0 ? shares_ : _divRoundUp(shares_ * totalAssets(), totalSupply_);\\n    }\\n\\n    function totalAssets() public view override returns (uint256 totalAssets_) {\\n        totalAssets_ = IPoolManagerLike(manager).totalAssets();\\n    }\\n\\n    function unrealizedLosses() public view override returns (uint256 unrealizedLosses_) {\\n        unrealizedLosses_ = IPoolManagerLike(manager).unrealizedLosses();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport { IERC20 } from \\\"../../modules/erc20/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @title A standard for tokenized Vaults with a single underlying ERC-20 token.\\ninterface IERC4626 is IERC20 {\\n\\n    /******************************************************************************************************************************/\\n    /*** Events                                                                                                                  ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev   `caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.\\n     *         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.\\n     *  @param caller_ The caller of the function that emitted the `Deposit` event.\\n     *  @param owner_  The owner of the shares.\\n     *  @param assets_ The amount of assets deposited.\\n     *  @param shares_ The amount of shares minted.\\n     */\\n    event Deposit(address indexed caller_, address indexed owner_, uint256 assets_, uint256 shares_);\\n\\n    /**\\n     *  @dev   `caller_`\u00a0has exchanged\u00a0`shares_`, owned by\u00a0`owner_`, for\u00a0`assets_`, and transferred them\u00a0to\u00a0`receiver_`.\\n     *         MUST be emitted when assets are withdrawn via the\u00a0`withdraw`\u00a0or\u00a0`redeem`\u00a0methods.\\n     *  @param caller_   The caller of the function that emitted the `Withdraw` event.\\n     *  @param receiver_ The receiver of the assets.\\n     *  @param owner_    The owner of the shares.\\n     *  @param assets_   The amount of assets withdrawn.\\n     *  @param shares_   The amount of shares burned.\\n     */\\n    event Withdraw(address indexed caller_, address indexed receiver_, address indexed owner_, uint256 assets_, uint256 shares_);\\n\\n    /******************************************************************************************************************************/\\n    /*** State Variables                                                                                                        ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    The address of the underlying asset used by the Vault.\\n     *          MUST be a contract that implements the ERC-20 standard.\\n     *          MUST NOT revert.\\n     *  @return asset_ The address of the underlying asset.\\n     */\\n    function asset() external view returns (address asset_);\\n\\n    /******************************************************************************************************************************/\\n    /*** State Changing Functions                                                                                               ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\\n     *          MUST emit the {Deposit} event.\\n     *          MUST revert if all of the assets cannot be deposited (due to insufficient approval, deposit limits, slippage, etc).\\n     *  @param  assets_   The amount of assets to deposit.\\n     *  @param  receiver_ The receiver of the shares.\\n     *  @return shares_   The amount of shares minted.\\n     */\\n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\\n     *          MUST emit the {Deposit} event.\\n     *          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit limits, slippage, etc).\\n     *  @param  shares_   The amount of shares to mint.\\n     *  @param  receiver_ The receiver of the shares.\\n     *  @return assets_   The amount of assets deposited.\\n     */\\n    function mint(uint256 shares_, address receiver_) external returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Burns\u00a0`shares_`\u00a0from\u00a0`owner_`\u00a0and sends\u00a0`assets_` to\u00a0`receiver_`.\\n     *          MUST emit the\u00a0{Withdraw}\u00a0event.\\n     *          MUST revert if all of\u00a0the shares\u00a0cannot be redeemed (due to insufficient shares, withdrawal limits, slippage, etc).\\n     *  @param  shares_   The amount of shares to redeem.\\n     *  @param  receiver_ The receiver of the assets.\\n     *  @param  owner_    The owner of the shares.\\n     *  @return assets_   The amount of assets sent to the receiver.\\n     */\\n    function redeem(uint256 shares_, address receiver_, address owner_) external returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Burns\u00a0`shares_`\u00a0from\u00a0`owner_`\u00a0and sends `assets_`\u00a0to `receiver_`.\\n     *          MUST emit the\u00a0{Withdraw}\u00a0event.\\n     *          MUST revert if all of\u00a0the assets\u00a0cannot be withdrawn (due to insufficient assets, withdrawal limits, slippage, etc).\\n     *  @param  assets_   The amount of assets to withdraw.\\n     *  @param  receiver_ The receiver of the assets.\\n     *  @param  owner_    The owner of the assets.\\n     *  @return shares_   The amount of shares burned from the owner.\\n     */\\n    function withdraw(uint256 assets_, address receiver_, address owner_) external returns (uint256 shares_);\\n\\n    /******************************************************************************************************************************/\\n    /*** View Functions                                                                                                         ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    The amount of `assets_` the `shares_` are currently equivalent to.\\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\\n     *          MUST NOT show any variations depending on the caller.\\n     *          MUST NOT revert.\\n     *  @param  shares_ The amount of shares to convert.\\n     *  @return assets_ The amount of equivalent assets.\\n     */\\n    function convertToAssets(uint256 shares_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    The amount of `shares_` the `assets_` are currently equivalent to.\\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\\n     *          MUST NOT show any variations depending on the caller.\\n     *          MUST NOT revert.\\n     *  @param  assets_ The amount of assets to convert.\\n     *  @return shares_ The amount of equivalent shares.\\n     */\\n    function convertToShares(uint256 assets_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through a `deposit` call.\\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\\n     *          MUST NOT revert.\\n     *  @param  receiver_ The receiver of the assets.\\n     *  @return assets_   The maximum amount of assets that can be deposited.\\n     */\\n    function maxDeposit(address receiver_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a `mint` call.\\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\\n     *          MUST NOT revert.\\n     *  @param  receiver_ The receiver of the shares.\\n     *  @return shares_   The maximum amount of shares that can be minted.\\n     */\\n    function maxMint(address receiver_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Maximum amount of `shares_` that can be redeemed from the\u00a0`owner_` through a\u00a0`redeem`\u00a0call.\\n     *          MUST return a limited value if\u00a0the owner\u00a0is subject to any limits, or the total amount of owned shares otherwise.\\n     *          MUST\u00a0NOT\u00a0revert.\\n     *  @param  owner_  The owner of the shares.\\n     *  @return shares_ The maximum amount of shares that can be redeemed.\\n     */\\n    function maxRedeem(address owner_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Maximum amount of `assets_` that can be withdrawn from the `owner_` through a `withdraw` call.\\n     *          MUST return a limited value if the owner is subject to any limits, or the total amount of owned assets otherwise.\\n     *          MUST NOT revert.\\n     *  @param  owner_  The owner of the assets.\\n     *  @return assets_ The maximum amount of assets that can be withdrawn.\\n     */\\n    function maxWithdraw(address owner_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\\n     *          MUST return as close to and no more than the exact amount of shares that would be minted in a `deposit` call in the same transaction.\\n     *          MUST NOT account for deposit limits like those returned from `maxDeposit` and should always act as though the deposit would be accepted.\\n     *  @param  assets_ The amount of assets to deposit.\\n     *  @return shares_ The amount of shares that would be minted.\\n     */\\n    function previewDeposit(uint256 assets_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.\\n     *          MUST return as close to and no fewer than the exact amount of assets that would be deposited in a `mint` call in the same transaction.\\n     *          MUST NOT account for mint limits like those returned from `maxMint` and should always act as though the minting would be accepted.\\n     *  @param  shares_ The amount of shares to mint.\\n     *  @return assets_ The amount of assets that would be deposited.\\n     */\\n    function previewMint(uint256 shares_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.\\n     *          MUST return as close to and no more than the exact amount of assets that would be withdrawn in a\u00a0`redeem`\u00a0call in the same transaction.\\n     *          MUST NOT account for redemption limits like those returned from `maxRedeem` and should always act as though the redemption would be accepted.\\n     *  @param  shares_ The amount of shares to redeem.\\n     *  @return assets_ The amount of assets that would be withdrawn.\\n     */\\n    function previewRedeem(uint256 shares_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.\\n     *          MUST return as close to and no fewer than the exact amount of shares that would be burned in a\u00a0`withdraw`\u00a0call in the same transaction.\\n     *          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and should always act as though the withdrawal would be accepted.\\n     *  @param  assets_ The amount of assets to withdraw.\\n     *  @return shares_ The amount of shares that would be redeemed.\\n     */\\n    function previewWithdraw(uint256 assets_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Total amount of the underlying asset that is managed by the Vault.\\n     *          SHOULD include compounding that occurs from any yields.\\n     *          MUST NOT revert.\\n     *  @return totalAssets_ The total amount of assets the Vault manages.\\n     */\\n    function totalAssets() external view returns (uint256 totalAssets_);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\nimport { IERC20 } from \\\"../../modules/erc20/contracts/interfaces/IERC20.sol\\\";\\n\\nimport { IERC4626 } from \\\"./IERC4626.sol\\\";\\n\\ninterface IPool is IERC20, IERC4626 {\\n\\n    /******************************************************************************************************************************/\\n    /*** Events                                                                                                                 ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev   Initial shares amount was minted to the zero address to prevent the first depositor frontrunning exploit.\\n     *  @param caller_              The caller of the function that emitted the `BootstrapMintPerformed` event.\\n     *  @param receiver_            The user that was minted the shares.\\n     *  @param assets_              The amount of assets deposited.\\n     *  @param shares_              The amount of shares that would have been minted to the user if it was not the first deposit.\\n     *  @param bootStrapMintAmount_ The amount of shares that was minted to the zero address to protect the first depositor.\\n     */\\n    event BootstrapMintPerformed(address indexed caller_, address indexed receiver_, uint256 assets_, uint256 shares_, uint256 bootStrapMintAmount_);\\n\\n    /**\\n     *  @dev   `newOwner_` has accepted the transferral of RDT ownership from `previousOwner_`.\\n     *  @param previousOwner_ The previous RDT owner.\\n     *  @param newOwner_      The new RDT owner.\\n     */\\n    event OwnershipAccepted(address indexed previousOwner_, address indexed newOwner_);\\n\\n    /**\\n     *  @dev   `owner_` has set the new pending owner of RDT to `pendingOwner_`.\\n     *  @param owner_        The current RDT owner.\\n     *  @param pendingOwner_ The new pending RDT owner.\\n     */\\n    event PendingOwnerSet(address indexed owner_, address indexed pendingOwner_);\\n\\n    /**\\n     *  @dev   A new redemption request has been made.\\n     *  @param owner_          The owner of shares.\\n     *  @param shares_         The amount of shares requested to redeem.\\n     *  @param escrowedShares_ The amount of shares actually escrowed for this withdrawal request.\\n     */\\n    event RedemptionRequested(address indexed owner_, uint256 shares_, uint256 escrowedShares_);\\n\\n    /**\\n     *  @dev   Shares have been removed.\\n     *  @param owner_  The owner of shares.\\n     *  @param shares_ The amount of shares requested to be removed.\\n     */\\n    event SharesRemoved(address indexed owner_, uint256 shares_);\\n\\n    /**\\n     *  @dev   A new withdrawal request has been made.\\n     *  @param owner_          The owner of shares.\\n     *  @param assets_         The amount of assets requested to withdraw.\\n     *  @param escrowedShares_ The amount of shares actually escrowed for this withdrawal request.\\n     */\\n    event WithdrawRequested(address indexed owner_, uint256 assets_, uint256 escrowedShares_);\\n\\n    /******************************************************************************************************************************/\\n    /*** State Variables                                                                                                        ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    The amount of shares that will be burned during the first deposit/mint.\\n     *  @return bootstrapMint_ The amount of shares to be burned.\\n     */\\n    function BOOTSTRAP_MINT() external view returns (uint256 bootstrapMint_);\\n\\n    /**\\n     *  @dev    The address of the account that is allowed to update the vesting schedule.\\n     *  @return manager_ The address of the pool manager.\\n     */\\n    function manager() external view returns (address manager_);\\n\\n    /******************************************************************************************************************************/\\n    /*** LP Functions                                                                                                           ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    Does a ERC4626 `deposit` with a ERC-2612 `permit`.\\n     *  @param  assets_   The amount of `asset` to deposit.\\n     *  @param  receiver_ The receiver of the shares.\\n     *  @param  deadline_ The timestamp after which the `permit` signature is no longer valid.\\n     *  @param  v_        ECDSA signature v component.\\n     *  @param  r_        ECDSA signature r component.\\n     *  @param  s_        ECDSA signature s component.\\n     *  @return shares_   The amount of shares minted.\\n     */\\n    function depositWithPermit(uint256 assets_, address receiver_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Does a ERC4626 `mint` with a ERC-2612 `permit`.\\n     *  @param  shares_    The amount of `shares` to mint.\\n     *  @param  receiver_  The receiver of the shares.\\n     *  @param  maxAssets_ The maximum amount of assets that can be taken, as per the permit.\\n     *  @param  deadline_  The timestamp after which the `permit` signature is no longer valid.\\n     *  @param  v_         ECDSA signature v component.\\n     *  @param  r_         ECDSA signature r component.\\n     *  @param  s_         ECDSA signature s component.\\n     *  @return assets_    The amount of shares deposited.\\n     */\\n    function mintWithPermit(uint256 shares_, address receiver_, uint256 maxAssets_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 assets_);\\n\\n    /******************************************************************************************************************************/\\n    /*** Withdrawal Request Functions                                                                                           ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    Removes shares from the withdrawal mechanism, can only be called after the beginning of the withdrawal window has passed.\\n     *  @param  shares_         The amount of shares to redeem.\\n     *  @param  owner_          The owner of the shares.\\n     *  @return sharesReturned_ The amount of shares withdrawn.\\n     */\\n    function removeShares(uint256 shares_, address owner_) external returns (uint256 sharesReturned_);\\n\\n    /**\\n     *  @dev    Requests a withdrawal of assets from the pool.\\n     *  @param  assets_       The amount of assets to withdraw.\\n     *  @param  owner_        The owner of the shares.\\n     *  @return escrowShares_ The amount of shares sent to escrow.\\n     */\\n    function requestWithdraw(uint256 assets_, address owner_) external returns (uint256 escrowShares_);\\n\\n    /**\\n     *  @dev    Requests a redemption of shares from the pool.\\n     *  @param  shares_       The amount of shares to redeem.\\n     *  @param  owner_        The owner of the shares.\\n     *  @return escrowShares_ The amount of shares sent to escrow.\\n     */\\n    function requestRedeem(uint256 shares_, address owner_) external returns (uint256 escrowShares_);\\n\\n    /******************************************************************************************************************************/\\n    /*** View Functions                                                                                                         ***/\\n    /******************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    Returns the amount of underlying assets owned by the specified account.\\n     *  @param  account_ Address of the account.\\n     *  @return assets_  Amount of assets owned.\\n     */\\n    function balanceOfAssets(address account_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Returns the amount of exit assets for the input amount.\\n     *  @param  shares_ The amount of shares to convert to assets.\\n     *  @return assets_ Amount of assets able to be exited.\\n     */\\n    function convertToExitAssets(uint256 shares_) external view returns (uint256 assets_);\\n\\n    /**\\n     *  @dev    Returns the amount of exit shares for the input amount.\\n     *  @param  assets_ The amount of assets to convert to shares.\\n     *  @return shares_ Amount of shares able to be exited.\\n     */\\n    function convertToExitShares(uint256 assets_) external view returns (uint256 shares_);\\n\\n    /**\\n     *  @dev    Returns the amount unrealized losses.\\n     *  @return unrealizedLosses_ Amount of unrealized losses.\\n     */\\n    function unrealizedLosses() external view returns (uint256 unrealizedLosses_);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.7;\\n\\ninterface IERC20Like {\\n\\n    function balanceOf(address account_) external view returns (uint256 balance_);\\n\\n    function decimals() external view returns (uint8 decimals_);\\n\\n    function totalSupply() external view returns (uint256 totalSupply_);\\n\\n}\\n\\ninterface ILoanManagerLike {\\n\\n    function acceptNewTerms(\\n        address loan_,\\n        address refinancer_,\\n        uint256 deadline_,\\n        bytes[] calldata calls_\\n    ) external;\\n\\n    function assetsUnderManagement() external view returns (uint256 assetsUnderManagement_);\\n\\n    function claim(address loan_, bool hasSufficientCover_) external;\\n\\n    function finishCollateralLiquidation(address loan_) external returns (uint256 remainingLosses_, uint256 serviceFee_);\\n\\n    function fund(address loan_) external;\\n\\n    function removeLoanImpairment(address loan_, bool isGovernor_) external;\\n\\n    function setAllowedSlippage(address collateralAsset_, uint256 allowedSlippage_) external;\\n\\n    function setMinRatio(address collateralAsset_, uint256 minRatio_) external;\\n\\n    function impairLoan(address loan_, bool isGovernor_) external;\\n\\n    function triggerDefault(address loan_, address liquidatorFactory_) external returns (bool liquidationComplete_, uint256 remainingLosses_, uint256 platformFees_);\\n\\n    function unrealizedLosses() external view returns (uint256 unrealizedLosses_);\\n\\n}\\n\\ninterface ILoanManagerInitializerLike {\\n\\n    function encodeArguments(address pool_) external pure returns (bytes memory calldata_);\\n\\n    function decodeArguments(bytes calldata calldata_) external pure returns (address pool_);\\n\\n}\\n\\ninterface ILiquidatorLike {\\n\\n    function collateralRemaining() external view returns (uint256 collateralRemaining_);\\n\\n    function liquidatePortion(uint256 swapAmount_, uint256 maxReturnAmount_, bytes calldata data_) external;\\n\\n    function pullFunds(address token_, address destination_, uint256 amount_) external;\\n\\n    function setCollateralRemaining(uint256 collateralAmount_) external;\\n\\n}\\n\\ninterface IMapleGlobalsLike {\\n\\n    function bootstrapMint(address asset_) external view returns (uint256 bootstrapMint_);\\n\\n    function getLatestPrice(address asset_) external view returns (uint256 price_);\\n\\n    function governor() external view returns (address governor_);\\n\\n    function isBorrower(address account_) external view returns (bool isBorrower_);\\n\\n    function isFactory(bytes32 factoryId_, address factory_) external view returns (bool isValid_);\\n\\n    function isPoolAsset(address asset_) external view returns (bool isPoolAsset_);\\n\\n    function isPoolDelegate(address account_) external view returns (bool isPoolDelegate_);\\n\\n    function isPoolDeployer(address poolDeployer_) external view returns (bool isPoolDeployer_);\\n\\n    function isValidScheduledCall(address caller_, address contract_, bytes32 functionId_, bytes calldata callData_) external view returns (bool isValid_);\\n\\n    function platformManagementFeeRate(address poolManager_) external view returns (uint256 platformManagementFeeRate_);\\n\\n    function maxCoverLiquidationPercent(address poolManager_) external view returns (uint256 maxCoverLiquidationPercent_);\\n\\n    function migrationAdmin() external view returns (address migrationAdmin_);\\n\\n    function minCoverAmount(address poolManager_) external view returns (uint256 minCoverAmount_);\\n\\n    function mapleTreasury() external view returns (address mapleTreasury_);\\n\\n    function ownedPoolManager(address poolDelegate_) external view returns (address poolManager_);\\n\\n    function protocolPaused() external view returns (bool protocolPaused_);\\n\\n    function transferOwnedPoolManager(address fromPoolDelegate_, address toPoolDelegate_) external;\\n\\n    function unscheduleCall(address caller_, bytes32 functionId_, bytes calldata callData_) external;\\n\\n}\\n\\ninterface IMapleLoanLike {\\n\\n    function acceptLender() external;\\n\\n    function acceptNewTerms(address refinancer_, uint256 deadline_, bytes[] calldata calls_) external returns (bytes32 refinanceCommitment_);\\n\\n    function batchClaimFunds(uint256[] memory amounts_, address[] memory destinations_) external;\\n\\n    function borrower() external view returns (address borrower_);\\n\\n    function claimFunds(uint256 amount_, address destination_) external;\\n\\n    function collateral() external view returns (uint256 collateral);\\n\\n    function collateralAsset() external view returns(address asset_);\\n\\n    function feeManager() external view returns (address feeManager_);\\n\\n    function fundsAsset() external view returns (address asset_);\\n\\n    function fundLoan(address lender_) external returns (uint256 fundsLent_);\\n\\n    function getClosingPaymentBreakdown() external view returns (\\n        uint256 principal_,\\n        uint256 interest_,\\n        uint256 delegateServiceFee_,\\n        uint256 platformServiceFee_\\n    );\\n\\n    function getNextPaymentDetailedBreakdown() external view returns (\\n        uint256 principal_,\\n        uint256[3] memory interest_,\\n        uint256[2] memory fees_\\n    );\\n\\n    function getNextPaymentBreakdown() external view returns (\\n        uint256 principal_,\\n        uint256 interest_,\\n        uint256 fees_\\n    );\\n\\n    function getUnaccountedAmount(address asset_) external view returns (uint256 unaccountedAmount_);\\n\\n    function gracePeriod() external view returns (uint256 gracePeriod_);\\n\\n    function interestRate() external view returns (uint256 interestRate_);\\n\\n    function isImpaired() external view returns (bool isImpaired_);\\n\\n    function lateFeeRate() external view returns (uint256 lateFeeRate_);\\n\\n    function lender() external view returns (address lender_);\\n\\n    function nextPaymentDueDate() external view returns (uint256 nextPaymentDueDate_);\\n\\n    function originalNextPaymentDueDate() external view returns (uint256 originalNextPaymentDueDate_);\\n\\n    function paymentInterval() external view returns (uint256 paymentInterval_);\\n\\n    function paymentsRemaining() external view returns (uint256 paymentsRemaining_);\\n\\n    function principal() external view returns (uint256 principal_);\\n\\n    function principalRequested() external view returns (uint256 principalRequested_);\\n\\n    function refinanceInterest() external view returns (uint256 refinanceInterest_);\\n\\n    function removeLoanImpairment() external;\\n\\n    function repossess(address destination_) external returns (uint256 collateralRepossessed_, uint256 fundsRepossessed_);\\n\\n    function setPendingLender(address pendingLender_) external;\\n\\n    function skim(address token_, address destination_) external returns (uint256 skimmed_);\\n\\n    function impairLoan() external;\\n\\n    function unimpairedPaymentDueDate() external view returns (uint256 unimpairedPaymentDueDate_);\\n\\n}\\n\\ninterface IMapleLoanV3Like {\\n\\n    function acceptLender() external;\\n\\n    function getNextPaymentBreakdown() external view returns (uint256 principal_, uint256 interest_, uint256, uint256);\\n\\n    function nextPaymentDueDate() external view returns (uint256 nextPaymentDueDate_);\\n\\n    function paymentInterval() external view returns (uint256 paymentInterval_);\\n\\n    function principal() external view returns (uint256 principal_);\\n\\n    function refinanceInterest() external view returns (uint256 refinanceInterest_);\\n\\n    function setPendingLender(address pendingLender_) external;\\n\\n}\\n\\ninterface IMapleProxyFactoryLike {\\n\\n    function mapleGlobals() external view returns (address mapleGlobals_);\\n\\n}\\n\\ninterface ILoanFactoryLike {\\n\\n    function isLoan(address loan_) external view returns (bool isLoan_);\\n\\n}\\n\\ninterface IPoolDelegateCoverLike {\\n\\n    function moveFunds(uint256 amount_, address recipient_) external;\\n\\n}\\n\\ninterface IPoolLike is IERC20Like {\\n\\n    function allowance(address owner_, address spender_) external view returns (uint256 allowance_);\\n\\n    function asset() external view returns (address asset_);\\n\\n    function convertToAssets(uint256 shares_) external view returns (uint256 assets_);\\n\\n    function convertToExitAssets(uint256 shares_) external view returns (uint256 assets_);\\n\\n    function convertToExitShares(uint256 assets_) external view returns (uint256 shares_);\\n\\n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_);\\n\\n    function manager() external view returns (address manager_);\\n\\n    function previewDeposit(uint256 assets_) external view returns (uint256 shares_);\\n\\n    function previewMint(uint256 shares_) external view returns (uint256 assets_);\\n\\n    function processExit(uint256 shares_, uint256 assets_, address receiver_, address owner_) external;\\n\\n    function redeem(uint256 shares_, address receiver_, address owner_) external returns (uint256 assets_);\\n\\n}\\n\\ninterface IPoolManagerLike {\\n\\n    function addLoanManager(address loanManager_) external;\\n\\n    function canCall(bytes32 functionId_, address caller_, bytes memory data_) external view returns (bool canCall_, string memory errorMessage_);\\n\\n    function convertToExitShares(uint256 assets_) external view returns (uint256 shares_);\\n\\n    function claim(address loan_) external;\\n\\n    function delegateManagementFeeRate() external view returns (uint256 delegateManagementFeeRate_);\\n\\n    function fund(uint256 principalAmount_, address loan_, address loanManager_) external;\\n\\n    function getEscrowParams(address owner_, uint256 shares_) external view returns (uint256 escrowShares_, address escrow_);\\n\\n    function globals() external view returns (address globals_);\\n\\n    function hasSufficientCover() external view returns (bool hasSufficientCover_);\\n\\n    function loanManager() external view returns (address loanManager_);\\n\\n    function maxDeposit(address receiver_) external view returns (uint256 maxAssets_);\\n\\n    function maxMint(address receiver_) external view returns (uint256 maxShares_);\\n\\n    function maxRedeem(address owner_) external view returns (uint256 maxShares_);\\n\\n    function maxWithdraw(address owner_) external view returns (uint256 maxAssets_);\\n\\n    function previewRedeem(address owner_, uint256 shares_) external view returns (uint256 assets_);\\n\\n    function previewWithdraw(address owner_, uint256 assets_) external view returns (uint256 shares_);\\n\\n    function processRedeem(uint256 shares_, address owner_, address sender_) external returns (uint256 redeemableShares_, uint256 resultingAssets_);\\n\\n    function processWithdraw(uint256 assets_, address owner_, address sender_) external returns (uint256 redeemableShares_, uint256 resultingAssets_);\\n\\n    function poolDelegate() external view returns (address poolDelegate_);\\n\\n    function poolDelegateCover() external view returns (address poolDelegateCover_);\\n\\n    function removeLoanManager(address loanManager_) external;\\n\\n    function removeShares(uint256 shares_, address owner_) external returns (uint256 sharesReturned_);\\n\\n    function requestRedeem(uint256 shares_, address owner_, address sender_) external;\\n\\n    function requestWithdraw(uint256 shares_, uint256 assets_, address owner_, address sender_) external;\\n\\n    function setWithdrawalManager(address withdrawalManager_) external;\\n\\n    function totalAssets() external view returns (uint256 totalAssets_);\\n\\n    function unrealizedLosses() external view returns (uint256 unrealizedLosses_);\\n\\n    function withdrawalManager() external view returns (address withdrawalManager_);\\n\\n}\\n\\ninterface IWithdrawalManagerInitializerLike {\\n\\n    function encodeArguments(address pool_, uint256 cycleDuration_, uint256 windowDuration_) external pure returns (bytes memory calldata_);\\n\\n    function decodeArguments(bytes calldata calldata_) external pure returns (address pool_, uint256 cycleDuration_, uint256 windowDuration_);\\n\\n}\\n\\ninterface IWithdrawalManagerLike {\\n\\n    function addShares(uint256 shares_, address owner_) external;\\n\\n    function isInExitWindow(address owner_) external view returns (bool isInExitWindow_);\\n\\n    function lockedLiquidity() external view returns (uint256 lockedLiquidity_);\\n\\n    function lockedShares(address owner_) external view returns (uint256 lockedShares_);\\n\\n    function previewRedeem(address owner_, uint256 shares) external view returns (uint256 redeemableShares, uint256 resultingAssets_);\\n\\n    function previewWithdraw(address owner_, uint256 assets_) external view returns (uint256 redeemableAssets_, uint256 resultingShares_);\\n\\n    function processExit(uint256 shares_, address account_) external returns (uint256 redeemableShares_, uint256 resultingAssets_);\\n\\n    function removeShares(uint256 shares_, address owner_) external returns (uint256 sharesReturned_);\\n\\n}\\n\"\r\n    },\r\n    \"modules/erc20/contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\n\\n/*\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2557\\n    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551          \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2551\\n    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551         \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\\n*/\\n\\n/**\\n *  @title Modern ERC-20 implementation.\\n *  @dev   Acknowledgements to Solmate, OpenZeppelin, and DSS for inspiring this code.\\n */\\ncontract ERC20 is IERC20 {\\n\\n    /**************/\\n    /*** ERC-20 ***/\\n    /**************/\\n\\n    string public override name;\\n    string public override symbol;\\n\\n    uint8 public immutable override decimals;\\n\\n    uint256 public override totalSupply;\\n\\n    mapping(address => uint256) public override balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /****************/\\n    /*** ERC-2612 ***/\\n    /****************/\\n\\n    // PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public override nonces;\\n\\n    /**\\n     *  @param name_     The name of the token.\\n     *  @param symbol_   The symbol of the token.\\n     *  @param decimals_ The decimal precision used by the token.\\n     */\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n        name     = name_;\\n        symbol   = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    /**************************/\\n    /*** External Functions ***/\\n    /**************************/\\n\\n    function approve(address spender_, uint256 amount_) public virtual override returns (bool success_) {\\n        _approve(msg.sender, spender_, amount_);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) public virtual override returns (bool success_) {\\n        _decreaseAllowance(msg.sender, spender_, subtractedAmount_);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender_, uint256 addedAmount_) public virtual override returns (bool success_) {\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedAmount_);\\n        return true;\\n    }\\n\\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) public virtual override {\\n        require(deadline_ >= block.timestamp, \\\"ERC20:P:EXPIRED\\\");\\n\\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\\n        require(\\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\\n            (v_ == 27 || v_ == 28),\\n            \\\"ERC20:P:MALLEABLE\\\"\\n        );\\n\\n        // Nonce realistically cannot overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\\n\\n            require(recoveredAddress == owner_ && owner_ != address(0), \\\"ERC20:P:INVALID_SIGNATURE\\\");\\n        }\\n\\n        _approve(owner_, spender_, amount_);\\n    }\\n\\n    function transfer(address recipient_, uint256 amount_) public virtual override returns (bool success_) {\\n        _transfer(msg.sender, recipient_, amount_);\\n        return true;\\n    }\\n\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) public virtual override returns (bool success_) {\\n        _decreaseAllowance(owner_, msg.sender, amount_);\\n        _transfer(owner_, recipient_, amount_);\\n        return true;\\n    }\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32 domainSeparator_) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function _approve(address owner_, address spender_, uint256 amount_) internal {\\n        emit Approval(owner_, spender_, allowance[owner_][spender_] = amount_);\\n    }\\n\\n    function _burn(address owner_, uint256 amount_) internal {\\n        balanceOf[owner_] -= amount_;\\n\\n        // Cannot underflow because a user's balance will never be larger than the total supply.\\n        unchecked { totalSupply -= amount_; }\\n\\n        emit Transfer(owner_, address(0), amount_);\\n    }\\n\\n    function _decreaseAllowance(address owner_, address spender_, uint256 subtractedAmount_) internal {\\n        uint256 spenderAllowance = allowance[owner_][spender_];  // Cache to memory.\\n\\n        if (spenderAllowance != type(uint256).max) {\\n            _approve(owner_, spender_, spenderAllowance - subtractedAmount_);\\n        }\\n    }\\n\\n    function _mint(address recipient_, uint256 amount_) internal {\\n        totalSupply += amount_;\\n\\n        // Cannot overflow because totalSupply would first overflow in the statement above.\\n        unchecked { balanceOf[recipient_] += amount_; }\\n\\n        emit Transfer(address(0), recipient_, amount_);\\n    }\\n\\n    function _transfer(address owner_, address recipient_, uint256 amount_) internal {\\n        balanceOf[owner_] -= amount_;\\n\\n        // Cannot overflow because minting prevents overflow of totalSupply, and sum of user balances == totalSupply.\\n        unchecked { balanceOf[recipient_] += amount_; }\\n\\n        emit Transfer(owner_, recipient_, amount_);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"modules/erc20/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\n/// @title Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality.\\ninterface IERC20 {\\n\\n    /**************/\\n    /*** Events ***/\\n    /**************/\\n\\n    /**\\n     *  @dev   Emitted when one account has set the allowance of another account over their tokens.\\n     *  @param owner_   Account that tokens are approved from.\\n     *  @param spender_ Account that tokens are approved for.\\n     *  @param amount_  Amount of tokens that have been approved.\\n     */\\n    event Approval(address indexed owner_, address indexed spender_, uint256 amount_);\\n\\n    /**\\n     *  @dev   Emitted when tokens have moved from one account to another.\\n     *  @param owner_     Account that tokens have moved from.\\n     *  @param recipient_ Account that tokens have moved to.\\n     *  @param amount_    Amount of tokens that have been transferred.\\n     */\\n    event Transfer(address indexed owner_, address indexed recipient_, uint256 amount_);\\n\\n    /**************************/\\n    /*** External Functions ***/\\n    /**************************/\\n\\n    /**\\n     *  @dev    Function that allows one account to set the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_ Account that tokens are approved for.\\n     *  @param  amount_  Amount of tokens that have been approved.\\n     *  @return success_ Boolean indicating whether the operation succeeded.\\n     */\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Function that allows one account to decrease the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_          Account that tokens are approved for.\\n     *  @param  subtractedAmount_ Amount to decrease approval by.\\n     *  @return success_          Boolean indicating whether the operation succeeded.\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Function that allows one account to increase the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_     Account that tokens are approved for.\\n     *  @param  addedAmount_ Amount to increase approval by.\\n     *  @return success_     Boolean indicating whether the operation succeeded.\\n     */\\n    function increaseAllowance(address spender_, uint256 addedAmount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev   Approve by signature.\\n     *  @param owner_    Owner address that signed the permit.\\n     *  @param spender_  Spender of the permit.\\n     *  @param amount_   Permit approval spend limit.\\n     *  @param deadline_ Deadline after which the permit is invalid.\\n     *  @param v_        ECDSA signature v component.\\n     *  @param r_        ECDSA signature r component.\\n     *  @param s_        ECDSA signature s component.\\n     */\\n    function permit(address owner_, address spender_, uint amount_, uint deadline_, uint8 v_, bytes32 r_, bytes32 s_) external;\\n\\n    /**\\n     *  @dev    Moves an amount of tokens from `msg.sender` to a specified account.\\n     *          Emits a {Transfer} event.\\n     *  @param  recipient_ Account that receives tokens.\\n     *  @param  amount_    Amount of tokens that are transferred.\\n     *  @return success_   Boolean indicating whether the operation succeeded.\\n     */\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Moves a pre-approved amount of tokens from a sender to a specified account.\\n     *          Emits a {Transfer} event.\\n     *          Emits an {Approval} event.\\n     *  @param  owner_     Account that tokens are moving from.\\n     *  @param  recipient_ Account that receives tokens.\\n     *  @param  amount_    Amount of tokens that are transferred.\\n     *  @return success_   Boolean indicating whether the operation succeeded.\\n     */\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    /**********************/\\n    /*** View Functions ***/\\n    /**********************/\\n\\n    /**\\n     *  @dev    Returns the allowance that one account has given another over their tokens.\\n     *  @param  owner_     Account that tokens are approved from.\\n     *  @param  spender_   Account that tokens are approved for.\\n     *  @return allowance_ Allowance that one account has given another over their tokens.\\n     */\\n    function allowance(address owner_, address spender_) external view returns (uint256 allowance_);\\n\\n    /**\\n     *  @dev    Returns the amount of tokens owned by a given account.\\n     *  @param  account_ Account that owns the tokens.\\n     *  @return balance_ Amount of tokens owned by a given account.\\n     */\\n    function balanceOf(address account_) external view returns (uint256 balance_);\\n\\n    /**\\n     *  @dev    Returns the decimal precision used by the token.\\n     *  @return decimals_ The decimal precision used by the token.\\n     */\\n    function decimals() external view returns (uint8 decimals_);\\n\\n    /**\\n     *  @dev    Returns the signature domain separator.\\n     *  @return domainSeparator_ The signature domain separator.\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator_);\\n\\n    /**\\n     *  @dev    Returns the name of the token.\\n     *  @return name_ The name of the token.\\n     */\\n    function name() external view returns (string memory name_);\\n\\n    /**\\n      *  @dev    Returns the nonce for the given owner.\\n      *  @param  owner_  The address of the owner account.\\n      *  @return nonce_ The nonce for the given owner.\\n     */\\n    function nonces(address owner_) external view returns (uint256 nonce_);\\n\\n    /**\\n     *  @dev    Returns the permit type hash.\\n     *  @return permitTypehash_ The permit type hash.\\n     */\\n    function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);\\n\\n    /**\\n     *  @dev    Returns the symbol of the token.\\n     *  @return symbol_ The symbol of the token.\\n     */\\n    function symbol() external view returns (string memory symbol_);\\n\\n    /**\\n     *  @dev    Returns the total amount of tokens in existence.\\n     *  @return totalSupply_ The total amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply_);\\n\\n}\\n\"\r\n    },\r\n    \"modules/erc20-helper/src/ERC20Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport { IERC20Like } from \\\"./interfaces/IERC20Like.sol\\\";\\n\\n/**\\n * @title Small Library to standardize erc20 token interactions.\\n */\\nlibrary ERC20Helper {\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function transfer(address token_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transfer.selector, to_, amount_));\\n    }\\n\\n    function transferFrom(address token_, address from_, address to_, uint256 amount_) internal returns (bool success_) {\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transferFrom.selector, from_, to_, amount_));\\n    }\\n\\n    function approve(address token_, address spender_, uint256 amount_) internal returns (bool success_) {\\n        // If setting approval to zero fails, return false.\\n        if (!_call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, uint256(0)))) return false;\\n\\n        // If `amount_` is zero, return true as the previous step already did this.\\n        if (amount_ == uint256(0)) return true;\\n\\n        // Return the result of setting the approval to `amount_`.\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, amount_));\\n    }\\n\\n    function _call(address token_, bytes memory data_) private returns (bool success_) {\\n        if (token_.code.length == uint256(0)) return false;\\n\\n        bytes memory returnData;\\n        ( success_, returnData ) = token_.call(data_);\\n\\n        return success_ && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"modules/erc20-helper/src/interfaces/IERC20Like.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\n/// @title Interface of the ERC20 standard as needed by ERC20Helper.\\ninterface IERC20Like {\\n\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\n\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"contract-test-utils/=modules/contract-test-utils/contracts/\",\r\n      \"erc20-helper/=modules/erc20-helper/src/\",\r\n      \"erc20/=modules/erc20/\",\r\n      \"maple-proxy-factory/=modules/maple-proxy-factory/\",\r\n      \"proxy-factory/=modules/maple-proxy-factory/modules/proxy-factory/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bootstrapMint_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bootStrapMintAmount_\",\"type\":\"uint256\"}],\"name\":\"BootstrapMintPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"escrowedShares_\",\"type\":\"uint256\"}],\"name\":\"RedemptionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"SharesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"escrowedShares_\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOTSTRAP_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOfAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"convertToExitAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"convertToExitShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"mintWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"removeShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesReturned_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"requestRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"escrowedShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"requestWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"escrowedShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unrealizedLosses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unrealizedLosses_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000024617612dec91855e126e6330580425f6a262ee9000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000580b1a894b9fbdbf7d29ba9b492807bf539dd50800000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000ecb3711e0cd00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001b4d313120437265646974204d61706c6520506f6f6c2055534443310000000000000000000000000000000000000000000000000000000000000000000000000b4d504c2d6d635553444331000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}