{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/BaseTokenholderGovernor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./TokenholderGovernorVotes.sol\\\";\\nimport \\\"../token/T.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/Governor.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorPreventLateQuorum.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\\\";\\n\\ncontract BaseTokenholderGovernor is\\n    AccessControl,\\n    GovernorCountingSimple,\\n    TokenholderGovernorVotes,\\n    GovernorPreventLateQuorum,\\n    GovernorTimelockControl\\n{\\n    bytes32 public constant VETO_POWER =\\n        keccak256(\\\"Power to veto proposals in Threshold's Tokenholder DAO\\\");\\n\\n    constructor(\\n        T _token,\\n        IVotesHistory _staking,\\n        TimelockController _timelock,\\n        address _vetoer,\\n        uint256 _quorumNumerator,\\n        uint256 _proposalThresholdNumerator,\\n        uint256 votingDelay,\\n        uint256 votingPeriod,\\n        uint64 votingExtension\\n    )\\n        Governor(\\\"TokenholderGovernor\\\")\\n        GovernorParameters(\\n            _quorumNumerator,\\n            _proposalThresholdNumerator,\\n            votingDelay,\\n            votingPeriod\\n        )\\n        GovernorPreventLateQuorum(votingExtension)\\n        TokenholderGovernorVotes(_token, _staking)\\n        GovernorTimelockControl(_timelock)\\n    {\\n        _setupRole(VETO_POWER, _vetoer);\\n        _setupRole(DEFAULT_ADMIN_ROLE, address(_timelock));\\n    }\\n\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external onlyRole(VETO_POWER) returns (uint256) {\\n        return _cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public override(Governor, IGovernor) returns (uint256) {\\n        return super.propose(targets, values, calldatas, description);\\n    }\\n\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernor, GovernorParameters)\\n        returns (uint256)\\n    {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    function proposalThreshold()\\n        public\\n        view\\n        override(Governor, GovernorParameters)\\n        returns (uint256)\\n    {\\n        return super.proposalThreshold();\\n    }\\n\\n    function getVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernor, TokenholderGovernorVotes)\\n        returns (uint256)\\n    {\\n        return super.getVotes(account, blockNumber);\\n    }\\n\\n    function state(uint256 proposalId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (ProposalState)\\n    {\\n        return super.state(proposalId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _execute(\\n        uint256 proposalId,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal override(Governor, GovernorTimelockControl) {\\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\\n        return super._cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _executor()\\n        internal\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (address)\\n    {\\n        return super._executor();\\n    }\\n\\n    function proposalDeadline(uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        override(IGovernor, Governor, GovernorPreventLateQuorum)\\n        returns (uint256)\\n    {\\n        return super.proposalDeadline(proposalId);\\n    }\\n\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    )\\n        internal\\n        virtual\\n        override(Governor, GovernorPreventLateQuorum)\\n        returns (uint256)\\n    {\\n        return super._castVote(proposalId, account, support, reason);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/TokenholderGovernorVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./GovernorParameters.sol\\\";\\nimport \\\"./IVotesHistory.sol\\\";\\n\\n/// @title TokenholderGovernorVotes\\n/// @notice Tokenholder DAO voting power extraction from both liquid and staked\\n///         T token positions, including legacy stakes (NU/KEEP).\\nabstract contract TokenholderGovernorVotes is GovernorParameters {\\n    IVotesHistory public immutable token;\\n    IVotesHistory public immutable staking;\\n\\n    constructor(IVotesHistory tokenAddress, IVotesHistory tStakingAddress) {\\n        token = tokenAddress;\\n        staking = tStakingAddress;\\n    }\\n\\n    /// @notice Read the voting weight from the snapshot mechanism in the token\\n    ///         and staking contracts. For Tokenholder DAO, there are currently\\n    ///         two voting power sources:\\n    ///          - Liquid T, tracked by the T token contract\\n    ///          - Stakes in the T network, tracked  by the T staking contract.\\n    ///            Note that this also tracks legacy stakes (NU/KEEP); legacy\\n    ///            stakes count for tokenholders' voting power, but not for the\\n    ///            total voting power of the Tokenholder DAO\\n    ///            (see {_getPastTotalSupply}).\\n    /// @param account Tokenholder account in the T network\\n    /// @param blockNumber The block number to get the vote balance at\\n    /// @dev See {IGovernor-getVotes}\\n    function getVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        uint256 liquidVotes = token.getPastVotes(account, blockNumber);\\n        uint256 stakedVotes = staking.getPastVotes(account, blockNumber);\\n        return liquidVotes + stakedVotes;\\n    }\\n\\n    /// @notice Compute the total voting power for Tokenholder DAO. Note how it\\n    ///         only uses the token total supply as source, as native T tokens\\n    ///         that are staked continue existing, but as deposits in the\\n    ///         staking contract. However, legacy stakes can't contribute to the\\n    ///         total voting power as they're already implicitly counted as part\\n    ///         of Vending Machines' liquid balance; hence, we only need to read\\n    ///         total voting power from the token.\\n    /// @param blockNumber The block number to get the vote power at\\n    function _getPastTotalSupply(uint256 blockNumber)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return token.getPastTotalSupply(blockNumber);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/T.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../governance/Checkpoints.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\\\";\\nimport \\\"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\\\";\\n\\n/// @title T token\\n/// @notice Threshold Network T token\\n/// @dev By default, token balance does not account for voting power.\\n///      This makes transfers cheaper. The downside is that it requires users\\n///      to delegate to themselves to activate checkpoints and have their\\n///      voting power tracked.\\ncontract T is ERC20WithPermit, MisfundRecovery, Checkpoints {\\n    /// @notice The EIP-712 typehash for the delegation struct used by\\n    ///         `delegateBySig`.\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\n            \\\"Delegation(address delegatee,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    constructor() ERC20WithPermit(\\\"Threshold Network Token\\\", \\\"T\\\") {}\\n\\n    /// @notice Delegates votes from signatory to `delegatee`\\n    /// @param delegatee The address to delegate votes to\\n    /// @param deadline The time at which to expire the signature\\n    /// @param v The recovery byte of the signature\\n    /// @param r Half of the ECDSA signature pair\\n    /// @param s Half of the ECDSA signature pair\\n    function delegateBySig(\\n        address signatory,\\n        address delegatee,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(deadline >= block.timestamp, \\\"Delegation expired\\\");\\n\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\n        // Only signatures with `s` value in the lower half of the secp256k1\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        DELEGATION_TYPEHASH,\\n                        delegatee,\\n                        nonce[signatory]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == signatory,\\n            \\\"Invalid signature\\\"\\n        );\\n\\n        return delegate(signatory, delegatee);\\n    }\\n\\n    /// @notice Delegate votes from `msg.sender` to `delegatee`.\\n    /// @param delegatee The address to delegate votes to\\n    function delegate(address delegatee) public virtual {\\n        return delegate(msg.sender, delegatee);\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        uint96 safeAmount = SafeCast.toUint96(amount);\\n\\n        // When minting:\\n        if (from == address(0)) {\\n            // Does not allow to mint more than uint96 can fit. Otherwise, the\\n            // Checkpoint might not fit the balance.\\n            require(\\n                totalSupply + amount <= maxSupply(),\\n                \\\"Maximum total supply exceeded\\\"\\n            );\\n            writeCheckpoint(_totalSupplyCheckpoints, add, safeAmount);\\n        }\\n\\n        // When burning:\\n        if (to == address(0)) {\\n            writeCheckpoint(_totalSupplyCheckpoints, subtract, safeAmount);\\n        }\\n\\n        moveVotingPower(delegates(from), delegates(to), safeAmount);\\n    }\\n\\n    function delegate(address delegator, address delegatee)\\n        internal\\n        virtual\\n        override\\n    {\\n        address currentDelegate = delegates(delegator);\\n        uint96 delegatorBalance = SafeCast.toUint96(balanceOf[delegator]);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/Governor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/Governor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"../utils/math/SafeCast.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Timers.sol\\\";\\nimport \\\"./IGovernor.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended though various modules.\\n *\\n * This contract is abstract and requires several function to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {getVotes}\\n * - Additionanly, the {votingPeriod} must also be implemented\\n *\\n * _Available since v4.3._\\n */\\nabstract contract Governor is Context, ERC165, EIP712, IGovernor {\\n    using SafeCast for uint256;\\n    using Timers for Timers.BlockNumber;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n\\n    struct ProposalCore {\\n        Timers.BlockNumber voteStart;\\n        Timers.BlockNumber voteEnd;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n\\n    /**\\n     * @dev Restrict access of functions to the governance executor, which may be the Governor itself or a timelock\\n     * contract, as specified by {_executor}. This generally means that function with this modifier must be voted on and\\n     * executed through the governance protocol.\\n     */\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    constructor(string memory name_) EIP712(name_, version()) {\\n        _name = name_;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n     */\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IGovernor).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-version}.\\n     */\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * accross multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if (snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        if (snapshot >= block.number) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline >= block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart.getDeadline();\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd.getDeadline();\\n    }\\n\\n    /**\\n     * @dev Part of the Governor Bravo's interface: _\\\"The number of votes required in order for a voter to become a proposer\\\"_.\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Register a vote with a given support and voting weight.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual;\\n\\n    /**\\n     * @dev See {IGovernor-propose}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        require(\\n            getVotes(msg.sender, block.number - 1) >= proposalThreshold(),\\n            \\\"GovernorCompatibilityBravo: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(proposal.voteStart.isUnset(), \\\"Governor: proposal already exists\\\");\\n\\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\\n        uint64 deadline = snapshot + votingPeriod().toUint64();\\n\\n        proposal.voteStart.setDeadline(snapshot);\\n        proposal.voteEnd.setDeadline(deadline);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal execution mechanism. Can be overriden to implement different execution mechanism\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            Address.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\\n     * canceled to allow distinguishing it from executed proposals.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteBySig}.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = getVotes(account, proposal.voteStart.getDeadline());\\n        _countVote(proposalId, account, support, weight);\\n\\n        emit VoteCast(account, proposalId, support, weight, reason);\\n\\n        return weight;\\n    }\\n\\n    /**\\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\\n     */\\n    function relay(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual onlyGovernance {\\n        Address.functionCallWithValue(target, data, value);\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n     * through another contract such as a timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 againstVotes,\\n            uint256 forVotes,\\n            uint256 abstainVotes\\n        )\\n    {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n        return (proposalvote.againstVotes, proposalvote.forVotes, proposalvote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalvote.forVotes + proposalvote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        return proposalvote.forVotes > proposalvote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual override {\\n        ProposalVote storage proposalvote = _proposalVotes[proposalId];\\n\\n        require(!proposalvote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalvote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalvote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalvote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalvote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/extensions/GovernorPreventLateQuorum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorPreventLateQuorum.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev A module that ensures there is a minimum voting period after quorum is reached. This prevents a large voter from\\n * swaying a vote and triggering quorum at the last minute, by ensuring there is always time for other voters to react\\n * and try to oppose the decision.\\n *\\n * If a vote causes quorum to be reached, the proposal's voting period may be extended so that it does not end before at\\n * least a given number of blocks have passed (the \\\"vote extension\\\" parameter). This parameter can be set by the\\n * governance executor (e.g. through a governance proposal).\\n *\\n * _Available since v4.5._\\n */\\nabstract contract GovernorPreventLateQuorum is Governor {\\n    using SafeCast for uint256;\\n    using Timers for Timers.BlockNumber;\\n\\n    uint64 private _voteExtension;\\n    mapping(uint256 => Timers.BlockNumber) private _extendedDeadlines;\\n\\n    /// @dev Emitted when a proposal deadline is pushed back due to reaching quorum late in its voting period.\\n    event ProposalExtended(uint256 indexed proposalId, uint64 extendedDeadline);\\n\\n    /// @dev Emitted when the {lateQuorumVoteExtension} parameter is changed.\\n    event LateQuorumVoteExtensionSet(uint64 oldVoteExtension, uint64 newVoteExtension);\\n\\n    /**\\n     * @dev Initializes the vote extension parameter: the number of blocks that are required to pass since a proposal\\n     * reaches quorum until its voting period ends. If necessary the voting period will be extended beyond the one set\\n     * at proposal creation.\\n     */\\n    constructor(uint64 initialVoteExtension) {\\n        _setLateQuorumVoteExtension(initialVoteExtension);\\n    }\\n\\n    /**\\n     * @dev Returns the proposal deadline, which may have been extended beyond that set at proposal creation, if the\\n     * proposal reached quorum late in the voting period. See {Governor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return Math.max(super.proposalDeadline(proposalId), _extendedDeadlines[proposalId].getDeadline());\\n    }\\n\\n    /**\\n     * @dev Casts a vote and detects if it caused quorum to be reached, potentially extending the voting period. See\\n     * {Governor-_castVote}.\\n     *\\n     * May emit a {ProposalExtended} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual override returns (uint256) {\\n        uint256 result = super._castVote(proposalId, account, support, reason);\\n\\n        Timers.BlockNumber storage extendedDeadline = _extendedDeadlines[proposalId];\\n\\n        if (extendedDeadline.isUnset() && _quorumReached(proposalId)) {\\n            uint64 extendedDeadlineValue = block.number.toUint64() + lateQuorumVoteExtension();\\n\\n            if (extendedDeadlineValue > proposalDeadline(proposalId)) {\\n                emit ProposalExtended(proposalId, extendedDeadlineValue);\\n            }\\n\\n            extendedDeadline.setDeadline(extendedDeadlineValue);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the current value of the vote extension parameter: the number of blocks that are required to pass\\n     * from the time a proposal reaches quorum until its voting period ends.\\n     */\\n    function lateQuorumVoteExtension() public view virtual returns (uint64) {\\n        return _voteExtension;\\n    }\\n\\n    /**\\n     * @dev Changes the {lateQuorumVoteExtension}. This operation can only be performed by the governance executor,\\n     * generally through a governance proposal.\\n     *\\n     * Emits a {LateQuorumVoteExtensionSet} event.\\n     */\\n    function setLateQuorumVoteExtension(uint64 newVoteExtension) public virtual onlyGovernance {\\n        _setLateQuorumVoteExtension(newVoteExtension);\\n    }\\n\\n    /**\\n     * @dev Changes the {lateQuorumVoteExtension}. This is an internal function that can be exposed in a public function\\n     * like {setLateQuorumVoteExtension} if another access control mechanism is needed.\\n     *\\n     * Emits a {LateQuorumVoteExtensionSet} event.\\n     */\\n    function _setLateQuorumVoteExtension(uint64 newVoteExtension) internal virtual {\\n        emit LateQuorumVoteExtensionSet(_voteExtension, newVoteExtension);\\n        _voteExtension = newVoteExtension;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernorTimelock.sol\\\";\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../TimelockController.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\\n *\\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\\n * inaccessible.\\n *\\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\\n    TimelockController private _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    /**\\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\\n     */\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    /**\\n     * @dev Set the timelock.\\n     */\\n    constructor(TimelockController timelockAddress) {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Overriden version of the {Governor-state} function with added support for the `Queued` status.\\n     */\\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else if (_timelock.isOperationPending(queueid)) {\\n            return ProposalState.Queued;\\n        } else {\\n            return ProposalState.Canceled;\\n        }\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the address of the timelock\\n     */\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the eta of a queued proposal\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    /**\\n     * @dev Function to queue a proposal to the timelock.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Governor: proposal not successful\\\");\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\\n\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Overriden execute function that run the already queued proposal through the timelock.\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Overriden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\n     * been queued.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\n     * must be proposed, scheduled, and executed through governance proposals.\\n     *\\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\n     */\\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(TimelockController newTimelock) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/GovernorParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/governance/Governor.sol\\\";\\n\\n/// @title GovernorParameters\\n/// @notice Abstract contract to handle governance parameters\\n/// @dev Based on `GovernorVotesQuorumFraction`, but without being opinionated\\n///      on what's the source of voting power, and extended to handle proposal\\n///      thresholds too. See OpenZeppelin's GovernorVotesQuorumFraction,\\n///      GovernorVotes and GovernorSettings for reference.\\nabstract contract GovernorParameters is Governor {\\n    uint256 public constant FRACTION_DENOMINATOR = 10000;\\n    uint64 internal constant AVERAGE_BLOCK_TIME_IN_SECONDS = 13;\\n\\n    uint256 public quorumNumerator;\\n    uint256 public proposalThresholdNumerator;\\n\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n\\n    event QuorumNumeratorUpdated(\\n        uint256 oldQuorumNumerator,\\n        uint256 newQuorumNumerator\\n    );\\n\\n    event ProposalThresholdNumeratorUpdated(\\n        uint256 oldThresholdNumerator,\\n        uint256 newThresholdNumerator\\n    );\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n\\n    constructor(\\n        uint256 quorumNumeratorValue,\\n        uint256 proposalNumeratorValue,\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod\\n    ) {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n        _updateProposalThresholdNumerator(proposalNumeratorValue);\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n    }\\n\\n    function updateQuorumNumerator(uint256 newQuorumNumerator)\\n        external\\n        virtual\\n        onlyGovernance\\n    {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    function updateProposalThresholdNumerator(uint256 newNumerator)\\n        external\\n        virtual\\n        onlyGovernance\\n    {\\n        _updateProposalThresholdNumerator(newNumerator);\\n    }\\n\\n    /// @notice Update the voting delay. This operation can only be performed\\n    ///         through a governance proposal. Emits a `VotingDelaySet` event.\\n    function setVotingDelay(uint256 newVotingDelay)\\n        external\\n        virtual\\n        onlyGovernance\\n    {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    /// @notice Update the voting period. This operation can only be performed\\n    ///         through a governance proposal. Emits a `VotingPeriodSet` event.\\n    function setVotingPeriod(uint256 newVotingPeriod)\\n        external\\n        virtual\\n        onlyGovernance\\n    {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /// @notice Compute the required amount of voting power to reach quorum\\n    /// @param blockNumber The block number to get the quorum at\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            (_getPastTotalSupply(blockNumber) * quorumNumerator) /\\n            FRACTION_DENOMINATOR;\\n    }\\n\\n    /// @notice Compute the required amount of voting power to create a proposal\\n    ///         at the last block height\\n    /// @dev This function is implemented to comply with Governor API but we\\n    ///      we will actually use `proposalThreshold(uint256 blockNumber)`,\\n    ///      as in our DAOs the threshold amount changes according to supply.\\n    function proposalThreshold()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return proposalThreshold(block.number - 1);\\n    }\\n\\n    /// @notice Compute the required amount of voting power to create a proposal\\n    /// @param blockNumber The block number to get the proposal threshold at\\n    function proposalThreshold(uint256 blockNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (_getPastTotalSupply(blockNumber) * proposalThresholdNumerator) /\\n            FRACTION_DENOMINATOR;\\n    }\\n\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator)\\n        internal\\n        virtual\\n    {\\n        require(\\n            newQuorumNumerator <= FRACTION_DENOMINATOR,\\n            \\\"quorumNumerator > Denominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = quorumNumerator;\\n        quorumNumerator = newQuorumNumerator;\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n\\n    function _updateProposalThresholdNumerator(uint256 proposalNumerator)\\n        internal\\n        virtual\\n    {\\n        require(\\n            proposalNumerator <= FRACTION_DENOMINATOR,\\n            \\\"proposalNumerator > Denominator\\\"\\n        );\\n\\n        uint256 oldNumerator = proposalThresholdNumerator;\\n        proposalThresholdNumerator = proposalNumerator;\\n\\n        emit ProposalThresholdNumeratorUpdated(oldNumerator, proposalNumerator);\\n    }\\n\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        // voting period must be at least one block long\\n        require(newVotingPeriod > 0, \\\"Voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    /// @notice Compute the past total voting power at a particular block\\n    /// @param blockNumber The block number to get the vote power at\\n    // slither-disable-next-line dead-code\\n    function _getPastTotalSupply(uint256 blockNumber)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/governance/IVotesHistory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\ninterface IVotesHistory {\\n    function getPastVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    function getPastTotalSupply(uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Timers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary Timers {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/IGovernor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor is IERC165 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast.\\n     *\\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/governance/Checkpoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IVotesHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\n/// @title Checkpoints\\n/// @dev Abstract contract to support checkpoints for Compound-like voting and\\n///      delegation. This implementation supports token supply up to 2^96 - 1.\\n///      This contract keeps a history (checkpoints) of each account's vote\\n///      power. Vote power can be delegated either by calling the {delegate}\\n///      function directly, or by providing a signature to be used with\\n///      {delegateBySig}. Voting power can be publicly queried through\\n///      {getVotes} and {getPastVotes}.\\n///      NOTE: Extracted from OpenZeppelin ERCVotes.sol.\\n/// @dev This contract is upgrade-safe.\\nabstract contract Checkpoints is IVotesHistory {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    // slither-disable-next-line uninitialized-state\\n    mapping(address => address) internal _delegates;\\n    mapping(address => uint128[]) internal _checkpoints;\\n    uint128[] internal _totalSupplyCheckpoints;\\n\\n    // Reserved storage space in case we need to add more variables,\\n    // since there are upgradeable contracts that inherit from this one.\\n    // See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    // slither-disable-next-line unused-state\\n    uint256[47] private __gap;\\n\\n    /// @notice Emitted when an account changes their delegate.\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice Emitted when a balance or delegate change results in changes\\n    ///         to an account's voting power.\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    function checkpoints(address account, uint32 pos)\\n        public\\n        view\\n        virtual\\n        returns (Checkpoint memory checkpoint)\\n    {\\n        (uint32 fromBlock, uint96 votes) = decodeCheckpoint(\\n            _checkpoints[account][pos]\\n        );\\n        checkpoint = Checkpoint(fromBlock, votes);\\n    }\\n\\n    /// @notice Get number of checkpoints for `account`.\\n    function numCheckpoints(address account)\\n        public\\n        view\\n        virtual\\n        returns (uint32)\\n    {\\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /// @notice Get the address `account` is currently delegating to.\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /// @notice Gets the current votes balance for `account`.\\n    /// @param account The address to get votes balance\\n    /// @return The number of current votes for `account`\\n    function getVotes(address account) public view returns (uint96) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : decodeValue(_checkpoints[account][pos - 1]);\\n    }\\n\\n    /// @notice Determine the prior number of votes for an account as of\\n    ///         a block number.\\n    /// @dev Block number must be a finalized block or else this function will\\n    ///      revert to prevent misinformation.\\n    /// @param account The address of the account to check\\n    /// @param blockNumber The block number to get the vote balance at\\n    /// @return The number of votes the account had as of the given block\\n    function getPastVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        return lookupCheckpoint(_checkpoints[account], blockNumber);\\n    }\\n\\n    /// @notice Retrieve the `totalSupply` at the end of `blockNumber`.\\n    ///         Note, this value is the sum of all balances, but it is NOT the\\n    ///         sum of all the delegated votes!\\n    /// @param blockNumber The block number to get the total supply at\\n    /// @dev `blockNumber` must have been already mined\\n    function getPastTotalSupply(uint256 blockNumber)\\n        public\\n        view\\n        returns (uint96)\\n    {\\n        return lookupCheckpoint(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /// @notice Change delegation for `delegator` to `delegatee`.\\n    // slither-disable-next-line dead-code\\n    function delegate(address delegator, address delegatee) internal virtual;\\n\\n    /// @notice Moves voting power from one delegate to another\\n    /// @param src Address of old delegate\\n    /// @param dst Address of new delegate\\n    /// @param amount Voting power amount to transfer between delegates\\n    function moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) internal {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                // https://github.com/crytic/slither/issues/960\\n                // slither-disable-next-line variable-scope\\n                (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\n                    _checkpoints[src],\\n                    subtract,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                // https://github.com/crytic/slither/issues/959\\n                // slither-disable-next-line uninitialized-local\\n                (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\n                    _checkpoints[dst],\\n                    add,\\n                    amount\\n                );\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    /// @notice Writes a new checkpoint based on operating last stored value\\n    ///         with a `delta`. Usually, said operation is the `add` or\\n    ///         `subtract` functions from this contract, but more complex\\n    ///         functions can be passed as parameters.\\n    /// @param ckpts The checkpoints array to use\\n    /// @param op The function to apply over the last value and the `delta`\\n    /// @param delta Variation with respect to last stored value to be used\\n    ///              for new checkpoint\\n    function writeCheckpoint(\\n        uint128[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : decodeValue(ckpts[pos - 1]);\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0) {\\n            uint32 fromBlock = decodeBlockNumber(ckpts[pos - 1]);\\n            // slither-disable-next-line incorrect-equality\\n            if (fromBlock == block.number) {\\n                ckpts[pos - 1] = encodeCheckpoint(\\n                    fromBlock,\\n                    SafeCastUpgradeable.toUint96(newWeight)\\n                );\\n                return (oldWeight, newWeight);\\n            }\\n        }\\n\\n        ckpts.push(\\n            encodeCheckpoint(\\n                SafeCastUpgradeable.toUint32(block.number),\\n                SafeCastUpgradeable.toUint96(newWeight)\\n            )\\n        );\\n    }\\n\\n    /// @notice Lookup a value in a list of (sorted) checkpoints.\\n    /// @param ckpts The checkpoints array to use\\n    /// @param blockNumber Block number when we want to get the checkpoint at\\n    function lookupCheckpoint(uint128[] storage ckpts, uint256 blockNumber)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        // We run a binary search to look for the earliest checkpoint taken\\n        // after `blockNumber`. During the loop, the index of the wanted\\n        // checkpoint remains in the range [low-1, high). With each iteration,\\n        // either `low` or `high` is moved towards the middle of the range to\\n        // maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`,\\n        //   we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`,\\n        //   we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the\\n        // right checkpoint at the index high-1, if not out of bounds (in that\\n        // case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for\\n        // `blockNumber`, we end up with an index that is past the end of the\\n        // array, so we technically don't find a checkpoint after\\n        // `blockNumber`, but it works out the same.\\n        require(blockNumber < block.number, \\\"Block not yet determined\\\");\\n\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            uint32 midBlock = decodeBlockNumber(ckpts[mid]);\\n            if (midBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : decodeValue(ckpts[high - 1]);\\n    }\\n\\n    /// @notice Maximum token supply. Defaults to `type(uint96).max` (2^96 - 1)\\n    // slither-disable-next-line dead-code\\n    function maxSupply() internal view virtual returns (uint96) {\\n        return type(uint96).max;\\n    }\\n\\n    /// @notice Encodes a `blockNumber` and `value` into a single `uint128`\\n    ///         checkpoint.\\n    /// @dev `blockNumber` is stored in the first 32 bits, while `value` in the\\n    ///      remaining 96 bits.\\n    function encodeCheckpoint(uint32 blockNumber, uint96 value)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return (uint128(blockNumber) << 96) | uint128(value);\\n    }\\n\\n    /// @notice Decodes a block number from a `uint128` `checkpoint`.\\n    function decodeBlockNumber(uint128 checkpoint)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        return uint32(bytes4(bytes16(checkpoint)));\\n    }\\n\\n    /// @notice Decodes a voting value from a `uint128` `checkpoint`.\\n    function decodeValue(uint128 checkpoint) internal pure returns (uint96) {\\n        return uint96(checkpoint);\\n    }\\n\\n    /// @notice Decodes a block number and voting value from a `uint128`\\n    ///         `checkpoint`.\\n    function decodeCheckpoint(uint128 checkpoint)\\n        internal\\n        pure\\n        returns (uint32 blockNumber, uint96 value)\\n    {\\n        blockNumber = decodeBlockNumber(checkpoint);\\n        value = decodeValue(checkpoint);\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    // slither-disable-next-line dead-code\\n    function subtract(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IERC20WithPermit.sol\\\";\\nimport \\\"./IReceiveApproval.sol\\\";\\n\\n/// @title  ERC20WithPermit\\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\\n///         authorize a transfer of their token with a signature conforming\\n///         EIP712 standard instead of an on-chain transaction from their\\n///         address. Anyone can submit this signature on the user's behalf by\\n///         calling the permit function, as specified in EIP2612 standard,\\n///         paying gas fees, and possibly performing other actions in the same\\n///         transaction.\\ncontract ERC20WithPermit is IERC20WithPermit, Ownable {\\n    /// @notice The amount of tokens owned by the given account.\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /// @notice The remaining number of tokens that spender will be\\n    ///         allowed to spend on behalf of owner through `transferFrom` and\\n    ///         `burnFrom`. This is zero by default.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /// @notice Returns the current nonce for EIP2612 permission for the\\n    ///         provided token owner for a replay protection. Used to construct\\n    ///         EIP2612 signature provided to `permit` function.\\n    mapping(address => uint256) public override nonce;\\n\\n    uint256 public immutable cachedChainId;\\n    bytes32 public immutable cachedDomainSeparator;\\n\\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\\n    ///         signature provided to `permit` function.\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /// @notice The amount of tokens in existence.\\n    uint256 public override totalSupply;\\n\\n    /// @notice The name of the token.\\n    string public override name;\\n\\n    /// @notice The symbol of the token.\\n    string public override symbol;\\n\\n    /// @notice The decimals places of the token.\\n    uint8 public constant override decimals = 18;\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n\\n        cachedChainId = block.chainid;\\n        cachedDomainSeparator = buildDomainSeparator();\\n    }\\n\\n    /// @notice Moves `amount` tokens from the caller's account to `recipient`.\\n    /// @return True if the operation succeeded, reverts otherwise.\\n    /// @dev Requirements:\\n    ///       - `recipient` cannot be the zero address,\\n    ///       - the caller must have a balance of at least `amount`.\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Moves `amount` tokens from `spender` to `recipient` using the\\n    ///         allowance mechanism. `amount` is then deducted from the caller's\\n    ///         allowance unless the allowance was made for `type(uint256).max`.\\n    /// @return True if the operation succeeded, reverts otherwise.\\n    /// @dev Requirements:\\n    ///      - `spender` and `recipient` cannot be the zero address,\\n    ///      - `spender` must have a balance of at least `amount`,\\n    ///      - the caller must have allowance for `spender`'s tokens of at least\\n    ///        `amount`.\\n    function transferFrom(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = allowance[spender][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            );\\n            _approve(spender, msg.sender, currentAllowance - amount);\\n        }\\n        _transfer(spender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice EIP2612 approval made with secp256k1 signature.\\n    ///         Users can authorize a transfer of their tokens with a signature\\n    ///         conforming EIP712 standard, rather than an on-chain transaction\\n    ///         from their address. Anyone can submit this signature on the\\n    ///         user's behalf by calling the permit function, paying gas fees,\\n    ///         and possibly performing other actions in the same transaction.\\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\\n    ///         permits that effectively never expire.  If the `amount` is set\\n    ///         to `type(uint256).max` then `transferFrom` and `burnFrom` will\\n    ///         not reduce an allowance.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        /* solhint-disable-next-line not-rely-on-time */\\n        require(deadline >= block.timestamp, \\\"Permission expired\\\");\\n\\n        // Validate `s` and `v` values for a malleability concern described in EIP2.\\n        // Only signatures with `s` value in the lower half of the secp256k1\\n        // curve's order and `v` value of 27 or 28 are considered valid.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"Invalid signature 'v' value\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        amount,\\n                        nonce[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Invalid signature\\\"\\n        );\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /// @notice Creates `amount` tokens and assigns them to `account`,\\n    ///         increasing the total supply.\\n    /// @dev Requirements:\\n    ///      - `recipient` cannot be the zero address.\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(recipient != address(0), \\\"Mint to the zero address\\\");\\n\\n        beforeTokenTransfer(address(0), recipient, amount);\\n\\n        totalSupply += amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    /// @notice Destroys `amount` tokens from the caller.\\n    /// @dev Requirements:\\n    ///       - the caller must have a balance of at least `amount`.\\n    function burn(uint256 amount) external override {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /// @notice Destroys `amount` of tokens from `account` using the allowance\\n    ///         mechanism. `amount` is then deducted from the caller's allowance\\n    ///         unless the allowance was made for `type(uint256).max`.\\n    /// @dev Requirements:\\n    ///      - `account` must have a balance of at least `amount`,\\n    ///      - the caller must have allowance for `account`'s tokens of at least\\n    ///        `amount`.\\n    function burnFrom(address account, uint256 amount) external override {\\n        uint256 currentAllowance = allowance[account][msg.sender];\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Burn amount exceeds allowance\\\"\\n            );\\n            _approve(account, msg.sender, currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n\\n    /// @notice Calls `receiveApproval` function on spender previously approving\\n    ///         the spender to withdraw from the caller multiple times, up to\\n    ///         the `amount` amount. If this function is called again, it\\n    ///         overwrites the current allowance with `amount`. Reverts if the\\n    ///         approval reverted or if `receiveApproval` call on the spender\\n    ///         reverted.\\n    /// @return True if both approval and `receiveApproval` calls succeeded.\\n    /// @dev If the `amount` is set to `type(uint256).max` then\\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external override returns (bool) {\\n        if (approve(spender, amount)) {\\n            IReceiveApproval(spender).receiveApproval(\\n                msg.sender,\\n                amount,\\n                address(this),\\n                extraData\\n            );\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's\\n    ///         tokens.\\n    /// @return True if the operation succeeded.\\n    /// @dev If the `amount` is set to `type(uint256).max` then\\n    ///      `transferFrom` and `burnFrom` will not reduce an allowance.\\n    ///      Beware that changing an allowance with this method brings the risk\\n    ///      that someone may use both the old and the new allowance by\\n    ///      unfortunate transaction ordering. One possible solution to mitigate\\n    ///      this race condition is to first reduce the spender's allowance to 0\\n    ///      and set the desired value afterwards:\\n    ///      https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\\n    ///         a signing domain and token contract as a verifying contract.\\n    ///         Used to construct EIP2612 signature provided to `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        // As explained in EIP-2612, if the DOMAIN_SEPARATOR contains the\\n        // chainId and is defined at contract deployment instead of\\n        // reconstructed for every signature, there is a risk of possible replay\\n        // attacks between chains in the event of a future chain split.\\n        // To address this issue, we check the cached chain ID against the\\n        // current one and in case they are different, we build domain separator\\n        // from scratch.\\n        if (block.chainid == cachedChainId) {\\n            return cachedDomainSeparator;\\n        } else {\\n            return buildDomainSeparator();\\n        }\\n    }\\n\\n    /// @dev Hook that is called before any transfer of tokens. This includes\\n    ///      minting and burning.\\n    ///\\n    /// Calling conditions:\\n    /// - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n    ///   will be to transferred to `to`.\\n    /// - when `from` is zero, `amount` tokens will be minted for `to`.\\n    /// - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n    /// - `from` and `to` are never both zero.\\n    // slither-disable-next-line dead-code\\n    function beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _burn(address account, uint256 amount) internal {\\n        uint256 currentBalance = balanceOf[account];\\n        require(currentBalance >= amount, \\\"Burn amount exceeds balance\\\");\\n\\n        beforeTokenTransfer(account, address(0), amount);\\n\\n        balanceOf[account] = currentBalance - amount;\\n        totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _transfer(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(spender != address(0), \\\"Transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"Transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"Transfer to the token address\\\");\\n\\n        beforeTokenTransfer(spender, recipient, amount);\\n\\n        uint256 spenderBalance = balanceOf[spender];\\n        require(spenderBalance >= amount, \\\"Transfer amount exceeds balance\\\");\\n        balanceOf[spender] = spenderBalance - amount;\\n        balanceOf[recipient] += amount;\\n        emit Transfer(spender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"Approve from the zero address\\\");\\n        require(spender != address(0), \\\"Approve to the zero address\\\");\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function buildDomainSeparator() private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@thesis/solidity-contracts/contracts/token/MisfundRecovery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title  MisfundRecovery\\n/// @notice Allows the owner of the token contract extending MisfundRecovery\\n///         to recover any ERC20 and ERC721 sent mistakenly to the token\\n///         contract address.\\ncontract MisfundRecovery is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    function recoverERC20(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    function recoverERC721(\\n        IERC721 token,\\n        address recipient,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        token.safeTransferFrom(address(this), recipient, tokenId, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@thesis/solidity-contracts/contracts/token/IERC20WithPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IApproveAndCall.sol\\\";\\n\\n/// @title  IERC20WithPermit\\n/// @notice Burnable ERC20 token with EIP2612 permit functionality. User can\\n///         authorize a transfer of their token with a signature conforming\\n///         EIP712 standard instead of an on-chain transaction from their\\n///         address. Anyone can submit this signature on the user's behalf by\\n///         calling the permit function, as specified in EIP2612 standard,\\n///         paying gas fees, and possibly performing other actions in the same\\n///         transaction.\\ninterface IERC20WithPermit is IERC20, IERC20Metadata, IApproveAndCall {\\n    /// @notice EIP2612 approval made with secp256k1 signature.\\n    ///         Users can authorize a transfer of their tokens with a signature\\n    ///         conforming EIP712 standard, rather than an on-chain transaction\\n    ///         from their address. Anyone can submit this signature on the\\n    ///         user's behalf by calling the permit function, paying gas fees,\\n    ///         and possibly performing other actions in the same transaction.\\n    /// @dev    The deadline argument can be set to `type(uint256).max to create\\n    ///         permits that effectively never expire.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Destroys `amount` tokens from the caller.\\n    function burn(uint256 amount) external;\\n\\n    /// @notice Destroys `amount` of tokens from `account`, deducting the amount\\n    ///         from caller's allowance.\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /// @notice Returns hash of EIP712 Domain struct with the token name as\\n    ///         a signing domain and token contract as a verifying contract.\\n    ///         Used to construct EIP2612 signature provided to `permit`\\n    ///         function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Returns the current nonce for EIP2612 permission for the\\n    ///         provided token owner for a replay protection. Used to construct\\n    ///         EIP2612 signature provided to `permit` function.\\n    function nonce(address owner) external view returns (uint256);\\n\\n    /// @notice Returns EIP2612 Permit message hash. Used to construct EIP2612\\n    ///         signature provided to `permit` function.\\n    /* solhint-disable-next-line func-name-mixedcase */\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice An interface that should be implemented by contracts supporting\\n///         `approveAndCall`/`receiveApproval` pattern.\\ninterface IReceiveApproval {\\n    /// @notice Receives approval to spend tokens. Called as a result of\\n    ///         `approveAndCall` call on the token.\\n    function receiveApproval(\\n        address from,\\n        uint256 amount,\\n        address token,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@thesis/solidity-contracts/contracts/token/IApproveAndCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice An interface that should be implemented by tokens supporting\\n///         `approveAndCall`/`receiveApproval` pattern.\\ninterface IApproveAndCall {\\n    /// @notice Executes `receiveApproval` function on spender as specified in\\n    ///         `IReceiveApproval` interface. Approves spender to withdraw from\\n    ///         the caller multiple times, up to the `amount`. If this\\n    ///         function is called again, it overwrites the current allowance\\n    ///         with `amount`. Reverts if the approval reverted or if\\n    ///         `receiveApproval` call on the spender reverted.\\n    function approveAndCall(\\n        address spender,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IGovernor.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelock is IGovernor {\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/TimelockController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with a given `minDelay`.\\n     */\\n    constructor(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors\\n    ) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // deployer + self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // register proposers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _beforeCall(id, predecessor);\\n        _call(id, 0, target, value, data);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == datas.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            _call(id, i, targets[i], values[i], datas[i]);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     *\\n     * Emits a {CallExecuted} event.\\n     */\\n    function _call(\\n        bytes32 id,\\n        uint256 index,\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) private {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n\\n        emit CallExecuted(id, index, target, value, data);\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/TokenholderGovernor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./BaseTokenholderGovernor.sol\\\";\\n\\ncontract TokenholderGovernor is BaseTokenholderGovernor {\\n    uint256 private constant INITIAL_QUORUM_NUMERATOR = 150; // Defined in basis points, i.e., 1.5%\\n    uint256 private constant INITIAL_PROPOSAL_THRESHOLD_NUMERATOR = 25; // Defined in basis points, i.e., 0.25%\\n    uint256 private constant INITIAL_VOTING_DELAY =\\n        2 days / AVERAGE_BLOCK_TIME_IN_SECONDS;\\n    uint256 private constant INITIAL_VOTING_PERIOD =\\n        10 days / AVERAGE_BLOCK_TIME_IN_SECONDS;\\n    uint64 private constant INITIAL_VOTING_EXTENSION =\\n        uint64(2 days) / AVERAGE_BLOCK_TIME_IN_SECONDS;\\n\\n    constructor(\\n        T _token,\\n        IVotesHistory _staking,\\n        TimelockController _timelock,\\n        address vetoer\\n    )\\n        BaseTokenholderGovernor(\\n            _token,\\n            _staking,\\n            _timelock,\\n            vetoer,\\n            INITIAL_QUORUM_NUMERATOR,\\n            INITIAL_PROPOSAL_THRESHOLD_NUMERATOR,\\n            INITIAL_VOTING_DELAY,\\n            INITIAL_VOTING_PERIOD,\\n            INITIAL_VOTING_EXTENSION\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/test/TestGovernorTestSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../governance/GovernorParameters.sol\\\";\\nimport \\\"../governance/StakerGovernor.sol\\\";\\nimport \\\"../governance/TokenholderGovernor.sol\\\";\\nimport \\\"../token/T.sol\\\";\\n\\ncontract TestTokenholderGovernorStub {\\n    string public name = \\\"TokenholderGovernor\\\";\\n    address public timelock = address(0x42);\\n}\\n\\ncontract TestTokenholderGovernorStubV2 {\\n    string public name = \\\"TokenholderGovernor\\\";\\n    address public timelock;\\n\\n    constructor(address _timelock) {\\n        timelock = _timelock;\\n    }\\n}\\n\\ncontract TestStakerGovernor is StakerGovernor {\\n    constructor(\\n        IVotesHistory tStaking,\\n        TokenholderGovernor tokenholderGov,\\n        address vetoer\\n    )\\n        StakerGovernor(\\n            tStaking,\\n            TimelockController(payable(0)),\\n            tokenholderGov,\\n            vetoer\\n        )\\n    {}\\n\\n    function executor() external view returns (address) {\\n        return _executor();\\n    }\\n}\\n\\ncontract TestTokenholderGovernor is BaseTokenholderGovernor {\\n    uint256 private constant INITIAL_QUORUM_NUMERATOR = 150; // Defined in basis points, i.e., 1.5%\\n    uint256 private constant INITIAL_PROPOSAL_THRESHOLD_NUMERATOR = 25; // Defined in basis points, i.e., 0.25%\\n    uint256 private constant INITIAL_VOTING_DELAY = 2;\\n    uint256 private constant INITIAL_VOTING_PERIOD = 8;\\n    uint64 private constant INITIAL_VOTING_EXTENSION = 4;\\n\\n    constructor(\\n        T _tToken,\\n        IVotesHistory _tStaking,\\n        TimelockController _timelock,\\n        address _vetoer\\n    )\\n        BaseTokenholderGovernor(\\n            _tToken,\\n            _tStaking,\\n            _timelock,\\n            _vetoer,\\n            INITIAL_QUORUM_NUMERATOR,\\n            INITIAL_PROPOSAL_THRESHOLD_NUMERATOR,\\n            INITIAL_VOTING_DELAY,\\n            INITIAL_VOTING_PERIOD,\\n            INITIAL_VOTING_EXTENSION\\n        )\\n    {}\\n}\\n\\ncontract TestGovernorParameters is GovernorParameters {\\n    address internal executor;\\n\\n    constructor(address executorAddress)\\n        Governor(\\\"TestGovernorParameters\\\")\\n        GovernorParameters(10, 20, 30, 40)\\n    {\\n        executor = executorAddress;\\n    }\\n\\n    function getVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {}\\n\\n    function getPastTotalSupply(uint256 blockNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {}\\n\\n    function hasVoted(uint256 proposalId, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE()\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (string memory)\\n    {}\\n\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual override {}\\n\\n    function _quorumReached(uint256 proposalId)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n\\n    function _voteSucceeded(uint256 proposalId)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n\\n    function _getPastTotalSupply(uint256 blockNumber)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {}\\n\\n    function _executor() internal view virtual override returns (address) {\\n        return executor;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/StakerGovernor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./StakerGovernorVotes.sol\\\";\\nimport \\\"./TokenholderGovernor.sol\\\";\\nimport \\\"../token/T.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/Governor.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\\\";\\n\\ncontract StakerGovernor is\\n    AccessControl,\\n    GovernorCountingSimple,\\n    StakerGovernorVotes,\\n    GovernorTimelockControl\\n{\\n    uint256 private constant INITIAL_QUORUM_NUMERATOR = 150; // Defined in basis points, i.e., 1.5%\\n    uint256 private constant INITIAL_PROPOSAL_THRESHOLD_NUMERATOR = 25; // Defined in basis points, i.e., 0.25%\\n    uint256 private constant INITIAL_VOTING_DELAY =\\n        2 days / AVERAGE_BLOCK_TIME_IN_SECONDS;\\n    uint256 private constant INITIAL_VOTING_PERIOD =\\n        10 days / AVERAGE_BLOCK_TIME_IN_SECONDS;\\n\\n    bytes32 public constant VETO_POWER =\\n        keccak256(\\\"Power to veto proposals in Threshold's Staker DAO\\\");\\n\\n    address internal immutable manager;\\n\\n    constructor(\\n        IVotesHistory _staking,\\n        TimelockController _timelock,\\n        TokenholderGovernor tokenholderGovernor,\\n        address vetoer\\n    )\\n        Governor(\\\"StakerGovernor\\\")\\n        GovernorParameters(\\n            INITIAL_QUORUM_NUMERATOR,\\n            INITIAL_PROPOSAL_THRESHOLD_NUMERATOR,\\n            INITIAL_VOTING_DELAY,\\n            INITIAL_VOTING_PERIOD\\n        )\\n        StakerGovernorVotes(_staking)\\n        GovernorTimelockControl(_timelock)\\n    {\\n        require(\\n            keccak256(bytes(tokenholderGovernor.name())) ==\\n                keccak256(bytes(\\\"TokenholderGovernor\\\")),\\n            \\\"Incorrect TokenholderGovernor\\\"\\n        );\\n        manager = tokenholderGovernor.timelock();\\n        require(manager != address(0), \\\"No timelock founds\\\");\\n        _setupRole(VETO_POWER, vetoer);\\n        _setupRole(DEFAULT_ADMIN_ROLE, manager);\\n    }\\n\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external onlyRole(VETO_POWER) returns (uint256) {\\n        return _cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public override(Governor, IGovernor) returns (uint256) {\\n        uint256 atLastBlock = block.number - 1;\\n        require(\\n            getVotes(msg.sender, atLastBlock) >= proposalThreshold(atLastBlock),\\n            \\\"Proposal below threshold\\\"\\n        );\\n        return super.propose(targets, values, calldatas, description);\\n    }\\n\\n    function quorum(uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernor, GovernorParameters)\\n        returns (uint256)\\n    {\\n        return super.quorum(blockNumber);\\n    }\\n\\n    function proposalThreshold()\\n        public\\n        view\\n        override(Governor, GovernorParameters)\\n        returns (uint256)\\n    {\\n        return super.proposalThreshold();\\n    }\\n\\n    function getVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        override(IGovernor, StakerGovernorVotes)\\n        returns (uint256)\\n    {\\n        return super.getVotes(account, blockNumber);\\n    }\\n\\n    function state(uint256 proposalId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (ProposalState)\\n    {\\n        return super.state(proposalId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(Governor, GovernorTimelockControl, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _execute(\\n        uint256 proposalId,\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal override(Governor, GovernorTimelockControl) {\\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n    }\\n\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\\n        return super._cancel(targets, values, calldatas, descriptionHash);\\n    }\\n\\n    /// @notice Returns the address of the entity that acts as governance for\\n    ///         this contract.\\n    /// @dev By default, Governor assumes this is either the Governor contract\\n    ///      itself, or a timelock if there's one configured. We override this\\n    ///      here for the StakerGovernor contract so it's the Tokenholder DAO's\\n    ///      Timelock, which we obtain at constructor time.\\n    function _executor()\\n        internal\\n        view\\n        override(Governor, GovernorTimelockControl)\\n        returns (address)\\n    {\\n        return manager;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/StakerGovernorVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./GovernorParameters.sol\\\";\\nimport \\\"./IVotesHistory.sol\\\";\\n\\n/// @title StakerGovernorVotes\\n/// @notice Staker DAO voting power extraction from staked T positions,\\n//          including legacy stakes (NU/KEEP).\\nabstract contract StakerGovernorVotes is GovernorParameters {\\n    IVotesHistory public immutable staking;\\n\\n    constructor(IVotesHistory tStakingAddress) {\\n        staking = tStakingAddress;\\n    }\\n\\n    /// @notice Read the voting weight from the snapshot mechanism in the T\\n    ///         staking contracts. Note that this also tracks legacy stakes\\n    ///         (NU/KEEP).\\n    /// @param account Delegate account with T staking voting power\\n    /// @param blockNumber The block number to get the vote balance at\\n    /// @dev See {IGovernor-getVotes}\\n    function getVotes(address account, uint256 blockNumber)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return staking.getPastVotes(account, blockNumber);\\n    }\\n\\n    /// @notice Compute the total voting power for the Staker DAO.\\n    /// @param blockNumber The block number to get the voting power at\\n    function _getPastTotalSupply(uint256 blockNumber)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return staking.getPastTotalSupply(blockNumber);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../utils/IVotes.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotes is Governor {\\n    IVotes public immutable token;\\n\\n    constructor(IVotes tokenAddress) {\\n        token = tokenAddress;\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        return token.getPastVotes(account, blockNumber);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/utils/IVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/test/TestTokenholderGovernorVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../governance/TokenholderGovernorVotes.sol\\\";\\nimport \\\"../token/T.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\n\\ncontract TestTokenholderGovernorVotes is TokenholderGovernorVotes {\\n    constructor(T _tToken, IVotesHistory _tStaking)\\n        Governor(\\\"TestTokenholderGovernor\\\")\\n        GovernorParameters(125, 75, 12, 34)\\n        TokenholderGovernorVotes(_tToken, _tStaking)\\n    {}\\n\\n    function getPastTotalSupply(uint256 blockNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _getPastTotalSupply(blockNumber);\\n    }\\n\\n    function hasVoted(uint256 proposalId, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE()\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (string memory)\\n    {}\\n\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual override {}\\n\\n    function _quorumReached(uint256 proposalId)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n\\n    function _voteSucceeded(uint256 proposalId)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../governance/utils/IVotes.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is IVotes, ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vending/VendingMachine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@thesis/solidity-contracts/contracts/token/IReceiveApproval.sol\\\";\\nimport \\\"../token/T.sol\\\";\\n\\n/// @title T token vending machine\\n/// @notice Contract implements a special update protocol to enable KEEP/NU\\n///         token holders to wrap their tokens and obtain T tokens according\\n///         to a fixed ratio. This will go on indefinitely and enable NU and\\n///         KEEP token holders to join T network without needing to buy or\\n///         sell any assets. Logistically, anyone holding NU or KEEP can wrap\\n///         those assets in order to upgrade to T. They can also unwrap T in\\n///         order to downgrade back to the underlying asset. There is a separate\\n///         instance of this contract deployed for KEEP holders and a separate\\n///         instance of this contract deployed for NU holders.\\ncontract VendingMachine is IReceiveApproval {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for T;\\n\\n    /// @notice Number of decimal places of precision in conversion to/from\\n    ///         wrapped tokens (assuming typical ERC20 token with 18 decimals).\\n    ///         This implies that amounts of wrapped tokens below this precision\\n    ///         won't take part in the conversion. E.g., for a value of 3, then\\n    ///         for a conversion of 1.123456789 wrapped tokens, only 1.123 is\\n    ///         convertible (i.e., 3 decimal places), and 0.000456789 is left.\\n    uint256 public constant WRAPPED_TOKEN_CONVERSION_PRECISION = 3;\\n\\n    /// @notice Divisor for precision purposes, used to represent fractions.\\n    uint256 public constant FLOATING_POINT_DIVISOR =\\n        10**(18 - WRAPPED_TOKEN_CONVERSION_PRECISION);\\n\\n    /// @notice The token being wrapped to T (KEEP/NU).\\n    IERC20 public immutable wrappedToken;\\n\\n    /// @notice T token contract.\\n    T public immutable tToken;\\n\\n    /// @notice The ratio with which T token is converted based on the provided\\n    ///         token being wrapped (KEEP/NU), expressed in 1e18 precision.\\n    ///\\n    ///         When wrapping:\\n    ///           x [T] = amount [KEEP/NU] * ratio / FLOATING_POINT_DIVISOR\\n    ///\\n    ///         When unwrapping:\\n    ///           x [KEEP/NU] = amount [T] * FLOATING_POINT_DIVISOR / ratio\\n    uint256 public immutable ratio;\\n\\n    /// @notice The total balance of wrapped tokens for the given holder\\n    ///         account. Only holders that have previously wrapped KEEP/NU to T\\n    ///         can unwrap, up to the amount previously wrapped.\\n    mapping(address => uint256) public wrappedBalance;\\n\\n    event Wrapped(\\n        address indexed recipient,\\n        uint256 wrappedTokenAmount,\\n        uint256 tTokenAmount\\n    );\\n    event Unwrapped(\\n        address indexed recipient,\\n        uint256 tTokenAmount,\\n        uint256 wrappedTokenAmount\\n    );\\n\\n    /// @notice Sets the reference to `wrappedToken` and `tToken`. Initializes\\n    ///         conversion `ratio` between wrapped token and T based on the\\n    ///         provided `_tTokenAllocation` and `_wrappedTokenAllocation`.\\n    /// @param _wrappedToken Address to ERC20 token that will be wrapped to T\\n    /// @param _tToken Address of T token\\n    /// @param _wrappedTokenAllocation The total supply of the token that will be\\n    ///       wrapped to T\\n    /// @param _tTokenAllocation The allocation of T this instance of Vending\\n    ///        Machine will receive\\n    /// @dev Multiplications in this contract can't overflow uint256 as we\\n    ///     restrict `_wrappedTokenAllocation` and `_tTokenAllocation` to\\n    ///     96 bits and FLOATING_POINT_DIVISOR fits in less than 60 bits.\\n    constructor(\\n        IERC20 _wrappedToken,\\n        T _tToken,\\n        uint96 _wrappedTokenAllocation,\\n        uint96 _tTokenAllocation\\n    ) {\\n        wrappedToken = _wrappedToken;\\n        tToken = _tToken;\\n        ratio =\\n            (FLOATING_POINT_DIVISOR * _tTokenAllocation) /\\n            _wrappedTokenAllocation;\\n    }\\n\\n    /// @notice Wraps up to the the given `amount` of the token (KEEP/NU) and\\n    ///         releases T token proportionally to the amount being wrapped with\\n    ///         respect to the wrap ratio. The token holder needs to have at\\n    ///         least the given amount of the wrapped token (KEEP/NU) approved\\n    ///         to transfer to the Vending Machine before calling this function.\\n    /// @param amount The amount of KEEP/NU to be wrapped\\n    function wrap(uint256 amount) external {\\n        _wrap(msg.sender, amount);\\n    }\\n\\n    /// @notice Wraps up to the given amount of the token (KEEP/NU) and releases\\n    ///         T token proportionally to the amount being wrapped with respect\\n    ///         to the wrap ratio. This is a shortcut to `wrap` function that\\n    ///         avoids a separate approval transaction. Only KEEP/NU token\\n    ///         is allowed as a caller, so please call this function via\\n    ///         token's `approveAndCall`.\\n    /// @param from Caller's address, must be the same as `wrappedToken` field\\n    /// @param amount The amount of KEEP/NU to be wrapped\\n    /// @param token Token's address, must be the same as `wrappedToken` field\\n    function receiveApproval(\\n        address from,\\n        uint256 amount,\\n        address token,\\n        bytes calldata\\n    ) external override {\\n        require(\\n            token == address(wrappedToken),\\n            \\\"Token is not the wrapped token\\\"\\n        );\\n        require(\\n            msg.sender == address(wrappedToken),\\n            \\\"Only wrapped token caller allowed\\\"\\n        );\\n        _wrap(from, amount);\\n    }\\n\\n    /// @notice Unwraps up to the given `amount` of T back to the legacy token\\n    ///         (KEEP/NU) according to the wrap ratio. It can only be called by\\n    ///         a token holder who previously wrapped their tokens in this\\n    ///         vending machine contract. The token holder can't unwrap more\\n    ///         tokens than they originally wrapped. The token holder needs to\\n    ///         have at least the given amount of T tokens approved to transfer\\n    ///         to the Vending Machine before calling this function.\\n    /// @param amount The amount of T to unwrap back to the collateral (KEEP/NU)\\n    function unwrap(uint256 amount) external {\\n        _unwrap(msg.sender, amount);\\n    }\\n\\n    /// @notice Returns the T token amount that's obtained from `amount` wrapped\\n    ///         tokens (KEEP/NU), and the remainder that can't be upgraded.\\n    function conversionToT(uint256 amount)\\n        public\\n        view\\n        returns (uint256 tAmount, uint256 wrappedRemainder)\\n    {\\n        wrappedRemainder = amount % FLOATING_POINT_DIVISOR;\\n        uint256 convertibleAmount = amount - wrappedRemainder;\\n        tAmount = (convertibleAmount * ratio) / FLOATING_POINT_DIVISOR;\\n    }\\n\\n    /// @notice The amount of wrapped tokens (KEEP/NU) that's obtained from\\n    ///         `amount` T tokens, and the remainder that can't be downgraded.\\n    function conversionFromT(uint256 amount)\\n        public\\n        view\\n        returns (uint256 wrappedAmount, uint256 tRemainder)\\n    {\\n        tRemainder = amount % ratio;\\n        uint256 convertibleAmount = amount - tRemainder;\\n        wrappedAmount = (convertibleAmount * FLOATING_POINT_DIVISOR) / ratio;\\n    }\\n\\n    function _wrap(address tokenHolder, uint256 wrappedTokenAmount) internal {\\n        (uint256 tTokenAmount, uint256 remainder) = conversionToT(\\n            wrappedTokenAmount\\n        );\\n        wrappedTokenAmount -= remainder;\\n        require(wrappedTokenAmount > 0, \\\"Disallow conversions of zero value\\\");\\n        emit Wrapped(tokenHolder, wrappedTokenAmount, tTokenAmount);\\n\\n        wrappedBalance[tokenHolder] += wrappedTokenAmount;\\n        wrappedToken.safeTransferFrom(\\n            tokenHolder,\\n            address(this),\\n            wrappedTokenAmount\\n        );\\n        tToken.safeTransfer(tokenHolder, tTokenAmount);\\n    }\\n\\n    function _unwrap(address tokenHolder, uint256 tTokenAmount) internal {\\n        (uint256 wrappedTokenAmount, uint256 remainder) = conversionFromT(\\n            tTokenAmount\\n        );\\n        tTokenAmount -= remainder;\\n        require(tTokenAmount > 0, \\\"Disallow conversions of zero value\\\");\\n        require(\\n            wrappedBalance[tokenHolder] >= wrappedTokenAmount,\\n            \\\"Can not unwrap more than previously wrapped\\\"\\n        );\\n\\n        emit Unwrapped(tokenHolder, tTokenAmount, wrappedTokenAmount);\\n        wrappedBalance[tokenHolder] -= wrappedTokenAmount;\\n        tToken.safeTransferFrom(tokenHolder, address(this), tTokenAmount);\\n        wrappedToken.safeTransfer(tokenHolder, wrappedTokenAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/TestToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@thesis/solidity-contracts/contracts/token/ERC20WithPermit.sol\\\";\\n\\ncontract TestToken is ERC20WithPermit {\\n    constructor() ERC20WithPermit(\\\"Test Token\\\", \\\"TEST\\\") {}\\n}\\n\"\r\n    },\r\n    \"contracts/staking/KeepStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ILegacyTokenStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title KEEP ManagedGrant contract interface\\ninterface IManagedGrant {\\n    function grantee() external view returns (address);\\n}\\n\\n/// @title KEEP stake owner resolver\\n/// @notice T network staking contract supports existing KEEP stakes by allowing\\n///         KEEP stakers to use their stakes in T network and weights them based\\n///         on KEEP<>T token ratio. KEEP stake owner is cached in T staking\\n///         contract and used to restrict access to all functions only owner or\\n///         operator should call. To cache KEEP staking contract in T staking\\n///         contract, it fitst needs to resolve the owner. Resolving liquid\\n///         KEEP stake owner is easy. Resolving token grant stake owner is\\n///         complicated and not possible to do on-chain from a contract external\\n///         to KEEP TokenStaking contract. Keep TokenStaking knows the grant ID\\n///         but does not expose it externally.\\n///\\n///         KeepStake contract addresses this problem by exposing\\n///         operator-owner mappings snapshotted off-chain based on events and\\n///         information publicly available from KEEP TokenStaking contract and\\n///         KEEP TokenGrant contract. Additionally, it gives the Governance\\n///         ability to add new mappings in case they are ever needed; in\\n///         practice, this will be needed only if someone decides to stake their\\n///         KEEP token grant in KEEP network after 2021-11-11 when the snapshot\\n///         was taken.\\n///\\n///         Operator-owner pairs were snapshotted 2021-11-11 in the following\\n///         way:\\n///         1. Fetch all TokenStaking events from KEEP staking contract.\\n///         2. Filter out undelegated operators.\\n///         3. Filter out canceled delegations.\\n///         4. Fetch grant stake information from KEEP TokenGrant for that\\n///            operator to determine if we are dealing with grant delegation.\\n///         5. Fetch grantee address from KEEP TokenGrant contract.\\n///         6. Check if we are dealing with ManagedGrant by looking for all\\n///            created ManagedGrants and comparing their address against grantee\\n///            address fetched from TokenGrant contract.\\ncontract KeepStake is Ownable {\\n    IKeepTokenStaking public immutable keepTokenStaking;\\n\\n    mapping(address => address) public operatorToManagedGrant;\\n    mapping(address => address) public operatorToGrantee;\\n\\n    constructor(IKeepTokenStaking _keepTokenStaking) {\\n        keepTokenStaking = _keepTokenStaking;\\n    }\\n\\n    /// @notice Allows the Governance to set new operator-managed grant pair.\\n    ///         This function should only be called for managed grants if\\n    ///         the snapshot does include this pair.\\n    function setManagedGrant(address operator, address managedGrant)\\n        external\\n        onlyOwner\\n    {\\n        operatorToManagedGrant[operator] = managedGrant;\\n    }\\n\\n    /// @notice Allows the Governance to set new operator-grantee pair.\\n    ///         This function should only be called for non-managed grants if\\n    ///         the snapshot does include this pair.\\n    function setGrantee(address operator, address grantee) external onlyOwner {\\n        operatorToGrantee[operator] = grantee;\\n    }\\n\\n    /// @notice Resolves KEEP stake owner for the provided operator address.\\n    ///         Reverts if could not resolve the owner.\\n    function resolveOwner(address operator) external view returns (address) {\\n        address owner = operatorToManagedGrant[operator];\\n        if (owner != address(0)) {\\n            return IManagedGrant(owner).grantee();\\n        }\\n\\n        owner = operatorToGrantee[operator];\\n        if (owner != address(0)) {\\n            return owner;\\n        }\\n\\n        owner = resolveSnapshottedManagedGrantees(operator);\\n        if (owner != address(0)) {\\n            return owner;\\n        }\\n\\n        owner = resolveSnapshottedGrantees(operator);\\n        if (owner != address(0)) {\\n            return owner;\\n        }\\n\\n        owner = keepTokenStaking.ownerOf(operator);\\n        require(owner != address(0), \\\"Could not resolve the owner\\\");\\n\\n        return owner;\\n    }\\n\\n    function resolveSnapshottedManagedGrantees(address operator)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        if (operator == 0x855A951162B1B93D70724484d5bdc9D00B56236B) {\\n            return\\n                IManagedGrant(0xFADbF758307A054C57B365Db1De90acA71feaFE5)\\n                    .grantee();\\n        }\\n        if (operator == 0xF1De9490Bf7298b5F350cE74332Ad7cf8d5cB181) {\\n            return\\n                IManagedGrant(0xAEd493Aaf3E76E83b29E151848b71eF4544f92f1)\\n                    .grantee();\\n        }\\n        if (operator == 0x39d2aCBCD80d80080541C6eed7e9feBb8127B2Ab) {\\n            return\\n                IManagedGrant(0xA2fa09D6f8C251422F5fde29a0BAd1C53dEfAe66)\\n                    .grantee();\\n        }\\n        if (operator == 0xd66cAE89FfBc6E50e6b019e45c1aEc93Dec54781) {\\n            return\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\n                    .grantee();\\n        }\\n        if (operator == 0x2eBE08379f4fD866E871A9b9E1d5C695154C6A9F) {\\n            return\\n                IManagedGrant(0xd00c0d43b747C33726B3f0ff4BDA4b72dc53c6E9)\\n                    .grantee();\\n        }\\n        if (operator == 0xA97c34278162b556A527CFc01B53eb4DDeDFD223) {\\n            return\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\n                    .grantee();\\n        }\\n        if (operator == 0x6C76d49322C9f8761A1623CEd89A31490cdB649d) {\\n            return\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\n                    .grantee();\\n        }\\n        if (operator == 0x4a41c7a884d119eaaefE471D0B3a638226408382) {\\n            return\\n                IManagedGrant(0xcdf3d216d82a463Ce82971F2F5DA3d8f9C5f093A)\\n                    .grantee();\\n        }\\n        if (operator == 0x9c06Feb7Ebc8065ee11Cd5E8EEdaAFb2909A7087) {\\n            return\\n                IManagedGrant(0x45119cd98d145283762BA9eBCAea75F72D188733)\\n                    .grantee();\\n        }\\n        if (operator == 0x9bD818Ab6ACC974f2Cf2BD2EBA7a250126Accb9F) {\\n            return\\n                IManagedGrant(0x6E535043377067621954ee84065b0bd7357e7aBa)\\n                    .grantee();\\n        }\\n        if (operator == 0x1d803c89760F8B4057DB15BCb3B8929E0498D310) {\\n            return\\n                IManagedGrant(0xB3E967355c456B1Bd43cB0188A321592D410D096)\\n                    .grantee();\\n        }\\n        if (operator == 0x3101927DEeC27A2bfA6c4a6316e3A221f631dB91) {\\n            return\\n                IManagedGrant(0x178Bf1946feD0e2362fdF8bcD3f91F0701a012C6)\\n                    .grantee();\\n        }\\n        if (operator == 0x9d9b187E478bC62694A7bED216Fc365de87F280C) {\\n            return\\n                IManagedGrant(0xFBad17CFad6cb00D726c65501D69FdC13Ca5477c)\\n                    .grantee();\\n        }\\n        if (operator == 0xd977144724Bc77FaeFAe219F958AE3947205d0b5) {\\n            return\\n                IManagedGrant(0x087B442BFd4E42675cf2df5fa566F87d7A96Fb12)\\n                    .grantee();\\n        }\\n        if (operator == 0x045E511f53DeBF55c9C0B4522f14F602f7C7cA81) {\\n            return\\n                IManagedGrant(0xFcfe8C036C414a15cF871071c483687095caF7D6)\\n                    .grantee();\\n        }\\n        if (operator == 0x3Dd301b3c96A282d8092E1e6f6846f24172D45C1) {\\n            return\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\n                    .grantee();\\n        }\\n        if (operator == 0x5d84DEB482E770479154028788Df79aA7C563aA4) {\\n            return\\n                IManagedGrant(0x9D1a179c469a8BdD0b683A9f9250246cc47e8fBE)\\n                    .grantee();\\n        }\\n        if (operator == 0x1dF927B69A97E8140315536163C029d188e8573b) {\\n            return\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\n                    .grantee();\\n        }\\n        if (operator == 0x617daCE069Fbd41993491de211b4DfccdAcbd348) {\\n            return\\n                IManagedGrant(0xb5Bdd2D9B3541fc8f581Af37430D26527e59aeF8)\\n                    .grantee();\\n        }\\n        if (operator == 0x650A9eD18Df873cad98C88dcaC8170531cAD2399) {\\n            return\\n                IManagedGrant(0x1Df7324A3aD20526DFa02Cc803eD2D97Cac81F3b)\\n                    .grantee();\\n        }\\n        if (operator == 0x07C9a8f8264221906b7b8958951Ce4753D39628B) {\\n            return\\n                IManagedGrant(0x305D12b4d70529Cd618dA7399F5520701E510041)\\n                    .grantee();\\n        }\\n        if (operator == 0x63eB4c3DD0751F9BE7070A01156513C227fa1eF6) {\\n            return\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\n                    .grantee();\\n        }\\n        if (operator == 0xc6349eEC31048787676b6297ba71721376A8DdcF) {\\n            return\\n                IManagedGrant(0xac1a985E75C6a0b475b9c807Ad0705a988Be2D99)\\n                    .grantee();\\n        }\\n        if (operator == 0x3B945f9C0C8737e44f8e887d4F04B5B3A491Ac4d) {\\n            return\\n                IManagedGrant(0x82e17477726E8D9D2C237745cA9989631582eE98)\\n                    .grantee();\\n        }\\n        if (operator == 0xF35343299a4f80Dd5D917bbe5ddd54eBB820eBd4) {\\n            return\\n                IManagedGrant(0xCC88c15506251B62ccCeebA193e100d6bBC9a30D)\\n                    .grantee();\\n        }\\n        if (operator == 0x3B9e5ae72d068448bB96786989c0d86FBC0551D1) {\\n            return\\n                IManagedGrant(0x306309f9d105F34132db0bFB3Ce3f5B0245Cd386)\\n                    .grantee();\\n        }\\n        if (operator == 0xB2D53Be158Cb8451dFc818bD969877038c1BdeA1) {\\n            return\\n                IManagedGrant(0xaE55e3800f0A3feaFdcE535A8C0fab0fFdB90DEe)\\n                    .grantee();\\n        }\\n        if (operator == 0xF6dbF7AFe05b8Bb6f198eC7e69333c98D3C4608C) {\\n            return\\n                IManagedGrant(0xbb8D24a20c20625f86739824014C3cBAAAb26700)\\n                    .grantee();\\n        }\\n        if (operator == 0xB62Fc1ADfFb2ab832041528C8178358338d85f76) {\\n            return\\n                IManagedGrant(0x9ED98fD1C29018B9342CB8F57A3073B9695f0c02)\\n                    .grantee();\\n        }\\n        if (operator == 0x9bC8d30d971C9e74298112803036C05db07D73e3) {\\n            return\\n                IManagedGrant(0x66beda757939f8e505b5Eb883cd02C8d4a11Bca2)\\n                    .grantee();\\n        }\\n\\n        return address(0);\\n    }\\n\\n    function resolveSnapshottedGrantees(address operator)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        if (operator == 0x1147ccFB4AEFc6e587a23b78724Ef20Ec6e474D4) {\\n            return 0x3FB49dA4375Ef9019f17990D04c6d5daD482D80a;\\n        }\\n        if (operator == 0x4c21541f95a00C03C75F38C71DC220bd27cbbEd9) {\\n            return 0xC897cfeE43a8d827F76D4226994D5CE5EBBe2571;\\n        }\\n        if (operator == 0x7E6332d18719a5463d3867a1a892359509589a3d) {\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\n        }\\n        if (operator == 0x8Bd660A764Ca14155F3411a4526a028b6316CB3E) {\\n            return 0xf6f372DfAeCC1431186598c304e91B79Ce115766;\\n        }\\n        if (operator == 0x4F4f0D0dfd93513B3f4Cb116Fe9d0A005466F725) {\\n            return 0x8b055ac1c4dd287E2a46D4a52d61FE76FB551bD0;\\n        }\\n        if (operator == 0x1DF0250027fEC876d8876d1ac7A392c9098F1a1e) {\\n            return 0xE408fFa969707Ce5d7aA3e5F8d44674Fa4b26219;\\n        }\\n        if (operator == 0x860EF3f83B6adFEF757F98345c3B8DdcFCA9d152) {\\n            return 0x08a3633AAb8f3E436DEA204288Ee26Fe094406b0;\\n        }\\n        if (operator == 0xe3a2d16dA142E6B190A5d9F7e0C07cc460B58A5F) {\\n            return 0x875f8fFCDDeD63B5d8Cf54be4E4b82FE6c6E249C;\\n        }\\n        if (operator == 0xBDE07f1cA107Ef319b0Bb26eBF1d0a5b4c97ffc1) {\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\n        }\\n        if (operator == 0xE86181D6b672d78D33e83029fF3D0ef4A601B4C4) {\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\n        }\\n        if (operator == 0xb7c561e2069aCaE2c4480111B1606790BB4E13fE) {\\n            return 0x1578eD833D986c1188D1a998aA5FEcD418beF5da;\\n        }\\n        if (operator == 0x526c013f8382B050d32d86e7090Ac84De22EdA4D) {\\n            return 0x61C6E5DDacded540CD08066C08cbc096d22D91f4;\\n        }\\n\\n        return address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/ILegacyTokenStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\n/// @title IKeepTokenStaking\\n/// @notice Interface for Keep TokenStaking contract\\ninterface IKeepTokenStaking {\\n    /// @notice Seize provided token amount from every member in the misbehaved\\n    /// operators array. The tattletale is rewarded with 5% of the total seized\\n    /// amount scaled by the reward adjustment parameter and the rest 95% is burned.\\n    /// @param amountToSeize Token amount to seize from every misbehaved operator.\\n    /// @param rewardMultiplier Reward adjustment in percentage. Min 1% and 100% max.\\n    /// @param tattletale Address to receive the 5% reward.\\n    /// @param misbehavedOperators Array of addresses to seize the tokens from.\\n    function seize(\\n        uint256 amountToSeize,\\n        uint256 rewardMultiplier,\\n        address tattletale,\\n        address[] memory misbehavedOperators\\n    ) external;\\n\\n    /// @notice Gets stake delegation info for the given operator.\\n    /// @param operator Operator address.\\n    /// @return amount The amount of tokens the given operator delegated.\\n    /// @return createdAt The time when the stake has been delegated.\\n    /// @return undelegatedAt The time when undelegation has been requested.\\n    /// If undelegation has not been requested, 0 is returned.\\n    function getDelegationInfo(address operator)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 createdAt,\\n            uint256 undelegatedAt\\n        );\\n\\n    /// @notice Gets the stake owner for the specified operator address.\\n    /// @return Stake owner address.\\n    function ownerOf(address operator) external view returns (address);\\n\\n    /// @notice Gets the beneficiary for the specified operator address.\\n    /// @return Beneficiary address.\\n    function beneficiaryOf(address operator)\\n        external\\n        view\\n        returns (address payable);\\n\\n    /// @notice Gets the authorizer for the specified operator address.\\n    /// @return Authorizer address.\\n    function authorizerOf(address operator) external view returns (address);\\n\\n    /// @notice Gets the eligible stake balance of the specified address.\\n    /// An eligible stake is a stake that passed the initialization period\\n    /// and is not currently undelegating. Also, the operator had to approve\\n    /// the specified operator contract.\\n    ///\\n    /// Operator with a minimum required amount of eligible stake can join the\\n    /// network and participate in new work selection.\\n    ///\\n    /// @param operator address of stake operator.\\n    /// @param operatorContract address of operator contract.\\n    /// @return balance an uint256 representing the eligible stake balance.\\n    function eligibleStake(address operator, address operatorContract)\\n        external\\n        view\\n        returns (uint256 balance);\\n}\\n\\n/// @title INuCypherStakingEscrow\\n/// @notice Interface for NuCypher StakingEscrow contract\\ninterface INuCypherStakingEscrow {\\n    /// @notice Slash the staker's stake and reward the investigator\\n    /// @param staker Staker's address\\n    /// @param penalty Penalty\\n    /// @param investigator Investigator\\n    /// @param reward Reward for the investigator\\n    function slashStaker(\\n        address staker,\\n        uint256 penalty,\\n        address investigator,\\n        uint256 reward\\n    ) external;\\n\\n    /// @notice Request merge between NuCypher staking contract and T staking contract.\\n    ///         Returns amount of staked tokens\\n    function requestMerge(address staker, address stakingProvider)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Get all tokens belonging to the staker\\n    function getAllTokens(address staker) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/test/IKeepManagedGrant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../staking/KeepStake.sol\\\";\\n\\ninterface IKeepManagedGrant is IManagedGrant {\\n    function stake(\\n        address stakingContract,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/TokenStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IApplication.sol\\\";\\nimport \\\"./ILegacyTokenStaking.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\nimport \\\"./KeepStake.sol\\\";\\nimport \\\"../governance/Checkpoints.sol\\\";\\nimport \\\"../token/T.sol\\\";\\nimport \\\"../utils/PercentUtils.sol\\\";\\nimport \\\"../utils/SafeTUpgradeable.sol\\\";\\nimport \\\"../vending/VendingMachine.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/// @notice TokenStaking is the main staking contract of the Threshold Network.\\n///         Apart from the basic usage of enabling T stakes, it also acts as a\\n///         sort of \\\"meta-staking\\\" contract, accepting existing legacy NU/KEEP\\n///         stakes. Additionally, it serves as application manager for the apps\\n///         that run on the Threshold Network. Note that legacy NU/KEEP staking\\n///         contracts see TokenStaking as an application (e.g., slashing is\\n///         requested by TokenStaking and performed by the legacy contracts).\\n/// @dev TokenStaking is upgradeable, using OpenZeppelin's Upgradeability\\n///      framework. As such, it is required to satisfy OZ's guidelines, like\\n///      restrictions on constructors, immutable variables, base contracts and\\n///      libraries. See https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\ncontract TokenStaking is Initializable, IStaking, Checkpoints {\\n    using SafeTUpgradeable for T;\\n    using PercentUtils for uint256;\\n    using SafeCastUpgradeable for uint256;\\n\\n    enum ApplicationStatus {\\n        NOT_APPROVED,\\n        APPROVED,\\n        PAUSED,\\n        DISABLED\\n    }\\n\\n    struct StakingProviderInfo {\\n        uint96 nuInTStake;\\n        address owner;\\n        uint96 keepInTStake;\\n        address payable beneficiary;\\n        uint96 tStake;\\n        address authorizer;\\n        mapping(address => AppAuthorization) authorizations;\\n        address[] authorizedApplications;\\n        uint256 startStakingTimestamp;\\n    }\\n\\n    struct AppAuthorization {\\n        uint96 authorized;\\n        uint96 deauthorizing;\\n    }\\n\\n    struct ApplicationInfo {\\n        ApplicationStatus status;\\n        address panicButton;\\n    }\\n\\n    struct SlashingEvent {\\n        address stakingProvider;\\n        uint96 amount;\\n    }\\n\\n    uint256 internal constant SLASHING_REWARD_PERCENT = 5;\\n    uint256 internal constant MIN_STAKE_TIME = 24 hours;\\n    uint256 internal constant GAS_LIMIT_AUTHORIZATION_DECREASE = 250000;\\n    uint256 internal constant CONVERSION_DIVISOR = 10**(18 - 3);\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    T internal immutable token;\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IKeepTokenStaking internal immutable keepStakingContract;\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    KeepStake internal immutable keepStake;\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    INuCypherStakingEscrow internal immutable nucypherStakingContract;\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    uint256 internal immutable keepRatio;\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    uint256 internal immutable nucypherRatio;\\n\\n    address public governance;\\n    uint96 public minTStakeAmount;\\n    uint256 public authorizationCeiling;\\n    uint96 public stakeDiscrepancyPenalty;\\n    uint256 public stakeDiscrepancyRewardMultiplier;\\n\\n    uint256 public notifiersTreasury;\\n    uint256 public notificationReward;\\n\\n    mapping(address => StakingProviderInfo) internal stakingProviders;\\n    mapping(address => ApplicationInfo) public applicationInfo;\\n    address[] public applications;\\n\\n    SlashingEvent[] public slashingQueue;\\n    uint256 public slashingQueueIndex;\\n\\n    event Staked(\\n        StakeType indexed stakeType,\\n        address indexed owner,\\n        address indexed stakingProvider,\\n        address beneficiary,\\n        address authorizer,\\n        uint96 amount\\n    );\\n    event MinimumStakeAmountSet(uint96 amount);\\n    event ApplicationStatusChanged(\\n        address indexed application,\\n        ApplicationStatus indexed newStatus\\n    );\\n    event AuthorizationIncreased(\\n        address indexed stakingProvider,\\n        address indexed application,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    );\\n    event AuthorizationDecreaseRequested(\\n        address indexed stakingProvider,\\n        address indexed application,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    );\\n    event AuthorizationDecreaseApproved(\\n        address indexed stakingProvider,\\n        address indexed application,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    );\\n    event AuthorizationInvoluntaryDecreased(\\n        address indexed stakingProvider,\\n        address indexed application,\\n        uint96 fromAmount,\\n        uint96 toAmount,\\n        bool indexed successfulCall\\n    );\\n    event PanicButtonSet(\\n        address indexed application,\\n        address indexed panicButton\\n    );\\n    event AuthorizationCeilingSet(uint256 ceiling);\\n    event ToppedUp(address indexed stakingProvider, uint96 amount);\\n    event Unstaked(address indexed stakingProvider, uint96 amount);\\n    event TokensSeized(\\n        address indexed stakingProvider,\\n        uint96 amount,\\n        bool indexed discrepancy\\n    );\\n    event StakeDiscrepancyPenaltySet(uint96 penalty, uint256 rewardMultiplier);\\n    event NotificationRewardSet(uint96 reward);\\n    event NotificationRewardPushed(uint96 reward);\\n    event NotificationRewardWithdrawn(address recipient, uint96 amount);\\n    event NotifierRewarded(address indexed notifier, uint256 amount);\\n    event SlashingProcessed(\\n        address indexed caller,\\n        uint256 count,\\n        uint256 tAmount\\n    );\\n    event OwnerRefreshed(\\n        address indexed stakingProvider,\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n    event GovernanceTransferred(address oldGovernance, address newGovernance);\\n\\n    modifier onlyGovernance() {\\n        require(governance == msg.sender, \\\"Caller is not the governance\\\");\\n        _;\\n    }\\n\\n    modifier onlyPanicButtonOf(address application) {\\n        require(\\n            applicationInfo[application].panicButton == msg.sender,\\n            \\\"Caller is not the panic button\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorizerOf(address stakingProvider) {\\n        //slither-disable-next-line incorrect-equality\\n        require(\\n            stakingProviders[stakingProvider].authorizer == msg.sender,\\n            \\\"Not authorizer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrStakingProvider(address stakingProvider) {\\n        //slither-disable-next-line incorrect-equality\\n        require(\\n            stakingProviders[stakingProvider].owner != address(0) &&\\n                (stakingProvider == msg.sender ||\\n                    stakingProviders[stakingProvider].owner == msg.sender),\\n            \\\"Not owner or provider\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerOf(address stakingProvider) {\\n        require(\\n            stakingProviders[stakingProvider].owner == msg.sender,\\n            \\\"Caller is not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _token Address of T token contract\\n    /// @param _keepStakingContract Address of Keep staking contract\\n    /// @param _nucypherStakingContract Address of NuCypher staking contract\\n    /// @param _keepVendingMachine Address of Keep vending machine\\n    /// @param _nucypherVendingMachine Address of NuCypher vending machine\\n    /// @param _keepStake Address of Keep contract with grant owners\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        T _token,\\n        IKeepTokenStaking _keepStakingContract,\\n        INuCypherStakingEscrow _nucypherStakingContract,\\n        VendingMachine _keepVendingMachine,\\n        VendingMachine _nucypherVendingMachine,\\n        KeepStake _keepStake\\n    ) {\\n        // calls to check contracts are working\\n        require(\\n            _token.totalSupply() > 0 &&\\n                _keepStakingContract.ownerOf(address(0)) == address(0) &&\\n                _nucypherStakingContract.getAllTokens(address(0)) == 0 &&\\n                AddressUpgradeable.isContract(address(_keepStake)),\\n            \\\"Wrong input parameters\\\"\\n        );\\n        token = _token;\\n        keepStakingContract = _keepStakingContract;\\n        keepStake = _keepStake;\\n        nucypherStakingContract = _nucypherStakingContract;\\n\\n        keepRatio = _keepVendingMachine.ratio();\\n        nucypherRatio = _nucypherVendingMachine.ratio();\\n    }\\n\\n    function initialize() external initializer {\\n        _transferGovernance(msg.sender);\\n    }\\n\\n    //\\n    //\\n    // Delegating a stake\\n    //\\n    //\\n\\n    /// @notice Creates a delegation with `msg.sender` owner with the given\\n    ///         staking provider, beneficiary, and authorizer. Transfers the\\n    ///         given amount of T to the staking contract.\\n    /// @dev The owner of the delegation needs to have the amount approved to\\n    ///      transfer to the staking contract.\\n    function stake(\\n        address stakingProvider,\\n        address payable beneficiary,\\n        address authorizer,\\n        uint96 amount\\n    ) external override {\\n        require(\\n            stakingProvider != address(0) &&\\n                beneficiary != address(0) &&\\n                authorizer != address(0),\\n            \\\"Parameters must be specified\\\"\\n        );\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        (, uint256 createdAt, ) = keepStakingContract.getDelegationInfo(\\n            stakingProvider\\n        );\\n        require(\\n            createdAt == 0 && stakingProviderStruct.owner == address(0),\\n            \\\"Provider is already in use\\\"\\n        );\\n        require(\\n            amount > 0 && amount >= minTStakeAmount,\\n            \\\"Amount is less than minimum\\\"\\n        );\\n        stakingProviderStruct.owner = msg.sender;\\n        stakingProviderStruct.authorizer = authorizer;\\n        stakingProviderStruct.beneficiary = beneficiary;\\n\\n        stakingProviderStruct.tStake = amount;\\n        /* solhint-disable-next-line not-rely-on-time */\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\n\\n        increaseStakeCheckpoint(stakingProvider, amount);\\n\\n        emit Staked(\\n            StakeType.T,\\n            msg.sender,\\n            stakingProvider,\\n            beneficiary,\\n            authorizer,\\n            amount\\n        );\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /// @notice Copies delegation from the legacy KEEP staking contract to T\\n    ///         staking contract. No tokens are transferred. Caches the active\\n    ///         stake amount from KEEP staking contract. Can be called by\\n    ///         anyone.\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\n    ///      staking contract operator.\\n    function stakeKeep(address stakingProvider) external override {\\n        require(stakingProvider != address(0), \\\"Parameters must be specified\\\");\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n\\n        require(\\n            stakingProviderStruct.owner == address(0),\\n            \\\"Provider is already in use\\\"\\n        );\\n\\n        uint96 tAmount = getKeepAmountInT(stakingProvider);\\n        require(tAmount != 0, \\\"Nothing to sync\\\");\\n\\n        stakingProviderStruct.keepInTStake = tAmount;\\n        stakingProviderStruct.owner = keepStake.resolveOwner(stakingProvider);\\n        stakingProviderStruct.authorizer = keepStakingContract.authorizerOf(\\n            stakingProvider\\n        );\\n        stakingProviderStruct.beneficiary = keepStakingContract.beneficiaryOf(\\n            stakingProvider\\n        );\\n\\n        /* solhint-disable-next-line not-rely-on-time */\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\n\\n        increaseStakeCheckpoint(stakingProvider, tAmount);\\n\\n        emit Staked(\\n            StakeType.KEEP,\\n            stakingProviderStruct.owner,\\n            stakingProvider,\\n            stakingProviderStruct.beneficiary,\\n            stakingProviderStruct.authorizer,\\n            tAmount\\n        );\\n    }\\n\\n    /// @notice Copies delegation from the legacy NU staking contract to T\\n    ///         staking contract, additionally appointing beneficiary and\\n    ///         authorizer roles. Caches the amount staked in NU staking\\n    ///         contract. Can be called only by the original delegation owner.\\n    function stakeNu(\\n        address stakingProvider,\\n        address payable beneficiary,\\n        address authorizer\\n    ) external override {\\n        require(\\n            stakingProvider != address(0) &&\\n                beneficiary != address(0) &&\\n                authorizer != address(0),\\n            \\\"Parameters must be specified\\\"\\n        );\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        (, uint256 createdAt, ) = keepStakingContract.getDelegationInfo(\\n            stakingProvider\\n        );\\n        require(\\n            createdAt == 0 && stakingProviderStruct.owner == address(0),\\n            \\\"Provider is already in use\\\"\\n        );\\n\\n        uint96 tAmount = getNuAmountInT(msg.sender, stakingProvider);\\n        require(tAmount > 0, \\\"Nothing to sync\\\");\\n\\n        stakingProviderStruct.nuInTStake = tAmount;\\n        stakingProviderStruct.owner = msg.sender;\\n        stakingProviderStruct.authorizer = authorizer;\\n        stakingProviderStruct.beneficiary = beneficiary;\\n        /* solhint-disable-next-line not-rely-on-time */\\n        stakingProviderStruct.startStakingTimestamp = block.timestamp;\\n\\n        increaseStakeCheckpoint(stakingProvider, tAmount);\\n\\n        emit Staked(\\n            StakeType.NU,\\n            msg.sender,\\n            stakingProvider,\\n            beneficiary,\\n            authorizer,\\n            tAmount\\n        );\\n    }\\n\\n    /// @notice Allows the Governance to set the minimum required stake amount.\\n    ///         This amount is required to protect against griefing the staking\\n    ///         contract and individual applications are allowed to require\\n    ///         higher minimum stakes if necessary.\\n    /// @dev Staking providers are not required to maintain a minimum T stake\\n    ///      all the time. 24 hours after the delegation, T stake can be reduced\\n    ///      below the minimum stake. The minimum stake in the staking contract\\n    ///      is just to protect against griefing stake operation. Please note\\n    ///      that each application may have its own minimum authorization though\\n    ///      and the authorization can not be higher than the stake.\\n    function setMinimumStakeAmount(uint96 amount)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        minTStakeAmount = amount;\\n        emit MinimumStakeAmountSet(amount);\\n    }\\n\\n    //\\n    //\\n    // Authorizing an application\\n    //\\n    //\\n\\n    /// @notice Allows the Governance to approve the particular application\\n    ///         before individual stake authorizers are able to authorize it.\\n    function approveApplication(address application)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(application != address(0), \\\"Parameters must be specified\\\");\\n        ApplicationInfo storage info = applicationInfo[application];\\n        require(\\n            info.status == ApplicationStatus.NOT_APPROVED ||\\n                info.status == ApplicationStatus.PAUSED,\\n            \\\"Can't approve application\\\"\\n        );\\n\\n        if (info.status == ApplicationStatus.NOT_APPROVED) {\\n            applications.push(application);\\n        }\\n        info.status = ApplicationStatus.APPROVED;\\n        emit ApplicationStatusChanged(application, ApplicationStatus.APPROVED);\\n    }\\n\\n    /// @notice Increases the authorization of the given staking provider for\\n    ///         the given application by the given amount. Can only be called by\\n    ///         the given staking provider\u2019s authorizer.\\n    /// @dev Calls `authorizationIncreased` callback on the given application to\\n    ///      notify the application about authorization change.\\n    ///      See `IApplication`.\\n    function increaseAuthorization(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) external override onlyAuthorizerOf(stakingProvider) {\\n        require(amount > 0, \\\"Parameters must be specified\\\");\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        AppAuthorization storage authorization = stakingProviderStruct\\n            .authorizations[application];\\n        uint96 fromAmount = authorization.authorized;\\n        if (fromAmount == 0) {\\n            require(\\n                authorizationCeiling == 0 ||\\n                    stakingProviderStruct.authorizedApplications.length <\\n                    authorizationCeiling,\\n                \\\"Too many applications\\\"\\n            );\\n            stakingProviderStruct.authorizedApplications.push(application);\\n        }\\n\\n        uint96 availableTValue = getAvailableToAuthorize(\\n            stakingProvider,\\n            application\\n        );\\n        require(availableTValue >= amount, \\\"Not enough stake to authorize\\\");\\n        authorization.authorized += amount;\\n        emit AuthorizationIncreased(\\n            stakingProvider,\\n            application,\\n            fromAmount,\\n            authorization.authorized\\n        );\\n        IApplication(application).authorizationIncreased(\\n            stakingProvider,\\n            fromAmount,\\n            authorization.authorized\\n        );\\n    }\\n\\n    /// @notice Requests decrease of all authorizations for the given staking\\n    ///         provider on all applications by all authorized amount.\\n    ///         It may not change the authorized amount immediatelly. When\\n    ///         it happens depends on the application. Can only be called by the\\n    ///         given staking provider\u2019s authorizer. Overwrites pending\\n    ///         authorization decrease for the given staking provider and\\n    ///         application.\\n    /// @dev Calls `authorizationDecreaseRequested` callback\\n    ///      for each authorized application. See `IApplication`.\\n    function requestAuthorizationDecrease(address stakingProvider) external {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 deauthorizing = 0;\\n        for (\\n            uint256 i = 0;\\n            i < stakingProviderStruct.authorizedApplications.length;\\n            i++\\n        ) {\\n            address application = stakingProviderStruct.authorizedApplications[\\n                i\\n            ];\\n            uint96 authorized = stakingProviderStruct\\n                .authorizations[application]\\n                .authorized;\\n            if (authorized > 0) {\\n                requestAuthorizationDecrease(\\n                    stakingProvider,\\n                    application,\\n                    authorized\\n                );\\n                deauthorizing += authorized;\\n            }\\n        }\\n\\n        require(deauthorizing > 0, \\\"Nothing was authorized\\\");\\n    }\\n\\n    /// @notice Called by the application at its discretion to approve the\\n    ///         previously requested authorization decrease request. Can only be\\n    ///         called by the application that was previously requested to\\n    ///         decrease the authorization for that staking provider.\\n    ///         Returns resulting authorized amount for the application.\\n    function approveAuthorizationDecrease(address stakingProvider)\\n        external\\n        override\\n        returns (uint96)\\n    {\\n        ApplicationInfo storage applicationStruct = applicationInfo[msg.sender];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        AppAuthorization storage authorization = stakingProviderStruct\\n            .authorizations[msg.sender];\\n        require(authorization.deauthorizing > 0, \\\"No deauthorizing in process\\\");\\n\\n        uint96 fromAmount = authorization.authorized;\\n        authorization.authorized -= authorization.deauthorizing;\\n        authorization.deauthorizing = 0;\\n        emit AuthorizationDecreaseApproved(\\n            stakingProvider,\\n            msg.sender,\\n            fromAmount,\\n            authorization.authorized\\n        );\\n\\n        // remove application from an array\\n        if (authorization.authorized == 0) {\\n            cleanAuthorizedApplications(stakingProviderStruct, 1);\\n        }\\n\\n        return authorization.authorized;\\n    }\\n\\n    /// @notice Decreases the authorization for the given `stakingProvider` on\\n    ///         the given disabled `application`, for all authorized amount.\\n    ///         Can be called by anyone.\\n    function forceDecreaseAuthorization(\\n        address stakingProvider,\\n        address application\\n    ) external override {\\n        require(\\n            applicationInfo[application].status == ApplicationStatus.DISABLED,\\n            \\\"Application is not disabled\\\"\\n        );\\n\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        AppAuthorization storage authorization = stakingProviderStruct\\n            .authorizations[application];\\n        uint96 fromAmount = authorization.authorized;\\n        require(fromAmount > 0, \\\"Application is not authorized\\\");\\n        authorization.authorized = 0;\\n        authorization.deauthorizing = 0;\\n\\n        emit AuthorizationDecreaseApproved(\\n            stakingProvider,\\n            application,\\n            fromAmount,\\n            0\\n        );\\n        cleanAuthorizedApplications(stakingProviderStruct, 1);\\n    }\\n\\n    /// @notice Pauses the given application\u2019s eligibility to slash stakes.\\n    ///         Besides that stakers can't change authorization to the application.\\n    ///         Can be called only by the Panic Button of the particular\\n    ///         application. The paused application can not slash stakes until\\n    ///         it is approved again by the Governance using `approveApplication`\\n    ///         function. Should be used only in case of an emergency.\\n    function pauseApplication(address application)\\n        external\\n        override\\n        onlyPanicButtonOf(application)\\n    {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Can't pause application\\\"\\n        );\\n        applicationStruct.status = ApplicationStatus.PAUSED;\\n        emit ApplicationStatusChanged(application, ApplicationStatus.PAUSED);\\n    }\\n\\n    /// @notice Disables the given application. The disabled application can't\\n    ///         slash stakers. Also stakers can't increase authorization to that\\n    ///         application but can decrease without waiting by calling\\n    ///         `forceDecreaseAuthorization` at any moment. Can be called only\\n    ///         by the governance. The disabled application can't be approved\\n    ///         again. Should be used only in case of an emergency.\\n    function disableApplication(address application)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED ||\\n                applicationStruct.status == ApplicationStatus.PAUSED,\\n            \\\"Can't disable application\\\"\\n        );\\n        applicationStruct.status = ApplicationStatus.DISABLED;\\n        emit ApplicationStatusChanged(application, ApplicationStatus.DISABLED);\\n    }\\n\\n    /// @notice Sets the Panic Button role for the given application to the\\n    ///         provided address. Can only be called by the Governance. If the\\n    ///         Panic Button for the given application should be disabled, the\\n    ///         role address should be set to 0x0 address.\\n    function setPanicButton(address application, address panicButton)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n        applicationStruct.panicButton = panicButton;\\n        emit PanicButtonSet(application, panicButton);\\n    }\\n\\n    /// @notice Sets the maximum number of applications one staking provider can\\n    ///         have authorized. Used to protect against DoSing slashing queue.\\n    ///         Can only be called by the Governance.\\n    function setAuthorizationCeiling(uint256 ceiling)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        authorizationCeiling = ceiling;\\n        emit AuthorizationCeilingSet(ceiling);\\n    }\\n\\n    //\\n    //\\n    // Stake top-up\\n    //\\n    //\\n\\n    /// @notice Increases the amount of the stake for the given staking provider.\\n    /// @dev The sender of this transaction needs to have the amount approved to\\n    ///      transfer to the staking contract.\\n    function topUp(address stakingProvider, uint96 amount) external override {\\n        require(\\n            stakingProviders[stakingProvider].owner != address(0),\\n            \\\"Nothing to top-up\\\"\\n        );\\n        require(amount > 0, \\\"Parameters must be specified\\\");\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        stakingProviderStruct.tStake += amount;\\n        emit ToppedUp(stakingProvider, amount);\\n        increaseStakeCheckpoint(stakingProvider, amount);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /// @notice Propagates information about stake top-up from the legacy KEEP\\n    ///         staking contract to T staking contract. Can be called only by\\n    ///         the owner or the staking provider.\\n    function topUpKeep(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 tAmount = getKeepAmountInT(stakingProvider);\\n        require(\\n            tAmount > stakingProviderStruct.keepInTStake,\\n            \\\"Nothing to top-up\\\"\\n        );\\n\\n        uint96 toppedUp = tAmount - stakingProviderStruct.keepInTStake;\\n        emit ToppedUp(stakingProvider, toppedUp);\\n        stakingProviderStruct.keepInTStake = tAmount;\\n        increaseStakeCheckpoint(stakingProvider, toppedUp);\\n    }\\n\\n    /// @notice Propagates information about stake top-up from the legacy NU\\n    ///         staking contract to T staking contract. Can be called only by\\n    ///         the owner or the staking provider.\\n    function topUpNu(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOf(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 tAmount = getNuAmountInT(\\n            stakingProviderStruct.owner,\\n            stakingProvider\\n        );\\n        require(\\n            tAmount > stakingProviderStruct.nuInTStake,\\n            \\\"Nothing to top-up\\\"\\n        );\\n\\n        uint96 toppedUp = tAmount - stakingProviderStruct.nuInTStake;\\n        emit ToppedUp(stakingProvider, toppedUp);\\n        stakingProviderStruct.nuInTStake = tAmount;\\n        increaseStakeCheckpoint(stakingProvider, toppedUp);\\n    }\\n\\n    //\\n    //\\n    // Undelegating a stake (unstaking)\\n    //\\n    //\\n\\n    /// @notice Reduces the liquid T stake amount by the provided amount and\\n    ///         withdraws T to the owner. Reverts if there is at least one\\n    ///         authorization higher than the sum of the legacy stake and\\n    ///         remaining liquid T stake or if the unstake amount is higher than\\n    ///         the liquid T stake amount. Can be called only by the owner or\\n    ///         the staking provider. Can only be called when 24h passed since\\n    ///         the stake has been delegated.\\n    function unstakeT(address stakingProvider, uint96 amount)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(\\n            amount > 0 &&\\n                amount + getMinStaked(stakingProvider, StakeType.T) <=\\n                stakingProviderStruct.tStake,\\n            \\\"Too much to unstake\\\"\\n        );\\n        require(\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp,\\n            \\\"Can't unstake earlier than 24h\\\"\\n        );\\n\\n        stakingProviderStruct.tStake -= amount;\\n        decreaseStakeCheckpoint(stakingProvider, amount);\\n        emit Unstaked(stakingProvider, amount);\\n        token.safeTransfer(stakingProviderStruct.owner, amount);\\n    }\\n\\n    /// @notice Sets the legacy KEEP staking contract active stake amount cached\\n    ///         in T staking contract to 0. Reverts if the amount of liquid T\\n    ///         staked in T staking contract is lower than the highest\\n    ///         application authorization. This function allows to unstake from\\n    ///         KEEP staking contract and still being able to operate in T\\n    ///         network and earning rewards based on the liquid T staked. Can be\\n    ///         called only by the delegation owner or the staking provider.\\n    ///         Can only be called when 24h passed since the stake has been\\n    ///         delegated.\\n    /// @dev    This function (or `unstakeAll`) must be called before\\n    ///         `undelegate`/`undelegateAt` in Keep staking contract. Otherwise\\n    ///         provider can be slashed by `notifyKeepStakeDiscrepancy` method.\\n    function unstakeKeep(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 keepInTStake = stakingProviderStruct.keepInTStake;\\n        require(keepInTStake != 0, \\\"Nothing to unstake\\\");\\n        require(\\n            getMinStaked(stakingProvider, StakeType.KEEP) == 0,\\n            \\\"Keep stake still authorized\\\"\\n        );\\n        require(\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp,\\n            \\\"Can't unstake earlier than 24h\\\"\\n        );\\n\\n        emit Unstaked(stakingProvider, keepInTStake);\\n        stakingProviderStruct.keepInTStake = 0;\\n        decreaseStakeCheckpoint(stakingProvider, keepInTStake);\\n    }\\n\\n    /// @notice Reduces cached legacy NU stake amount by the provided amount.\\n    ///         Reverts if there is at least one authorization higher than the\\n    ///         sum of remaining legacy NU stake and liquid T stake for that\\n    ///         staking provider or if the untaked amount is higher than the\\n    ///         cached legacy stake amount. If succeeded, the legacy NU stake\\n    ///         can be partially or fully undelegated on the legacy staking\\n    ///         contract. This function allows to unstake from NU staking\\n    ///         contract and still being able to operate in T network and\\n    ///         earning rewards based on the liquid T staked. Can be called only\\n    ///         by the delegation owner or the staking provider. Can only be\\n    ///         called when 24h passed since the stake has been delegated.\\n    /// @dev    This function (or `unstakeAll`) must be called before `withdraw`\\n    ///         in NuCypher staking contract. Otherwise NU tokens can't be\\n    ///         unlocked.\\n    /// @param stakingProvider Staking provider address\\n    /// @param amount Amount of NU to unstake in T denomination\\n    function unstakeNu(address stakingProvider, uint96 amount)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        // rounding amount to guarantee exact T<>NU conversion in both ways,\\n        // so there's no remainder after unstaking\\n        (, uint96 tRemainder) = convertFromT(amount, nucypherRatio);\\n        amount -= tRemainder;\\n        require(\\n            amount > 0 &&\\n                amount + getMinStaked(stakingProvider, StakeType.NU) <=\\n                stakingProviderStruct.nuInTStake,\\n            \\\"Too much to unstake\\\"\\n        );\\n        require(\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp,\\n            \\\"Can't unstake earlier than 24h\\\"\\n        );\\n\\n        stakingProviderStruct.nuInTStake -= amount;\\n        decreaseStakeCheckpoint(stakingProvider, amount);\\n        emit Unstaked(stakingProvider, amount);\\n    }\\n\\n    /// @notice Sets cached legacy stake amount to 0, sets the liquid T stake\\n    ///         amount to 0 and withdraws all liquid T from the stake to the\\n    ///         owner. Reverts if there is at least one non-zero authorization.\\n    ///         Can be called only by the delegation owner or the staking\\n    ///         provider. Can only be called when 24h passed since the stake\\n    ///         has been delegated.\\n    function unstakeAll(address stakingProvider)\\n        external\\n        override\\n        onlyOwnerOrStakingProvider(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(\\n            stakingProviderStruct.authorizedApplications.length == 0,\\n            \\\"Stake still authorized\\\"\\n        );\\n        require(\\n            stakingProviderStruct.startStakingTimestamp + MIN_STAKE_TIME <=\\n                /* solhint-disable-next-line not-rely-on-time */\\n                block.timestamp,\\n            \\\"Can't unstake earlier than 24h\\\"\\n        );\\n\\n        uint96 unstaked = stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        emit Unstaked(stakingProvider, unstaked);\\n        uint96 amount = stakingProviderStruct.tStake;\\n        stakingProviderStruct.tStake = 0;\\n        stakingProviderStruct.keepInTStake = 0;\\n        stakingProviderStruct.nuInTStake = 0;\\n        decreaseStakeCheckpoint(stakingProvider, unstaked);\\n\\n        if (amount > 0) {\\n            token.safeTransfer(stakingProviderStruct.owner, amount);\\n        }\\n    }\\n\\n    //\\n    //\\n    // Keeping information in sync\\n    //\\n    //\\n\\n    /// @notice Notifies about the discrepancy between legacy KEEP active stake\\n    ///         and the amount cached in T staking contract. Slashes the staking\\n    ///         provider in case the amount cached is higher than the actual\\n    ///         active stake amount in KEEP staking contract. Needs to update\\n    ///         authorizations of all affected applications and execute an\\n    ///         involuntary authorization decrease on all affected applications.\\n    ///         Can be called by anyone, notifier receives a reward.\\n    function notifyKeepStakeDiscrepancy(address stakingProvider)\\n        external\\n        override\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(stakingProviderStruct.keepInTStake > 0, \\\"Nothing to slash\\\");\\n\\n        (uint256 keepStakeAmount, , uint256 undelegatedAt) = keepStakingContract\\n            .getDelegationInfo(stakingProvider);\\n\\n        (uint96 realKeepInTStake, ) = convertToT(keepStakeAmount, keepRatio);\\n        uint96 oldKeepInTStake = stakingProviderStruct.keepInTStake;\\n\\n        require(\\n            oldKeepInTStake > realKeepInTStake || undelegatedAt != 0,\\n            \\\"There is no discrepancy\\\"\\n        );\\n        stakingProviderStruct.keepInTStake = realKeepInTStake;\\n        seizeKeep(\\n            stakingProviderStruct,\\n            stakingProvider,\\n            stakeDiscrepancyPenalty,\\n            stakeDiscrepancyRewardMultiplier\\n        );\\n\\n        uint96 slashedAmount = realKeepInTStake -\\n            stakingProviderStruct.keepInTStake;\\n        emit TokensSeized(stakingProvider, slashedAmount, true);\\n        if (undelegatedAt != 0) {\\n            stakingProviderStruct.keepInTStake = 0;\\n        }\\n\\n        decreaseStakeCheckpoint(\\n            stakingProvider,\\n            oldKeepInTStake - stakingProviderStruct.keepInTStake\\n        );\\n\\n        authorizationDecrease(\\n            stakingProvider,\\n            stakingProviderStruct,\\n            slashedAmount\\n        );\\n    }\\n\\n    /// @notice Notifies about the discrepancy between legacy NU active stake\\n    ///         and the amount cached in T staking contract. Slashes the\\n    ///         staking provider in case the amount cached is higher than the\\n    ///         actual active stake amount in NU staking contract. Needs to\\n    ///         update authorizations of all affected applications and execute an\\n    ///         involuntary authorization decrease on all affected applications.\\n    ///         Can be called by anyone, notifier receives a reward.\\n    /// @dev    Real discrepancy between T and Nu is impossible.\\n    ///         This method is a safeguard in case of bugs in NuCypher staking\\n    ///         contract\\n    function notifyNuStakeDiscrepancy(address stakingProvider)\\n        external\\n        override\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(stakingProviderStruct.nuInTStake > 0, \\\"Nothing to slash\\\");\\n\\n        uint256 nuStakeAmount = nucypherStakingContract.getAllTokens(\\n            stakingProviderStruct.owner\\n        );\\n        (uint96 realNuInTStake, ) = convertToT(nuStakeAmount, nucypherRatio);\\n        uint96 oldNuInTStake = stakingProviderStruct.nuInTStake;\\n        require(oldNuInTStake > realNuInTStake, \\\"There is no discrepancy\\\");\\n\\n        stakingProviderStruct.nuInTStake = realNuInTStake;\\n        seizeNu(\\n            stakingProviderStruct,\\n            stakeDiscrepancyPenalty,\\n            stakeDiscrepancyRewardMultiplier\\n        );\\n\\n        uint96 slashedAmount = realNuInTStake -\\n            stakingProviderStruct.nuInTStake;\\n        emit TokensSeized(stakingProvider, slashedAmount, true);\\n        authorizationDecrease(\\n            stakingProvider,\\n            stakingProviderStruct,\\n            slashedAmount\\n        );\\n        decreaseStakeCheckpoint(\\n            stakingProvider,\\n            oldNuInTStake - stakingProviderStruct.nuInTStake\\n        );\\n    }\\n\\n    /// @notice Sets the penalty amount for stake discrepancy and reward\\n    ///         multiplier for reporting it. The penalty is seized from the\\n    ///         delegated stake, and 5% of the penalty, scaled by the\\n    ///         multiplier, is given to the notifier. The rest of the tokens are\\n    ///         burned. Can only be called by the Governance. See `seize` function.\\n    function setStakeDiscrepancyPenalty(\\n        uint96 penalty,\\n        uint256 rewardMultiplier\\n    ) external override onlyGovernance {\\n        stakeDiscrepancyPenalty = penalty;\\n        stakeDiscrepancyRewardMultiplier = rewardMultiplier;\\n        emit StakeDiscrepancyPenaltySet(penalty, rewardMultiplier);\\n    }\\n\\n    /// @notice Sets reward in T tokens for notification of misbehaviour\\n    ///         of one staking provider. Can only be called by the governance.\\n    function setNotificationReward(uint96 reward)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        notificationReward = reward;\\n        emit NotificationRewardSet(reward);\\n    }\\n\\n    /// @notice Transfer some amount of T tokens as reward for notifications\\n    ///         of misbehaviour\\n    function pushNotificationReward(uint96 reward) external override {\\n        require(reward > 0, \\\"Parameters must be specified\\\");\\n        notifiersTreasury += reward;\\n        emit NotificationRewardPushed(reward);\\n        token.safeTransferFrom(msg.sender, address(this), reward);\\n    }\\n\\n    /// @notice Withdraw some amount of T tokens from notifiers treasury.\\n    ///         Can only be called by the governance.\\n    function withdrawNotificationReward(address recipient, uint96 amount)\\n        external\\n        override\\n        onlyGovernance\\n    {\\n        require(amount <= notifiersTreasury, \\\"Not enough tokens\\\");\\n        notifiersTreasury -= amount;\\n        emit NotificationRewardWithdrawn(recipient, amount);\\n        token.safeTransfer(recipient, amount);\\n    }\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount that should be slashed from each one of them. Can only be\\n    ///         called by application authorized for all staking providers in\\n    ///         the array.\\n    /// @dev    This method doesn't emit events for providers that are added to\\n    ///         the queue. If necessary  events can be added to the application\\n    ///         level.\\n    function slash(uint96 amount, address[] memory _stakingProviders)\\n        external\\n        override\\n    {\\n        notify(amount, 0, address(0), _stakingProviders);\\n    }\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount. The notifier will receive reward per each provider from\\n    ///         notifiers treasury. Can only be called by application\\n    ///         authorized for all staking providers in the array.\\n    /// @dev    This method doesn't emit events for staking providers that are\\n    ///         added to the queue. If necessary  events can be added to the\\n    ///         application level.\\n    function seize(\\n        uint96 amount,\\n        uint256 rewardMultiplier,\\n        address notifier,\\n        address[] memory _stakingProviders\\n    ) external override {\\n        notify(amount, rewardMultiplier, notifier, _stakingProviders);\\n    }\\n\\n    /// @notice Takes the given number of queued slashing operations and\\n    ///         processes them. Receives 5% of the slashed amount.\\n    ///         Executes `involuntaryAuthorizationDecrease` function on each\\n    ///         affected application.\\n    function processSlashing(uint256 count) external virtual override {\\n        require(\\n            slashingQueueIndex < slashingQueue.length && count > 0,\\n            \\\"Nothing to process\\\"\\n        );\\n\\n        uint256 maxIndex = slashingQueueIndex + count;\\n        maxIndex = MathUpgradeable.min(maxIndex, slashingQueue.length);\\n        count = maxIndex - slashingQueueIndex;\\n        uint96 tAmountToBurn = 0;\\n\\n        uint256 index = slashingQueueIndex;\\n        for (; index < maxIndex; index++) {\\n            SlashingEvent storage slashing = slashingQueue[index];\\n            tAmountToBurn += processSlashing(slashing);\\n        }\\n        slashingQueueIndex = index;\\n\\n        uint256 tProcessorReward = uint256(tAmountToBurn).percent(\\n            SLASHING_REWARD_PERCENT\\n        );\\n        notifiersTreasury += tAmountToBurn - tProcessorReward.toUint96();\\n        emit SlashingProcessed(msg.sender, count, tProcessorReward);\\n        if (tProcessorReward > 0) {\\n            token.safeTransfer(msg.sender, tProcessorReward);\\n        }\\n    }\\n\\n    /// @notice Delegate voting power from the stake associated to the\\n    ///         `stakingProvider` to a `delegatee` address. Caller must be the\\n    ///         owner of this stake.\\n    function delegateVoting(address stakingProvider, address delegatee)\\n        external\\n    {\\n        delegate(stakingProvider, delegatee);\\n    }\\n\\n    /// @notice Transfers ownership of the contract to `newGuvnor`.\\n    function transferGovernance(address newGuvnor)\\n        external\\n        virtual\\n        onlyGovernance\\n    {\\n        _transferGovernance(newGuvnor);\\n    }\\n\\n    //\\n    //\\n    // Auxiliary functions\\n    //\\n    //\\n\\n    /// @notice Returns the authorized stake amount of the staking provider for\\n    ///         the application.\\n    function authorizedStake(address stakingProvider, address application)\\n        external\\n        view\\n        override\\n        returns (uint96)\\n    {\\n        return\\n            stakingProviders[stakingProvider]\\n                .authorizations[application]\\n                .authorized;\\n    }\\n\\n    /// @notice Returns staked amount of T, Keep and Nu for the specified\\n    ///         staking provider.\\n    /// @dev    All values are in T denomination\\n    function stakes(address stakingProvider)\\n        external\\n        view\\n        override\\n        returns (\\n            uint96 tStake,\\n            uint96 keepInTStake,\\n            uint96 nuInTStake\\n        )\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        tStake = stakingProviderStruct.tStake;\\n        keepInTStake = stakingProviderStruct.keepInTStake;\\n        nuInTStake = stakingProviderStruct.nuInTStake;\\n    }\\n\\n    /// @notice Returns start staking timestamp.\\n    /// @dev    This value is set at most once.\\n    function getStartStakingTimestamp(address stakingProvider)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return stakingProviders[stakingProvider].startStakingTimestamp;\\n    }\\n\\n    /// @notice Returns staked amount of NU for the specified staking provider.\\n    function stakedNu(address stakingProvider)\\n        external\\n        view\\n        override\\n        returns (uint256 nuAmount)\\n    {\\n        (nuAmount, ) = convertFromT(\\n            stakingProviders[stakingProvider].nuInTStake,\\n            nucypherRatio\\n        );\\n    }\\n\\n    /// @notice Gets the stake owner, the beneficiary and the authorizer\\n    ///         for the specified staking provider address.\\n    /// @return owner Stake owner address.\\n    /// @return beneficiary Beneficiary address.\\n    /// @return authorizer Authorizer address.\\n    function rolesOf(address stakingProvider)\\n        external\\n        view\\n        override\\n        returns (\\n            address owner,\\n            address payable beneficiary,\\n            address authorizer\\n        )\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        owner = stakingProviderStruct.owner;\\n        beneficiary = stakingProviderStruct.beneficiary;\\n        authorizer = stakingProviderStruct.authorizer;\\n    }\\n\\n    /// @notice Returns length of application array\\n    function getApplicationsLength() external view override returns (uint256) {\\n        return applications.length;\\n    }\\n\\n    /// @notice Returns length of slashing queue\\n    function getSlashingQueueLength() external view override returns (uint256) {\\n        return slashingQueue.length;\\n    }\\n\\n    /// @notice Requests decrease of the authorization for the given staking\\n    ///         provider on the given application by the provided amount.\\n    ///         It may not change the authorized amount immediatelly. When\\n    ///         it happens depends on the application. Can only be called by the\\n    ///         given staking provider\u2019s authorizer. Overwrites pending\\n    ///         authorization decrease for the given staking provider and\\n    ///         application if the application agrees for that. If the\\n    ///         application does not agree for overwriting, the function\\n    ///         reverts.\\n    /// @dev Calls `authorizationDecreaseRequested` callback on the given\\n    ///      application. See `IApplication`.\\n    function requestAuthorizationDecrease(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) public override onlyAuthorizerOf(stakingProvider) {\\n        ApplicationInfo storage applicationStruct = applicationInfo[\\n            application\\n        ];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n\\n        require(amount > 0, \\\"Parameters must be specified\\\");\\n\\n        AppAuthorization storage authorization = stakingProviders[\\n            stakingProvider\\n        ].authorizations[application];\\n        require(\\n            authorization.authorized >= amount,\\n            \\\"Amount exceeds authorized\\\"\\n        );\\n\\n        authorization.deauthorizing = amount;\\n        uint96 deauthorizingTo = authorization.authorized - amount;\\n        emit AuthorizationDecreaseRequested(\\n            stakingProvider,\\n            application,\\n            authorization.authorized,\\n            deauthorizingTo\\n        );\\n        IApplication(application).authorizationDecreaseRequested(\\n            stakingProvider,\\n            authorization.authorized,\\n            deauthorizingTo\\n        );\\n    }\\n\\n    /// @notice Returns minimum possible stake for T, KEEP or NU in T denomination\\n    /// @dev For example, suppose the given staking provider has 10 T, 20 T worth\\n    ///      of KEEP, and 30 T worth of NU all staked, and the maximum\\n    ///      application authorization is 40 T, then `getMinStaked` for\\n    ///      that staking provider returns:\\n    ///          * 0 T if KEEP stake type specified i.e.\\n    ///            min = 40 T max - (10 T + 30 T worth of NU) = 0 T\\n    ///          * 10 T if NU stake type specified i.e.\\n    ///            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T\\n    ///          * 0 T if T stake type specified i.e.\\n    ///            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T\\n    ///      In other words, the minimum stake amount for the specified\\n    ///      stake type is the minimum amount of stake of the given type\\n    ///      needed to satisfy the maximum application authorization given\\n    ///      the staked amounts of the other stake types for that staking\\n    ///      provider.\\n    function getMinStaked(address stakingProvider, StakeType stakeTypes)\\n        public\\n        view\\n        override\\n        returns (uint96)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint256 maxAuthorization = 0;\\n        for (\\n            uint256 i = 0;\\n            i < stakingProviderStruct.authorizedApplications.length;\\n            i++\\n        ) {\\n            address application = stakingProviderStruct.authorizedApplications[\\n                i\\n            ];\\n            maxAuthorization = MathUpgradeable.max(\\n                maxAuthorization,\\n                stakingProviderStruct.authorizations[application].authorized\\n            );\\n        }\\n\\n        if (maxAuthorization == 0) {\\n            return 0;\\n        }\\n        if (stakeTypes != StakeType.T) {\\n            maxAuthorization -= MathUpgradeable.min(\\n                maxAuthorization,\\n                stakingProviderStruct.tStake\\n            );\\n        }\\n        if (stakeTypes != StakeType.NU) {\\n            maxAuthorization -= MathUpgradeable.min(\\n                maxAuthorization,\\n                stakingProviderStruct.nuInTStake\\n            );\\n        }\\n        if (stakeTypes != StakeType.KEEP) {\\n            maxAuthorization -= MathUpgradeable.min(\\n                maxAuthorization,\\n                stakingProviderStruct.keepInTStake\\n            );\\n        }\\n        return maxAuthorization.toUint96();\\n    }\\n\\n    /// @notice Returns available amount to authorize for the specified\\n    ///         application.\\n    function getAvailableToAuthorize(\\n        address stakingProvider,\\n        address application\\n    ) public view override returns (uint96 availableTValue) {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        availableTValue =\\n            stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        availableTValue -= stakingProviderStruct\\n            .authorizations[application]\\n            .authorized;\\n    }\\n\\n    /// @notice Delegate voting power from the stake associated to the\\n    ///         `stakingProvider` to a `delegatee` address. Caller must be the owner\\n    ///         of this stake.\\n    /// @dev Original abstract function defined in Checkpoints contract had two\\n    ///      parameters, `delegator` and `delegatee`. Here we override it and\\n    ///      comply with the same signature but the semantics of the first\\n    ///      parameter changes to the `stakingProvider` address.\\n    function delegate(address stakingProvider, address delegatee)\\n        internal\\n        virtual\\n        override\\n        onlyOwnerOf(stakingProvider)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        uint96 stakingProviderBalance = stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        address oldDelegatee = delegates(stakingProvider);\\n        _delegates[stakingProvider] = delegatee;\\n        emit DelegateChanged(stakingProvider, oldDelegatee, delegatee);\\n        moveVotingPower(oldDelegatee, delegatee, stakingProviderBalance);\\n    }\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount. The notifier will receive reward per each staking\\n    ///         provider from notifiers treasury. Can only be called by\\n    ///         application authorized for all staking providers in the array.\\n    function notify(\\n        uint96 amount,\\n        uint256 rewardMultiplier,\\n        address notifier,\\n        address[] memory _stakingProviders\\n    ) internal {\\n        require(\\n            amount > 0 && _stakingProviders.length > 0,\\n            \\\"Parameters must be specified\\\"\\n        );\\n\\n        ApplicationInfo storage applicationStruct = applicationInfo[msg.sender];\\n        require(\\n            applicationStruct.status == ApplicationStatus.APPROVED,\\n            \\\"Application is not approved\\\"\\n        );\\n\\n        uint256 queueLength = slashingQueue.length;\\n        for (uint256 i = 0; i < _stakingProviders.length; i++) {\\n            address stakingProvider = _stakingProviders[i];\\n            uint256 amountToSlash = MathUpgradeable.min(\\n                stakingProviders[stakingProvider]\\n                    .authorizations[msg.sender]\\n                    .authorized,\\n                amount\\n            );\\n            if (\\n                //slither-disable-next-line incorrect-equality\\n                amountToSlash == 0\\n            ) {\\n                continue;\\n            }\\n            slashingQueue.push(\\n                SlashingEvent(stakingProvider, amountToSlash.toUint96())\\n            );\\n        }\\n\\n        if (notifier != address(0)) {\\n            uint256 reward = ((slashingQueue.length - queueLength) *\\n                notificationReward).percent(rewardMultiplier);\\n            reward = MathUpgradeable.min(reward, notifiersTreasury);\\n            emit NotifierRewarded(notifier, reward);\\n            if (reward != 0) {\\n                notifiersTreasury -= reward;\\n                token.safeTransfer(notifier, reward);\\n            }\\n        }\\n    }\\n\\n    /// @notice Processes one specified slashing event.\\n    ///         Executes `involuntaryAuthorizationDecrease` function on each\\n    ///         affected application.\\n    //slither-disable-next-line dead-code\\n    function processSlashing(SlashingEvent storage slashing)\\n        internal\\n        returns (uint96 tAmountToBurn)\\n    {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            slashing.stakingProvider\\n        ];\\n        uint96 tAmountToSlash = slashing.amount;\\n        uint96 oldStake = stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        // slash T\\n        if (stakingProviderStruct.tStake > 0) {\\n            if (tAmountToSlash <= stakingProviderStruct.tStake) {\\n                tAmountToBurn = tAmountToSlash;\\n            } else {\\n                tAmountToBurn = stakingProviderStruct.tStake;\\n            }\\n            stakingProviderStruct.tStake -= tAmountToBurn;\\n            tAmountToSlash -= tAmountToBurn;\\n        }\\n\\n        // slash KEEP\\n        if (tAmountToSlash > 0 && stakingProviderStruct.keepInTStake > 0) {\\n            (uint256 keepStakeAmount, , ) = keepStakingContract\\n                .getDelegationInfo(slashing.stakingProvider);\\n            (uint96 tAmount, ) = convertToT(keepStakeAmount, keepRatio);\\n            stakingProviderStruct.keepInTStake = tAmount;\\n\\n            tAmountToSlash = seizeKeep(\\n                stakingProviderStruct,\\n                slashing.stakingProvider,\\n                tAmountToSlash,\\n                100\\n            );\\n        }\\n\\n        // slash NU\\n        if (tAmountToSlash > 0 && stakingProviderStruct.nuInTStake > 0) {\\n            // synchronization skipped due to impossibility of real discrepancy\\n            tAmountToSlash = seizeNu(\\n                stakingProviderStruct,\\n                tAmountToSlash,\\n                100\\n            );\\n        }\\n\\n        uint96 slashedAmount = slashing.amount - tAmountToSlash;\\n        emit TokensSeized(slashing.stakingProvider, slashedAmount, false);\\n        authorizationDecrease(\\n            slashing.stakingProvider,\\n            stakingProviderStruct,\\n            slashedAmount\\n        );\\n        uint96 newStake = stakingProviderStruct.tStake +\\n            stakingProviderStruct.keepInTStake +\\n            stakingProviderStruct.nuInTStake;\\n        decreaseStakeCheckpoint(slashing.stakingProvider, oldStake - newStake);\\n    }\\n\\n    /// @notice Synchronize authorizations (if needed) after slashing stake\\n    function authorizationDecrease(\\n        address stakingProvider,\\n        StakingProviderInfo storage stakingProviderStruct,\\n        uint96 slashedAmount\\n    ) internal {\\n        uint96 totalStake = stakingProviderStruct.tStake +\\n            stakingProviderStruct.nuInTStake +\\n            stakingProviderStruct.keepInTStake;\\n        uint256 applicationsToDelete = 0;\\n        for (\\n            uint256 i = 0;\\n            i < stakingProviderStruct.authorizedApplications.length;\\n            i++\\n        ) {\\n            address authorizedApplication = stakingProviderStruct\\n                .authorizedApplications[i];\\n            AppAuthorization storage authorization = stakingProviderStruct\\n                .authorizations[authorizedApplication];\\n            uint96 fromAmount = authorization.authorized;\\n\\n            authorization.authorized -= MathUpgradeable\\n                .min(fromAmount, slashedAmount)\\n                .toUint96();\\n\\n            if (authorization.authorized > totalStake) {\\n                authorization.authorized = totalStake;\\n            }\\n\\n            bool successful = true;\\n            //slither-disable-next-line calls-loop\\n            try\\n                IApplication(authorizedApplication)\\n                    .involuntaryAuthorizationDecrease{\\n                    gas: GAS_LIMIT_AUTHORIZATION_DECREASE\\n                }(stakingProvider, fromAmount, authorization.authorized)\\n            {} catch {\\n                successful = false;\\n            }\\n            if (authorization.deauthorizing > authorization.authorized) {\\n                authorization.deauthorizing = authorization.authorized;\\n            }\\n            emit AuthorizationInvoluntaryDecreased(\\n                stakingProvider,\\n                authorizedApplication,\\n                fromAmount,\\n                authorization.authorized,\\n                successful\\n            );\\n            if (authorization.authorized == 0) {\\n                applicationsToDelete++;\\n            }\\n        }\\n        if (applicationsToDelete > 0) {\\n            cleanAuthorizedApplications(\\n                stakingProviderStruct,\\n                applicationsToDelete\\n            );\\n        }\\n    }\\n\\n    /// @notice Convert amount from T to Keep and call `seize` in Keep staking contract.\\n    ///         Returns remainder of slashing amount in T\\n    /// @dev Note this internal function doesn't update stake checkpoints\\n    function seizeKeep(\\n        StakingProviderInfo storage stakingProviderStruct,\\n        address stakingProvider,\\n        uint96 tAmountToSlash,\\n        uint256 rewardMultiplier\\n    ) internal returns (uint96) {\\n        if (stakingProviderStruct.keepInTStake == 0) {\\n            return tAmountToSlash;\\n        }\\n\\n        uint96 tPenalty;\\n        if (tAmountToSlash <= stakingProviderStruct.keepInTStake) {\\n            tPenalty = tAmountToSlash;\\n        } else {\\n            tPenalty = stakingProviderStruct.keepInTStake;\\n        }\\n\\n        (uint256 keepPenalty, uint96 tRemainder) = convertFromT(\\n            tPenalty,\\n            keepRatio\\n        );\\n        if (keepPenalty == 0) {\\n            return tAmountToSlash;\\n        }\\n        tPenalty -= tRemainder;\\n        stakingProviderStruct.keepInTStake -= tPenalty;\\n        tAmountToSlash -= tPenalty;\\n\\n        address[] memory stakingProviderWrapper = new address[](1);\\n        stakingProviderWrapper[0] = stakingProvider;\\n        keepStakingContract.seize(\\n            keepPenalty,\\n            rewardMultiplier,\\n            msg.sender,\\n            stakingProviderWrapper\\n        );\\n        return tAmountToSlash;\\n    }\\n\\n    /// @notice Convert amount from T to NU and call `slashStaker` in NuCypher staking contract.\\n    ///         Returns remainder of slashing amount in T\\n    /// @dev Note this internal function doesn't update the stake checkpoints\\n    function seizeNu(\\n        StakingProviderInfo storage stakingProviderStruct,\\n        uint96 tAmountToSlash,\\n        uint256 rewardMultiplier\\n    ) internal returns (uint96) {\\n        if (stakingProviderStruct.nuInTStake == 0) {\\n            return tAmountToSlash;\\n        }\\n\\n        uint96 tPenalty;\\n        if (tAmountToSlash <= stakingProviderStruct.nuInTStake) {\\n            tPenalty = tAmountToSlash;\\n        } else {\\n            tPenalty = stakingProviderStruct.nuInTStake;\\n        }\\n\\n        (uint256 nuPenalty, uint96 tRemainder) = convertFromT(\\n            tPenalty,\\n            nucypherRatio\\n        );\\n        if (nuPenalty == 0) {\\n            return tAmountToSlash;\\n        }\\n        tPenalty -= tRemainder;\\n        stakingProviderStruct.nuInTStake -= tPenalty;\\n        tAmountToSlash -= tPenalty;\\n\\n        uint256 nuReward = nuPenalty.percent(SLASHING_REWARD_PERCENT).percent(\\n            rewardMultiplier\\n        );\\n        nucypherStakingContract.slashStaker(\\n            stakingProviderStruct.owner,\\n            nuPenalty,\\n            msg.sender,\\n            nuReward\\n        );\\n        return tAmountToSlash;\\n    }\\n\\n    /// @notice Removes application with zero authorization from authorized\\n    ///         applications array\\n    function cleanAuthorizedApplications(\\n        StakingProviderInfo storage stakingProviderStruct,\\n        uint256 numberToDelete\\n    ) internal {\\n        uint256 length = stakingProviderStruct.authorizedApplications.length;\\n        if (numberToDelete == length) {\\n            delete stakingProviderStruct.authorizedApplications;\\n            return;\\n        }\\n\\n        uint256 deleted = 0;\\n        uint256 index = 0;\\n        uint256 newLength = length - numberToDelete;\\n        while (index < newLength && deleted < numberToDelete) {\\n            address application = stakingProviderStruct.authorizedApplications[\\n                index\\n            ];\\n            if (\\n                stakingProviderStruct.authorizations[application].authorized ==\\n                0\\n            ) {\\n                stakingProviderStruct.authorizedApplications[\\n                        index\\n                    ] = stakingProviderStruct.authorizedApplications[\\n                    length - deleted - 1\\n                ];\\n                deleted++;\\n            } else {\\n                index++;\\n            }\\n        }\\n\\n        for (index = newLength; index < length; index++) {\\n            stakingProviderStruct.authorizedApplications.pop();\\n        }\\n    }\\n\\n    /// @notice Creates new checkpoints due to a change of stake amount\\n    /// @param _delegator Address of the staking provider acting as delegator\\n    /// @param _amount Amount of T to increment\\n    /// @param increase True if the change is an increase, false if a decrease\\n    function newStakeCheckpoint(\\n        address _delegator,\\n        uint96 _amount,\\n        bool increase\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n        writeCheckpoint(\\n            _totalSupplyCheckpoints,\\n            increase ? add : subtract,\\n            _amount\\n        );\\n        address delegatee = delegates(_delegator);\\n        if (delegatee != address(0)) {\\n            (uint256 oldWeight, uint256 newWeight) = writeCheckpoint(\\n                _checkpoints[delegatee],\\n                increase ? add : subtract,\\n                _amount\\n            );\\n            emit DelegateVotesChanged(delegatee, oldWeight, newWeight);\\n        }\\n    }\\n\\n    /// @notice Creates new checkpoints due to an increment of a stakers' stake\\n    /// @param _delegator Address of the staking provider acting as delegator\\n    /// @param _amount Amount of T to increment\\n    function increaseStakeCheckpoint(address _delegator, uint96 _amount)\\n        internal\\n    {\\n        newStakeCheckpoint(_delegator, _amount, true);\\n    }\\n\\n    /// @notice Creates new checkpoints due to a decrease of a stakers' stake\\n    /// @param _delegator Address of the stake owner acting as delegator\\n    /// @param _amount Amount of T to decrease\\n    function decreaseStakeCheckpoint(address _delegator, uint96 _amount)\\n        internal\\n    {\\n        newStakeCheckpoint(_delegator, _amount, false);\\n    }\\n\\n    /// @notice Returns amount of Nu stake in the NuCypher staking contract for\\n    ///         the specified staking provider.\\n    ///         Resulting value in T denomination\\n    function getNuAmountInT(address owner, address stakingProvider)\\n        internal\\n        returns (uint96)\\n    {\\n        uint256 nuStakeAmount = nucypherStakingContract.requestMerge(\\n            owner,\\n            stakingProvider\\n        );\\n        (uint96 tAmount, ) = convertToT(nuStakeAmount, nucypherRatio);\\n        return tAmount;\\n    }\\n\\n    function _transferGovernance(address newGuvnor) internal virtual {\\n        address oldGuvnor = governance;\\n        governance = newGuvnor;\\n        emit GovernanceTransferred(oldGuvnor, newGuvnor);\\n    }\\n\\n    /// @notice Returns amount of Keep stake in the Keep staking contract for\\n    ///         the specified staking provider.\\n    ///         Resulting value in T denomination\\n    function getKeepAmountInT(address stakingProvider)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        uint256 keepStakeAmount = keepStakingContract.eligibleStake(\\n            stakingProvider,\\n            address(this)\\n        );\\n        (uint96 tAmount, ) = convertToT(keepStakeAmount, keepRatio);\\n        return tAmount;\\n    }\\n\\n    /// @notice Returns the T token amount that's obtained from `amount` legacy\\n    ///         tokens for the given `ratio`, and the remainder that can't be\\n    ///         converted.\\n    function convertToT(uint256 amount, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint96 tAmount, uint256 remainder)\\n    {\\n        remainder = amount % CONVERSION_DIVISOR;\\n        uint256 convertibleAmount = amount - remainder;\\n        tAmount = ((convertibleAmount * ratio) / CONVERSION_DIVISOR).toUint96();\\n    }\\n\\n    /// @notice Returns the amount of legacy tokens that's obtained from\\n    ///         `tAmount` T tokens for the given `ratio`, and the T remainder\\n    ///         that can't be converted.\\n    function convertFromT(uint96 tAmount, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint256 amount, uint96 tRemainder)\\n    {\\n        //slither-disable-next-line weak-prng\\n        tRemainder = (tAmount % ratio).toUint96();\\n        uint256 convertibleAmount = tAmount - tRemainder;\\n        amount = (convertibleAmount * CONVERSION_DIVISOR) / ratio;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IApplication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\n/// @title  Application interface for Threshold Network applications\\n/// @notice Generic interface for an application. Application is an external\\n///         smart contract or a set of smart contracts utilizing functionalities\\n///         offered by Threshold Network. Applications authorized for the given\\n///         staking provider are eligible to slash the stake delegated to that\\n///         staking provider.\\ninterface IApplication {\\n    /// @notice Used by T staking contract to inform the application that the\\n    ///         authorized amount for the given staking provider increased.\\n    ///         The application may do any necessary housekeeping.\\n    function authorizationIncreased(\\n        address stakingProvider,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    ) external;\\n\\n    /// @notice Used by T staking contract to inform the application that the\\n    ///         authorization decrease for the given staking provider has been\\n    ///         requested. The application should mark the authorization as\\n    ///         pending decrease and respond to the staking contract with\\n    ///         `approveAuthorizationDecrease` at its discretion. It may\\n    ///         happen right away but it also may happen several months later.\\n    function authorizationDecreaseRequested(\\n        address stakingProvider,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    ) external;\\n\\n    /// @notice Used by T staking contract to inform the application the\\n    ///         authorization has been decreased for the given staking provider\\n    ///         involuntarily, as a result of slashing. Lets the application to\\n    ///         do any housekeeping neccessary. Called with 250k gas limit and\\n    ///         does not revert the transaction if\\n    ///         `involuntaryAuthorizationDecrease` call failed.\\n    function involuntaryAuthorizationDecrease(\\n        address stakingProvider,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity ^0.8.9;\\n\\n/// @title Interface of Threshold Network staking contract\\n/// @notice The staking contract enables T owners to have their wallets offline\\n///         and their stake managed by staking providers on their behalf.\\n///         The staking contract does not define operator role. The operator\\n///         responsible for running off-chain client software is appointed by\\n///         the staking provider in the particular application utilizing the\\n///         staking contract. All off-chain client software should be able\\n///         to run without exposing operator's or staking provider\u2019s private\\n///         key and should not require any owner\u2019s keys at all. The stake\\n///         delegation optimizes the network throughput without compromising the\\n///         security of the owners\u2019 stake.\\ninterface IStaking {\\n    enum StakeType {\\n        NU,\\n        KEEP,\\n        T\\n    }\\n\\n    //\\n    //\\n    // Delegating a stake\\n    //\\n    //\\n\\n    /// @notice Creates a delegation with `msg.sender` owner with the given\\n    ///         staking provider, beneficiary, and authorizer. Transfers the\\n    ///         given amount of T to the staking contract.\\n    /// @dev The owner of the delegation needs to have the amount approved to\\n    ///      transfer to the staking contract.\\n    function stake(\\n        address stakingProvider,\\n        address payable beneficiary,\\n        address authorizer,\\n        uint96 amount\\n    ) external;\\n\\n    /// @notice Copies delegation from the legacy KEEP staking contract to T\\n    ///         staking contract. No tokens are transferred. Caches the active\\n    ///         stake amount from KEEP staking contract. Can be called by\\n    ///         anyone.\\n    /// @dev The staking provider in T staking contract is the legacy KEEP\\n    ///      staking contract operator.\\n    function stakeKeep(address stakingProvider) external;\\n\\n    /// @notice Copies delegation from the legacy NU staking contract to T\\n    ///         staking contract, additionally appointing staking provider,\\n    ///         beneficiary and authorizer roles. Caches the amount staked in NU\\n    ///         staking contract. Can be called only by the original delegation\\n    ///         owner.\\n    function stakeNu(\\n        address stakingProvider,\\n        address payable beneficiary,\\n        address authorizer\\n    ) external;\\n\\n    /// @notice Allows the Governance to set the minimum required stake amount.\\n    ///         This amount is required to protect against griefing the staking\\n    ///         contract and individual applications are allowed to require\\n    ///         higher minimum stakes if necessary.\\n    function setMinimumStakeAmount(uint96 amount) external;\\n\\n    //\\n    //\\n    // Authorizing an application\\n    //\\n    //\\n\\n    /// @notice Allows the Governance to approve the particular application\\n    ///         before individual stake authorizers are able to authorize it.\\n    function approveApplication(address application) external;\\n\\n    /// @notice Increases the authorization of the given staking provider for\\n    ///         the given application by the given amount. Can only be called by\\n    ///         the authorizer for that staking provider.\\n    /// @dev Calls `authorizationIncreased(address stakingProvider, uint256 amount)`\\n    ///      on the given application to notify the application about\\n    ///      authorization change. See `IApplication`.\\n    function increaseAuthorization(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) external;\\n\\n    /// @notice Requests decrease of the authorization for the given staking\\n    ///         provider on the given application by the provided amount.\\n    ///         It may not change the authorized amount immediatelly. When\\n    ///         it happens depends on the application. Can only be called by the\\n    ///         given staking provider\u2019s authorizer. Overwrites pending\\n    ///         authorization decrease for the given staking provider and\\n    ///         application if the application agrees for that. If the\\n    ///         application does not agree for overwriting, the function\\n    ///         reverts.\\n    /// @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\\n    ///      on the given application. See `IApplication`.\\n    function requestAuthorizationDecrease(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) external;\\n\\n    /// @notice Requests decrease of all authorizations for the given staking\\n    ///         provider on all applications by all authorized amount.\\n    ///         It may not change the authorized amount immediatelly. When\\n    ///         it happens depends on the application. Can only be called by the\\n    ///         given staking provider\u2019s authorizer. Overwrites pending\\n    ///         authorization decrease for the given staking provider and\\n    ///         application.\\n    /// @dev Calls `authorizationDecreaseRequested(address stakingProvider, uint256 amount)`\\n    ///      for each authorized application. See `IApplication`.\\n    function requestAuthorizationDecrease(address stakingProvider) external;\\n\\n    /// @notice Called by the application at its discretion to approve the\\n    ///         previously requested authorization decrease request. Can only be\\n    ///         called by the application that was previously requested to\\n    ///         decrease the authorization for that staking provider.\\n    ///         Returns resulting authorized amount for the application.\\n    function approveAuthorizationDecrease(address stakingProvider)\\n        external\\n        returns (uint96);\\n\\n    /// @notice Decreases the authorization for the given `stakingProvider` on\\n    ///         the given disabled `application`, for all authorized amount.\\n    ///         Can be called by anyone.\\n    function forceDecreaseAuthorization(\\n        address stakingProvider,\\n        address application\\n    ) external;\\n\\n    /// @notice Pauses the given application\u2019s eligibility to slash stakes.\\n    ///         Besides that stakers can't change authorization to the application.\\n    ///         Can be called only by the Panic Button of the particular\\n    ///         application. The paused application can not slash stakes until\\n    ///         it is approved again by the Governance using `approveApplication`\\n    ///         function. Should be used only in case of an emergency.\\n    function pauseApplication(address application) external;\\n\\n    /// @notice Disables the given application. The disabled application can't\\n    ///         slash stakers. Also stakers can't increase authorization to that\\n    ///         application but can decrease without waiting by calling\\n    ///         `requestAuthorizationDecrease` at any moment. Can be called only\\n    ///         by the governance. The disabled application can't be approved\\n    ///         again. Should be used only in case of an emergency.\\n    function disableApplication(address application) external;\\n\\n    /// @notice Sets the Panic Button role for the given application to the\\n    ///         provided address. Can only be called by the Governance. If the\\n    ///         Panic Button for the given application should be disabled, the\\n    ///         role address should be set to 0x0 address.\\n    function setPanicButton(address application, address panicButton) external;\\n\\n    /// @notice Sets the maximum number of applications one staking provider can\\n    ///         have authorized. Used to protect against DoSing slashing queue.\\n    ///         Can only be called by the Governance.\\n    function setAuthorizationCeiling(uint256 ceiling) external;\\n\\n    //\\n    //\\n    // Stake top-up\\n    //\\n    //\\n\\n    /// @notice Increases the amount of the stake for the given staking provider.\\n    /// @dev The sender of this transaction needs to have the amount approved to\\n    ///      transfer to the staking contract.\\n    function topUp(address stakingProvider, uint96 amount) external;\\n\\n    /// @notice Propagates information about stake top-up from the legacy KEEP\\n    ///         staking contract to T staking contract. Can be called only by\\n    ///         the owner or the staking provider.\\n    function topUpKeep(address stakingProvider) external;\\n\\n    /// @notice Propagates information about stake top-up from the legacy NU\\n    ///         staking contract to T staking contract. Can be called only by\\n    ///         the owner or the staking provider.\\n    function topUpNu(address stakingProvider) external;\\n\\n    //\\n    //\\n    // Undelegating a stake (unstaking)\\n    //\\n    //\\n\\n    /// @notice Reduces the liquid T stake amount by the provided amount and\\n    ///         withdraws T to the owner. Reverts if there is at least one\\n    ///         authorization higher than the sum of the legacy stake and\\n    ///         remaining liquid T stake or if the unstake amount is higher than\\n    ///         the liquid T stake amount. Can be called only by the delegation\\n    ///         owner or the staking provider.\\n    function unstakeT(address stakingProvider, uint96 amount) external;\\n\\n    /// @notice Sets the legacy KEEP staking contract active stake amount cached\\n    ///         in T staking contract to 0. Reverts if the amount of liquid T\\n    ///         staked in T staking contract is lower than the highest\\n    ///         application authorization. This function allows to unstake from\\n    ///         KEEP staking contract and still being able to operate in T\\n    ///         network and earning rewards based on the liquid T staked. Can be\\n    ///         called only by the delegation owner or the staking provider.\\n    function unstakeKeep(address stakingProvider) external;\\n\\n    /// @notice Reduces cached legacy NU stake amount by the provided amount.\\n    ///         Reverts if there is at least one authorization higher than the\\n    ///         sum of remaining legacy NU stake and liquid T stake for that\\n    ///         staking provider or if the untaked amount is higher than the\\n    ///         cached legacy stake amount. If succeeded, the legacy NU stake\\n    ///         can be partially or fully undelegated on the legacy staking\\n    ///         contract. This function allows to unstake from NU staking\\n    ///         contract and still being able to operate in T network and\\n    ///         earning rewards based on the liquid T staked. Can be called only\\n    ///         by the delegation owner or the staking provider.\\n    function unstakeNu(address stakingProvider, uint96 amount) external;\\n\\n    /// @notice Sets cached legacy stake amount to 0, sets the liquid T stake\\n    ///         amount to 0 and withdraws all liquid T from the stake to the\\n    ///         owner. Reverts if there is at least one non-zero authorization.\\n    ///         Can be called only by the delegation owner or the staking\\n    ///         provider.\\n    function unstakeAll(address stakingProvider) external;\\n\\n    //\\n    //\\n    // Keeping information in sync\\n    //\\n    //\\n\\n    /// @notice Notifies about the discrepancy between legacy KEEP active stake\\n    ///         and the amount cached in T staking contract. Slashes the staking\\n    ///         provider in case the amount cached is higher than the actual\\n    ///         active stake amount in KEEP staking contract. Needs to update\\n    ///         authorizations of all affected applications and execute an\\n    ///         involuntary allocation decrease on all affected applications.\\n    ///         Can be called by anyone, notifier receives a reward.\\n    function notifyKeepStakeDiscrepancy(address stakingProvider) external;\\n\\n    /// @notice Notifies about the discrepancy between legacy NU active stake\\n    ///         and the amount cached in T staking contract. Slashes the\\n    ///         staking provider in case the amount cached is higher than the\\n    ///         actual active stake amount in NU staking contract. Needs to\\n    ///         update authorizations of all affected applications and execute\\n    ///         an involuntary allocation decrease on all affected applications.\\n    ///         Can be called by anyone, notifier receives a reward.\\n    function notifyNuStakeDiscrepancy(address stakingProvider) external;\\n\\n    /// @notice Sets the penalty amount for stake discrepancy and reward\\n    ///         multiplier for reporting it. The penalty is seized from the\\n    ///         delegated stake, and 5% of the penalty, scaled by the\\n    ///         multiplier, is given to the notifier. The rest of the tokens are\\n    ///         burned. Can only be called by the Governance. See `seize` function.\\n    function setStakeDiscrepancyPenalty(\\n        uint96 penalty,\\n        uint256 rewardMultiplier\\n    ) external;\\n\\n    /// @notice Sets reward in T tokens for notification of misbehaviour\\n    ///         of one staking provider. Can only be called by the governance.\\n    function setNotificationReward(uint96 reward) external;\\n\\n    /// @notice Transfer some amount of T tokens as reward for notifications\\n    ///         of misbehaviour\\n    function pushNotificationReward(uint96 reward) external;\\n\\n    /// @notice Withdraw some amount of T tokens from notifiers treasury.\\n    ///         Can only be called by the governance.\\n    function withdrawNotificationReward(address recipient, uint96 amount)\\n        external;\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount that should be slashed from each one of them. Can only be\\n    ///         called by application authorized for all staking providers in\\n    ///         the array.\\n    function slash(uint96 amount, address[] memory stakingProviders) external;\\n\\n    /// @notice Adds staking providers to the slashing queue along with the\\n    ///         amount. The notifier will receive reward per each staking\\n    ///         provider from notifiers treasury. Can only be called by\\n    ///         application authorized for all staking providers in the array.\\n    function seize(\\n        uint96 amount,\\n        uint256 rewardMultipier,\\n        address notifier,\\n        address[] memory stakingProviders\\n    ) external;\\n\\n    /// @notice Takes the given number of queued slashing operations and\\n    ///         processes them. Receives 5% of the slashed amount.\\n    ///         Executes `involuntaryAllocationDecrease` function on each\\n    ///         affected application.\\n    function processSlashing(uint256 count) external;\\n\\n    //\\n    //\\n    // Auxiliary functions\\n    //\\n    //\\n\\n    /// @notice Returns the authorized stake amount of the staking provider for\\n    ///         the application.\\n    function authorizedStake(address stakingProvider, address application)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /// @notice Returns staked amount of T, Keep and Nu for the specified\\n    ///         staking provider.\\n    /// @dev    All values are in T denomination\\n    function stakes(address stakingProvider)\\n        external\\n        view\\n        returns (\\n            uint96 tStake,\\n            uint96 keepInTStake,\\n            uint96 nuInTStake\\n        );\\n\\n    /// @notice Returns start staking timestamp.\\n    /// @dev    This value is set at most once.\\n    function getStartStakingTimestamp(address stakingProvider)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns staked amount of NU for the specified staking provider.\\n    function stakedNu(address stakingProvider) external view returns (uint256);\\n\\n    /// @notice Gets the stake owner, the beneficiary and the authorizer\\n    ///         for the specified staking provider address.\\n    /// @return owner Stake owner address.\\n    /// @return beneficiary Beneficiary address.\\n    /// @return authorizer Authorizer address.\\n    function rolesOf(address stakingProvider)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            address payable beneficiary,\\n            address authorizer\\n        );\\n\\n    /// @notice Returns length of application array\\n    function getApplicationsLength() external view returns (uint256);\\n\\n    /// @notice Returns length of slashing queue\\n    function getSlashingQueueLength() external view returns (uint256);\\n\\n    /// @notice Returns minimum possible stake for T, KEEP or NU in T\\n    ///         denomination.\\n    /// @dev For example, suppose the given staking provider has 10 T, 20 T\\n    ///      worth of KEEP, and 30 T worth of NU all staked, and the maximum\\n    ///      application authorization is 40 T, then `getMinStaked` for\\n    ///      that staking provider returns:\\n    ///          * 0 T if KEEP stake type specified i.e.\\n    ///            min = 40 T max - (10 T + 30 T worth of NU) = 0 T\\n    ///          * 10 T if NU stake type specified i.e.\\n    ///            min = 40 T max - (10 T + 20 T worth of KEEP) = 10 T\\n    ///          * 0 T if T stake type specified i.e.\\n    ///            min = 40 T max - (20 T worth of KEEP + 30 T worth of NU) < 0 T\\n    ///      In other words, the minimum stake amount for the specified\\n    ///      stake type is the minimum amount of stake of the given type\\n    ///      needed to satisfy the maximum application authorization given the\\n    ///      staked amounts of the other stake types for that staking provider.\\n    function getMinStaked(address stakingProvider, StakeType stakeTypes)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /// @notice Returns available amount to authorize for the specified application\\n    function getAvailableToAuthorize(\\n        address stakingProvider,\\n        address application\\n    ) external view returns (uint96);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/PercentUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nlibrary PercentUtils {\\n    // Return `b`% of `a`\\n    // 200.percent(40) == 80\\n    // Commutative, works both ways\\n    function percent(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / 100;\\n    }\\n\\n    // Return `a` as percentage of `b`:\\n    // 80.asPercentOf(200) == 40\\n    //slither-disable-next-line dead-code\\n    function asPercentOf(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * 100) / b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeTUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2590\u2588\u2588\u2588\u2588\u258c     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n//               \u2590\u2588\u2588\u2588\u2588\u258c    \u2590\u2588\u2588\u2588\u2588\u258c\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../token/T.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @notice A wrapper around OpenZeppelin's `SafeERC20Upgradeable` but specific\\n///         to the T token. Use this library in upgradeable contracts. If your\\n///         contract is non-upgradeable, then the traditional `SafeERC20` works.\\n///         The motivation is to prevent upgradeable contracts that use T from\\n///         depending on the `Address` library, which can be problematic since\\n///         it uses `delegatecall`, which is discouraged by OpenZeppelin for use\\n///         in upgradeable contracts.\\n/// @dev This implementation force-casts T to `IERC20Upgradeable` to make it\\n///      work with `SafeERC20Upgradeable`.\\nlibrary SafeTUpgradeable {\\n    function safeTransfer(\\n        T token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        SafeERC20Upgradeable.safeTransfer(\\n            IERC20Upgradeable(address(token)),\\n            to,\\n            value\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        T token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            IERC20Upgradeable(address(token)),\\n            from,\\n            to,\\n            value\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/TokenStakingTestSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../staking/ILegacyTokenStaking.sol\\\";\\nimport \\\"../staking/IApplication.sol\\\";\\nimport \\\"../staking/TokenStaking.sol\\\";\\n\\ncontract KeepTokenStakingMock is IKeepTokenStaking {\\n    using PercentUtils for uint256;\\n\\n    struct OperatorStruct {\\n        address owner;\\n        address payable beneficiary;\\n        address authorizer;\\n        uint256 createdAt;\\n        uint256 undelegatedAt;\\n        uint256 amount;\\n        mapping(address => bool) eligibility;\\n    }\\n\\n    mapping(address => OperatorStruct) internal operators;\\n    mapping(address => uint256) public tattletales;\\n\\n    function setOperator(\\n        address operator,\\n        address owner,\\n        address payable beneficiary,\\n        address authorizer,\\n        uint256 createdAt,\\n        uint256 undelegatedAt,\\n        uint256 amount\\n    ) external {\\n        OperatorStruct storage operatorStrut = operators[operator];\\n        operatorStrut.owner = owner;\\n        operatorStrut.beneficiary = beneficiary;\\n        operatorStrut.authorizer = authorizer;\\n        operatorStrut.createdAt = createdAt;\\n        operatorStrut.undelegatedAt = undelegatedAt;\\n        operatorStrut.amount = amount;\\n    }\\n\\n    function setEligibility(\\n        address operator,\\n        address application,\\n        bool isEligible\\n    ) external {\\n        operators[operator].eligibility[application] = isEligible;\\n    }\\n\\n    function setAmount(address operator, uint256 amount) external {\\n        operators[operator].amount = amount;\\n    }\\n\\n    function setUndelegatedAt(address operator, uint256 undelegatedAt)\\n        external\\n    {\\n        operators[operator].undelegatedAt = undelegatedAt;\\n    }\\n\\n    function seize(\\n        uint256 amountToSeize,\\n        uint256 rewardMultiplier,\\n        address tattletale,\\n        address[] memory misbehavedOperators\\n    ) external override {\\n        require(amountToSeize > 0, \\\"Amount to slash must be greater than zero\\\");\\n        // assumed only one will be slashed (per call)\\n        require(\\n            misbehavedOperators.length == 1,\\n            \\\"Only one operator per call in tests\\\"\\n        );\\n        address operator = misbehavedOperators[0];\\n        operators[operator].amount -= amountToSeize;\\n        tattletales[tattletale] += amountToSeize.percent(5).percent(\\n            rewardMultiplier\\n        );\\n    }\\n\\n    function getDelegationInfo(address operator)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 amount,\\n            uint256 createdAt,\\n            uint256 undelegatedAt\\n        )\\n    {\\n        amount = operators[operator].amount;\\n        createdAt = operators[operator].createdAt;\\n        undelegatedAt = operators[operator].undelegatedAt;\\n    }\\n\\n    function ownerOf(address operator)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return operators[operator].owner;\\n    }\\n\\n    function beneficiaryOf(address operator)\\n        external\\n        view\\n        override\\n        returns (address payable)\\n    {\\n        return operators[operator].beneficiary;\\n    }\\n\\n    function authorizerOf(address operator)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return operators[operator].authorizer;\\n    }\\n\\n    function eligibleStake(address operator, address operatorContract)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        OperatorStruct storage operatorStrut = operators[operator];\\n        if (operatorStrut.eligibility[operatorContract]) {\\n            return operatorStrut.amount;\\n        }\\n        return 0;\\n    }\\n}\\n\\ncontract NuCypherTokenStakingMock is INuCypherStakingEscrow {\\n    struct StakerStruct {\\n        uint256 value;\\n        address stakingProvider;\\n    }\\n\\n    mapping(address => StakerStruct) public stakers;\\n    mapping(address => uint256) public investigators;\\n\\n    function setStaker(address staker, uint256 value) external {\\n        stakers[staker].value = value;\\n    }\\n\\n    function slashStaker(\\n        address staker,\\n        uint256 penalty,\\n        address investigator,\\n        uint256 reward\\n    ) external override {\\n        require(penalty > 0, \\\"Amount to slash must be greater than zero\\\");\\n        stakers[staker].value -= penalty;\\n        investigators[investigator] += reward;\\n    }\\n\\n    function requestMerge(address staker, address stakingProvider)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        StakerStruct storage stakerStruct = stakers[staker];\\n        require(\\n            stakerStruct.stakingProvider == address(0) ||\\n                stakerStruct.stakingProvider == stakingProvider,\\n            \\\"Another provider was already set for this staker\\\"\\n        );\\n        if (stakerStruct.stakingProvider == address(0)) {\\n            stakerStruct.stakingProvider = stakingProvider;\\n        }\\n        return stakers[staker].value;\\n    }\\n\\n    function getAllTokens(address staker)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return stakers[staker].value;\\n    }\\n}\\n\\ncontract VendingMachineMock {\\n    uint256 public constant FLOATING_POINT_DIVISOR = 10**15;\\n\\n    uint256 public immutable ratio;\\n\\n    constructor(uint96 _wrappedTokenAllocation, uint96 _tTokenAllocation) {\\n        ratio =\\n            (FLOATING_POINT_DIVISOR * _tTokenAllocation) /\\n            _wrappedTokenAllocation;\\n    }\\n}\\n\\ncontract ApplicationMock is IApplication {\\n    struct StakingProviderStruct {\\n        uint96 authorized;\\n        uint96 deauthorizingTo;\\n    }\\n\\n    TokenStaking internal immutable tokenStaking;\\n    mapping(address => StakingProviderStruct) public stakingProviders;\\n\\n    constructor(TokenStaking _tokenStaking) {\\n        tokenStaking = _tokenStaking;\\n    }\\n\\n    function authorizationIncreased(\\n        address stakingProvider,\\n        uint96,\\n        uint96 toAmount\\n    ) external override {\\n        stakingProviders[stakingProvider].authorized = toAmount;\\n    }\\n\\n    function authorizationDecreaseRequested(\\n        address stakingProvider,\\n        uint96,\\n        uint96 toAmount\\n    ) external override {\\n        stakingProviders[stakingProvider].deauthorizingTo = toAmount;\\n    }\\n\\n    function approveAuthorizationDecrease(address stakingProvider) external {\\n        StakingProviderStruct storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        stakingProviderStruct.authorized = tokenStaking\\n            .approveAuthorizationDecrease(stakingProvider);\\n    }\\n\\n    function slash(uint96 amount, address[] memory _stakingProviders) external {\\n        tokenStaking.slash(amount, _stakingProviders);\\n    }\\n\\n    function seize(\\n        uint96 amount,\\n        uint256 rewardMultiplier,\\n        address notifier,\\n        address[] memory _stakingProviders\\n    ) external {\\n        tokenStaking.seize(\\n            amount,\\n            rewardMultiplier,\\n            notifier,\\n            _stakingProviders\\n        );\\n    }\\n\\n    function involuntaryAuthorizationDecrease(\\n        address stakingProvider,\\n        uint96,\\n        uint96 toAmount\\n    ) public virtual override {\\n        StakingProviderStruct storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        require(\\n            toAmount != stakingProviderStruct.authorized,\\n            \\\"Nothing to decrease\\\"\\n        );\\n        uint96 decrease = stakingProviderStruct.authorized - toAmount;\\n        if (stakingProviderStruct.deauthorizingTo > decrease) {\\n            stakingProviderStruct.deauthorizingTo -= decrease;\\n        } else {\\n            stakingProviderStruct.deauthorizingTo = 0;\\n        }\\n        stakingProviderStruct.authorized = toAmount;\\n    }\\n}\\n\\ncontract BrokenApplicationMock is ApplicationMock {\\n    constructor(TokenStaking _tokenStaking) ApplicationMock(_tokenStaking) {}\\n\\n    function involuntaryAuthorizationDecrease(\\n        address,\\n        uint96,\\n        uint96\\n    ) public pure override {\\n        revert(\\\"Broken application\\\");\\n    }\\n}\\n\\ncontract ExpensiveApplicationMock is ApplicationMock {\\n    uint256[] private dummy;\\n\\n    constructor(TokenStaking _tokenStaking) ApplicationMock(_tokenStaking) {}\\n\\n    function involuntaryAuthorizationDecrease(\\n        address stakingProvider,\\n        uint96 fromAmount,\\n        uint96 toAmount\\n    ) public override {\\n        super.involuntaryAuthorizationDecrease(\\n            stakingProvider,\\n            fromAmount,\\n            toAmount\\n        );\\n        for (uint256 i = 0; i < 12; i++) {\\n            dummy.push(i);\\n        }\\n    }\\n}\\n\\ncontract ManagedGrantMock {\\n    address public grantee;\\n\\n    //slither-disable-next-line missing-zero-check\\n    function setGrantee(address _grantee) external {\\n        grantee = _grantee;\\n    }\\n}\\n\\ncontract ExtendedTokenStaking is TokenStaking {\\n    constructor(\\n        T _token,\\n        IKeepTokenStaking _keepStakingContract,\\n        INuCypherStakingEscrow _nucypherStakingContract,\\n        VendingMachine _keepVendingMachine,\\n        VendingMachine _nucypherVendingMachine,\\n        KeepStake _keepStake\\n    )\\n        TokenStaking(\\n            _token,\\n            _keepStakingContract,\\n            _nucypherStakingContract,\\n            _keepVendingMachine,\\n            _nucypherVendingMachine,\\n            _keepStake\\n        )\\n    {}\\n\\n    function cleanAuthorizedApplications(\\n        address stakingProvider,\\n        uint256 numberToDelete\\n    ) external {\\n        StakingProviderInfo storage stakingProviderStruct = stakingProviders[\\n            stakingProvider\\n        ];\\n        cleanAuthorizedApplications(stakingProviderStruct, numberToDelete);\\n    }\\n\\n    function setAuthorization(\\n        address stakingProvider,\\n        address application,\\n        uint96 amount\\n    ) external {\\n        stakingProviders[stakingProvider]\\n            .authorizations[application]\\n            .authorized = amount;\\n    }\\n\\n    function setAuthorizedApplications(\\n        address stakingProvider,\\n        address[] memory _applications\\n    ) external {\\n        stakingProviders[stakingProvider]\\n            .authorizedApplications = _applications;\\n    }\\n\\n    // to decrease size of test contract\\n    function processSlashing(uint256 count) external override {}\\n\\n    function getAuthorizedApplications(address stakingProvider)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return stakingProviders[stakingProvider].authorizedApplications;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/ITestKeepTokenStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../staking/ILegacyTokenStaking.sol\\\";\\n\\ninterface ITestKeepTokenStaking is IKeepTokenStaking {\\n    function authorizeOperatorContract(\\n        address operator,\\n        address operatorContract\\n    ) external;\\n\\n    function commitTopUp(address operator) external;\\n\\n    function undelegate(address operator) external;\\n\\n    function getLocks(address operator)\\n        external\\n        view\\n        returns (address[] memory creators, uint256[] memory expirations);\\n}\\n\"\r\n    },\r\n    \"contracts/test/IKeepTokenGrant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../staking/ILegacyTokenStaking.sol\\\";\\n\\ninterface IKeepTokenGrant {\\n    function stake(\\n        uint256 id,\\n        address stakingContract,\\n        uint256 amount,\\n        bytes memory extraData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/test/TestStakingCheckpoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../governance/Checkpoints.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract TestStakingCheckpoints is Checkpoints {\\n    mapping(address => uint256) public stake;\\n\\n    /// @notice T token contract.\\n    IERC20 public immutable tToken;\\n\\n    constructor(IERC20 _tToken) {\\n        tToken = _tToken;\\n    }\\n\\n    function deposit(uint256 amount) public {\\n        stake[msg.sender] += amount;\\n        writeCheckpoint(_checkpoints[msg.sender], add, amount);\\n        writeCheckpoint(_totalSupplyCheckpoints, add, amount);\\n\\n        tToken.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        require(stake[msg.sender] >= amount, \\\"Not enough stake to withdraw\\\");\\n        stake[msg.sender] -= amount;\\n        writeCheckpoint(_checkpoints[msg.sender], subtract, amount);\\n        writeCheckpoint(_totalSupplyCheckpoints, subtract, amount);\\n\\n        tToken.transfer(msg.sender, amount);\\n    }\\n\\n    function delegate(address delegator, address delegatee)\\n        internal\\n        virtual\\n        override\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/test/IKeepToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKeepToken is IERC20 {\\n    function approveAndCall(\\n        address spender,\\n        uint256 value,\\n        bytes memory extraData\\n    ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"contracts/test/IKeepRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKeepRegistry {\\n    function approveOperatorContract(address operatorContract) external;\\n\\n    function registryKeeper() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/test/KeepRegistryStub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IKeepRegistry.sol\\\";\\n\\ncontract KeepRegistryStub is IKeepRegistry {\\n    address public registryKeeper;\\n\\n    event OperatorContractApproved(address operatorContract);\\n\\n    constructor() {\\n        registryKeeper = msg.sender;\\n    }\\n\\n    function approveOperatorContract(address operatorContract) external {\\n        emit OperatorContractApproved(operatorContract);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/TestStakerGovernorVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../governance/StakerGovernorVotes.sol\\\";\\n\\ncontract TestStakerGovernorVotes is StakerGovernorVotes {\\n    constructor(IVotesHistory _tStaking)\\n        Governor(\\\"TestStakerGovernor\\\")\\n        GovernorParameters(125, 75, 12, 34)\\n        StakerGovernorVotes(_tStaking)\\n    {}\\n\\n    function getPastTotalSupply(uint256 blockNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _getPastTotalSupply(blockNumber);\\n    }\\n\\n    function hasVoted(uint256 proposalId, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE()\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (string memory)\\n    {}\\n\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight\\n    ) internal virtual override {}\\n\\n    function _quorumReached(uint256 proposalId)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n\\n    function _voteSucceeded(uint256 proposalId)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/ProxyAdminWithDeputy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./StakerGovernor.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\n\\n/// @title ProxyAdminWithDeputy\\n/// @notice Based on `ProxyAdmin`, an auxiliary contract in OpenZeppelin's\\n///         upgradeability approach meant to act as the admin of a\\n///         `TransparentUpgradeableProxy`. This variant allows an additional\\n///         actor, the \\\"deputy\\\", to perform upgrades, which originally can only\\n///         be performed by the ProxyAdmin's owner. See OpenZeppelin's\\n///         documentation for `TransparentUpgradeableProxy` for more details on\\n///         why a ProxyAdmin is recommended.\\ncontract ProxyAdminWithDeputy is ProxyAdmin {\\n    address public deputy;\\n    event DeputyUpdated(\\n        address indexed previousDeputy,\\n        address indexed newDeputy\\n    );\\n\\n    modifier onlyOwnerOrDeputy() {\\n        _checkCallerIsOwnerOrDeputy();\\n        _;\\n    }\\n\\n    constructor(StakerGovernor dao, address _deputy) {\\n        address timelock = dao.timelock();\\n        require(timelock != address(0), \\\"DAO doesn't have a Timelock\\\");\\n        _setDeputy(_deputy);\\n        _transferOwnership(timelock);\\n    }\\n\\n    function setDeputy(address newDeputy) external onlyOwner {\\n        _setDeputy(newDeputy);\\n    }\\n\\n    /// @notice Upgrades `proxy` to `implementation`. This contract must be the\\n    ///         admin of `proxy`, and the caller must be this contract's owner\\n    ///         or the deputy.\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation)\\n        public\\n        virtual\\n        override\\n        onlyOwnerOrDeputy\\n    {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /// @notice Upgrades `proxy` to `implementation` and calls a function on the\\n    ///         new implementation. This contract must be the admin of `proxy`,\\n    ///         and the caller must be this contract's owner or the deputy.\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual override onlyOwnerOrDeputy {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n\\n    function _setDeputy(address newDeputy) internal {\\n        address oldDeputy = deputy;\\n        deputy = newDeputy;\\n        emit DeputyUpdated(oldDeputy, newDeputy);\\n    }\\n\\n    function _checkCallerIsOwnerOrDeputy() internal view {\\n        address caller = _msgSender();\\n        require(\\n            owner() == caller || deputy == caller,\\n            \\\"Caller is neither the owner nor the deputy\\\"\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract T\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IKeepTokenStaking\",\"name\":\"_keepStakingContract\",\"type\":\"address\"},{\"internalType\":\"contract INuCypherStakingEscrow\",\"name\":\"_nucypherStakingContract\",\"type\":\"address\"},{\"internalType\":\"contract VendingMachine\",\"name\":\"_keepVendingMachine\",\"type\":\"address\"},{\"internalType\":\"contract VendingMachine\",\"name\":\"_nucypherVendingMachine\",\"type\":\"address\"},{\"internalType\":\"contract KeepStake\",\"name\":\"_keepStake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum TokenStaking.ApplicationStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ApplicationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"}],\"name\":\"AuthorizationCeilingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationDecreaseApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationDecreaseRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"}],\"name\":\"AuthorizationIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"fromAmount\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"toAmount\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"successfulCall\",\"type\":\"bool\"}],\"name\":\"AuthorizationInvoluntaryDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"MinimumStakeAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"NotificationRewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"notifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifierRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerRefreshed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"name\":\"PanicButtonSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"SlashingProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"penalty\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"StakeDiscrepancyPenaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IStaking.StakeType\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"discrepancy\",\"type\":\"bool\"}],\"name\":\"TokensSeized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"ToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"applicationInfo\",\"outputs\":[{\"internalType\":\"enum TokenStaking.ApplicationStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"approveApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"approveAuthorizationDecrease\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizationCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"authorizedStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct Checkpoints.Checkpoint\",\"name\":\"checkpoint\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegateVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"disableApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"forceDecreaseAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApplicationsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"getAvailableToAuthorize\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"availableTValue\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"enum IStaking.StakeType\",\"name\":\"stakeTypes\",\"type\":\"uint8\"}],\"name\":\"getMinStaked\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"getStartStakingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"increaseAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTStakeAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notificationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifiersTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"notifyKeepStakeDiscrepancy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"notifyNuStakeDiscrepancy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"}],\"name\":\"pauseApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"processSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"pushNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"requestAuthorizationDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"requestAuthorizationDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"rolesOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"notifier\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_stakingProviders\",\"type\":\"address[]\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ceiling\",\"type\":\"uint256\"}],\"name\":\"setAuthorizationCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"setMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"reward\",\"type\":\"uint96\"}],\"name\":\"setNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"application\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"panicButton\",\"type\":\"address\"}],\"name\":\"setPanicButton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"penalty\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setStakeDiscrepancyPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"address[]\",\"name\":\"_stakingProviders\",\"type\":\"address[]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashingQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slashingQueueIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDiscrepancyPenalty\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDiscrepancyRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakeKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"name\":\"stakeNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakedNu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nuAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"tStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"keepInTStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nuInTStake\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"topUpKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"topUpNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuvnor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"unstakeKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"unstakeNu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"unstakeT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"withdrawNotificationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "000000000000000000000000cdf7028ceab81fa0c6971208e83fa7872994bee50000000000000000000000001293a54e160d1cd7075487898d65266081a15458000000000000000000000000bbd3c0c794f40c4f993b03f65343acc6fcfcb2e2000000000000000000000000e47c80e8c23f6b4a1ae41c34837a0599d5d16bb00000000000000000000000001cca7e410ee41739792ea0a24e00349dd247680e00000000000000000000000010de37cf84202a20cae61069c617b3aa874af8b4", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fde0bbd82ea5626ed095e6e540fe01051dd9d17444852caee9d78389ac562e2d"}