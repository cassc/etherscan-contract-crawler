{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AMM/IAMM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IAMM {\\n    function swapExactInput(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) external returns (uint256);\\n\\n    function swap(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address poolAddress\\n    ) external returns (uint256);\\n\\n    function buySweep(\\n        address token,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) external returns (uint256);\\n\\n    function sellSweep(\\n        address token,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) external returns (uint256);\\n\\n    function sequencer() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function getTWAPrice() external view returns (uint256 twaPrice);\\n\\n    function getPrice() external view returns (uint256 price);\\n    \\n    function getRate() external view returns (uint256 rate);\\n\\n    function getPositions(uint256) external view returns (uint256 usdxAmount, uint256 sweepAmount, uint256 lp);\\n}\\n\"\r\n    },\r\n    \"contracts/Assets/Interfaces/Balancer/IBalancer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\ninterface IBalancerGauge {\\n    function claim_rewards() external;\\n    function deposit(uint256 _amount) external;\\n    function withdraw(uint256 _amount) external;\\n    function balanceOf(address _address) external view returns(uint256 _balance);\\n}\\n\\ninterface IBalancerVault {\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    function joinPool(bytes32 poolId, address sender, address recipient, JoinPoolRequest memory request) external payable;\\n    function exitPool(bytes32 poolId, address sender, address recipient, ExitPoolRequest memory request) external payable;\\n    function getPoolTokens(bytes32 poolId) external view returns (IAsset[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n    function swap(SingleSwap memory singleSwap, FundManagement memory funds, uint256 limit, uint256 deadline) external returns (uint256 amountOut);\\n}\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\\ninterface IBalancerPool is IERC20Metadata {\\n    function getPoolId() external view returns (bytes32);\\n    function getVault() external view returns (address);\\n    function getRate() external view returns (uint256);\\n    function getTokenRate(address) external view returns (uint256);\\n    function getScalingFactors() external view returns (uint256[] memory);\\n    function getAmplificationParameter() external view returns (uint256, bool, uint256);\\n}\\n\\nstruct SingleSwap {\\n   bytes32 poolId;\\n   SwapKind kind;\\n   IAsset assetIn;\\n   IAsset assetOut;\\n   uint256 amount;\\n   bytes userData;\\n}\\n\\nstruct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n}\\n\\ninterface IComposableStablePoolFactory {\\n    function create(\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256 amplificationParameter,\\n        IRateProvider[] memory rateProviders,\\n        uint256[] memory tokenRateCacheDurations,\\n        bool exemptFromYieldProtocolFeeFlag,\\n        uint256 swapFeePercentage,\\n        address owner,\\n        bytes32 salt\\n    ) external returns(address poolAddress);\\n}\\n\\ninterface IRateProvider {\\n    function getRate() external view returns (uint256);\\n}\\n\\nenum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT }\\nenum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT, EXACT_BPT_IN_FOR_ALL_TOKENS_OUT }\\nenum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\"\r\n    },\r\n    \"contracts/Balancer/BalancerMarketMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// ====================================================================\\r\\n// ======================== BalancerMarketMaker.sol ===================\\r\\n// ====================================================================\\r\\n\\r\\n/**\\r\\n * @title Balancer Stable/Stable Pool Market Maker\\r\\n * @dev Implementation:\\r\\n * Increases and decreases the liquidity\\r\\n */\\r\\n\\r\\nimport { Stabilizer, TransferHelper, ISweep } from \\\"../Stabilizer/Stabilizer.sol\\\";\\r\\nimport { IBalancerPool, IBalancerVault, IAsset, JoinKind, ExitKind } from \\\"../Assets/Interfaces/Balancer/IBalancer.sol\\\";\\r\\n\\r\\ncontract BalancerMarketMaker is Stabilizer {\\r\\n\\r\\n    error BadAddress();\\r\\n    error BadSlippage();\\r\\n\\r\\n    event LiquidityAdded(uint256 usdxAmount, uint256 sweepAmount);\\r\\n    event LiquidityRemoved(uint256 usdxAmount, uint256 sweepAmount);\\r\\n    event SweepPurchased(uint256 sweeAmount);\\r\\n\\r\\n    IBalancerPool public pool;\\r\\n    IBalancerVault public vault;\\r\\n\\r\\n    bytes32 public poolId;\\r\\n    IAsset[] public poolAssets;\\r\\n\\r\\n    uint8 public sweepIndex;\\r\\n    uint8 public usdxIndex;\\r\\n    uint8 public bptIndex;\\r\\n\\r\\n    uint32 public slippage; \\r\\n\\r\\n    uint24 private constant PRECISION = 1e6;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        address _sweep,\\r\\n        address _usdx,\\r\\n        address _oracleUsdx,\\r\\n        address _poolAddress,\\r\\n        address _borrower\\r\\n    ) Stabilizer(_name, _sweep, _usdx, _oracleUsdx, _borrower) {\\r\\n        slippage = 5000; // 0.5%\\r\\n        pool = IBalancerPool(_poolAddress);\\r\\n        vault = IBalancerVault(pool.getVault()); \\r\\n        poolId = pool.getPoolId();\\r\\n        (poolAssets, , ) = vault.getPoolTokens(poolId);\\r\\n        sweepIndex = findAssetIndex(address(sweep), poolAssets);\\r\\n        usdxIndex = findAssetIndex(address(usdx), poolAssets);\\r\\n        bptIndex = findAssetIndex(address(pool), poolAssets);\\r\\n    }\\r\\n\\r\\n    /* ========== Views ========== */\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the asset price of AMM\\r\\n     * @return the amm usdx amount\\r\\n     */\\r\\n    function assetValue() public view override returns (uint256) {    \\r\\n        uint256 bpt = pool.balanceOf(address(this));\\r\\n        uint256 rate = pool.getRate();\\r\\n\\r\\n        uint256 usdcAmount = (bpt * rate * (10 ** usdx.decimals())) / (10 ** (pool.decimals() * 2));\\r\\n\\r\\n        return _oracleUsdxToUsd(usdcAmount);\\r\\n    }\\r\\n\\r\\n    function getBuyPrice() public view returns (uint256) {\\r\\n        uint256 targetPrice = sweep.targetPrice();\\r\\n        return targetPrice + ((sweep.arbSpread() * targetPrice) / PRECISION);\\r\\n    }\\r\\n\\r\\n    /* ========== Actions ========== */\\r\\n\\r\\n    function buySweep(uint256 usdxAmount) external nonReentrant returns (uint256 sweepAmount) {\\r\\n        sweepAmount = (_oracleUsdxToUsd(usdxAmount) * (10 ** sweep.decimals())) / getBuyPrice();\\r\\n\\r\\n        _borrow(sweepAmount * 2);\\r\\n        _addLiquidity(usdxAmount, sweepAmount);\\r\\n\\r\\n        TransferHelper.safeTransfer(address(sweep), msg.sender, sweepAmount);\\r\\n\\r\\n        emit SweepPurchased(usdxAmount);\\r\\n    }\\r\\n\\r\\n    function initPool(uint256 usdxAmount, uint256 sweepAmount) external nonReentrant onlyBorrower {\\r\\n        address self = address(this);\\r\\n\\r\\n        TransferHelper.safeTransferFrom(address(usdx), msg.sender, self, usdxAmount);\\r\\n        TransferHelper.safeApprove(address(usdx), address(vault), usdxAmount);\\r\\n        TransferHelper.safeApprove(address(sweep), address(vault), sweepAmount);\\r\\n\\r\\n        if(sweep.isMintingAllowed()){\\r\\n            _borrow(sweepAmount);\\r\\n        } else {\\r\\n            TransferHelper.safeTransferFrom(address(sweep), msg.sender, self, sweepAmount);\\r\\n        }\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](3);\\r\\n        amounts[bptIndex] = 2**112;\\r\\n        amounts[usdxIndex] = usdxAmount;\\r\\n        amounts[sweepIndex] = sweepAmount;\\r\\n\\r\\n        bytes memory userData = abi.encode(JoinKind.INIT, amounts);\\r\\n\\r\\n        IBalancerVault.JoinPoolRequest memory request = IBalancerVault.JoinPoolRequest(poolAssets, amounts, userData, false);\\r\\n        vault.joinPool(poolId, self, self, request);\\r\\n    }\\r\\n\\r\\n    function _addLiquidity(uint256 usdxAmount, uint256 sweepAmount) internal {\\r\\n        address self = address(this);\\r\\n\\r\\n        TransferHelper.safeTransferFrom(address(usdx), msg.sender, self, usdxAmount);\\r\\n        TransferHelper.safeApprove(address(usdx), address(vault), usdxAmount);\\r\\n        TransferHelper.safeApprove(address(sweep), address(vault), sweepAmount);\\r\\n        \\r\\n        uint256[] memory amounts = new uint256[](3);\\r\\n        amounts[usdxIndex] = usdxAmount;\\r\\n        amounts[sweepIndex] = sweepAmount;\\r\\n\\r\\n        uint256[] memory userDataAmounts = new uint256[](2);\\r\\n        userDataAmounts[0] = (sweepIndex > usdxIndex) ? usdxAmount : sweepAmount;\\r\\n        userDataAmounts[1] = (sweepIndex > usdxIndex) ? sweepAmount : usdxAmount;\\r\\n\\r\\n        uint256 usdxMin = usdxAmount * pool.getTokenRate(address(usdx)) / (10 ** usdx.decimals());\\r\\n        uint256 sweepMin = sweepAmount * pool.getTokenRate(address(sweep)) / (10 ** sweep.decimals());\\r\\n        uint256 minTotalAmountOut = (usdxMin + sweepMin) * (PRECISION - slippage) / PRECISION;\\r\\n\\r\\n        bytes memory userData = abi.encode(JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, userDataAmounts, minTotalAmountOut);\\r\\n\\r\\n        IBalancerVault.JoinPoolRequest memory request = IBalancerVault.JoinPoolRequest(poolAssets, amounts, userData, false);\\r\\n        vault.joinPool(poolId, self, self, request);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 usdxAmount, uint256 sweepAmount) external nonReentrant onlyBorrower {\\r\\n        address self = address(this);\\r\\n\\r\\n        if(sweep.isMintingAllowed()){\\r\\n            if(sweepAmount > 0) _borrow(sweepAmount);\\r\\n        } else {\\r\\n            TransferHelper.safeTransferFrom(address(sweep), msg.sender, self, sweepAmount);\\r\\n        }\\r\\n\\r\\n        _addLiquidity(usdxAmount, sweepAmount);\\r\\n\\r\\n        emit LiquidityAdded(usdxAmount, sweepAmount);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 usdxAmount, uint256 sweepAmount) external nonReentrant onlyBorrower {\\r\\n        address self = address(this);\\r\\n\\r\\n        uint256 usdxMax = usdxAmount * pool.getTokenRate(address(usdx)) / (10**usdx.decimals());\\r\\n        uint256 sweepMax = sweepAmount * pool.getTokenRate(address(sweep)) / (10**sweep.decimals());\\r\\n        uint256 maxAmountIn = (usdxMax + sweepMax) * (PRECISION + slippage) / PRECISION;\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](3);\\r\\n        amounts[usdxIndex] = usdxAmount;\\r\\n        amounts[sweepIndex] = sweepAmount;\\r\\n\\r\\n        uint256[] memory userDataAmounts = new uint256[](2);\\r\\n        userDataAmounts[0] = (sweepIndex > usdxIndex) ? usdxAmount : sweepAmount;\\r\\n        userDataAmounts[1] = (sweepIndex > usdxIndex) ? sweepAmount : usdxAmount;\\r\\n\\r\\n        bytes memory userData = abi.encode(ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT, userDataAmounts, maxAmountIn);\\r\\n\\r\\n        IBalancerVault.ExitPoolRequest memory request = IBalancerVault.ExitPoolRequest(poolAssets, amounts, userData, false);\\r\\n        vault.exitPool(poolId, self, self, request);\\r\\n\\r\\n        if(sweepAmount > 0) _repay(sweepAmount);\\r\\n\\r\\n        emit LiquidityRemoved(usdxAmount, sweepAmount);\\r\\n    }\\r\\n\\r\\n    function setSlippage(uint32 newSlippage) external nonReentrant onlyBorrower {\\r\\n        if(newSlippage > PRECISION) revert BadSlippage();\\r\\n        slippage = newSlippage;\\r\\n    }\\r\\n\\r\\n    function findAssetIndex(address asset, IAsset[] memory assets) internal pure returns (uint8) {\\r\\n        for (uint8 i = 0; i < assets.length; i++) {\\r\\n            if ( address(assets[i]) == asset ) return i;\\r\\n        }\\r\\n        revert BadAddress();\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Common/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.19;\\n\\n// ==========================================================\\n// ======================= Owned.sol ========================\\n// ==========================================================\\n\\nimport \\\"../Sweep/ISweep.sol\\\";\\n\\ncontract Owned {\\n    ISweep public immutable sweep;\\n\\n    // Errors\\n    error NotGovernance();\\n    error NotMultisigOrGov();\\n    error ZeroAddressDetected();\\n\\n    constructor(address _sweep) {\\n        if(_sweep == address(0)) revert ZeroAddressDetected();\\n\\n        sweep = ISweep(_sweep);\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != sweep.owner()) revert NotGovernance();\\n        _;\\n    }\\n\\n    modifier onlyMultisigOrGov() {\\n        if (msg.sender != sweep.fastMultisig() && msg.sender != sweep.owner())\\n            revert NotMultisigOrGov();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Libraries/Chainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IPriceFeed {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\\nlibrary ChainlinkLibrary {\\n    uint8 constant USD_DECIMALS = 6;\\n\\n    function getDecimals(IPriceFeed oracle) internal view returns (uint8) {\\n        return oracle.decimals();\\n    }\\n\\n    function getPrice(IPriceFeed oracle) internal view returns (uint256) {\\n        (\\n            uint80 roundID,\\n            int256 price,\\n            ,\\n            uint256 timeStamp,\\n            uint80 answeredInRound\\n        ) = oracle.latestRoundData();\\n        require(answeredInRound >= roundID, \\\"Old data\\\");\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\n\\n        return uint256(price);\\n    }\\n\\n    function getPrice(\\n        IPriceFeed oracle,\\n        IPriceFeed sequencerOracle,\\n        uint256 frequency\\n    ) internal view returns (uint256) {\\n        if (address(sequencerOracle) != address(0))\\n            checkUptime(sequencerOracle);\\n\\n        (uint256 roundId, int256 price, , uint256 updatedAt, ) = oracle\\n            .latestRoundData();\\n        require(price > 0 && roundId != 0 && updatedAt != 0, \\\"Invalid Price\\\");\\n        if (frequency > 0)\\n            require(block.timestamp - updatedAt <= frequency, \\\"Stale Price\\\");\\n\\n        return uint256(price);\\n    }\\n\\n    function checkUptime(IPriceFeed sequencerOracle) internal view {\\n        (, int256 answer, uint256 startedAt, , ) = sequencerOracle\\n            .latestRoundData();\\n        require(answer <= 0, \\\"Sequencer Down\\\"); // 0: Sequencer is up, 1: Sequencer is down\\n        require(block.timestamp - startedAt > 1 hours, \\\"Grace Period Not Over\\\");\\n    }\\n\\n    function convertTokenToToken(\\n        uint256 amount0,\\n        uint8 token0Decimals,\\n        uint8 token1Decimals,\\n        IPriceFeed oracle0,\\n        IPriceFeed oracle1\\n    ) internal view returns (uint256 amount1) {\\n        uint256 price0 = getPrice(oracle0);\\n        uint256 price1 = getPrice(oracle1);\\n        amount1 =\\n            (amount0 * price0 * (10 ** token1Decimals)) /\\n            (price1 * (10 ** token0Decimals));\\n    }\\n\\n    function convertTokenToUsd(\\n        uint256 amount,\\n        uint8 tokenDecimals,\\n        IPriceFeed oracle\\n    ) internal view returns (uint256 amountUsd) {\\n        uint8 decimals = getDecimals(oracle);\\n        uint256 price = getPrice(oracle);\\n\\n        amountUsd =\\n            (amount * price * (10 ** USD_DECIMALS)) /\\n            10 ** (decimals + tokenDecimals);\\n    }\\n\\n    function convertUsdToToken(\\n        uint256 amountUsd,\\n        uint256 tokenDecimals,\\n        IPriceFeed oracle\\n    ) internal view returns (uint256 amount) {\\n        uint8 decimals = getDecimals(oracle);\\n        uint256 price = getPrice(oracle);\\n\\n        amount =\\n            (amountUsd * 10 ** (decimals + tokenDecimals)) /\\n            (price * (10 ** USD_DECIMALS));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Libraries/OvnMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary OvnMath {\\n    uint256 constant BASIS_DENOMINATOR = 1e6;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) internal pure returns (uint256) {\\n        return (amount * (BASIS_DENOMINATOR + basisPoints)) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) internal pure returns (uint256) {\\n        return (amount * BASIS_DENOMINATOR) / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) internal pure returns (uint256) {\\n        return (amount * (BASIS_DENOMINATOR - basisPoints)) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) internal pure returns (uint256) {\\n        return (amount * BASIS_DENOMINATOR) / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Stabilizer/Stabilizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// ====================================================================\\n// ====================== Stabilizer.sol ==============================\\n// ====================================================================\\n\\n/**\\n * @title Stabilizer\\n * @dev Implementation:\\n * Allows to take debt by minting sweep and repaying by burning sweep\\n * Allows to buy and sell sweep in an AMM\\n * Allows auto invest according the borrower configuration\\n * Allows auto repays by the balancer to control sweep price\\n * Allow liquidate the Asset when is defaulted\\n * Repayments made by burning sweep\\n * EquityRatio = Junior / (Junior + Senior)\\n */\\n\\nimport \\\"../AMM/IAMM.sol\\\";\\nimport \\\"../Common/Owned.sol\\\";\\nimport \\\"../Libraries/Chainlink.sol\\\";\\nimport \\\"../Libraries/OvnMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Stabilizer is Owned, Pausable, ReentrancyGuard {\\n    using Math for uint256;\\n\\n    IERC20Metadata public usdx;\\n    IPriceFeed public oracleUsdx;\\n\\n    // Variables\\n    string public name;\\n    address public borrower;\\n    int256 public minEquityRatio; // Minimum Equity Ratio. 10000 is 1%\\n    uint256 public sweepBorrowed;\\n    uint256 public loanLimit;\\n\\n    uint256 public callTime;\\n    uint256 public callDelay; // 86400 is 1 day\\n    uint256 public callAmount;\\n\\n    uint256 public spreadFee; // 10000 is 1%\\n    uint256 public spreadDate;\\n    string public link;\\n\\n    int256 public autoInvestMinRatio; // 10000 is 1%\\n    uint256 public autoInvestMinAmount;\\n    bool public autoInvestEnabled;\\n\\n    bool public settingsEnabled;\\n\\n    uint256 public startingTime;\\n    uint256 public startingPrice;\\n    uint256 public decreaseFactor; // 10000 is 1%\\n    uint256 public minLiquidationRatio; // 100000 is 10%\\n    bool public auctionAllowed;\\n\\n    // Constants for various precisions\\n    uint256 private constant DAY_SECONDS = 60 * 60 * 24; // seconds of Day\\n    uint256 private constant DAYS_ONE_YEAR = 365; // days of Year\\n    uint256 private constant PRECISION = 1e6;\\n    uint256 private constant ORACLE_FREQUENCY = 1 days;\\n\\n    /* ========== Events ========== */\\n\\n    event Borrowed(uint256 indexed sweepAmount);\\n    event Repaid(uint256 indexed sweepAmount);\\n    event Withdrawn(address indexed token, uint256 indexed amount);\\n    event PayFee(uint256 indexed sweepAmount);\\n    event Bought(uint256 indexed sweepAmount);\\n    event Sold(uint256 indexed sweepAmount);\\n    event BoughtSWEEP(uint256 indexed sweepAmount);\\n    event SoldSWEEP(uint256 indexed usdxAmount);\\n    event LoanLimitChanged(uint256 loanLimit);\\n    event Proposed(address indexed borrower);\\n    event Rejected(address indexed borrower);\\n    event SweepBorrowedChanged(uint256 indexed sweepAmount);\\n\\n    event Liquidated(address indexed user);\\n\\n    event AutoCalled(uint256 indexed sweepAmount);\\n    event AutoInvested(uint256 indexed sweepAmount);\\n    event CallCancelled(uint256 indexed sweepAmount);\\n\\n    event ConfigurationChanged(\\n        int256 indexed minEquityRatio,\\n        uint256 indexed spreadFee,\\n        uint256 loanLimit,\\n        uint256 decreaseFactor,\\n        uint256 callDelay,\\n        int256 autoInvestMinRatio,\\n        uint256 autoInvestMinAmount,\\n        uint256 minLiquidationRatio,\\n        bool autoInvestEnabled,\\n        bool _auctionAllowed,\\n        string url\\n    );\\n\\n    /* ========== Errors ========== */\\n\\n    error NotBorrower();\\n    error NotBalancer();\\n    error NotSweep();\\n    error SettingsDisabled();\\n    error OverZero();\\n    error AssetDefaulted();\\n    error AuctionNotActive();\\n    error ActionNotAllowed();\\n    error InvalidMinter();\\n    error NotEnoughBalance();\\n    error EquityRatioExcessed();\\n    error InvalidToken();\\n    error SpreadNotEnough();\\n    error NotDefaulted();\\n    error NotAutoInvest();\\n    error NotAutoInvestMinAmount();\\n    error NotAutoInvestMinRatio();\\n\\n    /* ========== Modifies ========== */\\n\\n    modifier onlyBorrower() {\\n        _onlyBorrower();\\n        _;\\n    }\\n\\n    modifier onlySettingsEnabled() {\\n        _onlySettingsEnabled();\\n        _;\\n    }\\n\\n    modifier validAmount(uint256 amount) {\\n        _validAmount(amount);\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        address _sweep,\\n        address _usdx,\\n        address _oracleUsdx,\\n        address _borrower\\n    ) Owned(_sweep) {\\n        if (_borrower == address(0)) revert ZeroAddressDetected();\\n        name = _name;\\n        usdx = IERC20Metadata(_usdx);\\n        oracleUsdx = IPriceFeed(_oracleUsdx);\\n        borrower = _borrower;\\n        settingsEnabled = true;\\n    }\\n\\n    /* ========== Views ========== */\\n\\n    /**\\n     * @notice Defaulted\\n     * @return bool that tells if stabilizer is in default.\\n     */\\n    function isDefaulted() public view returns (bool) {\\n        return\\n            (callDelay > 0 && callAmount > 0 && block.timestamp > callTime) ||\\n            (sweepBorrowed > 0 && getEquityRatio() < minEquityRatio);\\n    }\\n\\n    /**\\n     * @notice Get Equity Ratio\\n     * @return the current equity ratio based in the internal storage.\\n     * @dev this value have a precision of 6 decimals.\\n     */\\n    function getEquityRatio() public view returns (int256) {\\n        uint256 totalValue = currentValue();\\n\\n        if (totalValue == 0) {\\n            if (sweepBorrowed > 0) return -1e6;\\n            else return 0;\\n        }\\n\\n        uint256 seniorTrancheInUsd = sweep.convertToUSD(sweepBorrowed);\\n        // 1e6 are decimals of the percentage result\\n        int256 equityRatio = ((int256(totalValue) - int256(seniorTrancheInUsd)) * 1e6) / int256(totalValue);\\n\\n        if (equityRatio < -1e6) equityRatio = -1e6;\\n        return equityRatio;\\n    }\\n\\n    /**\\n     * @notice Get Spread Amount\\n     * fee = borrow_amount * spread_ratio * (time / time_per_year)\\n     * @return uint256 calculated spread amount.\\n     */\\n    function accruedFee() public view returns (uint256) {\\n        if (sweepBorrowed > 0) {\\n            uint256 period = (block.timestamp - spreadDate) / DAY_SECONDS;\\n            return\\n                (sweepBorrowed * spreadFee * period) /\\n                (DAYS_ONE_YEAR * PRECISION);\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Get Debt Amount\\n     * debt = borrow_amount + spread fee\\n     * @return uint256 calculated debt amount.\\n     */\\n    function getDebt() public view returns (uint256) {\\n        return sweepBorrowed + accruedFee();\\n    }\\n\\n    /**\\n     * @notice Get Current Value\\n     * value = sweep balance + usdx balance\\n     * @return uint256.\\n     */\\n    function currentValue() public view returns (uint256) {\\n        (uint256 usdxBalance, uint256 sweepBalance) = _balances();\\n        uint256 sweepInUsd = sweep.convertToUSD(sweepBalance);\\n        uint256 usdxInUsd = _oracleUsdxToUsd(usdxBalance);\\n        uint256 accruedFeeInUSD = sweep.convertToUSD(accruedFee());\\n\\n        return assetValue() + usdxInUsd + sweepInUsd - accruedFeeInUSD;\\n    }\\n\\n    /**\\n     * @notice Get AMM from Sweep\\n     * @return address.\\n     */\\n    function amm() public view virtual returns (IAMM) {\\n        return IAMM(sweep.amm());\\n    }\\n\\n    /**\\n     * @notice Get Junior Tranche Value\\n     * @return int256 calculated junior tranche amount.\\n     */\\n    function getJuniorTrancheValue() external view returns (int256) {\\n        uint256 seniorTrancheInUSD = sweep.convertToUSD(sweepBorrowed);\\n        uint256 totalValue = currentValue();\\n\\n        return int256(totalValue) - int256(seniorTrancheInUSD);\\n    }\\n\\n    /**\\n     * @notice Returns the SWEEP required to liquidate the stabilizer in the auction.\\n     * @return auctionPrice\\n     */\\n    function getAuctionAmount() public view returns (uint256) {\\n        uint256 minPrice = sweepBorrowed * (PRECISION - minLiquidationRatio) / PRECISION;\\n        uint256 timeElapsed = (block.timestamp - startingTime) / 5 minutes;\\n        uint256 ratio = timeElapsed * decreaseFactor;\\n\\n        if(ratio > PRECISION) return minPrice;\\n\\n        uint256 decreaseRatio = PRECISION - ratio;\\n        uint256 auctionPrice = (startingPrice * decreaseRatio) / PRECISION;\\n\\n        return minPrice > auctionPrice ? minPrice : auctionPrice;\\n    }\\n\\n    /* ========== Settings ========== */\\n\\n    /**\\n     * @notice Pause\\n     * @dev Stops investment actions.\\n     */\\n    function pause() external onlyMultisigOrGov {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause\\n     * @dev Start investment actions.\\n     */\\n    function unpause() external onlyMultisigOrGov {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Configure intial settings\\n     * @param _minEquityRatio The minimum equity ratio can be negative.\\n     * @param _spreadFee The fee that the protocol will get for providing the loan when the stabilizer takes debt\\n     * @param _loanLimit How much debt a Stabilizer can take in SWEEP.\\n     * @param _decreaseFactor A percentage that will be discounted from the price as time passes from the auction start.\\n     * @param _callDelay Time in seconds after AutoCall until the Stabilizer gets defaulted if the debt is not paid in that period\\n     * @param _autoInvestMinRatio Minimum equity ratio that should be kept to allow the execution of an auto invest\\n     * @param _autoInvestMinAmount Minimum amount to be invested to allow the execution of an auto invest\\n     * @param _autoInvestEnabled Represents if an auto invest execution is allowed or not\\n     * @param _auctionAllowed Represents if an auction is allowed or not\\n     * @param _url A URL link to a Web page that describes the borrower and the asset\\n     * @dev Sets the initial configuration of the Stabilizer.\\n     * This configuration will be analyzed by the protocol and if accepted,\\n     * used to include the Stabilizer in the minter's whitelist of Sweep.\\n     * The minimum equity ratio can not be less than 1%\\n     */\\n    function configure(\\n        int256 _minEquityRatio,\\n        uint256 _spreadFee,\\n        uint256 _loanLimit,\\n        uint256 _decreaseFactor,\\n        uint256 _callDelay,\\n        int256 _autoInvestMinRatio,\\n        uint256 _autoInvestMinAmount,\\n        uint256 _minLiquidationRatio,\\n        bool _autoInvestEnabled,\\n        bool _auctionAllowed,\\n        string calldata _url\\n    ) external onlyBorrower onlySettingsEnabled {\\n        minEquityRatio = _minEquityRatio;\\n        spreadFee = _spreadFee;\\n        loanLimit = _loanLimit;\\n        decreaseFactor = _decreaseFactor;\\n        callDelay = _callDelay;\\n        autoInvestMinRatio = _autoInvestMinRatio;\\n        autoInvestMinAmount = _autoInvestMinAmount;\\n        minLiquidationRatio = _minLiquidationRatio;\\n        autoInvestEnabled = _autoInvestEnabled;\\n        auctionAllowed = _auctionAllowed;\\n        link = _url;\\n\\n        emit ConfigurationChanged(\\n            _minEquityRatio,\\n            _spreadFee,\\n            _loanLimit,\\n            decreaseFactor,\\n            _callDelay,\\n            _autoInvestMinRatio,\\n            _autoInvestMinAmount,\\n            _minLiquidationRatio,\\n            _autoInvestEnabled,\\n            _auctionAllowed,\\n            _url\\n        );\\n    }\\n\\n    /**\\n     * @notice Changes the account that control the global configuration to the protocol/governance admin\\n     * @dev after disable settings by admin\\n     * the protocol will evaluate adding the stabilizer to the minter list.\\n     */\\n    function propose() external onlyBorrower {\\n        settingsEnabled = false;\\n\\n        emit Proposed(borrower);\\n    }\\n\\n    /**\\n     * @notice Changes the account that control the global configuration to the borrower\\n     * @dev after enable settings for the borrower\\n     * he/she should edit the values to align to the protocol requirements\\n     */\\n    function reject() external onlyGov {\\n        settingsEnabled = true;\\n\\n        emit Rejected(borrower);\\n    }\\n\\n    /* ========== Actions ========== */\\n\\n    /**\\n     * @notice Borrows Sweep\\n     * Asks the stabilizer to mint a certain amount of sweep token.\\n     * @param sweepAmount.\\n     * @dev Increases the sweepBorrowed (senior tranche).\\n     */\\n    function borrow(\\n        uint256 sweepAmount\\n    )\\n        public\\n        onlyBorrower\\n        whenNotPaused\\n        validAmount(sweepAmount)\\n        nonReentrant\\n    {\\n        _borrow(sweepAmount);\\n\\n        if (getEquityRatio() < minEquityRatio) {\\n            revert EquityRatioExcessed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Repays Sweep\\n     * Burns the sweep amount to reduce the debt (senior tranche).\\n     * @param sweepAmount Amount to be burnt by Sweep.\\n     * @dev Decreases the sweep borrowed.\\n     */\\n    function repay(uint256 sweepAmount) external onlyBorrower nonReentrant {\\n        _repay(sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Pay the spread to the treasury\\n     */\\n    function payFee() external onlyBorrower nonReentrant {\\n        uint256 spreadAmount = accruedFee();\\n        spreadDate = block.timestamp;\\n\\n        uint256 sweepBalance = sweep.balanceOf(address(this));\\n\\n        if (spreadAmount > sweepBalance) revert SpreadNotEnough();\\n\\n        if (spreadAmount > 0) {\\n            TransferHelper.safeTransfer(\\n                address(sweep),\\n                sweep.treasury(),\\n                spreadAmount\\n            );\\n\\n            emit PayFee(spreadAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set Loan Limit.\\n     * @param newLoanLimit.\\n     * @dev How much debt an Stabilizer can take in SWEEP.\\n     */\\n    function setLoanLimit(uint256 newLoanLimit) external {\\n        if (msg.sender != sweep.balancer()) revert NotBalancer();\\n        loanLimit = newLoanLimit;\\n\\n        emit LoanLimitChanged(newLoanLimit);\\n    }\\n\\n    /**\\n     * @notice Update Sweep Borrowed Amount.\\n     * @param amount.\\n     */\\n    function updateSweepBorrowed(uint256 amount) external {\\n        if (msg.sender != address(sweep)) revert NotSweep();\\n        sweepBorrowed = amount;\\n\\n        emit SweepBorrowedChanged(amount);\\n    }\\n\\n    /**\\n     * @notice Auto Call.\\n     * @param sweepAmount to repay.\\n     * @dev Strategy:\\n     * 1) repays debt with SWEEP balance\\n     * 2) repays remaining debt by divesting\\n     * 3) repays remaining debt by buying on SWEEP in the AMM\\n     */\\n    function autoCall(\\n        uint256 sweepAmount,\\n        uint256,\\n        uint256 slippage\\n    ) external nonReentrant {\\n        if (msg.sender != sweep.balancer()) revert NotBalancer();\\n        (uint256 usdxBalance, uint256 sweepBalance) = _balances();\\n        uint256 repayAmount = sweepAmount.min(getDebt());\\n\\n        if (callDelay > 0) {\\n            callTime = block.timestamp + callDelay;\\n            callAmount = repayAmount;\\n        }\\n\\n        if (sweepBalance < repayAmount) {\\n            uint256 missingSweep = repayAmount - sweepBalance;\\n            uint256 sweepInUsd = sweep.convertToUSD(missingSweep);\\n            uint256 missingUsdx = _oracleUsdToUsdx(sweepInUsd);\\n\\n            if (missingUsdx > usdxBalance) {\\n                _divest(missingUsdx - usdxBalance, slippage);\\n            }\\n\\n            if (usdx.balanceOf(address(this)) > 0) {\\n                _buy(missingUsdx, slippage);\\n            }\\n        }\\n\\n        if (sweep.balanceOf(address(this)) > 0 && repayAmount > 0) {\\n            _repay(repayAmount);\\n        }\\n\\n        emit AutoCalled(sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Cancel Call\\n     * @dev Cancels the auto call request by clearing variables for an asset\\n     * that has a callDelay: meaning that it does not autorepay.\\n     */\\n    function cancelCall() external {\\n        if (msg.sender != sweep.balancer()) revert NotBalancer();\\n        callAmount = 0;\\n        callTime = 0;\\n        emit CallCancelled(callAmount);\\n    }\\n\\n    /**\\n     * @notice Auto Invest.\\n     * @param sweepAmount to mint.\\n     * @param slippage.\\n     */\\n    function autoInvest(\\n        uint256 sweepAmount,\\n        uint256,\\n        uint256 slippage\\n    ) external nonReentrant {\\n        if (msg.sender != sweep.balancer()) revert NotBalancer();\\n        if (!autoInvestEnabled) revert NotAutoInvest();\\n        if (sweepAmount < autoInvestMinAmount) revert NotAutoInvestMinAmount();\\n\\n        _borrow(sweepAmount);\\n        uint256 usdxAmount = _sell(sweepAmount, slippage);\\n        _invest(usdxAmount, 0, slippage);\\n\\n        if (getEquityRatio() < autoInvestMinRatio){\\n            revert NotAutoInvestMinRatio();\\n        }\\n\\n        emit AutoInvested(sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Buy\\n     * Buys sweep amount from the stabilizer's balance to the AMM (swaps USDX to SWEEP).\\n     * @param usdxAmount Amount to be changed in the AMM.\\n     * @param slippage Minimum amount out.\\n     * @dev Increases the sweep balance and decrease usdx balance.\\n     */\\n    function buySweepOnAMM(\\n        uint256 usdxAmount,\\n        uint256 slippage\\n    )\\n        external\\n        onlyBorrower\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256 sweepAmount)\\n    {\\n        sweepAmount = _buy(usdxAmount, slippage);\\n        emit Bought(sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Sell Sweep\\n     * Sells sweep amount from the stabilizer's balance to the AMM (swaps SWEEP to USDX).\\n     * @param sweepAmount.\\n     * @param slippage Minimum amount out.\\n     * @dev Decreases the sweep balance and increase usdx balance\\n     */\\n    function sellSweepOnAMM(\\n        uint256 sweepAmount,\\n        uint256 slippage\\n    )\\n        external\\n        onlyBorrower\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256 usdxAmount)\\n    {\\n        usdxAmount = _sell(sweepAmount, slippage);\\n        emit Sold(sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Buy Sweep with Stabilizer\\n     * Buys sweep amount from the stabilizer's balance to the Borrower (swaps USDX to SWEEP).\\n     * @param usdxAmount.\\n     * @dev Decreases the sweep balance and increase usdx balance\\n     */\\n    function swapUsdxToSweep(uint256 usdxAmount)\\n        public onlyBorrower whenNotPaused validAmount(usdxAmount) nonReentrant\\n        returns (uint256 sweepAmount)\\n\\n    {\\n        uint256 usdxInUsd = _oracleUsdxToUsd(usdxAmount);\\n        sweepAmount = sweep.convertToSWEEP(usdxInUsd);\\n        uint256 sweepBalance = sweep.balanceOf(address(this));\\n        if (sweepAmount > sweepBalance) revert NotEnoughBalance();\\n\\n        TransferHelper.safeTransferFrom(\\n            address(usdx),\\n            msg.sender,\\n            address(this),\\n            usdxAmount\\n        );\\n        TransferHelper.safeTransfer(address(sweep), msg.sender, sweepAmount);\\n\\n        emit BoughtSWEEP(sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Sell Sweep with Stabilizer\\n     * Sells sweep amount to the stabilizer (swaps SWEEP to USDX).\\n     * @param sweepAmount.\\n     * @dev Decreases the sweep balance and increase usdx balance\\n     */\\n    function swapSweepToUsdx(uint256 sweepAmount)\\n        public onlyBorrower whenNotPaused validAmount(sweepAmount) nonReentrant\\n        returns (uint256 usdxAmount)\\n    {\\n        uint256 sweepInUsd = sweep.convertToUSD(sweepAmount);\\n        usdxAmount = _oracleUsdToUsdx(sweepInUsd);\\n        uint256 usdxBalance = usdx.balanceOf(address(this));\\n\\n        if (usdxAmount > usdxBalance) revert NotEnoughBalance();\\n\\n        TransferHelper.safeTransferFrom(address(sweep), msg.sender, address(this), sweepAmount);\\n        TransferHelper.safeTransfer(address(usdx), msg.sender, usdxAmount);\\n\\n        emit SoldSWEEP(usdxAmount);\\n    }\\n\\n    function oneStepInvest(uint256 sweepAmount, uint256 slippage, bool useAMM) \\n        external onlyBorrower whenNotPaused validAmount(sweepAmount) nonReentrant\\n        returns(uint256 usdxAmount)\\n    {\\n        _borrow(sweepAmount);\\n        \\n        if(useAMM){\\n            usdxAmount = _sell(sweepAmount, slippage);\\n        } else {\\n            usdxAmount = swapSweepToUsdx(sweepAmount);\\n        }\\n\\n        _invest(usdxAmount, 0, slippage);\\n\\n        if (getEquityRatio() < minEquityRatio){\\n            revert EquityRatioExcessed();\\n        }\\n    }\\n\\n    function oneStepDivest(uint256 usdxAmount, uint256 slippage, bool useAMM)\\n        external onlyBorrower whenNotPaused validAmount(usdxAmount) nonReentrant\\n        returns(uint256 sweepAmount)\\n    {\\n        _divest(usdxAmount, slippage);\\n\\n        if(useAMM){\\n            sweepAmount = _buy(usdxAmount, slippage);\\n        } else {\\n            sweepAmount = swapUsdxToSweep(usdxAmount);\\n        }\\n\\n        _repay(sweepAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw SWEEP\\n     * Takes out sweep balance if the new equity ratio is higher than the minimum equity ratio.\\n     * @param token.\\n     * @param amount.\\n     * @dev Decreases the sweep balance.\\n     */\\n    function withdraw(address token, uint256 amount) \\n        external onlyBorrower whenNotPaused validAmount(amount) nonReentrant\\n    {\\n        uint256 balance = IERC20Metadata(token).balanceOf(address(this));\\n        if (amount > balance) amount = balance;\\n\\n        TransferHelper.safeTransfer(token, msg.sender, amount);\\n\\n        if (sweepBorrowed > 0 && getEquityRatio() < minEquityRatio) {\\n            revert EquityRatioExcessed();\\n        }\\n\\n        emit Withdrawn(token, amount);\\n    }\\n\\n    /**\\n     * @notice Start auction\\n     * Initiates a dutch auction for liquidation.\\n     */\\n    function startAuction() external nonReentrant {\\n        if (!isDefaulted()) revert NotDefaulted();\\n        if(!auctionAllowed || startingPrice > 0) revert ActionNotAllowed();\\n\\n        startingTime = block.timestamp;\\n        uint256 minEquity = (PRECISION - uint256(minEquityRatio));\\n        startingPrice = getDebt() * PRECISION / minEquity;\\n    }\\n\\n    /**\\n     * @notice Buy auction\\n     * Allows a user to participate in the auction by buying assets\\n     */\\n    function buyAuction() external nonReentrant {\\n        if(startingTime == 0) revert AuctionNotActive();\\n        uint256 debt = getAuctionAmount();\\n        address token = _getToken();\\n        _liquidate(token, debt);\\n    }\\n\\n    /* ========== Internals ========== */\\n\\n    function assetValue() public view virtual returns (uint256) { return 0; }\\n\\n    /**\\n     * @notice Invest To Asset.\\n     */\\n    function _invest(uint256, uint256, uint256) internal virtual {}\\n\\n    /**\\n     * @notice Divest From Asset.\\n     */\\n    function _divest(uint256, uint256) internal virtual {}\\n\\n    /**\\n     * @notice Get asset address to liquidate.\\n     */\\n    function _getToken() internal view virtual returns (address) {}\\n\\n    /**\\n     * @notice Stop the auction.\\n     */\\n    function _stopAuction() internal {\\n        startingTime = 0;\\n        startingPrice = 0;\\n    }\\n\\n    /**\\n     * @notice Liquidates\\n     * A liquidator repays the debt in sweep and gets the same value\\n     * of the assets that the stabilizer holds at a discount\\n     */\\n    function _liquidate(\\n        address token,\\n        uint256 debt\\n    ) internal {\\n        if (!isDefaulted()) revert NotDefaulted();\\n        address self = address(this);\\n        uint256 usdxBalance = usdx.balanceOf(self);\\n        uint256 tokenBalance = IERC20Metadata(token).balanceOf(self);\\n        uint256 sweepBalance = sweep.balanceOf(self);\\n        if(debt > sweepBalance) {\\n            // Takes SWEEP from the liquidator and repays debt\\n            TransferHelper.safeTransferFrom(\\n                address(sweep),\\n                msg.sender,\\n                self,\\n                debt - sweepBalance\\n            );\\n        }\\n\\n        // Gives all the assets to the liquidator\\n        TransferHelper.safeTransfer(address(usdx), msg.sender, usdxBalance);\\n        TransferHelper.safeTransfer(token, msg.sender, tokenBalance);\\n\\n        _repay(debt);\\n\\n        emit Liquidated(msg.sender);\\n    }\\n\\n    function _buy(\\n        uint256 usdxAmount, \\n        uint256 slippage\\n    ) internal returns (uint256 sweepAmount) {\\n        uint256 usdxBalance = usdx.balanceOf(address(this));\\n        usdxAmount = usdxAmount.min(usdxBalance);\\n        if (usdxAmount == 0) revert NotEnoughBalance();\\n\\n        sweepAmount = sweep.convertToSWEEP(_oracleUsdxToUsd(usdxAmount));\\n        uint256 minAmountOut = OvnMath.subBasisPoints(sweepAmount, slippage);\\n\\n        IAMM _amm = amm();\\n        TransferHelper.safeApprove(address(usdx), address(_amm), usdxAmount);\\n        sweepAmount = _amm.buySweep(\\n            address(usdx),\\n            usdxAmount,\\n            minAmountOut\\n        );\\n\\n        return sweepAmount;\\n    }\\n\\n    function _sell(\\n        uint256 sweepAmount,\\n        uint256 slippage\\n    ) internal returns (uint256 usdxAmount) {\\n        uint256 sweepBalance = sweep.balanceOf(address(this));\\n        sweepAmount = sweepAmount.min(sweepBalance);\\n        if (sweepAmount == 0) revert NotEnoughBalance();\\n\\n        usdxAmount = _oracleUsdToUsdx(sweep.convertToUSD(sweepAmount));\\n        uint256 minAmountOut = OvnMath.subBasisPoints(usdxAmount, slippage);\\n\\n        IAMM _amm = amm();\\n        TransferHelper.safeApprove(address(sweep), address(_amm), sweepAmount);\\n        usdxAmount = _amm.sellSweep(\\n            address(usdx),\\n            sweepAmount,\\n            minAmountOut\\n        );\\n\\n        return usdxAmount;\\n    }\\n\\n    function _borrow(uint256 sweepAmount) internal {\\n        if (!sweep.isValidMinter(address(this))) revert InvalidMinter();\\n        uint256 sweepAvailable = loanLimit - sweepBorrowed;\\n        if (sweepAvailable < sweepAmount) revert NotEnoughBalance();\\n\\n        uint256 spreadAmount = accruedFee();\\n        sweep.mint(sweepAmount);\\n        sweepBorrowed += sweepAmount;\\n        spreadDate = block.timestamp;\\n\\n        if (spreadAmount > 0) {\\n            TransferHelper.safeTransfer(\\n                address(sweep),\\n                sweep.treasury(),\\n                spreadAmount\\n            );\\n            emit PayFee(spreadAmount);\\n        }\\n\\n        emit Borrowed(sweepAmount);\\n    }\\n\\n    function _repay(uint256 sweepAmount) internal {\\n        uint256 sweepBalance = sweep.balanceOf(address(this));\\n        sweepAmount = sweepAmount.min(sweepBalance);\\n\\n        if (sweepAmount == 0) revert NotEnoughBalance();\\n\\n        callAmount = (callAmount > sweepAmount)\\n            ? (callAmount - sweepAmount)\\n            : 0;\\n\\n        if (callDelay > 0 && callAmount == 0) callTime = 0;\\n\\n        uint256 spreadAmount = accruedFee();\\n        spreadDate = block.timestamp;\\n\\n        sweepAmount = sweepAmount - spreadAmount;\\n        if (sweepBorrowed < sweepAmount) {\\n            sweepAmount = sweepBorrowed;\\n            sweepBorrowed = 0;\\n        } else {\\n            sweepBorrowed -= sweepAmount;\\n        }\\n\\n        TransferHelper.safeTransfer(\\n            address(sweep),\\n            sweep.treasury(),\\n            spreadAmount\\n        );\\n\\n        TransferHelper.safeApprove(address(sweep), address(this), sweepAmount);\\n        sweep.burn(sweepAmount);\\n\\n        emit Repaid(sweepAmount);\\n        if(!isDefaulted()) _stopAuction();\\n    }\\n\\n    \\n\\n    /**\\n     * @notice Get Balances of the usdx and SWEEP.\\n     **/\\n    function _balances()\\n        internal\\n        view\\n        returns (uint256 usdxBalance, uint256 sweepBalance)\\n    {\\n        usdxBalance = usdx.balanceOf(address(this));\\n        sweepBalance = sweep.balanceOf(address(this));\\n    }\\n\\n    function _onlyBorrower() internal view {\\n        if (msg.sender != borrower) revert NotBorrower();\\n    }\\n\\n    function _onlySettingsEnabled() internal view {\\n        if (!settingsEnabled) revert SettingsDisabled();\\n    }\\n\\n    function _validAmount(uint256 amount) internal pure {\\n        if (amount == 0) revert OverZero();\\n    }\\n\\n    function _oracleUsdxToUsd(\\n        uint256 usdxAmount\\n    ) internal view returns (uint256) {\\n        return\\n            ChainlinkLibrary.convertTokenToUsd(\\n                usdxAmount,\\n                usdx.decimals(),\\n                oracleUsdx\\n            );\\n    }\\n\\n    function _oracleUsdToUsdx(\\n        uint256 usdAmount\\n    ) internal view returns (uint256) {\\n        return\\n            ChainlinkLibrary.convertUsdToToken(\\n                usdAmount,\\n                usdx.decimals(),\\n                oracleUsdx\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Sweep/ISweep.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface ISweep {\\n    struct Minter {\\n        uint256 maxAmount;\\n        uint256 mintedAmount;\\n        bool isListed;\\n        bool isEnabled;\\n    }\\n\\n    function isMintingAllowed() external view returns (bool);\\n\\n    function DEFAULT_ADMIN_ADDRESS() external view returns (address);\\n\\n    function balancer() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function isValidMinter(address) external view returns (bool);\\n\\n    function amm() external view returns (address);\\n\\n    function ammPrice() external view returns (uint256);\\n\\n    function twaPrice() external view returns (uint256);\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function owner() external view returns (address);\\n\\n    function fastMultisig() external view returns (address);\\n\\n    function burn(uint256 amount) external;\\n\\n    function mint(uint256 amount) external;\\n\\n    function minters(address minterAaddress) external returns (Minter memory);\\n\\n    function minterAddresses(uint256 index) external view returns (address);\\n\\n    function getMinters() external view returns (address[] memory);\\n\\n    function targetPrice() external view returns (uint256);\\n\\n    function interestRate() external view returns (int256);\\n\\n    function periodStart() external view returns (uint256);\\n\\n    function stepValue() external view returns (int256);\\n\\n    function arbSpread() external view returns (uint256);\\n\\n    function refreshInterestRate(int256 newInterestRate, uint256 newPeriodStart) external;\\n\\n    function setTargetPrice(\\n        uint256 currentTargetPrice,\\n        uint256 nextTargetPrice\\n    ) external;\\n\\n    function setInterestRate(\\n        int256 currentInterestRate,\\n        int256 nextInterestRate\\n    ) external;\\n\\n    function setPeriodStart(\\n        uint256 currentPeriodStart,\\n        uint256 nextPeriodStart\\n    ) external;\\n\\n    function startNewPeriod() external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function convertToUSD(uint256 amount) external view returns (uint256);\\n\\n    function convertToSWEEP(uint256 amount) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_sweep\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleUsdx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ActionNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetDefaulted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EquityRatioExcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAutoInvest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAutoInvestMinAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAutoInvestMinRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBalancer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDefaulted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMultisigOrGov\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSweep\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SettingsDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SpreadNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressDetected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"AutoCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"AutoInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtSWEEP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"CallCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"minEquityRatio\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"spreadFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreaseFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"autoInvestMinRatio\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"autoInvestMinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLiquidationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoInvestEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_auctionAllowed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ConfigurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanLimit\",\"type\":\"uint256\"}],\"name\":\"LoanLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"PayFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"Rejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"}],\"name\":\"SoldSWEEP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"SweepBorrowedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sweeAmount\",\"type\":\"uint256\"}],\"name\":\"SweepPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accruedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amm\",\"outputs\":[{\"internalType\":\"contract IAMM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"autoCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"autoInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoInvestEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoInvestMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoInvestMinRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bptIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"}],\"name\":\"buySweep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"buySweepOnAMM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_minEquityRatio\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_spreadFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callDelay\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_autoInvestMinRatio\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_autoInvestMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLiquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoInvestEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_auctionAllowed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEquityRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJuniorTrancheValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"initPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDefaulted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEquityRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAMM\",\"type\":\"bool\"}],\"name\":\"oneStepDivest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAMM\",\"type\":\"bool\"}],\"name\":\"oneStepInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdx\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IBalancerPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolAssets\",\"outputs\":[{\"internalType\":\"contract IAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"sellSweepOnAMM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoanLimit\",\"type\":\"uint256\"}],\"name\":\"setLoanLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newSlippage\",\"type\":\"uint32\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settingsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"swapSweepToUsdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdxAmount\",\"type\":\"uint256\"}],\"name\":\"swapUsdxToSweep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[{\"internalType\":\"contract ISweep\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSweepBorrowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdx\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdxIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BalancerMarketMaker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000b88a5ac00917a02d82c7cd6cebd73e2852d43574000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f6000000000000000000000000a468570db143321bc034bbd74a6cc2694d15b2520000000000000000000000003afd8feed6bbd1d8254d92eafa1f695dce16387a000000000000000000000000000000000000000000000000000000000000001542616c616e636572204d61726b6574204d616b65720000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}