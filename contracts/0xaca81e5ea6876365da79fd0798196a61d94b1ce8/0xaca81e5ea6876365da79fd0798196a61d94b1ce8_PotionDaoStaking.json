{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/interfaces/IYToken.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IYToken is IERC20 {\r\n    function burn(uint256 _amount) external;\r\n}\r\n\r\n// File contracts/interfaces/IYTokenReserve.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IYTokenReserve {\r\n    function transfer(address _address, uint256 _amount) external;\r\n\r\n    function setRewarder(address _rewarder) external returns (bool);\r\n\r\n    function setPool(address _pool) external returns (bool);\r\n}\r\n\r\n// File contracts/interfaces/IWETH.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n// File contracts/libs/WethUtils.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\nlibrary WethUtils {\r\n    using SafeERC20 for IWETH;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IWETH public constant weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); //WETH\r\n    IERC20 public constant POTION = IERC20(0x276e84Edc5Bd94731B65C207dc1512FC5391572F); //PTN token\r\n\r\n    function isWeth(address token) internal pure returns (bool) {\r\n        return address(weth) == token;\r\n    }\r\n\r\n    function wrap(uint256 amount) internal {\r\n        weth.deposit{value: amount}();\r\n    }\r\n\r\n    function unwrap(uint256 amount) internal {\r\n        weth.withdraw(amount);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) internal {\r\n        weth.safeTransfer(to, amount);\r\n    }\r\n}\r\n\r\n// File contracts/farms/PotionDaoStaking.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n// Based on EPS's & Geist's MultiFeeDistribution\r\ncontract PotionDaoStaking is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for IYToken;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    struct Reward {\r\n        uint256 periodFinish;\r\n        uint256 rewardRate;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewardPerTokenStored;\r\n    }\r\n    struct Balances {\r\n        uint256 total;\r\n        uint256 unlocked;\r\n        uint256 locked;\r\n        uint256 earned;\r\n    }\r\n    struct LockedBalance {\r\n        uint256 amount;\r\n        uint256 unlockTime;\r\n    }\r\n    struct RewardData {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n\r\n    IYToken public stakingToken;\r\n    IYTokenReserve public stakingTokenReserve;\r\n    address[] public rewardTokens;\r\n    mapping(address => Reward) public rewardData;\r\n\r\n    // Duration that rewards are streamed over\r\n    uint256 public constant rewardsDuration = 86400 * 4; // 4 days\r\n\r\n    // Duration of lock/earned penalty period\r\n    uint256 public constant lockDuration = 86400 * 7 * 2; // 2 weeks\r\n\r\n    // Addresses approved to call mint\r\n    mapping(address => bool) public minters;\r\n    address[] public mintersArray;\r\n\r\n    // reward token -> distributor -> is approved to add rewards\r\n    mapping(address => mapping(address => bool)) public rewardDistributors;\r\n\r\n    // user -> reward token -> amount\r\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\r\n    mapping(address => mapping(address => uint256)) public rewards;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public lockedSupply;\r\n\r\n    // Private mappings for balance data\r\n    mapping(address => Balances) private balances;\r\n    mapping(address => LockedBalance[]) private userLocks;\r\n    mapping(address => LockedBalance[]) private userEarnings;\r\n\r\n    //team reward\r\n    uint256 public teamRewardPercent = 20; //20%\r\n    address public teamWalletAddress;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address _stakingToken,\r\n        address _stakingTokenReserve,\r\n        address[] memory _minters,\r\n        address _teamWalletAddress,\r\n        address initialOwner\r\n    ) Ownable() {\r\n        stakingToken = IYToken(_stakingToken);\r\n        stakingTokenReserve = IYTokenReserve(_stakingTokenReserve);\r\n        stakingTokenReserve.setRewarder(address(this));\r\n        for (uint256 i; i < _minters.length; i++) {\r\n            minters[_minters[i]] = true;\r\n            mintersArray.push(_minters[i]);\r\n        }\r\n        // First reward MUST be the staking token or things will break\r\n        // related to the 50% penalty and distribution to locked balances\r\n        rewardTokens.push(_stakingToken);\r\n        rewardData[_stakingToken].lastUpdateTime = block.timestamp;\r\n        rewardData[_stakingToken].periodFinish = block.timestamp;\r\n        transferOwnership(initialOwner);\r\n        teamWalletAddress = _teamWalletAddress;\r\n    }\r\n\r\n    /* ========== ADMIN CONFIGURATION ========== */\r\n\r\n    // Add a new reward token to be distributed to stakers\r\n    function addReward(address _rewardsToken, address _distributor) public onlyOwner {\r\n        require(rewardData[_rewardsToken].lastUpdateTime == 0, \"MultiFeeDistribution::addReward: Invalid\");\r\n        rewardTokens.push(_rewardsToken);\r\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\r\n        rewardData[_rewardsToken].periodFinish = block.timestamp;\r\n        rewardDistributors[_rewardsToken][_distributor] = true;\r\n        emit RewardTokenAdded(_rewardsToken);\r\n        emit RewardDistributorApproved(_rewardsToken, _distributor, true);\r\n    }\r\n\r\n    // Modify approval for an address to call notifyRewardAmount\r\n    function approveRewardDistributor(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _approved\r\n    ) external onlyOwner {\r\n        require(rewardData[_rewardsToken].lastUpdateTime > 0, \"MultiFeeDistribution::approveRewardDistributor: Invalid\");\r\n        rewardDistributors[_rewardsToken][_distributor] = _approved;\r\n        emit RewardDistributorApproved(_rewardsToken, _distributor, _approved);\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function _rewardPerToken(address _rewardsToken, uint256 _supply) internal view returns (uint256) {\r\n        if (_supply == 0) {\r\n            return rewardData[_rewardsToken].rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardData[_rewardsToken].rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable(_rewardsToken).sub(rewardData[_rewardsToken].lastUpdateTime).mul(rewardData[_rewardsToken].rewardRate).mul(1e18).div(_supply)\r\n            );\r\n    }\r\n\r\n    function _earned(\r\n        address _user,\r\n        address _rewardsToken,\r\n        uint256 _balance,\r\n        uint256 supply\r\n    ) internal view returns (uint256) {\r\n        return _balance.mul(_rewardPerToken(_rewardsToken, supply).sub(userRewardPerTokenPaid[_user][_rewardsToken])).div(1e18).add(rewards[_user][_rewardsToken]);\r\n    }\r\n\r\n    function lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {\r\n        return Math.min(block.timestamp, rewardData[_rewardsToken].periodFinish);\r\n    }\r\n\r\n    function rewardPerToken(address _rewardsToken) external view returns (uint256) {\r\n        uint256 supply = _rewardsToken == address(stakingToken) ? lockedSupply : totalSupply;\r\n        return _rewardPerToken(_rewardsToken, supply);\r\n    }\r\n\r\n    function getRewardForDuration(address _rewardsToken) external view returns (uint256) {\r\n        return rewardData[_rewardsToken].rewardRate.mul(rewardsDuration);\r\n    }\r\n\r\n    // Address and claimable amount of all reward tokens for the given account\r\n    function claimableRewards(address account) external view returns (RewardData[] memory _rewards) {\r\n        _rewards = new RewardData[](rewardTokens.length);\r\n        for (uint256 i = 0; i < _rewards.length; i++) {\r\n            // If i == 0 this is the stakingReward, distribution is based on locked balances\r\n            uint256 balance = i == 0 ? balances[account].locked : balances[account].total;\r\n            uint256 supply = i == 0 ? lockedSupply : totalSupply;\r\n            _rewards[i].token = rewardTokens[i];\r\n            _rewards[i].amount = _earned(account, _rewards[i].token, balance, supply);\r\n        }\r\n        return _rewards;\r\n    }\r\n\r\n    // Total balance of an account, including unlocked, locked and earned tokens\r\n    function totalBalance(address user) external view returns (uint256 amount) {\r\n        return balances[user].total;\r\n    }\r\n\r\n    // Total withdrawable balance for an account to which no penalty is applied\r\n    function unlockedBalance(address user) external view returns (uint256 amount) {\r\n        amount = balances[user].unlocked;\r\n        LockedBalance[] storage earnings = userEarnings[msg.sender];\r\n        for (uint256 i = 0; i < earnings.length; i++) {\r\n            if (earnings[i].unlockTime > block.timestamp) {\r\n                break;\r\n            }\r\n            amount = amount.add(earnings[i].amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    // Information on the \"earned\" balances of a user\r\n    // Earned balances may be withdrawn immediately for a 50% penalty\r\n    function earnedBalances(address user) external view returns (uint256 total, LockedBalance[] memory earningsData) {\r\n        LockedBalance[] storage earnings = userEarnings[user];\r\n        uint256 idx;\r\n        for (uint256 i = 0; i < earnings.length; i++) {\r\n            if (earnings[i].unlockTime > block.timestamp) {\r\n                if (idx == 0) {\r\n                    earningsData = new LockedBalance[](earnings.length - i);\r\n                }\r\n                earningsData[idx] = earnings[i];\r\n                idx++;\r\n                total = total.add(earnings[i].amount);\r\n            }\r\n        }\r\n        return (total, earningsData);\r\n    }\r\n\r\n    // Information on a user's locked balances\r\n    function lockedBalances(address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 total,\r\n            uint256 unlockable,\r\n            uint256 locked,\r\n            LockedBalance[] memory lockData\r\n        )\r\n    {\r\n        LockedBalance[] storage locks = userLocks[user];\r\n        uint256 idx;\r\n        for (uint256 i = 0; i < locks.length; i++) {\r\n            if (locks[i].unlockTime > block.timestamp) {\r\n                if (idx == 0) {\r\n                    lockData = new LockedBalance[](locks.length - i);\r\n                }\r\n                lockData[idx] = locks[i];\r\n                idx++;\r\n                locked = locked.add(locks[i].amount);\r\n            } else {\r\n                unlockable = unlockable.add(locks[i].amount);\r\n            }\r\n        }\r\n        return (balances[user].locked, unlockable, locked, lockData);\r\n    }\r\n\r\n    // Final balance received and penalty balance paid by user upon calling exit\r\n    function withdrawableBalance(address user) public view returns (uint256 amount, uint256 penaltyAmount) {\r\n        Balances storage bal = balances[user];\r\n        if (bal.earned > 0) {\r\n            uint256 amountWithoutPenalty;\r\n            uint256 length = userEarnings[user].length;\r\n            for (uint256 i = 0; i < length; i++) {\r\n                uint256 earnedAmount = userEarnings[user][i].amount;\r\n                if (earnedAmount == 0) continue;\r\n                if (userEarnings[user][i].unlockTime > block.timestamp) {\r\n                    break;\r\n                }\r\n                amountWithoutPenalty = amountWithoutPenalty.add(earnedAmount);\r\n            }\r\n\r\n            penaltyAmount = bal.earned.sub(amountWithoutPenalty).div(2);\r\n        }\r\n        amount = bal.unlocked.add(bal.earned).sub(penaltyAmount);\r\n        return (amount, penaltyAmount);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    // Stake tokens to receive rewards\r\n    // Locked tokens cannot be withdrawn for lockDuration and are eligible to receive stakingReward rewards\r\n    function stake(uint256 amount, bool lock) external nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"MultiFeeDistribution::stake: Cannot stake 0\");\r\n        totalSupply = totalSupply.add(amount);\r\n        Balances storage bal = balances[msg.sender];\r\n        bal.total = bal.total.add(amount);\r\n        if (lock) {\r\n            lockedSupply = lockedSupply.add(amount);\r\n            bal.locked = bal.locked.add(amount);\r\n            uint256 unlockTime = block.timestamp.div(rewardsDuration).mul(rewardsDuration).add(lockDuration);\r\n            uint256 idx = userLocks[msg.sender].length;\r\n            if (idx == 0 || userLocks[msg.sender][idx - 1].unlockTime < unlockTime) {\r\n                userLocks[msg.sender].push(LockedBalance({amount: amount, unlockTime: unlockTime}));\r\n            } else {\r\n                userLocks[msg.sender][idx - 1].amount = userLocks[msg.sender][idx - 1].amount.add(amount);\r\n            }\r\n        } else {\r\n            bal.unlocked = bal.unlocked.add(amount);\r\n        }\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    // Mint new tokens\r\n    // Minted tokens receive rewards normally but incur a 50% penalty when\r\n    // withdrawn before lockDuration has passed.\r\n    function mint(address user, uint256 amount) external updateReward(user) {\r\n        require(minters[msg.sender], \"MultiFeeDistribution::mint: Only minters allowed\");\r\n        totalSupply = totalSupply.add(amount);\r\n        Balances storage bal = balances[user];\r\n        bal.total = bal.total.add(amount);\r\n        bal.earned = bal.earned.add(amount);\r\n        uint256 unlockTime = block.timestamp.div(rewardsDuration).mul(rewardsDuration).add(lockDuration);\r\n        LockedBalance[] storage earnings = userEarnings[user];\r\n        uint256 idx = earnings.length;\r\n\r\n        if (idx == 0 || earnings[idx - 1].unlockTime < unlockTime) {\r\n            earnings.push(LockedBalance({amount: amount, unlockTime: unlockTime}));\r\n        } else {\r\n            earnings[idx - 1].amount = earnings[idx - 1].amount.add(amount);\r\n        }\r\n        stakingTokenReserve.transfer(address(this), amount);\r\n        emit Staked(user, amount);\r\n    }\r\n\r\n    // Withdraw staked tokens\r\n    // First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\r\n    // incurs a 50% penalty which is distributed based on locked balances.\r\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"MultiFeeDistribution::withdraw: Cannot withdraw 0\");\r\n        Balances storage bal = balances[msg.sender];\r\n        uint256 penaltyAmount;\r\n\r\n        if (amount <= bal.unlocked) {\r\n            bal.unlocked = bal.unlocked.sub(amount);\r\n        } else {\r\n            uint256 remaining = amount.sub(bal.unlocked);\r\n            require(bal.earned >= remaining, \"MultiFeeDistribution::withdraw: Insufficient unlocked balance\");\r\n            bal.unlocked = 0;\r\n            bal.earned = bal.earned.sub(remaining);\r\n            for (uint256 i = 0; ; i++) {\r\n                uint256 earnedAmount = userEarnings[msg.sender][i].amount;\r\n                if (earnedAmount == 0) continue;\r\n                if (penaltyAmount == 0 && userEarnings[msg.sender][i].unlockTime > block.timestamp) {\r\n                    penaltyAmount = remaining;\r\n                    require(bal.earned >= remaining, \"MultiFeeDistribution::withdraw: Insufficient balance after penalty\");\r\n                    bal.earned = bal.earned.sub(remaining);\r\n                    if (bal.earned == 0) {\r\n                        delete userEarnings[msg.sender];\r\n                        break;\r\n                    }\r\n                    remaining = remaining.mul(2);\r\n                }\r\n                if (remaining <= earnedAmount) {\r\n                    userEarnings[msg.sender][i].amount = earnedAmount.sub(remaining);\r\n                    break;\r\n                } else {\r\n                    delete userEarnings[msg.sender][i];\r\n                    remaining = remaining.sub(earnedAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 adjustedAmount = amount.add(penaltyAmount);\r\n        bal.total = bal.total.sub(adjustedAmount);\r\n        totalSupply = totalSupply.sub(adjustedAmount);\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        if (penaltyAmount > 0) {\r\n            _notifyReward(address(stakingToken), penaltyAmount);\r\n        }\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    // Claim all pending staking rewards\r\n    function getReward() public nonReentrant updateReward(msg.sender) {\r\n        for (uint256 i; i < rewardTokens.length; i++) {\r\n            address _rewardToken = rewardTokens[i];\r\n            uint256 reward = rewards[msg.sender][_rewardToken];\r\n            if (reward > 0) {\r\n                rewards[msg.sender][_rewardToken] = 0;\r\n                if (WethUtils.isWeth(_rewardToken)) {\r\n                    WethUtils.unwrap(reward);\r\n                    // Address.sendValue(payable(msg.sender), reward);\r\n                    payable(msg.sender).transfer(reward);\r\n                } else {\r\n                    IERC20(_rewardToken).safeTransfer(msg.sender, reward);\r\n                }\r\n                emit RewardPaid(msg.sender, _rewardToken, reward);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Withdraw full unlocked balance and claim pending rewards\r\n    function emergencyWithdraw() external updateReward(msg.sender) {\r\n        (uint256 amount, uint256 penaltyAmount) = withdrawableBalance(msg.sender);\r\n        delete userEarnings[msg.sender];\r\n        Balances storage bal = balances[msg.sender];\r\n        bal.total = bal.total.sub(bal.unlocked).sub(bal.earned);\r\n        bal.unlocked = 0;\r\n        bal.earned = 0;\r\n\r\n        totalSupply = totalSupply.sub(amount.add(penaltyAmount));\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        if (penaltyAmount > 0) {\r\n            _notifyReward(address(stakingToken), penaltyAmount);\r\n        }\r\n        getReward();\r\n    }\r\n\r\n    // Withdraw all currently locked tokens where the unlock time has passed\r\n    function withdrawExpiredLocks() external {\r\n        LockedBalance[] storage locks = userLocks[msg.sender];\r\n        Balances storage bal = balances[msg.sender];\r\n        uint256 amount;\r\n        uint256 length = locks.length;\r\n        if (locks[length - 1].unlockTime <= block.timestamp) {\r\n            amount = bal.locked;\r\n            delete userLocks[msg.sender];\r\n        } else {\r\n            for (uint256 i = 0; i < length; i++) {\r\n                if (locks[i].unlockTime > block.timestamp) break;\r\n                amount = amount.add(locks[i].amount);\r\n                delete locks[i];\r\n            }\r\n        }\r\n        bal.locked = bal.locked.sub(amount);\r\n        bal.total = bal.total.sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n        lockedSupply = lockedSupply.sub(amount);\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function _notifyReward(address _rewardsToken, uint256 reward) internal {\r\n        if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\r\n            rewardData[_rewardsToken].rewardRate = reward.div(rewardsDuration);\r\n        } else {\r\n            uint256 remaining = rewardData[_rewardsToken].periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardData[_rewardsToken].rewardRate);\r\n            rewardData[_rewardsToken].rewardRate = reward.add(leftover).div(rewardsDuration);\r\n        }\r\n\r\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\r\n        rewardData[_rewardsToken].periodFinish = block.timestamp.add(rewardsDuration);\r\n    }\r\n\r\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external updateReward(address(0)) {\r\n        require(rewardDistributors[_rewardsToken][msg.sender], \"MultiFeeDistribution::notifyRewardAmount: Only reward distributors allowed\");\r\n        require(reward > 0, \"MultiFeeDistribution::notifyRewardAmount: No reward\");\r\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\r\n        // of transactions required and ensure correctness of the reward amount\r\n        uint256 teamReward = reward.mul(teamRewardPercent).div(100);\r\n        uint256 rewardToAdd = reward.sub(teamReward);\r\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), rewardToAdd);\r\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender, teamWalletAddress, teamReward);\r\n        _notifyReward(_rewardsToken, rewardToAdd);\r\n        emit WithrewTeamReward(teamReward);\r\n        emit RewardAdded(rewardToAdd);\r\n    }\r\n\r\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\r\n        require(tokenAddress != address(stakingToken), \"MultiFeeDistribution::recoverERC20: Cannot withdraw staking token\");\r\n        require(rewardData[tokenAddress].lastUpdateTime == 0, \"MultiFeeDistribution::recoverERC20: Cannot withdraw reward token\");\r\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\r\n        emit Recovered(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    // Set the address of team wallet\r\n    function setTeamWalletAddress(address _newWalletAddress) external {\r\n        require(owner() == msg.sender || teamWalletAddress == msg.sender, \"MultiFeeDistribution::setTeamWalletAddress: not allowed\");\r\n        teamWalletAddress = _newWalletAddress;\r\n        emit updatedTeamWalletAddress(_newWalletAddress);\r\n    }\r\n\r\n    // Set percent of team reward\r\n    function setTeamRewardPercent(uint256 _percent) external {\r\n        require(owner() == msg.sender, \"MultiFeeDistribution::setTeamRewardPercent: not allowed\");\r\n        require(_percent <= 40, \"MultiFeeDistribution::setTeamRewardPercent: invalid value\");\r\n\r\n        teamRewardPercent = _percent;\r\n        emit updatedTeamRewardPercent(_percent);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier updateReward(address account) {\r\n        address token = address(stakingToken);\r\n        uint256 balance;\r\n        uint256 supply = lockedSupply;\r\n        rewardData[token].rewardPerTokenStored = _rewardPerToken(token, supply);\r\n        rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\r\n        if (account != address(0)) {\r\n            // Special case, use the locked balances and supply for stakingReward rewards\r\n            rewards[account][token] = _earned(account, token, balances[account].locked, supply);\r\n            userRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\r\n            balance = balances[account].total;\r\n        }\r\n\r\n        supply = totalSupply;\r\n        for (uint256 i = 1; i < rewardTokens.length; i++) {\r\n            token = rewardTokens[i];\r\n            rewardData[token].rewardPerTokenStored = _rewardPerToken(token, supply);\r\n            rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\r\n            if (account != address(0)) {\r\n                rewards[account][token] = _earned(account, token, balance, supply);\r\n                userRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event WithrewTeamReward(uint256 reward);\r\n    event RewardTokenAdded(address indexed rewardTokenAddress);\r\n    event RewardDistributorApproved(address indexed rewardAddress, address indexed distributor, bool approved);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward);\r\n    event Recovered(address token, uint256 amount);\r\n    event updatedTeamRewardPercent(uint256 percent);\r\n    event updatedTeamWalletAddress(address newAddress);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingTokenReserve\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_teamWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RewardDistributorApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WithrewTeamReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updatedTeamRewardPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatedTeamWalletAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PotionDaoStaking.RewardData[]\",\"name\":\"_rewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PotionDaoStaking.LockedBalance[]\",\"name\":\"earningsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PotionDaoStaking.LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTeamRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWalletAddress\",\"type\":\"address\"}],\"name\":\"setTeamWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IYToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenReserve\",\"outputs\":[{\"internalType\":\"contract IYTokenReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PotionDaoStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000276e84edc5bd94731b65c207dc1512fc5391572f000000000000000000000000043ef739a8c7ff3ca0423ecf40ceadb2e824d60a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000fadf60115930f3cd497ac01da7b9ce551facfd38000000000000000000000000fadf60115930f3cd497ac01da7b9ce551facfd380000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a5b341f6e931b6a510420e9030ef15ac17b8946c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e6985a1ae31e1cf4a4bca80c0a53d51b93e3f742f912d7db28a7005f1007e7a"}