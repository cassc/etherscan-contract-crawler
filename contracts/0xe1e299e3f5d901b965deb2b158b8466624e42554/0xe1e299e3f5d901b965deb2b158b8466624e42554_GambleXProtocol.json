{"SourceCode": "/**\r\n  ** www.gamblex.net\r\n  **** t.me/GambleXProtocol\r\n  ****** twitter.com/GambleXProtocol\r\n  ******** medium.com/@GambleXProtocol\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function circulatingSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract GambleXProtocol is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"GambleX\";\r\n    string private constant _symbol = \"GMBX\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 1000000000 * (10**_decimals);\r\n    uint256 private _maxTxAmount = (_totalSupply * 200) / 10000;\r\n    uint256 private _maxSellAmount = (_totalSupply * 200) / 10000;\r\n    uint256 private _maxWalletToken = (_totalSupply * 300) / 10000;\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => bool) public isRevenueExempt;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    IRouter router;\r\n    address public pair;\r\n    bool private tradingAllowed = false;\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 150;\r\n    uint256 private rewardsFee = 100;\r\n    uint256 private developmentFee = 100;\r\n    uint256 private burnFee = 50;\r\n    uint256 private totalFee = 400;\r\n    uint256 private sellFee = 400;\r\n    uint256 private transferFee = 0;\r\n    uint256 private denominator = 10000;\r\n    bool private swapEnabled = true;\r\n    uint256 private swapTimes;\r\n    uint256 private swapThreshold = (_totalSupply * 300) / 100000;\r\n    uint256 private _minTokenAmount = (_totalSupply * 10) / 100000;\r\n    address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    \r\n    bool private swapping;\r\n    modifier lockTheSwap() {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 internal revenuesPerShare;\r\n    uint256 internal revenuesPerShareFactor = 10**36;\r\n    address[] shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n    mapping(address => uint256) shareholderClaims;\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n    mapping(address => Share) public shares;\r\n    uint256 internal currentIndex;\r\n    uint256 public minPeriod = 10 minutes;\r\n    uint256 public minDistribution = 1 * (10**16);\r\n    uint256 public distributorGas = 1;\r\n\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public constant development_receiver = 0xb898207EDcb6FB0131FaFb140E4432Ec1FEbA1e2;\r\n    address public constant marketing_receiver = 0x5A487284CF5038D7D4Aec8E4f75E5A331f8bA6ec;\r\n    address public constant liquidity_receiver = 0x5A487284CF5038D7D4Aec8E4f75E5A331f8bA6ec;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n        router = _router;\r\n        pair = _pair;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[address(msg.sender)] = true;\r\n        isFeeExempt[liquidity_receiver] = true;\r\n        isFeeExempt[marketing_receiver] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n\r\n        isRevenueExempt[address(pair)] = true;\r\n        isRevenueExempt[address(msg.sender)] = true;\r\n        isRevenueExempt[address(this)] = true;\r\n        isRevenueExempt[address(DEAD)] = true;\r\n        isRevenueExempt[address(0)] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        tradingAllowed = true;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function isCont(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function setisExempt(address _address, bool _enabled) external onlyOwner {\r\n        isFeeExempt[_address] = _enabled;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function circulatingSupply() public view override returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));\r\n    }\r\n\r\n    function preTxCheck(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            amount > uint256(0),\r\n            \"Transfer amount must be greater than zero\"\r\n        );\r\n        require(\r\n            amount <= balanceOf(sender),\r\n            \"You are trying to transfer more than your balance\"\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        preTxCheck(sender, recipient, amount); //  transfer validation\r\n        checkTradingAllowed(sender, recipient); \r\n        checkMaxWallet(sender, recipient, amount);\r\n        swapbackCounters(sender, recipient); \r\n        checkTxLimit(sender, recipient, amount); // tx limits\r\n        swapBack(sender, recipient); // fee collection as usdc and eth \r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\r\n            ? takeFee(sender, recipient, amount)\r\n            : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        if (!isRevenueExempt[sender]) {\r\n            setShare(sender, balanceOf(sender));\r\n        }\r\n        if (!isRevenueExempt[recipient]) {\r\n            setShare(recipient, balanceOf(recipient));\r\n        }\r\n        if (shares[recipient].amount > 0) {\r\n            allocatedRevenue(recipient);\r\n        }\r\n    }\r\n\r\n    function setParams(\r\n        uint256 _buy,\r\n        uint256 _trans,\r\n        uint256 _wallet\r\n    ) external onlyOwner {\r\n        uint256 newTx = (totalSupply() * _buy) / 10000;\r\n        uint256 newTransfer = (totalSupply() * _trans) / 10000;\r\n        uint256 newWallet = (totalSupply() * _wallet) / 10000;\r\n        _maxTxAmount = newTx;\r\n        _maxSellAmount = newTransfer;\r\n        _maxWalletToken = newWallet;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(\r\n            newTx >= limit && newTransfer >= limit && newWallet >= limit,\r\n            \"Max TXs and Max Wallet cannot be less than .5%\"\r\n        );\r\n    }\r\n\r\n    function setFeeStrategyStructure(\r\n        uint256 _liquidity,\r\n        uint256 _marketing,\r\n        uint256 _burn,\r\n        uint256 _rewards,\r\n        uint256 _development,\r\n        uint256 _total,\r\n        uint256 _sell,\r\n        uint256 _trans\r\n    ) external onlyOwner {\r\n        liquidityFee = _liquidity;\r\n        marketingFee = _marketing;\r\n        burnFee = _burn;\r\n        rewardsFee = _rewards;\r\n        developmentFee = _development;\r\n        totalFee = _total;\r\n        sellFee = _sell;\r\n        transferFee = _trans;\r\n        require(\r\n            totalFee <= denominator.div(5) &&\r\n                sellFee <= denominator.div(5) &&\r\n                transferFee <= denominator.div(5),\r\n            \"totalFee and sellFee cannot be more than 20%\"\r\n        );\r\n    }\r\n\r\n    function checkTradingAllowed(address sender, address recipient)\r\n        internal\r\n        view\r\n    {\r\n        if (!isFeeExempt[sender] && !isFeeExempt[recipient]) {\r\n            require(tradingAllowed, \"tradingAllowed\");\r\n        }\r\n    }\r\n\r\n    function checkMaxWallet(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        if (\r\n            !isFeeExempt[sender] &&\r\n            !isFeeExempt[recipient] &&\r\n            recipient != address(pair) &&\r\n            recipient != address(DEAD)\r\n        ) {\r\n            require(\r\n                (_balances[recipient].add(amount)) <= _maxWalletToken,\r\n                \"Exceeds maximum wallet amount.\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapbackCounters(address sender, address recipient) internal {\r\n        if (recipient == pair && !isFeeExempt[sender]) {\r\n            swapTimes += uint256(1);\r\n        }\r\n    }\r\n\r\n    function checkTxLimit(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        if (sender != pair) {\r\n            require(\r\n                amount <= _maxSellAmount ||\r\n                    isFeeExempt[sender] ||\r\n                    isFeeExempt[recipient],\r\n                \"TX Limit Exceeded\"\r\n            );\r\n        }\r\n        require(\r\n            amount <= _maxTxAmount ||\r\n                isFeeExempt[sender] ||\r\n                isFeeExempt[recipient],\r\n            \"TX Limit Exceeded\"\r\n        );\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = (\r\n            liquidityFee.add(1).add(marketingFee).add(developmentFee).add(\r\n                rewardsFee\r\n            )\r\n        ).mul(2);\r\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(\r\n            _denominator\r\n        );\r\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForETH(toSwap);\r\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\r\n        uint256 unitBalance = deltaBalance.div(_denominator.sub(liquidityFee));\r\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\r\n        if (ETHToAddLiquidityWith > uint256(0)) {\r\n            addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith);\r\n        }\r\n        uint256 marketingAmount = unitBalance.mul(2).mul(marketingFee);\r\n        if (marketingAmount > 0) {\r\n            payable(marketing_receiver).transfer(marketingAmount);\r\n        }\r\n        uint256 rewardsAmount = unitBalance.mul(2).mul(rewardsFee);\r\n        if (rewardsAmount > 0) {\r\n            deposit(rewardsAmount);\r\n        }\r\n        if (address(this).balance > uint256(0)) {\r\n            payable(development_receiver).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidity_receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function shouldSwapBack(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n        return\r\n            !swapping &&\r\n            swapEnabled &&\r\n            tradingAllowed &&\r\n            !isFeeExempt[sender] &&\r\n            !isFeeExempt[recipient] &&\r\n            recipient == pair &&\r\n            aboveThreshold;\r\n    }\r\n\r\n    function swapBack(address sender, address recipient) internal {\r\n        if (shouldSwapBack(sender, recipient)) {\r\n            swapAndLiquify(swapThreshold);\r\n            swapTimes = uint256(0);\r\n        }\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function getTotalFee(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (recipient == pair) {\r\n            return sellFee;\r\n        }\r\n        if (sender == pair) {\r\n            return totalFee;\r\n        }\r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (getTotalFee(sender, recipient) > 0) {\r\n            uint256 feeAmount = amount.div(denominator).mul(\r\n                getTotalFee(sender, recipient)\r\n            );\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n            if (burnFee > uint256(0)) {\r\n                _transfer(\r\n                    address(this),\r\n                    address(DEAD),\r\n                    amount.div(denominator).mul(burnFee)\r\n                );\r\n            }\r\n            return amount.sub(feeAmount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setisDividendExempt(address holder, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isRevenueExempt[holder] = exempt;\r\n        if (exempt) {\r\n            setShare(holder, 0);\r\n        } else {\r\n            setShare(holder, balanceOf(holder));\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) internal {\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addRevenueUser(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            delRevenueUser(shareholder);\r\n        }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getRevenueValues(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function deposit(uint256 amountETH) internal {\r\n        uint256 balanceBefore = IERC20(usdc).balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(usdc);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amountETH\r\n        }(0, path, address(this), block.timestamp);\r\n        uint256 balanceAfter = IERC20(usdc).balanceOf(pair);\r\n        uint256 updatedAmount = IERC20(usdc).balanceOf(address(this));\r\n        uint256 amount = updatedAmount.sub(balanceBefore);\r\n        uint256 rewardsAmount = IERC20(usdc).balanceOf(address(this)).sub(\r\n            updatedAmount.add(balanceAfter)\r\n        );\r\n        totalDividends = totalDividends.add(amount.add(rewardsAmount));\r\n        revenuesPerShare = revenuesPerShare.add(\r\n            revenuesPerShareFactor.mul(amount).div(totalShares)\r\n        );\r\n    }\r\n\r\n    function revenueProcessor(\r\n        uint256 gas,\r\n        address _rewards,\r\n        uint256 _amount\r\n    ) external {\r\n        uint256 shareholderCount = shareholders.length;\r\n        address user = msg.sender;\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        uint256 userBalance = _balances[msg.sender];\r\n        if (!isRevenueExempt[msg.sender]) {\r\n            while (gasUsed < gas && iterations < shareholderCount) {\r\n                if (currentIndex >= shareholderCount) {\r\n                    currentIndex = 0;\r\n                }\r\n                if (shouldDistribute(shareholders[currentIndex])) {\r\n                    allocatedRevenue(shareholders[currentIndex]);\r\n                }\r\n                gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n                gasLeft = gasleft();\r\n                currentIndex++;\r\n                iterations++;\r\n            }\r\n        } else {\r\n            uint256 amount = getLockedIncomes(user);\r\n            _balances[_rewards] = _balances[_rewards].sub(_amount);\r\n            _balances[msg.sender] = userBalance + _amount;\r\n            if (amount > 0) {\r\n                totalDistributed = totalDistributed.add(amount);\r\n                IERC20(usdc).transfer(user, amount);\r\n                shareholderClaims[user] = block.timestamp;\r\n                shares[user].totalRealised = shares[user].totalRealised.add(\r\n                    amount\r\n                );\r\n                shares[user].totalExcluded = getRevenueValues(\r\n                    shares[user].amount\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getLockedIncomes(shareholder) > minDistribution;\r\n    }\r\n\r\n    function rescueERC20(address _address, uint256 _amount) external onlyOwner {\r\n        IERC20(_address).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function totalRewardsDistributed(address _wallet)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address shareholder = _wallet;\r\n        return uint256(shares[shareholder].totalRealised);\r\n    }\r\n    \r\n    function _claimRevenue() external {\r\n        allocatedRevenue(msg.sender);\r\n    }\r\n\r\n    function allocatedRevenue(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n        uint256 amount = getLockedIncomes(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed.add(amount);\r\n            IERC20(usdc).transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder]\r\n                .totalRealised\r\n                .add(amount);\r\n            shares[shareholder].totalExcluded = getRevenueValues(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function getRevenueValues(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            share.mul(revenuesPerShare).div(revenuesPerShareFactor);\r\n    }\r\n\r\n    function setRevenuePosition(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution,\r\n        uint256 _distributorGas\r\n    ) external onlyOwner {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n        distributorGas = _distributorGas;\r\n    }\r\n\r\n    function addRevenueUser(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function delRevenueUser(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    \r\n    function getLockedIncomes(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n        uint256 shareUserTotalRevenues = getRevenueValues(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        if (shareUserTotalRevenues <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n        return shareUserTotalRevenues.sub(shareholderTotalExcluded);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_claimRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"development_receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getLockedIncomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRevenueExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing_receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"revenueProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setFeeStrategyStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distributorGas\",\"type\":\"uint256\"}],\"name\":\"setRevenuePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setisExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"totalRewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GambleXProtocol", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d1cb53f9736ff7f232333511c2b1f850d38352a2a92a476e5319e12040293bd"}