{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEligibilityDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n\\tfunction refresh(address user) external returns (bool currentEligibility);\\n\\n\\tfunction updatePrice() external;\\n\\n\\tfunction requiredEthValue(address user) external view returns (uint256 required);\\n\\n\\tfunction isEligibleForRewards(address _user) external view returns (bool isEligible);\\n\\n\\tfunction lastEligibleTime(address user) external view returns (uint256 lastEligibleTimestamp);\\n\\n\\tfunction lockedUsdValue(address user) external view returns (uint256);\\n\\n\\tfunction requiredUsdValue(address user) external view returns (uint256 required);\\n\\n\\tfunction lastEligibleStatus(address user) external view returns (bool);\\n\\n\\tfunction rewardEligibleAmount(address token) external view returns (uint256);\\n\\n\\tfunction setDqTime(address _user, uint256 _time) external;\\n\\n\\tfunction getDqTime(address _user) external view returns (uint256);\\n\\n\\tfunction autoprune() external returns (uint256 processed);\\n\\n\\tfunction requiredDepositRatio() external view returns (uint256);\\n\\n\\tfunction RATIO_DIVISOR() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction removeReward(address _rewardToken) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction rdntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction userSlippage(address) external view returns (uint256);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction vestTokens(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction setUserSlippage(uint256 slippage) external;\\n\\n\\tfunction toggleAutocompound() external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOnwardIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IOnwardIncentivesController {\\n\\tfunction handleAction(address _token, address _user, uint256 _balance, uint256 _totalSupply) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/LockedBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\\n\"\r\n    },\r\n    \"contracts/radiant/libraries/RecoverERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title RecoverERC20 contract\\n/// @author Radiant Devs\\n/// @dev All function calls are currently implemented without side effects\\ncontract RecoverERC20 {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice Emitted when ERC20 token is recovered\\n\\tevent Recovered(address indexed token, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n\\t */\\n\\tfunction _recoverERC20(address tokenAddress, uint256 tokenAmount) internal {\\n\\t\\tIERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n\\t\\temit Recovered(tokenAddress, tokenAmount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/radiant/staking/ChefIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {RecoverERC20} from \\\"../libraries/RecoverERC20.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport {IEligibilityDataProvider} from \\\"../../interfaces/IEligibilityDataProvider.sol\\\";\\nimport {IOnwardIncentivesController} from \\\"../../interfaces/IOnwardIncentivesController.sol\\\";\\n\\n/// @title ChefIncentivesController Contract\\n/// @author Radiant\\n/// based on the Sushi MasterChef\\n///\\thttps://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\\ncontract ChefIncentivesController is Initializable, PausableUpgradeable, OwnableUpgradeable, RecoverERC20 {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// Info of each user.\\n\\t// reward = user.`amount` * pool.`accRewardPerShare` - `rewardDebt`\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 rewardDebt;\\n\\t\\tuint256 lastClaimTime;\\n\\t}\\n\\n\\t// Info of each pool.\\n\\tstruct PoolInfo {\\n\\t\\tuint256 totalSupply;\\n\\t\\tuint256 allocPoint; // How many allocation points assigned to this pool.\\n\\t\\tuint256 lastRewardTime; // Last second that reward distribution occurs.\\n\\t\\tuint256 accRewardPerShare; // Accumulated rewards per share, times ACC_REWARD_PRECISION. See below.\\n\\t\\tIOnwardIncentivesController onwardIncentives;\\n\\t}\\n\\n\\t// Info about token emissions for a given time period.\\n\\tstruct EmissionPoint {\\n\\t\\tuint128 startTimeOffset;\\n\\t\\tuint128 rewardsPerSecond;\\n\\t}\\n\\n\\t// Info about ending time of reward emissions\\n\\tstruct EndingTime {\\n\\t\\tuint256 estimatedTime;\\n\\t\\tuint256 lastUpdatedTime;\\n\\t}\\n\\n\\tenum EligibilityModes {\\n\\t\\t// check on all rToken transfers\\n\\t\\tFULL,\\n\\t\\t// only check on Claim\\n\\t\\tLIMITED,\\n\\t\\t// 0 eligibility functions run\\n\\t\\tDISABLED\\n\\t}\\n\\n\\t/********************** Events ***********************/\\n\\t// Emitted when rewardPerSecond is updated\\n\\tevent RewardsPerSecondUpdated(uint256 indexed rewardsPerSecond, bool persist);\\n\\n\\tevent BalanceUpdated(address indexed token, address indexed user, uint256 balance, uint256 totalSupply);\\n\\n\\tevent EmissionScheduleAppended(uint256[] startTimeOffsets, uint256[] rewardsPerSeconds);\\n\\n\\tevent ChefReserveLow(uint256 indexed _balance);\\n\\n\\tevent Disqualified(address indexed user);\\n\\n\\tevent OnwardIncentivesUpdated(address indexed _token, IOnwardIncentivesController _incentives);\\n\\n\\tevent BountyManagerUpdated(address indexed _bountyManager);\\n\\n\\tevent EligibilityModeUpdated(EligibilityModes indexed _newVal);\\n\\n\\tevent BatchAllocPointsUpdated(address[] _tokens, uint256[] _allocPoints);\\n\\n\\tevent AuthorizedContractUpdated(address _contract, bool _authorized);\\n\\n\\tevent RewardDeposit(uint256 indexed _amount);\\n\\n\\t/********************** Errors ***********************/\\n\\terror AddressZero();\\n\\n\\terror UnknownPool();\\n\\n\\terror PoolExists();\\n\\n\\terror AlreadyStarted();\\n\\n\\terror NotAllowed();\\n\\n\\terror ArrayLengthMismatch();\\n\\n\\terror NotAscending();\\n\\n\\terror ExceedsMaxInt();\\n\\n\\terror InvalidStart();\\n\\n\\terror InvalidRToken();\\n\\n\\terror InsufficientPermission();\\n\\n\\terror AuthorizationAlreadySet();\\n\\n\\terror NotMFD();\\n\\n\\terror NotWhitelisted();\\n\\n\\terror BountyOnly();\\n\\n\\terror NotEligible();\\n\\n\\terror EligibleRequired();\\n\\n\\terror NotRTokenOrMfd();\\n\\n\\terror OutOfRewards();\\n\\n\\terror NothingToVest();\\n\\n\\terror DuplicateSchedule();\\n\\n\\terror ValueZero();\\n\\n\\t// multiplier for reward calc\\n\\tuint256 private constant ACC_REWARD_PRECISION = 1e12;\\n\\n\\t// Data about the future reward rates. emissionSchedule stored in chronological order,\\n\\t// whenever the duration since the start timestamp exceeds the next timestamp offset a new\\n\\t// reward rate is applied.\\n\\tEmissionPoint[] public emissionSchedule;\\n\\n\\t// If true, keep this new reward rate indefinitely\\n\\t// If false, keep this reward rate until the next scheduled block offset, then return to the schedule.\\n\\tbool public persistRewardsPerSecond;\\n\\n\\t/********************** Emission Info ***********************/\\n\\n\\t// Array of tokens for reward\\n\\taddress[] public registeredTokens;\\n\\n\\t// Current reward per second\\n\\tuint256 public rewardsPerSecond;\\n\\n\\t// last RPS, used during refill after reserve empty\\n\\tuint256 public lastRPS;\\n\\n\\t// Index in emission schedule which the last rewardsPerSeconds was used\\n\\t// only used for scheduled rewards\\n\\tuint256 public emissionScheduleIndex;\\n\\n\\t// Info of each pool.\\n\\tmapping(address => PoolInfo) public poolInfo;\\n\\tmapping(address => bool) private validRTokens;\\n\\n\\t// Total allocation points. Must be the sum of all allocation points in all pools.\\n\\tuint256 public totalAllocPoint;\\n\\n\\t// token => user => Info of each user that stakes LP tokens.\\n\\tmapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n\\t// user => base claimable balance\\n\\tmapping(address => uint256) public userBaseClaimable;\\n\\n\\t// MFD, bounties, AC\\n\\tmapping(address => bool) public eligibilityExempt;\\n\\n\\t// The block number when reward mining starts.\\n\\tuint256 public startTime;\\n\\n\\t// Option for eligibility\\n\\tEligibilityModes public eligibilityMode;\\n\\n\\t// Address for PoolConfigurator\\n\\taddress public poolConfigurator;\\n\\n\\t// Amount of deposited rewards\\n\\tuint256 public depositedRewards;\\n\\n\\t// Amount of accumulated rewards\\n\\tuint256 public accountedRewards;\\n\\n\\t// Timestamp when all pools updated\\n\\tuint256 public lastAllPoolUpdate;\\n\\n\\t// MultiFeeDistribution contract\\n\\tIMultiFeeDistribution public mfd;\\n\\n\\t// Eligiblity Data Provider contract\\n\\tIEligibilityDataProvider public eligibleDataProvider;\\n\\n\\t// Bounty Manager contract\\n\\taddress public bountyManager;\\n\\n\\t// Info of reward emission end time\\n\\tEndingTime public endingTime;\\n\\n\\t// Contracts that are authorized to handle r/vdToken actions without triggering elgiibility checks\\n\\tmapping(address => bool) public authorizedContracts;\\n\\n\\t// Mapping of addresses that are whitelisted to perform\\n\\tmapping(address => bool) public whitelist;\\n\\t// Flag to quickly enable/disable whitelisting\\n\\tbool public whitelistActive;\\n\\n\\t// The one and only RDNT token\\n\\taddress public rdntToken;\\n\\n\\tmodifier isWhitelisted() {\\n\\t\\tif (whitelistActive) {\\n\\t\\t\\tif (!whitelist[msg.sender] && msg.sender != address(this)) revert NotWhitelisted();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _poolConfigurator Pool configurator address\\n\\t * @param _eligibleDataProvider Eligibility Data provider address\\n\\t * @param _mfd MultiFeeDistribution contract\\n\\t * @param _rewardsPerSecond RPS\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _poolConfigurator,\\n\\t\\tIEligibilityDataProvider _eligibleDataProvider,\\n\\t\\tIMultiFeeDistribution _mfd,\\n\\t\\tuint256 _rewardsPerSecond,\\n\\t\\taddress _rdntToken\\n\\t) public initializer {\\n\\t\\tif (_poolConfigurator == address(0)) revert AddressZero();\\n\\t\\tif (_rdntToken == address(0)) revert AddressZero();\\n\\t\\tif (address(_eligibleDataProvider) == address(0)) revert AddressZero();\\n\\t\\tif (address(_mfd) == address(0)) revert AddressZero();\\n\\n\\t\\t__Ownable_init();\\n\\t\\t__Pausable_init();\\n\\n\\t\\tpoolConfigurator = _poolConfigurator;\\n\\t\\teligibleDataProvider = _eligibleDataProvider;\\n\\t\\tmfd = _mfd;\\n\\t\\trdntToken = _rdntToken;\\n\\t\\trewardsPerSecond = _rewardsPerSecond;\\n\\t\\tpersistRewardsPerSecond = true;\\n\\n\\t\\teligibilityMode = EligibilityModes.FULL;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns length of reward pools.\\n\\t */\\n\\tfunction poolLength() public view returns (uint256) {\\n\\t\\treturn registeredTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets incentive controllers for custom token.\\n\\t * @param _token for reward pool\\n\\t * @param _incentives incentives contract address\\n\\t */\\n\\tfunction setOnwardIncentives(address _token, IOnwardIncentivesController _incentives) external onlyOwner {\\n\\t\\tPoolInfo storage pool = poolInfo[_token];\\n\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\t\\tpool.onwardIncentives = _incentives;\\n\\t\\temit OnwardIncentivesUpdated(_token, _incentives);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates bounty manager contract.\\n\\t * @param _bountyManager Bounty Manager contract.\\n\\t */\\n\\tfunction setBountyManager(address _bountyManager) external onlyOwner {\\n\\t\\tbountyManager = _bountyManager;\\n\\t\\temit BountyManagerUpdated(_bountyManager);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enable/Disable eligibility\\n\\t * @param _newVal New value.\\n\\t */\\n\\tfunction setEligibilityMode(EligibilityModes _newVal) external onlyOwner {\\n\\t\\teligibilityMode = _newVal;\\n\\t\\temit EligibilityModeUpdated(_newVal);\\n\\t}\\n\\n\\t/********************** Pool Setup + Admin ***********************/\\n\\n\\t/**\\n\\t * @dev Starts RDNT emission.\\n\\t */\\n\\tfunction start() public onlyOwner {\\n\\t\\tif (startTime != 0) revert AlreadyStarted();\\n\\t\\tstartTime = block.timestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add a new lp to the pool. Can only be called by the poolConfigurator.\\n\\t * @param _token for reward pool\\n\\t * @param _allocPoint allocation point of the pool\\n\\t */\\n\\tfunction addPool(address _token, uint256 _allocPoint) external {\\n\\t\\tif (msg.sender != poolConfigurator) revert NotAllowed();\\n\\t\\tif (poolInfo[_token].lastRewardTime != 0) revert PoolExists();\\n\\t\\t_updateEmissions();\\n\\t\\ttotalAllocPoint = totalAllocPoint + _allocPoint;\\n\\t\\tregisteredTokens.push(_token);\\n\\t\\tPoolInfo storage pool = poolInfo[_token];\\n\\t\\tpool.allocPoint = _allocPoint;\\n\\t\\tpool.lastRewardTime = block.timestamp;\\n\\t\\tpool.onwardIncentives = IOnwardIncentivesController(address(0));\\n\\t\\tvalidRTokens[_token] = true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Update the given pool's allocation point. Can only be called by the owner.\\n\\t * @param _tokens for reward pools\\n\\t * @param _allocPoints allocation points of the pools\\n\\t */\\n\\tfunction batchUpdateAllocPoint(address[] calldata _tokens, uint256[] calldata _allocPoints) external onlyOwner {\\n\\t\\tif (_tokens.length != _allocPoints.length) revert ArrayLengthMismatch();\\n\\t\\t_massUpdatePools();\\n\\t\\tuint256 _totalAllocPoint = totalAllocPoint;\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tPoolInfo storage pool = poolInfo[_tokens[i]];\\n\\t\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\t\\t\\t_totalAllocPoint = _totalAllocPoint - pool.allocPoint + _allocPoints[i];\\n\\t\\t\\tpool.allocPoint = _allocPoints[i];\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttotalAllocPoint = _totalAllocPoint;\\n\\t\\temit BatchAllocPointsUpdated(_tokens, _allocPoints);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets the reward per second to be distributed. Can only be called by the owner.\\n\\t * @dev Its decimals count is ACC_REWARD_PRECISION\\n\\t * @param _rewardsPerSecond The amount of reward to be distributed per second.\\n\\t * @param _persist true if RPS is fixed, otherwise RPS is by emission schedule.\\n\\t */\\n\\tfunction setRewardsPerSecond(uint256 _rewardsPerSecond, bool _persist) external onlyOwner {\\n\\t\\t_massUpdatePools();\\n\\t\\trewardsPerSecond = _rewardsPerSecond;\\n\\t\\tpersistRewardsPerSecond = _persist;\\n\\t\\temit RewardsPerSecondUpdated(_rewardsPerSecond, _persist);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates RPS.\\n\\t */\\n\\tfunction setScheduledRewardsPerSecond() internal {\\n\\t\\tif (!persistRewardsPerSecond) {\\n\\t\\t\\tuint256 length = emissionSchedule.length;\\n\\t\\t\\tuint256 i = emissionScheduleIndex;\\n\\t\\t\\tuint128 offset = uint128(block.timestamp - startTime);\\n\\t\\t\\tfor (; i < length && offset >= emissionSchedule[i].startTimeOffset; ) {\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (i > emissionScheduleIndex) {\\n\\t\\t\\t\\temissionScheduleIndex = i;\\n\\t\\t\\t\\t_massUpdatePools();\\n\\t\\t\\t\\trewardsPerSecond = uint256(emissionSchedule[i - 1].rewardsPerSecond);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Ensure that the specified time offset hasn't been registered already.\\n\\t * @param _startTimeOffset time offset\\n\\t * @return true if the specified time offset is already registered\\n\\t */\\n\\tfunction _checkDuplicateSchedule(uint256 _startTimeOffset) internal view returns (bool) {\\n\\t\\tuint256 length = emissionSchedule.length;\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\tif (emissionSchedule[i].startTimeOffset == _startTimeOffset) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates RDNT emission schedule.\\n\\t * @dev This appends the new offsets and RPS.\\n\\t * @param _startTimeOffsets Offsets array.\\n\\t * @param _rewardsPerSecond RPS array.\\n\\t */\\n\\tfunction setEmissionSchedule(\\n\\t\\tuint256[] calldata _startTimeOffsets,\\n\\t\\tuint256[] calldata _rewardsPerSecond\\n\\t) external onlyOwner {\\n\\t\\tuint256 length = _startTimeOffsets.length;\\n\\t\\tif (length <= 0 || length != _rewardsPerSecond.length) revert ArrayLengthMismatch();\\n\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\tif (i > 0) {\\n\\t\\t\\t\\tif (_startTimeOffsets[i - 1] > _startTimeOffsets[i]) revert NotAscending();\\n\\t\\t\\t}\\n\\t\\t\\tif (_startTimeOffsets[i] > type(uint128).max) revert ExceedsMaxInt();\\n\\t\\t\\tif (_rewardsPerSecond[i] > type(uint128).max) revert ExceedsMaxInt();\\n\\t\\t\\tif (_checkDuplicateSchedule(_startTimeOffsets[i])) revert DuplicateSchedule();\\n\\n\\t\\t\\tif (startTime > 0) {\\n\\t\\t\\t\\tif (_startTimeOffsets[i] < block.timestamp - startTime) revert InvalidStart();\\n\\t\\t\\t}\\n\\t\\t\\temissionSchedule.push(\\n\\t\\t\\t\\tEmissionPoint({\\n\\t\\t\\t\\t\\tstartTimeOffset: uint128(_startTimeOffsets[i]),\\n\\t\\t\\t\\t\\trewardsPerSecond: uint128(_rewardsPerSecond[i])\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit EmissionScheduleAppended(_startTimeOffsets, _rewardsPerSecond);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recover tokens in this contract. Callable by owner.\\n\\t * @param tokenAddress Token address for recover\\n\\t * @param tokenAmount Amount to recover\\n\\t */\\n\\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t\\t_recoverERC20(tokenAddress, tokenAmount);\\n\\t}\\n\\n\\t/********************** Pool State Changers ***********************/\\n\\n\\t/**\\n\\t * @dev Update emission params of CIC.\\n\\t */\\n\\tfunction _updateEmissions() internal {\\n\\t\\tif (block.timestamp > endingTime.estimatedTime) {\\n\\t\\t\\t_massUpdatePools();\\n\\t\\t\\tlastRPS = rewardsPerSecond;\\n\\t\\t\\trewardsPerSecond = 0;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tsetScheduledRewardsPerSecond();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Update reward variables for all pools.\\n\\t */\\n\\tfunction _massUpdatePools() internal {\\n\\t\\tuint256 totalAP = totalAllocPoint;\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\t_updatePool(poolInfo[registeredTokens[i]], totalAP);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlastAllPoolUpdate = block.timestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Update reward variables of the given pool to be up-to-date.\\n\\t * @param pool pool info\\n\\t * @param _totalAllocPoint allocation point of the pool\\n\\t */\\n\\tfunction _updatePool(PoolInfo storage pool, uint256 _totalAllocPoint) internal {\\n\\t\\tuint256 timestamp = block.timestamp;\\n\\t\\tuint256 endReward = endingTime.estimatedTime;\\n\\t\\tif (endReward <= timestamp) {\\n\\t\\t\\ttimestamp = endReward;\\n\\t\\t}\\n\\t\\tif (timestamp <= pool.lastRewardTime) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t(uint256 reward, uint256 newAccRewardPerShare) = _newRewards(pool, _totalAllocPoint);\\n\\t\\taccountedRewards = accountedRewards + reward;\\n\\t\\tpool.accRewardPerShare = pool.accRewardPerShare + newAccRewardPerShare;\\n\\t\\tpool.lastRewardTime = timestamp;\\n\\t}\\n\\n\\t/********************** Emission Calc + Transfer ***********************/\\n\\n\\t/**\\n\\t * @notice Pending rewards of a user.\\n\\t * @param _user address for claim\\n\\t * @param _tokens array of reward-bearing tokens\\n\\t * @return claimable rewards array\\n\\t */\\n\\tfunction pendingRewards(address _user, address[] memory _tokens) public view returns (uint256[] memory) {\\n\\t\\tuint256[] memory claimable = new uint256[](_tokens.length);\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\taddress token = _tokens[i];\\n\\t\\t\\tPoolInfo storage pool = poolInfo[token];\\n\\t\\t\\tUserInfo storage user = userInfo[token][_user];\\n\\t\\t\\tuint256 accRewardPerShare = pool.accRewardPerShare;\\n\\t\\t\\tif (block.timestamp > pool.lastRewardTime) {\\n\\t\\t\\t\\t(, uint256 newAccRewardPerShare) = _newRewards(pool, totalAllocPoint);\\n\\t\\t\\t\\taccRewardPerShare = accRewardPerShare + newAccRewardPerShare;\\n\\t\\t\\t}\\n\\t\\t\\tclaimable[i] = (user.amount * accRewardPerShare) / ACC_REWARD_PRECISION - user.rewardDebt;\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn claimable;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim rewards. They are vested into MFD.\\n\\t * @param _user address for claim\\n\\t * @param _tokens array of reward-bearing tokens\\n\\t */\\n\\tfunction claim(address _user, address[] memory _tokens) public whenNotPaused {\\n\\t\\tif (eligibilityMode != EligibilityModes.DISABLED) {\\n\\t\\t\\tif (!eligibleDataProvider.isEligibleForRewards(_user)) revert EligibleRequired();\\n\\t\\t\\tcheckAndProcessEligibility(_user, true, true);\\n\\t\\t}\\n\\n\\t\\t_updateEmissions();\\n\\n\\t\\tuint256 currentTimestamp = block.timestamp;\\n\\n\\t\\tuint256 pending = userBaseClaimable[_user];\\n\\t\\tuserBaseClaimable[_user] = 0;\\n\\t\\tuint256 _totalAllocPoint = totalAllocPoint;\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tif (!validRTokens[_tokens[i]]) revert InvalidRToken();\\n\\t\\t\\tPoolInfo storage pool = poolInfo[_tokens[i]];\\n\\t\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\t\\t\\t_updatePool(pool, _totalAllocPoint);\\n\\t\\t\\tUserInfo storage user = userInfo[_tokens[i]][_user];\\n\\t\\t\\tuint256 rewardDebt = (user.amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\t\\t\\tpending = pending + rewardDebt - user.rewardDebt;\\n\\t\\t\\tuser.rewardDebt = rewardDebt;\\n\\t\\t\\tuser.lastClaimTime = currentTimestamp;\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_vestTokens(_user, pending);\\n\\n\\t\\teligibleDataProvider.updatePrice();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Vest tokens to MFD.\\n\\t * @param _user address to receive\\n\\t * @param _amount to vest\\n\\t */\\n\\tfunction _vestTokens(address _user, uint256 _amount) internal {\\n\\t\\tif (_amount == 0) revert NothingToVest();\\n\\t\\tIMultiFeeDistribution mfd_ = mfd;\\n\\t\\t_sendRadiant(address(mfd_), _amount);\\n\\t\\tmfd_.vestTokens(_user, _amount, true);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Exempt a contract from eligibility check.\\n\\t * @dev Can be called by owner or authorized contracts\\n\\t * @param _contract address to exempt\\n\\t * @param _value flag for exempt\\n\\t */\\n\\tfunction setEligibilityExempt(address _contract, bool _value) public {\\n\\t\\tif (msg.sender != owner() && !authorizedContracts[msg.sender]) revert InsufficientPermission();\\n\\t\\teligibilityExempt[_contract] = _value;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates whether the provided address is authorized to call setEligibilityExempt(), only callable by owner.\\n\\t * @param _address address of the user or contract whose authorization level is being changed\\n\\t */\\n\\tfunction setContractAuthorization(address _address, bool _authorize) external onlyOwner {\\n\\t\\tif (authorizedContracts[_address] == _authorize) revert AuthorizationAlreadySet();\\n\\t\\tauthorizedContracts[_address] = _authorize;\\n\\t\\temit AuthorizedContractUpdated(_address, _authorize);\\n\\t}\\n\\n\\t/********************** Eligibility + Disqualification ***********************/\\n\\n\\t/**\\n\\t * @notice `after` Hook for deposit and borrow update.\\n\\t * @dev important! eligible status can be updated here\\n\\t * @param _user address\\n\\t * @param _balance balance of token\\n\\t * @param _totalSupply total supply of the token\\n\\t */\\n\\tfunction handleActionAfter(address _user, uint256 _balance, uint256 _totalSupply) external {\\n\\t\\tif (!validRTokens[msg.sender] && msg.sender != address(mfd)) revert NotRTokenOrMfd();\\n\\n\\t\\tif (_user == address(mfd) || eligibilityExempt[_user]) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (eligibilityMode == EligibilityModes.FULL) {\\n\\t\\t\\tbool lastEligibleStatus = eligibleDataProvider.lastEligibleStatus(_user);\\n\\t\\t\\tbool isCurrentlyEligible = eligibleDataProvider.refresh(_user);\\n\\t\\t\\tif (isCurrentlyEligible) {\\n\\t\\t\\t\\tif (lastEligibleStatus) {\\n\\t\\t\\t\\t\\t_handleActionAfterForToken(msg.sender, _user, _balance, _totalSupply);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t_updateRegisteredBalance(_user);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_processEligibility(_user, isCurrentlyEligible, true);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t_handleActionAfterForToken(msg.sender, _user, _balance, _totalSupply);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice `after` Hook for deposit and borrow update.\\n\\t * @dev important! eligible status can be updated here\\n\\t * @param _token address\\n\\t * @param _user address\\n\\t * @param _balance new amount\\n\\t * @param _totalSupply total supply of the token\\n\\t */\\n\\tfunction _handleActionAfterForToken(\\n\\t\\taddress _token,\\n\\t\\taddress _user,\\n\\t\\tuint256 _balance,\\n\\t\\tuint256 _totalSupply\\n\\t) internal {\\n\\t\\tPoolInfo storage pool = poolInfo[_token];\\n\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\t\\t// Although we would want the pools to be as up to date as possible when users\\n\\t\\t// transfer rTokens or dTokens, updating all pools on every r-/d-Token interaction would be too gas intensive.\\n\\t\\t// _updateEmissions();\\n\\t\\t_updatePool(pool, totalAllocPoint);\\n\\t\\tUserInfo storage user = userInfo[_token][_user];\\n\\t\\tuint256 amount = user.amount;\\n\\t\\tuint256 accRewardPerShare = pool.accRewardPerShare;\\n\\t\\tif (amount != 0) {\\n\\t\\t\\tuint256 pending = (amount * accRewardPerShare) / ACC_REWARD_PRECISION - user.rewardDebt;\\n\\t\\t\\tif (pending != 0) {\\n\\t\\t\\t\\tuserBaseClaimable[_user] = userBaseClaimable[_user] + pending;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpool.totalSupply = pool.totalSupply - user.amount;\\n\\t\\tuser.amount = _balance;\\n\\t\\tuser.rewardDebt = (_balance * accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\t\\tpool.totalSupply = pool.totalSupply + _balance;\\n\\t\\tif (pool.onwardIncentives != IOnwardIncentivesController(address(0))) {\\n\\t\\t\\tpool.onwardIncentives.handleAction(_token, _user, _balance, _totalSupply);\\n\\t\\t}\\n\\n\\t\\temit BalanceUpdated(_token, _user, _balance, _totalSupply);\\n\\t}\\n\\n\\t/**\\n\\t * @notice `before` Hook for deposit and borrow update.\\n\\t * @param _user address\\n\\t */\\n\\tfunction handleActionBefore(address _user) external {}\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts before locking or unlocking happens\\n\\t * @param _user address\\n\\t */\\n\\tfunction beforeLockUpdate(address _user) external {}\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param _user address\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external {\\n\\t\\tif (msg.sender != address(mfd)) revert NotMFD();\\n\\t\\tif (eligibilityMode == EligibilityModes.FULL) {\\n\\t\\t\\tbool isCurrentlyEligible = eligibleDataProvider.refresh(_user);\\n\\t\\t\\tif (isCurrentlyEligible) {\\n\\t\\t\\t\\t_updateRegisteredBalance(_user);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_processEligibility(_user, isCurrentlyEligible, true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update balance if there are any unregistered.\\n\\t * @param _user address of the user whose balances will be updated\\n\\t */\\n\\tfunction _updateRegisteredBalance(address _user) internal {\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tuint256 newBal = IERC20(registeredTokens[i]).balanceOf(_user);\\n\\t\\t\\tuint256 registeredBal = userInfo[registeredTokens[i]][_user].amount;\\n\\t\\t\\tif (newBal != 0 && newBal != registeredBal) {\\n\\t\\t\\t\\t_handleActionAfterForToken(\\n\\t\\t\\t\\t\\tregisteredTokens[i],\\n\\t\\t\\t\\t\\t_user,\\n\\t\\t\\t\\t\\tnewBal,\\n\\t\\t\\t\\t\\tpoolInfo[registeredTokens[i]].totalSupply + newBal - registeredBal\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/********************** Eligibility + Disqualification ***********************/\\n\\n\\t/**\\n\\t * @dev Returns true if `_user` has some reward eligible tokens.\\n\\t * @param _user address of recipient\\n\\t */\\n\\tfunction hasEligibleDeposits(address _user) public view returns (bool hasDeposits) {\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tif (userInfo[registeredTokens[i]][_user].amount != 0) {\\n\\t\\t\\t\\thasDeposits = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Stop emissions if there's any new DQ.\\n\\t * @param _user address of recipient\\n\\t * @param _isEligible user's eligible status\\n\\t * @param _execute true if it's actual execution\\n\\t * @return issueBaseBounty true for base bounty\\n\\t */\\n\\tfunction _processEligibility(\\n\\t\\taddress _user,\\n\\t\\tbool _isEligible,\\n\\t\\tbool _execute\\n\\t) internal returns (bool issueBaseBounty) {\\n\\t\\tbool hasEligDeposits = hasEligibleDeposits(_user);\\n\\t\\tuint256 lastDqTime = eligibleDataProvider.getDqTime(_user);\\n\\t\\tbool alreadyDqd = lastDqTime != 0;\\n\\n\\t\\tif (!_isEligible && hasEligDeposits && !alreadyDqd) {\\n\\t\\t\\tissueBaseBounty = true;\\n\\t\\t}\\n\\t\\tif (_execute && issueBaseBounty) {\\n\\t\\t\\tstopEmissionsFor(_user);\\n\\t\\t\\temit Disqualified(_user);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check eligibility of the user\\n\\t * @dev Stop emissions if there's any DQ.\\n\\t * @param _user address of recipient\\n\\t * @param _execute true if it's actual execution\\n\\t * @param _refresh true if needs to refresh user's eligible status\\n\\t * @return issueBaseBounty true for base bounty\\n\\t */\\n\\tfunction checkAndProcessEligibility(\\n\\t\\taddress _user,\\n\\t\\tbool _execute,\\n\\t\\tbool _refresh\\n\\t) internal returns (bool issueBaseBounty) {\\n\\t\\tbool isEligible;\\n\\t\\tif (_refresh && _execute) {\\n\\t\\t\\tisEligible = eligibleDataProvider.refresh(_user);\\n\\t\\t} else {\\n\\t\\t\\tisEligible = eligibleDataProvider.isEligibleForRewards(_user);\\n\\t\\t}\\n\\t\\tissueBaseBounty = _processEligibility(_user, isEligible, _execute);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim bounty\\n\\t * @param _user address of recipient\\n\\t * @param _execute true if it's actual execution\\n\\t * @return issueBaseBounty true for base bounty\\n\\t */\\n\\tfunction claimBounty(address _user, bool _execute) public returns (bool issueBaseBounty) {\\n\\t\\tif (msg.sender != address(bountyManager)) revert BountyOnly();\\n\\t\\tissueBaseBounty = checkAndProcessEligibility(_user, _execute, true);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Stop RDNT emissions for specific users\\n\\t * @param _user address of recipient\\n\\t */\\n\\tfunction stopEmissionsFor(address _user) internal {\\n\\t\\tif (eligibilityMode == EligibilityModes.DISABLED) revert NotEligible();\\n\\t\\t// lastEligibleStatus will be fresh from refresh before this call\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\taddress token = registeredTokens[i];\\n\\t\\t\\tPoolInfo storage pool = poolInfo[token];\\n\\t\\t\\tUserInfo storage user = userInfo[token][_user];\\n\\n\\t\\t\\tif (user.amount != 0) {\\n\\t\\t\\t\\t_handleActionAfterForToken(token, _user, 0, pool.totalSupply - user.amount);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teligibleDataProvider.setDqTime(_user, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice function to stop user emissions\\n\\t * @param _user address of user to stop emissions for\\n\\t */\\n\\tfunction manualStopEmissionsFor(address _user, address[] memory _tokens) public isWhitelisted {\\n\\t\\tif (_user == address(0)) revert AddressZero();\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\taddress token = _tokens[i];\\n\\t\\t\\tPoolInfo storage pool = poolInfo[token];\\n\\t\\t\\tUserInfo storage user = userInfo[token][_user];\\n\\n\\t\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\n\\t\\t\\tuint256 amount = user.amount;\\n\\t\\t\\tif (amount != 0) {\\n\\t\\t\\t\\tuint256 accRewardPerShare = pool.accRewardPerShare;\\n\\t\\t\\t\\tuint256 pending = (amount * accRewardPerShare) / ACC_REWARD_PRECISION - user.rewardDebt;\\n\\t\\t\\t\\tif (pending != 0) {\\n\\t\\t\\t\\t\\tuserBaseClaimable[_user] = userBaseClaimable[_user] + pending;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tuint256 newTotalSupply = pool.totalSupply - amount;\\n\\t\\t\\t\\tuser.amount = 0;\\n\\t\\t\\t\\tuser.rewardDebt = 0;\\n\\t\\t\\t\\tpool.totalSupply = newTotalSupply;\\n\\n\\t\\t\\t\\temit BalanceUpdated(token, _user, 0, newTotalSupply);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teligibleDataProvider.setDqTime(_user, block.timestamp);\\n\\t}\\n\\n\\tfunction manualStopAllEmissionsFor(address _user) external isWhitelisted {\\n\\t\\tmanualStopEmissionsFor(_user, registeredTokens);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Send RNDT rewards to user.\\n\\t * @param _user address of recipient\\n\\t * @param _amount of RDNT\\n\\t */\\n\\tfunction _sendRadiant(address _user, uint256 _amount) internal {\\n\\t\\tif (_amount == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\taddress rdntToken_ = rdntToken;\\n\\t\\tuint256 chefReserve = IERC20(rdntToken_).balanceOf(address(this));\\n\\t\\tif (_amount > chefReserve) {\\n\\t\\t\\trevert OutOfRewards();\\n\\t\\t} else {\\n\\t\\t\\tIERC20(rdntToken_).safeTransfer(_user, _amount);\\n\\t\\t}\\n\\t}\\n\\n\\t/********************** RDNT Reserve Management ***********************/\\n\\n\\t/**\\n\\t * @notice Setting the estimated time at which the CIC will run out of rewards\\n\\t * @param _newEndingRewardTime the time at which the CIC will run out of rewards\\n\\t */\\n\\tfunction setEndingRewardTime(uint256 _newEndingRewardTime) external isWhitelisted {\\n\\t\\tif (_newEndingRewardTime == 0) revert ValueZero();\\n\\t\\tendingTime.lastUpdatedTime = block.timestamp;\\n\\t\\tendingTime.estimatedTime = _newEndingRewardTime;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Ending reward distribution time.\\n\\t * @dev meant as a utility function for keepers\\n\\t */\\n\\tfunction endRewardTime() public view returns (uint256) {\\n\\t\\tuint256 unclaimedRewards = availableRewards();\\n\\t\\tuint256 extra = 0;\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tPoolInfo storage pool = poolInfo[registeredTokens[i]];\\n\\n\\t\\t\\tif (pool.lastRewardTime > lastAllPoolUpdate) {\\n\\t\\t\\t\\textra +=\\n\\t\\t\\t\\t\\t((pool.lastRewardTime - lastAllPoolUpdate) * pool.allocPoint * rewardsPerSecond) /\\n\\t\\t\\t\\t\\ttotalAllocPoint;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (rewardsPerSecond == 0) {\\n\\t\\t\\treturn type(uint256).max;\\n\\t\\t} else {\\n\\t\\t\\treturn (unclaimedRewards + extra) / rewardsPerSecond + lastAllPoolUpdate;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add new rewards.\\n\\t * @dev Only callable by owner.\\n\\t * @param _amount new deposit amount\\n\\t */\\n\\tfunction registerRewardDeposit(uint256 _amount) external onlyOwner {\\n\\t\\tdepositedRewards = depositedRewards + _amount;\\n\\t\\t_massUpdatePools();\\n\\t\\tif (rewardsPerSecond == 0 && lastRPS > 0) {\\n\\t\\t\\trewardsPerSecond = lastRPS;\\n\\t\\t}\\n\\t\\temit RewardDeposit(_amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Available reward amount for future distribution.\\n\\t * @dev This value is equal to `depositedRewards` - `accountedRewards`.\\n\\t * @return amount available\\n\\t */\\n\\tfunction availableRewards() internal view returns (uint256 amount) {\\n\\t\\treturn depositedRewards - accountedRewards;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim rewards entitled to all registered tokens.\\n\\t * @param _user address of the user\\n\\t */\\n\\tfunction claimAll(address _user) external {\\n\\t\\tclaim(_user, registeredTokens);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sum of all pending RDNT rewards.\\n\\t * @param _user address of the user\\n\\t * @return pending reward amount\\n\\t */\\n\\tfunction allPendingRewards(address _user) public view returns (uint256 pending) {\\n\\t\\tpending = userBaseClaimable[_user];\\n\\t\\tuint256[] memory claimable = pendingRewards(_user, registeredTokens);\\n\\t\\tuint256 length = claimable.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tpending += claimable[i];\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pause the claim operations.\\n\\t */\\n\\tfunction pause() external onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unpause the claim operations.\\n\\t */\\n\\tfunction unpause() external onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns new rewards since last reward time.\\n\\t * @param pool pool info\\n\\t * @param _totalAllocPoint allocation point of the pool\\n\\t */\\n\\tfunction _newRewards(\\n\\t\\tPoolInfo memory pool,\\n\\t\\tuint256 _totalAllocPoint\\n\\t) internal view returns (uint256 newReward, uint256 newAccRewardPerShare) {\\n\\t\\tuint256 lpSupply = pool.totalSupply;\\n\\t\\tif (lpSupply > 0) {\\n\\t\\t\\tuint256 duration = block.timestamp - pool.lastRewardTime;\\n\\t\\t\\tuint256 rawReward = duration * rewardsPerSecond;\\n\\n\\t\\t\\tuint256 rewards = availableRewards();\\n\\t\\t\\tif (rewards < rawReward) {\\n\\t\\t\\t\\trawReward = rewards;\\n\\t\\t\\t}\\n\\t\\t\\tnewReward = (rawReward * pool.allocPoint) / _totalAllocPoint;\\n\\t\\t\\tnewAccRewardPerShare = (newReward * ACC_REWARD_PRECISION) / lpSupply;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add new address to whitelist.\\n\\t * @param user address\\n\\t * @param status for whitelist\\n\\t */\\n\\tfunction setAddressWLstatus(address user, bool status) external onlyOwner {\\n\\t\\twhitelist[user] = status;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Toggle whitelist to be either active or inactive\\n\\t */\\n\\tfunction toggleWhitelist() external onlyOwner {\\n\\t\\twhitelistActive = !whitelistActive;\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuthorizationAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BountyOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateSchedule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EligibleRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxInt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAscending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEligible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMFD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRTokenOrMfd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToVest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"AuthorizedContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"BatchAllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bountyManager\",\"type\":\"address\"}],\"name\":\"BountyManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"ChefReserveLow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Disqualified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ChefIncentivesController.EligibilityModes\",\"name\":\"_newVal\",\"type\":\"uint8\"}],\"name\":\"EligibilityModeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"startTimeOffsets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardsPerSeconds\",\"type\":\"uint256[]\"}],\"name\":\"EmissionScheduleAppended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentives\",\"type\":\"address\"}],\"name\":\"OnwardIncentivesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardsPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"persist\",\"type\":\"bool\"}],\"name\":\"RewardsPerSecondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"afterLockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"batchUpdateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"beforeLockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"claimBounty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"issueBaseBounty\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligibilityExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityMode\",\"outputs\":[{\"internalType\":\"enum ChefIncentivesController.EligibilityModes\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDataProvider\",\"outputs\":[{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emissionSchedule\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"startTimeOffset\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsPerSecond\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionScheduleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"handleActionAfter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"handleActionBefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasEligibleDeposits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasDeposits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolConfigurator\",\"type\":\"address\"},{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"_eligibleDataProvider\",\"type\":\"address\"},{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"_mfd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rdntToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAllPoolUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"manualStopAllEmissionsFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"manualStopEmissionsFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mfd\",\"outputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"persistRewardsPerSecond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"onwardIncentives\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rdntToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"registerRewardDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAddressWLstatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bountyManager\",\"type\":\"address\"}],\"name\":\"setBountyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorize\",\"type\":\"bool\"}],\"name\":\"setContractAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setEligibilityExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ChefIncentivesController.EligibilityModes\",\"name\":\"_newVal\",\"type\":\"uint8\"}],\"name\":\"setEligibilityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_startTimeOffsets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256[]\"}],\"name\":\"setEmissionSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEndingRewardTime\",\"type\":\"uint256\"}],\"name\":\"setEndingRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentives\",\"type\":\"address\"}],\"name\":\"setOnwardIncentives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_persist\",\"type\":\"bool\"}],\"name\":\"setRewardsPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBaseClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChefIncentivesController", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}