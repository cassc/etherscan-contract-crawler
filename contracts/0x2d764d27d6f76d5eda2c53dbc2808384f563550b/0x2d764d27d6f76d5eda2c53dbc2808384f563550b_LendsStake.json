{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LendsStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract LendsStake is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event Stake(address indexed wallet, uint256 amount, uint256 date);\\r\\n    event Withdraw(address indexed wallet, uint256 amount, uint256 date);\\r\\n    event Claimed(\\r\\n        address indexed wallet,\\r\\n        address indexed rewardToken,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event RewardTokenChanged(\\r\\n        address indexed oldRewardToken,\\r\\n        uint256 returnedAmount,\\r\\n        address indexed newRewardToken\\r\\n    );\\r\\n    event GovernanceTokenChanged(\\r\\n        address indexed oldGovernanceToken,\\r\\n        address indexed newGovernanceToken\\r\\n    );\\r\\n    event LockTimePeriodChanged(uint48 lockTimePeriod);\\r\\n    event StakeRewardFactorChanged(uint256 stakeRewardFactor);\\r\\n    event StakeRewardEndTimeChanged(uint48 stakeRewardEndTime);\\r\\n    event RewardsBurned(address indexed staker, uint256 amount);\\r\\n    event ERC20TokensRemoved(\\r\\n        address indexed tokenAddress,\\r\\n        address indexed receiver,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    uint48 public constant MAX_TIME = type(uint48).max; // = 2^48 - 1\\r\\n\\r\\n    struct User {\\r\\n        uint48 stakeTime;\\r\\n        uint48 unlockTime;\\r\\n        uint160 stakeAmount;\\r\\n        uint256 accumulatedRewards;\\r\\n    }\\r\\n\\r\\n    mapping(address => User) public userMap;\\r\\n\\r\\n    uint256 public tokenTotalStaked; // sum of all staked tokens\\r\\n\\r\\n    address public immutable stakingToken; // address of token which can be staked into this contract\\r\\n    address public governanceToken; // address of governance token\\r\\n    address public rewardToken; // address of reward token\\r\\n\\r\\n    /**\\r\\n     * Using block.timestamp instead of block.number for reward calculation\\r\\n     * 1) Easier to handle for users\\r\\n     * 2) Should result in same rewards across different chain with different block times\\r\\n     * 3) \\\"The current block timestamp must be strictly larger than the timestamp of the last block, ...\\r\\n     *     but the only guarantee is that it will be somewhere between the timestamps ...\\r\\n     *     of two consecutive blocks in the canonical chain.\\\"\\r\\n     *    https://docs.soliditylang.org/en/v0.7.6/cheatsheet.html?highlight=block.timestamp#global-variables\\r\\n     */\\r\\n\\r\\n    uint48 public lockTimePeriod; // time in seconds a user has to wait after calling unlock until staked token can be withdrawn\\r\\n    uint48 public stakeRewardEndTime; // unix time in seconds when the reward scheme will end\\r\\n    uint256 public stakeRewardFactor; // time in seconds * amount of staked token to receive 1 reward token\\r\\n\\r\\n    constructor(\\r\\n        address _stakingToken,\\r\\n        address _governanceToken,\\r\\n        address _rewardToken,\\r\\n        uint48 _lockTimePeriod\\r\\n    ) Ownable(msg.sender) {\\r\\n        require(_stakingToken != address(0), \\\"stakingToken.address == 0\\\");\\r\\n        require(_governanceToken != address(0), \\\"governanceToken.address == 0\\\");\\r\\n        require(_rewardToken != address(0), \\\"rewardToken.address == 0\\\");\\r\\n\\r\\n        require(_lockTimePeriod < 366 days, \\\"lockTimePeriod >= 366 days\\\");\\r\\n\\r\\n        stakingToken = _stakingToken;\\r\\n        governanceToken = _governanceToken;\\r\\n        rewardToken = _rewardToken;\\r\\n\\r\\n        lockTimePeriod = _lockTimePeriod;\\r\\n        // set some defaults\\r\\n        stakeRewardFactor = 2439 * 1 days; // default : a user has to stake 2439 token for 1 day to receive 1 reward token i.e. 15% APY\\r\\n        stakeRewardEndTime = uint48(block.timestamp + 366 days); // default : reward scheme ends in 1 year\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * based on OpenZeppelin SafeCast v4.3\\r\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.3/contracts/utils/math/SafeCast.sol\\r\\n     */\\r\\n\\r\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\r\\n        require(value <= type(uint48).max, \\\"value doesn't fit in 48 bits\\\");\\r\\n        return uint48(value);\\r\\n    }\\r\\n\\r\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\r\\n        require(value <= type(uint160).max, \\\"value doesn't fit in 160 bits\\\");\\r\\n        return uint160(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * External API functions\\r\\n     */\\r\\n\\r\\n    function stakeTime(\\r\\n        address _staker\\r\\n    ) external view returns (uint48 dateTime) {\\r\\n        return userMap[_staker].stakeTime;\\r\\n    }\\r\\n\\r\\n    function stakeAmount(\\r\\n        address _staker\\r\\n    ) external view returns (uint256 balance) {\\r\\n        return userMap[_staker].stakeAmount;\\r\\n    }\\r\\n\\r\\n    // redundant with stakeAmount() for compatibility\\r\\n    function balanceOf(\\r\\n        address _staker\\r\\n    ) external view returns (uint256 balance) {\\r\\n        return userMap[_staker].stakeAmount;\\r\\n    }\\r\\n\\r\\n    function userAccumulatedRewards(\\r\\n        address _staker\\r\\n    ) external view returns (uint256 rewards) {\\r\\n        return userMap[_staker].accumulatedRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev return unix epoch time when staked tokens will be unlocked\\r\\n     * @dev return MAX_INT_UINT48 = 2**48-1 if user has no token staked\\r\\n     * @dev this always allows an easy check with : require(block.timestamp > getUnlockTime(account));\\r\\n     * @return unlockTime unix epoch time in seconds\\r\\n     */\\r\\n    function getUnlockTime(\\r\\n        address _staker\\r\\n    ) public view returns (uint48 unlockTime) {\\r\\n        return\\r\\n            userMap[_staker].stakeAmount > 0\\r\\n                ? userMap[_staker].unlockTime\\r\\n                : MAX_TIME;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return balance of reward tokens held by this contract\\r\\n     */\\r\\n    function getRewardTokenBalance() public view returns (uint256 balance) {\\r\\n        if (rewardToken == address(0)) return 0;\\r\\n        balance = IERC20(rewardToken).balanceOf(address(this));\\r\\n        if (stakingToken == rewardToken) {\\r\\n            balance -= tokenTotalStaked;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // onlyOwner --------------------------------------------------\\r\\n\\r\\n    /**\\r\\n     * @notice setting rewardToken to address(0) disables claim/mint\\r\\n     * @notice if there was a reward token set before, return remaining tokens to msg.sender/admin\\r\\n     * @param newRewardToken address\\r\\n     */\\r\\n    function setRewardToken(\\r\\n        address newRewardToken\\r\\n    ) external nonReentrant onlyOwner {\\r\\n        address oldRewardToken = rewardToken;\\r\\n        uint256 rewardBalance = getRewardTokenBalance(); // balance of oldRewardToken\\r\\n        if (rewardBalance > 0) {\\r\\n            IERC20(oldRewardToken).safeTransfer(msg.sender, rewardBalance);\\r\\n        }\\r\\n        rewardToken = newRewardToken;\\r\\n        emit RewardTokenChanged(oldRewardToken, rewardBalance, newRewardToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice setting governanceToken to address(0) disables staking/unstaking\\r\\n     * @param newGovernanceToken address\\r\\n     */\\r\\n    function setGovernanceToken(\\r\\n        address newGovernanceToken\\r\\n    ) external nonReentrant onlyOwner {\\r\\n        address oldGovernanceToken = governanceToken;\\r\\n        governanceToken = newGovernanceToken;\\r\\n        emit GovernanceTokenChanged(oldGovernanceToken, governanceToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set time a user has to wait after calling unlock until staked token can be withdrawn\\r\\n     * @param _lockTimePeriod time in seconds\\r\\n     */\\r\\n    function setLockTimePeriod(uint48 _lockTimePeriod) external onlyOwner {\\r\\n        lockTimePeriod = _lockTimePeriod;\\r\\n        emit LockTimePeriodChanged(_lockTimePeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice see calculateUserClaimableReward() docs\\r\\n     * @dev requires that reward token has the same decimals as stake token\\r\\n     * @param _stakeRewardFactor time in seconds * amount of staked token to receive 1 reward token\\r\\n     */\\r\\n    function setStakeRewardFactor(\\r\\n        uint256 _stakeRewardFactor\\r\\n    ) external onlyOwner {\\r\\n        stakeRewardFactor = _stakeRewardFactor;\\r\\n        emit StakeRewardFactorChanged(_stakeRewardFactor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice set block time when stake reward scheme will end\\r\\n     * @param _stakeRewardEndTime unix time in seconds\\r\\n     */\\r\\n    function setStakeRewardEndTime(\\r\\n        uint48 _stakeRewardEndTime\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            stakeRewardEndTime > block.timestamp,\\r\\n            \\\"time has to be in the future\\\"\\r\\n        );\\r\\n        stakeRewardEndTime = _stakeRewardEndTime;\\r\\n        emit StakeRewardEndTimeChanged(_stakeRewardEndTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * ADMIN_ROLE has to set BURNER_ROLE\\r\\n     * allows an external (lottery token sale) contract to substract rewards\\r\\n     */\\r\\n    function burnRewards(address _staker, uint256 _amount) external onlyOwner {\\r\\n        User storage user = _updateRewards(_staker);\\r\\n\\r\\n        if (_amount < user.accumulatedRewards) {\\r\\n            user.accumulatedRewards -= _amount; // safe\\r\\n        } else {\\r\\n            user.accumulatedRewards = 0; // burn at least all what's there\\r\\n        }\\r\\n        emit RewardsBurned(_staker, _amount);\\r\\n    }\\r\\n\\r\\n    /** msg.sender external view convenience functions *********************************/\\r\\n\\r\\n    function stakeAmount_msgSender() public view returns (uint256) {\\r\\n        return userMap[msg.sender].stakeAmount;\\r\\n    }\\r\\n\\r\\n    function stakeTime_msgSender() external view returns (uint48) {\\r\\n        return userMap[msg.sender].stakeTime;\\r\\n    }\\r\\n\\r\\n    function getUnlockTime_msgSender()\\r\\n        external\\r\\n        view\\r\\n        returns (uint48 unlockTime)\\r\\n    {\\r\\n        return getUnlockTime(msg.sender);\\r\\n    }\\r\\n\\r\\n    function userClaimableRewards_msgSender() external view returns (uint256) {\\r\\n        return userClaimableRewards(msg.sender);\\r\\n    }\\r\\n\\r\\n    function userAccumulatedRewards_msgSender()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return userMap[msg.sender].accumulatedRewards;\\r\\n    }\\r\\n\\r\\n    function userTotalRewards_msgSender() external view returns (uint256) {\\r\\n        return userTotalRewards(msg.sender);\\r\\n    }\\r\\n\\r\\n    function getEarnedRewardTokens_msgSender() external view returns (uint256) {\\r\\n        return getEarnedRewardTokens(msg.sender);\\r\\n    }\\r\\n\\r\\n    /** public external view functions (also used internally) **************************/\\r\\n\\r\\n    /**\\r\\n     * calculates unclaimed rewards\\r\\n     * unclaimed rewards = expired time since last stake/unstake transaction * current staked amount\\r\\n     *\\r\\n     * We have to cover 6 cases here :\\r\\n     * 1) block time < stake time < end time   : should never happen => error\\r\\n     * 2) block time < end time   < stake time : should never happen => error\\r\\n     * 3) end time   < block time < stake time : should never happen => error\\r\\n     * 4) end time   < stake time < block time : staked after reward period is over => no rewards\\r\\n     * 5) stake time < block time < end time   : end time in the future\\r\\n     * 6) stake time < end time   < block time : end time in the past & staked before\\r\\n     * @param _staker address\\r\\n     * @return claimableRewards = timePeriod * stakeAmount\\r\\n     */\\r\\n    function userClaimableRewards(\\r\\n        address _staker\\r\\n    ) public view returns (uint256) {\\r\\n        User storage user = userMap[_staker];\\r\\n        // case 1) 2) 3)\\r\\n        // stake time in the future - should never happen - actually an (internal ?) error\\r\\n        if (block.timestamp <= user.stakeTime) return 0;\\r\\n\\r\\n        // case 4)\\r\\n        // staked after reward period is over => no rewards\\r\\n        // end time < stake time < block time\\r\\n        if (stakeRewardEndTime <= user.stakeTime) return 0;\\r\\n\\r\\n        uint256 timePeriod;\\r\\n\\r\\n        // case 5\\r\\n        // we have not reached the end of the reward period\\r\\n        // stake time < block time < end time\\r\\n        if (block.timestamp <= stakeRewardEndTime) {\\r\\n            timePeriod = block.timestamp - user.stakeTime; // covered by case 1) 2) 3) 'if'\\r\\n        } else {\\r\\n            // case 6\\r\\n            // user staked before end of reward period , but that is in the past now\\r\\n            // stake time < end time < block time\\r\\n            timePeriod = stakeRewardEndTime - user.stakeTime; // covered case 4)\\r\\n        }\\r\\n\\r\\n        return timePeriod * user.stakeAmount;\\r\\n    }\\r\\n\\r\\n    function userTotalRewards(address _staker) public view returns (uint256) {\\r\\n        return\\r\\n            userClaimableRewards(_staker) + userMap[_staker].accumulatedRewards;\\r\\n    }\\r\\n\\r\\n    function getEarnedRewardTokens(\\r\\n        address _staker\\r\\n    ) public view returns (uint256 claimableRewardTokens) {\\r\\n        if (address(rewardToken) == address(0) || stakeRewardFactor == 0) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return userTotalRewards(_staker) / stakeRewardFactor; // safe\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev whenver the staked balance changes do ...\\r\\n     *\\r\\n     *  @dev calculate userClaimableRewards = previous staked amount * (current time - last stake time)\\r\\n     *  @dev add userClaimableRewards to userAccumulatedRewards\\r\\n     *  @dev reset userClaimableRewards to 0 by setting stakeTime to current time\\r\\n     *  @dev not used as doing it inline, local, within a function consumes less gas\\r\\n     *\\r\\n     *  @return user reference pointer for further processing\\r\\n     */\\r\\n    function _updateRewards(\\r\\n        address _staker\\r\\n    ) internal returns (User storage user) {\\r\\n        // calculate reward credits using previous staking amount and previous time period\\r\\n        // add new reward credits to already accumulated reward credits\\r\\n        user = userMap[_staker];\\r\\n        user.accumulatedRewards += userClaimableRewards(_staker);\\r\\n\\r\\n        // update stake Time to current time (start new reward period)\\r\\n        // will also reset userClaimableRewards()\\r\\n        user.stakeTime = toUint48(block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * add stake token to staking pool\\r\\n     * @dev requires the token to be approved for transfer\\r\\n     * @dev we assume that (our) stake token is not malicious, so no special checks\\r\\n     * @param _amount of token to be staked\\r\\n     */\\r\\n    function _stake(uint256 _amount) internal returns (uint256) {\\r\\n        require(_amount > 0, \\\"stake amount must be > 0\\\");\\r\\n        require(\\r\\n            IERC20(governanceToken).balanceOf(address(this)) >= _amount,\\r\\n            \\\"staking limit has been reached\\\"\\r\\n        );\\r\\n\\r\\n        User storage user = _updateRewards(msg.sender); // update rewards and return reference to user\\r\\n\\r\\n        user.stakeAmount = toUint160(user.stakeAmount + _amount);\\r\\n        tokenTotalStaked += _amount;\\r\\n\\r\\n        user.unlockTime = toUint48(block.timestamp + lockTimePeriod);\\r\\n\\r\\n        // using SafeERC20 for IERC20 => will revert in case of error\\r\\n        IERC20(stakingToken).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        IERC20(governanceToken).safeTransfer(msg.sender, _amount);\\r\\n\\r\\n        emit Stake(msg.sender, _amount, toUint48(block.timestamp)); // = user.stakeTime\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * withdraw staked token, ...\\r\\n     * do not withdraw rewards token (it might not be worth the gas)\\r\\n     * @return amount of tokens sent to user's account\\r\\n     */\\r\\n    function _withdraw(uint256 amount) internal returns (uint256) {\\r\\n        require(amount > 0, \\\"amount to withdraw not > 0\\\");\\r\\n        require(\\r\\n            block.timestamp > getUnlockTime(msg.sender),\\r\\n            \\\"staked tokens are still locked\\\"\\r\\n        );\\r\\n        require(\\r\\n            IERC20(governanceToken).balanceOf(msg.sender) >= amount,\\r\\n            \\\"not enough staked tokens\\\"\\r\\n        );\\r\\n\\r\\n        User storage user = _updateRewards(msg.sender); // update rewards and return reference to user\\r\\n\\r\\n        require(amount <= user.stakeAmount, \\\"withdraw amount > staked amount\\\");\\r\\n        user.stakeAmount -= toUint160(amount);\\r\\n        tokenTotalStaked -= amount;\\r\\n\\r\\n        // using SafeERC20 for IERC20 => will revert in case of error\\r\\n        IERC20(stakingToken).safeTransfer(msg.sender, amount);\\r\\n        IERC20(governanceToken).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n\\r\\n        emit Withdraw(msg.sender, amount, toUint48(block.timestamp)); // = user.stakeTime\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * claim reward tokens for accumulated reward credits\\r\\n     * ... but do not unstake staked token\\r\\n     */\\r\\n    function _claim() internal returns (uint256) {\\r\\n        require(rewardToken != address(0), \\\"no reward token contract\\\");\\r\\n        uint256 earnedRewardTokens = getEarnedRewardTokens(msg.sender);\\r\\n        require(earnedRewardTokens > 0, \\\"no tokens to claim\\\");\\r\\n\\r\\n        // like _updateRewards() , but reset all rewards to 0\\r\\n        User storage user = userMap[msg.sender];\\r\\n        user.accumulatedRewards = 0;\\r\\n        user.stakeTime = toUint48(block.timestamp); // will reset userClaimableRewards to 0\\r\\n        // user.stakeAmount = unchanged\\r\\n\\r\\n        require(\\r\\n            earnedRewardTokens <= getRewardTokenBalance(),\\r\\n            \\\"not enough reward tokens\\\"\\r\\n        ); // redundant but dedicated error message\\r\\n        IERC20(rewardToken).safeTransfer(msg.sender, earnedRewardTokens);\\r\\n\\r\\n        emit Claimed(msg.sender, rewardToken, earnedRewardTokens);\\r\\n        return earnedRewardTokens;\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external nonReentrant returns (uint256) {\\r\\n        return _stake(_amount);\\r\\n    }\\r\\n\\r\\n    function claim() external nonReentrant returns (uint256) {\\r\\n        return _claim();\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 amount) external nonReentrant returns (uint256) {\\r\\n        return _withdraw(amount);\\r\\n    }\\r\\n\\r\\n    function withdrawAll() external nonReentrant returns (uint256) {\\r\\n        return _withdraw(stakeAmount_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Do not accept accidently sent ETH :\\r\\n     * If neither a receive Ether nor a payable fallback function is present,\\r\\n     * the contract cannot receive Ether through regular transactions and throws an exception.\\r\\n     * https://docs.soliditylang.org/en/v0.8.7/contracts.html#receive-ether-function\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice withdraw accidently sent ERC20 tokens\\r\\n     * @param _tokenAddress address of token to withdraw\\r\\n     */\\r\\n    function removeOtherERC20Tokens(address _tokenAddress) external onlyOwner {\\r\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\r\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, balance);\\r\\n        emit ERC20TokensRemoved(_tokenAddress, msg.sender, balance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_lockTimePeriod\",\"type\":\"uint48\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20TokensRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernanceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernanceToken\",\"type\":\"address\"}],\"name\":\"GovernanceTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"lockTimePeriod\",\"type\":\"uint48\"}],\"name\":\"LockTimePeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"RewardTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"stakeRewardEndTime\",\"type\":\"uint48\"}],\"name\":\"StakeRewardEndTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeRewardFactor\",\"type\":\"uint256\"}],\"name\":\"StakeRewardFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TIME\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getEarnedRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableRewardTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarnedRewardTokens_msgSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"unlockTime\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime_msgSender\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"unlockTime\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTimePeriod\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeOtherERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernanceToken\",\"type\":\"address\"}],\"name\":\"setGovernanceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_lockTimePeriod\",\"type\":\"uint48\"}],\"name\":\"setLockTimePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_stakeRewardEndTime\",\"type\":\"uint48\"}],\"name\":\"setStakeRewardEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeRewardFactor\",\"type\":\"uint256\"}],\"name\":\"setStakeRewardFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmount_msgSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewardEndTime\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRewardFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"dateTime\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTime_msgSender\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"userAccumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userAccumulatedRewards_msgSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"userClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userClaimableRewards_msgSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMap\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"stakeTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"unlockTime\",\"type\":\"uint48\"},{\"internalType\":\"uint160\",\"name\":\"stakeAmount\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"userTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userTotalRewards_msgSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LendsStake", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002c06ba9e7f0daccbc1f6a33ea67e85bb68fbee3a000000000000000000000000da16444b8bd79618b7c7f73d898b025dc5a7f0950000000000000000000000002c06ba9e7f0daccbc1f6a33ea67e85bb68fbee3a000000000000000000000000000000000000000000000000000000000076a700", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}