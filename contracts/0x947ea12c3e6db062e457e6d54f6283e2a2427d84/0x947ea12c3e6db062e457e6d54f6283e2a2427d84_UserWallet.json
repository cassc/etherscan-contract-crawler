{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\ncontract AbstractSweeper {\r\n    function sweepAll(address token) public returns (bool);\r\n\r\n    function() public { revert(); }\r\n\r\n    Controller controller;\r\n\r\n    constructor(address _controller) public {\r\n        controller = Controller(_controller);\r\n    }\r\n\r\n    modifier canSweep() {\r\n        if(msg.sender != controller.authorizedCaller() && msg.sender != controller.owner()){ revert(); }\r\n        if(controller.halted()){ revert(); }\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function balanceOf(address a) public pure returns (uint) {\r\n        (a);\r\n        return 0;\r\n    }\r\n\r\n    function transfer(address a, uint val) public pure returns (bool) {\r\n        (a);\r\n        (val);\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract DefaultSweeper is AbstractSweeper {\r\n    constructor(address controller) AbstractSweeper(controller) public { }\r\n\r\n    function sweepAll(address _token) public canSweep returns (bool) {\r\n        bool success = false;\r\n        address destination = controller.destination();\r\n\r\n        if(_token != address(0)){\r\n            Token token = Token(_token);\r\n            success = token.transfer(destination, token.balanceOf(this));\r\n        }else{\r\n            success = destination.send(address(this).balance);\r\n        }\r\n        return success;\r\n    }\r\n}\r\n\r\ncontract UserWallet {\r\n    AbstractSweeperList sweeperList;\r\n    constructor(address _sweeperlist) public {\r\n        sweeperList = AbstractSweeperList(_sweeperlist);\r\n    }\r\n\r\n    function() public payable { }\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n        (_from);\r\n        (_value);\r\n        (_data);\r\n    }\r\n\r\n    function sweepAll(address _token) public returns (bool) {\r\n        return sweeperList.sweeperOf(_token).delegatecall(msg.data);\r\n    }\r\n}\r\n\r\ncontract AbstractSweeperList {\r\n    function sweeperOf(address _token) public returns (address);\r\n}\r\n\r\ncontract Controller is AbstractSweeperList {\r\n    address public owner;\r\n    address public authorizedCaller;\r\n\r\n    address public destination;\r\n\r\n    bool public halted;\r\n\r\n    event NewWalletCreated(address receiver);\r\n\r\n    modifier onlyOwner() {\r\n        if(msg.sender != owner){ revert(); }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizedCaller() {\r\n        if(msg.sender != authorizedCaller){ revert(); }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmins() {\r\n        if(msg.sender != authorizedCaller && msg.sender != owner){ revert(); } \r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        destination = msg.sender;\r\n        authorizedCaller = msg.sender;\r\n    }\r\n\r\n    function setAuthorizedCaller(address _newCaller) public onlyOwner {\r\n        authorizedCaller = _newCaller;\r\n    }\r\n\r\n    function setDestination(address _dest) public onlyOwner {\r\n        destination = _dest;\r\n    }\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function newWallet() public onlyAdmins returns (address wallet)  {\r\n        wallet = address(new UserWallet(this));\r\n        emit NewWalletCreated(wallet);\r\n    }\r\n\r\n    function halt() public onlyAdmins {\r\n        halted = true;\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        halted = false;\r\n    }\r\n\r\n    address public defaultSweeper = address(new DefaultSweeper(this));\r\n    mapping (address => address) sweepers;\r\n\r\n    function addSweeper(address _token, address _sweeper) public onlyOwner {\r\n        sweepers[_token] = _sweeper;\r\n    }\r\n\r\n    function sweeperOf(address _token) public returns (address) {\r\n        address sweeper = sweepers[_token];\r\n        if(sweeper == 0){ sweeper = defaultSweeper; }\r\n        return sweeper;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweepAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sweeperlist\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "UserWallet", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007142eb34d2220152dedc5868745079bc6ffa0fdd", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ec90d4e55fb69f839fa555767145d6ac7a8f1aa98ed098b09c220c4a34f02ba1"}