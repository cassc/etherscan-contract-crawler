{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ParamBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ParamBook is Ownable {\\n    mapping(bytes32 => uint256) public params;\\n    mapping(bytes32 => mapping(bytes32 => uint256)) public params2;\\n\\n    function setParams(bytes32 name, uint256 value) public onlyOwner {\\n        params[name] = value;\\n    }\\n\\n    function setMultiParams(bytes32[] memory names, uint[] memory values) public onlyOwner {\\n        require(names.length == values.length, \\\"ParamBook::setMultiParams:param length not match\\\");\\n        for (uint i=0; i < names.length; i++ ) {\\n            params[names[i]] = values[i];\\n        }\\n    }\\n\\n    function setParams2(\\n        bytes32 name1,\\n        bytes32 name2,\\n        uint256 value\\n    ) public onlyOwner {\\n        params2[name1][name2] = value;\\n    }\\n\\n    function setMultiParams2(bytes32[] memory names1, bytes32[] memory names2, uint[] memory values) public onlyOwner {\\n        require(names1.length == names2.length, \\\"ParamBook::setMultiParams2:param length not match\\\");\\n        require(names1.length == values.length, \\\"ParamBook::setMultiParams2:param length not match\\\");\\n        for(uint i=0; i < names1.length; i++) {\\n            params2[names1[i]][names2[i]] = values[i];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TunnelV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interface/IAddressResolver.sol\\\";\\nimport \\\"./interface/ITunnel.sol\\\";\\nimport \\\"./ParamBook.sol\\\";\\nimport \\\"./lib/SafeDecimalMath.sol\\\";\\nimport \\\"./interface/IBoringDAO.sol\\\";\\nimport \\\"./interface/IOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interface/IFeePool.sol\\\";\\nimport \\\"./interface/IStakingRewardsFactory.sol\\\";\\nimport \\\"./interface/IMintBurn.sol\\\";\\nimport \\\"./interface/ITrusteeFeePool.sol\\\";\\nimport \\\"./interface/ILiquidate.sol\\\";\\n\\ncontract TunnelV2 is Ownable, Pausable, ITunnelV2, ILiquidate {\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    IAddressResolver addrResolver;\\n    bytes32 public constant BORINGDAO = \\\"BoringDAO\\\";\\n    // BTOKEN_BTC\\n    bytes32 public tunnelKey;\\n    bytes32 public constant MINT_FEE = \\\"mint_fee\\\";\\n    bytes32 public constant BURN_FEE = \\\"burn_fee\\\";\\n    bytes32 public constant MINT_FEE_TRUSTEE = \\\"mint_fee_trustee\\\";\\n    bytes32 public constant MINT_FEE_PLEDGER = \\\"mint_fee_pledger\\\";\\n    bytes32 public constant MINT_FEE_DEV = \\\"mint_fee_dev\\\";\\n    bytes32 public constant BURN_FEE_INSURANCE = \\\"burn_fee_insurance\\\";\\n    bytes32 public constant BURN_FEE_PLEDGER = \\\"burn_fee_pledger\\\";\\n    bytes32 public constant FEE_POOL = \\\"FeePool\\\";\\n    bytes32 public constant INSURANCE_POOL = \\\"InsurancePool\\\";\\n    bytes32 public constant DEV_ADDRESS = \\\"DevUser\\\";\\n    bytes32 public constant ADDRESS_BOOK = \\\"AddressBook\\\";\\n    bytes32 public constant ORACLE = \\\"Oracle\\\";\\n    bytes32 public constant BOR = \\\"BORING\\\";\\n    bytes32 public constant PLEDGE_RATE = \\\"pledge_rate\\\";\\n    bytes32 public constant NETWORK_FEE = \\\"network_fee\\\";\\n    bytes32 public constant PLEDGE_TOKEN = \\\"ppToken\\\";\\n    bytes32 public constant OTOKEN = \\\"oToken\\\";\\n    bytes32 public constant PARAM_BOOK = \\\"ParamBook\\\";\\n    bytes32 public constant TRUSTEE_FEE_POOL = \\\"TrusteeFeePool\\\";\\n    bytes32 public constant SATELLITE_POOL_FACTORY = \\\"SatellitePoolFactory\\\";\\n    bytes32 public constant LIQUIDATION = \\\"Liquidation\\\";\\n\\n    mapping(address => uint) public borPledgeInfo;\\n    // total pledge value in one token\\n    uint256 public totalPledgeBOR;\\n\\n    // burn mini limit\\n    uint256 public burnMiniLimit=1e15;\\n    uint256 public redeemLockTxLimit=5;\\n\\n    struct PledgerInfo {\\n        uint256 amount;\\n        uint256 feeDebt;\\n    }\\n\\n    struct LockAmount{\\n        uint unlockTime;\\n        uint amount;\\n    }\\n    mapping(address=>LockAmount[]) public lockInfo;\\n\\n    uint256 public lockDuration = 86400;\\n\\n    ITunnelTVL public oldTunnel;\\n\\n    constructor(\\n        IAddressResolver _addrResolver,\\n        bytes32 _tunnelKey,\\n        ITunnelTVL _oldTunnel \\n    ) public {\\n        addrResolver = _addrResolver;\\n        tunnelKey = _tunnelKey;\\n        oldTunnel = _oldTunnel;\\n        // _pause();\\n    }\\n\\n    // view\\n    function otokenMintBurn() internal view returns (IMintBurn) {\\n        return IMintBurn(addrResolver.requireKKAddrs(tunnelKey, OTOKEN, \\\"Tunnel::otokenMintBurn: oToken contract not exist in Tunnel\\\"));\\n    }\\n\\n    function otokenERC20() internal view returns (IERC20) {\\n        return IERC20(addrResolver.requireKKAddrs(tunnelKey, OTOKEN, \\\"Tunnel::otokenERC20: oToken contract not exist in Tunnel\\\"));\\n    }\\n\\n    function borERC20() internal view returns (IERC20) {\\n        return IERC20(addrResolver.requireAndKey2Address(BOR, \\\"borERC20::borERC20: BOR contract not exist in Tunnel\\\"));\\n    }\\n\\n    function boringDAO() internal view returns (IBoringDAO) {\\n        return IBoringDAO(addrResolver.key2address(BORINGDAO));\\n    }\\n\\n    function oracle() internal view returns (IOracle) {\\n        return IOracle(addrResolver.key2address(ORACLE));\\n    }\\n\\n    function ppTokenMintBurn() internal view returns (IMintBurn) {\\n        return IMintBurn(addrResolver.requireKKAddrs(tunnelKey, PLEDGE_TOKEN, \\\"Tunnel::ppTokenMintBurn::pptoken not exist\\\"));\\n    }\\n\\n    function ppTokenERC20() internal view returns (IERC20) {\\n        return IERC20(addrResolver.requireKKAddrs(tunnelKey, PLEDGE_TOKEN, \\\"Tunnel::ppTokenMintBurn::pptoken not exist\\\"));\\n    }\\n\\n    function feePool() internal view returns (IFeePool) {\\n        return IFeePool(addrResolver.requireKKAddrs(tunnelKey, FEE_POOL, \\\"Tunnel::feePool::feePool is not exist\\\"));\\n    }\\n\\n    function trusteeFeePool() internal view returns (ITrusteeFeePool) {\\n        return ITrusteeFeePool(addrResolver.requireKKAddrs(tunnelKey, TRUSTEE_FEE_POOL, \\\"Tunnel::trusteeFeePool is address(0)\\\"));\\n    }\\n\\n    function paramBook() internal view returns (ParamBook) {\\n        return ParamBook(addrResolver.key2address(PARAM_BOOK));\\n    }\\n\\n    function getRate(bytes32 name) internal view returns (uint256) {\\n        return paramBook().params2(tunnelKey, name);\\n    }\\n\\n    function satellitePoolFactory() internal view returns(IStakingRewardsFactory) {\\n        return IStakingRewardsFactory(addrResolver.requireKKAddrs(tunnelKey, SATELLITE_POOL_FACTORY, \\\"Tunnel::spf::spf is not exist\\\"));\\n    }\\n\\n    function totalValuePledge() public override view returns (uint256) {\\n        uint256 borPrice = oracle().getPrice(BOR);\\n        return totalPledgeBOR.multiplyDecimal(borPrice);\\n    }\\n\\n    function userLockLength(address account) public view returns (uint) {\\n        return lockInfo[account].length;\\n    }\\n\\n    function userLockAmount() public view returns(uint256, uint256) {\\n        uint lock;\\n        uint unlock;\\n        for (uint i=0; i<lockInfo[msg.sender].length; i++) {\\n            if(block.timestamp >= lockInfo[msg.sender][i].unlockTime) {\\n                unlock = unlock.add(lockInfo[msg.sender][i].amount);\\n            } else {\\n                lock = lock.add(lockInfo[msg.sender][i].amount);\\n            }\\n        }\\n        return (lock, unlock);\\n    }\\n\\n    // todo\\n\\n    // duration should bigger than lockDuration\\n    function setLockDuration(uint duration) public onlyOwner {\\n        lockDuration = duration;\\n    }\\n\\n    function setRedeemLockTxLimit(uint limit) public onlyOwner {\\n            redeemLockTxLimit = limit;\\n    }\\n\\n    function setBurnMiniLimit(uint amount) public onlyOwner {\\n        burnMiniLimit = amount;\\n    }\\n\\n    function pledge(address account, uint256 amount)\\n        external\\n        override\\n        onlyBoringDAO\\n    {\\n        borPledgeInfo[account] = borPledgeInfo[account].add(amount);\\n        totalPledgeBOR = totalPledgeBOR.add(amount);\\n        // mint pledge token\\n        ppTokenMintBurn().mint(account, amount);\\n        feePool().notifyPTokenAmount(account, amount);\\n        emit PledgeSuccess(account, amount);\\n    }\\n\\n    function redeem(address account, uint256 amount)\\n        external\\n        override\\n        onlyBoringDAO\\n    {\\n        require(\\n            ppTokenERC20().balanceOf(account) >= amount,\\n            \\\"Tunnel::redeem: not enough pledge provider token\\\"\\n        );\\n        require(borPledgeInfo[account] >= amount, \\\"Tunnel:redeem: Not enough bor amount\\\");\\n        require(lockInfo[account].length < redeemLockTxLimit, \\\"Tunnel::redeem: A user can only redeem at most five redeem, try again after extraction\\\");\\n        borPledgeInfo[account] = borPledgeInfo[account].sub(amount);\\n        // send fee and burn ptoken\\n        // pledge token and fee\\n        // burn ptoken and tansfer back BOR\\n        lock(account, amount, block.timestamp.add(lockDuration));\\n        ppTokenMintBurn().burn(account, amount);\\n        feePool().withdraw(account, amount);\\n        emit RedeemSuccess(account, amount);\\n    }\\n\\n    function lock(address account, uint amount, uint unlockTime) internal {\\n        lockInfo[account].push(LockAmount(unlockTime, amount));\\n    }\\n\\n    function withdrawUnlock() public {\\n        uint unlock;\\n        uint  i = 0;\\n        while (i!=lockInfo[msg.sender].length) {\\n            if (block.timestamp >= lockInfo[msg.sender][i].unlockTime) {\\n                unlock = unlock.add(lockInfo[msg.sender][i].amount);\\n                lockInfo[msg.sender][i] = lockInfo[msg.sender][lockInfo[msg.sender].length.sub(1)];\\n                lockInfo[msg.sender].pop();\\n            } else {\\n                i++;\\n            }\\n        }\\n        if (unlock > 0 ) {\\n            totalPledgeBOR = totalPledgeBOR.sub(unlock);\\n            borERC20().transfer(msg.sender, unlock);\\n            emit WithdrawUnlockSuccess(\\n                msg.sender,\\n                unlock\\n            );\\n        }\\n    }\\n\\n\\n    // when approved then issue\\n    function issue(address account, uint256 amount)\\n        external\\n        override\\n        onlyBoringDAO\\n    {\\n        //network fee\\n        uint networkFee = paramBook().params2(tunnelKey, NETWORK_FEE);\\n        // calculate fee\\n        uint256 mintFeeRation = getRate(MINT_FEE);\\n        uint256 mintFeeAmount = amount.multiplyDecimal(mintFeeRation);\\n        uint256 mintAmount = amount.sub(mintFeeAmount).sub(networkFee);\\n        otokenMintBurn().mint(account, mintAmount);\\n        // handle fee\\n        // trustee fee\\n        uint256 mintFeeTrusteeRatio = getRate(MINT_FEE_TRUSTEE);\\n        uint256 mintFeeTrusteeAmount = mintFeeAmount.multiplyDecimal(mintFeeTrusteeRatio).add(networkFee);\\n        otokenMintBurn().mint(address(trusteeFeePool()), mintFeeTrusteeAmount);\\n        trusteeFeePool().notifyReward(mintFeeTrusteeAmount);\\n\\n        // fee to pledger\\n        uint256 mintFeePledgerRation = getRate(MINT_FEE_PLEDGER);\\n        uint256 mintFeePledgerAmount = mintFeeAmount.multiplyDecimal(\\n            mintFeePledgerRation\\n        );\\n        address feePoolAddress = address(feePool());\\n        otokenMintBurn().mint(feePoolAddress, mintFeePledgerAmount);\\n        feePool().notifyBTokenFeeAmount(mintFeePledgerAmount);\\n\\n\\n        // to developer team\\n        uint256 mintFeeDevRation = getRate(MINT_FEE_DEV);\\n        uint256 mintFeeDevAmount = mintFeeAmount.multiplyDecimal(\\n            mintFeeDevRation\\n        );\\n        address devAddress = addrResolver.key2address(DEV_ADDRESS);\\n\\n        otokenMintBurn().mint(devAddress, mintFeeDevAmount);\\n    }\\n\\n\\n    function burn(address account, uint256 amount, string memory assetAddress) external override onlyBoringDAO{\\n        require(amount>=burnMiniLimit, \\\"Tunnel::burn: the amount too small\\\");\\n        uint256 burnFeeAmountBToken = amount.multiplyDecimal(getRate(BURN_FEE));\\n        // convert to bor amount\\n        uint burnFeeAmount = oracle().getPrice(tunnelKey).multiplyDecimal(burnFeeAmountBToken).divideDecimal(oracle().getPrice(BOR));\\n\\n        // insurance apart\\n        address insurancePoolAddress = addrResolver.requireKKAddrs(tunnelKey, INSURANCE_POOL, \\\"insurancePool not exist\\\");\\n        uint256 burnFeeAmountInsurance = burnFeeAmount.multiplyDecimal(\\n            getRate(BURN_FEE_INSURANCE)\\n        );\\n\\n\\n        // pledger apart\\n        uint256 burnFeeAmountPledger = burnFeeAmount.multiplyDecimal(\\n            getRate(BURN_FEE_PLEDGER)\\n        );\\n        borERC20().transferFrom(\\n            account,\\n            insurancePoolAddress,\\n            burnFeeAmountInsurance\\n        );\\n        //fee to feepool\\n        borERC20().transferFrom(\\n            account,\\n            address(feePool()),\\n            burnFeeAmountPledger\\n        );\\n        feePool().notifyBORFeeAmount(burnFeeAmountPledger);\\n        // otoken burn\\n        otokenMintBurn().burn(account, amount);\\n        emit BurnOToken(\\n            account,\\n            amount,\\n            assetAddress\\n        );\\n    }\\n\\n    function oldTunnelTVL() public view returns(uint) {\\n        return oldTunnel.totalTVL();\\n    }\\n\\n    function totalTVL() public view returns(uint) {\\n        uint256 borTVL = totalValuePledge();\\n        uint satelliteTVL = satellitePoolFactory().satelliteTVL();\\n        return borTVL.add(satelliteTVL).add(oldTunnelTVL());\\n    }\\n    \\n    function pledgeRatio() public view returns(uint) {\\n        uint tvl = totalTVL();\\n        uint btokenValue = otokenERC20().totalSupply().multiplyDecimal(oracle().getPrice(tunnelKey));\\n        if (btokenValue == 0) {\\n            return 0;\\n        }\\n        return tvl.divideDecimal(btokenValue);\\n    }\\n\\n    function canIssueAmount() external override view returns (uint256) {\\n        // satellite pool tvl\\n        uint total = totalTVL();\\n        uint256 pledgeRate = paramBook().params2(tunnelKey, PLEDGE_RATE);\\n        uint256 canIssueValue = total.divideDecimal(pledgeRate);\\n        uint256 tunnelKeyPrice = oracle().getPrice(tunnelKey);\\n        return canIssueValue.divideDecimal(tunnelKeyPrice);\\n    }\\n\\n    function liquidate(address account) public override onlyLiquidation {\\n        borERC20().transfer(account, totalPledgeBOR);\\n    }\\n\\n    function unpause() public returns (bool) {\\n        if (totalPledgeBOR >= 0e18) {\\n            _unpause();\\n        } \\n        return paused();\\n    }\\n\\n    modifier onlyBoringDAO {\\n        require(msg.sender == addrResolver.key2address(BORINGDAO));\\n        _;\\n    }\\n\\n    modifier onlyLiquidation {\\n        require(msg.sender == addrResolver.requireKKAddrs(tunnelKey, LIQUIDATION, \\\"Tunnel::liquidation contract no exist\\\"));\\n        _;\\n    }\\n\\n    event BurnOToken(\\n        address indexed account,\\n        uint256 amount,\\n        string assetAddress\\n    );\\n\\n    event WithdrawUnlockSuccess(\\n        address account,\\n        uint    amount\\n    );\\n\\n     event PledgeSuccess(\\n         address account,\\n         uint   amount\\n     );\\n\\n    event RedeemSuccess(\\n        address account,\\n        uint amount\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IAddressResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAddressResolver {\\n    \\n    function key2address(bytes32 key) external view returns(address);\\n    function address2key(address addr) external view returns(bytes32);\\n    function requireAndKey2Address(bytes32 name, string calldata reason) external view returns(address);\\n\\n    function setAddress(bytes32 key, address addr) external;\\n    function setMultiAddress(bytes32[] memory keys, address[] memory addrs) external;\\n    \\n    function setKkAddr(bytes32 k1, bytes32 k2, address addr) external;\\n    function setMultiKKAddr(bytes32[] memory k1s, bytes32[] memory k2s, address[] memory addrs) external;\\n\\n    function kk2addr(bytes32 k1, bytes32 k2) external view returns(address);\\n    function requireKKAddrs(bytes32 k1, bytes32 k2, string calldata reason) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interface/IBoringDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IBoringDAO {\\n    // function openTunnel(bytes32 tunnelKey) external;\\n\\n    function pledge(bytes32 tunnelKey, uint _amount) external;\\n    function redeem(bytes32 tunnelKey, uint _amount) external;\\n\\n    function approveMint(bytes32 tunnelKey, string memory _txid, uint _amount, address account, string memory assetAddress) external;\\n    function burnBToken(bytes32 _tunnelKey, uint _amount, string memory assetAddress) external;\\n\\n    // function getTrustee(uint index) external view returns(address);\\n    // function getTrusteeCount() external view returns(uint);\\n\\n}\"\r\n    },\r\n    \"contracts/interface/IFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IFeePool {\\n\\n    function earned(address account) external view returns(uint, uint);\\n\\n    function notifyBORFeeAmount(uint amount) external;\\n    function notifyBTokenFeeAmount(uint amount) external;\\n    function notifyPTokenAmount(address account, uint amount) external;\\n    \\n    function withdraw(address account, uint amount) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interface/ILiquidate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ILiquidate {\\n    function liquidate(address account) external;\\n}\\n\\ninterface ILiquidateArray {\\n    function liquidateArray(address account, uint256[] memory pids) external;\\n}\"\r\n    },\r\n    \"contracts/interface/IMintBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IMintBurn {\\n\\n    function burn(address account, uint amount) external;\\n    function mint(address account, uint amount) external;\\n}\"\r\n    },\r\n    \"contracts/interface/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IOracle {\\n    \\n    function setPrice(bytes32 _symbol, uint _price) external;\\n    function getPrice(bytes32 _symbol) external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/interface/IStakingRewardsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IStakingRewardsFactory {\\n    function satelliteTVL() external view returns(uint);\\n}\"\r\n    },\r\n    \"contracts/interface/ITrusteeFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ITrusteeFeePool {\\n    function exit(address account) external;\\n    function enter(address account) external;\\n    function notifyReward(uint reward) external;\\n}\"\r\n    },\r\n    \"contracts/interface/ITunnel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ITunnel {\\n    function pledge(address account, uint amount) external;\\n    function redeem(address account, uint amount) external;\\n    function issue(address account, uint amount) external;\\n    function burn(address account, uint amount, string memory assetAddress) external;\\n    function totalValuePledge() external view  returns(uint);\\n    function canIssueAmount() external view returns(uint);\\n    function oTokenKey() external view returns(bytes32);\\n}\\n\\ninterface ITunnelV2 {\\n    function pledge(address account, uint amount) external;\\n    function redeem(address account, uint amount) external;\\n    function issue(address account, uint amount) external;\\n    function burn(address account, uint amount, string memory assetAddress) external;\\n    function totalValuePledge() external view  returns(uint);\\n    function canIssueAmount() external view returns(uint);\\n}\\n\\ninterface ITunnelTVL {\\n    function totalTVL() external view returns(uint);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.8;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/SafeDecimalMath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"_addrResolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tunnelKey\",\"type\":\"bytes32\"},{\"internalType\":\"contract ITunnelTVL\",\"name\":\"_oldTunnel\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetAddress\",\"type\":\"string\"}],\"name\":\"BurnOToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PledgeSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnlockSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_BOOK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORINGDAO\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_FEE_INSURANCE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_FEE_PLEDGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_ADDRESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSURANCE_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FEE_DEV\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FEE_PLEDGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FEE_TRUSTEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NETWORK_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARAM_BOOK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLEDGE_RATE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLEDGE_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SATELLITE_POOL_FACTORY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTEE_FEE_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borPledgeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetAddress\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMiniLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canIssueAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldTunnel\",\"outputs\":[{\"internalType\":\"contract ITunnelTVL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldTunnelTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemLockTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBurnMiniLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setRedeemLockTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPledgeBOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValuePledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tunnelKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userLockLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TunnelV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ce61e08c01fb6e1ca1bb4d0acf4eb1d5fe66bf794254430000000000000000000000000000000000000000000000000000000000000000000000000000000000258a1eb6537ae84cf612f06b557b6d53f49cc9a1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}