{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-01-18\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.7; //^0.7.5;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"add: +\");\r\n\r\n        return c;\r\n    }\r\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"sub: -\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"mul: *\");\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"div: /\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{value:amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () public {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Gauge is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    IERC20 public constant PICKLE = IERC20(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\r\n    IERC20 public constant DILL = IERC20(0xbBCf169eE191A1Ba7371F30A1C344bFC498b29Cf);\r\n    address public constant TREASURY = address(0x066419EaEf5DE53cc5da0d8702b990c5bc7D1AB3);\r\n    \r\n    IERC20 public immutable TOKEN;\r\n    address public immutable DISTRIBUTION;\r\n    uint256 public constant DURATION = 7 days;\r\n    \r\n    uint256 public periodFinish = 0;\r\n    uint256 public rewardRate = 0;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public rewardPerTokenStored;\r\n    \r\n    modifier onlyDistribution() {\r\n        require(msg.sender == DISTRIBUTION, \"Caller is not RewardsDistribution contract\");\r\n        _;\r\n    }\r\n    \r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    uint256 private _totalSupply;\r\n    uint public derivedSupply;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) public derivedBalances;\r\n    mapping(address => uint) private _base;\r\n    \r\n    constructor(address _token) public {\r\n        TOKEN = IERC20(_token);\r\n        DISTRIBUTION = msg.sender;\r\n    }\r\n    \r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint256) {\r\n        if (_totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return\r\n            rewardPerTokenStored.add(\r\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(derivedSupply)\r\n            );\r\n    }\r\n    \r\n    function derivedBalance(address account) public view returns (uint) {\r\n        uint _balance = _balances[account];\r\n        uint _derived = _balance.mul(40).div(100);\r\n        uint _adjusted = (_totalSupply.mul(DILL.balanceOf(account)).div(DILL.totalSupply())).mul(60).div(100);\r\n        return Math.min(_derived.add(_adjusted), _balance);\r\n    }\r\n    \r\n    function kick(address account) public {\r\n        uint _derivedBalance = derivedBalances[account];\r\n        derivedSupply = derivedSupply.sub(_derivedBalance);\r\n        _derivedBalance = derivedBalance(account);\r\n        derivedBalances[account] = _derivedBalance;\r\n        derivedSupply = derivedSupply.add(_derivedBalance);\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        return derivedBalances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\r\n    }\r\n\r\n    function getRewardForDuration() external view returns (uint256) {\r\n        return rewardRate.mul(DURATION);\r\n    }\r\n    \r\n    function depositAll() external {\r\n        _deposit(TOKEN.balanceOf(msg.sender), msg.sender);\r\n    }\r\n    \r\n    function deposit(uint256 amount) external {\r\n        _deposit(amount, msg.sender);\r\n    }\r\n    \r\n    function depositFor(uint256 amount, address account) external {\r\n        _deposit(amount, account);\r\n    }\r\n    \r\n    function _deposit(uint amount, address account) internal nonReentrant updateReward(account) {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Staked(account, amount);\r\n        TOKEN.safeTransferFrom(account, address(this), amount);\r\n    }\r\n    \r\n    function withdrawAll() external {\r\n        _withdraw(_balances[msg.sender]);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        _withdraw(amount);\r\n    }\r\n    \r\n    function _withdraw(uint amount) internal nonReentrant updateReward(msg.sender) {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        TOKEN.safeTransfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function getReward() public nonReentrant updateReward(msg.sender) {\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            PICKLE.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function exit() external {\r\n       _withdraw(_balances[msg.sender]);\r\n        getReward();\r\n    }\r\n    \r\n    function notifyRewardAmount(uint256 reward) external onlyDistribution updateReward(address(0)) {\r\n        PICKLE.safeTransferFrom(DISTRIBUTION, address(this), reward);\r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = reward.div(DURATION);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(rewardRate);\r\n            rewardRate = reward.add(leftover).div(DURATION);\r\n        }\r\n\r\n        // Ensure the provided reward amount is not more than the balance in the contract.\r\n        // This keeps the reward rate in the right range, preventing overflows due to\r\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\r\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\r\n        uint balance = PICKLE.balanceOf(address(this));\r\n        require(rewardRate <= balance.div(DURATION), \"Provided reward too high\");\r\n\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(DURATION);\r\n        emit RewardAdded(reward);\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n        if (account != address(0)) {\r\n            kick(account);\r\n        }\r\n    }\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n}\r\n\r\ninterface MasterChef {\r\n    function deposit(uint, uint) external;\r\n    function withdraw(uint, uint) external;\r\n    function userInfo(uint, address) external view returns (uint, uint);\r\n}\r\n\r\ncontract ProtocolGovernance {\r\n    /// @notice governance address for the governance contract\r\n    address public governance;\r\n    address public pendingGovernance;\r\n    \r\n    /**\r\n     * @notice Allows governance to change governance (for future upgradability)\r\n     * @param _governance new governance address to set\r\n     */\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"setGovernance: !gov\");\r\n        pendingGovernance = _governance;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\r\n     */\r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance, \"acceptGovernance: !pendingGov\");\r\n        governance = pendingGovernance;\r\n    }\r\n}\r\n\r\ncontract MasterDill {\r\n    using SafeMath for uint;\r\n\r\n    /// @notice EIP-20 token name for this token\r\n    string public constant name = \"Master DILL\";\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public constant symbol = \"mDILL\";\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint public totalSupply = 1e18;\r\n\r\n    mapping (address => mapping (address => uint)) internal allowances;\r\n    mapping (address => uint) internal balances;\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n    \r\n    constructor() public {\r\n        balances[msg.sender] = 1e18;\r\n        emit Transfer(address(0x0), msg.sender, 1e18);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint amount) external returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != uint(-1)) {\r\n            uint newAllowance = spenderAllowance.sub(amount, \"transferFrom: exceeds spender allowance\");\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint amount) internal {\r\n        require(src != address(0), \"_transferTokens: zero address\");\r\n        require(dst != address(0), \"_transferTokens: zero address\");\r\n\r\n        balances[src] = balances[src].sub(amount, \"_transferTokens: exceeds balance\");\r\n        balances[dst] = balances[dst].add(amount, \"_transferTokens: overflows\");\r\n        emit Transfer(src, dst, amount);\r\n    }\r\n}\r\n\r\ncontract GaugeProxy is ProtocolGovernance {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    MasterChef public constant MASTER = MasterChef(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\r\n    IERC20 public constant DILL = IERC20(0xbBCf169eE191A1Ba7371F30A1C344bFC498b29Cf);\r\n    IERC20 public constant PICKLE = IERC20(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\r\n    \r\n    IERC20 public immutable TOKEN;\r\n    \r\n    uint public pid;\r\n    uint public totalWeight;\r\n    \r\n    address[] internal _tokens;\r\n    mapping(address => address) public gauges; // token => gauge\r\n    mapping(address => uint) public weights; // token => weight\r\n    mapping(address => mapping(address => uint)) public votes; // msg.sender => votes\r\n    mapping(address => address[]) public tokenVote;// msg.sender => token\r\n    mapping(address => uint) public usedWeights;  // msg.sender => total voting weight of user\r\n    \r\n    function tokens() external view returns (address[] memory) {\r\n        return _tokens;\r\n    }\r\n    \r\n    function getGauge(address _token) external view returns (address) {\r\n        return gauges[_token];\r\n    }\r\n    \r\n    constructor() public {\r\n        TOKEN = IERC20(address(new MasterDill()));\r\n        governance = msg.sender;\r\n    }\r\n    \r\n    // Reset votes to 0\r\n    function reset() external {\r\n        _reset(msg.sender);\r\n    }\r\n    \r\n    // Reset votes to 0\r\n    function _reset(address _owner) internal {\r\n        address[] storage _tokenVote = tokenVote[_owner];\r\n        uint256 _tokenVoteCnt = _tokenVote.length;\r\n\r\n        for (uint i = 0; i < _tokenVoteCnt; i ++) {\r\n            address _token = _tokenVote[i];\r\n            uint _votes = votes[_owner][_token];\r\n            \r\n            if (_votes > 0) {\r\n                totalWeight = totalWeight.sub(_votes);\r\n                weights[_token] = weights[_token].sub(_votes);\r\n                \r\n                votes[_owner][_token] = 0;\r\n            }\r\n        }\r\n\r\n        delete tokenVote[_owner];\r\n    }\r\n    \r\n    // Adjusts _owner's votes according to latest _owner's DILL balance\r\n    function poke(address _owner) public {\r\n        address[] memory _tokenVote = tokenVote[_owner];\r\n        uint256 _tokenCnt = _tokenVote.length;\r\n        uint256[] memory _weights = new uint[](_tokenCnt);\r\n        \r\n        uint256 _prevUsedWeight = usedWeights[_owner];\r\n        uint256 _weight = DILL.balanceOf(_owner);        \r\n\r\n        for (uint256 i = 0; i < _tokenCnt; i ++) {\r\n            uint256 _prevWeight = votes[_owner][_tokenVote[i]];\r\n            _weights[i] = _prevWeight.mul(_weight).div(_prevUsedWeight);\r\n        }\r\n\r\n        _vote(_owner, _tokenVote, _weights);\r\n    }\r\n    \r\n    function _vote(address _owner, address[] memory _tokenVote, uint256[] memory _weights) internal {\r\n        // _weights[i] = percentage * 100\r\n        _reset(_owner);\r\n        uint256 _tokenCnt = _tokenVote.length;\r\n        uint256 _weight = DILL.balanceOf(_owner);\r\n        uint256 _totalVoteWeight = 0;\r\n        uint256 _usedWeight = 0;\r\n\r\n        for (uint256 i = 0; i < _tokenCnt; i ++) {\r\n            _totalVoteWeight = _totalVoteWeight.add(_weights[i]);\r\n        }\r\n\r\n        for (uint256 i = 0; i < _tokenCnt; i ++) {\r\n            address _token = _tokenVote[i];\r\n            address _gauge = gauges[_token];\r\n            uint256 _tokenWeight = _weights[i].mul(_weight).div(_totalVoteWeight);\r\n\r\n            if (_gauge != address(0x0)) {\r\n                _usedWeight = _usedWeight.add(_tokenWeight);\r\n                totalWeight = totalWeight.add(_tokenWeight);\r\n                weights[_token] = weights[_token].add(_tokenWeight);\r\n                tokenVote[_owner].push(_token);\r\n                votes[_owner][_token] = _tokenWeight;\r\n            }\r\n        }\r\n\r\n        usedWeights[_owner] = _usedWeight;\r\n    }\r\n    \r\n    \r\n    // Vote with DILL on a gauge\r\n    function vote(address[] calldata _tokenVote, uint256[] calldata _weights) external {\r\n        require(_tokenVote.length == _weights.length);\r\n        _vote(msg.sender, _tokenVote, _weights);\r\n    }\r\n    \r\n    // Add new token gauge\r\n    function addGauge(address _token) external {\r\n        require(msg.sender == governance, \"!gov\");\r\n        require(gauges[_token] == address(0x0), \"exists\");\r\n        gauges[_token] = address(new Gauge(_token));\r\n        _tokens.push(_token);\r\n    }\r\n    \r\n    \r\n    // Sets MasterChef PID\r\n    function setPID(uint _pid) external {\r\n        require(msg.sender == governance, \"!gov\");\r\n        require(pid == 0, \"pid has already been set\");\r\n        require(_pid > 0, \"invalid pid\");\r\n        pid = _pid;\r\n    }\r\n    \r\n    \r\n    // Deposits mDILL into MasterChef\r\n    function deposit() public {\r\n        require(pid > 0, \"pid not initialized\");\r\n        IERC20 _token = TOKEN;\r\n        uint _balance = _token.balanceOf(address(this));\r\n        _token.safeApprove(address(MASTER), 0);\r\n        _token.safeApprove(address(MASTER), _balance);\r\n        MASTER.deposit(pid, _balance);\r\n    }\r\n    \r\n    \r\n    // Fetches Pickle\r\n    function collect() public {\r\n        (uint _locked,) = MASTER.userInfo(pid, address(this));\r\n        MASTER.withdraw(pid, _locked);\r\n        deposit();\r\n    }\r\n    \r\n    function length() external view returns (uint) {\r\n        return _tokens.length;\r\n    }\r\n    \r\n    function distribute() external {\r\n        collect();\r\n        uint _balance = PICKLE.balanceOf(address(this));\r\n        if (_balance > 0 && totalWeight > 0) {\r\n            for (uint i = 0; i < _tokens.length; i++) {\r\n                address _token = _tokens[i];\r\n                address _gauge = gauges[_token];\r\n                uint _reward = _balance.mul(weights[_token]).div(totalWeight);\r\n                if (_reward > 0) {\r\n                    PICKLE.safeApprove(_gauge, 0);\r\n                    PICKLE.safeApprove(_gauge, _reward);\r\n                    Gauge(_gauge).notifyRewardAmount(_reward);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DILL\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PICKLE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"derivedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"kick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gauge", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ca1d047541fe183ae7b5d80766ec6d5ceeb942a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://48b1b0bae75d61a2f1ad82d823da216b61664185b66f318e405af7a35087aba5"}