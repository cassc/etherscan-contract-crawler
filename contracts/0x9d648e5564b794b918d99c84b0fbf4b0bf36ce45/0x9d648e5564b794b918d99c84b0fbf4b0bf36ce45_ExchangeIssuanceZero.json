{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/exchangeIssuance/ExchangeIssuanceZeroEx.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2022 Index Cooperative\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport { IBasicIssuanceModule } from \\\"../interfaces/IBasicIssuanceModule.sol\\\";\\nimport { IDebtIssuanceModule } from \\\"../interfaces/IDebtIssuanceModule.sol\\\";\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\nimport { PreciseUnitMath } from \\\"../lib/PreciseUnitMath.sol\\\";\\n\\n\\ncontract ExchangeIssuanceZeroEx is Ownable, ReentrancyGuard {\\n\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ISetToken;\\n\\n    struct IssuanceModuleData {\\n        bool isAllowed;\\n        bool isDebtIssuanceModule;\\n    }\\n\\n    /* ============ Constants ============== */\\n\\n    // Placeholder address to identify ETH where it is treated as if it was an ERC20 token\\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /* ============ State Variables ============ */\\n\\n    address public immutable WETH;\\n    IController public immutable setController;\\n    address public immutable swapTarget;\\n\\n    /* ============ Events ============ */\\n\\n    event ExchangeIssue(\\n        address indexed _recipient,     // The recipient address of the issued SetTokens\\n        ISetToken indexed _setToken,    // The issued SetToken\\n        IERC20 indexed _inputToken,     // The address of the input asset(ERC20/ETH) used to issue the SetTokens\\n        uint256 _amountInputToken,      // The amount of input tokens used for issuance\\n        uint256 _amountSetIssued        // The amount of SetTokens received by the recipient\\n    );\\n\\n    event ExchangeRedeem(\\n        address indexed _recipient,     // The recipient adress of the output tokens obtained for redemption\\n        ISetToken indexed _setToken,    // The redeemed SetToken\\n        IERC20 indexed _outputToken,    // The address of output asset(ERC20/ETH) received by the recipient\\n        uint256 _amountSetRedeemed,     // The amount of SetTokens redeemed for output tokens\\n        uint256 _amountOutputToken      // The amount of output tokens received by the recipient\\n    );\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier isValidModule(address _issuanceModule) {\\n        require(setController.isModule(_issuanceModule), \\\"ExchangeIssuance: INVALID ISSUANCE MODULE\\\");\\n         _;\\n    }\\n\\n    constructor(\\n        address _weth,\\n        IController _setController,\\n        address _swapTarget\\n    )\\n        public\\n    {\\n        setController = _setController;\\n\\n        WETH = _weth;\\n        swapTarget = _swapTarget;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Withdraw slippage to selected address\\n     *\\n     * @param _tokens    Addresses of tokens to withdraw, specifiy ETH_ADDRESS to withdraw ETH\\n     * @param _to        Address to send the tokens to\\n     */\\n    function withdrawTokens(IERC20[] calldata _tokens, address payable _to) external onlyOwner payable {\\n        for(uint256 i = 0; i < _tokens.length; i++) {\\n            if(address(_tokens[i]) == ETH_ADDRESS){\\n                _to.sendValue(address(this).balance);\\n            }\\n            else{\\n                _tokens[i].safeTransfer(_to, _tokens[i].balanceOf(address(this)));\\n            }\\n        }\\n    }\\n\\n    receive() external payable {\\n        // required for weth.withdraw() to work properly\\n        require(msg.sender == WETH, \\\"ExchangeIssuance: Direct deposits not allowed\\\");\\n    }\\n\\n    /* ============ Public Functions ============ */\\n\\n\\n    /**\\n     * Runs all the necessary approval functions required for a given ERC20 token.\\n     * This function can be called when a new token is added to a SetToken during a\\n     * rebalance.\\n     *\\n     * @param _token    Address of the token which needs approval\\n     * @param _spender  Address of the spender which will be approved to spend token. (Must be a whitlisted issuance module)\\n     */\\n    function approveToken(IERC20 _token, address _spender) public  isValidModule(_spender) {\\n        _safeApprove(_token, _spender, type(uint256).max);\\n    }\\n\\n    /**\\n     * Runs all the necessary approval functions required for a list of ERC20 tokens.\\n     *\\n     * @param _tokens    Addresses of the tokens which need approval\\n     * @param _spender   Address of the spender which will be approved to spend token. (Must be a whitlisted issuance module)\\n     */\\n    function approveTokens(IERC20[] calldata _tokens, address _spender) external {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            approveToken(_tokens[i], _spender);\\n        }\\n    }\\n\\n    /**\\n     * Runs all the necessary approval functions required before issuing\\n     * or redeeming a SetToken. This function need to be called only once before the first time\\n     * this smart contract is used on any particular SetToken.\\n     *\\n     * @param _setToken          Address of the SetToken being initialized\\n     * @param _issuanceModule    Address of the issuance module which will be approved to spend component tokens.\\n     */\\n    function approveSetToken(ISetToken _setToken, address _issuanceModule) external {\\n        address[] memory components = _setToken.getComponents();\\n        for (uint256 i = 0; i < components.length; i++) {\\n            approveToken(IERC20(components[i]), _issuanceModule);\\n        }\\n    }\\n\\n    /**\\n    * Issues an exact amount of SetTokens for given amount of input ERC20 tokens.\\n    * The excess amount of tokens is returned in an equivalent amount of ether.\\n    *\\n    * @param _setToken              Address of the SetToken to be issued\\n    * @param _inputToken            Address of the input token\\n    * @param _amountSetToken        Amount of SetTokens to issue\\n    * @param _maxAmountInputToken   Maximum amount of input tokens to be used to issue SetTokens.\\n    * @param _componentQuotes       The encoded 0x transactions to execute \\n    *\\n    * @return totalInputTokenSold   Amount of input token spent for issuance\\n    */\\n    function issueExactSetFromToken(\\n        ISetToken _setToken,\\n        IERC20 _inputToken,\\n        uint256 _amountSetToken,\\n        uint256 _maxAmountInputToken,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    )\\n        isValidModule(_issuanceModule)\\n        external\\n        nonReentrant\\n        returns (uint256)\\n    {\\n\\n        _inputToken.safeTransferFrom(msg.sender, address(this), _maxAmountInputToken);\\n        _safeApprove(_inputToken, swapTarget, _maxAmountInputToken);\\n\\n        uint256 totalInputTokenSold = _buyComponentsForInputToken(_setToken, _amountSetToken,  _componentQuotes, _inputToken, _issuanceModule, _isDebtIssuance);\\n        require(totalInputTokenSold <= _maxAmountInputToken, \\\"ExchangeIssuance: OVERSPENT TOKEN\\\");\\n\\n        IBasicIssuanceModule(_issuanceModule).issue(_setToken, _amountSetToken, msg.sender);\\n\\n        _returnExcessInputToken(_inputToken, _maxAmountInputToken, totalInputTokenSold);\\n\\n        emit ExchangeIssue(msg.sender, _setToken, _inputToken, _maxAmountInputToken, _amountSetToken);\\n        return totalInputTokenSold;\\n    }\\n\\n\\n    /**\\n    * Issues an exact amount of SetTokens for given amount of ETH.\\n    * The excess amount of tokens is returned in an equivalent amount of ether.\\n    *\\n    * @param _setToken              Address of the SetToken to be issued\\n    * @param _amountSetToken        Amount of SetTokens to issue\\n    * @param _componentQuotes       The encoded 0x transactions to execute\\n    *\\n    * @return amountEthReturn       Amount of ether returned to the caller\\n    */\\n    function issueExactSetFromETH(\\n        ISetToken _setToken,\\n        uint256 _amountSetToken,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    )\\n        isValidModule(_issuanceModule)\\n        external\\n        nonReentrant\\n        payable\\n        returns (uint256)\\n    {\\n        require(msg.value > 0, \\\"ExchangeIssuance: NO ETH SENT\\\");\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n        _safeApprove(IERC20(WETH), swapTarget, msg.value);\\n\\n        uint256 totalEthSold = _buyComponentsForInputToken(_setToken, _amountSetToken, _componentQuotes, IERC20(WETH), _issuanceModule, _isDebtIssuance);\\n\\n        require(totalEthSold <= msg.value, \\\"ExchangeIssuance: OVERSPENT ETH\\\");\\n        IBasicIssuanceModule(_issuanceModule).issue(_setToken, _amountSetToken, msg.sender);\\n\\n        uint256 amountEthReturn = msg.value.sub(totalEthSold);\\n        if (amountEthReturn > 0) {\\n            IWETH(WETH).withdraw(amountEthReturn);\\n            payable(msg.sender).sendValue(amountEthReturn);\\n        }\\n\\n        emit ExchangeIssue(msg.sender, _setToken, IERC20(ETH_ADDRESS), totalEthSold, _amountSetToken);\\n        return amountEthReturn; \\n    }\\n\\n    /**\\n     * Redeems an exact amount of SetTokens for an ERC20 token.\\n     * The SetToken must be approved by the sender to this contract.\\n     *\\n     * @param _setToken             Address of the SetToken being redeemed\\n     * @param _outputToken          Address of output token\\n     * @param _amountSetToken       Amount SetTokens to redeem\\n     * @param _minOutputReceive     Minimum amount of output token to receive\\n     * @param _componentQuotes      The encoded 0x transactions execute (components -> WETH).\\n     * @param _issuanceModule       Address of issuance Module to use \\n     * @param _isDebtIssuance       Flag indicating wether given issuance module is a debt issuance module\\n     *\\n     * @return outputAmount         Amount of output tokens sent to the caller\\n     */\\n    function redeemExactSetForToken(\\n        ISetToken _setToken,\\n        IERC20 _outputToken,\\n        uint256 _amountSetToken,\\n        uint256 _minOutputReceive,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    )\\n        isValidModule(_issuanceModule)\\n        external\\n        nonReentrant\\n        returns (uint256)\\n    {\\n\\n        uint256 outputAmount;\\n        _redeemExactSet(_setToken, _amountSetToken, _issuanceModule);\\n\\n        outputAmount = _sellComponentsForOutputToken(_setToken, _amountSetToken, _componentQuotes, _outputToken, _issuanceModule, _isDebtIssuance);\\n        require(outputAmount >= _minOutputReceive, \\\"ExchangeIssuance: INSUFFICIENT OUTPUT AMOUNT\\\");\\n\\n        // Transfer sender output token\\n        _outputToken.safeTransfer(msg.sender, outputAmount);\\n        // Emit event\\n        emit ExchangeRedeem(msg.sender, _setToken, _outputToken, _amountSetToken, outputAmount);\\n        // Return output amount\\n        return outputAmount;\\n    }\\n\\n    /**\\n     * Redeems an exact amount of SetTokens for ETH.\\n     * The SetToken must be approved by the sender to this contract.\\n     *\\n     * @param _setToken             Address of the SetToken being redeemed\\n     * @param _amountSetToken       Amount SetTokens to redeem\\n     * @param _minEthReceive        Minimum amount of Eth to receive\\n     * @param _componentQuotes      The encoded 0x transactions execute\\n     * @param _issuanceModule       Address of issuance Module to use \\n     * @param _isDebtIssuance       Flag indicating wether given issuance module is a debt issuance module\\n     *\\n     * @return outputAmount         Amount of output tokens sent to the caller\\n     */\\n    function redeemExactSetForETH(\\n        ISetToken _setToken,\\n        uint256 _amountSetToken,\\n        uint256 _minEthReceive,\\n        bytes[] memory _componentQuotes,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    )\\n        isValidModule(_issuanceModule)\\n        external\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        _redeemExactSet(_setToken, _amountSetToken, _issuanceModule);\\n        uint ethAmount = _sellComponentsForOutputToken(_setToken, _amountSetToken, _componentQuotes, IERC20(WETH), _issuanceModule, _isDebtIssuance);\\n        require(ethAmount >= _minEthReceive, \\\"ExchangeIssuance: INSUFFICIENT WETH RECEIVED\\\");\\n\\n        IWETH(WETH).withdraw(ethAmount);\\n        (payable(msg.sender)).sendValue(ethAmount);\\n\\n        emit ExchangeRedeem(msg.sender, _setToken, IERC20(ETH_ADDRESS), _amountSetToken, ethAmount);\\n        return ethAmount;\\n         \\n    }\\n    \\n\\n    /**\\n     * Sets a max approval limit for an ERC20 token, provided the current allowance\\n     * is less than the required allownce.\\n     *\\n     * @param _token    Token to approve\\n     * @param _spender  Spender address to approve\\n     */\\n    function _safeApprove(IERC20 _token, address _spender, uint256 _requiredAllowance) internal {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        if (allowance < _requiredAllowance) {\\n            _token.safeIncreaseAllowance(_spender, type(uint256).max - allowance);\\n        }\\n    }\\n\\n    /**\\n     * Issues an exact amount of SetTokens using WETH.\\n     * Acquires SetToken components by executing the 0x swaps whose callata is passed in _quotes.\\n     * Uses the acquired components to issue the SetTokens.\\n     *\\n     * @param _setToken             Address of the SetToken being issued\\n     * @param _amountSetToken       Amount of SetTokens to be issued\\n     * @param _quotes               The encoded 0x transaction calldata to execute against the 0x ExchangeProxy\\n     * @param _inputToken           Token to use to pay for issuance. Must be the sellToken of the 0x trades.\\n     * @param _issuanceModule       Issuance module to use for set token issuance.\\n     *\\n     * @return totalInputTokenSold  Total amount of input token spent on this issuance\\n     */\\n    function _buyComponentsForInputToken(\\n        ISetToken _setToken,\\n        uint256 _amountSetToken,\\n        bytes[] memory _quotes,\\n        IERC20 _inputToken,\\n        address _issuanceModule,\\n        bool _isDebtIssuance\\n    ) \\n    internal\\n    returns (uint256 totalInputTokenSold)\\n    {\\n        uint256 componentAmountBought;\\n\\n        (address[] memory components, uint256[] memory componentUnits) = getRequiredIssuanceComponents(_issuanceModule, _isDebtIssuance, _setToken, _amountSetToken);\\n\\n        uint256 inputTokenBalanceBefore = _inputToken.balanceOf(address(this));\\n        for (uint256 i = 0; i < components.length; i++) {\\n            address component = components[i];\\n            uint256 units = componentUnits[i];\\n\\n            // If the component is equal to the input token we don't have to trade\\n            if(component == address(_inputToken)) {\\n                totalInputTokenSold = totalInputTokenSold.add(units);\\n                componentAmountBought = units;\\n            }\\n            else {\\n                uint256 componentBalanceBefore = IERC20(component).balanceOf(address(this));\\n                _fillQuote(_quotes[i]);\\n                uint256 componentBalanceAfter = IERC20(component).balanceOf(address(this));\\n                componentAmountBought = componentBalanceAfter.sub(componentBalanceBefore);\\n                require(componentAmountBought >= units, \\\"ExchangeIssuance: UNDERBOUGHT COMPONENT\\\");\\n            }\\n        }\\n        uint256 inputTokenBalanceAfter = _inputToken.balanceOf(address(this));\\n        totalInputTokenSold = totalInputTokenSold.add(inputTokenBalanceBefore.sub(inputTokenBalanceAfter));\\n    }\\n\\n    /**\\n     * Redeems a given list of SetToken components for given token.\\n     *\\n     * @param _setToken             The set token being swapped.\\n     * @param _amountSetToken       The amount of set token being swapped.\\n     * @param _swaps                An array containing ZeroExSwap swaps.\\n     * @param _outputToken          The token for which to sell the index components must be the same as the buyToken that was specified when generating the swaps\\n     * @param _issuanceModule    Address of issuance Module to use \\n     * @param _isDebtIssuance    Flag indicating wether given issuance module is a debt issuance module\\n     *\\n     * @return totalOutputTokenBought  Total amount of output token received after liquidating all SetToken components\\n     */\\n    function _sellComponentsForOutputToken(ISetToken _setToken, uint256 _amountSetToken, bytes[] memory _swaps, IERC20 _outputToken, address _issuanceModule, bool _isDebtIssuance)\\n        internal\\n        returns (uint256 totalOutputTokenBought)\\n    {\\n        (address[] memory components, uint256[] memory componentUnits) = getRequiredRedemptionComponents(_issuanceModule, _isDebtIssuance, _setToken, _amountSetToken);\\n        uint256 outputTokenBalanceBefore = _outputToken.balanceOf(address(this));\\n        for (uint256 i = 0; i < _swaps.length; i++) {\\n            uint256 maxAmountSell = componentUnits[i];\\n\\n            uint256 componentAmountSold;\\n\\n            // If the component is equal to the output token we don't have to trade\\n            if(components[i] == address(_outputToken)) {\\n                totalOutputTokenBought = totalOutputTokenBought.add(maxAmountSell);\\n                componentAmountSold = maxAmountSell;\\n            }\\n            else {\\n                _safeApprove(IERC20(components[i]), address(swapTarget), maxAmountSell);\\n                uint256 componentBalanceBefore = IERC20(components[i]).balanceOf(address(this));\\n                _fillQuote(_swaps[i]);\\n                uint256 componentBalanceAfter = IERC20(components[i]).balanceOf(address(this));\\n                componentAmountSold = componentBalanceBefore.sub(componentBalanceAfter);\\n                require(maxAmountSell >= componentAmountSold, \\\"ExchangeIssuance: OVERSOLD COMPONENT\\\");\\n            }\\n\\n        }\\n        uint256 outputTokenBalanceAfter = _outputToken.balanceOf(address(this));\\n        totalOutputTokenBought = totalOutputTokenBought.add(outputTokenBalanceAfter.sub(outputTokenBalanceBefore));\\n    }\\n\\n    /**\\n     * Execute a 0x Swap quote\\n     *\\n     * @param _quote          Swap quote as returned by 0x API\\n     *\\n     */\\n    function _fillQuote(\\n        bytes memory _quote\\n    )\\n        internal\\n        \\n    {\\n\\n        (bool success, bytes memory returndata) = swapTarget.call(_quote);\\n\\n        // Forwarding errors including new custom errors\\n        // Taken from: https://ethereum.stackexchange.com/a/111187/73805\\n        if (!success) {\\n            if (returndata.length == 0) revert();\\n            assembly {\\n                revert(add(32, returndata), mload(returndata))\\n            }\\n        }\\n\\n    }\\n\\n    /**\\n     * Transfers given amount of set token from the sender and redeems it for underlying components.\\n     * Obtained component tokens are sent to this contract. \\n     *\\n     * @param _setToken     Address of the SetToken to be redeemed\\n     * @param _amount       Amount of SetToken to be redeemed\\n     */\\n    function _redeemExactSet(ISetToken _setToken, uint256 _amount, address _issuanceModule) internal returns (uint256) {\\n        _setToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        IBasicIssuanceModule(_issuanceModule).redeem(_setToken, _amount, address(this));\\n    }\\n\\n    /**\\n     * Returns excess input token\\n     *\\n     * @param _inputToken         Address of the input token to return\\n     * @param _receivedAmount     Amount received by the caller\\n     * @param _spentAmount        Amount spent for issuance\\n     */\\n    function _returnExcessInputToken(IERC20 _inputToken, uint256 _receivedAmount, uint256 _spentAmount) internal {\\n        uint256 amountTokenReturn = _receivedAmount.sub(_spentAmount);\\n        if (amountTokenReturn > 0) {\\n            _inputToken.safeTransfer(msg.sender,  amountTokenReturn);\\n        }\\n    }\\n\\n    /**\\n     * Returns component positions required for issuance \\n     *\\n     * @param _issuanceModule    Address of issuance Module to use \\n     * @param _isDebtIssuance    Flag indicating wether given issuance module is a debt issuance module\\n     * @param _setToken          Set token to issue\\n     * @param _amountSetToken    Amount of set token to issue\\n     */\\n    function getRequiredIssuanceComponents(address _issuanceModule, bool _isDebtIssuance, ISetToken _setToken, uint256 _amountSetToken) public view returns(address[] memory components, uint256[] memory positions) {\\n        if(_isDebtIssuance) { \\n            (components, positions, ) = IDebtIssuanceModule(_issuanceModule).getRequiredComponentIssuanceUnits(_setToken, _amountSetToken);\\n        }\\n        else {\\n            (components, positions) = IBasicIssuanceModule(_issuanceModule).getRequiredComponentUnitsForIssue(_setToken, _amountSetToken);\\n        }\\n\\n    }\\n\\n    /**\\n     * Returns component positions required for Redemption \\n     *\\n     * @param _issuanceModule    Address of issuance Module to use \\n     * @param _isDebtIssuance    Flag indicating wether given issuance module is a debt issuance module\\n     * @param _setToken          Set token to issue\\n     * @param _amountSetToken    Amount of set token to issue\\n     */\\n    function getRequiredRedemptionComponents(address _issuanceModule, bool _isDebtIssuance, ISetToken _setToken, uint256 _amountSetToken) public view returns(address[] memory components, uint256[] memory positions) {\\n        if(_isDebtIssuance) { \\n            (components, positions, ) = IDebtIssuanceModule(_issuanceModule).getRequiredComponentRedemptionUnits(_setToken, _amountSetToken);\\n        }\\n        else {\\n            components = _setToken.getComponents();\\n            positions = new uint256[](components.length);\\n            for(uint256 i = 0; i < components.length; i++) {\\n                uint256 unit = uint256(_setToken.getDefaultPositionRealUnit(components[i]));\\n                positions[i] = unit.preciseMul(_amountSetToken);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\ninterface IController {\\n    function addSet(address _setToken) external;\\n    function feeRecipient() external view returns(address);\\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\\n    function isModule(address _module) external view returns(bool);\\n    function isSet(address _setToken) external view returns(bool);\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n    function resourceId(uint256 _id) external view returns(address);\\n    function owner() external view returns(address);\\n    function addFactory(address _factory) external;\\n    function addModule(address _module) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity >=0.6.10;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\nimport { IManagerIssuanceHook } from \\\"./IManagerIssuanceHook.sol\\\";\\n\\ninterface IDebtIssuanceModule {\\n    function getRequiredComponentIssuanceUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external view returns (address[] memory, uint256[] memory, uint256[] memory);\\n    function getRequiredComponentRedemptionUnits(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external view returns (address[] memory, uint256[] memory, uint256[] memory);\\n    function issue(ISetToken _setToken, uint256 _quantity, address _to) external;\\n    function redeem(ISetToken _token, uint256 _quantity, address _to) external;\\n    function initialize(\\n        ISetToken _setToken,\\n        uint256 _maxManagerFee,\\n        uint256 _managerIssueFee,\\n        uint256 _managerRedeemFee,\\n        address _feeRecipient,\\n        IManagerIssuanceHook _managerIssuanceHook\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasicIssuanceModule.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity >=0.6.10;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IBasicIssuanceModule {\\n    function getRequiredComponentUnitsForIssue(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external view returns(address[] memory, uint256[] memory);\\n    function issue(ISetToken _setToken, uint256 _quantity, address _to) external;\\n    function redeem(ISetToken _token, uint256 _quantity, address _to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISetToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache License, Version 2.0\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and\\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex\\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n      int256 virtualUnit;\\n      address[] externalPositionModules;\\n      mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n      int256 virtualUnit;\\n      bytes data;\\n    }\\n\\n\\n    /* ============ Functions ============ */\\n\\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n\\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\\n    function getComponents() external view returns(address[] memory);\\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\\n    function isComponent(address _component) external view returns(bool);\\n\\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\\n\\n    function isInitializedModule(address _module) external view returns(bool);\\n    function isPendingModule(address _module) external view returns(bool);\\n    function isLocked() external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n        require(a != MIN_INT_256 || b != -1, \\\"Invalid input\\\");\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number. \\n     * (positive values are rounded towards zero and negative values are rounded away from 0). \\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number. \\n     * (positive values are rounded towards zero and negative values are rounded away from 0). \\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n    * @dev Performs the power on a specified value, reverts on overflow.\\n    */\\n    function safePower(\\n        uint256 a,\\n        uint256 pow\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(a > 0, \\\"Value must be positive\\\");\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++){\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache License, Version 2.0\\npragma solidity >=0.6.10;\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagerIssuanceHook.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IManagerIssuanceHook {\\n    function invokePreIssueHook(ISetToken _setToken, uint256 _issueQuantity, address _sender, address _to) external;\\n    function invokePreRedeemHook(ISetToken _setToken, uint256 _redeemQuantity, address _sender, address _to) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IController\",\"name\":\"_setController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapTarget\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountInputToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountSetIssued\",\"type\":\"uint256\"}],\"name\":\"ExchangeIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountSetRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOutputToken\",\"type\":\"uint256\"}],\"name\":\"ExchangeRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_issuanceModule\",\"type\":\"address\"}],\"name\":\"approveSetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuanceModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIssuance\",\"type\":\"bool\"},{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSetToken\",\"type\":\"uint256\"}],\"name\":\"getRequiredIssuanceComponents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"components\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"positions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuanceModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIssuance\",\"type\":\"bool\"},{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSetToken\",\"type\":\"uint256\"}],\"name\":\"getRequiredRedemptionComponents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"components\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"positions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSetToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_componentQuotes\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_issuanceModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIssuance\",\"type\":\"bool\"}],\"name\":\"issueExactSetFromETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSetToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountInputToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_componentQuotes\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_issuanceModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIssuance\",\"type\":\"bool\"}],\"name\":\"issueExactSetFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSetToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEthReceive\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_componentQuotes\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_issuanceModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIssuance\",\"type\":\"bool\"}],\"name\":\"redeemExactSetForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSetToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutputReceive\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_componentQuotes\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_issuanceModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDebtIssuance\",\"type\":\"bool\"}],\"name\":\"redeemExactSetForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setController\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ExchangeIssuanceZeroEx", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d2463675a099101e36d85278494268261a66603a000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}