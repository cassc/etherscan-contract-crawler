{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.6.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface Token {\r\n    function approve(address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ninterface LegacyToken {\r\n    function transfer(address, uint) external;\r\n}\r\n\r\ninterface StakingPool {\r\n    function disburseRewardTokens() external;\r\n    function burnRewardTokens() external;\r\n    function transferOwnership(address) external;\r\n    function transferAnyERC20Token(address, address, uint) external;\r\n    function transferAnyOldERC20Token(address, address, uint) external;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n    \r\n    /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyPendingOwner() {\r\n        assert(msg.sender != address(0));\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        pendingOwner = _newOwner;\r\n    }\r\n  \r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() onlyPendingOwner public {\r\n        _transferOwnership(pendingOwner);\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Governance\r\n * @dev Governance smart contract for staking pools\r\n * Takes in DYP as votes\r\n * Allows addition and removal of votes during a proposal is open\r\n * Allows withdrawal of all dyp once the latest voted proposal of a user is closed\r\n * Has a QUORUM requirement for proposals to be executed\r\n * CONTRACT VARIABLES must be changed to appropriate values before live deployment\r\n */\r\ncontract Governance is Ownable {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n    // Contracts are not allowed to deposit, claim or withdraw\r\n    modifier noContractsAllowed() {\r\n        require(!(address(msg.sender).isContract()) && tx.origin == msg.sender, \"No Contracts Allowed!\");\r\n        _;\r\n    }\r\n    \r\n    // ============== CONTRACT VARIABLES ==============\r\n    \r\n    // voting token contract address\r\n    address public constant TRUSTED_TOKEN_ADDRESS = 0x961C8c0B1aaD0c0b10a51FeF6a867E3091BCef17;\r\n    \r\n    // minimum number of votes required for a result to be valid\r\n    // 1 token = 1 vote\r\n    uint public QUORUM = 25000e18;\r\n    \r\n    uint public constant ADMIN_FEATURES_EXPIRE_AFTER = 180 days;\r\n    \r\n    // Admin can transfer out Governance Tokens from this contract ADMIN_CAN_CLAIM_AFTER\r\n    // duration since creation\r\n    uint public constant ADMIN_CAN_CLAIM_AFTER = 395 days;\r\n    \r\n    // minimum number of tokens required to initialize a proposal\r\n    uint public MIN_BALANCE_TO_INIT_PROPOSAL = 5000e18;\r\n    \r\n    // duration since proposal creation till users can vote\r\n    uint public constant VOTE_DURATION = 3 days;\r\n    \r\n    // duration after voting, since a proposal has passed\r\n    // during which the proposed action may be executed\r\n    uint public constant RESULT_EXECUTION_ALLOWANCE_PERIOD = 3 days;\r\n    \r\n    // ============ END CONTRACT VARIABLES ============\r\n    \r\n    uint public immutable contractStartTime;\r\n    \r\n    event PoolCallSucceeded(StakingPool);\r\n    event PoolCallReverted(StakingPool, string);\r\n    event PoolCallReverted(StakingPool, bytes);\r\n    \r\n    enum PoolGroupName {\r\n        WETH,\r\n        WBTC,\r\n        USDT,\r\n        USDC\r\n    }\r\n    \r\n    enum Action {\r\n        DISBURSE_OR_BURN,\r\n        UPGRADE_GOVERNANCE,\r\n        CHANGE_QUORUM,\r\n        TEXT_PROPOSAL,\r\n        CHANGE_MIN_BALANCE_TO_INIT_PROPOSAL\r\n    }\r\n    \r\n    enum Option {\r\n        ONE, // disburse | yes\r\n        TWO // burn | no\r\n    }\r\n    \r\n    mapping (PoolGroupName => StakingPool[4]) public hardcodedStakingPools;\r\n    \r\n    constructor() public {\r\n        contractStartTime = now;\r\n        \r\n        hardcodedStakingPools[PoolGroupName.WETH][0] = StakingPool(0xa7d6F5fa9b0be0e98b3b40E6aC884e53F2F9460e);\r\n        hardcodedStakingPools[PoolGroupName.WETH][1] = StakingPool(0x0b0A544AE6131801522E3aC1FBAc6D311094c94c);\r\n        hardcodedStakingPools[PoolGroupName.WETH][2] = StakingPool(0x16cAaD63BDFC3Ec4A2850336B28efE17e802b896);\r\n        hardcodedStakingPools[PoolGroupName.WETH][3] = StakingPool(0x512FF8739d39e55d75d80046921E7dE20c3e9BFf);\r\n        \r\n        hardcodedStakingPools[PoolGroupName.WBTC][0] = StakingPool(0xeF71DE5Cb40f7985FEb92AA49D8e3E84063Af3BB);\r\n        hardcodedStakingPools[PoolGroupName.WBTC][1] = StakingPool(0x8B0e324EEdE360CaB670a6AD12940736d74f701e);\r\n        hardcodedStakingPools[PoolGroupName.WBTC][2] = StakingPool(0x78e2dA2eda6dF49BaE46E3B51528BAF5c106e654);\r\n        hardcodedStakingPools[PoolGroupName.WBTC][3] = StakingPool(0x350F3fE979bfad4766298713c83b387C2D2D7a7a);\r\n        \r\n        hardcodedStakingPools[PoolGroupName.USDT][0] = StakingPool(0x4a76Fc15D3fbf3855127eC5DA8AAf02DE7ca06b3);\r\n        hardcodedStakingPools[PoolGroupName.USDT][1] = StakingPool(0xF4abc60a08B546fA879508F4261eb4400B55099D);\r\n        hardcodedStakingPools[PoolGroupName.USDT][2] = StakingPool(0x13F421Aa823f7D90730812a33F8Cac8656E47dfa);\r\n        hardcodedStakingPools[PoolGroupName.USDT][3] = StakingPool(0x86690BbE7a9683A8bAd4812C2e816fd17bC9715C);\r\n        \r\n        hardcodedStakingPools[PoolGroupName.USDC][0] = StakingPool(0x2b5D7a865A3888836d15d69dCCBad682663DCDbb);\r\n        hardcodedStakingPools[PoolGroupName.USDC][1] = StakingPool(0xa52250f98293c17C894d58cf4f78c925dC8955d0);\r\n        hardcodedStakingPools[PoolGroupName.USDC][2] = StakingPool(0x924BECC8F4059987E4bc4B741B7C354FF52c25e4);\r\n        hardcodedStakingPools[PoolGroupName.USDC][3] = StakingPool(0xbE528593781988974D83C2655CBA4c45FC75c033);\r\n    }\r\n    \r\n    \r\n    \r\n    // proposal id => action\r\n    mapping (uint => Action) public actions;\r\n    \r\n    // proposal id => option one votes\r\n    mapping (uint => uint) public optionOneVotes;\r\n    \r\n    // proposal id => option two votes\r\n    mapping (uint => uint) public optionTwoVotes;\r\n    \r\n    // proposal id => staking pool\r\n    mapping (uint => StakingPool[]) public stakingPools;\r\n    \r\n    // proposal id => newGovernance\r\n    mapping (uint => address) public newGovernances;\r\n    \r\n    // proposal id => unix time for proposal start\r\n    mapping (uint => uint) public proposalStartTime;\r\n    \r\n    // proposal id => bool\r\n    mapping (uint => bool) public isProposalExecuted;\r\n    \r\n    mapping (uint => uint) public newQuorums;\r\n    mapping (uint => uint) public newMinBalances;\r\n    mapping (uint => string) public proposalTexts;\r\n    \r\n    // address user => total deposited DYP\r\n    mapping (address => uint) public totalDepositedTokens;\r\n    \r\n    // address user => uint proposal id => uint vote amounts\r\n    mapping (address => mapping (uint => uint)) public votesForProposalByAddress;\r\n    \r\n    // address user => uint proposal id => Option voted for option\r\n    mapping (address => mapping (uint => Option)) public votedForOption;\r\n    \r\n    // address user => start time for the latest proposal the user voted on\r\n    mapping (address => uint) public lastVotedProposalStartTime;\r\n    \r\n    // uint last proposal id\r\n    // proposal ids start at 1\r\n    uint public lastIndex = 0;\r\n    \r\n    // view function to get proposal details\r\n    function getProposal(uint proposalId) external view returns (\r\n        uint _proposalId, \r\n        Action _proposalAction,\r\n        uint _optionOneVotes,\r\n        uint _optionTwoVotes,\r\n        StakingPool[] memory _stakingPool,\r\n        address _newGovernance,\r\n        uint _proposalStartTime,\r\n        bool _isProposalExecuted,\r\n        uint _newQuorum,\r\n        string memory _proposalText,\r\n        uint _newMinBalance\r\n        ) {\r\n        _proposalId = proposalId;\r\n        _proposalAction = actions[proposalId];\r\n        _optionOneVotes = optionOneVotes[proposalId];\r\n        _optionTwoVotes = optionTwoVotes[proposalId];\r\n        _stakingPool = stakingPools[proposalId];\r\n        _newGovernance = newGovernances[proposalId];\r\n        _proposalStartTime = proposalStartTime[proposalId];\r\n        _isProposalExecuted = isProposalExecuted[proposalId];\r\n        _newQuorum = newQuorums[proposalId];\r\n        _proposalText = proposalTexts[proposalId];\r\n        _newMinBalance = newMinBalances[proposalId];\r\n    }\r\n    \r\n    function changeQuorum(uint newQuorum) external onlyOwner {\r\n        require(now < contractStartTime.add(ADMIN_FEATURES_EXPIRE_AFTER), \"Change quorum feature expired!\");\r\n        QUORUM = newQuorum;\r\n    }\r\n    \r\n    function changeMinBalanceToInitProposal(uint newMinBalanceToInitProposal) external onlyOwner {\r\n        require(now < contractStartTime.add(ADMIN_FEATURES_EXPIRE_AFTER), \"This admin feature has expired!\");\r\n        MIN_BALANCE_TO_INIT_PROPOSAL = newMinBalanceToInitProposal;\r\n    }\r\n    \r\n    // Any DYP holder with a minimum required DYP balance may initiate a proposal\r\n    // with the TEXT_PROPOSAL action for a given staking pool\r\n    function proposeText(string memory text) external noContractsAllowed {\r\n        require(Token(TRUSTED_TOKEN_ADDRESS).balanceOf(msg.sender) >= MIN_BALANCE_TO_INIT_PROPOSAL, \"Insufficient Governance Token Balance\");\r\n        lastIndex = lastIndex.add(1);\r\n        proposalStartTime[lastIndex] = now;\r\n        actions[lastIndex] = Action.TEXT_PROPOSAL;\r\n        proposalTexts[lastIndex] = text;\r\n    }\r\n    \r\n    // Any DYP holder with a minimum required DYP balance may initiate a proposal\r\n    // with the DISBURSE_OR_BURN action for a given staking pool\r\n    function proposeDisburseOrBurn(PoolGroupName poolGroupName) external noContractsAllowed {\r\n        require(poolGroupName == PoolGroupName.WETH ||\r\n                poolGroupName == PoolGroupName.WBTC ||\r\n                poolGroupName == PoolGroupName.USDT ||\r\n                poolGroupName == PoolGroupName.USDC, \"Invalid Pool Group Name!\");\r\n        require(Token(TRUSTED_TOKEN_ADDRESS).balanceOf(msg.sender) >= MIN_BALANCE_TO_INIT_PROPOSAL, \"Insufficient Governance Token Balance\");\r\n        lastIndex = lastIndex.add(1);\r\n        \r\n        stakingPools[lastIndex] = hardcodedStakingPools[poolGroupName];\r\n        \r\n        proposalStartTime[lastIndex] = now;\r\n        actions[lastIndex] = Action.DISBURSE_OR_BURN;\r\n    }\r\n    \r\n    // Admin may initiate a proposal\r\n    // with the UPGRADE_GOVERNANCE action for a given staking pool\r\n    function proposeUpgradeGovernance(PoolGroupName poolGroupName, address newGovernance) external noContractsAllowed onlyOwner {\r\n        require(poolGroupName == PoolGroupName.WETH ||\r\n                poolGroupName == PoolGroupName.WBTC ||\r\n                poolGroupName == PoolGroupName.USDT ||\r\n                poolGroupName == PoolGroupName.USDC, \"Invalid Pool Group Name!\");\r\n                \r\n        require(Token(TRUSTED_TOKEN_ADDRESS).balanceOf(msg.sender) >= MIN_BALANCE_TO_INIT_PROPOSAL, \"Insufficient Governance Token Balance\");\r\n        lastIndex = lastIndex.add(1);\r\n        \r\n        stakingPools[lastIndex] = hardcodedStakingPools[poolGroupName];\r\n        \r\n        newGovernances[lastIndex] = newGovernance;\r\n        proposalStartTime[lastIndex] = now;\r\n        actions[lastIndex] = Action.UPGRADE_GOVERNANCE;\r\n    }\r\n    \r\n    // Admin may initiate a proposal\r\n    // with the CHANGE_QUORUM action for the Governance\r\n    function proposeNewQuorum(uint newQuorum) external noContractsAllowed onlyOwner {\r\n        require(Token(TRUSTED_TOKEN_ADDRESS).balanceOf(msg.sender) >= MIN_BALANCE_TO_INIT_PROPOSAL, \"Insufficient Governance Token Balance\");\r\n        lastIndex = lastIndex.add(1);\r\n        newQuorums[lastIndex] = newQuorum;\r\n        proposalStartTime[lastIndex] = now;\r\n        actions[lastIndex] = Action.CHANGE_QUORUM;\r\n    }\r\n    \r\n    // Admin may initiate a proposal\r\n    // with the CHANGE_MIN_BALANCE_TO_INIT_PROPOSAL action for the Governance\r\n    function proposeNewMinBalanceToInitProposal(uint newMinBalance) external noContractsAllowed onlyOwner {\r\n        require(Token(TRUSTED_TOKEN_ADDRESS).balanceOf(msg.sender) >= MIN_BALANCE_TO_INIT_PROPOSAL, \"Insufficient Governance Token Balance\");\r\n        lastIndex = lastIndex.add(1);\r\n        newMinBalances[lastIndex] = newMinBalance;\r\n        proposalStartTime[lastIndex] = now;\r\n        actions[lastIndex] = Action.CHANGE_MIN_BALANCE_TO_INIT_PROPOSAL;\r\n    }\r\n    \r\n    // Any DYP holder may add votes for a particular open proposal, \r\n    // with options YES / NO | DISBURSE / BURN | ONE / TWO\r\n    // with `amount` DYP, each DYP unit corresponds to one vote unit\r\n    \r\n    // If user has already voted for a proposal with an option,\r\n    // user may not add votes with another option, \r\n    // they will need to add votes for the same option\r\n    function addVotes(uint proposalId, Option option, uint amount) external noContractsAllowed {\r\n        require(amount > 0, \"Cannot add 0 votes!\");\r\n        require(isProposalOpen(proposalId), \"Proposal is closed!\");\r\n        \r\n        require(Token(TRUSTED_TOKEN_ADDRESS).transferFrom(msg.sender, address(this), amount), \"transferFrom failed!\");\r\n        \r\n        // if user is voting for this proposal first time\r\n        if (votesForProposalByAddress[msg.sender][proposalId] == 0) {\r\n            votedForOption[msg.sender][proposalId] = option;\r\n        } else {\r\n            if (votedForOption[msg.sender][proposalId] != option) {\r\n                revert(\"Cannot vote for both options!\");\r\n            }\r\n        }\r\n        \r\n        if (option == Option.ONE) {\r\n            optionOneVotes[proposalId] = optionOneVotes[proposalId].add(amount);\r\n        } else {\r\n            optionTwoVotes[proposalId] = optionTwoVotes[proposalId].add(amount);\r\n        }\r\n        totalDepositedTokens[msg.sender] = totalDepositedTokens[msg.sender].add(amount);\r\n        votesForProposalByAddress[msg.sender][proposalId] = votesForProposalByAddress[msg.sender][proposalId].add(amount);\r\n        \r\n        if (lastVotedProposalStartTime[msg.sender] < proposalStartTime[proposalId]) {\r\n            lastVotedProposalStartTime[msg.sender] = proposalStartTime[proposalId];\r\n        }\r\n    }\r\n    \r\n    // Any voter may remove their votes (DYP) from any proposal they voted for \r\n    // only when the proposal is open - removing votes refund DYP to user and deduct their votes\r\n    function removeVotes(uint proposalId, uint amount) external noContractsAllowed {\r\n        require(amount > 0, \"Cannot remove 0 votes!\");\r\n        require(isProposalOpen(proposalId), \"Proposal is closed!\");\r\n        \r\n        require(amount <= votesForProposalByAddress[msg.sender][proposalId], \"Cannot remove more tokens than deposited!\");\r\n        \r\n        votesForProposalByAddress[msg.sender][proposalId] = votesForProposalByAddress[msg.sender][proposalId].sub(amount);\r\n        totalDepositedTokens[msg.sender] = totalDepositedTokens[msg.sender].sub(amount);\r\n        \r\n        if (votedForOption[msg.sender][proposalId] == Option.ONE) {\r\n            optionOneVotes[proposalId] = optionOneVotes[proposalId].sub(amount);\r\n        } else {\r\n            optionTwoVotes[proposalId] = optionTwoVotes[proposalId].sub(amount);\r\n        }\r\n        \r\n        require(Token(TRUSTED_TOKEN_ADDRESS).transfer(msg.sender, amount), \"transfer failed\");\r\n    }\r\n\r\n    // After the latest proposal the user voted for, is closed for voting,\r\n    // The user may remove all DYP they added to this contract\r\n    function withdrawAllTokens() external noContractsAllowed {\r\n        require(now > lastVotedProposalStartTime[msg.sender].add(VOTE_DURATION), \"Tokens are still in voting!\");\r\n        require(Token(TRUSTED_TOKEN_ADDRESS).transfer(msg.sender, totalDepositedTokens[msg.sender]), \"transfer failed!\");\r\n        totalDepositedTokens[msg.sender] = 0;\r\n    }\r\n    \r\n    // After votes for a proposal are closed, the proposal may be executed by anyone\r\n    // If QUORUM is not reached, transaction must revert\r\n    // If winning option has more votes than losing option, winning action is executed\r\n    // Else losing action is executed\r\n    // Each proposal may be executed only once\r\n    function executeProposal(uint proposalId) external noContractsAllowed {\r\n        require (actions[proposalId] != Action.TEXT_PROPOSAL, \"Cannot programmatically execute text proposals\");\r\n        require (optionOneVotes[proposalId] != optionTwoVotes[proposalId], \"This is a TIE! Cannot execute!\");\r\n        require (isProposalExecutible(proposalId), \"Proposal Expired!\");\r\n        \r\n        isProposalExecuted[proposalId] = true;\r\n    \r\n        Option winningOption;\r\n        uint winningOptionVotes;\r\n        \r\n        if (optionOneVotes[proposalId] > optionTwoVotes[proposalId]) {\r\n            winningOption = Option.ONE;\r\n            winningOptionVotes = optionOneVotes[proposalId];\r\n        } else {\r\n            winningOption = Option.TWO;\r\n            winningOptionVotes = optionTwoVotes[proposalId];\r\n        }\r\n        \r\n        // no action will be taken if winningOptionVotes are less than QUORUM\r\n        if (winningOptionVotes < QUORUM) {\r\n            revert(\"QUORUM not reached!\");\r\n        }\r\n        \r\n        if (actions[proposalId] == Action.DISBURSE_OR_BURN) {\r\n            if (winningOption == Option.ONE) {\r\n                for (uint8 i = 0; i < 4; i++) {\r\n                    StakingPool pool = stakingPools[proposalId][i];\r\n                    try pool.disburseRewardTokens() {\r\n                        emit PoolCallSucceeded(pool);\r\n                    } catch Error(string memory reason) {\r\n                        emit PoolCallReverted(pool, reason);\r\n                    } catch (bytes memory lowLevelData) {\r\n                        emit PoolCallReverted(pool, lowLevelData);\r\n                    }\r\n                }\r\n            } else {\r\n                for (uint8 i = 0; i < 4; i++) {\r\n                    StakingPool pool = stakingPools[proposalId][i];\r\n                    try pool.burnRewardTokens() {\r\n                        emit PoolCallSucceeded(pool);\r\n                    } catch Error(string memory reason) {\r\n                        emit PoolCallReverted(pool, reason);\r\n                    } catch (bytes memory lowLevelData) {\r\n                        emit PoolCallReverted(pool, lowLevelData);\r\n                    }\r\n                }\r\n            }\r\n        } else if (actions[proposalId] == Action.UPGRADE_GOVERNANCE) {\r\n            if (winningOption == Option.ONE) {\r\n                for (uint8 i = 0; i < 4; i++) {\r\n                    StakingPool pool = stakingPools[proposalId][i];\r\n                    try pool.transferOwnership(newGovernances[proposalId]) {\r\n                        emit PoolCallSucceeded(pool);\r\n                    } catch Error(string memory reason) {\r\n                        emit PoolCallReverted(pool, reason);\r\n                    } catch (bytes memory lowLevelData) {\r\n                        emit PoolCallReverted(pool, lowLevelData);\r\n                    }\r\n                }\r\n            }\r\n        } else if (actions[proposalId] == Action.CHANGE_QUORUM) {\r\n            if (winningOption == Option.ONE) {\r\n                QUORUM = newQuorums[proposalId];\r\n            }\r\n        } else if (actions[proposalId] == Action.CHANGE_MIN_BALANCE_TO_INIT_PROPOSAL) {\r\n            if (winningOption == Option.ONE) {\r\n                MIN_BALANCE_TO_INIT_PROPOSAL = newMinBalances[proposalId];\r\n            }\r\n        }\r\n    }\r\n    \r\n    // view function to know whether voting for a particular proposal is open\r\n    function isProposalOpen(uint proposalId) public view returns (bool) {\r\n        if (now < proposalStartTime[proposalId].add(VOTE_DURATION)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // View function to know whether voting for a proposal is closed AND \r\n    // The proposal is within the RESULT_EXECUTION_ALLOWANCE_PERIOD AND\r\n    // Has not been executed yet\r\n    function isProposalExecutible(uint proposalId) public view returns (bool) {\r\n        if ((!isProposalOpen(proposalId)) && \r\n            (now < proposalStartTime[proposalId].add(VOTE_DURATION).add(RESULT_EXECUTION_ALLOWANCE_PERIOD)) &&\r\n            !isProposalExecuted[proposalId] &&\r\n            optionOneVotes[proposalId] != optionTwoVotes[proposalId]) {\r\n                return true;\r\n            }\r\n        return false;\r\n    }\r\n    \r\n    // function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\r\n    // Admin cannot transfer out reward tokens from this smart contract\r\n    function transferAnyERC20Token(address tokenAddress, address recipient, uint amount) external onlyOwner {\r\n        require (tokenAddress != TRUSTED_TOKEN_ADDRESS || now > contractStartTime.add(ADMIN_CAN_CLAIM_AFTER), \"Cannot Transfer Out main tokens!\");\r\n        require (Token(tokenAddress).transfer(recipient, amount), \"Transfer failed!\");\r\n    }\r\n    \r\n    // function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\r\n    // Admin cannot transfer out reward tokens from this smart contract\r\n    function transferAnyLegacyERC20Token(address tokenAddress, address recipient, uint amount) external onlyOwner {\r\n        require (tokenAddress != TRUSTED_TOKEN_ADDRESS || now > contractStartTime.add(ADMIN_CAN_CLAIM_AFTER), \"Cannot Transfer Out main tokens!\");\r\n        LegacyToken(tokenAddress).transfer(recipient, amount);\r\n    }\r\n    \r\n    // function to allow admin to claim *other* ERC20 tokens sent to pool contract (by mistake)\r\n    // Admin cannot transfer out reward tokens from this smart contract\r\n    function transferAnyERC20TokenFromPool(address pool, address tokenAddress, address recipient, uint amount) external onlyOwner {\r\n        StakingPool(pool).transferAnyERC20Token(tokenAddress, recipient, amount);\r\n    }\r\n    \r\n    // function to allow admin to claim *other* ERC20 tokens sent to pool contract (by mistake)\r\n    // Admin cannot transfer out reward tokens from this smart contract\r\n    function transferAnyLegacyERC20TokenFromPool(address pool, address tokenAddress, address recipient, uint amount) external onlyOwner {\r\n        StakingPool(pool).transferAnyOldERC20Token(tokenAddress, recipient, amount);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"PoolCallReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"PoolCallReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PoolCallSucceeded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_CAN_CLAIM_AFTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_FEATURES_EXPIRE_AFTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BALANCE_TO_INIT_PROPOSAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUORUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESULT_EXECUTION_ALLOWANCE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTED_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actions\",\"outputs\":[{\"internalType\":\"enum Governance.Action\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum Governance.Option\",\"name\":\"option\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinBalanceToInitProposal\",\"type\":\"uint256\"}],\"name\":\"changeMinBalanceToInitProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"changeQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum Governance.Action\",\"name\":\"_proposalAction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_optionOneVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_optionTwoVotes\",\"type\":\"uint256\"},{\"internalType\":\"contract StakingPool[]\",\"name\":\"_stakingPool\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isProposalExecuted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_proposalText\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_newMinBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Governance.PoolGroupName\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hardcodedStakingPools\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isProposalExecutible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"isProposalOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastVotedProposalStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newGovernances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newMinBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newQuorums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionOneVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionTwoVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalTexts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Governance.PoolGroupName\",\"name\":\"poolGroupName\",\"type\":\"uint8\"}],\"name\":\"proposeDisburseOrBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinBalance\",\"type\":\"uint256\"}],\"name\":\"proposeNewMinBalanceToInitProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"proposeNewQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"proposeText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Governance.PoolGroupName\",\"name\":\"poolGroupName\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"proposeUpgradeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"contract StakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20TokenFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyLegacyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyLegacyERC20TokenFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedForOption\",\"outputs\":[{\"internalType\":\"enum Governance.Option\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votesForProposalByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Governance", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca0a6ace76e2fba50d8dc98ea05bed9b965f65485955705e0a0b0edac736c097"}