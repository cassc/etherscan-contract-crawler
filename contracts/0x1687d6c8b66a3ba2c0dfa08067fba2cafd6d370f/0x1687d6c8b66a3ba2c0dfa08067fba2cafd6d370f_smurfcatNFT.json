{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface Receiver {\r\n\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\r\n}\r\n\r\ncontract Metadata {\r\n\r\n\tstring public name = \"Descendants of Smurfcat\";\r\n\tstring public symbol = \"DoS\";\r\n\r\n\tstring public baseURI = \"https://arweave.net/-mckyPjOnwlkTN19bGRRkqhl6Y-OqLDy3mBjv9ssV_c/\";\r\n\r\n\taddress public owner;\r\n\r\n\tconstructor() {\r\n\t\towner = tx.origin;\r\n\t}\r\n\r\n\tfunction setBaseURI(string memory _baseURI) external {\r\n\t\trequire(msg.sender == owner);\r\n\t\tbaseURI = _baseURI;\r\n\t}\r\n\r\n\r\n\tfunction tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n\t\treturn string(abi.encodePacked(baseURI, _uint2str(_tokenId), \".json\"));\r\n\t}\r\n\r\n\tfunction _uint2str(uint256 _value) internal pure returns (string memory) {\r\n\t\tuint256 _digits = 1;\r\n\t\tuint256 _n = _value;\r\n\t\twhile (_n > 9) {\r\n\t\t\t_n /= 10;\r\n\t\t\t_digits++;\r\n\t\t}\r\n\t\tbytes memory _out = new bytes(_digits);\r\n\t\tfor (uint256 i = 0; i < _out.length; i++) {\r\n\t\t\tuint256 _dec = (_value / (10**(_out.length - i - 1))) % 10;\r\n\t\t\t_out[i] = bytes1(uint8(_dec) + 48);\r\n\t\t}\r\n\t\treturn string(_out);\r\n\t}\r\n}\r\n\r\ncontract smurfcatNFT {\r\n\r\n\tuint256 constant public MAX_SUPPLY = 3333;\r\n\tuint256 constant public MINT_COST = 0.01 ether;\r\n\r\n\tuint256 constant private PAID_SUPPLY = 300;\r\n\tuint256 constant private DEV_TOKENS = 33;\r\n\tuint256 constant private OPEN_MINT_DELAY = 12 hours;\r\n\tbytes32 constant private FREE_MERKLE_ROOT = 0x97065a5c49b1664430261a060b4d4e90253022606b49142c350dc95a2cf86958;\r\n\tbytes32 constant private PAID_MERKLE_ROOT = 0x943cd45d71c324d5ade31d70c06a95a2c6d32447b01934157edd060721453f4c;\r\n\r\n\tstruct User {\r\n\t\tbool freeMinted;\r\n\t\tbool paidMinted;\r\n\t\tuint240 balance;\r\n\t\tmapping(address => bool) approved;\r\n\t}\r\n\r\n\tstruct Token {\r\n\t\taddress owner;\r\n\t\taddress approved;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint128 totalSupply;\r\n\t\tuint128 paidSupply;\r\n\t\tmapping(uint256 => Token) list;\r\n\t\tmapping(address => User) users;\r\n\t\tMetadata metadata;\r\n\t\taddress owner;\r\n\t\tuint256 startTime;\r\n\t}\r\n\tInfo private info;\r\n\r\n\tmapping(bytes4 => bool) public supportsInterface;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\tevent Mint(address indexed owner, uint256 indexed tokenId);\r\n\tevent FreeClaim(address indexed account, uint256 tokens);\r\n\tevent PaidClaim(address indexed account);\r\n\tevent BatchMetadataUpdate(uint256 from, uint256 to);\r\n\r\n\r\n\tmodifier _onlyOwner() {\r\n\t\trequire(msg.sender == owner());\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\tconstructor() {\r\n\t\tinfo.metadata = new Metadata();\r\n\t\tinfo.owner = msg.sender;\r\n\t\tinfo.startTime = block.timestamp;\r\n\t\tsupportsInterface[0x01ffc9a7] = true; // ERC-165\r\n\t\tsupportsInterface[0x80ac58cd] = true; // ERC-721\r\n\t\tsupportsInterface[0x5b5e139f] = true; // Metadata\r\n\r\n\t\tfor (uint256 i = 0; i < DEV_TOKENS; i++) {\r\n\t\t\t_mint(owner());\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setOwner(address _owner) external _onlyOwner {\r\n\t\tinfo.owner = _owner;\r\n\t}\r\n\r\n\tfunction setMetadata(Metadata _metadata) external _onlyOwner {\r\n\t\tinfo.metadata = _metadata;\r\n\t}\r\n\r\n\tfunction ownerWithdraw() external _onlyOwner {\r\n\t\tuint256 _balance = address(this).balance;\r\n\t\trequire(_balance > 0);\r\n\t\tpayable(msg.sender).transfer(_balance);\r\n\t}\r\n\r\n\tfunction forceUpdateAllMetadata() external _onlyOwner {\r\n\t\temit BatchMetadataUpdate(0, type(uint256).max);\r\n\t}\r\n\r\n\t\r\n\treceive() external payable {\r\n\t\tmintMany(msg.value / MINT_COST);\r\n\t}\r\n\t\r\n\tfunction mint() external payable {\r\n\t\tmintMany(1);\r\n\t}\r\n\r\n\tfunction mintMany(uint256 _tokens) public payable {\r\n\t\trequire(openMintEnabled());\r\n\t\trequire(_tokens > 0);\r\n\t\tuint256 _cost = _tokens * MINT_COST;\r\n\t\trequire(msg.value >= _cost);\r\n\t\tfor (uint256 i = 0; i < _tokens; i++) {\r\n\t\t\t_mint(msg.sender);\r\n\t\t}\r\n\t\tif (msg.value > _cost) {\r\n\t\t\tpayable(msg.sender).transfer(msg.value - _cost);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction mint(address _account, bytes32[] calldata _proof) external payable {\r\n\t\trequire(msg.value == MINT_COST);\r\n\t\trequire(!hasPaidMinted(_account));\r\n\t\trequire(_verify(_proof, keccak256(abi.encodePacked(_account)), PAID_MERKLE_ROOT));\r\n\t\tinfo.paidSupply++;\r\n\t\trequire(paidSupply() <= PAID_SUPPLY);\r\n\t\tinfo.users[_account].paidMinted = true;\r\n\t\t_mint(_account);\r\n\t\temit PaidClaim(_account);\r\n\t}\r\n\r\n\tfunction claim(address _account, uint256 _tokens, bytes32[] calldata _proof) external {\r\n\t\trequire(!hasFreeMinted(_account));\r\n\t\trequire(_verify(_proof, keccak256(abi.encodePacked(_account, _tokens)), FREE_MERKLE_ROOT));\r\n\t\tinfo.users[_account].freeMinted = true;\r\n\t\tfor (uint256 i = 0; i < _tokens; i++) {\r\n\t\t\t_mint(_account);\r\n\t\t}\r\n\t\temit FreeClaim(_account, _tokens);\r\n\t}\r\n\t\r\n\tfunction approve(address _approved, uint256 _tokenId) external {\r\n\t\trequire(msg.sender == ownerOf(_tokenId));\r\n\t\tinfo.list[_tokenId].approved = _approved;\r\n\t\temit Approval(msg.sender, _approved, _tokenId);\r\n\t}\r\n\r\n\tfunction setApprovalForAll(address _operator, bool _approved) external {\r\n\t\tinfo.users[msg.sender].approved[_operator] = _approved;\r\n\t\temit ApprovalForAll(msg.sender, _operator, _approved);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n\t\tsafeTransferFrom(_from, _to, _tokenId, \"\");\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public {\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) == 0x150b7a02);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction metadata() external view returns (address) {\r\n\t\treturn address(info.metadata);\r\n\t}\r\n\t\r\n\tfunction name() external view returns (string memory) {\r\n\t\treturn info.metadata.name();\r\n\t}\r\n\r\n\tfunction symbol() external view returns (string memory) {\r\n\t\treturn info.metadata.symbol();\r\n\t}\r\n\r\n\tfunction baseURI() external view returns (string memory) {\r\n\t\treturn info.metadata.baseURI();\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n\t\treturn info.metadata.tokenURI(_tokenId);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn info.owner;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction openMintEnabled() public view returns (bool) {\r\n\t\treturn block.timestamp > info.startTime + OPEN_MINT_DELAY;\r\n\t}\r\n\t\r\n\tfunction paidSupply() public view returns (uint256) {\r\n\t\treturn info.paidSupply;\r\n\t}\r\n\r\n\tfunction hasFreeMinted(address _user) public view returns (bool) {\r\n\t\treturn info.users[_user].freeMinted;\r\n\t}\r\n\r\n\tfunction hasPaidMinted(address _user) public view returns (bool) {\r\n\t\treturn info.users[_user].paidMinted;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn info.users[_owner].balance;\r\n\t}\r\n\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].owner;\r\n\t}\r\n\r\n\tfunction getApproved(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].approved;\r\n\t}\r\n\r\n\tfunction isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n\t\treturn info.users[_owner].approved[_operator];\r\n\t}\r\n\r\n\r\n\tfunction _mint(address _receiver) internal {\r\n\t\trequire(totalSupply() < MAX_SUPPLY);\r\n\t\tuint256 _tokenId = info.totalSupply++;\r\n\t\tToken storage _newToken = info.list[_tokenId];\r\n\t\t_newToken.owner = _receiver;\r\n\t\tinfo.users[_receiver].balance++;\r\n\t\temit Transfer(address(0x0), _receiver, _tokenId);\r\n\t\temit Mint(_receiver, _tokenId);\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n\t\taddress _owner = ownerOf(_tokenId);\r\n\t\taddress _approved = getApproved(_tokenId);\r\n\t\trequire(_from == _owner);\r\n\t\trequire(msg.sender == _owner || msg.sender == _approved || isApprovedForAll(_owner, msg.sender));\r\n\r\n\t\tinfo.list[_tokenId].owner = _to;\r\n\t\tif (_approved != address(0x0)) {\r\n\t\t\tinfo.list[_tokenId].approved = address(0x0);\r\n\t\t\temit Approval(address(0x0), address(0x0), _tokenId);\r\n\t\t}\r\n\t\tinfo.users[_from].balance--;\r\n\t\tinfo.users[_to].balance++;\r\n\t\temit Transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\r\n\tfunction _verify(bytes32[] memory _proof, bytes32 _leaf, bytes32 _merkleRoot) internal pure returns (bool) {\r\n\t\tbytes32 _computedHash = _leaf;\r\n\t\tfor (uint256 i = 0; i < _proof.length; i++) {\r\n\t\t\tbytes32 _proofElement = _proof[i];\r\n\t\t\tif (_computedHash <= _proofElement) {\r\n\t\t\t\t_computedHash = keccak256(abi.encodePacked(_computedHash, _proofElement));\r\n\t\t\t} else {\r\n\t\t\t\t_computedHash = keccak256(abi.encodePacked(_proofElement, _computedHash));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn _computedHash == _merkleRoot;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"FreeClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PaidClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUpdateAllMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasFreeMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasPaidMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paidSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Metadata\",\"name\":\"_metadata\",\"type\":\"address\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "smurfcatNFT", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://057ceb3269576bec898c8ca3a4e223ea55856b1316bcb8dd2fd098ee6fe75a2e"}