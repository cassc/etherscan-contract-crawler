{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.23;\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract AstroXStakingV3 is Ownable {\r\n    IERC20 public token;\r\n\r\n    uint256 public totalStakedAmount;\r\n    uint256 public totalRewardsAmount;\r\n\r\n    address public withdrawPenaltyAddress = address(0x47871801c9842CA9645624933EE32E833616e623);\r\n    uint64 public withdrawPenalty = 50; // 5% is 5\r\n    uint64 public withdrawPenaltyBasis = 1000; // 100%\r\n    uint64 public lockDuration = 2 weeks;\r\n\r\n    struct StakingDeposit {\r\n        uint120 depositId;\r\n        uint64 createdAt;\r\n        uint64 unlocksAt;\r\n        bool isWithdrawn;\r\n        uint256 amount;\r\n        address depositor;\r\n    }\r\n\r\n    StakingDeposit[] public stakingDeposits;\r\n\r\n    mapping(address => uint256 totalStaked) public totalStaked;\r\n\r\n    event Staked(uint256 depositId, address indexed user, uint256 amount);\r\n    event Unstaked(uint256 depositId, address indexed user, uint256 amount);\r\n    event RewardsFunded(address source, uint256 amount);\r\n\r\n    constructor(address _tokenAddress) {\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n\r\n    function changeContractSettings(\r\n        address _withdrawPenaltyAddress,\r\n        uint64 _withdrawPenalty,\r\n        uint64 _withdrawPenaltyBasis,\r\n        uint64 _lockDuration\r\n    ) external onlyOwner {\r\n        require(_withdrawPenaltyAddress != address(0), \"Invalid penalty address\");\r\n        require(_withdrawPenaltyBasis > 0, \"Invalid penalty basis\");\r\n        require(_withdrawPenalty <= _withdrawPenaltyBasis, \"Invalid penalty\");\r\n        require(_lockDuration > 0, \"Invalid lock duration\");\r\n\r\n        withdrawPenaltyAddress = _withdrawPenaltyAddress;\r\n        withdrawPenalty = _withdrawPenalty;\r\n        withdrawPenaltyBasis = _withdrawPenaltyBasis;\r\n        lockDuration = _lockDuration;\r\n    }\r\n\r\n    function getDeposits() external view returns (StakingDeposit[] memory) {\r\n        return stakingDeposits;\r\n    }\r\n\r\n    function _calculateReward(uint256 _amount) internal view returns (uint256) {\r\n        require(totalStakedAmount > 0, \"No staked amount\");\r\n        return (_amount * totalRewardsAmount) / totalStakedAmount;\r\n    }\r\n\r\n    function _calculateWithdrawPenalty(uint256 _amount) internal view returns (uint256) {\r\n        return (_amount * withdrawPenalty) / withdrawPenaltyBasis;\r\n    }\r\n\r\n    function fundRewards(uint256 amount) external {\r\n        require(amount > 0, \"Cannot fund 0 tokens\");\r\n\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Failed to transfer tokens\");\r\n\r\n        totalRewardsAmount += amount;\r\n\r\n        emit RewardsFunded(msg.sender, amount);\r\n    }\r\n\r\n    function stake(uint256 amount) external {\r\n        require(amount > 0, \"Cannot stake 0 tokens\");\r\n\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Failed to transfer tokens\");\r\n\r\n        uint256 _depositId = stakingDeposits.length;\r\n\r\n        stakingDeposits.push(\r\n            StakingDeposit({\r\n                depositId: uint120(_depositId),\r\n                amount: amount,\r\n                createdAt: uint64(block.timestamp),\r\n                unlocksAt: uint64(block.timestamp + lockDuration),\r\n                isWithdrawn: false,\r\n                depositor: msg.sender\r\n            })\r\n        );\r\n\r\n        unchecked {\r\n            totalStaked[msg.sender] += amount;\r\n            totalStakedAmount += amount;\r\n        }\r\n\r\n        emit Staked(_depositId, msg.sender, amount);\r\n    }\r\n\r\n    function unstakeDeposit(uint256 _depositId) external {\r\n        StakingDeposit storage deposit = stakingDeposits[_depositId];\r\n\r\n        require(_depositId < stakingDeposits.length, \"Invalid deposit ID\");\r\n\r\n        require(!deposit.isWithdrawn, \"Deposit already withdrawn\");\r\n\r\n        require(deposit.depositor == msg.sender, \"Not depositor\");\r\n\r\n        require(deposit.unlocksAt <= block.timestamp, \"Deposit is still locked\");\r\n\r\n        uint256 reward = _calculateReward(deposit.amount);\r\n\r\n        require(reward > 0, \"No reward to claim\");\r\n\r\n        deposit.isWithdrawn = true;\r\n\r\n        unchecked {\r\n            totalStaked[msg.sender] -= deposit.amount;\r\n            totalStakedAmount -= deposit.amount;\r\n            totalRewardsAmount -= reward;\r\n        }\r\n\r\n        require(token.transfer(msg.sender, deposit.amount), \"Failed to transfer tokens\");\r\n\r\n        require(token.transfer(msg.sender, reward), \"Failed to transfer tokens\");\r\n\r\n        emit Unstaked(deposit.depositId, msg.sender, deposit.amount);\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 _depositId) external {\r\n        StakingDeposit storage deposit = stakingDeposits[_depositId];\r\n\r\n        require(_depositId < stakingDeposits.length, \"Invalid deposit ID\");\r\n\r\n        require(!deposit.isWithdrawn, \"Deposit already withdrawn\");\r\n\r\n        require(deposit.depositor == msg.sender, \"Not depositor\");\r\n\r\n        deposit.isWithdrawn = true;\r\n\r\n        uint256 amountToWithdraw = deposit.amount;\r\n        uint256 withdrawPenaltyWei = _calculateWithdrawPenalty(amountToWithdraw);\r\n        amountToWithdraw -= withdrawPenaltyWei;\r\n\r\n        // Send the penalty to the penalty address\r\n        require(token.transfer(withdrawPenaltyAddress, withdrawPenaltyWei), \"Failed to transfer tokens\");\r\n\r\n        unchecked {\r\n            totalStaked[msg.sender] -= deposit.amount;\r\n            totalStakedAmount -= deposit.amount;\r\n        }\r\n\r\n        require(token.transfer(msg.sender, amountToWithdraw), \"Failed to transfer tokens\");\r\n\r\n        emit Unstaked(deposit.depositId, msg.sender, deposit.amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawPenaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_withdrawPenalty\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_withdrawPenaltyBasis\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_lockDuration\",\"type\":\"uint64\"}],\"name\":\"changeContractSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint120\",\"name\":\"depositId\",\"type\":\"uint120\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlocksAt\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"internalType\":\"struct AstroXStakingV3.StakingDeposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingDeposits\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"depositId\",\"type\":\"uint120\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlocksAt\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"unstakeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPenalty\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPenaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPenaltyBasis\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AstroXStakingV3", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000eb1e72204c42de2263d37db606fb25c21d649b8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://050a8b2dd7b40f06033fe2493d3e864b6b4d36f46e4a007344c43c8780a61843"}