{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20\r\n{\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipRenounced();\r\n\r\n    constructor()\r\n    {\r\n        address msgSender = _msgSender();\r\n        owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address payable)\r\n    {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function isOwner(address who) public view returns (bool)\r\n    {\r\n        return owner == who;\r\n    }\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        require(isOwner(_msgSender()), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external virtual onlyOwner\r\n    {\r\n        require(_newOwner != owner, \"Ownable: new owner is already the owner\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n\r\n    function remounceOwnership() external virtual onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n        emit OwnershipRenounced();\r\n    }\r\n\r\n    function getTime() public view returns (uint256)\r\n    {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\ncontract Allowable is Ownable\r\n{\r\n    uint256 private allowedCount;\r\n\r\n    mapping(uint256 => address) private allowedByID;\r\n    mapping(address => bool) private allowedContract;\r\n    mapping(address => uint256) private allowedindex;\r\n\r\n    constructor() payable {}\r\n\r\n    // Use this to prevent those not on the list from accessing controlled functions on the token contract\r\n    modifier onlyAllowedContract()\r\n    {\r\n        _onlyAllowedContract();\r\n        _;\r\n    }\r\n\r\n    function _onlyAllowedContract() internal view\r\n    {\r\n        require(isOwner(_msgSender()) || allowedContract[_msgSender()], \"caller is not an allowed contract or the owner\");\r\n    }\r\n\r\n    function GetAllowedID(address _wallet) view external returns(uint256 allowedID)\r\n    {\r\n        return allowedindex[_wallet];\r\n    }\r\n\r\n    function SetupAllowedContract(address _contractAddress, bool _allowOrNot) external onlyAllowedContract\r\n    {\r\n        allowedContract[_contractAddress] = _allowOrNot;\r\n\r\n        if(allowedindex[_contractAddress] != 0) return;\r\n\r\n        allowedCount++;\r\n        allowedByID[allowedCount] = _contractAddress;\r\n        allowedindex[_contractAddress] = allowedCount;\r\n    }\r\n\r\n    function SetupAllowedContracts(address [] calldata _contractAddresses, bool _allowOrNot) external onlyAllowedContract\r\n    {\r\n        uint256 count = _contractAddresses.length;\r\n\r\n        for(uint256 i = 0; i < count; i++)\r\n        {\r\n          address _contractAddress = _contractAddresses[i];\r\n\r\n          allowedContract[_contractAddress] = _allowOrNot;\r\n\r\n          if(allowedindex[_contractAddress] == 0)\r\n          {\r\n            allowedCount++;\r\n            allowedByID[allowedCount] = _contractAddress;\r\n            allowedindex[_contractAddress] = allowedCount;\r\n          }\r\n        }\r\n    }\r\n\r\n    function IsAllowed(address _wallet) view public returns(bool addressAllowed)\r\n    {\r\n        return (isOwner(_wallet) || allowedContract[_wallet]);\r\n    }\r\n\r\n    struct Allowed\r\n    {\r\n        address account;\r\n        bool stillAllowed;\r\n    }\r\n\r\n    function GetAllAllowedAddresses() view external onlyAllowedContract returns (Allowed [] memory allowanceDetails)\r\n    {\r\n        allowanceDetails = new Allowed[](allowedCount);\r\n        uint256 elem = 0;\r\n        uint256 entries = allowedCount;\r\n        for(uint256 i = 1; i <= entries; i++)\r\n        {\r\n            allowanceDetails[elem].account = allowedByID[i];\r\n            allowanceDetails[elem].stillAllowed = allowedContract[allowedByID[i]];\r\n            elem++;\r\n        }\r\n        return allowanceDetails;\r\n    }\r\n\r\n    // SECTION: Token and BNB Transfers...\r\n\r\n    // Used to get random tokens sent to this address out to a wallet...\r\n    function TransferForeignTokens(address _token, address _to) external onlyAllowedContract returns (bool _sent)\r\n    {\r\n        // See what is available...\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n\r\n        return TransferForeignAmount(_token, _to, _contractBalance);\r\n    }\r\n\r\n    // Used to get an amount of random tokens sent to this address out to a wallet...\r\n    function TransferForeignAmount(address _token, address _to, uint256 _maxAmount) public onlyAllowedContract returns (bool _sent)\r\n    {\r\n        // See what we have available...\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n\r\n        // Cap it at the max requested...\r\n        if(amount > _maxAmount) amount = _maxAmount;\r\n\r\n        // Perform the send...\r\n        if(amount != 0) _sent = IERC20(_token).transfer(_to, amount);\r\n        else _sent = false;\r\n    }\r\n\r\n    // Used to get BNB from the contract...\r\n    function TransferBNBToAddress(address payable recipient, uint256 amount) external onlyAllowedContract\r\n    {\r\n        if(address(this).balance < amount) revert(\"Balance Low\");\r\n        if(amount != 0) recipient.transfer(amount);\r\n    }\r\n\r\n    // Used to get BNB from the contract...\r\n    function TransferAllBNBToAddress(address payable recipient) external onlyAllowedContract\r\n    {\r\n        uint256 amount = address(this).balance;\r\n        if(amount != 0) recipient.transfer(amount);\r\n    }\r\n}\r\n\r\n// 1) Create Contract\r\n// 2) Call setCurrentRouter\r\n// 3) Create Liquidity or Launch on Fair/Stealth Launchpad\r\ncontract HoldTimeToken is IERC20, Allowable\r\n{\r\n    uint256 private constant TOTAL_SUPPLY = 111_000_000_000 * 10**18;\r\n    uint256 public constant holdPeriod = 7 days;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public excludedFromLockPeriod;\r\n    mapping(address => bool) public _blacklisted;\r\n    mapping(address => bool) public uniswapPairs;\r\n\r\n    struct KeyHolder\r\n    {\r\n        uint256 vaultCount;             // Count of vaults they created (0 = none yet)\r\n        uint256 firstVault;         // Where to start looking for new ones\r\n    }\r\n\r\n    struct Vault\r\n    {\r\n        uint256 amountStored;           // Count of tokens added to the vault for safe keeping\r\n        uint256 lockedUntil;            // Time when this vault becomes unlockable\r\n    }\r\n\r\n    mapping(address => KeyHolder) public _numLocks;\r\n    mapping(address => mapping(uint256 => Vault)) public _lockAmounts;\r\n\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals;\r\n    uint256 public immutable totalSupply;\r\n\r\n    address public uniswapPair;\r\n    IUniswapV2Router02 public uniswapRouter;\r\n\r\n    event RouterUpdated(address indexed oldRouter, address indexed newRouter, address indexed newPair);\r\n    event ExcludedFromLockPeriod(address indexed account);\r\n    event IncludedInTimeLock(address indexed account);\r\n    event Blacklisted(address indexed account);\r\n    event Unblacklisted(address indexed account);\r\n\r\n    error InsufficientBalance(uint256 available, uint256 required);\r\n    error InsufficientAllowance(uint256 available, uint256 required);\r\n    error ZeroAddressNotAllowed();\r\n    error TransferAmountIsZero();\r\n    error ParticipantBlacklisted(address wallet);\r\n    error BlacklistAlreadyUpdated(address wallet);\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) payable\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        totalSupply = TOTAL_SUPPLY;\r\n\r\n        _balances[owner] = TOTAL_SUPPLY;\r\n        emit Transfer(address(0), owner, TOTAL_SUPPLY);\r\n\r\n        excludedFromLockPeriod[owner] = true;\r\n        emit ExcludedFromLockPeriod(owner);\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        if (amount > _allowances[sender][_msgSender()])\r\n            revert InsufficientAllowance({\r\n                available: _allowances[sender][_msgSender()],\r\n                required: amount\r\n            });\r\n\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        if (subtractedValue <= _allowances[_msgSender()][spender])\r\n            revert InsufficientAllowance({\r\n                available: _allowances[_msgSender()][spender],\r\n                required: subtractedValue\r\n            });\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (sender == address(0) || recipient == address(0)) revert ZeroAddressNotAllowed();\r\n\r\n        if(_blacklisted[sender]) revert ParticipantBlacklisted(sender);\r\n        if(_blacklisted[recipient]) revert ParticipantBlacklisted(recipient);\r\n\r\n        uint256 accessible = _balances[sender];\r\n\r\n        // Check if sender is in the time lock period\r\n        if (!excludedFromLockPeriod[sender]) {\r\n            _cleanVaults(sender);\r\n            accessible -= tokensLocked(sender);\r\n        }\r\n\r\n        if (amount > accessible)\r\n            revert InsufficientBalance({\r\n                available: accessible,\r\n                required: amount\r\n            });\r\n\r\n        if (amount == 0) revert TransferAmountIsZero();\r\n\r\n        // Check if recipient is in the time lock period\r\n        if (!excludedFromLockPeriod[recipient]) {\r\n            _numLocks[recipient].vaultCount += 1;\r\n            uint256 index = _numLocks[recipient].vaultCount;\r\n            if(index == 1) _numLocks[recipient].firstVault = 1;\r\n            _lockAmounts[recipient][index].lockedUntil = getTime() + holdPeriod;\r\n            _lockAmounts[recipient][index].amountStored = amount;\r\n        }\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (owner == address(0) || spender == address(0)) revert ZeroAddressNotAllowed();\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setCurrentRouter(\r\n        address _newRouterAddress\r\n    ) external onlyAllowedContract {\r\n        if (_newRouterAddress == address(0)) revert ZeroAddressNotAllowed();\r\n\r\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(_newRouterAddress);\r\n        address _pair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        require(_pair != address(0), \"New pair not found\");\r\n\r\n        emit RouterUpdated(address(uniswapRouter), address(_newRouter), _pair);\r\n\r\n        uniswapRouter = _newRouter;\r\n        uniswapPair = _pair;\r\n        uniswapPairs[_pair] = true;\r\n\r\n        excludedFromLockPeriod[address(uniswapRouter)] = true;\r\n        emit ExcludedFromLockPeriod(address(uniswapRouter));\r\n        excludedFromLockPeriod[address(uniswapPair)] = true;\r\n        emit ExcludedFromLockPeriod(address(uniswapPair));\r\n    }\r\n\r\n    function excludeFromLockPeriod(\r\n        address _address\r\n    ) external onlyAllowedContract {\r\n        excludedFromLockPeriod[_address] = true;\r\n        emit ExcludedFromLockPeriod(_address);\r\n    }   \r\n\r\n    function includeInTimeLock(\r\n        address _address\r\n    ) external onlyAllowedContract {\r\n        excludedFromLockPeriod[_address] = false;\r\n        emit IncludedInTimeLock(_address);\r\n    }\r\n\r\n    function blacklistAddress(\r\n        address _address\r\n    ) external onlyAllowedContract {\r\n        if(_blacklisted[_address]) revert BlacklistAlreadyUpdated(_address);\r\n        _blacklisted[_address] = true;\r\n        emit Blacklisted(_address);\r\n    }\r\n\r\n    function unblacklistAddress(\r\n        address _address\r\n    ) external onlyAllowedContract {\r\n        if(!_blacklisted[_address]) revert BlacklistAlreadyUpdated(_address);\r\n        _blacklisted[_address] = false;\r\n        emit Unblacklisted(_address);\r\n    }\r\n\r\n    function _cleanVaults(\r\n        address _address\r\n    ) internal {\r\n        uint256 curBlock = getTime();\r\n        uint256 index = _numLocks[_address].firstVault;\r\n        while(index <= _numLocks[_address].vaultCount && curBlock >= _lockAmounts[_address][index].lockedUntil)\r\n        {\r\n            ++index;\r\n        }\r\n        _numLocks[_address].firstVault = index;\r\n    }\r\n\r\n    function tokensLocked(\r\n        address _address\r\n    ) public view returns(uint256 lockedAmount) {\r\n        uint256 curBlock = getTime();\r\n        uint256 index = _numLocks[_address].firstVault;\r\n        while(index <= _numLocks[_address].vaultCount)\r\n        {\r\n            if(curBlock < _lockAmounts[_address][index].lockedUntil) lockedAmount += _lockAmounts[_address][index].amountStored;\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    function tokensAvailable(\r\n        address _address\r\n    ) public view returns(uint256 amountAvailable) {\r\n        amountAvailable = _balances[_address];\r\n        if (!excludedFromLockPeriod[_address]) amountAvailable -= tokensLocked(_address);\r\n    }\r\n\r\n    function nextUnlock(\r\n        address _address\r\n    ) public view returns(uint256 unlockBlock,uint256 blocksRemaining) {\r\n        uint256 index = _numLocks[_address].firstVault;\r\n        unlockBlock = _lockAmounts[_address][index].lockedUntil;\r\n        uint256 curBlock = getTime();\r\n        if(curBlock < unlockBlock) blocksRemaining = unlockBlock - curBlock;\r\n        else blocksRemaining = 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"BlacklistAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ParticipantBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromLockPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedInTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GetAllAllowedAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stillAllowed\",\"type\":\"bool\"}],\"internalType\":\"struct Allowable.Allowed[]\",\"name\":\"allowanceDetails\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"GetAllowedID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"IsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"addressAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowOrNot\",\"type\":\"bool\"}],\"name\":\"SetupAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_allowOrNot\",\"type\":\"bool\"}],\"name\":\"SetupAllowedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TransferAllBNBToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferBNBToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferForeignTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lockAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_numLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"excludeFromLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromLockPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"includeInTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"nextUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouterAddress\",\"type\":\"address\"}],\"name\":\"setCurrentRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"tokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAvailable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"tokensLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unblacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HoldTimeToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000054f696e6b3700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054f494e4b37000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da019d7926de4269bb778c5ebf6ef140f1205785f5008638d0895009f2a5d89e"}