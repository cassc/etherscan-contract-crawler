{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/conduit/WasabiConduit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../IWasabiPool.sol\\\";\\nimport \\\"../IWasabiErrors.sol\\\";\\nimport \\\"../IWasabiPoolFactory.sol\\\";\\nimport \\\"../IWasabiConduit.sol\\\";\\nimport \\\"../WasabiOption.sol\\\";\\nimport \\\"./ConduitSignatureVerifier.sol\\\";\\nimport \\\"../fees/IWasabiFeeManager.sol\\\";\\nimport \\\"../lending/BNPLOptionBidValidator.sol\\\";\\n\\n/**\\n * @dev A conduit that allows for trades of WasabiOptions\\n */\\ncontract WasabiConduit is\\n    Ownable,\\n    IERC721Receiver,\\n    ReentrancyGuard,\\n    ConduitSignatureVerifier,\\n    IWasabiConduit\\n{\\n    event AskTaken(\\n        uint256 optionId,\\n        uint256 orderId,\\n        address seller,\\n        address taker\\n    );\\n    event BidTaken(\\n        uint256 optionId,\\n        uint256 orderId,\\n        address buyer,\\n        address taker\\n    );\\n\\n    event BidCancelled(uint256 orderId, address buyer);\\n    event AskCancelled(uint256 orderId, address seller);\\n\\n    WasabiOption private option;\\n    uint256 public maxOptionsToBuy;\\n    address public bnplContract;\\n    mapping(bytes => bool) public idToFinalizedOrCancelled;\\n    address private factory;\\n\\n    /**\\n     * @dev Initializes a new WasabiConduit\\n     */\\n    constructor(WasabiOption _option, address _bnplContract, address _factory) {\\n        option = _option;\\n        maxOptionsToBuy = 100;\\n        bnplContract = _bnplContract;\\n        factory = _factory;\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function buyOptions(\\n        WasabiStructs.PoolAsk[] calldata _requests,\\n        WasabiStructs.Ask[] calldata _asks,\\n        bytes[] calldata _signatures\\n    ) external payable returns (uint256[] memory) {\\n        uint256 size = _requests.length + _asks.length;\\n        require(size > 0, \\\"Need to provide at least one request\\\");\\n        require(size <= maxOptionsToBuy, \\\"Cannot buy that many options\\\");\\n        require(\\n            size == _signatures.length,\\n            \\\"Need to provide the same amount of signatures and requests\\\"\\n        );\\n\\n        uint256[] memory optionIds = new uint[](size);\\n        for (uint256 index = 0; index < _requests.length; index++) {\\n            uint256 tokenId = buyOption(_requests[index], _signatures[index]);\\n            optionIds[index] = tokenId;\\n        }\\n        for (uint256 index = 0; index < _asks.length; index++) {\\n            uint256 sigIndex = index + _requests.length;\\n            uint256 tokenId = acceptAsk(\\n                _asks[index],\\n                _signatures[sigIndex]\\n            );\\n            optionIds[sigIndex] = tokenId;\\n        }\\n        return optionIds;\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function buyOption(\\n        WasabiStructs.PoolAsk calldata _request,\\n        bytes calldata _signature\\n    ) public payable returns (uint256) {\\n\\n        IWasabiPoolFactory poolFactory = IWasabiPoolFactory(factory);\\n        IWasabiFeeManager feeManager = IWasabiFeeManager(poolFactory.getFeeManager());\\n        (, uint256 feeAmount) = feeManager.getFeeData(_request.poolAddress, _request.premium);\\n        uint256 amount = _request.premium + feeAmount;\\n\\n        IWasabiPool pool = IWasabiPool(_request.poolAddress);\\n\\n        if (pool.getLiquidityAddress() != address(0)) {\\n            IERC20 erc20 = IERC20(pool.getLiquidityAddress());\\n            if (!erc20.transferFrom(_msgSender(), address(this), amount)) {\\n                revert IWasabiErrors.FailedToSend();\\n            }\\n            erc20.approve(_request.poolAddress, amount);\\n            return pool.writeOptionTo(_request, _signature, _msgSender());\\n        } else {\\n            require(msg.value >= amount, \\\"Not enough ETH supplied\\\");\\n            return pool.writeOptionTo{value: amount}(_request, _signature, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* tokenId */,\\n        bytes memory /* data */\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function transferToken(\\n        address _nft,\\n        uint256 _tokenId,\\n        address _target\\n    ) external onlyOwner {\\n        IERC721(_nft).safeTransferFrom(address(this), _target, _tokenId);\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function setBNPL(address _bnplContract) external onlyOwner {\\n        bnplContract = _bnplContract;\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function setOption(WasabiOption _option) external onlyOwner {\\n        option = _option;\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function setMaxOptionsToBuy(uint256 _maxOptionsToBuy) external onlyOwner {\\n        maxOptionsToBuy = _maxOptionsToBuy;\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function setPoolFactoryAddress(address _factory) external onlyOwner {\\n        factory = _factory;\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function acceptAsk(\\n        WasabiStructs.Ask calldata _ask,\\n        bytes calldata _signature\\n    ) public payable nonReentrant returns (uint256) {\\n        bytes memory id = getAskId(_ask);\\n        require(\\n            !idToFinalizedOrCancelled[id],\\n            \\\"Order was finalized or cancelled\\\"\\n        );\\n\\n        validateAsk(_ask, _signature);\\n\\n        uint256 price = _ask.price;\\n        address royaltyAddress;\\n        uint256 royaltyAmount;\\n\\n        if (option.getPool(_ask.optionId) == bnplContract) {\\n            IWasabiFeeManager feeManager = IWasabiFeeManager(IWasabiPoolFactory(factory).getFeeManager());\\n            (royaltyAddress, royaltyAmount) = feeManager.getFeeDataForOption(_ask.optionId, price);\\n        } else {\\n            (royaltyAddress, royaltyAmount) = option.royaltyInfo(_ask.optionId, price);\\n        }\\n\\n        if (_ask.tokenAddress == address(0)) {\\n            require(msg.value >= price, \\\"Not enough ETH supplied\\\");\\n            if (royaltyAmount > 0) {\\n                (bool sent, ) = payable(royaltyAddress).call{value: royaltyAmount}(\\\"\\\");\\n                if (!sent) {\\n                    revert IWasabiErrors.FailedToSend();\\n                }\\n                price -= royaltyAmount;\\n            }\\n            (bool _sent, ) = payable(_ask.seller).call{value: price}(\\\"\\\");\\n            if (!_sent) {\\n                revert IWasabiErrors.FailedToSend();\\n            }\\n        } else {\\n            IERC20 erc20 = IERC20(_ask.tokenAddress);\\n            if (royaltyAmount > 0) {\\n                if(!erc20.transferFrom(_msgSender(), royaltyAddress, royaltyAmount)) {\\n                    revert IWasabiErrors.FailedToSend();\\n                }\\n                price -= royaltyAmount;\\n            }\\n            if (!erc20.transferFrom(_msgSender(), _ask.seller, price)) {\\n                revert IWasabiErrors.FailedToSend();\\n            }\\n        }\\n        option.safeTransferFrom(_ask.seller, _msgSender(), _ask.optionId);\\n        idToFinalizedOrCancelled[id] = true;\\n\\n        emit AskTaken(_ask.optionId, _ask.id, _ask.seller, _msgSender());\\n        return _ask.optionId;\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function acceptBid(\\n        uint256 _optionId,\\n        address _poolAddress,\\n        WasabiStructs.Bid calldata _bid,\\n        bytes calldata _signature\\n    ) external payable nonReentrant {\\n        bytes memory id = getBidId(_bid);\\n        require(\\n            !idToFinalizedOrCancelled[id],\\n            \\\"Order was finalized or cancelled\\\"\\n        );\\n\\n        require(\\n            option.ownerOf(_optionId) == _msgSender(),\\n            \\\"Seller is not owner\\\"\\n        );\\n\\n        validateBid(_bid, _signature);\\n\\n        uint256 price = _bid.price;\\n\\n        address royaltyAddress;\\n        uint256 royaltyAmount;\\n\\n        if (_poolAddress == bnplContract) {\\n            BNPLOptionBidValidator.validateBidForBNPLOption(bnplContract, _optionId, _bid);\\n\\n            IWasabiFeeManager feeManager = IWasabiFeeManager(IWasabiPoolFactory(factory).getFeeManager());\\n            (royaltyAddress, royaltyAmount) = feeManager.getFeeDataForOption(_optionId, price);\\n        } else {\\n            IWasabiPool pool = IWasabiPool(_poolAddress);\\n            validateOptionForBid(_optionId, pool, _bid);\\n\\n            (royaltyAddress, royaltyAmount) = option.royaltyInfo(_optionId, price);\\n        }\\n\\n        IERC20 erc20 = IERC20(_bid.tokenAddress);\\n        if (royaltyAmount > 0) {\\n            if (!erc20.transferFrom(_bid.buyer, royaltyAddress, royaltyAmount)) {\\n                revert IWasabiErrors.FailedToSend();\\n            }\\n            price -= royaltyAmount;\\n        }\\n        if (!erc20.transferFrom(_bid.buyer, _msgSender(), price)) {\\n            revert IWasabiErrors.FailedToSend();\\n        }\\n        option.safeTransferFrom(_msgSender(), _bid.buyer, _optionId);\\n        idToFinalizedOrCancelled[id] = true;\\n\\n        emit BidTaken(_optionId, _bid.id, _bid.buyer, _msgSender());\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function poolAcceptBid(WasabiStructs.Bid calldata _bid, bytes calldata _signature, uint256 _optionId) external {\\n        bytes memory id = getBidId(_bid);\\n\\n        address poolAddress = _msgSender();\\n        require(\\n            !idToFinalizedOrCancelled[id],\\n            \\\"Order was finalized or cancelled\\\"\\n        );\\n        \\n        require(IWasabiPoolFactory(factory).isValidPool(_msgSender()), \\\"Pool is not valid\\\");\\n\\n        IWasabiPool pool = IWasabiPool(poolAddress);\\n        validateBid(_bid, _signature);\\n        validateOptionForBid(_optionId, pool, _bid);\\n\\n        IERC20 erc20 = IERC20(_bid.tokenAddress);\\n\\n        (address royaltyAddress, uint256 royaltyAmount) = option.royaltyInfo(_optionId, _bid.price);\\n\\n        if (royaltyAmount > 0) {\\n            if (!erc20.transferFrom(_bid.buyer, royaltyAddress, royaltyAmount)) {\\n                revert IWasabiErrors.FailedToSend();\\n            }\\n        }\\n        if (!erc20.transferFrom(_bid.buyer, poolAddress, _bid.price - royaltyAmount)) {\\n            revert IWasabiErrors.FailedToSend();\\n        }\\n\\n        idToFinalizedOrCancelled[id] = true;\\n\\n        emit BidTaken(_optionId, _bid.id, _bid.buyer, poolAddress);\\n    }\\n\\n    /**\\n     * @dev Validates if the _ask with _signature\\n     *\\n     * @param _ask the _ask to validate\\n     * @param _signature the _signature to validate the ask with\\n     */\\n    function validateAsk(\\n        WasabiStructs.Ask calldata _ask,\\n        bytes calldata _signature\\n    ) internal view {\\n        // Validate Signature\\n        address currentOwner = option.ownerOf(_ask.optionId);\\n\\n        require(\\n            verifyAsk(_ask, _signature, owner()) || verifyAsk(_ask, _signature, currentOwner),\\n            \\\"Incorrect signature\\\"\\n        );\\n        require(currentOwner == _ask.seller, \\\"Seller is not owner\\\");\\n\\n        require(_ask.orderExpiry >= block.timestamp, \\\"Order expired\\\");\\n        require(_ask.price > 0, \\\"Price needs to be greater than 0\\\");\\n    }\\n\\n    /**\\n     * @dev Validates the bid against the given option\\n     *\\n     * @param _optionId the id of option\\n     * @param _pool the pool where the option was issued from\\n     * @param _bid the _bid to validate\\n     */\\n    function validateOptionForBid(\\n        uint256 _optionId,\\n        IWasabiPool _pool,\\n        WasabiStructs.Bid calldata _bid\\n    ) internal view {\\n        WasabiStructs.OptionData memory optionData = _pool.getOptionData(_optionId);\\n\\n        require(\\n            optionData.optionType == _bid.optionType,\\n            \\\"Option types don't match\\\"\\n        );\\n        require(\\n            optionData.strikePrice == _bid.strikePrice,\\n            \\\"Strike prices don't match\\\"\\n        );\\n\\n        uint256 diff = optionData.expiry > _bid.expiry\\n            ? optionData.expiry - _bid.expiry\\n            : _bid.expiry - optionData.expiry;\\n        require(diff <= _bid.expiryAllowance, \\\"Not within expiry range\\\");\\n\\n        require(_pool.getNftAddress() == _bid.collection, \\\"Collections don't match\\\");\\n        require(_pool.getLiquidityAddress() == _bid.optionTokenAddress, \\\"Option liquidity doesn't match\\\");\\n    }\\n\\n    /**\\n     * @dev Validates the bid\\n     *\\n     * @param _bid the _bid to validate\\n     * @param _signature the _signature to validate the bid with\\n     */\\n    function validateBid(\\n        WasabiStructs.Bid calldata _bid,\\n        bytes calldata _signature\\n    ) internal view {\\n        // Validate Signature\\n        require(\\n            verifyBid(_bid, _signature, owner()) ||\\n                verifyBid(_bid, _signature, _bid.buyer),\\n            \\\"Incorrect signature\\\"\\n        );\\n        require(\\n            _bid.tokenAddress != address(0),\\n            \\\"Bidder didn't provide a ERC20 token\\\"\\n        );\\n\\n        require(_bid.orderExpiry >= block.timestamp, \\\"Order expired\\\");\\n        require(_bid.price > 0, \\\"Price needs to be greater than 0\\\");\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function cancelAsk(\\n        WasabiStructs.Ask calldata _ask,\\n        bytes calldata _signature\\n    ) external {\\n        // Validate Signature\\n        require(verifyAsk(_ask, _signature, _ask.seller), \\\"Incorrect signature\\\");\\n        require(_msgSender() == _ask.seller, \\\"Only the signer can cancel\\\");\\n\\n        bytes memory id = getAskId(_ask);\\n        require(\\n            !idToFinalizedOrCancelled[id],\\n            \\\"Order was already finalized or cancelled\\\"\\n        );\\n\\n        idToFinalizedOrCancelled[id] = true;\\n\\n        emit AskCancelled(_ask.id, _ask.seller);\\n    }\\n\\n    /// @inheritdoc IWasabiConduit\\n    function cancelBid(\\n        WasabiStructs.Bid calldata _bid,\\n        bytes calldata _signature\\n    ) external {\\n        // Validate Signature\\n        require(verifyBid(_bid, _signature, _bid.buyer), \\\"Incorrect signature\\\");\\n        require(_msgSender() == _bid.buyer, \\\"Only the signer can cancel\\\");\\n\\n        bytes memory id = getBidId(_bid);\\n        require(\\n            !idToFinalizedOrCancelled[id],\\n            \\\"Order was already finalized or cancelled\\\"\\n        );\\n\\n        idToFinalizedOrCancelled[id] = true;\\n        emit BidCancelled(_bid.id, _bid.buyer);\\n    }\\n\\n    /**\\n     * @dev returns the id of _ask\\n     */\\n    function getAskId(\\n        WasabiStructs.Ask calldata _ask\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_ask.seller, _ask.id);\\n    }\\n\\n    /**\\n     * @dev returns the id of _bid\\n     */\\n    function getBidId(\\n        WasabiStructs.Bid calldata _bid\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_bid.buyer, _bid.id);\\n    }\\n\\n    /// @dev Withdraws any stuck ETH in this contract\\n    function withdrawETH(uint256 _amount) external payable onlyOwner {\\n        if (_amount > address(this).balance) {\\n            _amount = address(this).balance;\\n        }\\n        (bool sent, ) = payable(owner()).call{value: _amount}(\\\"\\\");\\n        if (!sent) {\\n            revert EthTransferFailed();\\n        }\\n    }\\n\\n    /// @dev Withdraws any stuck ERC20 in this contract\\n    function withdrawERC20(IERC20 _token, uint256 _amount) external onlyOwner {\\n        _token.transfer(_msgSender(), _amount);\\n    }\\n\\n    /// @dev Withdraws any stuck ERC721 in this contract\\n    function withdrawERC721(\\n        IERC721 _token,\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        _token.safeTransferFrom(address(this), owner(), _tokenId);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/WasabiStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary WasabiStructs {\\n    enum OptionType {\\n        CALL,\\n        PUT\\n    }\\n\\n    struct OptionData {\\n        bool active;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 expiry;\\n        uint256 tokenId; // Locked token for CALL options\\n    }\\n\\n    struct PoolAsk {\\n        uint256 id;\\n        address poolAddress;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 premium;\\n        uint256 expiry;\\n        uint256 tokenId; // Token to lock for CALL options\\n        uint256 orderExpiry;\\n    }\\n\\n    struct PoolBid {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        uint256 orderExpiry;\\n        uint256 optionId;\\n    }\\n\\n    struct Bid {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        address collection;\\n        uint256 orderExpiry;\\n        address buyer;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 expiry;\\n        uint256 expiryAllowance;\\n        address optionTokenAddress;\\n    }\\n\\n    struct Ask {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        uint256 orderExpiry;\\n        address seller;\\n        uint256 optionId;\\n    }\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/Signing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {WasabiStructs} from \\\"./WasabiStructs.sol\\\";\\n\\n/**\\n * @dev Signature Verification\\n */\\nlibrary Signing {\\n\\n    /**\\n     * @dev Returns the message hash for the given request\\n     */\\n    function getMessageHash(WasabiStructs.PoolAsk calldata _request) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _request.id,\\n                _request.poolAddress,\\n                _request.optionType,\\n                _request.strikePrice,\\n                _request.premium,\\n                _request.expiry,\\n                _request.tokenId,\\n                _request.orderExpiry));\\n    }\\n\\n    /**\\n     * @dev Returns the message hash for the given request\\n     */\\n    function getAskHash(WasabiStructs.Ask calldata _ask) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _ask.id,\\n                _ask.price,\\n                _ask.tokenAddress,\\n                _ask.orderExpiry,\\n                _ask.seller,\\n                _ask.optionId));\\n    }\\n\\n    function getBidHash(WasabiStructs.Bid calldata _bid) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _bid.id,\\n                _bid.price,\\n                _bid.tokenAddress,\\n                _bid.collection,\\n                _bid.orderExpiry,\\n                _bid.buyer,\\n                _bid.optionType,\\n                _bid.strikePrice,\\n                _bid.expiry,\\n                _bid.expiryAllowance));\\n    }\\n\\n    /**\\n     * @dev creates an ETH signed message hash\\n     */\\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    function getSigner(\\n        WasabiStructs.PoolAsk calldata _request,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        bytes32 messageHash = getMessageHash(_request);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature);\\n    }\\n\\n    function getAskSigner(\\n        WasabiStructs.Ask calldata _ask,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        bytes32 messageHash = getAskHash(_ask);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature);\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lending/interfaces/zharta/ILoansPeripheral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./ILoansCore.sol\\\";\\n\\ninterface ILoansPeripheral {\\n\\n    struct Calldata {\\n        uint256 amount;\\n        uint256 interest;\\n        uint256 maturity;\\n        ILoansCore.Collateral collateral;\\n        bool delegations;\\n        uint256 deadline;\\n        uint256 nonce;\\n        uint256 genesisToken;\\n        uint256 v;\\n        uint256 r;\\n        uint256 s;\\n    }\\n\\n    function reserveEth(\\n        uint256 _amount,\\n        uint256 _interest,\\n        uint256 _maturity,\\n        ILoansCore.Collateral[] calldata _collaterals,\\n        bool _delegations,\\n        uint256 _deadline,\\n        uint256 _nonce,\\n        uint256 _genesisToken,\\n        uint256 _v,\\n        uint256 _r,\\n        uint256 _s\\n    ) external returns (uint256);\\n\\n    function pay(uint256 _loanId) external payable;\\n\\n    function getLoanPayableAmount(\\n        address _borrower,\\n        uint256 _loanId,\\n        uint256 _timestamp\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/interfaces/zharta/ILoansCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ILoansCore {\\n    struct Collateral {\\n        address contractAddress;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct Loan {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 interest;\\n        uint256 maturity;\\n        uint256 startTime;\\n        Collateral[] collaterals;\\n        uint256 paidPrincipal;\\n        uint256 paidInterestAmount;\\n        bool started;\\n        bool invalidated;\\n        bool paid;\\n        bool defaulted;\\n        bool canceled;\\n    }\\n\\n    function getLoan(\\n        address _borrower,\\n        uint256 _loanId\\n    ) external view returns (Loan memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/interfaces/IWasabiOption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IWasabiOption {\\n    function mint(address, address) external returns (uint256);\\n\\n    function burn(uint256) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/interfaces/IWasabiBNPL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title WasabiBNPL Interface\\ninterface IWasabiBNPL {\\n    /// @notice Function Calldata Struct\\n    /// @param to to address\\n    /// @param value call value\\n    /// @param data call data\\n    struct FunctionCallData {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Loan Info Struct\\n    /// @param nftLending INFTLending address\\n    /// @param loanId loan id\\n    struct LoanInfo {\\n        address nftLending;\\n        uint256 loanId;\\n    }\\n\\n    /// @notice Function Call Failed\\n    error FunctionCallFailed();\\n\\n    /// @notice Loan Not Paid\\n    error LoanNotPaid();\\n\\n    /// @notice ETH Transfer Failed\\n    error EthTransferFailed();\\n\\n    /// @notice Invalid Param\\n    error InvalidParam();\\n\\n    /// @dev Emitted when an option is executed\\n    event OptionExecuted(uint256 optionId);\\n\\n    /// @dev Emitted when an option is executed and the NFT is sold to the market\\n    event OptionExecutedWithArbitrage(uint256 optionId, uint256 payout);\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/interfaces/INFTLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @notice NFTLending Interface\\ninterface INFTLending {\\n    /// @notice Loan Details struct\\n    /// @param borrowAmount Borrow amount\\n    /// @param repayAmount Repay amount\\n    /// @param loanExpiration Loan expiration\\n    struct LoanDetails {\\n        uint256 borrowAmount;\\n        uint256 repayAmount;\\n        uint256 loanExpiration;\\n        address nftAddress;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Get loan details for given loan id\\n    /// @param _loanId The loan id\\n    function getLoanDetails(\\n        uint256 _loanId\\n    ) external view returns (LoanDetails memory);\\n\\n    /// @notice Borrow WETH from the protocol\\n    /// @param _inputData Encoded input parameters\\n    /// @return _loanId The loan id\\n    function borrow(\\n        bytes calldata _inputData\\n    ) external payable returns (uint256 _loanId);\\n\\n    /// @notice Repay the loan\\n    /// @param _loanId The loan id to repay\\n    /// @param _receiver The user address to receive collateral NFT\\n    function repay(uint256 _loanId, address _receiver) external payable;\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/interfaces/ILendingAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ILendingAddressProvider {\\n    event LendingAdded(address indexed lending);\\n\\n    event LendingRemoved(address indexed lending);\\n\\n    function isLending(address) external view returns (bool);\\n\\n    function addLending(address _lending) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/interfaces/IFlashloan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Flashloan Interface\\ninterface IFlashloan {\\n    /// @notice Flashloan Info Struct\\n    /// @param enabled Enabled flag\\n    /// @param flashloanPremiumValue;\\n    struct FlashLoanInfo {\\n        bool enabled;\\n        uint256 flashloanPremiumValue;\\n    }\\n\\n    /// @notice ETH Transfer Failed\\n    error EthTransferFailed();\\n\\n    /// @notice Borrow ETH\\n    /// @param amount Flashloan amount\\n    /// @return flashLoanRepayAmount Flashloan repayment amount\\n    function borrow(uint256 amount) external returns (uint256 flashLoanRepayAmount);\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/ZhartaLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/INFTLending.sol\\\";\\nimport \\\"./interfaces/zharta/ILoansPeripheral.sol\\\";\\nimport \\\"./interfaces/zharta/ILoansCore.sol\\\";\\nimport {IWETH} from \\\"../IWETH.sol\\\";\\n\\n/// @title Zharta Lending\\n/// @notice Manages creating and repaying a loan on Zharta\\ncontract ZhartaLending is INFTLending {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice LoansPeripheral Contract\\n    ILoansPeripheral public immutable loansPeripheral;\\n\\n    /// @notice LoansCore Contract\\n    ILoansCore public immutable loansCore;\\n\\n    /// @notice Collateral Vault Core\\n    address public immutable collateralVaultCore;\\n\\n    constructor(ILoansPeripheral _loansPeripheral, ILoansCore _loansCore, address _collateralVaultCore) {\\n        loansPeripheral = _loansPeripheral;\\n        loansCore = _loansCore;\\n        collateralVaultCore = _collateralVaultCore;\\n    }\\n\\n    /// @inheritdoc INFTLending\\n    function getLoanDetails(\\n        uint256 _loanId\\n    ) external view returns (LoanDetails memory loanDetails) {\\n        // Get Loan for loanId\\n        ILoansCore.Loan memory loanDetail = loansCore.getLoan(\\n            msg.sender,\\n            _loanId\\n        );\\n\\n        uint256 repayAmount = loansPeripheral.getLoanPayableAmount(\\n            msg.sender,\\n            _loanId,\\n            block.timestamp\\n        );\\n\\n        return LoanDetails(\\n            loanDetail.amount, // borrowAmount\\n            repayAmount, // repayAmount\\n            loanDetail.maturity, // loanExpiration\\n            loanDetail.collaterals[0].contractAddress, // nftAddress\\n            loanDetail.collaterals[0].tokenId // tokenId\\n        );\\n    }\\n\\n    /// @notice Get loan details for given loan id and the borrower\\n    /// @param _loanId The loan id\\n    /// @param _borrower The borrower\\n    function getLoanDetailsForBorrower(\\n        uint256 _loanId,\\n        address _borrower\\n    ) external view returns (LoanDetails memory loanDetails) {\\n        // Get Loan for loanId\\n        ILoansCore.Loan memory loanDetail = loansCore.getLoan(\\n            _borrower,\\n            _loanId\\n        );\\n\\n        uint256 repayAmount = loansPeripheral.getLoanPayableAmount(\\n            _borrower,\\n            _loanId,\\n            block.timestamp\\n        );\\n\\n        return LoanDetails(\\n            loanDetail.amount, // borrowAmount\\n            repayAmount, // repayAmount\\n            loanDetail.maturity, // loanExpiration\\n            loanDetail.collaterals[0].contractAddress, // nftAddress\\n            loanDetail.collaterals[0].tokenId // tokenId\\n        );\\n    }\\n\\n    /// @inheritdoc INFTLending\\n    function borrow(\\n        bytes calldata _inputData\\n    ) external payable returns (uint256) {\\n        // Decode `inputData` into required parameters\\n        ILoansPeripheral.Calldata memory callData = abi.decode(\\n            _inputData,\\n            (ILoansPeripheral.Calldata)\\n        );\\n\\n        IERC721 nft = IERC721(callData.collateral.contractAddress);\\n\\n        // Approve\\n        if (!nft.isApprovedForAll(address(this), collateralVaultCore)) {\\n            nft.setApprovalForAll(collateralVaultCore, true);\\n        }\\n\\n        ILoansCore.Collateral[] memory collaterals = new ILoansCore.Collateral[](1);\\n        collaterals[0] = callData.collateral;\\n\\n        // Borrow on Zharta\\n        uint256 loanId = loansPeripheral.reserveEth(\\n            callData.amount,\\n            callData.interest,\\n            callData.maturity,\\n            collaterals,\\n            callData.delegations,\\n            callData.deadline,\\n            callData.nonce,\\n            callData.genesisToken,\\n            callData.v,\\n            callData.r,\\n            callData.s\\n        );\\n\\n        // Return loan id\\n        return loanId;\\n    }\\n\\n    /// @inheritdoc INFTLending\\n    function repay(uint256 _loanId, address _receiver) external payable {\\n        // Pay back loan\\n        uint256 repayAmount = loansPeripheral.getLoanPayableAmount(\\n            address(this),\\n            _loanId,\\n            block.timestamp\\n        );\\n        loansPeripheral.pay{value: repayAmount}(_loanId);\\n\\n        if (_receiver != address(this)) {\\n            // Get Loan for loanId\\n            ILoansCore.Loan memory loanDetail = loansCore.getLoan(\\n                address(this),\\n                _loanId\\n            );\\n\\n            // Transfer collateral NFT to the user\\n            IERC721(loanDetail.collaterals[0].contractAddress).safeTransferFrom(\\n                address(this),\\n                _receiver,\\n                loanDetail.collaterals[0].tokenId\\n            );\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/WasabiBNPL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../lib/Signing.sol\\\";\\nimport {IWETH} from \\\"../IWETH.sol\\\";\\nimport \\\"./interfaces/IWasabiBNPL.sol\\\";\\nimport \\\"./interfaces/IWasabiOption.sol\\\";\\nimport \\\"./interfaces/IFlashloan.sol\\\";\\nimport \\\"./interfaces/ILendingAddressProvider.sol\\\";\\nimport \\\"./interfaces/INFTLending.sol\\\";\\n\\ncontract WasabiBNPL is IWasabiBNPL, Ownable, IERC721Receiver, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// @notice Wasabi Option\\n    IWasabiOption public wasabiOption;\\n\\n    /// @notice Wasabi Flashloan\\n    IFlashloan public flashloan;\\n\\n    /// @notice Wasabi Address Provider\\n    ILendingAddressProvider public addressProvider;\\n\\n    /// @notice Wasabi Pool Factory\\n    address public factory;\\n\\n    /// @notice Option ID to LoanInfo mapping\\n    mapping(uint256 => LoanInfo) public optionToLoan;\\n\\n    /// @notice\\n    address public wethAddress;\\n\\n    /// @notice WasabiBNPL Constructor\\n    /// @param _wasabiOption Wasabi Option address\\n    /// @param _flashloan Wasabi Flashloan address\\n    /// @param _addressProvider Wasabi Address Provider address\\n    /// @param _wethAddress Wrapped ETH address\\n    /// @param _factory Wasabi Pool Factory address\\n    constructor(\\n        IWasabiOption _wasabiOption,\\n        IFlashloan _flashloan,\\n        ILendingAddressProvider _addressProvider,\\n        address _wethAddress,\\n        address _factory\\n    ) {\\n        wasabiOption = _wasabiOption;\\n        flashloan = _flashloan;\\n        addressProvider = _addressProvider;\\n        wethAddress = _wethAddress;\\n        factory = _factory;\\n    }\\n\\n    /// @dev Returns the option data for the given option id\\n    function getOptionData(\\n        uint256 _optionId\\n    ) external view returns (WasabiStructs.OptionData memory optionData) {\\n        LoanInfo memory loanInfo = optionToLoan[_optionId];\\n        INFTLending.LoanDetails memory loanDetails = INFTLending(\\n            loanInfo.nftLending\\n        ).getLoanDetails(loanInfo.loanId);\\n        bool active = wasabiOption.ownerOf(_optionId) != address(0) &&\\n            loanDetails.loanExpiration > block.timestamp;\\n\\n        optionData = WasabiStructs.OptionData(\\n            active,\\n            WasabiStructs.OptionType.CALL,\\n            loanDetails.repayAmount,\\n            loanDetails.loanExpiration,\\n            loanDetails.tokenId\\n        );\\n    }\\n\\n    /// @notice Executes BNPL flow\\n    /// @dev BNLP flow\\n    ///      1. take flashloan\\n    ///      2. buy nft from marketplace\\n    ///      3. get loan from nft lending protocol\\n    /// @param _nftLending NFTLending contract address\\n    /// @param _borrowData Borrow data\\n    /// @param _flashLoanAmount Call value\\n    /// @param _marketplaceCallData List of marketplace calldata\\n    /// @param _signatures Signatures\\n    function bnpl(\\n        address _nftLending,\\n        bytes calldata _borrowData,\\n        uint256 _flashLoanAmount,\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) external payable nonReentrant returns (uint256) {\\n        validate(_marketplaceCallData, _signatures);\\n\\n        if (!addressProvider.isLending(_nftLending)) {\\n            revert InvalidParam();\\n        }\\n\\n        // 1. Get flash loan\\n        uint256 flashLoanRepayAmount = flashloan.borrow(_flashLoanAmount);\\n\\n        // 2. Buy NFT\\n        bool marketSuccess = executeFunctions(_marketplaceCallData);\\n        if (!marketSuccess) {\\n            revert FunctionCallFailed();\\n        }\\n\\n        // 3. Get loan\\n        bytes memory result = _nftLending.functionDelegateCall(\\n            abi.encodeWithSelector(INFTLending.borrow.selector, _borrowData)\\n        );\\n\\n        uint256 loanId = abi.decode(result, (uint256));\\n        uint256 optionId = wasabiOption.mint(_msgSender(), factory);\\n        optionToLoan[optionId] = LoanInfo({\\n            nftLending: _nftLending,\\n            loanId: loanId\\n        });\\n\\n        // 4. Repay flashloan\\n        if (address(this).balance < flashLoanRepayAmount) {\\n            revert LoanNotPaid();\\n        }\\n        uint256 payout = address(this).balance - flashLoanRepayAmount;\\n\\n        (bool sent, ) = payable(address(flashloan)).call{\\n            value: flashLoanRepayAmount\\n        }(\\\"\\\");\\n        if (!sent) {\\n            revert EthTransferFailed();\\n        }\\n        if (payout > 0) {\\n            (sent, ) = payable(_msgSender()).call{value: payout}(\\\"\\\");\\n            if (!sent) {\\n                revert EthTransferFailed();\\n            }\\n        }\\n\\n        return optionId;\\n    }\\n\\n    /// @notice Executes a given list of functions\\n    /// @param _marketplaceCallData List of marketplace calldata\\n    function executeFunctions(\\n        FunctionCallData[] memory _marketplaceCallData\\n    ) internal returns (bool) {\\n        uint256 length = _marketplaceCallData.length;\\n        for (uint256 i; i != length; ++i) {\\n            FunctionCallData memory functionCallData = _marketplaceCallData[i];\\n            (bool success, ) = functionCallData.to.call{\\n                value: functionCallData.value\\n            }(functionCallData.data);\\n            if (success == false) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Validates if the FunctionCallData list has been approved\\n    /// @param _marketplaceCallData List of marketplace calldata\\n    /// @param _signatures Signatures\\n    function validate(\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) internal view {\\n        uint256 calldataLength = _marketplaceCallData.length;\\n        require(calldataLength > 0, \\\"Need marketplace calls\\\");\\n        require(calldataLength == _signatures.length, \\\"Length is invalid\\\");\\n        for (uint256 i; i != calldataLength; ++i) {\\n            bytes32 ethSignedMessageHash = Signing.getEthSignedMessageHash(\\n                getMessageHash(_marketplaceCallData[i])\\n            );\\n            require(\\n                Signing.recoverSigner(ethSignedMessageHash, _signatures[i]) ==\\n                    owner(),\\n                \\\"Owner is not signer\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the message hash for the given _data\\n    function getMessageHash(\\n        FunctionCallData calldata _data\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(_data.to, _data.value, _data.data));\\n    }\\n\\n    /// @dev Withdraws any stuck ETH in this contract\\n    function withdrawETH(uint256 _amount) external payable onlyOwner {\\n        if (_amount > address(this).balance) {\\n            _amount = address(this).balance;\\n        }\\n        (bool sent, ) = payable(owner()).call{value: _amount}(\\\"\\\");\\n        if (!sent) {\\n            revert EthTransferFailed();\\n        }\\n    }\\n\\n    /// @dev Withdraws any stuck ERC20 in this contract\\n    function withdrawERC20(IERC20 _token, uint256 _amount) external onlyOwner {\\n        _token.safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /// @dev Withdraws any stuck ERC721 in this contract\\n    function withdrawERC721(\\n        IERC721 _token,\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        _token.safeTransferFrom(address(this), owner(), _tokenId);\\n    }\\n\\n    function onERC721Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* tokenId */,\\n        bytes memory /* data */\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Executes the given option id\\n     * @param _optionId The option id\\n     */\\n    function executeOption(uint256 _optionId) external payable nonReentrant {\\n        require(\\n            wasabiOption.ownerOf(_optionId) == _msgSender(),\\n            \\\"Only owner can exercise option\\\"\\n        );\\n\\n        LoanInfo storage loanInfo = optionToLoan[_optionId];\\n        require(loanInfo.nftLending != address(0), \\\"Invalid Option\\\");\\n\\n        INFTLending.LoanDetails memory loanDetails = INFTLending(\\n            loanInfo.nftLending\\n        ).getLoanDetails(loanInfo.loanId);\\n        require(\\n            loanDetails.loanExpiration > block.timestamp,\\n            \\\"Loan has expired\\\"\\n        );\\n        require(\\n            msg.value >= loanDetails.repayAmount,\\n            \\\"Insufficient repay amount supplied\\\"\\n        );\\n\\n        loanInfo.nftLending.functionDelegateCall(\\n            abi.encodeWithSelector(\\n                INFTLending.repay.selector,\\n                loanInfo.loanId,\\n                _msgSender()\\n            )\\n        );\\n\\n        wasabiOption.burn(_optionId);\\n        emit OptionExecuted(_optionId);\\n    }\\n\\n    /**\\n     * @dev Executes the given option id and sells the NFT to the market\\n     * @param _optionId The option id\\n     * @param _marketplaceCallData List of marketplace calldata\\n     * @param _signatures List of signatures of the marketplace call data\\n     */\\n    function executeOptionWithArbitrage(\\n        uint256 _optionId,\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) external payable nonReentrant {\\n        validate(_marketplaceCallData, _signatures);\\n        require(\\n            wasabiOption.ownerOf(_optionId) == _msgSender(),\\n            \\\"Only owner can exercise option\\\"\\n        );\\n\\n        LoanInfo storage loanInfo = optionToLoan[_optionId];\\n        require(loanInfo.nftLending != address(0), \\\"Invalid Option\\\");\\n\\n        INFTLending.LoanDetails memory loanDetails = INFTLending(\\n            loanInfo.nftLending\\n        ).getLoanDetails(loanInfo.loanId);\\n        require(\\n            loanDetails.loanExpiration > block.timestamp,\\n            \\\"Loan has expired\\\"\\n        );\\n\\n        uint256 initialBalance = address(this).balance;\\n\\n        // 1. Get flash loan\\n        uint256 flashLoanRepayAmount = flashloan.borrow(\\n            loanDetails.repayAmount\\n        );\\n\\n        // 2. Repay loan\\n        loanInfo.nftLending.functionDelegateCall(\\n            abi.encodeWithSelector(\\n                INFTLending.repay.selector,\\n                loanInfo.loanId,\\n                address(this)\\n            )\\n        );\\n        wasabiOption.burn(_optionId);\\n\\n        // 3. Sell NFT\\n        bool marketSuccess = executeFunctions(_marketplaceCallData);\\n        if (!marketSuccess) {\\n            revert FunctionCallFailed();\\n        }\\n\\n        // Withdraw any WETH received\\n        IWETH weth = IWETH(wethAddress);\\n        uint256 wethBalance = weth.balanceOf(address(this));\\n        if (wethBalance > 0) {\\n            weth.withdraw(wethBalance);\\n        }\\n\\n        uint256 balanceChange = address(this).balance - initialBalance;\\n\\n        // 4. Repay flashloan\\n        if (balanceChange < flashLoanRepayAmount) {\\n            revert LoanNotPaid();\\n        }\\n        (bool sent, ) = payable(address(flashloan)).call{\\n            value: flashLoanRepayAmount\\n        }(\\\"\\\");\\n        if (!sent) {\\n            revert EthTransferFailed();\\n        }\\n\\n        // 5. Give payout\\n        uint256 payout = balanceChange - flashLoanRepayAmount;\\n        if (payout > 0) {\\n            (sent, ) = payable(_msgSender()).call{value: payout}(\\\"\\\");\\n            if (!sent) {\\n                revert EthTransferFailed();\\n            }\\n        }\\n\\n        emit OptionExecutedWithArbitrage(_optionId, payout);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lending/BNPLOptionBidValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./WasabiBNPL.sol\\\";\\nimport \\\"./ZhartaLending.sol\\\";\\nimport \\\"./interfaces/IWasabiBNPL.sol\\\";\\nimport \\\"./interfaces/INFTLending.sol\\\";\\nimport \\\"../lib/WasabiStructs.sol\\\";\\n\\n/**\\n * @dev Verifies BNPL options against WasabiConduit objects\\n */\\nlibrary BNPLOptionBidValidator {\\n\\n    address constant ZHARTA_LENDING = 0x6209A1b9751F67594427a45b5225bC3492009788;\\n\\n    /// @notice Validates the given bid for the option\\n    /// @param _bnplAddress the BNPL contract address\\n    /// @param _optionId the id of the option the validate\\n    function validateBidForBNPLOption(\\n        address _bnplAddress,\\n        uint256 _optionId,\\n        WasabiStructs.Bid calldata _bid\\n    ) external view {\\n        WasabiBNPL bnpl = WasabiBNPL(payable(_bnplAddress));\\n        (address lending, uint256 loanId) = bnpl.optionToLoan(_optionId);\\n\\n        INFTLending.LoanDetails memory loanDetails;\\n        if (lending == ZHARTA_LENDING) {\\n            loanDetails = ZhartaLending(payable(lending)).getLoanDetailsForBorrower(loanId, _bnplAddress);\\n        } else {\\n            loanDetails = INFTLending(lending).getLoanDetails(loanId);\\n        }\\n\\n        WasabiStructs.OptionData memory optionData = bnpl.getOptionData(_optionId);\\n\\n        require(\\n            optionData.optionType == _bid.optionType,\\n            \\\"Option types don't match\\\"\\n        );\\n        require(\\n            optionData.strikePrice == _bid.strikePrice,\\n            \\\"Strike prices don't match\\\"\\n        );\\n\\n        uint256 diff = optionData.expiry > _bid.expiry\\n            ? optionData.expiry - _bid.expiry\\n            : _bid.expiry - optionData.expiry;\\n        require(diff <= _bid.expiryAllowance, \\\"Not within expiry range\\\");\\n\\n        require(loanDetails.nftAddress == _bid.collection, \\\"Collections don't match\\\");\\n    }\\n}\"\r\n    },\r\n    \"/contracts/fees/IWasabiFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Required interface of an Wasabi Fee Manager compliant contract.\\n */\\ninterface IWasabiFeeManager {\\n    /**\\n     * @dev Returns the fee data for the given pool and amount\\n     * @param _pool the pool address\\n     * @param _amount the amount being paid\\n     * @return receiver the receiver of the fee\\n     * @return amount the fee amount\\n     */\\n    function getFeeData(address _pool, uint256 _amount) external view returns (address receiver, uint256 amount);\\n\\n    /**\\n     * @dev Returns the fee data for the given option and amount\\n     * @param _optionId the option id\\n     * @param _amount the amount being paid\\n     * @return receiver the receiver of the fee\\n     * @return amount the fee amount\\n     */\\n    function getFeeDataForOption(uint256 _optionId, uint256 _amount) external view returns (address receiver, uint256 amount);\\n}\"\r\n    },\r\n    \"/contracts/conduit/ConduitSignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\nimport \\\"../lib/Signing.sol\\\";\\n\\n/**\\n * @dev Signature Verification for Bid and Ask\\n */\\nabstract contract ConduitSignatureVerifier {\\n\\n    bytes32 constant EIP712DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    bytes32 constant BID_TYPEHASH =\\n        keccak256(\\n            \\\"Bid(uint256 id,uint256 price,address tokenAddress,address collection,uint256 orderExpiry,address buyer,uint8 optionType,uint256 strikePrice,uint256 expiry,uint256 expiryAllowance,address optionTokenAddress)\\\"\\n        );\\n\\n    bytes32 constant ASK_TYPEHASH =\\n        keccak256(\\n            \\\"Ask(uint256 id,uint256 price,address tokenAddress,uint256 orderExpiry,address seller,uint256 optionId)\\\"\\n        );\\n\\n    /**\\n     * @dev Creates the hash of the EIP712 domain for this validator\\n     *\\n     * @param _eip712Domain the domain to hash\\n     * @return the hashed domain\\n     */\\n    function hashDomain(\\n        WasabiStructs.EIP712Domain memory _eip712Domain\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712DOMAIN_TYPEHASH,\\n                    keccak256(bytes(_eip712Domain.name)),\\n                    keccak256(bytes(_eip712Domain.version)),\\n                    _eip712Domain.chainId,\\n                    _eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates the hash of the Bid for this validator\\n     *\\n     * @param _bid to hash\\n     * @return the bid domain\\n     */\\n    function hashForBid(\\n        WasabiStructs.Bid memory _bid\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    BID_TYPEHASH,\\n                    _bid.id,\\n                    _bid.price,\\n                    _bid.tokenAddress,\\n                    _bid.collection,\\n                    _bid.orderExpiry,\\n                    _bid.buyer,\\n                    _bid.optionType,\\n                    _bid.strikePrice,\\n                    _bid.expiry,\\n                    _bid.expiryAllowance,\\n                    _bid.optionTokenAddress\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates the hash of the Ask for this validator\\n     *\\n     * @param _ask the ask to hash\\n     * @return the ask domain\\n     */\\n    function hashForAsk(\\n        WasabiStructs.Ask memory _ask\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ASK_TYPEHASH,\\n                    _ask.id,\\n                    _ask.price,\\n                    _ask.tokenAddress,\\n                    _ask.orderExpiry,\\n                    _ask.seller,\\n                    _ask.optionId\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Gets the signer of the given signature for the given bid\\n     *\\n     * @param _bid the bid to validate\\n     * @param _signature the signature to validate\\n     * @return address who signed the signature\\n     */\\n    function getSignerForBid(\\n        WasabiStructs.Bid memory _bid,\\n        bytes memory _signature\\n    ) public view returns (address) {\\n        bytes32 domainSeparator = hashDomain(\\n            WasabiStructs.EIP712Domain({\\n                name: \\\"ConduitSignature\\\",\\n                version: \\\"1\\\",\\n                chainId: getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hashForBid(_bid))\\n        );\\n        return Signing.recoverSigner(digest, _signature);\\n    }\\n\\n    /**\\n     * @dev Gets the signer of the given signature for the given ask\\n     *\\n     * @param _ask the ask to validate\\n     * @param _signature the signature to validate\\n     * @return address who signed the signature\\n     */\\n    function getSignerForAsk(\\n        WasabiStructs.Ask memory _ask,\\n        bytes memory _signature\\n    ) public view returns (address) {\\n        bytes32 domainSeparator = hashDomain(\\n            WasabiStructs.EIP712Domain({\\n                name: \\\"ConduitSignature\\\",\\n                version: \\\"1\\\",\\n                chainId: getChainID(),\\n                verifyingContract: address(this)\\n            })\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hashForAsk(_ask))\\n        );\\n        return Signing.recoverSigner(digest, _signature);\\n    }\\n\\n    /**\\n     * @dev Checks the signer of the given signature for the given bid is the given signer\\n     *\\n     * @param _bid the bid to validate\\n     * @param _signature the signature to validate\\n     * @param _signer the signer to validate\\n     * @return true if the signature belongs to the signer, false otherwise\\n     */\\n    function verifyBid(\\n        WasabiStructs.Bid memory _bid,\\n        bytes memory _signature,\\n        address _signer\\n    ) internal view returns (bool) {\\n        return getSignerForBid(_bid, _signature) == _signer;\\n    }\\n\\n    /**\\n     * @dev Checks the signer of the given signature for the given ask is the given signer\\n     *\\n     * @param _ask the ask to validate\\n     * @param _signature the signature to validate\\n     * @param _signer the signer to validate\\n     * @return true if the signature belongs to the signer, false otherwise\\n     */\\n    function verifyAsk(\\n        WasabiStructs.Ask memory _ask,\\n        bytes memory _signature,\\n        address _signer\\n    ) internal view returns (bool) {\\n        return getSignerForAsk(_ask, _signature) == _signer;\\n    }\\n\\n    /**\\n     * @return the current chain id\\n     */\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/WasabiOption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"./IWasabiPool.sol\\\";\\nimport \\\"./IWasabiPoolFactory.sol\\\";\\nimport \\\"./fees/IWasabiFeeManager.sol\\\";\\n\\n/**\\n * @dev An ERC721 which tracks Wasabi Option positions of accounts\\n */\\ncontract WasabiOption is ERC721, IERC2981, Ownable {\\n    \\n    address private lastFactory;\\n    mapping(address => bool) private factoryAddresses;\\n    mapping(uint256 => address) private optionPools;\\n    uint256 private _currentId = 1;\\n    string private _baseURIextended;\\n\\n    /**\\n     * @dev Constructs WasabiOption\\n     */\\n    constructor() ERC721(\\\"Wasabi Option NFTs\\\", \\\"WASAB\\\") {}\\n\\n    /**\\n     * @dev Toggles the owning factory\\n     */\\n    function toggleFactory(address _factory, bool _enabled) external onlyOwner {\\n        factoryAddresses[_factory] = _enabled;\\n        if (_enabled) {\\n            lastFactory = _factory;\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints a new WasabiOption\\n     */\\n    function mint(address _to, address _factory) external returns (uint256 mintedId) {\\n        require(factoryAddresses[_factory] == true, \\\"Invalid Factory\\\");\\n        require(IWasabiPoolFactory(_factory).isValidPool(_msgSender()), \\\"Only valid pools can mint\\\");\\n\\n        _safeMint(_to, _currentId);\\n        mintedId = _currentId;\\n        optionPools[mintedId] = _msgSender();\\n        _currentId++;\\n    }\\n\\n    /**\\n     * @dev Burns the specified option\\n     */\\n    function burn(uint256 _optionId) external {\\n        require(optionPools[_optionId] == _msgSender(), \\\"Caller can't burn option\\\");\\n        _burn(_optionId);\\n    }\\n\\n    /**\\n     * @dev Sets the base URI\\n     */\\n    function setBaseURI(string memory baseURI_) external onlyOwner {\\n        _baseURIextended = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pool which created the given option\\n     */\\n    function getPool(uint256 _optionId) external view returns (address) {\\n        return optionPools[_optionId];\\n    }\\n    \\n    /// @inheritdoc ERC721\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseURIextended;\\n    }\\n\\n    /// @inheritdoc IERC2981\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address, uint256) {\\n        IWasabiPool pool = IWasabiPool(optionPools[_tokenId]);\\n        IWasabiPoolFactory factory = IWasabiPoolFactory(pool.getFactory());\\n        IWasabiFeeManager feeManager = IWasabiFeeManager(factory.getFeeManager());\\n        return feeManager.getFeeDataForOption(_tokenId, _salePrice);\\n    }\\n    \\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/IWasabiPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Required interface of an WasabiPoolFactory compliant contract.\\n */\\ninterface IWasabiPoolFactory {\\n\\n    /**\\n     * @dev The States of Pools\\n     */\\n    enum PoolState {\\n        INVALID,\\n        ACTIVE,\\n        DISABLED\\n    }\\n\\n    /**\\n     * @dev Emitted when there is a new pool created\\n     */\\n    event NewPool(address poolAddress, address indexed nftAddress, address indexed owner);\\n\\n    /**\\n     * @dev INVALID/ACTIVE/DISABLE the specified pool.\\n     */\\n    function togglePool(address _poolAddress, PoolState _poolState) external;\\n\\n    /**\\n     * @dev Checks if the pool for the given address is enabled.\\n     */\\n    function isValidPool(address _poolAddress) external view returns(bool);\\n\\n    /**\\n     * @dev Returns the PoolState\\n     */\\n    function getPoolState(address _poolAddress) external view returns(PoolState);\\n\\n    /**\\n     * @dev Returns IWasabiConduit Contract Address.\\n     */\\n    function getConduitAddress() external view returns(address);\\n\\n    /**\\n     * @dev Returns IWasabiFeeManager Contract Address.\\n     */\\n    function getFeeManager() external view returns(address);\\n}\"\r\n    },\r\n    \"/contracts/IWasabiPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./lib/WasabiStructs.sol\\\";\\n\\n/**\\n * @dev Required interface of an WasabiPool compliant contract.\\n */\\ninterface IWasabiPool is IERC165, IERC721Receiver {\\n    \\n    /**\\n     * @dev Emitted when `admin` is changed.\\n     */\\n    event AdminChanged(address admin);\\n\\n    /**\\n     * @dev Emitted when an order is cancelled.\\n     */\\n    event OrderCancelled(uint256 id);\\n\\n    /**\\n     * @dev Emitted when a pool bid is taken\\n     */\\n    event PoolBidTaken(uint256 id);\\n\\n    /**\\n     * @dev Emitted when an ERC721 is received\\n     */\\n    event ERC721Received(uint256 tokenId);\\n\\n    /**\\n     * @dev Emitted when ETH is received\\n     */\\n    event ETHReceived(uint amount);\\n\\n    /**\\n     * @dev Emitted when ERC20 is received\\n     */\\n    event ERC20Received(uint amount);\\n\\n    /**\\n     * @dev Emitted when an ERC721 is withdrawn\\n     */\\n    event ERC721Withdrawn(uint256 tokenId);\\n\\n    /**\\n     * @dev Emitted when ERC20 is withdrawn\\n     */\\n    event ERC20Withdrawn(uint amount);\\n\\n    /**\\n     * @dev Emitted when ETH is withdrawn\\n     */\\n    event ETHWithdrawn(uint amount);\\n\\n    /**\\n     * @dev Emitted when an option is executed.\\n     */\\n    event OptionExecuted(uint256 optionId);\\n\\n    /**\\n     * @dev Emitted when an option is issued\\n     */\\n    event OptionIssued(uint256 optionId, uint256 price);\\n\\n    /**\\n     * @dev Emitted when an option is issued\\n     */\\n    event OptionIssued(uint256 optionId, uint256 price, uint256 poolAskId);\\n\\n    /**\\n     * @dev Emitted when the pool settings are edited\\n     */\\n    event PoolSettingsChanged();\\n\\n    /**\\n     * @dev Returns the address of the nft\\n     */\\n    function getNftAddress() external view returns(address);\\n\\n    /**\\n     * @dev Returns the address of the nft\\n     */\\n    function getLiquidityAddress() external view returns(address);\\n\\n    /**\\n     * @dev Writes an option for the given ask.\\n     */\\n    function writeOption(\\n        WasabiStructs.PoolAsk calldata _request, bytes calldata _signature\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Writes an option for the given rule and buyer.\\n     */\\n    function writeOptionTo(\\n        WasabiStructs.PoolAsk calldata _request, bytes calldata _signature, address _receiver\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Executes the option for the given id.\\n     */\\n    function executeOption(uint256 _optionId) external payable;\\n\\n    /**\\n     * @dev Executes the option for the given id.\\n     */\\n    function executeOptionWithSell(uint256 _optionId, uint256 _tokenId) external payable;\\n\\n    /**\\n     * @dev Cancels the order for the given _orderId.\\n     */\\n    function cancelOrder(uint256 _orderId) external;\\n\\n    /**\\n     * @dev Withdraws ERC721 tokens from the pool.\\n     */\\n    function withdrawERC721(IERC721 _nft, uint256[] calldata _tokenIds) external;\\n\\n    /**\\n     * @dev Deposits ERC721 tokens to the pool.\\n     */\\n    function depositERC721(IERC721 _nft, uint256[] calldata _tokenIds) external;\\n\\n    /**\\n     * @dev Withdraws ETH from this pool\\n     */\\n    function withdrawETH(uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws ERC20 tokens from this pool\\n     */\\n    function withdrawERC20(IERC20 _token, uint256 _amount) external;\\n\\n    /**\\n     * @dev Sets the admin of this pool.\\n     */\\n    function setAdmin(address _admin) external;\\n\\n    /**\\n     * @dev Removes the admin from this pool.\\n     */\\n    function removeAdmin() external;\\n\\n    /**\\n     * @dev Returns the address of the current admin.\\n     */\\n    function getAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the factory managing this pool\\n     */\\n    function getFactory() external view returns (address);\\n\\n    /**\\n     * @dev Returns the available balance this pool contains that can be withdrawn or collateralized\\n     */\\n    function availableBalance() view external returns(uint256);\\n\\n    /**\\n     * @dev Returns an array of ids of all outstanding (issued or expired) options\\n     */\\n    function getOptionIds() external view returns(uint256[] memory);\\n\\n    /**\\n     * @dev Returns the id of the option that locked the given token id, reverts if there is none\\n     */\\n    function getOptionIdForToken(uint256 _tokenId) external view returns(uint256);\\n\\n    /**\\n     * @dev Returns the option data for the given option id\\n     */\\n    function getOptionData(uint256 _optionId) external view returns(WasabiStructs.OptionData memory);\\n\\n    /**\\n     * @dev Returns 'true' if the option for the given id is valid and active, 'false' otherwise\\n     */\\n    function isValid(uint256 _optionId) view external returns(bool);\\n\\n    /**\\n     * @dev Checks if _tokenId unlocked\\n     */\\n    function isAvailableTokenId(uint256 _tokenId) external view returns(bool);\\n\\n    /**\\n     * @dev Clears the expired options from the pool\\n     */\\n    function clearExpiredOptions(uint256[] memory _optionIds) external;\\n\\n    /**\\n     * @dev accepts the bid for LPs with _tokenId. If its a put option, _tokenId can be 0\\n     */\\n    function acceptBid(WasabiStructs.Bid calldata _bid, bytes calldata _signature, uint256 _tokenId) external returns(uint256);\\n\\n    /**\\n     * @dev accepts the ask for LPs\\n     */\\n    function acceptAsk(WasabiStructs.Ask calldata _ask, bytes calldata _signature) external;\\n\\n    /**\\n     * @dev accepts a bid created for this pool\\n     */\\n    function acceptPoolBid(WasabiStructs.PoolBid calldata _poolBid, bytes calldata _signature) external payable;\\n}\"\r\n    },\r\n    \"/contracts/IWasabiErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Required interface for defining all the errors\\n */\\n\\ninterface IWasabiErrors {\\n\\n    /**\\n     * @dev Thrown when an order that has been filled or cancelled is being acted upon\\n     */\\n    error OrderFilledOrCancelled();\\n\\n    /**\\n     * @dev Thrown when someone tries to make an unauthorized request\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * @dev Thrown when a signature is invalid\\n     */\\n    error InvalidSignature();\\n\\n    /**\\n     * @dev Thrown when there is no sufficient available liquidity left in the pool for issuing a PUT option\\n     */\\n    error InsufficientAvailableLiquidity();\\n\\n    /**\\n     * @dev Thrown when the requested NFT for a CALL is already locked for another option\\n     */\\n    error RequestNftIsLocked();\\n\\n    /**\\n     * @dev Thrown when the NFT is not in the pool or invalid\\n     */\\n    error NftIsInvalid();\\n\\n    /**\\n     * @dev Thrown when the expiry of an ask is invalid for the pool\\n     */\\n    error InvalidExpiry();\\n\\n    /**\\n     * @dev Thrown when the strike price of an ask is invalid for the pool\\n     */\\n    error InvalidStrike();\\n\\n    /**\\n     * @dev Thrown when an expired order or option is being exercised\\n     */\\n    error HasExpired();\\n    \\n    /**\\n     * @dev Thrown when sending ETH failed\\n     */\\n    error FailedToSend();\\n}\"\r\n    },\r\n    \"/contracts/IWasabiConduit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\nimport \\\"./lib/WasabiStructs.sol\\\";\\nimport \\\"./WasabiOption.sol\\\";\\n\\n/**\\n * @dev Required interface of an WasabiConduit compliant contract.\\n */\\ninterface IWasabiConduit {\\n\\n    /// @notice ETH Transfer Failed\\n    error EthTransferFailed();\\n\\n    /**\\n     * @dev Buys multiple options\\n     */\\n    function buyOptions(\\n        WasabiStructs.PoolAsk[] calldata _requests,\\n        WasabiStructs.Ask[] calldata _asks,\\n        bytes[] calldata _signatures\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Buys an option\\n     */\\n    function buyOption(\\n        WasabiStructs.PoolAsk calldata _request,\\n        bytes calldata _signature\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Transfers a NFT to _target\\n     *\\n     * @param _nft the address of NFT\\n     * @param _tokenId the tokenId to transfer\\n     * @param _target the target to transfer the NFT\\n     */\\n    function transferToken(\\n        address _nft,\\n        uint256 _tokenId,\\n        address _target\\n    ) external;\\n\\n    /**\\n     * @dev Sets the BNPL contract\\n     */\\n    function setBNPL(address _bnplContract) external;\\n\\n    /**\\n     * @dev Sets Option information\\n     */\\n    function setOption(WasabiOption _option) external;\\n\\n    /**\\n     * @dev Sets maximum number of option to buy\\n     */\\n    function setMaxOptionsToBuy(uint256 _maxOptionsToBuy) external;\\n\\n    /**\\n     * @dev Sets pool factory address\\n     */\\n    function setPoolFactoryAddress(address _factory) external;\\n\\n    /**\\n     * @dev Accpets the Ask\\n     */\\n    function acceptAsk(\\n        WasabiStructs.Ask calldata _ask,\\n        bytes calldata _signature\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Accpets the Bid\\n     */\\n    function acceptBid(\\n        uint256 _optionId,\\n        address _poolAddress,\\n        WasabiStructs.Bid calldata _bid,\\n        bytes calldata _signature\\n    ) external payable;\\n\\n    /**\\n     * @dev Pool Accepts the _bid\\n     */\\n    function poolAcceptBid(WasabiStructs.Bid calldata _bid, bytes calldata _signature, uint256 _optionId) external;\\n\\n    /**\\n     * @dev Cancel the _ask\\n     */\\n    function cancelAsk(\\n        WasabiStructs.Ask calldata _ask,\\n        bytes calldata _signature\\n    ) external;\\n\\n    /**\\n     * @dev Cancel the _bid\\n     */\\n    function cancelBid(\\n        WasabiStructs.Bid calldata _bid,\\n        bytes calldata _signature\\n    ) external;\\n\\n    /// @dev Withdraws any stuck ETH in this contract\\n    function withdrawETH(uint256 _amount) external payable;\\n\\n    /// @dev Withdraws any stuck ERC20 in this contract\\n    function withdrawERC20(IERC20 _token, uint256 _amount) external;\\n\\n    /// @dev Withdraws any stuck ERC721 in this contract\\n    function withdrawERC721(IERC721 _token, uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"/contracts/lending/BNPLOptionBidValidator.sol\": {\r\n        \"BNPLOptionBidValidator\": \"0x327Fe52E44A1Fc68E8596dF8769A4B5DC538550e\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract WasabiOption\",\"name\":\"_option\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnplContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToSend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"AskTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"BidTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.Ask\",\"name\":\"_ask\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"acceptAsk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryAllowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"optionTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct WasabiStructs.Bid\",\"name\":\"_bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnplContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.PoolAsk\",\"name\":\"_request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyOption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.PoolAsk[]\",\"name\":\"_requests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.Ask[]\",\"name\":\"_asks\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"buyOptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.Ask\",\"name\":\"_ask\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"cancelAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryAllowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"optionTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct WasabiStructs.Bid\",\"name\":\"_bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.Ask\",\"name\":\"_ask\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getSignerForAsk\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryAllowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"optionTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct WasabiStructs.Bid\",\"name\":\"_bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getSignerForBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.Ask\",\"name\":\"_ask\",\"type\":\"tuple\"}],\"name\":\"hashForAsk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryAllowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"optionTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct WasabiStructs.Bid\",\"name\":\"_bid\",\"type\":\"tuple\"}],\"name\":\"hashForBid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"idToFinalizedOrCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOptionsToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryAllowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"optionTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct WasabiStructs.Bid\",\"name\":\"_bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"poolAcceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bnplContract\",\"type\":\"address\"}],\"name\":\"setBNPL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxOptionsToBuy\",\"type\":\"uint256\"}],\"name\":\"setMaxOptionsToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WasabiOption\",\"name\":\"_option\",\"type\":\"address\"}],\"name\":\"setOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setPoolFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "WasabiConduit", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "000000000000000000000000fc68f2130e094c95b6c4f5494158cbeb172e18a0000000000000000000000000ead3dd83ed1e107e02e1d0a307d4f1ba8a2af12d0000000000000000000000008e2b50413a53f50e2a059142a9be060294961e40", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}