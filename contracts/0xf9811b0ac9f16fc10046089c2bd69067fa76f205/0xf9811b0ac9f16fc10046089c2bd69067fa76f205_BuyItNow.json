{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/BuyItNow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../interfaces/IBuyItNow.sol\\\";\\nimport \\\"../interfaces/IDropManager.sol\\\";\\nimport \\\"../interfaces/ITokenContract.sol\\\";\\nimport \\\"../libraries/GrtLibrary.sol\\\";\\n\\n/// @title Buy It Now\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @custom:contributor Seb N\\n/// @notice A listing type involving a single token that can be bought instantly. If a users placed a bid with a high enough amount, they\\n///         will be the winner. The listing will continue until the timer runs out or there are not tokens left to buy.\\ncontract BuyItNow is IBuyItNow, AccessControl {\\n  bytes32 public constant override DROP_MANAGER_ROLE =\\n    keccak256(\\\"DROP_MANAGER_ROLE\\\");\\n\\n  /// Listing ID => BIN Listing\\n  mapping(uint128 => BINListing) public override listings;\\n\\n  IDropManager public immutable dropManager;\\n\\n  constructor(address _dropManager, address _superUser) {\\n    GrtLibrary.checkZeroAddress(_dropManager, \\\"dropManager\\\");\\n    GrtLibrary.checkZeroAddress(_superUser, \\\"super user\\\");\\n\\n    dropManager = IDropManager(_dropManager);\\n\\n    _grantRole(DROP_MANAGER_ROLE, _dropManager);\\n    _grantRole(DEFAULT_ADMIN_ROLE, _superUser);\\n  }\\n\\n  function _listingEnded(uint128 listingId)\\n    internal\\n    view\\n    returns (bool hasEnded)\\n  {\\n    hasEnded = block.timestamp > listings[listingId].endDate;\\n  }\\n\\n  /// @dev Set listing details. To be used on creation and updating of listings\\n  /// @param listingId The id of the listing to update as per the global counter in the Drop Manager\\n  /// @param listing The new listing details\\n  function _setListing(\\n    uint128 listingId,\\n    Listing calldata listing,\\n    bytes calldata\\n  ) internal {\\n    if (\\n      block.timestamp > listing.endDate || listing.endDate <= listing.startDate\\n    ) {\\n      revert IncorrectParams(msg.sender);\\n    } else if (block.timestamp > listing.startDate) {\\n      revert ListingActive();\\n    }\\n\\n    listings[listingId] = BINListing({\\n      releaseId: listing.releaseId,\\n      startDate: listing.startDate,\\n      endDate: listing.endDate,\\n      salePrice: listing.startingPrice\\n    });\\n  }\\n\\n  function createListing(\\n    uint128 listingId,\\n    Listing calldata listing,\\n    bytes calldata data\\n  ) external override onlyRole(DROP_MANAGER_ROLE) {\\n    _setListing(listingId, listing, data);\\n    emit ListingCreated(listingId, listing.releaseId);\\n  }\\n\\n  function deleteListing(uint128 listingId)\\n    external\\n    override\\n    onlyRole(DROP_MANAGER_ROLE)\\n    notStarted(listingId)\\n  {\\n    delete listings[listingId];\\n    emit ListingDeleted(listingId);\\n  }\\n\\n  function updateListing(\\n    uint128 listingId,\\n    Listing calldata listing,\\n    bytes calldata data\\n  ) external override onlyRole(DROP_MANAGER_ROLE) notStarted(listingId) {\\n    _setListing(listingId, listing, data);\\n    emit ListingUpdated(listingId);\\n  }\\n\\n  function registerBid(\\n    uint128 listingId,\\n    uint256 tokenId,\\n    Bid calldata bid,\\n    bytes calldata\\n  ) external override onlyRole(DROP_MANAGER_ROLE) {\\n    BINListing memory listing = listings[listingId];\\n    if (\\n      (block.timestamp < listing.startDate) ||\\n      (block.timestamp > listing.endDate)\\n    ) {\\n      revert ListingNotActive();\\n    }\\n\\n    if (bid.amount < listing.salePrice) {\\n      revert InvalidBid();\\n    }\\n\\n    emit BidRegistered(bid.bidder, bid.amount, tokenId, listingId);\\n\\n    uint8 listingType = dropManager.addressListingLookup(address(this));\\n    if (bid.amount > 0) {\\n      dropManager.distributeSaleFunds(\\n        listingType,\\n        listingId,\\n        listing.releaseId,\\n        bid.amount\\n      );\\n    }\\n    dropManager.transferToken(listingType, SafeCast.toUint128(tokenId), bid.bidder);\\n  }\\n\\n  /// @dev Due to this being the BuyItNow contract, there is no reason for a claim\\n  ///      to be made. Therefore if a claim is made, an error is feedback to the\\n  ///     caller that this function is not available.\\n  function validateTokenClaim(\\n    uint128,\\n    uint128,\\n    uint128,\\n    address\\n  ) external view override onlyRole(DROP_MANAGER_ROLE) returns (uint256) {\\n    revert InvalidClaim();\\n  }\\n\\n  function validateEthWithdrawal(uint128 listingId)\\n    external\\n    view\\n    onlyRole(DROP_MANAGER_ROLE)\\n    returns (bool valid)\\n  {\\n    if (!_listingEnded(listingId)) {\\n      revert InvalidClaim();\\n    }\\n    return true;\\n  }\\n\\n  /// @dev Manual distribution is not necesarry on Buy It Now listings as funds are automatically distributed on sale\\n  function validateManualDistribution(uint128) external pure returns (bool) {\\n    revert DistributionNotSupported();\\n  }\\n\\n  function listingEnded(uint128 listingId)\\n    external\\n    view\\n    override\\n    returns (bool status)\\n  {\\n    BINListing memory currentListing = listings[listingId];\\n    if (currentListing.releaseId == 0) {\\n      revert NotListedHere();\\n    }\\n    status = block.timestamp > currentListing.endDate;\\n  }\\n\\n  modifier notStarted(uint128 listingId) {\\n    if (block.timestamp > listings[listingId].startDate) {\\n      revert ListingActive();\\n    }\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/TokenContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                    \\n*/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"operator-filter-registry/src/DefaultOperatorFilterer.sol\\\";\\nimport \\\"../interfaces/IInsuranceRegistry.sol\\\";\\nimport \\\"../interfaces/ITokenContract.sol\\\";\\nimport \\\"../interfaces/ITokenRegistry.sol\\\";\\nimport \\\"../libraries/GrtLibrary.sol\\\";\\n\\n/// @title TokenContract\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor Sean L (slongdotexe)\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @custom:contributor Brodie S\\n/// @notice Implementation to be used for the Liquid and Redeemed editions of each token\\n/// @dev  The GRT Wines architecture uses a dual ERC721 token system. When releases are created the `LiquidToken`\\n///       is minted and can be purchased through various listing mechanisms via the Drop Manager. When a user\\n///       wishes to redeem their token for a physical asset, the `LiquidToken` is burned, and a `RedeemedToken` is\\n///       minted. The same `TokenContract` implementation is deployed twice, once for each edition. The metadata\\n///       for both the Liquid and Redeemed editions of each token is set when a release is created, and manage by\\n///       the `TokenRegistry`\\ncontract TokenContract is\\n  DefaultOperatorFilterer,\\n  ITokenContract,\\n  AccessControl,\\n  ERC721Royalty\\n{\\n  using Counters for Counters.Counter;\\n  using Strings for uint256;\\n\\n  //#########################\\n  //#### STATE VARIABLES ####\\n\\n  Counters.Counter private _tokenIdCounter;\\n\\n  bytes32 public constant override PLATFORM_ADMIN_ROLE =\\n    keccak256(\\\"PLATFORM_ADMIN_ROLE\\\");\\n  bytes32 public constant override MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n  bytes32 public constant override BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n  ITokenRegistry public override tokenRegistry;\\n  IInsuranceRegistry public override insuranceRegistry;\\n  address public override redemptionManager;\\n\\n  bool public immutable useRedeemedUri;\\n\\n  //#########################\\n  //#### IMPLEMENTATION ####\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address _platformAdmin,\\n    address _superUser,\\n    address _insuranceRegistry,\\n    address _tokenRegistry,\\n    bool _useRedeemedUri,\\n    address _secondaryRoyaltyReceiver,\\n    uint96 _secondaryRoyaltyFee\\n  ) ERC721(_name, _symbol) {\\n    GrtLibrary.checkZeroAddress(_platformAdmin, \\\"platform admin\\\");\\n    GrtLibrary.checkZeroAddress(_superUser, \\\"super user\\\");\\n    GrtLibrary.checkZeroAddress(_insuranceRegistry, \\\"insurance registry\\\");\\n    GrtLibrary.checkZeroAddress(_tokenRegistry, \\\"token registry\\\");\\n    GrtLibrary.checkZeroAddress(_secondaryRoyaltyReceiver, \\\"secondary royalty\\\");\\n\\n    insuranceRegistry = IInsuranceRegistry(_insuranceRegistry);\\n    tokenRegistry = ITokenRegistry(_tokenRegistry);\\n    _setupRole(PLATFORM_ADMIN_ROLE, _platformAdmin);\\n    _setupRole(DEFAULT_ADMIN_ROLE, _superUser);\\n    _setRoleAdmin(MINTER_ROLE, PLATFORM_ADMIN_ROLE);\\n    _setRoleAdmin(BURNER_ROLE, PLATFORM_ADMIN_ROLE);\\n\\n    useRedeemedUri = _useRedeemedUri;\\n    _setDefaultRoyalty(_secondaryRoyaltyReceiver, _secondaryRoyaltyFee);\\n  }\\n\\n  /// @dev If either of the from or to fields are 0 address, this is a mint or burn, return early to continue without storage read\\n  /// @dev See @openzeppelin ERC721.sol for further details\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 /* batch size -- not used in standard ERC721 */\\n  ) internal view override {\\n    if (from == address(0) || to == address(0)) {\\n      return;\\n    }\\n    if (\\n      insuranceRegistry.checkTokenStatus(tokenId) &&\\n      msg.sender != redemptionManager\\n    ) {\\n      revert InsuranceEventRegistered(tokenId);\\n    }\\n  }\\n\\n  /// @dev Overrides standard tokenURI method to retrieve the URI from the Token Registry based on the token type (liquid or redeemed)\\n  /// @param tokenId The id of the token to retrieve a URI for\\n  /// @return The token URI\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    _requireMinted(tokenId);\\n\\n    ITokenRegistry.TokenKey memory tokenKey = tokenRegistry.getTokenKey(\\n      tokenId\\n    );\\n\\n    string memory baseURI = useRedeemedUri\\n      ? tokenKey.redeemedUri\\n      : tokenKey.liquidUri;\\n\\n    uint256 tokenIndex = tokenId - tokenKey.key + 1;\\n\\n    return\\n      bytes(baseURI).length > 0\\n        ? string(abi.encodePacked(baseURI, tokenIndex.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  function mint(\\n    address receiver,\\n    uint128 qty,\\n    string memory liquidUri,\\n    string memory redeemedUri\\n  ) external override returns (uint256 mintCount) {\\n    bool canMint = hasRole(MINTER_ROLE, msg.sender) ||\\n      hasRole(PLATFORM_ADMIN_ROLE, msg.sender);\\n    if (!canMint) {\\n      revert IncorrectAccess(msg.sender);\\n    }\\n    uint256 startToken = _tokenIdCounter.current() + 1;\\n    for (uint16 i = 0; i < qty; i++) {\\n      _tokenIdCounter.increment();\\n      uint256 currentToken = _tokenIdCounter.current();\\n      _safeMint(receiver, currentToken);\\n    }\\n\\n    tokenRegistry.addBatchMetadata(\\n      ITokenRegistry.TokenKey(\\n        liquidUri,\\n        redeemedUri,\\n        startToken,\\n        SafeCast.toUint16(qty),\\n        false\\n      )\\n    );\\n    return _tokenIdCounter.current();\\n  }\\n\\n  function mintWithId(MintWithIdArgs[] calldata mintWithIdArgs)\\n    external\\n    override\\n  {\\n    if (!hasRole(MINTER_ROLE, msg.sender)) {\\n      revert IncorrectAccess(msg.sender);\\n    }\\n    for (uint16 i = 0; i < mintWithIdArgs.length; i++) {\\n      _safeMint(mintWithIdArgs[i].to, mintWithIdArgs[i].tokenId);\\n    }\\n  }\\n\\n  function burn(uint256[] calldata tokens) external override {\\n    bool canBurn = hasRole(BURNER_ROLE, msg.sender) ||\\n      hasRole(PLATFORM_ADMIN_ROLE, msg.sender);\\n    if (!canBurn) {\\n      revert IncorrectAccess(msg.sender);\\n    }\\n    for (uint16 i = 0; i < tokens.length; i++) {\\n      _burn(tokens[i]);\\n    }\\n  }\\n\\n  function changeTokenMetadata(\\n    uint256 batchIndex,\\n    string memory liquidUri,\\n    string memory redeemedUri\\n  ) external override {\\n    if (!hasRole(PLATFORM_ADMIN_ROLE, msg.sender)) {\\n      revert IncorrectAccess(msg.sender);\\n    }\\n    tokenRegistry.updateBatchMetadata(batchIndex, liquidUri, redeemedUri);\\n  }\\n\\n  function lockTokenMetadata(uint256 batchIndex) external override {\\n    if (!hasRole(PLATFORM_ADMIN_ROLE, msg.sender)) {\\n      revert IncorrectAccess(msg.sender);\\n    }\\n    tokenRegistry.lockBatchMetadata(batchIndex);\\n  }\\n\\n  function tokenLocked(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (bool hasUpdated)\\n  {\\n    return tokenRegistry.getTokenKey(tokenId).locked;\\n  }\\n\\n  function setInsuranceRegistry(address _registryAddress)\\n    external\\n    override\\n    onlyRole(PLATFORM_ADMIN_ROLE)\\n  {\\n    GrtLibrary.checkZeroAddress(_registryAddress, \\\"insurance registry\\\");\\n    insuranceRegistry = IInsuranceRegistry(_registryAddress);\\n  }\\n\\n  function setRedemptionManager(address _managerAddress)\\n    external\\n    override\\n    onlyRole(PLATFORM_ADMIN_ROLE)\\n  {\\n    GrtLibrary.checkZeroAddress(_managerAddress, \\\"platform manager\\\");\\n    redemptionManager = _managerAddress;\\n  }\\n\\n  function setSecondaryRoyalties(address receiver, uint96 feeNumerator)\\n    external\\n    override\\n    onlyRole(PLATFORM_ADMIN_ROLE)\\n  {\\n    GrtLibrary.checkZeroAddress(receiver, \\\"secondary royalty\\\");\\n    _setDefaultRoyalty(receiver, feeNumerator);\\n  }\\n\\n  /// @dev Due to multiple inhereted Open Zeppelin contracts implementing supportsInterface we must provide an override as\\n  /// below so Solidity knows how to resolve conflicted inheretence\\n  /// see https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3107\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(IERC165, ERC721Royalty, AccessControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /// @dev Overrides required for the Operator Filter Registry\\n  /// see https://github.com/ProjectOpenSea/operator-filter-registry\\n  function setApprovalForAll(address operator, bool approved)\\n    public\\n    override(ERC721, IERC721)\\n    onlyAllowedOperatorApproval(operator)\\n  {\\n    super.setApprovalForAll(operator, approved);\\n  }\\n\\n  function approve(address operator, uint256 tokenId)\\n    public\\n    override(ERC721, IERC721)\\n    onlyAllowedOperatorApproval(operator)\\n  {\\n    super.approve(operator, tokenId);\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override(ERC721, IERC721) onlyAllowedOperator(from) {\\n    super.transferFrom(from, to, tokenId);\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override(ERC721, IERC721) onlyAllowedOperator(from) {\\n    super.safeTransferFrom(from, to, tokenId);\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory data\\n  ) public override(ERC721, IERC721) onlyAllowedOperator(from) {\\n    super.safeTransferFrom(from, to, tokenId, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBuyItNow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\nimport \\\"./IListing.sol\\\";\\n\\n/// @title Buy It Now\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @custom:contributor Seb N\\n/// @notice A listing type involving a single token that can be bought instantly. If a users placed a bid with a high enough amount, they\\n///         will be the winner. The listing will continue until the timer runs out or there are not tokens left to buy.\\ninterface IBuyItNow is IListing {\\n  //################\\n  //#### STRUCTS ####\\n\\n  /// @dev Parameters for storing Buy It Now information for a given release.\\n  /// @param releaseId The identifier of the DropListing - provided by the DropManager\\n  /// @param startDate Start date/time (Unix time)\\n  /// @param endDate End date/time (Unix time)\\n  /// @param salePrice The price the listing will be sold for (Maps to the startingPrice in the Listing object)\\n  struct BINListing {\\n    uint128 releaseId;\\n    uint40 startDate;\\n    uint40 endDate;\\n    uint256 salePrice;\\n  }\\n\\n  //################\\n  //#### ERRORS ####\\n\\n  //Thrown if {endDate} is in the past or {startDate} is after end date\\n  error IncorrectParams(address sender);\\n\\n  /// Listing ID => {BINListing}\\n  function listings(uint128 listingId)\\n    external\\n    returns (\\n      uint128 releaseId,\\n      uint40 startDate,\\n      uint40 endDate,\\n      uint256 salePrice\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDropManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\nimport \\\"./IDropManagerAdmin.sol\\\";\\nimport \\\"./IListing.sol\\\";\\nimport \\\"./ITokenContract.sol\\\";\\nimport \\\"./IRedemptionManager.sol\\\";\\nimport \\\"./IRoyaltyDistributor.sol\\\";\\nimport \\\"./ISwap.sol\\\";\\n\\n/// @title Drop Manager\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor Sean L (slongdotexe)\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @custom:contributor Seb N\\n/// @notice The nerve centre of the Droping system for GRT. Responsible for routing calls to relevant implementation\\n///         contracts for purchase and token logic\\ninterface IDropManager is IDropManagerAdmin {\\n  //################\\n  //#### STRUCTS ####\\n\\n  /// @dev Parameters for creating a Release which could include one or more tokens. E.g a box of six wines\\n  /// @param listingType The identifier of the drop contract which manages sale logic. Up to 255\\n  /// @param listingId The listing identifier - Counter from DropManager contract\\n  /// @param startTokenId Start point of included tokens\\n  /// @param endTokenId The end of the token range to drop\\n  /// @param producerPercentage The percentage of sales to send to producers. The remaining funds will be claimed by GRT\\n  /// @param producer The address of the producer who will receive funds for release sales\\n  struct Release {\\n    uint128 listingId;\\n    uint128 startTokenId;\\n    uint128 endTokenId;\\n    uint8 listingType;\\n    uint16 producerPercentage;\\n    address producer;\\n  }\\n\\n  //################\\n  //#### EVENTS ####\\n\\n  /// @dev Emitted when a Release is created\\n  event ReleaseCreated(uint128 releaseId);\\n\\n  /// @dev Emitted on successful token claim\\n  event TokenClaimed(address claimant, uint128 tokenId);\\n\\n  /// @dev Emitted when unsold tokens are withdrawn\\n  event TokensWithdrawn(\\n    address indexed receiver,\\n    uint128 listingId,\\n    uint128[] tokens\\n  );\\n\\n  /// @dev Emitted when proceeds from listings are withdrawn successfully\\n  event ProceedsWithdrawn(address indexed receiver, uint128[] listingIds);\\n\\n  /// @dev Emitted on successful setting of a Time Lock\\n  event TimeLockSet(uint256 indexed releaseId, uint256 indexed releaseDate);\\n\\n  /// @dev Emitted when funds are distributed to producers\\n  event FundsDistributed(address receiver, uint256 amount, uint128 releaseId);\\n\\n  //################\\n  //#### ERRORS ####\\n\\n  /// @dev Thrown if an account attempts to create a listing for a release that already has a listing\\n  error ReleaseAlreadyListed(address sender, uint128 releaseId);\\n\\n  /// @dev Thrown if the provided releaseId does not exist\\n  error InvalidRelease(address sender, uint128 releaseId);\\n\\n  /// @dev Thrown if an account attempts to withdraw an un-sold token that is not included in the release ID provided\\n  error TokenNotInRelease(uint128 tokenId);\\n\\n  /// @dev Thrown if usdc balance of contract does not match expected after swap\\n  error IncorrectSwapParams();\\n\\n  /// @dev Thrown if an account attempts to withdraw a token that already has a bid\\n  error TokenHasBid(uint128 tokenId);\\n\\n  /// @dev Thrown everytime unless msg.sender is the address of the listingRegistry itself\\n  error InvalidTransferOperator();\\n\\n  /// @dev Thrown if an ETH transfer fails\\n  error EthTransferFailed();\\n\\n  /// @dev Thrown if attempting to transfer a zero eth amount\\n  error InvalidTokenAmount();\\n\\n  /// @dev Thrown if operations attempt to be performed on a release with a listing that is still active\\n  /// @param listingId The listing ID that is still considered active\\n  error ListingActive(uint128 listingId);\\n\\n  /// @dev Thrown if the token has already sold or been otherwise withdrawn\\n  error TokenAlreadySold();\\n\\n  /// @dev Thrown if an invalid producer percentage is provided (greater than 100%)\\n  error InvalidProducerPercentage(uint16 producerPercentage);\\n\\n  /// @dev Throw if attempting to distribute funds on a release that does not have any remaining funds to distribute\\n  /// @param listingId The id of the listing for which the error was thrown\\n  error NoFundsRemaining(uint128 listingId);\\n\\n  //###################\\n  //#### FUNCTIONS ####\\n\\n  /// @notice Create a release for tokens\\n  /// @dev Calls the liquid token contract to mint a sequential range of tokens and add tokens URIs to the registry\\n  /// @param qty The number of tokens to mint for the release\\n  /// @param liquidUri The liquid token URI to set for the batch\\n  /// @param redeemedUri The redeemed token URI to set for the batch\\n  /// @param producer The address of the producer who will receive funds for release sales\\n  /// @param producerPercentage The percentage of sales to send to producers. The remaining funds will be claimed by GRT\\n  function createRelease(\\n    uint128 qty,\\n    string memory liquidUri,\\n    string memory redeemedUri,\\n    address producer,\\n    uint16 producerPercentage\\n  ) external;\\n\\n  /// @notice Create a listing for a release\\n  /// @dev Creates a Listing at the target contract based on the provided listingType\\n  /// @param listing The listing data\\n  /// @param listingType The type of listing this should be e.g EnglishDrop, Buy It Now\\n  /// @param releaseDate The date at which the listing is published.\\n  /// @param data Arbitrary additional data to be passed to the Listing contract, should additional data be required by new listing types in future\\n  function createListing(\\n    IListing.Listing calldata listing,\\n    uint8 listingType,\\n    uint256 releaseDate,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Create a release and list in at a listing contract with one call\\n  /// @param listingType The listing type identifer\\n  /// @param qty The number of tokens to mint\\n  /// @param liquidUri The liquid token URI to set for the batch\\n  /// @param redeemedUri The redeemed token URI to set for the batch\\n  /// @param producer The address of the producer who will receive funds for release sales\\n  /// @param producerPercentage The percentage of sales to send to producers. The remaining funds will be claimed by GRT\\n  /// @param listing The listing data to pass to the listing contract\\n  /// @param releaseDate The date at which the release is published.\\n  /// @param data Arbitrary additional data should requirements change in future\\n  function createReleaseAndList(\\n    uint8 listingType,\\n    uint128 qty,\\n    string memory liquidUri,\\n    string memory redeemedUri,\\n    address producer,\\n    uint16 producerPercentage,\\n    IListing.Listing memory listing,\\n    uint256 releaseDate,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Update a listing\\n  /// @dev Cannot update an active listing\\n  /// @param listingType The listing type identifer\\n  /// @param listingId The identifier of the listing to be updated\\n  /// @param listing The listing data to update the existing listing with\\n  /// @param data Arbitrary additional data should requirements change in future\\n  function updateListing(\\n    uint8 listingType,\\n    uint128 listingId,\\n    IListing.Listing calldata listing,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Delete a listing\\n  /// @dev Cannot delete a listing once it has started\\n  /// @param listingType The listing type ID of the target listing contract\\n  /// @param listingId The listing ID of the listing itself\\n  function deleteListing(uint8 listingType, uint128 listingId) external;\\n\\n  /// @notice Relist a release, maintaining funds stored in the DropManager\\n  /// @dev Assigns a new listing ID and sets new listing information on the target contract\\n  /// @dev Calls create listing on the target contract, even if the target is the same as the old one\\n  /// @param releaseId The release ID this relisting targets\\n  /// @param listing The listing information to relist with\\n  /// @param data Arbitrary additional data\\n  function relistRelease(\\n    uint128 releaseId,\\n    uint8 newListingType,\\n    IListing.Listing calldata listing,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Place a bid directly with USDC\\n  /// @param releaseId The release ID this relisting targets\\n  /// @param tokenId The targeted token ID\\n  /// @param amount The amount of USDC for the token\\n  /// @param data Arbitrary additional data\\n  function placeBidWithUSDC(\\n    uint128 releaseId,\\n    uint128 tokenId,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Places a bid with ETH\\n  /// @dev Calls Swap contract to exchange ETH for USDC\\n  /// @param releaseId The release ID this relisting targets\\n  /// @param tokenId The targeted token ID\\n  /// @param spender an address provided by the 0x Quote API\\n  /// @param swapTarget an address provided by the 0x Quote API\\n  /// @param data Data from 0x Swap API\\n  function placeBidWithETH(\\n    uint128 releaseId,\\n    uint128 tokenId,\\n    uint256 amount,\\n    address spender,\\n    address payable swapTarget,\\n    bytes calldata data\\n  ) external payable;\\n\\n  /// @notice Places a bid with FIAT through integration iwth Paper\\n  /// @dev Calls Swap contract to exchange ETH for USDC\\n  /// @param releaseId The release ID this relisting targets\\n  /// @param tokenId The targeted token ID\\n  /// @param receiver The person to receive the token through purchase with Paper\\n  /// @param spender an address provided by the 0x Quote API\\n  /// @param swapTarget an address provided by the 0x Quote API\\n  /// @param data Data from 0x Swap API\\n  function placeETHBidWithReceiver(\\n    uint128 releaseId,\\n    uint128 tokenId,\\n    address receiver,\\n    uint256 amount,\\n    address spender,\\n    address payable swapTarget,\\n    bytes calldata data\\n  ) external payable;\\n\\n  /// @notice Callback function for listing contracts to return USDC of the previous highest bidder once they are out-bid\\n  /// @dev Can ONLY be used as a callback from a listing contract - if msg.sender != listingRegistry[listingId] it reverts\\n  /// @param listingType The listing ID of the contract doing the callback\\n  /// @param listingId The ID of the listing\\n  /// @param destination The destination for the USDC transfer (previous higest bidder)\\n  /// @param amount The value of ETH to send\\n  function transferBaseToken(\\n    uint8 listingType,\\n    uint128 listingId,\\n    address destination,\\n    uint256 amount\\n  ) external;\\n\\n  /// @notice Callback function for listing contracts to send tokens to a user for immediate settlement listings - e.g buy it now\\n  /// @dev Can ONLY be used as a callback from a listing contract - if msg.sender != listingRegistry[listingId] it reverts\\n  /// @param listingType The listing ID of the contract doing the callback\\n  /// @param tokenId The ID of the token to be transferred\\n  /// @param destination The destination for the ETH transfer (previous higest bidder)\\n  function transferToken(\\n    uint8 listingType,\\n    uint128 tokenId,\\n    address destination\\n  ) external;\\n\\n  /// @notice Claim a token that has been won via a non-immediate settlement sale, i.e Drop\\n  /// @dev Performs check at the target contract to verify the highest bidder, listing has ended etc\\n  /// @param tokenId The ID of the token to be checked\\n  /// @param listingId The ID of the listing this token was won in\\n  /// @param listingType The listing type this was one from\\n  function claimToken(\\n    uint128 releaseId,\\n    uint128 tokenId,\\n    uint128 listingId,\\n    uint8 listingType\\n  ) external;\\n\\n  /// @notice Withdraw un-sold tokens.\\n  /// @dev If tokens are withdrawn from the dropManager they cannot be relisted for sale via the current droping system\\n  /// @param releaseId The release ID these tokens belong to\\n  /// @param tokens Array of token IDs\\n  /// @param destination The destination for the tokens to be withdrawn to\\n  function withdrawTokens(\\n    uint128 releaseId,\\n    uint128[] calldata tokens,\\n    address destination\\n  ) external;\\n\\n  /// @notice Distribute remaining funds for a release that usually distributes funds on claim (e.g Drops)\\n  /// @dev Distributes to the assigned producer wallet, with remaining funds going to the grt royalty wallet\\n  /// @dev Should only be called for releases that store pending eth balances until claim (e.g Drops)\\n  /// @dev Emits a {FundsDistributed} event for the receiver\\n  /// @dev Emits a {FundsDistributed} event for the royalties\\n  /// @dev Can only be called by PLATFORM_ADMIN role\\n  /// @param listingType The id of the listing contract in which the listing exists\\n  /// @param listingId The id of the listing to release funds for\\n  /// @param releaseId The id of the release for which the listing was made\\n  function distributeListingFunds(\\n    uint8 listingType,\\n    uint128 listingId,\\n    uint128 releaseId\\n  ) external;\\n\\n  /// @notice Distribute funds for a single sale to producer account, with remaining funds sent as a royalty to the grt royalty account\\n  /// @dev Can only be called by Listing contracts\\n  /// @dev Should be called when the token is claimed for drops, and on sale for instant transactions like Buy It Now\\n  /// @dev Emits a {FundsDistributed} event for the receiver\\n  /// @dev Emits a {FundsDistributed} event for the royalties\\n  /// @param listingType The type that this call was made from\\n  /// @param listingId The ID of the listing the token was won in\\n  /// @param releaseId The ID of the release the token was won in\\n  /// @param saleAmount The total value of the sale, with producer proceed being a percentage of this amount\\n  function distributeSaleFunds(\\n    uint8 listingType,\\n    uint128 listingId,\\n    uint128 releaseId,\\n    uint256 saleAmount\\n  ) external;\\n\\n  /// @notice Distribute secondary market sales for a release\\n  /// @dev Distributes to the assigned producer wallet, with remaining funds going to the grt royalty wallet\\n  /// @dev Emits a {FundsDistributed} event for the receiver\\n  /// @dev Emits a {FundsDistributed} event for the royalties\\n  /// @dev Can only be called by PLATFORM_ADMIN role\\n  /// @param releaseId The id of the release for which the listing was made\\n  /// @param amount The amount of funds to distribute\\n  function distributeSecondaryFunds(uint128 releaseId, uint256 amount) external;\\n\\n  /// @notice Getter for specific bit in hasBid bitmap\\n  /// @param tokenId The token ID\\n  /// @return status Whether or not the token has a bid\\n  function hasBid(uint128 tokenId) external view returns (bool status);\\n\\n  /// @notice Getter for specific bit in hasSold bitmap\\n  /// @param tokenId The token ID\\n  /// @return  status Whether or not the token has sold\\n  function hasSold(uint128 tokenId) external view returns (bool status);\\n\\n  //################################\\n  //#### AUTO-GENERATED GETTERS ####\\n  function releaseCounter() external returns (uint128 currentValue);\\n\\n  function listingCounter() external returns (uint128 currentValue);\\n\\n  /// @notice Setter for setting the redemption manager.\\n  /// @dev sets the address for the redemption manager so that calls to the Redemption Manager can be made.\\n  /// @param _redemptionManager the address of the redemption manager.\\n  function setRedemptionManager(address _redemptionManager) external;\\n\\n  /// @notice Setter for setting the royalty distributor.\\n  /// @dev sets the address for the redemption manager so that calls to the Redemption Manager can be made.\\n  /// @param _royaltyDistributor the address of the royalty distributor.\\n  function setRoyaltyDistributor(address _royaltyDistributor) external;\\n\\n  /// @notice Setter for the GRT Royalty Walet address\\n  /// @dev Sets the address for the wallet that receives royalties from token sales\\n  /// @param _royaltyWallet the address of the royalty wallet\\n  function setRoyaltyWallet(address _royaltyWallet) external;\\n\\n  function releases(\\n    uint128 releaseId\\n  )\\n    external\\n    returns (\\n      uint128 listingId,\\n      uint128 startTokenId,\\n      uint128 endTokenId,\\n      uint8 listingType,\\n      uint16 producerPercentage,\\n      address producer\\n    );\\n\\n  function pendingEth(uint128 listingId) external returns (uint256 pending);\\n\\n  function liquidToken() external returns (ITokenContract tokenContract);\\n\\n  function royaltyDistributor()\\n    external\\n    returns (IRoyaltyDistributor _royaltyDistributor);\\n\\n  function redemptionManager()\\n    external\\n    returns (IRedemptionManager _redemptionManager);\\n\\n  function swapContract() external returns (ISwap _swap);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDropManagerAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\nimport \\\"./IListing.sol\\\";\\n\\n/// @title Drop Manager Admin\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor Sean L (slongdotexe)\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @notice Provides admin functionality to the Drop Manager for the GRT Wines platform\\ninterface IDropManagerAdmin {\\n  //################\\n  //#### EVENTS ####\\n\\n  /// @dev Emitted when a listing type is created\\n  /// @param listingAddress The address of the listing contract\\n  /// @param listingType The ID to assign to the listing\\n  event ListingTypeCreated(\\n    address indexed listingAddress,\\n    uint8 indexed listingType\\n  );\\n\\n  /// @dev Emitted when the status of a listing is paused / unpaused\\n  /// @param listingType The ID of the listing that had it's status changed\\n  /// @param status The status the listing was changed to\\n  event ListingStatusChanged(uint128 indexed listingType, bool status);\\n\\n  /// @dev Emitted when all listings are globally paused / unpaused\\n  /// @param sender The sender of the transaction\\n  /// @param status The status that the global pause / unpause was changed to\\n  event AllListingStatusChanged(address indexed sender, bool status);\\n\\n  //################\\n  //#### ERRORS ####\\n\\n  /// @dev Thrown if the specific listing being accessed, or all listings are paused\\n  error ListingPaused();\\n  /// @dev Thrown if the listing ID has been taken by an existing implementaiton\\n  error ListingIdTaken();\\n  /// @dev Thrown if changing the pause status is a redundant call\\n  error ListingStatusAlreadySet();\\n\\n  //###################\\n  //#### FUNCTIONS ####\\n\\n  /// @notice Use to register a listing type logic contract\\n  /// @dev IDs are not sequential and it is assumed that the sender of this transaction has some intelligence around how they use this\\n  /// @param listingType The ID of the listing type to be created\\n  /// @param listingContract The address of the listing contract\\n  function registerListingType(uint8 listingType, address listingContract)\\n    external;\\n\\n  /// @notice Pause a specific listing\\n  /// @dev Specific pause function so that this operation is idempotent\\n  /// @param listingId The ID of the listing to pause\\n  function pauseListing(uint128 listingId) external;\\n\\n  /// @notice Unpause a specific listing\\n  /// @dev Specific unpause function so that this operation is idempotent\\n  /// @param listingId The ID of the listing to unpause\\n  function unpauseListing(uint128 listingId) external;\\n\\n  /// @notice Pause all listings\\n  /// @dev Specific pause function so that this operation is idempotent\\n  function pauseAllListings() external;\\n\\n  /// @notice Unpause all listings\\n  /// @dev Specific unpause function so that this operation is idempotent\\n  function unpauseAllListings() external;\\n\\n  //################################\\n  //#### AUTO-GENERATED GETTERS ####\\n\\n  function allListingsPaused() external returns (bool);\\n\\n  function listingRegistry(uint8) external returns (IListing);\\n\\n  function addressListingLookup(address) external returns (uint8);\\n\\n  function PLATFORM_ADMIN_ROLE() external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGrtWines.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\ninterface IGrtWines {\\n  /// @dev Thrown if the sender has incorrect access to use a function\\n  /// @param sender The sender of the transaction\\n  error IncorrectAccess(address sender);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInsuranceRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\nimport \\\"./IGrtWines.sol\\\";\\n\\n/// @title GRT Wines Insurance Registry\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor Sean L (slongdotexe)\\n/// @notice External registry contract for tracking if a Token (bottle of wine) has been damaged and thus should\\n///         not be able to be transferred to another user\\n/// @dev    Extended Bitmaps library is utilised to provide a gas efficent mechanism for rapidly manipulating large\\n//          quantities of boolean statuses. It is assumed that the structure of the Bitmap will be reliably calculated off-chain\\ninterface IInsuranceRegistry is IGrtWines {\\n  //################\\n  //#### STRUCTS ####\\n\\n  /// @notice Data structure for registering an insurance event\\n  /// @param firstAffectedToken The first affected token, this allows us to easily set each bucket'\\n  /// @param affectedTokens Bitmap of tokens that are void\\n  struct InsuranceEvent {\\n    uint256 firstAffectedToken;\\n    uint256[] affectedTokens;\\n  }\\n\\n  //################\\n  //#### EVENTS ####\\n  event InsuranceEventRegistered(\\n    uint256 firstAffectedToken,\\n    uint256[] affectedTokens\\n  );\\n\\n  //###################\\n  //#### FUNCTIONS ####\\n\\n  /// @notice Create an insurance event\\n  /// @dev It is assumed that the bitmap has been adequately generated off-chain\\n  /// @dev Emits InsuranceEventRegistered\\n  /// @param insuranceEvent Insurance event data\\n  function createInsuranceEvent(InsuranceEvent calldata insuranceEvent)\\n    external;\\n\\n  /// @notice Check if a token has an insurance event registered\\n  /// @param _tokenId The token ID to check\\n  /// @return isTokenAffected If TRUE token has an insurance claim - transfers except to a RedemptionManager should revert.\\n  function checkTokenStatus(uint256 _tokenId)\\n    external\\n    view\\n    returns (bool isTokenAffected);\\n\\n  //################################\\n  //#### AUTO-GENERATED GETTERS ####\\n  function PLATFORM_ADMIN_ROLE() external returns (bytes32 role);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IListing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\nimport \\\"./IGrtWines.sol\\\";\\n\\ninterface IListing is IGrtWines {\\n  //################\\n  //#### STRUCTS ####\\n\\n  /// @dev Parameters for creating a Listing. Releases and Listings are matched with {listingId}\\n  /// @param releaseId The release identifier - Counter from DropManager contract\\n  /// @param listingId The release identifier - Counter from DropManager contract\\n  /// @param startDate Start date of the drop listing\\n  /// @param endDate End date of the drop listing\\n  /// @param minimumBid Minumum price to allow the listing to sell for\\n  /// @param startingPrice Starting price for the listing\\n  struct Listing {\\n    uint128 releaseId;\\n    uint40 startDate;\\n    uint40 endDate;\\n    uint256 minimumBid;\\n    uint256 startingPrice;\\n  }\\n\\n  /// @param bidder The release identifier - Counter from DropManager contract\\n  /// @param amount  The amount of the bid\\n  struct Bid {\\n    address bidder;\\n    uint256 amount;\\n  }\\n\\n  //################\\n  //#### EVENTS ####\\n\\n  /// @dev Emitted when a Listing is created\\n  event ListingCreated(uint128 listingId, uint128 releaseId);\\n\\n  /// @dev Emitted when a Listing is updated\\n  event ListingUpdated(uint128 listingId);\\n\\n  /// @dev Emitted when a listing is deleted\\n  event ListingDeleted(uint128 listingId);\\n\\n  /// @dev Emitted when a bid is successfully registered\\n  event BidRegistered(\\n    address indexed bidder,\\n    uint256 amount,\\n    uint256 tokenId,\\n    uint256 listingId\\n  );\\n\\n  /// @dev Emitted when bidding is extended due to a bid being received < 10 minutes before cut-off\\n  event BiddingExtended(uint128 listingId);\\n\\n  //################\\n  //#### ERRORS ####\\n  /// @dev Throw if listing is being deleted while it is active or completed. (TODO NEED TO UPDATE LOGIC IN ENGLISH DROP CONTRACT)\\n  error ListingStarted();\\n\\n  /// @dev Thrown if certain operations try to be performed on already active listings\\n  error ListingActive();\\n\\n  /// @dev Thrown if sender requests the status of a listing that was not listed at this contract.\\n  error NotListedHere();\\n\\n  /// @dev Thrown if a bid is invalid, e.g bid < minimum bid, bid < current bid\\n  error InvalidBid();\\n\\n  /// @dev Thrown if a bid is placed on a listing that has not started or has expired\\n  error ListingNotActive();\\n\\n  /// @dev Thrown if validateTokenClaim or validateEthWithdrawal calls are invalid, e.g bidding still active or claimant not the bidding winner\\n  error InvalidClaim();\\n\\n  /// @dev Thrown if attempting to distribute funds on a listings that has already had its funds distributed\\n  /// @param listingId The id of the listing for which the error was thrown\\n  error AlreadyDistributed(uint128 listingId);\\n\\n  /// @dev Thrown if a distribution is attempted on a listing type that does not support it\\n  error DistributionNotSupported();\\n\\n  //###################\\n  //#### FUNCTIONS ####\\n\\n  /// @notice Used to create a purchase listing\\n  /// @dev Only callable by the dropManager (has DROP_MANAGER_ROLE)\\n  /// @param listingId - ID of the listing\\n  /// @param listing - Listing struct\\n  function createListing(\\n    uint128 listingId,\\n    Listing calldata listing,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Used to update a purchase listing\\n  /// @dev Only callable by the dropManager (has DROP_MANAGER_ROLE)\\n  /// @dev Only if listing has not started yet\\n  /// @param listingId - ID of the listing\\n  /// @param listing - Listing struct\\n  function updateListing(\\n    uint128 listingId,\\n    Listing calldata listing,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Used to delete a purchase listing\\n  /// @dev Only callable by the dropManager (has DROP_MANAGER_ROLE)\\n  /// @dev Only if listing has not started yet\\n  /// @param listingId - ID of the listing\\n  function deleteListing(uint128 listingId) external;\\n\\n  /// @notice Utilised to register a bid for a specific token\\n  /// @dev Only callable by the dropManager (has DROP_MANAGER_ROLE)\\n  /// @dev Only if listing has not started yet\\n  /// @param listingId - The listing ID that this bid relates to\\n  /// @param tokenId - The tokenId this bid relates to\\n  /// @param bid - The bid itself\\n  function registerBid(\\n    uint128 listingId,\\n    uint256 tokenId,\\n    Bid calldata bid,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Utilised to validate that a valid claim of a token is being submitted\\n  /// @dev Only callable by the dropManager (has DROP_MANAGER_ROLE)\\n  /// @dev Either returns true on success or reverts\\n  /// @dev  Only returns true if the claimant is the highest bidder and listing has expired\\n  /// @param listingId - The listing ID that this bid relates to\\n  /// @param tokenId - The tokenId this bid relates to\\n  /// @return saleAmount - The amount for which the token was sold\\n  function validateTokenClaim(\\n    uint128 listingId,\\n    uint128 releaseId,\\n    uint128 tokenId,\\n    address claimant\\n  ) external returns (uint256 saleAmount);\\n\\n  /// @notice Validate whether a manual distribution is allowed for this listing. If it is valid, set the listing as distributed and return true. If not, revert\\n  /// @dev Only callable by the droper (has DROP_MANAGER_ROLE)\\n  /// @param listingId The id of the listing to validate\\n  /// @return valid Boolean as to whether the manual distribution is allowed\\n  function validateManualDistribution(uint128 listingId)\\n    external\\n    returns (bool valid);\\n\\n  /// @notice Check if a listing has passed its end date\\n  /// @dev Should be checked before placing a bid\\n  /// @param listingId - The id of the listing to check\\n  function listingEnded(uint128 listingId) external view returns (bool status);\\n\\n  //#################\\n  //#### GETTERS ####\\n  function DROP_MANAGER_ROLE() external returns (bytes32 role);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRedemptionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\nimport \\\"../implementations/TokenContract.sol\\\";\\nimport \\\"./IGrtWines.sol\\\";\\n\\n/// @title GrtWines Redemption Manager Contract\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor Sean L (slongdotexe)\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @custom:contributor Seb N\\n/// @notice Used to manage the process of converting a Liquid Token (sitll in the Warehouse) to a Redeemed Token (Sent to the owner). User's may submit their token for redemption and the warehouse then either aborts or finalizes the redemption\\n/// @dev  This contract needs BURNER_ROLE on the Liquid Token contract and MINTER_ROLE on the Redeemed Token Contract\\n///       PLATFORM_ADMIN_ROLE and WAREHOUSE_MANAGER_ROLE are used to protect functions\\n///       DEFAULT_ADMIN_ROLE is not utilised for any purpose other than being the admin for all other roles\\ninterface IRedemptionManager is IGrtWines {\\n  //################\\n  //#### STRUCTS ####\\n\\n  //################\\n  //#### EVENTS ####\\n  /// @dev Emitted on successful redemption creation\\n  event RedemptionCreated(address indexed sender, uint256 indexed tokenId);\\n\\n  /// @dev Emitted on successful redemption finalisation\\n  event RedemptionFinalised(address indexed sender, uint256 indexed tokenId);\\n\\n  /// @dev Emitted on successful redemption finalisation\\n  event RedemptionAborted(address indexed sender, uint256 indexed tokenId);\\n\\n  //################\\n  //#### ERRORS ####\\n\\n  /// @dev Thrown if the sender attempts to deploy with {platformAdmin} and {superUser} set to the same address\\n  error AdminSuperUserMatch();\\n\\n  /// @dev Thrown if the user does not posses the correct redeemable status.\\n  /// @param releaseId the release for which a redemption is being created.\\n  error RedeemableStatusIncorrect(uint256 releaseId);\\n\\n  /// @dev Thrown if the user tries to set the timelock release date to before the current block time.\\n  /// @param releaseDate the release date which the token is redeemable from\\n  error ReleaseDateInvalid(uint256 releaseDate);\\n\\n  //###################\\n  //#### FUNCTIONS ####\\n  /// @notice Utilised to create a redemption. Transfers the token to this contract as escrow and sets {originalOwners}\\n  /// @dev Account must {approveForAll} or {approve} for the specific token to redeeem\\n  /// @param tokenId - The token to be redeemed\\n  /// @param releaseId the release for which a redemption is being redeemed.\\n  function createRedemption(uint256 tokenId, uint256 releaseId) external;\\n\\n  /// @notice Utilised to bulk finalise tokens\\n  /// @dev Account must have WAREHOUSE_MANAGER_ROLE to use\\n  /// @dev {createRedemption} must be called first. ERC721 0 address checks will fail if calling with tokens that haven't yet had a redemption created\\n  /// @param tokens - Array of tokens to finalise\\n  function finaliseRedemption(uint256[] calldata tokens) external;\\n\\n  /// @notice Utilised to abort the redemption of a token\\n  /// @dev Account must have PLATFORM_ADMIN_ROLE to use\\n  /// @dev Returns the token to the original owner and deletes the value at {originalOwners}\\n  /// @param tokenId - Array of {FinaliseArgs} - see for more docs\\n  function abortRedemption(uint256 tokenId) external;\\n\\n  /// @notice Utilised to set a time lock on the redemption of a token\\n  /// @dev Account must have PLATFORM_ADMIN_ROLE or DROP_MANAGER_ROLE to use\\n  /// @dev Sets the time value for a release in the timelock mapping in the Timelock contract\\n  /// @param releaseId - the release to update the timelock for.\\n  /// @param releaseDate - the date to set the timelock to.\\n  function setTimeLock(uint256 releaseId, uint256 releaseDate) external;\\n\\n  //#################\\n  //#### GETTERS ####\\n  function PLATFORM_ADMIN_ROLE() external returns (bytes32 role);\\n\\n  function WAREHOUSE_MANAGER_ROLE() external returns (bytes32 role);\\n\\n  function DROP_MANAGER_ROLE() external returns (bytes32 role);\\n\\n  function originalOwners(uint256 tokenId) external returns (address owner);\\n\\n  function liquidToken() external returns (TokenContract implementation);\\n\\n  function redeemedToken() external returns (TokenContract implementation);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoyaltyDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\ninterface IRoyaltyDistributor {\\n  /// @dev Emitted when funds are distributed to producers\\n  /// @param receiver The address that received the distributed funds\\n  /// @param amount The amount of funds received\\n  /// @param releaseId The id of the release for which the distribution occurred\\n  event FundsDistributed(address receiver, uint256 amount, uint128 releaseId);\\n\\n  /// @dev Emitted when ether funds are received\\n  /// @param sender The sender of the funds\\n  /// @param amount The amount of funds received\\n  event EthReceived(address sender, uint256 amount);\\n\\n  /// @dev Thrown if an ETH transfer fails\\n  /// @param destination The receiver of the ether\\n  /// @param amount The amount of ether being sent\\n  error EthTransferFailed(address destination, uint256 amount);\\n\\n  /// @dev Thrown if an invalid amount is provided\\n  error InvalidAmount();\\n\\n  /// @dev Thrown if attempting to transfer a zero eth amount\\n  error InvalidEthAmount();\\n\\n  /// @notice Distribute funds accumulated from secondary marketplaces to producers and the GRT royalty wallet\\n  /// @dev Only callable by the DROP_MANAGER_ROLE\\n  /// @param amount The total value of the sale to be distributed\\n  /// @param receiver The address of the receiver of the funds percentage (i.e the producer)\\n  /// @param percentage The percentage of funds to distribute. Should account for decimal precision of 10**2\\n  /// @param royaltyWallet The address if the royalty wallet to receive remaining funds not sent to the producer\\n  function distributeFunds(\\n    uint256 amount,\\n    address receiver,\\n    uint16 percentage,\\n    address royaltyWallet,\\n    uint128 releaseId\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ISwap {\\n  /** ERRORS */\\n\\n  /// @notice reverts when a zero address is passed in as a potential admin or smart contract location\\n  error CannotBeZeroAddress();\\n  /// @notice reverts when the 0x token swap fails\\n  error ZeroXSwapFailed();\\n  /// @notice reverts when the user provides an incorrect buy token\\n  error IncorrectBuyToken();\\n\\n  /**\\n    @notice emits when a user swaps a token to deposit into a thin wallet\\n    @param user the user who swapped the token\\n    @param amount the amount the user swapped of their token\\n    @param token the token that the user swapped\\n    @param target the thin wallet that the user was depositing into\\n  */\\n  event SwapDeposit(address user, uint256 amount, ERC20 token, address target);\\n\\n  /**\\n    @notice emits when a user swaps a token to deposit into a thin wallet\\n    @param user the user who swapped the token\\n    @param amount the amount the user swapped of their token\\n    @param target the thin wallet that the user was depositing into\\n  */\\n  event SwapETH(address user, uint256 amount, address target);\\n\\n  /**\\n    @notice this function is used to swap donated ETH to a desired token before it is deposited into another external contract\\n    @param buyToken the token that the user wishes to swap for, should be the base token\\n    @param amount the amount the user is selling of their sellToken\\n    @param location where the bought tokens will be sent after they are swapped\\n    @param spender an address provided by the 0x Quote API\\n    @param swapTarget an address provided by the 0x Quote API\\n    @param swapCallData the calldata provided by the 0x Quote API\\n  */\\n  function depositETH(\\n    ERC20 buyToken,\\n    uint256 amount,\\n    address location,\\n    address spender,\\n    address payable swapTarget,\\n    bytes calldata swapCallData\\n  ) external payable;\\n\\n  /**\\n    @notice this function is used to swap donated ERC20 tokens to a desired token before it is deposited into another external contract\\n    @param sellToken the token that the user is selling to acquire the base token\\n    @param buyToken the token that the user wishes to swap for, should be the base token\\n    @param amount the amount the user is selling of their sellToken\\n    @param location where the bought tokens will be sent after they are swapped\\n    @param spender an address provided by the 0x Quote API\\n    @param swapTarget an address provided by the 0x Quote API\\n    @param swapCallData the calldata provided by the 0x Quote API\\n  */\\n  function depositERC20(\\n    ERC20 sellToken,\\n    ERC20 buyToken,\\n    uint256 amount,\\n    address location,\\n    address spender,\\n    address payable swapTarget,\\n    bytes calldata swapCallData\\n  ) external payable;\\n\\n  function baseToken() external view returns (ERC20);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../interfaces/IInsuranceRegistry.sol\\\";\\nimport \\\"../interfaces/ITokenRegistry.sol\\\";\\nimport \\\"./IGrtWines.sol\\\";\\n\\n/// @title TokenContract\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor Sean L (slongdotexe)\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @custom:contributor Brodie S\\n/// @notice Implementation to be used for the Liquid and Redeemed editions of each token\\n/// @dev  The GRT Wines architecture uses a dual ERC721 token system. When releases are created the `LiquidToken`\\n///       is minted and can be purchased through various listing mechanisms via the Drop Manager. When a user\\n///       wishes to redeem their token for a physical asset, the `LiquidToken` is burned, and a `RedeemedToken` is\\n///       minted. The same `TokenContract` implementation is deployed twice, once for each edition. The metadata\\n///       for both the Liquid and Redeemed editions of each token is set when a release is created, and manage by\\n///       the `TokenRegistry`. Almost entirely stock ERC721 with the exception of externalised mint, burn and update\\n///       token URI functions which will be guarded by Open Zeppelin RBAC.\\n///       DEFAULT_ADMIN_ROLE is not utilised for any purpose other than being the admin for all other roles\\ninterface ITokenContract is IGrtWines, IERC721 {\\n  //################\\n  //#### STRUCTS ####\\n\\n  /// @dev Holds the arguments for a mint transaction\\n  /// @param to The account the token should be minted to\\n  struct MintArgs {\\n    address to;\\n  }\\n\\n  /// @dev Holds the arguments necessary for minting tokens with a specific ID\\n  /// @param to The token ID to be locked\\n  /// @param tokenId The token ID to be minted\\n  struct MintWithIdArgs {\\n    address to;\\n    uint256 tokenId;\\n  }\\n\\n  //################\\n  //#### ERRORS ####\\n\\n  /// @dev Thrown if a transaction attempts to update the metadata for a token that has already had an update (locked)\\n  /// @param sender The sender of the transaction\\n  /// @param tokenId The tokenId that resulted in the error\\n  error TokenLocked(address sender, uint256 tokenId);\\n\\n  /// @dev Thrown if an account attempts to transfer a token that has an insurance event AND msg.sender != redemptionManager\\n  /// @param tokenId The token ID the attempted to be transferred\\n  error InsuranceEventRegistered(uint256 tokenId);\\n\\n  //###################\\n  //#### FUNCTIONS ####\\n\\n  /// @notice External mint funciton for Tokens\\n  /// @dev Bulk mint one or more tokens via MintArgs array for gas efficency.\\n  /// @dev Only accessible to PLATFORM_ADMIN_ROLE or MINTER_ROLE\\n  /// @param receiver The address to receive the minted NFTs. This should be the DropManager\\n  /// @param qty The number of tokens to mint\\n  /// @param liquidUri The liquid token URI to set for the batch\\n  /// @param redeemedUri The redeemed token URI to set for the batch\\n  function mint(\\n    address receiver,\\n    uint128 qty,\\n    string memory liquidUri,\\n    string memory redeemedUri\\n  ) external returns (uint256 mintCount);\\n\\n  /// @notice External mint function to allow minting token with an explicit ID\\n  /// @dev Bulk mint one or more tokens with an explicit ID - intended to be used by the RedemptionManager to maintain\\n  /// @dev Only accessible to MINTER_ROLE which should only be assigned to the RedemptionManager when this contract is deployed as the RedeemedToken\\n  /// @dev This does not set the metadata as it is assumed that the metadata will already have been set in the TokenRegistry on mint of the Liquid Token\\n  /// @param mintWithIdArgs - Array of MintWithIdArgs struct. See {MintWithIdArgs} for param docs\\n  function mintWithId(MintWithIdArgs[] calldata mintWithIdArgs) external;\\n\\n  /// @notice External burn funciton\\n  /// @dev Only accessible to PLATFORM_ADMIN_ROLE or BURNER_ROLE\\n  /// @param tokens - Array of token IDs to burn\\n  function burn(uint256[] calldata tokens) external;\\n\\n  /// @notice Change the metadata URI for a given token batch\\n  /// @dev Tokens may only be updated once\\n  /// @dev Only accessible to PLATFORM_ADMIN_ROLE\\n  /// @param batchIndex The index of the batch to update in the tokenKeys array\\n  /// @param liquidUri The new liquid token URI to set\\n  /// @param redeemedUri The new redeemed token URI to set\\n  function changeTokenMetadata(\\n    uint256 batchIndex,\\n    string memory liquidUri,\\n    string memory redeemedUri\\n  ) external;\\n\\n  /// @notice Lock the capability for a token to be updated\\n  /// @dev This behaves like a fuse and cannot be undone\\n  /// @dev Only accessible to PLATFORM_ADMIN_ROLE\\n  /// @param batchIndex The index of the batch to lock\\n  function lockTokenMetadata(uint256 batchIndex) external;\\n\\n  /// @notice Set the insurance registry address\\n  /// @param _registryAddress The Address of the insurance registry\\n  function setInsuranceRegistry(address _registryAddress) external;\\n\\n  /// @notice Set the redemption manager address\\n  /// @param _managerAddress The address of the redemption manager\\n  function setRedemptionManager(address _managerAddress) external;\\n\\n  /// @notice Set the address and percentage of secondary market fees\\n  /// @param receiver The receiver wallet for the secondary market fees. This should be the address of the Royalty Distributor\\n  /// @param feeNumerator The fee percentage to send to the distributor, expressed in basis points\\n  function setSecondaryRoyalties(address receiver, uint96 feeNumerator)\\n    external;\\n\\n  //#################\\n  //#### GETTERS ####\\n\\n  function PLATFORM_ADMIN_ROLE() external returns (bytes32 role);\\n\\n  function MINTER_ROLE() external returns (bytes32 role);\\n\\n  function BURNER_ROLE() external returns (bytes32 role);\\n\\n  /// @dev returns the locked status from the TokenRegistry\\n  function tokenLocked(uint256 tokenId) external view returns (bool hasUpdated);\\n\\n  function insuranceRegistry()\\n    external\\n    returns (IInsuranceRegistry registryAddress);\\n\\n  function tokenRegistry()\\n    external\\n    returns (ITokenRegistry tokenRegistryAddress);\\n\\n  function redemptionManager() external returns (address managerAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"./IGrtWines.sol\\\";\\n\\n/*\\n  _______ .______     .___________.____    __    ____  __  .__   __.  _______     _______.\\n /  _____||   _  \\\\    |           |\\\\   \\\\  /  \\\\  /   / |  | |  \\\\ |  | |   ____|   /       |\\n|  |  __  |  |_)  |   `---|  |----` \\\\   \\\\/    \\\\/   /  |  | |   \\\\|  | |  |__     |   (----`\\n|  | |_ | |      /        |  |       \\\\            /   |  | |  . `  | |   __|     \\\\   \\\\    \\n|  |__| | |  |\\\\  \\\\----.   |  |        \\\\    /\\\\    /    |  | |  |\\\\   | |  |____.----)   |   \\n \\\\______| | _| `._____|   |__|         \\\\__/  \\\\__/     |__| |__| \\\\__| |_______|_______/    \\n                                                                                     \\n*/\\n\\n/// @title Token Registry\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @notice Stores the token URIs in batches allowing for an arbitrary number of tokens to be minted at a time\\ninterface ITokenRegistry is IGrtWines {\\n  //################\\n  //#### STRUCTS ####\\n\\n  /// @dev Parameters for the Token URIs in a release\\n  /// @param liquidUri The base uri for the liquid token metadata\\n  /// @param redeemedUri The base uri for the liquid token metadata\\n  /// @param owner The current owner of the token\\n  /// @param key The id of the first token in the batch\\n  /// @param count The number of tokens in the batch\\n  /// @param locked Is this token batch locked from having its token uri being set\\n  struct TokenKey {\\n    string liquidUri;\\n    string redeemedUri;\\n    uint256 key;\\n    uint16 count;\\n    bool locked;\\n  }\\n\\n  //################\\n  //#### EVENTS ####\\n\\n  /// @dev Emitted when a token URI is successfully updated\\n  /// @param batchIndex The index of the batch that was updated\\n  /// @param liquidUri The updated liquid token URI\\n  /// @param redeemedUri The updated redeemed token URI\\n  event BatchURIUpdated(\\n    uint256 indexed batchIndex,\\n    string liquidUri,\\n    string redeemedUri\\n  );\\n\\n  /// @dev Emitted when token metadata is successfully locked\\n  /// @param batchIndex The index of the batch that was locked\\n  event BatchMetadataLocked(uint256 indexed batchIndex);\\n\\n  //################\\n  //#### ERRORS ####\\n\\n  /// @dev Thrown if a transaction attempts to update the metadata for a batch that has already had an update (locked)\\n  /// @param batchId The id of the batch being queried\\n  error BatchLocked(uint256 batchId);\\n\\n  /// @dev Thrown if querying a batch index that does not exist yet\\n  error InvalidBatchIndex();\\n\\n  /// @dev Thrown if batch metadata is added in a non-consecutive order\\n  error InvalidBatchData();\\n\\n  /// @dev Thrown if searching for a token that does not exist in the TokenRegistry\\n  error InvalidTokenId();\\n\\n  //###################\\n  //#### FUNCTIONS ####\\n\\n  /// @notice Get the token key corresponding to a token\\n  /// @dev If the owner of the token in the owners mapping is the zero address, return the address of the DropManager\\n  /// @param _tokenId Id of the token\\n  /// @return tokenKey - the token key containing the liquid and redeemed token URIs\\n  function getTokenKey(uint _tokenId)\\n    external\\n    view\\n    returns (TokenKey memory tokenKey);\\n\\n  /// @notice Add a new metadata batch\\n  /// @dev New batch will be pushed to the end of the tokenKeys array\\n  /// @dev Only accessible to TOKEN_CONTRACT_ROLE\\n  /// @dev Emites a {BatchURIUpdated} event\\n  /// @param _tokenKey The new token batch to add\\n  function addBatchMetadata(TokenKey calldata _tokenKey) external;\\n\\n  /// @notice Update the metadata URI for a token batch\\n  /// @dev Token URIs may only be updated once, and this function will call {lockBatchMetadata}\\n  /// @dev Only accessible to TOKEN_CONTRACT_ROLE\\n  /// @dev Emits a {BatchURIUpdated} event\\n  /// @param _batchIndex The index of the batch to update in the tokenKeys array\\n  /// @param _liquidUri The new liquid token URI to set\\n  /// @param _redeemedUri The new redeemed token URI to set\\n  function updateBatchMetadata(\\n    uint256 _batchIndex,\\n    string calldata _liquidUri,\\n    string calldata _redeemedUri\\n  ) external;\\n\\n  /// @notice Lock the capability for a batch to be updated\\n  /// @dev This behaves like a fuse and cannot be undone\\n  /// @dev Emits a {BatchMetadataLocked} event\\n  /// @dev Only accessible to TOKEN_CONTRACT_ROLE\\n  /// @param _batchIndex The index of the batch to lock\\n  function lockBatchMetadata(uint256 _batchIndex) external;\\n\\n  //#################\\n  //#### GETTERS ####\\n\\n  function TOKEN_CONTRACT_ROLE() external returns (bytes32 role);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/GrtLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/// @title A title that should describe the contract/interface\\n/// @author Developed by Labrys on behalf of GRT Wines\\n/// @custom:contributor mfbevan (mfbevan.eth)\\n/// @notice Helpers for GRT Wines contracts\\nlibrary GrtLibrary {\\n  /// @dev Thrown whenever a zero-address check fails\\n  /// @param field The name of the field on which the zero-address check failed\\n  error ZeroAddress(bytes32 field);\\n\\n  /// @notice Check if a field is the zero address, if so revert with the field name\\n  /// @param _address The address to check\\n  /// @param _field The name of the field to check\\n  function checkZeroAddress(address _address, bytes32 _field) internal pure {\\n    if (_address == address(0)) {\\n      revert ZeroAddress(_field);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/DefaultOperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\nimport {CANONICAL_CORI_SUBSCRIPTION} from \\\"./lib/Constants.sol\\\";\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\\n *         will be locked to the options set during construction.\\n */\\n\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    /// @dev The constructor that is called when the contract is being deployed.\\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address addr) external;\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     */\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     */\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/OperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \\\"./lib/Constants.sol\\\";\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\\n *         will be locked to the options set during construction.\\n */\\n\\nabstract contract OperatorFilterer {\\n    /// @dev Emitted when an operator is not allowed.\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\\n\\n    /// @dev The constructor that is called when the contract is being deployed.\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (subscribe) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev A helper function to check if an operator is allowed.\\n     */\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev A helper function to check if an operator approval is allowed.\\n     */\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    /**\\n     * @dev A helper function to check if an operator is allowed.\\n     */\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/lib/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dropManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superUser\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"}],\"name\":\"AlreadyDistributed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributionNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"IncorrectAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"IncorrectParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotListedHere\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"field\",\"type\":\"bytes32\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"BidRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"}],\"name\":\"BiddingExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"releaseId\",\"type\":\"uint128\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"}],\"name\":\"ListingDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"}],\"name\":\"ListingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DROP_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"releaseId\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"startDate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endDate\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IListing.Listing\",\"name\":\"listing\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"}],\"name\":\"deleteListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropManager\",\"outputs\":[{\"internalType\":\"contract IDropManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"}],\"name\":\"listingEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"releaseId\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"startDate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endDate\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IListing.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"registerBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"releaseId\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"startDate\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endDate\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IListing.Listing\",\"name\":\"listing\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"listingId\",\"type\":\"uint128\"}],\"name\":\"validateEthWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"validateManualDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validateTokenClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BuyItNow", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009c0198e170137040edd3337638743a8342cb8cc1000000000000000000000000f0196a54695377c009ea13a4800b3cee4e9c5a17", "EVMVersion": "london", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}