{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/escrow/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"../lib/TransferHelper.sol\\\";\\r\\nimport \\\"../access/IAccess.sol\\\";\\r\\n\\r\\ncontract Escrow is Initializable, ReentrancyGuardUpgradeable {\\r\\n    // Counter for trades\\r\\n    uint256 public tradesCounter;\\r\\n    // Address of AZX token\\r\\n    address public azx;\\r\\n    // Address of the wallet for receiving fees\\r\\n    address public ntzcWallet;\\r\\n    // Address of the access control contract\\r\\n    address public accessControl;\\r\\n\\r\\n    // Mapping of trades\\r\\n    mapping(uint256 => Trade) public trades;\\r\\n    // Mapping of external trade IDs to internal trade IDs\\r\\n    mapping(string => uint256) public tradesIdsToTrades;\\r\\n\\r\\n    // Trade struct\\r\\n    struct Trade {\\r\\n        string tradeId;\\r\\n        string[] links;\\r\\n        address seller;\\r\\n        address buyer;\\r\\n        uint256 tradeCap;\\r\\n        uint256 sellersPart;\\r\\n        uint256 timeToResolve;\\r\\n        uint256 resolveTS;\\r\\n        uint256 linksLength;\\r\\n        bool valid;\\r\\n        bool paid;\\r\\n        bool finished;\\r\\n        bool released;\\r\\n    }\\r\\n\\r\\n    // Events\\r\\n    event TradeRegistered(\\r\\n        address indexed signer,\\r\\n        string indexed tradeId,\\r\\n        address seller,\\r\\n        address buyer,\\r\\n        uint256 tradeCap,\\r\\n        uint256 sellersPart,\\r\\n        uint256 timeToResolve\\r\\n    );\\r\\n    event TradeValidated(string indexed tradeId);\\r\\n    event TradePaid(string indexed tradeId, uint256 amount);\\r\\n    event TradeFinished(string indexed tradeId);\\r\\n    event TradeReleased(\\r\\n        string indexed tradeId,\\r\\n        address buyer,\\r\\n        uint256 cap,\\r\\n        uint256 sellersPart\\r\\n    );\\r\\n    event TradeResolved(\\r\\n        address indexed signer,\\r\\n        string indexed tradeId,\\r\\n        bool result,\\r\\n        string reason\\r\\n    );\\r\\n    event FeeWalletChanged(address indexed wallet);\\r\\n    event TradeDeskChanged(address indexed user, bool isTradeDesk);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(\\r\\n            IAccess(accessControl).isOwner(msg.sender),\\r\\n            \\\"Escrow: Only the owner is allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(\\r\\n            IAccess(accessControl).isSender(msg.sender),\\r\\n            \\\"Escrow: Only managers are allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        revert(\\\"Escrow: Contract cannot handle ETH\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract\\r\\n     * @param _azxToken Address of AZX token\\r\\n     * @param _azxWallet Address of the wallet for receiving fees\\r\\n     * @param _access Address of the access control contract\\r\\n     */\\r\\n    function initialize(\\r\\n        address _azxToken,\\r\\n        address _azxWallet,\\r\\n        address _access\\r\\n    ) public initializer {\\r\\n        __ReentrancyGuard_init();\\r\\n        accessControl = _access;\\r\\n        azx = _azxToken;\\r\\n        ntzcWallet = _azxWallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change the address of the wallet for receiving fees (owner only)\\r\\n     * @param _wallet Address of the wallet for receiving fees\\r\\n     */\\r\\n    function changeWallet(address _wallet) external onlyOwner {\\r\\n        require(_wallet != address(0), \\\"Escrow: Zero address is not allowed\\\");\\r\\n        ntzcWallet = _wallet;\\r\\n\\r\\n        emit FeeWalletChanged(_wallet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set TradeDesk status for a user\\r\\n     * @param signature Buyer's signature\\r\\n     * @param token Token address\\r\\n     * @param user User's address\\r\\n     * @param isTradeDesk Whether the user is a TradeDesk\\r\\n     */\\r\\n    function setTradeDesk(\\r\\n        bytes memory signature,\\r\\n        bytes32 token,\\r\\n        address user,\\r\\n        bool isTradeDesk\\r\\n    ) external onlyManager {\\r\\n        bytes32 message = tradeDeskProof(token, user, isTradeDesk);\\r\\n        address signer = IAccess(accessControl).preAuthValidations(\\r\\n            message,\\r\\n            token,\\r\\n            signature\\r\\n        );\\r\\n        require(\\r\\n            IAccess(accessControl).isSigner(signer),\\r\\n            \\\"Escrow: Signer is not a manager\\\"\\r\\n        );\\r\\n        IAccess(accessControl).updateTradeDeskUsers(user, isTradeDesk);\\r\\n\\r\\n        emit TradeDeskChanged(user, isTradeDesk);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Register a new trade (admin only)\\r\\n     * @param signature Buyer's signature\\r\\n     * @param token Token address\\r\\n     * @param tradeId External trade ID\\r\\n     * @param links Array of links related to the trade\\r\\n     * @param seller Seller's address\\r\\n     * @param buyer Buyer's address\\r\\n     * @param tradeCap Trade price\\r\\n     * @param sellersPart Part of the tradeCap for the seller\\r\\n     * @param timeToResolve Time to resolve the trade\\r\\n     */\\r\\n    function registerTrade(\\r\\n        bytes memory signature,\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links,\\r\\n        address seller,\\r\\n        address buyer,\\r\\n        uint256 tradeCap,\\r\\n        uint256 sellersPart,\\r\\n        uint256 timeToResolve\\r\\n    ) external onlyManager {\\r\\n        require(\\r\\n            tradesIdsToTrades[tradeId] == 0,\\r\\n            \\\"Escrow: Trade already exists\\\"\\r\\n        );\\r\\n        bytes32 message = registerProof(\\r\\n            token,\\r\\n            tradeId,\\r\\n            links,\\r\\n            seller,\\r\\n            buyer,\\r\\n            tradeCap,\\r\\n            sellersPart,\\r\\n            timeToResolve\\r\\n        );\\r\\n        address signer = IAccess(accessControl).preAuthValidations(\\r\\n            message,\\r\\n            token,\\r\\n            signature\\r\\n        );\\r\\n        require(\\r\\n            IAccess(accessControl).isTradeDesk(signer),\\r\\n            \\\"Escrow: Signer is not a TradeDesk\\\"\\r\\n        );\\r\\n        tradesCounter++;\\r\\n        tradesIdsToTrades[tradeId] = tradesCounter;\\r\\n        Trade storage trade = trades[tradesCounter];\\r\\n        trade.tradeId = tradeId;\\r\\n        trade.seller = seller;\\r\\n        trade.buyer = buyer;\\r\\n        trade.tradeCap = tradeCap;\\r\\n        trade.sellersPart = sellersPart;\\r\\n        trade.timeToResolve = timeToResolve;\\r\\n\\r\\n        for (uint256 i = 0; i < links.length; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(links[i])) !=\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))\\r\\n            ) {\\r\\n                trade.links.push(links[i]);\\r\\n                trade.linksLength++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TradeRegistered(\\r\\n            signer,\\r\\n            tradeId,\\r\\n            seller,\\r\\n            buyer,\\r\\n            tradeCap,\\r\\n            sellersPart,\\r\\n            timeToResolve\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate a trade\\r\\n     * @param signature Buyer's signature\\r\\n     * @param token Token address\\r\\n     * @param tradeId External trade ID\\r\\n     * @param links Array of links related to the trade\\r\\n     */\\r\\n    function validateTrade(\\r\\n        bytes memory signature,\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links\\r\\n    ) external onlyManager {\\r\\n        require(\\r\\n            tradesIdsToTrades[tradeId] != 0,\\r\\n            \\\"Escrow: Trade does not exist\\\"\\r\\n        );\\r\\n        Trade storage trade = trades[tradesIdsToTrades[tradeId]];\\r\\n        require(!trade.valid, \\\"Escrow: Trade is already validated\\\");\\r\\n        require(!trade.finished, \\\"Escrow: Trade is already finished\\\");\\r\\n        bytes32 message = validateProof(token, tradeId, links);\\r\\n        address signer = IAccess(accessControl).preAuthValidations(\\r\\n            message,\\r\\n            token,\\r\\n            signature\\r\\n        );\\r\\n        require(\\r\\n            IAccess(accessControl).isSigner(signer),\\r\\n            \\\"Escrow: Signer is not a manager\\\"\\r\\n        );\\r\\n        trade.valid = true;\\r\\n        for (uint256 i = 0; i < links.length; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(links[i])) !=\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))\\r\\n            ) {\\r\\n                trade.links.push(links[i]);\\r\\n                trade.linksLength++;\\r\\n            }\\r\\n        }\\r\\n        emit TradeValidated(tradeId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pay for a trade\\r\\n     * @param signature Buyer's signature\\r\\n     * @param token Token address\\r\\n     * @param tradeId External trade ID\\r\\n     * @param links Array of links related to the trade\\r\\n     * @param buyer Buyer's address\\r\\n     */\\r\\n    function payTrade(\\r\\n        bytes memory signature,\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links,\\r\\n        address buyer\\r\\n    ) external onlyManager nonReentrant {\\r\\n        require(\\r\\n            tradesIdsToTrades[tradeId] != 0,\\r\\n            \\\"Escrow: Trade does not exist\\\"\\r\\n        );\\r\\n        Trade storage trade = trades[tradesIdsToTrades[tradeId]];\\r\\n        require(trade.valid, \\\"Escrow: Trade is not validated\\\");\\r\\n        require(!trade.paid, \\\"Escrow: Trade is already paid\\\");\\r\\n        require(trade.buyer != address(0), \\\"Escrow: Buyer is not confirmed\\\");\\r\\n        bytes32 message = payProof(token, tradeId, links, buyer);\\r\\n        address signer = IAccess(accessControl).preAuthValidations(\\r\\n            message,\\r\\n            token,\\r\\n            signature\\r\\n        );\\r\\n        require(\\r\\n            trade.buyer == signer && trade.buyer == buyer,\\r\\n            \\\"Escrow: Signer is not the buyer\\\"\\r\\n        );\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            azx,\\r\\n            buyer,\\r\\n            address(this),\\r\\n            trade.tradeCap\\r\\n        );\\r\\n        trade.paid = true;\\r\\n        for (uint256 i = 0; i < links.length; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(links[i])) !=\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))\\r\\n            ) {\\r\\n                trade.links.push(links[i]);\\r\\n                trade.linksLength++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TradePaid(tradeId, trade.tradeCap);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Finish a trade\\r\\n     * @param signature Buyer's signature\\r\\n     * @param token Token address\\r\\n     * @param tradeId External trade ID\\r\\n     * @param links Array of links related to the trade\\r\\n     */\\r\\n    function finishTrade(\\r\\n        bytes memory signature,\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links\\r\\n    ) external onlyManager {\\r\\n        require(\\r\\n            tradesIdsToTrades[tradeId] != 0,\\r\\n            \\\"Escrow: Trade does not exist\\\"\\r\\n        );\\r\\n        Trade storage trade = trades[tradesIdsToTrades[tradeId]];\\r\\n        require(!trade.finished, \\\"Escrow: Trade is already finished\\\");\\r\\n        require(trade.paid, \\\"Escrow: Trade is not paid\\\");\\r\\n        bytes32 message = finishProof(token, tradeId, links);\\r\\n        address signer = IAccess(accessControl).preAuthValidations(\\r\\n            message,\\r\\n            token,\\r\\n            signature\\r\\n        );\\r\\n        require(\\r\\n            IAccess(accessControl).isTradeDesk(signer),\\r\\n            \\\"Escrow: Signer is not a TradeDesk\\\"\\r\\n        );\\r\\n        trade.finished = true;\\r\\n        trade.resolveTS = block.timestamp + trade.timeToResolve;\\r\\n        for (uint256 i = 0; i < links.length; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(links[i])) !=\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))\\r\\n            ) {\\r\\n                trade.links.push(links[i]);\\r\\n                trade.linksLength++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TradeFinished(tradeId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Release a trade (only for admin)\\r\\n     * @param signature Buyer's signature\\r\\n     * @param token Token address\\r\\n     * @param tradeId External trade ID\\r\\n     * @param links Array of links related to the trade\\r\\n     * @param buyer Buyer's address\\r\\n     */\\r\\n    function releaseTrade(\\r\\n        bytes memory signature,\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links,\\r\\n        address buyer\\r\\n    ) external nonReentrant onlyManager {\\r\\n        require(\\r\\n            tradesIdsToTrades[tradeId] != 0,\\r\\n            \\\"Escrow: Trade does not exist\\\"\\r\\n        );\\r\\n        Trade storage trade = trades[tradesIdsToTrades[tradeId]];\\r\\n        require(trade.buyer != address(0), \\\"Escrow: Buyer is not confirmed\\\");\\r\\n        bytes32 message = releaseProof(token, tradeId, links, buyer);\\r\\n        address signer = IAccess(accessControl).preAuthValidations(\\r\\n            message,\\r\\n            token,\\r\\n            signature\\r\\n        );\\r\\n        require(\\r\\n            trade.buyer == signer && trade.buyer == buyer,\\r\\n            \\\"Escrow: Signer is not the buyer\\\"\\r\\n        );\\r\\n        require(!trade.released, \\\"Escrow: Trade is already released\\\");\\r\\n        require(trade.finished, \\\"Escrow: Trade is not finished\\\");\\r\\n        TransferHelper.safeTransfer(azx, trade.seller, trade.sellersPart);\\r\\n        TransferHelper.safeTransfer(\\r\\n            azx,\\r\\n            ntzcWallet,\\r\\n            trade.tradeCap - trade.sellersPart\\r\\n        );\\r\\n        trade.released = true;\\r\\n        for (uint256 i = 0; i < links.length; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(links[i])) !=\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))\\r\\n            ) {\\r\\n                trade.links.push(links[i]);\\r\\n                trade.linksLength++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TradeReleased(tradeId, buyer, trade.tradeCap, trade.sellersPart);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Resolve a trade (only for admin). Used for resolving disputes.\\r\\n     * @param signature Buyer's signature\\r\\n     * @param token Token address\\r\\n     * @param tradeId External trade ID\\r\\n     * @param links Array of links related to the trade\\r\\n     * @param result Result of the trade\\r\\n     * @param reason Reason for the trade resolution\\r\\n     */\\r\\n    function resolveTrade(\\r\\n        bytes memory signature,\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links,\\r\\n        bool result,\\r\\n        string memory reason\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            tradesIdsToTrades[tradeId] != 0,\\r\\n            \\\"Escrow: Trade does not exist\\\"\\r\\n        );\\r\\n        Trade storage trade = trades[tradesIdsToTrades[tradeId]];\\r\\n        require(!trade.released, \\\"Escrow: Trade is already released\\\");\\r\\n        require(\\r\\n            block.timestamp >= trade.resolveTS,\\r\\n            \\\"Escrow: Too early to resolve\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 message = resolveProof(token, tradeId, links, result, reason);\\r\\n        address signer = IAccess(accessControl).preAuthValidations(\\r\\n            message,\\r\\n            token,\\r\\n            signature\\r\\n        );\\r\\n        require(\\r\\n            IAccess(accessControl).isSigner(signer),\\r\\n            \\\"Escrow: Signer is not a manager\\\"\\r\\n        );\\r\\n\\r\\n        if (trade.paid) {\\r\\n            if (result) {\\r\\n                TransferHelper.safeTransfer(\\r\\n                    azx,\\r\\n                    trade.seller,\\r\\n                    trade.sellersPart\\r\\n                );\\r\\n                TransferHelper.safeTransfer(\\r\\n                    azx,\\r\\n                    ntzcWallet,\\r\\n                    trade.tradeCap - trade.sellersPart\\r\\n                );\\r\\n            } else {\\r\\n                TransferHelper.safeTransfer(azx, trade.buyer, trade.tradeCap);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        trade.released = true;\\r\\n        for (uint256 i = 0; i < links.length; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(links[i])) !=\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))\\r\\n            ) {\\r\\n                trade.links.push(links[i]);\\r\\n                trade.linksLength++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TradeResolved(signer, tradeId, result, reason);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the trade details by external trade ID\\r\\n     * @param tradeId External trade ID\\r\\n     */\\r\\n    function getTrade(\\r\\n        string memory tradeId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string[] memory links,\\r\\n            address seller,\\r\\n            address buyer,\\r\\n            uint256 linksLength,\\r\\n            uint256 tradeCap,\\r\\n            uint256 sellersPart,\\r\\n            bool valid,\\r\\n            bool paid,\\r\\n            bool finished,\\r\\n            bool released\\r\\n        )\\r\\n    {\\r\\n        Trade storage trade = trades[tradesIdsToTrades[tradeId]];\\r\\n        links = trade.links;\\r\\n        linksLength = trade.linksLength;\\r\\n        seller = trade.seller;\\r\\n        buyer = trade.buyer;\\r\\n        tradeCap = trade.tradeCap;\\r\\n        sellersPart = trade.sellersPart;\\r\\n        valid = trade.valid;\\r\\n        paid = trade.paid;\\r\\n        finished = trade.finished;\\r\\n        released = trade.released;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the ID of the executing chain\\r\\n     * @return uint256 value\\r\\n     */\\r\\n    function getChainID() public view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the message hash for signing the validation of TradeDesk status\\r\\n     */\\r\\n    function tradeDeskProof(\\r\\n        bytes32 token,\\r\\n        address user,\\r\\n        bool isTradeDesk\\r\\n    ) public view returns (bytes32 message) {\\r\\n        message = keccak256(\\r\\n            abi.encodePacked(getChainID(), token, user, isTradeDesk)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the message hash for signing the registration of a trade\\r\\n     */\\r\\n    function registerProof(\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links,\\r\\n        address seller,\\r\\n        address buyer,\\r\\n        uint256 tradeCap,\\r\\n        uint256 sellersPart,\\r\\n        uint256 timeToResolve\\r\\n    ) public view returns (bytes32 message) {\\r\\n        if (links.length == 0) links[0] = \\\"\\\";\\r\\n        message = keccak256(\\r\\n            abi.encodePacked(\\r\\n                getChainID(),\\r\\n                token,\\r\\n                tradeId,\\r\\n                links[0],\\r\\n                seller,\\r\\n                buyer,\\r\\n                tradeCap,\\r\\n                sellersPart,\\r\\n                timeToResolve\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the message hash for signing the validation of a trade\\r\\n     */\\r\\n    function validateProof(\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links\\r\\n    ) public view returns (bytes32 message) {\\r\\n        if (links.length == 0) links[0] = \\\"\\\";\\r\\n        message = keccak256(\\r\\n            abi.encodePacked(getChainID(), token, tradeId, links[0])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the message hash for signing the payment of a trade\\r\\n     */\\r\\n    function payProof(\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links,\\r\\n        address buyer\\r\\n    ) public view returns (bytes32 message) {\\r\\n        if (links.length == 0) links[0] = \\\"\\\";\\r\\n        message = keccak256(\\r\\n            abi.encodePacked(getChainID(), token, tradeId, links[0], buyer)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the message hash for signing the finish of a trade\\r\\n     */\\r\\n    function finishProof(\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links\\r\\n    ) public view returns (bytes32 message) {\\r\\n        if (links.length == 0) links[0] = \\\"\\\";\\r\\n        message = keccak256(\\r\\n            abi.encodePacked(token, links[0], tradeId, getChainID())\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the message hash for signing the release of a trade\\r\\n     */\\r\\n    function releaseProof(\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links,\\r\\n        address buyer\\r\\n    ) public view returns (bytes32 message) {\\r\\n        if (links.length == 0) links[0] = \\\"\\\";\\r\\n        message = keccak256(\\r\\n            abi.encodePacked(buyer, getChainID(), links[0], token, tradeId)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the message hash for signing the resolution of a trade\\r\\n     */\\r\\n    function resolveProof(\\r\\n        bytes32 token,\\r\\n        string memory tradeId,\\r\\n        string[] memory links,\\r\\n        bool result,\\r\\n        string memory reason\\r\\n    ) public view returns (bytes32 message) {\\r\\n        if (links.length == 0) links[0] = \\\"\\\";\\r\\n        message = keccak256(\\r\\n            abi.encodePacked(\\r\\n                getChainID(),\\r\\n                token,\\r\\n                links[0],\\r\\n                tradeId,\\r\\n                result,\\r\\n                reason\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    /// @notice Transfers tokens from the targeted address to the given destination\\r\\n    /// @notice Errors with 'STF' if transfer fails\\r\\n    /// @param token The contract address of the token to be transferred\\r\\n    /// @param from The originating address from which the tokens will be transferred\\r\\n    /// @param to The destination address of the transfer\\r\\n    /// @param value The amount to be transferred\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) =\\r\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers tokens from msg.sender to a recipient\\r\\n    /// @dev Errors with ST if transfer fails\\r\\n    /// @param token The contract address of the token which will be transferred\\r\\n    /// @param to The recipient of the transfer\\r\\n    /// @param value The value of the transfer\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\r\\n    }\\r\\n\\r\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\r\\n    /// @dev Errors with 'SA' if transfer fails\\r\\n    /// @param token The contract address of the token to be approved\\r\\n    /// @param to The target of the approval\\r\\n    /// @param value The amount of the given token the target will be allowed to spend\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ETH to the recipient address\\r\\n    /// @dev Fails with `STE`\\r\\n    /// @param to The destination of the transfer\\r\\n    /// @param value The value to be transferred\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, 'STE');\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/access/IAccess.sol\": {\r\n      \"content\": \"pragma solidity 0.8.7;\\r\\n\\r\\ninterface IAccess {\\r\\n    function isMinter(address _manager) external view returns (bool);\\r\\n\\r\\n    function isOwner(address _manager) external view returns (bool);\\r\\n\\r\\n    function isSender(address _manager) external view returns (bool);\\r\\n\\r\\n    function isSigner(address _manager) external view returns (bool);\\r\\n\\r\\n    function isTradeDesk(address _manager) external view returns (bool);\\r\\n\\r\\n    function updateTradeDeskUsers(address _user, bool _isTradeDesk) external;\\r\\n\\r\\n    function preAuthValidations(\\r\\n        bytes32 message,\\r\\n        bytes32 token,\\r\\n        bytes memory signature\\r\\n    ) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTradeDesk\",\"type\":\"bool\"}],\"name\":\"TradeDeskChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"}],\"name\":\"TradeFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TradePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellersPart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeToResolve\",\"type\":\"uint256\"}],\"name\":\"TradeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellersPart\",\"type\":\"uint256\"}],\"name\":\"TradeReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"TradeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"}],\"name\":\"TradeValidated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"azx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"}],\"name\":\"finishProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"}],\"name\":\"finishTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"}],\"name\":\"getTrade\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"linksLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellersPart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_azxToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_azxWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_access\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ntzcWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"payProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"payTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellersPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToResolve\",\"type\":\"uint256\"}],\"name\":\"registerProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellersPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToResolve\",\"type\":\"uint256\"}],\"name\":\"registerTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"releaseProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"releaseTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"resolveProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"resolveTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTradeDesk\",\"type\":\"bool\"}],\"name\":\"setTradeDesk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTradeDesk\",\"type\":\"bool\"}],\"name\":\"tradeDeskProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trades\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellersPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToResolve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolveTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"linksLength\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradesCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tradesIdsToTrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"}],\"name\":\"validateProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tradeId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"links\",\"type\":\"string[]\"}],\"name\":\"validateTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Escrow", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}