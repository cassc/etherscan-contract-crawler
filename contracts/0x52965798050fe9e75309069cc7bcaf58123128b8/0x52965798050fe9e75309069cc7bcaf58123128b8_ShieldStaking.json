{"SourceCode": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: ShieldStakingMainnet.sol\r\n\r\n//SPDX-License-Identifier: MIT  \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n    \r\ncontract ShieldStaking is Ownable {\r\n\r\n    IERC20 public token;\r\n    IERC721 public nft;\r\n\r\n    constructor( address _token, address _nft, address _treasury) {\r\n        token = IERC20(_token);\r\n        nft = IERC721(_nft);\r\n        treasury = _treasury;\r\n    }\r\n\r\n    bool public stakingPaused = true;\r\n\r\n    address treasury;\r\n   \r\n    uint256 public tokensStaked = 0;//total tokens staked\r\n\r\n    uint256 public stakers = 0;//total wallets staking \r\n\r\n    uint256 public totalEthPaid = 0;//total eth paid out\r\n\r\n    uint256 public rate1 = 50;//No NFTs\r\n\r\n    uint256 public rate2 = 80;//1 NFT\r\n\r\n    uint256 public rate3 = 90;//2 NFTs\r\n\r\n    uint256 public rate4 = 100;//3 NFTs\r\n\r\n    uint256 public stakeTime1 = 3888000;//45 Days\r\n\r\n    uint256 public nftFund = 0;//The amount of rewards not sent from people not having 3 Shield NFTs\r\n \r\n    uint256 public earlyClaimFee1 = 10;\r\n\r\n    uint256 public minStake = (1000 * 10**18);\r\n\r\n    uint256 public lastUpdateTime = block.timestamp;\r\n\r\n    uint256 public tokensXseconds = 0;\r\n\r\n    uint256 public ethDeposits = 0;\r\n\r\n    function setStakingPaused(bool _state) public onlyOwner{     \r\n        stakingPaused = _state;\r\n    }\r\n\r\n    function setRate1(uint256 _rate1) public onlyOwner{    \r\n        rate1 = _rate1;    \r\n    }\r\n\r\n    function setRate2(uint256 _rate2) public onlyOwner{    \r\n        rate2 = _rate2;    \r\n    }\r\n\r\n    function setRate3(uint256 _rate3) public onlyOwner{    \r\n        rate3 = _rate3;    \r\n    }\r\n\r\n    function setRate4(uint256 _rate4) public onlyOwner{    \r\n        rate4 = _rate4;    \r\n    }\r\n\r\n    function setStakeTime1(uint256 _stakeTime1) public onlyOwner{    \r\n        stakeTime1 = _stakeTime1;    \r\n    }\r\n\r\n    function setTreasury(address _treasury) public onlyOwner{     \r\n        treasury = _treasury;   \r\n    }\r\n\r\n    function setEarlyClaimFee1(uint256 _earlyClaimFee1) public onlyOwner {\r\n        require(_earlyClaimFee1 <= 30, \"fee to high try again, 30% max\");     \r\n        earlyClaimFee1 = _earlyClaimFee1;   \r\n    }\r\n\r\n    function setMinStake(uint256 _minStake) public onlyOwner{     \r\n        minStake = _minStake;   \r\n    }\r\n\r\n    function withdrawETH() public onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawERC20(address _tokenAddress, uint256 _tokenAmount) public virtual onlyOwner {\r\n        IERC20(_tokenAddress).transfer(msg.sender, _tokenAmount);\r\n    }\r\n\r\n    struct StakerVault {\r\n        uint256 tokensStaked;\r\n        uint256 shields;\r\n        uint256 stakeDuration;\r\n        uint256 tokensXseconds;\r\n        uint256 rewardsRate;\r\n        uint256 stakedSince;\r\n        uint256 stakedTill;\r\n        uint256 lastClaimTime;\r\n        uint256 lastClaimNumber;\r\n        uint256 ethClaimed;\r\n        bool isStaked;\r\n    }\r\n\r\n    struct EthDeposit {\r\n        uint256 timestamp;\r\n        uint256 ethAmt;\r\n        uint256 tokensXseconds;\r\n    }\r\n\r\n    mapping(address => StakerVault) public stakerVaults;\r\n    mapping(uint256 => EthDeposit) public EthDeposits;\r\n\r\n    //The following is going to be a function that will keep track of the tokensXseconds for the contract as a whole\r\n    //This function will need to be called each time tokens come in or leave the contract such as stake / unstake\r\n\r\n    function updateGlobalTokensXseconds() internal {\r\n        uint256 addAmt = 0; \r\n        addAmt += (block.timestamp - lastUpdateTime) * tokensStaked;\r\n        tokensXseconds += addAmt;\r\n        lastUpdateTime = block.timestamp;\r\n    }\r\n\r\n    function updateUserTokensXseconds() internal {\r\n        uint256 addAmt = 0;\r\n        addAmt += (block.timestamp - stakerVaults[msg.sender].lastClaimTime) * stakerVaults[msg.sender].tokensStaked;\r\n        stakerVaults[msg.sender].tokensXseconds += addAmt;\r\n        stakerVaults[msg.sender].lastClaimTime = block.timestamp;\r\n    }\r\n\r\n    function calculateRewardsRate () internal {\r\n        stakerVaults[msg.sender].shields = IERC721(nft).balanceOf(msg.sender);\r\n\r\n        if (stakerVaults[msg.sender].shields == 0 && stakerVaults[msg.sender].stakeDuration == stakeTime1) { \r\n            stakerVaults[msg.sender].rewardsRate = rate1;\r\n        }\r\n\r\n        if (stakerVaults[msg.sender].shields == 1) { \r\n            stakerVaults[msg.sender].rewardsRate = rate2;\r\n        }\r\n\r\n        if (stakerVaults[msg.sender].shields == 2) { \r\n            stakerVaults[msg.sender].rewardsRate = rate3;\r\n        }\r\n\r\n        if (stakerVaults[msg.sender].shields >= 3) { \r\n            stakerVaults[msg.sender].rewardsRate = rate4;\r\n        }\r\n    }\r\n\r\n    function stake(uint256 _amount) public {\r\n        require(stakingPaused == false, \"STAKING IS PAUSED\");\r\n        uint256 userBalance = IERC20(token).balanceOf(msg.sender);\r\n\r\n        require(userBalance >= _amount, \"Insufficient Balance\");\r\n        require((_amount + stakerVaults[msg.sender].tokensStaked) >= minStake, \"You Need More Tokens To Stake\");\r\n        \r\n        updateGlobalTokensXseconds();\r\n        uint256 claimableEth = viewClaimableEth(msg.sender); \r\n \r\n        if (claimableEth > 0) {   \r\n            claimEth(); \r\n        }\r\n\r\n        token.approve(address(this), _amount);\r\n        token.approve(treasury, _amount);\r\n        token.transferFrom(msg.sender, treasury, _amount);\r\n        \r\n        if (stakerVaults[msg.sender].isStaked == true) {\r\n            updateUserTokensXseconds();\r\n            stakerVaults[msg.sender].tokensStaked += _amount;\r\n            tokensStaked += _amount;\r\n        }\r\n\r\n        if (stakerVaults[msg.sender].isStaked == false) {\r\n            uint256 nftBalance = IERC721(nft).balanceOf(msg.sender);\r\n            stakerVaults[msg.sender].stakeDuration = stakeTime1;\r\n            stakerVaults[msg.sender].stakedTill = block.timestamp + stakeTime1;\r\n            stakerVaults[msg.sender].tokensStaked += _amount;\r\n            stakerVaults[msg.sender].stakedSince = block.timestamp;\r\n            stakerVaults[msg.sender].isStaked = true;\r\n            stakerVaults[msg.sender].tokensXseconds = 0;\r\n            stakerVaults[msg.sender].shields = nftBalance;\r\n            stakerVaults[msg.sender].lastClaimTime = block.timestamp;\r\n            stakerVaults[msg.sender].ethClaimed = 0;\r\n            stakerVaults[msg.sender].lastClaimNumber = ethDeposits;\r\n\r\n            calculateRewardsRate();\r\n        \r\n            tokensStaked += _amount;\r\n            stakers += 1;    \r\n        }\r\n    }\r\n\r\n    function unStake(uint256 _tokens) public {\r\n        require(stakerVaults[msg.sender].tokensStaked >= _tokens, \"You don't have that many tokens\");\r\n        require(token.balanceOf(treasury) >= _tokens, \"Not Enough Funds In Treasury\");\r\n        require(!stakingPaused, \"Staking is paused\"); \r\n        require(stakerVaults[msg.sender].isStaked == true);\r\n\r\n        uint256 claimableEth = viewClaimableEth(msg.sender); \r\n \r\n        if (claimableEth > 0) {   \r\n            claimEth(); \r\n        }\r\n\r\n        updateGlobalTokensXseconds();\r\n\r\n        uint256 remainingStake = stakerVaults[msg.sender].tokensStaked - _tokens;\r\n        uint256 unstakedTokens = 0;\r\n        uint256 penalizedTokens = 0;\r\n        uint256 claimedTokens = 0;\r\n\r\n        if (remainingStake < minStake) {\r\n            unstakedTokens = stakerVaults[msg.sender].tokensStaked;\r\n\r\n            if (stakerVaults[msg.sender].stakedTill > block.timestamp && stakerVaults[msg.sender].stakeDuration == stakeTime1) {\r\n                penalizedTokens = earlyClaimFee1 * unstakedTokens / 100;\r\n                claimedTokens = unstakedTokens - penalizedTokens;\r\n                require(token.transferFrom(treasury, msg.sender, claimedTokens), \"Tokens could not be sent to Staker\");\r\n            }\r\n\r\n            if (stakerVaults[msg.sender].stakedTill <= block.timestamp) {\r\n                require(token.transferFrom(treasury, msg.sender, unstakedTokens), \"Tokens could not be sent to Staker\");\r\n            }\r\n\r\n            stakerVaults[msg.sender].tokensStaked = 0;\r\n            stakerVaults[msg.sender].shields = 0;\r\n            stakerVaults[msg.sender].stakeDuration = 0;\r\n            stakerVaults[msg.sender].tokensXseconds = 0;\r\n            stakerVaults[msg.sender].rewardsRate = 0;\r\n            stakerVaults[msg.sender].stakedSince = 0;\r\n            stakerVaults[msg.sender].stakedTill = 0;\r\n            stakerVaults[msg.sender].lastClaimTime = 0;\r\n            stakerVaults[msg.sender].lastClaimNumber = 0;\r\n            stakerVaults[msg.sender].ethClaimed = 0;\r\n            stakerVaults[msg.sender].isStaked = false;\r\n\r\n            tokensStaked -= unstakedTokens;\r\n            stakers --;\r\n        }\r\n\r\n        if (remainingStake >= minStake) {\r\n            unstakedTokens = _tokens;\r\n\r\n            if (stakerVaults[msg.sender].stakedTill > block.timestamp && stakerVaults[msg.sender].stakeDuration == stakeTime1) {\r\n                penalizedTokens = earlyClaimFee1 * unstakedTokens / 100;\r\n                claimedTokens = unstakedTokens - penalizedTokens;\r\n                require(token.transferFrom(treasury, msg.sender, claimedTokens), \"Tokens could not be sent to Staker\");\r\n            }\r\n\r\n            if (stakerVaults[msg.sender].stakedTill <= block.timestamp) {\r\n                require(token.transferFrom(treasury, msg.sender, unstakedTokens), \"Tokens could not be sent to Staker\");\r\n            }\r\n\r\n            updateUserTokensXseconds();\r\n            stakerVaults[msg.sender].tokensStaked -= unstakedTokens;\r\n\r\n            tokensStaked -= unstakedTokens;\r\n        }\r\n    }\r\n\r\n    function claimEth() public { \r\n        require(stakerVaults[msg.sender].lastClaimNumber < ethDeposits);\r\n        require(stakerVaults[msg.sender].isStaked == true);\r\n        calculateRewardsRate();\r\n            \r\n        uint256 claimableEth = 0;\r\n\r\n            for (uint256 i = stakerVaults[msg.sender].lastClaimNumber; i < ethDeposits; i++) {\r\n                 if (stakerVaults[msg.sender].tokensXseconds == 0) {\r\n                    uint256 time = EthDeposits[i+1].timestamp - stakerVaults[msg.sender].lastClaimTime;\r\n                    uint256 stakerTokensXseconds = (time * stakerVaults[msg.sender].tokensStaked);\r\n                    uint256 claimablePercentage = ((stakerTokensXseconds * 10**18) / EthDeposits[i+1].tokensXseconds);\r\n                    claimableEth += (claimablePercentage * EthDeposits[i+1].ethAmt) / 10**18;\r\n                    stakerVaults[msg.sender].lastClaimTime = EthDeposits[i+1].timestamp;\r\n                    stakerVaults[msg.sender].lastClaimNumber ++;\r\n                }\r\n                \r\n                if (stakerVaults[msg.sender].tokensXseconds > 0) {\r\n                    uint256 time = EthDeposits[i+1].timestamp - stakerVaults[msg.sender].lastClaimTime;//this needs correcting\r\n                    uint256 stakerTokensXseconds = ((time * stakerVaults[msg.sender].tokensStaked) + stakerVaults[msg.sender].tokensXseconds);\r\n                    uint256 claimablePercentage = ((stakerTokensXseconds * 10**18) / EthDeposits[i+1].tokensXseconds);\r\n                    claimableEth += (claimablePercentage * EthDeposits[i+1].ethAmt) / 10**18;\r\n                    stakerVaults[msg.sender].tokensXseconds = 0;\r\n                    stakerVaults[msg.sender].lastClaimTime = EthDeposits[i+1].timestamp;\r\n                    stakerVaults[msg.sender].lastClaimNumber ++;\r\n                }      \r\n            }\r\n\r\n        uint256 ethSentToStaker = (claimableEth * stakerVaults[msg.sender].rewardsRate) / 100;\r\n        payable(msg.sender).transfer(ethSentToStaker); \r\n        uint256 ethToNftFund = claimableEth - ethSentToStaker;\r\n\r\n        if (ethToNftFund > 0) {\r\n            payable(treasury).transfer(ethToNftFund);\r\n        }\r\n        \r\n        stakerVaults[msg.sender].ethClaimed += ethSentToStaker;\r\n        totalEthPaid += ethSentToStaker;\r\n        nftFund += ethToNftFund;\r\n    }\r\n\r\n    function viewRewardsRate (address user) public view returns (uint256) { \r\n       \r\n        uint256 shield = IERC721(nft).balanceOf(user); \r\n        uint256 rate = 0;\r\n \r\n        if (shield == 0 && stakerVaults[user].stakeDuration == stakeTime1) {  \r\n            rate = rate1; \r\n        } \r\n \r\n        if (shield == 1) {  \r\n            rate = rate2; \r\n        } \r\n \r\n        if (shield == 2) {  \r\n            rate = rate3; \r\n        } \r\n \r\n        if (shield >= 3) {  \r\n            rate = rate4; \r\n        } \r\n        return rate; \r\n    } \r\n \r\n    function viewClaimableEth(address user) public view returns(uint256 amount) {\r\n        uint256 rate = viewRewardsRate(user);\r\n        uint256 claimTime = stakerVaults[user].lastClaimTime;\r\n        uint256 claimNumber = stakerVaults[user].lastClaimNumber;\r\n        uint256 ethSentToStaker = 0;\r\n        uint256 claimableEth = 0;\r\n        uint256 stakerTokensXseconds = stakerVaults[user].tokensXseconds;\r\n\r\n        for (uint256 i = claimNumber; i < ethDeposits; i++) { // Changed ethDeposits to ethDeposits.length\r\n            if (stakerVaults[user].tokensXseconds == 0) {\r\n                uint256 time = EthDeposits[i+1].timestamp - claimTime; // Changed stakerVaults[user].lastClaimTime to claimTime\r\n                stakerTokensXseconds = time * stakerVaults[user].tokensStaked;\r\n                uint256 claimablePercentage = (stakerTokensXseconds * 10**18) / EthDeposits[i+1].tokensXseconds;\r\n                claimableEth += (claimablePercentage * EthDeposits[i+1].ethAmt) / 10**18;\r\n                ethSentToStaker = claimableEth * rate / 100;\r\n                claimTime = EthDeposits[i+1].timestamp;\r\n                claimNumber++;\r\n            }\r\n\r\n            if (stakerVaults[user].tokensXseconds > 0) {\r\n                uint256 time = EthDeposits[i+1].timestamp - stakerVaults[user].lastClaimTime;\r\n                uint256 claimableTokensXseconds = (time * stakerVaults[user].tokensStaked) + stakerTokensXseconds;\r\n                uint256 claimablePercentage = (claimableTokensXseconds * 10**18) / EthDeposits[i+1].tokensXseconds;\r\n                claimableEth += (claimablePercentage * EthDeposits[i+1].ethAmt) / 10**18;\r\n                ethSentToStaker = claimableEth * rate / 100;\r\n                stakerTokensXseconds = 0;\r\n                claimTime = EthDeposits[i+1].timestamp;\r\n                claimNumber++;\r\n            }\r\n        }\r\n\r\n        return ethSentToStaker;\r\n    }\r\n\r\n    function DepositEth(uint256 _weiAmt) external payable onlyOwner { \r\n        require(_weiAmt > 0, \"Amount sent must be greater than zero\"); \r\n        updateGlobalTokensXseconds(); \r\n        payable(address(this)).transfer(_weiAmt); \r\n        uint256 index = (ethDeposits + 1); \r\n        EthDeposits[index] = EthDeposit(block.timestamp, _weiAmt, tokensXseconds); \r\n        tokensXseconds = 0; \r\n        lastUpdateTime = block.timestamp; \r\n        ethDeposits ++; \r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmt\",\"type\":\"uint256\"}],\"name\":\"DepositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EthDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensXseconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyClaimFee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyClaimFee1\",\"type\":\"uint256\"}],\"name\":\"setEarlyClaimFee1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate1\",\"type\":\"uint256\"}],\"name\":\"setRate1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate2\",\"type\":\"uint256\"}],\"name\":\"setRate2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate3\",\"type\":\"uint256\"}],\"name\":\"setRate3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate4\",\"type\":\"uint256\"}],\"name\":\"setRate4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeTime1\",\"type\":\"uint256\"}],\"name\":\"setStakeTime1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setStakingPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTime1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensXseconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensXseconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewClaimableEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewRewardsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShieldStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d8b90d2e680ea535eacce1b025c998b347892f6800000000000000000000000009d535b5ceb3a447bebd3b415281299b60a437e5000000000000000000000000a3448c405b665503163053f8caec2595b7f415bd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dbedd15994e80f90091206990dc3b7d2e55203183463a174cce9f1907ee904d9"}