{"SourceCode": "pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n    uint constant DAY_IN_SECONDS = 86400;\r\n    uint constant BASE = 1000000000000000000;\r\n    uint constant preIcoPrice = 4101;\r\n    uint constant icoPrice = 2255;\r\n\r\n    function mul(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        assert(b != 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) constant internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\r\n        return div(mul(number, numerator), denominator);\r\n    }\r\n\r\n    // presale volume bonus calculation \r\n    function presaleVolumeBonus(uint256 price) internal returns (uint256) {\r\n\r\n        // preCTX > ETH\r\n        uint256 val = div(price, preIcoPrice);\r\n\r\n        if(val >= 100 * BASE) return add(price, price * 1/20); // 5%\r\n        if(val >= 50 * BASE) return add(price, price * 3/100); // 3%\r\n        if(val >= 20 * BASE) return add(price, price * 1/50);  // 2%\r\n\r\n        return price;\r\n    }\r\n\r\n\t// ICO volume bonus calculation \r\n    function volumeBonus(uint256 etherValue) internal returns (uint256) {\r\n\t\t\r\n        if(etherValue >= 1000000000000000000000) return 15;// +15% tokens\r\n        if(etherValue >=  500000000000000000000) return 10; // +10% tokens\r\n        if(etherValue >=  300000000000000000000) return 7;  // +7% tokens\r\n        if(etherValue >=  100000000000000000000) return 5;  // +5% tokens\r\n        if(etherValue >=   50000000000000000000) return 3;   // +3% tokens\r\n        if(etherValue >=   20000000000000000000) return 2;   // +2% tokens\r\n\r\n        return 0;\r\n    }\r\n\r\n\t// ICO date bonus calculation \r\n    function dateBonus(uint startIco) internal returns (uint256) {\r\n\r\n        // day from ICO start\r\n        uint daysFromStart = (now - startIco) / DAY_IN_SECONDS + 1;\r\n\r\n        if(daysFromStart == 1) return 15; // +15% tokens\r\n        if(daysFromStart == 2) return 10; // +10% tokens\r\n        if(daysFromStart == 3) return 10; // +10% tokens\r\n        if(daysFromStart == 4) return 5;  // +5% tokens\r\n        if(daysFromStart == 5) return 5;  // +5% tokens\r\n        if(daysFromStart == 6) return 5;  // +5% tokens\r\n\r\n\t\t// no discount\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n/// @title Abstract token contract - Functions to be implemented by token contracts.\r\n\r\ncontract AbstractToken {\r\n    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\r\n    function totalSupply() constant returns (uint256) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\ncontract StandardToken is AbstractToken {\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => bool) ownerAppended;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n    address[] public owners;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            if(!ownerAppended[_to]) {\r\n                ownerAppended[_to] = true;\r\n                owners.push(_to);\r\n            }\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CarTaxiToken is StandardToken, SafeMath {\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string public constant name = \"CarTaxi\";\r\n    string public constant symbol = \"CTX\";\r\n    uint public constant decimals = 18;\r\n\r\n    // tottal supply\r\n\r\n    address public icoContract = 0x0;\r\n    /*\r\n     * Modifiers\r\n     */\r\n\r\n    modifier onlyIcoContract() {\r\n        // only ICO contract is allowed to proceed\r\n        require(msg.sender == icoContract);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Contract functions\r\n     */\r\n\r\n    /// @dev Contract is needed in icoContract address\r\n    /// @param _icoContract Address of account which will be mint tokens\r\n    function CarTaxiToken(address _icoContract) {\r\n        assert(_icoContract != 0x0);\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    /// @dev Burns tokens from address. It's can be applied by account with address this.icoContract\r\n    /// @param _from Address of account, from which will be burned tokens\r\n    /// @param _value Amount of tokens, that will be burned\r\n    function burnTokens(address _from, uint _value) onlyIcoContract {\r\n        assert(_from != 0x0);\r\n        require(_value > 0);\r\n\r\n        balances[_from] = sub(balances[_from], _value);\r\n    }\r\n\r\n    /// @dev Adds tokens to address. It's can be applied by account with address this.icoContract\r\n    /// @param _to Address of account to which the tokens will pass\r\n    /// @param _value Amount of tokens\r\n    function emitTokens(address _to, uint _value) onlyIcoContract {\r\n        assert(_to != 0x0);\r\n        require(_value > 0);\r\n\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        if(!ownerAppended[_to]) {\r\n            ownerAppended[_to] = true;\r\n            owners.push(_to);\r\n        }\r\n\r\n    }\r\n\r\n    function getOwner(uint index) constant returns (address, uint256) {\r\n        return (owners[index], balances[owners[index]]);\r\n    }\r\n\r\n    function getOwnerCount() constant returns (uint) {\r\n        return owners.length;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_icoContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]", "ContractName": "CarTaxiToken", "CompilerVersion": "v0.4.17-nightly.2017.9.21+commit.725b4fc2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000077CeFf4173a56cd22b6184Fa59c668B364aE55B8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0f8703ef21ca49f8ad7b5374c2d762bf21b278a78d1322bea3a92f601b81f2b5"}