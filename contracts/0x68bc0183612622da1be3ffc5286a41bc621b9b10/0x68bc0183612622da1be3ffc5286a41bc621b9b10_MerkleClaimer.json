{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * @title IMinter Minter Interface\\n * @author @brougkr\\n */\\npragma solidity ^0.8.19;\\ninterface IMinter \\n{ \\n    function purchase(uint256 _projectId) payable external returns (uint tokenID); // Custom\\n    function purchaseTo(address _to, uint _projectId) payable external returns (uint tokenID); // ArtBlocks Standard Minter\\n    // function purchaseTo(address _to) external returns (uint tokenID); // Custom\\n    // function purchaseTo(address _to, uint _projectId, address _ownedNFTAddress, uint _ownedNFTTokenID) payable external returns (uint tokenID); // ArtBlocks PolyMinter\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n    function _MintToFactory(uint ProjectID, address To, uint Amount) external; // MintPassFactory\\n    function _MintToFactory(address To, uint Amount) external; // MintPassBespoke\\n}\\n\"\r\n    },\r\n    \"contracts/IMP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * @dev @brougkr\\n */\\npragma solidity 0.8.19;\\ninterface IMP \\n{ \\n    /**\\n     * @dev { For Instances Where Golden Token Or Artists Have A Bespoke Mint Pass Contract }\\n     */\\n    function _LiveMintBurn(uint TicketID) external returns (address Recipient, uint ArtistID); \\n}\"\r\n    },\r\n    \"contracts/MerkleClaimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @dev: @brougkr\\n */\\npragma solidity 0.8.19;\\nimport { MissionControl } from \\\"./MissionControl.sol\\\";\\nimport { IMinter } from \\\"./IMinter.sol\\\";\\nimport { IMP } from \\\"./IMP.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\ncontract MerkleClaimer is MissionControl, ReentrancyGuard\\n{\\n    /*-------------------*/\\n    /*      STRUCT       */\\n    /*-------------------*/\\n\\n    struct User\\n    {\\n        bool[] RegularClaim;       // [0] -> RegularClaim\\n        uint _UserPurchasedAmount; // [1] -> _UserPurchasedAmount\\n    }\\n\\n    struct Claim\\n    {\\n        string _Name;            // [0] -> _Name\\n        bytes32 _Root;           // [1] -> _Root\\n        address _NFT;            // [2] -> _NFT\\n        address _Operator;       // [3] -> _Operator\\n        address _BurnNFT;        // [4] -> _BurnNFT\\n        uint _ClaimCost;         // [5] -> _ClaimCost\\n        uint _ProjectID;         // [6] -> _ProjectID\\n        uint _ClaimableAmount;   // [7] -> _ClaimableAmount\\n        uint _AmountClaimed;     // [8] -> _AmountClaimed\\n        uint _StartingTimestamp; // [9] -> _StartingTimestamp\\n        uint _SecondsInterval;   // [10] -> _SecondsInterval\\n    }\\n\\n    struct ClaimInfo\\n    {\\n        address _Claimer;\\n        uint _ClaimedTokenID;\\n        uint _BurnedTokenID;\\n        uint _Timestamp;\\n    }\\n\\n    address private constant _BURN_ADDRESS = 0xcff43A597911a9457071d89d2b2AC3D5b1862b86;\\n    address private constant _DR = 0x00000000000076A84feF008CDAbe6409d2FE638B;\\n    address private constant _BRT_MULTISIG = 0x0BC56e3c1397e4570069e89C07936A5c6020e3BE;\\n    uint public _TOTAL_CLAIMS;\\n\\n    /*-------------------*/\\n    /*     MAPPINGS      */\\n    /*-------------------*/\\n\\n    mapping(uint=>Claim) public Claims;                               // [ClaimIndex] => Claim\\n    mapping(uint=>mapping(uint=>bool)) public ClaimedTokenID;         // [ClaimIndex][TokenID] => Minted\\n    mapping(uint=>mapping(address=>uint)) public UserPurchasedAmount; // [ClaimIndex][Wallet] => Total Purchased Amount\\n    mapping(uint=>mapping(uint=>uint)) public TokenIDRedeemed;        // [ClaimIndex][Burned TokenID] => Claimed TokenID\\n    mapping(uint=>ClaimInfo[]) public ClaimInformation;               // [ClaimIndex] => ClaimInfo[]\\n    \\n    /*-------------------*/\\n    /*      EVENTS       */\\n    /*-------------------*/\\n\\n    event TokensClaimed(address Redeemer, uint[] TokenIDs);\\n    event TokensClaimedAndBurned(address Redeemer, uint[] ClaimTokenIDs, uint[] BurnTokenIDs, uint UnixTimestamp);\\n    event TokensClaimedPurchaseTo(address Redeemer, uint ProjectID, uint Amount);\\n\\n    /*----------------------*/\\n    /*  EXTERNAL FUNCTIONS  */\\n    /*----------------------*/\\n\\n    /**\\n     * @dev Claims TokenID(s) With Merkle\\n     * note: transferFrom Implementation For NFT Transfer\\n     */\\n    function MerkleClaim (\\n        uint ClaimIndex,\\n        uint[] calldata TokenIDs,\\n        bytes32[][] calldata Proof,\\n        address Vault\\n    ) external payable nonReentrant {\\n        require(msg.value == (Claims[ClaimIndex]._ClaimCost * TokenIDs.length), \\\"Claimer: Invalid Message Value Sent\\\");\\n        require(Proof.length > 0 && TokenIDs.length > 0, \\\"Claimer: Invalid Input\\\");\\n        require(Proof.length == TokenIDs.length, \\\"Claimer: Arrays Must Match\\\");\\n        address Recipient = msg.sender;\\n        if(Vault != address(0)) { if(IDelegationRegistry(_DR).checkDelegateForAll(msg.sender, Vault)) { Recipient = Vault; } } \\n        bool[] memory Eligibles = ReadEligibilityMerkleClaim(ClaimIndex, Recipient, TokenIDs, Proof);\\n        for(uint Index; Index < TokenIDs.length; Index++)\\n        {\\n            require(Eligibles[Index], \\\"Claimer: Invalid Merkle\\\");\\n            require(!ClaimedTokenID[ClaimIndex][TokenIDs[Index]], \\\"Claimer: NFT TokenID Already Claimed\\\");\\n            ClaimedTokenID[ClaimIndex][TokenIDs[Index]] = true;\\n            IERC721(Claims[ClaimIndex]._NFT).transferFrom(Claims[ClaimIndex]._Operator, msg.sender, TokenIDs[Index]);\\n        }\\n        emit TokensClaimed(msg.sender, TokenIDs);\\n    }\\n\\n    /**\\n     * @dev Claims TokenID(s) With Merkle\\n     * note: purchaseTo Implementation For NFT Transfer\\n     */\\n    function MerkleClaimPurchaseTo (\\n        uint ClaimIndex,\\n        uint DesiredAmount,\\n        uint MaxAmount,\\n        bytes32[] calldata Proof,\\n        address Vault\\n    ) external payable nonReentrant {\\n        address Recipient = msg.sender;\\n        if(Vault != address(0)) { if(IDelegationRegistry(_DR).checkDelegateForAll(msg.sender, Vault)) { Recipient = Vault; } } \\n        require(ReadEligibilityMerkleAmount(ClaimIndex, Recipient, MaxAmount, Proof), \\\"Claimer: Invalid Merkle\\\");\\n        require(msg.value == (Claims[ClaimIndex]._ClaimCost * DesiredAmount), \\\"Claimer: Invalid Message Value Sent\\\");\\n        require(DesiredAmount > 0 && UserPurchasedAmount[ClaimIndex][Recipient] + DesiredAmount <= MaxAmount, \\\"Claimer: Invalid DesiredAmount\\\");\\n        require(Claims[ClaimIndex]._ClaimableAmount >= Claims[ClaimIndex]._AmountClaimed + DesiredAmount, \\\"Claimer: Too Many\\\");\\n        UserPurchasedAmount[ClaimIndex][Recipient] += DesiredAmount;\\n        Claims[ClaimIndex]._AmountClaimed += DesiredAmount;\\n        for(uint Index; Index < DesiredAmount; Index++) { IMinter(Claims[ClaimIndex]._NFT).purchaseTo(msg.sender, Claims[ClaimIndex]._ProjectID); }\\n        emit TokensClaimedPurchaseTo(msg.sender, Claims[ClaimIndex]._ProjectID, DesiredAmount);\\n    }\\n\\n    /**\\n     * @dev Claims TokenID(s) With Merkle\\n     * note: This Is For 1:1 Mapping Burn To Redeem. Ex. Burn (NFT A TokenID 1) for (NFT B TokenID 90069420)\\n     * note: transferFrom Implementation For NFT Burn & Transfer\\n     */\\n    function MerkleClaimAndBurn (\\n        uint ClaimIndex,\\n        uint[] calldata BurnTokenIDs,\\n        uint[] calldata ClaimTokenIDs,\\n        bytes32[][] calldata Proof\\n    ) external payable nonReentrant {\\n        require(msg.value == (Claims[ClaimIndex]._ClaimCost * ClaimTokenIDs.length), \\\"Claimer: Invalid Message Value Sent\\\");\\n        require(Proof.length > 0 && BurnTokenIDs.length > 0 && ClaimTokenIDs.length > 0, \\\"Claimer: Invalid Input\\\");\\n        require(BurnTokenIDs.length == ClaimTokenIDs.length && ClaimTokenIDs.length == Proof.length, \\\"Claimer: Arrays Must Match\\\");\\n        bool[] memory Eligibles = ReadEligibilityMerkleClaimAndBurn(ClaimIndex, BurnTokenIDs, ClaimTokenIDs, Proof);\\n        for(uint Index; Index < BurnTokenIDs.length; Index++)\\n        {\\n            require(IERC721(Claims[ClaimIndex]._BurnNFT).ownerOf(BurnTokenIDs[Index]) == msg.sender, \\\"Claimer: User Does Not Own Input TokenID\\\");\\n            IERC721(Claims[ClaimIndex]._BurnNFT).transferFrom(msg.sender, _BURN_ADDRESS, BurnTokenIDs[Index]);\\n            require(Eligibles[Index], \\\"Claimer: Invalid Merkle\\\");\\n            require(!ClaimedTokenID[ClaimIndex][ClaimTokenIDs[Index]], \\\"Claimer: NFT Already Claimed\\\");\\n            ClaimedTokenID[ClaimIndex][ClaimTokenIDs[Index]] = true;\\n            IERC721(Claims[ClaimIndex]._NFT).transferFrom(Claims[ClaimIndex]._Operator, msg.sender, ClaimTokenIDs[Index]);\\n        }\\n        emit TokensClaimedAndBurned(msg.sender, ClaimTokenIDs, BurnTokenIDs, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Claims TokenID(s) With Merkle\\n     * note: This Is For 1:1 Mapping Burn To Redeem. Ex. Burn (NFT A TokenID 1) for (NFT B TokenID 90069420)\\n     * note: transferFrom Implementation For NFT Burn & Transfer\\n     */\\n    function MerkleClaimAndBurnLive (\\n        uint ClaimIndex,\\n        uint[] calldata BurnTokenIDs,\\n        uint[] calldata ClaimTokenIDs,\\n        bytes32[][] calldata Proof\\n    ) external payable nonReentrant {\\n        require(msg.value == (Claims[ClaimIndex]._ClaimCost * ClaimTokenIDs.length), \\\"Claimer: Invalid Message Value Sent\\\");\\n        require(Proof.length > 0 && BurnTokenIDs.length > 0 && ClaimTokenIDs.length > 0, \\\"Claimer: Invalid Input\\\");\\n        require(BurnTokenIDs.length == ClaimTokenIDs.length && ClaimTokenIDs.length == Proof.length, \\\"Claimer: Arrays Must Match\\\"); \\n        bool[] memory Eligibles = ReadEligibilityMerkleClaimAndBurn(ClaimIndex, BurnTokenIDs, ClaimTokenIDs, Proof);\\n        for(uint Index; Index < BurnTokenIDs.length; Index++)\\n        {\\n            require(IERC721(Claims[ClaimIndex]._BurnNFT).ownerOf(BurnTokenIDs[Index]) == msg.sender, \\\"Claimer: User Does Not Own Input TokenID\\\");\\n            require(Eligibles[Index], \\\"Claimer: Invalid Merkle\\\");\\n            IMP(Claims[ClaimIndex]._BurnNFT)._LiveMintBurn(BurnTokenIDs[Index]);\\n            require(!ClaimedTokenID[ClaimIndex][ClaimTokenIDs[Index]], \\\"Claimer: NFT Already Claimed\\\");\\n            ClaimedTokenID[ClaimIndex][ClaimTokenIDs[Index]] = true;\\n            IERC721(Claims[ClaimIndex]._NFT).transferFrom(Claims[ClaimIndex]._Operator, msg.sender, ClaimTokenIDs[Index]);\\n        }\\n        emit TokensClaimedAndBurned(msg.sender, ClaimTokenIDs, BurnTokenIDs, block.timestamp);\\n    }\\n\\n\\n    /**\\n     * @dev Claims TokenID(s) With Merkle\\n     * note: This Is For 1:1 Mapping Burn To Redeem. Ex. Burn (NFT A TokenID 1) for (NFT B TokenID 90069420)\\n     * note: transferFrom Implementation For NFT Burn & Transfer\\n     */\\n    function MerkleClaimAndBurnLiveWithTimestamps (\\n        uint ClaimIndex,\\n        uint[] calldata BurnTokenIDs,\\n        uint[] calldata ClaimTokenIDs,\\n        bytes32[][] calldata Proof\\n    ) external payable nonReentrant {\\n        require(block.timestamp >= Claims[ClaimIndex]._StartingTimestamp, \\\"Claimer: Claim Not Started\\\");\\n        require(msg.value == (Claims[ClaimIndex]._ClaimCost * ClaimTokenIDs.length), \\\"Claimer: Invalid Message Value Sent\\\");\\n        require(Proof.length > 0 && BurnTokenIDs.length > 0 && ClaimTokenIDs.length > 0, \\\"Claimer: Invalid Input\\\");\\n        require(BurnTokenIDs.length == ClaimTokenIDs.length && ClaimTokenIDs.length == Proof.length, \\\"Claimer: Arrays Must Match\\\"); \\n        bool[] memory Eligibles = ReadEligibilityMerkleClaimAndBurn(ClaimIndex, BurnTokenIDs, ClaimTokenIDs, Proof);\\n        for(uint Index; Index < BurnTokenIDs.length; Index++)\\n        {\\n            require(IERC721(Claims[ClaimIndex]._BurnNFT).ownerOf(BurnTokenIDs[Index]) == msg.sender, \\\"Claimer: User Does Not Own Input TokenID\\\");\\n            require(Eligibles[Index], \\\"Claimer: Invalid Merkle\\\");\\n            require(BurnTokenIDs[Index] <= ViewCurrentEligibleTokenID(ClaimIndex), \\\"Claimer: Invalid BurnTokenID\\\");\\n            IMP(Claims[ClaimIndex]._BurnNFT)._LiveMintBurn(BurnTokenIDs[Index]);\\n            require(!ClaimedTokenID[ClaimIndex][ClaimTokenIDs[Index]], \\\"Claimer: NFT Already Claimed\\\");\\n            ClaimedTokenID[ClaimIndex][ClaimTokenIDs[Index]] = true;\\n            ClaimInformation[ClaimIndex].push(ClaimInfo(msg.sender, ClaimTokenIDs[Index], BurnTokenIDs[Index], block.timestamp));\\n            IERC721(Claims[ClaimIndex]._NFT).transferFrom(Claims[ClaimIndex]._Operator, msg.sender, ClaimTokenIDs[Index]);\\n        }\\n        emit TokensClaimedAndBurned(msg.sender, ClaimTokenIDs, BurnTokenIDs, block.timestamp);\\n    }\\n\\n    /*-------------------*/\\n    /*  OWNER FUNCTIONS  */\\n    /*-------------------*/\\n\\n    /**\\n     * @dev Starts A New Claim\\n     */\\n    function _NewClaim(Claim memory _Claim) external onlyOperator returns (uint ClaimIndex) \\n    {\\n        ClaimIndex = _TOTAL_CLAIMS;\\n        Claims[ClaimIndex] = _Claim;\\n        _TOTAL_CLAIMS + ClaimIndex + 1;\\n        return ClaimIndex;\\n    }\\n\\n    /**\\n     * @dev Changes The Starting Timestamp For Timelocked Draft Pick Merkle Claims\\n     */\\n    function _ChangeStartingTimestamp(uint ClaimIndex, uint UnixTimestamp) external onlyOperator { Claims[ClaimIndex]._StartingTimestamp = UnixTimestamp; }\\n\\n    /**\\n     * @dev Changes The Seconds Interval For Timelocked Draft Pick Merkle Claims\\n     */\\n    function _ChangeSecondsInterval(uint ClaimIndex, uint SecondsInterval) external onlyOperator { Claims[ClaimIndex]._SecondsInterval = SecondsInterval; }\\n    \\n    /**\\n     * @dev Changes NFT\\n     */\\n    function _ChangeNFT(uint ClaimIndex, address NFT) external onlyOperator { Claims[ClaimIndex]._NFT = NFT; }\\n\\n    /**\\n     * @dev Changes Operator\\n     */\\n    function _ChangeOperator(uint ClaimIndex, address Operator) external onlyOperator { Claims[ClaimIndex]._Operator = Operator; }\\n\\n    /**\\n     * @dev Changes BurnNFT\\n     */\\n    function _ChangeBurnNFT(uint ClaimIndex, address BurnNFT) external onlyOperator { Claims[ClaimIndex]._BurnNFT = BurnNFT; }\\n\\n    /**\\n     * @dev Changes ClaimCost\\n     */\\n    function _ChangeClaimCost(uint ClaimIndex, uint ClaimCost) external onlyOperator { Claims[ClaimIndex]._ClaimCost = ClaimCost; }\\n\\n    /**\\n     * @dev Changes ProjectID\\n     */\\n    function _ChangeProjectID(uint ClaimIndex, uint ProjectID) external onlyOperator { Claims[ClaimIndex]._ProjectID = ProjectID; }\\n    \\n    /**\\n     * @dev Changes PurchaseableAmount\\n     */\\n    function _ChangePurchaseableAmount(uint ClaimIndex, uint PurchaseableAmount) external onlyOperator { Claims[ClaimIndex]._ClaimableAmount = PurchaseableAmount; }\\n\\n    /**\\n     * @dev Changes Root\\n     */\\n    function _ChangeRoot(uint ClaimIndex, bytes32 Root) external onlyOperator { Claims[ClaimIndex]._Root = Root; }\\n\\n    /**\\n     * @dev Withdraws All ETH To Multisig\\n     */\\n    function _WithdrawETHToMultisig() external onlyOperator\\n    {\\n        (bool Success, ) = _BRT_MULTISIG.call { value: address(this).balance }(\\\"\\\");\\n        require(Success, \\\"Claimer: Unable to Withdraw, Recipient May Have Reverted\\\");\\n    }\\n\\n\\n    /*------------------\\n     * OWNER FUNCTIONS *\\n    -------------------*/\\n\\n    /**\\n     * @dev Withdraws All Ether From The Contract\\n     */\\n    function ___WithdrawEther() external onlyOwner { payable(msg.sender).transfer(address(this).balance); }\\n\\n    /**\\n     * @dev Withdraws Ether From Contract To Address With An Amount\\n     */\\n    function ___WithdrawEtherToAddress(address payable Recipient, uint Amount) external onlyOwner\\n    {\\n        require(Amount > 0 && Amount <= address(this).balance, \\\"Claimer: Invalid Amount\\\");\\n        (bool Success, ) = Recipient.call{value: Amount}(\\\"\\\");\\n        require(Success, \\\"Claimer: Unable to Withdraw, Recipient May Have Reverted\\\");\\n    }\\n\\n    /*------------------*/\\n    /*  VIEW FUNCTIONS  */\\n    /*------------------*/\\n\\n    /**\\n     * @dev Returns Claim At ClaimIndex\\n     */\\n    function ViewClaim(uint ClaimIndex) external view returns (Claim memory) { return Claims[ClaimIndex]; }\\n\\n    /**\\n     * @dev Returns Claims At ClaimIndexes\\n     */\\n    function ViewClaims(uint[] calldata ClaimIndexes) external view returns (Claim[] memory) \\n    {\\n        Claim[] memory _Claims = new Claim[](ClaimIndexes.length);\\n        for(uint Index; Index < ClaimIndexes.length; Index++) { _Claims[Index] = Claims[ClaimIndexes[Index]]; }\\n        return _Claims;\\n    }\\n\\n    /**\\n     * @dev Returns A Wallet's Merkle Eligibility\\n     */\\n    function ReadEligibilityMerkleClaim (\\n        uint ClaimIndex,\\n        address Wallet,\\n        uint[] calldata TokenIDs,\\n        bytes32[][] calldata Proof\\n    ) public view returns (bool[] memory) {\\n        bool[] memory Eligibles = new bool[](TokenIDs.length);\\n        for(uint Index; Index < TokenIDs.length; Index++)\\n        {\\n            bytes32 Leaf = keccak256(abi.encodePacked(Wallet, TokenIDs[Index]));\\n            if(!ClaimedTokenID[ClaimIndex][TokenIDs[Index]]) { Eligibles[Index] = MerkleProof.verify(Proof[Index], Claims[ClaimIndex]._Root, Leaf); }\\n        }\\n        return Eligibles;\\n    }\\n\\n    /**\\n     * @dev Returns A Wallet's Merkle Eligibility\\n     */\\n    function ReadEligibilityMerkleClaimAndBurn (\\n        uint ClaimIndex,\\n        uint[] calldata BurnTokenIDs, \\n        uint[] calldata ClaimTokenIDs,\\n        bytes32[][] calldata Proof\\n    ) public view returns (bool[] memory) {\\n        bool[] memory Eligibles = new bool[](BurnTokenIDs.length);\\n        for(uint Index; Index < BurnTokenIDs.length; Index++)\\n        {\\n            bytes32 Leaf = keccak256(abi.encodePacked(BurnTokenIDs[Index], ClaimTokenIDs[Index]));\\n            if(!ClaimedTokenID[ClaimIndex][ClaimTokenIDs[Index]]) { Eligibles[Index] = MerkleProof.verify(Proof[Index], Claims[ClaimIndex]._Root, Leaf); }\\n        }\\n        return Eligibles;\\n    }\\n\\n    /**\\n     * @dev Returns A Wallet's Merkle Eligibility\\n     * note: For Claims Where There Is A Derived Max Amount Per Wallet\\n     */\\n    function ReadEligibilityMerkleAmount (\\n        uint ClaimIndex,\\n        address Wallet,\\n        uint MaxAmount,\\n        bytes32[] calldata Proof\\n    ) public view returns (bool) {\\n        bytes32 Leaf = keccak256(abi.encodePacked(Wallet, MaxAmount));\\n        return MerkleProof.verify(Proof, Claims[ClaimIndex]._Root, Leaf);\\n    }\\n\\n    /**\\n     * @dev Returns Merkle Eligibilities\\n     */\\n    function ReadEligibility (\\n        uint ClaimIndex,\\n        address Wallet,\\n        uint[] calldata TokenIDs,\\n        bytes32[][] calldata Proofs\\n    ) public view returns (User memory) {\\n        return User (\\n            ReadEligibilityMerkleClaim(ClaimIndex, Wallet, TokenIDs, Proofs),\\n            UserPurchasedAmount[ClaimIndex][Wallet]\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns The Current Eligible TokenID For Timelocked Draft Pick Merkle Claims\\n     */\\n    function ViewCurrentEligibleTokenID ( uint ClaimIndex ) public view returns (uint ValidTokenID) \\n    {\\n        uint StartingTimestamp = Claims[ClaimIndex]._StartingTimestamp;\\n        uint SecondsInterval = Claims[ClaimIndex]._SecondsInterval;\\n        if(block.timestamp < StartingTimestamp) { return type(uint).max; }\\n        return ((block.timestamp - StartingTimestamp) / SecondsInterval);\\n    }\\n\\n    /**\\n     * @dev Returns Array Of Successful Claims & The Current Valid TokenID Index For Timelocked Draft Pick Merkle Claims\\n     */\\n    function ViewClaimStatus ( \\n        uint ClaimIndex, \\n        uint[] calldata ClaimTokenIDs, \\n        uint[] calldata BurnTokenIDs, \\n        bytes32[][] calldata Proofs \\n    ) public view returns ( \\n        ClaimInfo[] memory _ClaimInfo, \\n        bool[] memory Eligibles, \\n        uint CurrentValidTokenID \\n    ) { \\n        return (\\n            ClaimInformation[ClaimIndex], \\n            ReadEligibilityMerkleClaimAndBurn(ClaimIndex, BurnTokenIDs, ClaimTokenIDs, Proofs), \\n            ViewCurrentEligibleTokenID(ClaimIndex)\\n        ); \\n    }\\n}\\n\\ninterface IDelegationRegistry\\n{\\n    /**\\n     * @dev Checks If A Vault Has Delegated To The Delegate\\n     */\\n    function checkDelegateForAll(address delegate, address delegator) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/MissionControl.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\\n/**\\n * @dev: @brougkr\\n * @title MissionControl\\n * @notice Smart Contract To Facilitate Owner, Admin, & Operator Management & Access Control\\n */\\npragma solidity 0.8.19;\\ncontract MissionControl\\n{\\n    address public _OWNER;                              // Owner Of The Contract        \\n    address public _LAUNCHPAD;                          // Address Of The Launchpad Contract\\n    mapping(address => bool) public AuthorizedAdmin;    // [Address] -> [IsAdmin?]\\n    mapping(address => bool) public AuthorizedOperator; // [Address] -> [IsOperator?]\\n\\n    /*-----------------------------------------------------*/\\n    /*------------------ * CONSTRUCTOR * ------------------*/\\n    /*-----------------------------------------------------*/\\n\\n    constructor()\\n    {\\n        _OWNER = 0xe06F5FAE754e81Bc050215fF89B03d9e9FF20700;                // `operator.brightmoments.eth`\\n        AuthorizedAdmin[msg.sender] = true;                                 // `deployer.brightmoments.eth`\\n        AuthorizedAdmin[0x90D98d5A1fD21B7cEa4D5c18341607ed1a8345c0] = true; // `gitpancake.brightmoments.eth`\\n        AuthorizedAdmin[0x18B7511938FBe2EE08ADf3d4A24edB00A5C9B783] = true; // `phil.brightmoments.eth`\\n        AuthorizedAdmin[0x91594b5E5d74FCCB3f71674eE74C5F4D44f333D5] = true; // `future.brightmoments.eth`\\n    }\\n\\n    /*---------------------------------------------------------*/\\n    /*------------------ * ADMIN FUNCTIONS * ------------------*/\\n    /*---------------------------------------------------------*/\\n\\n    /**\\n     * @dev Changes The Launchpad Address\\n     */\\n    function __AdminChangeOperatorState(address _Address) external onlyAdmin { AuthorizedOperator[_Address] = !AuthorizedOperator[_Address]; }\\n    \\n    /*---------------------------------------------------------*/\\n    /*------------------ * OWNER FUNCTIONS * ------------------*/\\n    /*---------------------------------------------------------*/\\n\\n    /**\\n     * @dev Authorizes Or Deauthorizes An Address's Admin Status\\n     * @param _Address: Address To Authorize Or Deauthorize\\n     */\\n    function ___OwnerChangeAdminState(address _Address) external onlyOwner { AuthorizedAdmin[_Address] = !AuthorizedAdmin[_Address]; }\\n\\n    /**\\n     * @dev Transfers Ownership Of The Contract\\n     * @param _NewOwner: Address To Transfer Ownership To\\n     */\\n    function ___OwnerTransferOwnership(address _NewOwner) external onlyOwner { _OWNER = _NewOwner; }\\n\\n    /*-------------------------------------------------------------*/\\n    /*------------------ * LAUNCHPAD FUNCTIONS * ------------------*/\\n    /*-------------------------------------------------------------*/\\n\\n    /**\\n     * @dev Overrides The Launchpad Address\\n     * @param _Address: Address To Override The Launchpad Address With\\n     * @notice This Function Is Only Accessible By The Launchpad Contract Or An Authorized Admin\\n     */\\n    function ____LaunchpadOverrideAddress(address _Address) external onlyLaunchpad { _LAUNCHPAD = _Address; }\\n\\n    /*----------------------------------------------------------*/\\n    /*------------------ * ACCESS MODIFIERS * ------------------*/\\n    /*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev onlyOperator Access Modifier\\n     */\\n    modifier onlyOperator\\n    {\\n        require(AuthorizedOperator[msg.sender] || AuthorizedAdmin[msg.sender] || msg.sender == _LAUNCHPAD, \\\"MissionControl | onlyOperator | Caller Is Not Operator Or Admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev onlyAdmin Access Modifier\\n     */\\n    modifier onlyAdmin\\n    {   \\n        require(AuthorizedAdmin[msg.sender], \\\"MissionControl | onlyAdmin | Caller Is Not Admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev onlyOwner Access Modifier\\n     */\\n    modifier onlyOwner\\n    {\\n        require(_OWNER == msg.sender, \\\"MissionControl | onlyOwner | Caller Is Not Owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev onlyLaunchpad Access Modifier\\n     */\\n    modifier onlyLaunchpad\\n    {\\n        require(_LAUNCHPAD == msg.sender || AuthorizedAdmin[msg.sender], \\\"MissionControl | onlyLaunchpad | Caller Is Not Launchpad\\\");\\n        _;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"TokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ClaimTokenIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimedAndBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ProjectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimedPurchaseTo\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AuthorizedAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ClaimInformation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_Claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BurnedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokenID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Claims\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_Root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BurnNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AmountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"TokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"Proof\",\"type\":\"bytes32[][]\"},{\"internalType\":\"address\",\"name\":\"Vault\",\"type\":\"address\"}],\"name\":\"MerkleClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ClaimTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"Proof\",\"type\":\"bytes32[][]\"}],\"name\":\"MerkleClaimAndBurn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ClaimTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"Proof\",\"type\":\"bytes32[][]\"}],\"name\":\"MerkleClaimAndBurnLive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ClaimTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"Proof\",\"type\":\"bytes32[][]\"}],\"name\":\"MerkleClaimAndBurnLiveWithTimestamps\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DesiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"Vault\",\"type\":\"address\"}],\"name\":\"MerkleClaimPurchaseTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"TokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"Proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"ReadEligibility\",\"outputs\":[{\"components\":[{\"internalType\":\"bool[]\",\"name\":\"RegularClaim\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"_UserPurchasedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MerkleClaimer.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"MaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"Proof\",\"type\":\"bytes32[]\"}],\"name\":\"ReadEligibilityMerkleAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"TokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"Proof\",\"type\":\"bytes32[][]\"}],\"name\":\"ReadEligibilityMerkleClaim\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ClaimTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"Proof\",\"type\":\"bytes32[][]\"}],\"name\":\"ReadEligibilityMerkleClaimAndBurn\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenIDRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"}],\"name\":\"ViewClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_Root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BurnNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AmountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct MerkleClaimer.Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ClaimTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"BurnTokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"Proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"ViewClaimStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_Claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BurnedTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MerkleClaimer.ClaimInfo[]\",\"name\":\"_ClaimInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"Eligibles\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"CurrentValidTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ClaimIndexes\",\"type\":\"uint256[]\"}],\"name\":\"ViewClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_Root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BurnNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AmountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct MerkleClaimer.Claim[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"}],\"name\":\"ViewCurrentEligibleTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ValidTokenID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"BurnNFT\",\"type\":\"address\"}],\"name\":\"_ChangeBurnNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ClaimCost\",\"type\":\"uint256\"}],\"name\":\"_ChangeClaimCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NFT\",\"type\":\"address\"}],\"name\":\"_ChangeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Operator\",\"type\":\"address\"}],\"name\":\"_ChangeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectID\",\"type\":\"uint256\"}],\"name\":\"_ChangeProjectID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PurchaseableAmount\",\"type\":\"uint256\"}],\"name\":\"_ChangePurchaseableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"Root\",\"type\":\"bytes32\"}],\"name\":\"_ChangeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SecondsInterval\",\"type\":\"uint256\"}],\"name\":\"_ChangeSecondsInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"_ChangeStartingTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LAUNCHPAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_Name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_Root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_NFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BurnNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ProjectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ClaimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AmountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SecondsInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct MerkleClaimer.Claim\",\"name\":\"_Claim\",\"type\":\"tuple\"}],\"name\":\"_NewClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ClaimIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TOTAL_CLAIMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WithdrawETHToMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"__AdminChangeOperatorState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"___OwnerChangeAdminState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NewOwner\",\"type\":\"address\"}],\"name\":\"___OwnerTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"___WithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"___WithdrawEtherToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"____LaunchpadOverrideAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MerkleClaimer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}