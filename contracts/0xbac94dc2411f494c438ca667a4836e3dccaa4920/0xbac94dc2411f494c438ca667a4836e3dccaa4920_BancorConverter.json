{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// File: contracts/token/interfaces/IERC20Token.sol\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {}\r\n    function symbol() public view returns (string) {}\r\n    function decimals() public view returns (uint8) {}\r\n    function totalSupply() public view returns (uint256) {}\r\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// File: contracts/utility/interfaces/IWhitelist.sol\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _address) public view returns (bool);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IBancorConverter.sol\r\n\r\n/*\r\n    Bancor Converter interface\r\n*/\r\ncontract IBancorConverter {\r\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256, uint256);\r\n    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\r\n    function conversionWhitelist() public view returns (IWhitelist) {}\r\n    function conversionFee() public view returns (uint32) {}\r\n    function connectors(address _address) public view returns (uint256, uint32, bool, bool, bool) { _address; }\r\n    function getConnectorBalance(IERC20Token _connectorToken) public view returns (uint256);\r\n    function claimTokens(address _from, uint256 _amount) public;\r\n    // deprecated, backward compatibility\r\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IBancorConverterUpgrader.sol\r\n\r\n/*\r\n    Bancor Converter Upgrader interface\r\n*/\r\ncontract IBancorConverterUpgrader {\r\n    function upgrade(bytes32 _version) public;\r\n}\r\n\r\n// File: contracts/converter/interfaces/IBancorFormula.sol\r\n\r\n/*\r\n    Bancor Formula interface\r\n*/\r\ncontract IBancorFormula {\r\n    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public view returns (uint256);\r\n    function calculateSaleReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) public view returns (uint256);\r\n    function calculateCrossConnectorReturn(uint256 _fromConnectorBalance, uint32 _fromConnectorWeight, uint256 _toConnectorBalance, uint32 _toConnectorWeight, uint256 _amount) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/IBancorNetwork.sol\r\n\r\n/*\r\n    Bancor Network interface\r\n*/\r\ncontract IBancorNetwork {\r\n    function convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\r\n    function convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for) public payable returns (uint256);\r\n    function convertForPrioritized2(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for,\r\n        uint256 _block,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s)\r\n        public payable returns (uint256);\r\n\r\n    // deprecated, backward compatibility\r\n    function convertForPrioritized(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for,\r\n        uint256 _block,\r\n        uint256 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s)\r\n        public payable returns (uint256);\r\n}\r\n\r\n// File: contracts/ContractIds.sol\r\n\r\n/**\r\n    Id definitions for bancor contracts\r\n\r\n    Can be used in conjunction with the contract registry to get contract addresses\r\n*/\r\ncontract ContractIds {\r\n    // generic\r\n    bytes32 public constant CONTRACT_FEATURES = \"ContractFeatures\";\r\n    bytes32 public constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n\r\n    // bancor logic\r\n    bytes32 public constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 public constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 public constant BANCOR_GAS_PRICE_LIMIT = \"BancorGasPriceLimit\";\r\n    bytes32 public constant BANCOR_CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 public constant BANCOR_CONVERTER_FACTORY = \"BancorConverterFactory\";\r\n\r\n    // Ids of BNT converter and BNT token\r\n    bytes32 public constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 public constant BNT_CONVERTER = \"BNTConverter\";\r\n\r\n    // Id of BancorX contract\r\n    bytes32 public constant BANCOR_X = \"BancorX\";\r\n}\r\n\r\n// File: contracts/FeatureIds.sol\r\n\r\n/**\r\n    Id definitions for bancor contract features\r\n\r\n    Can be used to query the ContractFeatures contract to check whether a certain feature is supported by a contract\r\n*/\r\ncontract FeatureIds {\r\n    // converter features\r\n    uint256 public constant CONVERTER_CONVERSION_WHITELIST = 1 << 0;\r\n}\r\n\r\n// File: contracts/utility/interfaces/IOwned.sol\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\n/*\r\n    Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/Managed.sol\r\n\r\n/*\r\n    Provides support and utilities for contract management\r\n    Note that a managed contract must also have an owner\r\n*/\r\ncontract Managed is Owned {\r\n    address public manager;\r\n    address public newManager;\r\n\r\n    event ManagerUpdate(address indexed _prevManager, address indexed _newManager);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n        manager = msg.sender;\r\n    }\r\n\r\n    // allows execution by the manager only\r\n    modifier managerOnly {\r\n        assert(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    // allows execution by either the owner or the manager only\r\n    modifier ownerOrManagerOnly {\r\n        require(msg.sender == owner || msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract management\r\n        the new manager still needs to accept the transfer\r\n        can only be called by the contract manager\r\n\r\n        @param _newManager    new contract manager\r\n    */\r\n    function transferManagement(address _newManager) public ownerOrManagerOnly {\r\n        require(_newManager != manager);\r\n        newManager = _newManager;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new manager to accept a management transfer\r\n    */\r\n    function acceptManagement() public {\r\n        require(msg.sender == newManager);\r\n        emit ManagerUpdate(manager, newManager);\r\n        manager = newManager;\r\n        newManager = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/Utils.sol\r\n\r\n/*\r\n    Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n        constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n    // Overflow protected math functions\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n}\r\n\r\n// File: contracts/utility/interfaces/IContractRegistry.sol\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function addressOf(bytes32 _contractName) public view returns (address);\r\n\r\n    // deprecated, backward compatibility\r\n    function getAddress(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n// File: contracts/utility/interfaces/IContractFeatures.sol\r\n\r\n/*\r\n    Contract Features interface\r\n*/\r\ncontract IContractFeatures {\r\n    function isSupported(address _contract, uint256 _features) public view returns (bool);\r\n    function enableFeatures(uint256 _features, bool _enable) public;\r\n}\r\n\r\n// File: contracts/token/interfaces/ISmartToken.sol\r\n\r\n/*\r\n    Smart Token interface\r\n*/\r\ncontract ISmartToken is IOwned, IERC20Token {\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/utility/interfaces/ITokenHolder.sol\r\n\r\n/*\r\n    Token Holder interface\r\n*/\r\ncontract ITokenHolder is IOwned {\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/utility/TokenHolder.sol\r\n\r\n/*\r\n    We consider every contract to be a 'token holder' since it's currently not possible\r\n    for a contract to deny receiving tokens.\r\n\r\n    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\r\n    the owner to send tokens that were sent to the contract by mistake back to their sender.\r\n*/\r\ncontract TokenHolder is ITokenHolder, Owned, Utils {\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    /**\r\n        @dev withdraws tokens held by the contract and sends them to an account\r\n        can only be called by the owner\r\n\r\n        @param _token   ERC20 token contract address\r\n        @param _to      account to receive the new amount\r\n        @param _amount  amount to withdraw\r\n    */\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\r\n        public\r\n        ownerOnly\r\n        validAddress(_token)\r\n        validAddress(_to)\r\n        notThis(_to)\r\n    {\r\n        assert(_token.transfer(_to, _amount));\r\n    }\r\n}\r\n\r\n// File: contracts/token/SmartTokenController.sol\r\n\r\n/*\r\n    The smart token controller is an upgradable part of the smart token that allows\r\n    more functionality as well as fixes for bugs/exploits.\r\n    Once it accepts ownership of the token, it becomes the token's sole controller\r\n    that can execute any of its functions.\r\n\r\n    To upgrade the controller, ownership must be transferred to a new controller, along with\r\n    any relevant data.\r\n\r\n    The smart token must be set on construction and cannot be changed afterwards.\r\n    Wrappers are provided (as opposed to a single 'execute' function) for each of the token's functions, for easier access.\r\n\r\n    Note that the controller can transfer token ownership to a new controller that\r\n    doesn't allow executing any function on the token, for a trustless solution.\r\n    Doing that will also remove the owner's ability to upgrade the controller.\r\n*/\r\ncontract SmartTokenController is TokenHolder {\r\n    ISmartToken public token;   // smart token\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor(ISmartToken _token)\r\n        public\r\n        validAddress(_token)\r\n    {\r\n        token = _token;\r\n    }\r\n\r\n    // ensures that the controller is the token's owner\r\n    modifier active() {\r\n        require(token.owner() == address(this));\r\n        _;\r\n    }\r\n\r\n    // ensures that the controller is not the token's owner\r\n    modifier inactive() {\r\n        require(token.owner() != address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the token ownership\r\n        the new owner needs to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new token owner\r\n    */\r\n    function transferTokenOwnership(address _newOwner) public ownerOnly {\r\n        token.transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept a token ownership transfer\r\n        can only be called by the contract owner\r\n    */\r\n    function acceptTokenOwnership() public ownerOnly {\r\n        token.acceptOwnership();\r\n    }\r\n\r\n    /**\r\n        @dev disables/enables token transfers\r\n        can only be called by the contract owner\r\n\r\n        @param _disable    true to disable transfers, false to enable them\r\n    */\r\n    function disableTokenTransfers(bool _disable) public ownerOnly {\r\n        token.disableTransfers(_disable);\r\n    }\r\n\r\n    /**\r\n        @dev withdraws tokens held by the controller and sends them to an account\r\n        can only be called by the owner\r\n\r\n        @param _token   ERC20 token contract address\r\n        @param _to      account to receive the new amount\r\n        @param _amount  amount to withdraw\r\n    */\r\n    function withdrawFromToken(IERC20Token _token, address _to, uint256 _amount) public ownerOnly {\r\n        ITokenHolder(token).withdrawTokens(_token, _to, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/token/interfaces/IEtherToken.sol\r\n\r\n/*\r\n    Ether Token interface\r\n*/\r\ncontract IEtherToken is ITokenHolder, IERC20Token {\r\n    function deposit() public payable;\r\n    function withdraw(uint256 _amount) public;\r\n    function withdrawTo(address _to, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/converter/BancorConverter.sol\r\n\r\n/*\r\n    Bancor Converter v0.11\r\n\r\n    The Bancor version of the token converter, allows conversion between a smart token and other ERC20 tokens and between different ERC20 tokens and themselves.\r\n\r\n    ERC20 connector balance can be virtual, meaning that the calculations are based on the virtual balance instead of relying on\r\n    the actual connector balance. This is a security mechanism that prevents the need to keep a very large (and valuable) balance in a single contract.\r\n\r\n    The converter is upgradable (just like any SmartTokenController).\r\n\r\n    WARNING: It is NOT RECOMMENDED to use the converter with Smart Tokens that have less than 8 decimal digits\r\n             or with very small numbers because of precision loss\r\n\r\n    Open issues:\r\n    - Front-running attacks are currently mitigated by the following mechanisms:\r\n        - minimum return argument for each conversion provides a way to define a minimum/maximum price for the transaction\r\n        - gas price limit prevents users from having control over the order of execution\r\n        - gas price limit check can be skipped if the transaction comes from a trusted, whitelisted signer\r\n      Other potential solutions might include a commit/reveal based schemes\r\n    - Possibly add getters for the connector fields so that the client won't need to rely on the order in the struct\r\n*/\r\ncontract BancorConverter is IBancorConverter, SmartTokenController, Managed, ContractIds, FeatureIds {\r\n    uint32 private constant MAX_WEIGHT = 1000000;\r\n    uint64 private constant MAX_CONVERSION_FEE = 1000000;\r\n\r\n    struct Connector {\r\n        uint256 virtualBalance;         // connector virtual balance\r\n        uint32 weight;                  // connector weight, represented in ppm, 1-1000000\r\n        bool isVirtualBalanceEnabled;   // true if virtual balance is enabled, false if not\r\n        bool isPurchaseEnabled;         // is purchase of the smart token enabled with the connector, can be set by the owner\r\n        bool isSet;                     // used to tell if the mapping element is defined\r\n    }\r\n\r\n    bytes32 public version = '0.11';\r\n    string public converterType = 'bancor';\r\n\r\n    bool public allowRegistryUpdate = true;             // allows the owner to prevent/allow the registry to be updated\r\n    bool public claimTokensEnabled = false;             // allows BancorX contract to claim tokens without allowance (one transaction instread of two)\r\n    IContractRegistry public prevRegistry;              // address of previous registry as security mechanism\r\n    IContractRegistry public registry;                  // contract registry contract\r\n    IWhitelist public conversionWhitelist;              // whitelist contract with list of addresses that are allowed to use the converter\r\n    IERC20Token[] public connectorTokens;               // ERC20 standard token addresses\r\n    mapping (address => Connector) public connectors;   // connector token addresses -> connector data\r\n    uint32 private totalConnectorWeight = 0;            // used to efficiently prevent increasing the total connector weight above 100%\r\n    uint32 public maxConversionFee = 0;                 // maximum conversion fee for the lifetime of the contract,\r\n                                                        // represented in ppm, 0...1000000 (0 = no fee, 100 = 0.01%, 1000000 = 100%)\r\n    uint32 public conversionFee = 0;                    // current conversion fee, represented in ppm, 0...maxConversionFee\r\n    bool public conversionsEnabled = true;              // true if token conversions is enabled, false if not\r\n    IERC20Token[] private convertPath;\r\n\r\n    // triggered when a conversion between two tokens occurs\r\n    event Conversion(\r\n        address indexed _fromToken,\r\n        address indexed _toToken,\r\n        address indexed _trader,\r\n        uint256 _amount,\r\n        uint256 _return,\r\n        int256 _conversionFee\r\n    );\r\n    // triggered after a conversion with new price data\r\n    event PriceDataUpdate(\r\n        address indexed _connectorToken,\r\n        uint256 _tokenSupply,\r\n        uint256 _connectorBalance,\r\n        uint32 _connectorWeight\r\n    );\r\n    // triggered when the conversion fee is updated\r\n    event ConversionFeeUpdate(uint32 _prevFee, uint32 _newFee);\r\n\r\n    // triggered when conversions are enabled/disabled\r\n    event ConversionsEnable(bool _conversionsEnabled);\r\n\r\n    /**\r\n        @dev constructor\r\n\r\n        @param  _token              smart token governed by the converter\r\n        @param  _registry           address of a contract registry contract\r\n        @param  _maxConversionFee   maximum conversion fee, represented in ppm\r\n        @param  _connectorToken     optional, initial connector, allows defining the first connector at deployment time\r\n        @param  _connectorWeight    optional, weight for the initial connector\r\n    */\r\n    constructor(\r\n        ISmartToken _token,\r\n        IContractRegistry _registry,\r\n        uint32 _maxConversionFee,\r\n        IERC20Token _connectorToken,\r\n        uint32 _connectorWeight\r\n    )\r\n        public\r\n        SmartTokenController(_token)\r\n        validAddress(_registry)\r\n        validMaxConversionFee(_maxConversionFee)\r\n    {\r\n        registry = _registry;\r\n        prevRegistry = _registry;\r\n        IContractFeatures features = IContractFeatures(registry.addressOf(ContractIds.CONTRACT_FEATURES));\r\n\r\n        // initialize supported features\r\n        if (features != address(0))\r\n            features.enableFeatures(FeatureIds.CONVERTER_CONVERSION_WHITELIST, true);\r\n\r\n        maxConversionFee = _maxConversionFee;\r\n\r\n        if (_connectorToken != address(0))\r\n            addConnector(_connectorToken, _connectorWeight, false);\r\n    }\r\n\r\n    // validates a connector token address - verifies that the address belongs to one of the connector tokens\r\n    modifier validConnector(IERC20Token _address) {\r\n        require(connectors[_address].isSet);\r\n        _;\r\n    }\r\n\r\n    // validates a token address - verifies that the address belongs to one of the convertible tokens\r\n    modifier validToken(IERC20Token _address) {\r\n        require(_address == token || connectors[_address].isSet);\r\n        _;\r\n    }\r\n\r\n    // validates maximum conversion fee\r\n    modifier validMaxConversionFee(uint32 _conversionFee) {\r\n        require(_conversionFee >= 0 && _conversionFee <= MAX_CONVERSION_FEE);\r\n        _;\r\n    }\r\n\r\n    // validates conversion fee\r\n    modifier validConversionFee(uint32 _conversionFee) {\r\n        require(_conversionFee >= 0 && _conversionFee <= maxConversionFee);\r\n        _;\r\n    }\r\n\r\n    // validates connector weight range\r\n    modifier validConnectorWeight(uint32 _weight) {\r\n        require(_weight > 0 && _weight <= MAX_WEIGHT);\r\n        _;\r\n    }\r\n\r\n    // validates a conversion path - verifies that the number of elements is odd and that maximum number of 'hops' is 10\r\n    modifier validConversionPath(IERC20Token[] _path) {\r\n        require(_path.length > 2 && _path.length <= (1 + 2 * 10) && _path.length % 2 == 1);\r\n        _;\r\n    }\r\n\r\n    // allows execution only when the total weight is 100%\r\n    modifier maxTotalWeightOnly() {\r\n        require(totalConnectorWeight == MAX_WEIGHT);\r\n        _;\r\n    }\r\n\r\n    // allows execution only when conversions aren't disabled\r\n    modifier conversionsAllowed {\r\n        assert(conversionsEnabled);\r\n        _;\r\n    }\r\n\r\n    // allows execution by the BancorNetwork contract only\r\n    modifier bancorNetworkOnly {\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(registry.addressOf(ContractIds.BANCOR_NETWORK));\r\n        require(msg.sender == address(bancorNetwork));\r\n        _;\r\n    }\r\n\r\n    // allows execution by the converter upgrader contract only\r\n    modifier converterUpgraderOnly {\r\n        address converterUpgrader = registry.addressOf(ContractIds.BANCOR_CONVERTER_UPGRADER);\r\n        require(owner == converterUpgrader);\r\n        _;\r\n    }\r\n\r\n    // allows execution only when claim tokens is enabled\r\n    modifier whenClaimTokensEnabled {\r\n        require(claimTokensEnabled);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev sets the contract registry to whichever address the current registry is pointing to\r\n     */\r\n    function updateRegistry() public {\r\n        // require that upgrading is allowed or that the caller is the owner\r\n        require(allowRegistryUpdate || msg.sender == owner);\r\n\r\n        // get the address of whichever registry the current registry is pointing to\r\n        address newRegistry = registry.addressOf(ContractIds.CONTRACT_REGISTRY);\r\n\r\n        // if the new registry hasn't changed or is the zero address, revert\r\n        require(newRegistry != address(registry) && newRegistry != address(0));\r\n\r\n        // set the previous registry as current registry and current registry as newRegistry\r\n        prevRegistry = registry;\r\n        registry = IContractRegistry(newRegistry);\r\n    }\r\n\r\n    /**\r\n        @dev security mechanism allowing the converter owner to revert to the previous registry,\r\n        to be used in emergency scenario\r\n    */\r\n    function restoreRegistry() public ownerOrManagerOnly {\r\n        // set the registry as previous registry\r\n        registry = prevRegistry;\r\n\r\n        // after a previous registry is restored, only the owner can allow future updates\r\n        allowRegistryUpdate = false;\r\n    }\r\n\r\n    /**\r\n        @dev disables the registry update functionality\r\n        this is a safety mechanism in case of a emergency\r\n        can only be called by the manager or owner\r\n\r\n        @param _disable    true to disable registry updates, false to re-enable them\r\n    */\r\n    function disableRegistryUpdate(bool _disable) public ownerOrManagerOnly {\r\n        allowRegistryUpdate = !_disable;\r\n    }\r\n\r\n    /**\r\n        @dev disables/enables the claim tokens functionality\r\n\r\n        @param _enable    true to enable claiming of tokens, false to disable\r\n     */\r\n    function enableClaimTokens(bool _enable) public ownerOnly {\r\n        claimTokensEnabled = _enable;\r\n    }\r\n\r\n    /**\r\n        @dev returns the number of connector tokens defined\r\n\r\n        @return number of connector tokens\r\n    */\r\n    function connectorTokenCount() public view returns (uint16) {\r\n        return uint16(connectorTokens.length);\r\n    }\r\n\r\n    /**\r\n        @dev allows the owner to update & enable the conversion whitelist contract address\r\n        when set, only addresses that are whitelisted are actually allowed to use the converter\r\n        note that the whitelist check is actually done by the BancorNetwork contract\r\n\r\n        @param _whitelist    address of a whitelist contract\r\n    */\r\n    function setConversionWhitelist(IWhitelist _whitelist)\r\n        public\r\n        ownerOnly\r\n        notThis(_whitelist)\r\n    {\r\n        conversionWhitelist = _whitelist;\r\n    }\r\n\r\n    /**\r\n        @dev disables the entire conversion functionality\r\n        this is a safety mechanism in case of a emergency\r\n        can only be called by the manager\r\n\r\n        @param _disable true to disable conversions, false to re-enable them\r\n    */\r\n    function disableConversions(bool _disable) public ownerOrManagerOnly {\r\n        if (conversionsEnabled == _disable) {\r\n            conversionsEnabled = !_disable;\r\n            emit ConversionsEnable(conversionsEnabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the token ownership\r\n        the new owner needs to accept the transfer\r\n        can only be called by the contract owner\r\n        note that token ownership can only be transferred while the owner is the converter upgrader contract\r\n\r\n        @param _newOwner    new token owner\r\n    */\r\n    function transferTokenOwnership(address _newOwner)\r\n        public\r\n        ownerOnly\r\n        converterUpgraderOnly\r\n    {\r\n        super.transferTokenOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n        @dev updates the current conversion fee\r\n        can only be called by the manager\r\n\r\n        @param _conversionFee new conversion fee, represented in ppm\r\n    */\r\n    function setConversionFee(uint32 _conversionFee)\r\n        public\r\n        ownerOrManagerOnly\r\n        validConversionFee(_conversionFee)\r\n    {\r\n        emit ConversionFeeUpdate(conversionFee, _conversionFee);\r\n        conversionFee = _conversionFee;\r\n    }\r\n\r\n    /**\r\n        @dev given a return amount, returns the amount minus the conversion fee\r\n\r\n        @param _amount      return amount\r\n        @param _magnitude   1 for standard conversion, 2 for cross connector conversion\r\n\r\n        @return return amount minus conversion fee\r\n    */\r\n    function getFinalAmount(uint256 _amount, uint8 _magnitude) public view returns (uint256) {\r\n        return safeMul(_amount, (MAX_CONVERSION_FEE - conversionFee) ** _magnitude) / MAX_CONVERSION_FEE ** _magnitude;\r\n    }\r\n\r\n    /**\r\n        @dev withdraws tokens held by the converter and sends them to an account\r\n        can only be called by the owner\r\n        note that connector tokens can only be withdrawn by the owner while the converter is inactive\r\n        unless the owner is the converter upgrader contract\r\n\r\n        @param _token   ERC20 token contract address\r\n        @param _to      account to receive the new amount\r\n        @param _amount  amount to withdraw\r\n    */\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public {\r\n        address converterUpgrader = registry.addressOf(ContractIds.BANCOR_CONVERTER_UPGRADER);\r\n\r\n        // if the token is not a connector token, allow withdrawal\r\n        // otherwise verify that the converter is inactive or that the owner is the upgrader contract\r\n        require(!connectors[_token].isSet || token.owner() != address(this) || owner == converterUpgrader);\r\n        super.withdrawTokens(_token, _to, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev allows the BancorX contract to claim BNT from any address (so that users\r\n        dont have to first give allowance when calling BancorX)\r\n\r\n        @param _from      address to claim the BNT from\r\n        @param _amount    the amount to claim\r\n     */\r\n    function claimTokens(address _from, uint256 _amount) public whenClaimTokensEnabled {\r\n        address bancorX = registry.addressOf(ContractIds.BANCOR_X);\r\n\r\n        // only the bancorX contract may call this method\r\n        require(msg.sender == bancorX);\r\n\r\n        // destroy the tokens belonging to _from, and issue the same amount to bancorX contract\r\n        token.destroy(_from, _amount);\r\n        token.issue(bancorX, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev upgrades the converter to the latest version\r\n        can only be called by the owner\r\n        note that the owner needs to call acceptOwnership on the new converter after the upgrade\r\n    */\r\n    function upgrade() public ownerOnly {\r\n        IBancorConverterUpgrader converterUpgrader = IBancorConverterUpgrader(registry.addressOf(ContractIds.BANCOR_CONVERTER_UPGRADER));\r\n\r\n        transferOwnership(converterUpgrader);\r\n        converterUpgrader.upgrade(version);\r\n        acceptOwnership();\r\n    }\r\n\r\n    /**\r\n        @dev defines a new connector for the token\r\n        can only be called by the owner while the converter is inactive\r\n\r\n        @param _token                  address of the connector token\r\n        @param _weight                 constant connector weight, represented in ppm, 1-1000000\r\n        @param _enableVirtualBalance   true to enable virtual balance for the connector, false to disable it\r\n    */\r\n    function addConnector(IERC20Token _token, uint32 _weight, bool _enableVirtualBalance)\r\n        public\r\n        ownerOnly\r\n        inactive\r\n        validAddress(_token)\r\n        notThis(_token)\r\n        validConnectorWeight(_weight)\r\n    {\r\n        require(_token != token && !connectors[_token].isSet && totalConnectorWeight + _weight <= MAX_WEIGHT); // validate input\r\n\r\n        connectors[_token].virtualBalance = 0;\r\n        connectors[_token].weight = _weight;\r\n        connectors[_token].isVirtualBalanceEnabled = _enableVirtualBalance;\r\n        connectors[_token].isPurchaseEnabled = true;\r\n        connectors[_token].isSet = true;\r\n        connectorTokens.push(_token);\r\n        totalConnectorWeight += _weight;\r\n    }\r\n\r\n    /**\r\n        @dev updates one of the token connectors\r\n        can only be called by the owner\r\n\r\n        @param _connectorToken         address of the connector token\r\n        @param _weight                 constant connector weight, represented in ppm, 1-1000000\r\n        @param _enableVirtualBalance   true to enable virtual balance for the connector, false to disable it\r\n        @param _virtualBalance         new connector's virtual balance\r\n    */\r\n    function updateConnector(IERC20Token _connectorToken, uint32 _weight, bool _enableVirtualBalance, uint256 _virtualBalance)\r\n        public\r\n        ownerOnly\r\n        validConnector(_connectorToken)\r\n        validConnectorWeight(_weight)\r\n    {\r\n        Connector storage connector = connectors[_connectorToken];\r\n        require(totalConnectorWeight - connector.weight + _weight <= MAX_WEIGHT); // validate input\r\n\r\n        totalConnectorWeight = totalConnectorWeight - connector.weight + _weight;\r\n        connector.weight = _weight;\r\n        connector.isVirtualBalanceEnabled = _enableVirtualBalance;\r\n        connector.virtualBalance = _virtualBalance;\r\n    }\r\n\r\n    /**\r\n        @dev disables purchasing with the given connector token in case the connector token got compromised\r\n        can only be called by the owner\r\n        note that selling is still enabled regardless of this flag and it cannot be disabled by the owner\r\n\r\n        @param _connectorToken  connector token contract address\r\n        @param _disable         true to disable the token, false to re-enable it\r\n    */\r\n    function disableConnectorPurchases(IERC20Token _connectorToken, bool _disable)\r\n        public\r\n        ownerOnly\r\n        validConnector(_connectorToken)\r\n    {\r\n        connectors[_connectorToken].isPurchaseEnabled = !_disable;\r\n    }\r\n\r\n    /**\r\n        @dev returns the connector's virtual balance if one is defined, otherwise returns the actual balance\r\n\r\n        @param _connectorToken  connector token contract address\r\n\r\n        @return connector balance\r\n    */\r\n    function getConnectorBalance(IERC20Token _connectorToken)\r\n        public\r\n        view\r\n        validConnector(_connectorToken)\r\n        returns (uint256)\r\n    {\r\n        Connector storage connector = connectors[_connectorToken];\r\n        return connector.isVirtualBalanceEnabled ? connector.virtualBalance : _connectorToken.balanceOf(this);\r\n    }\r\n\r\n    /**\r\n        @dev returns the expected return for converting a specific amount of _fromToken to _toToken\r\n\r\n        @param _fromToken  ERC20 token to convert from\r\n        @param _toToken    ERC20 token to convert to\r\n        @param _amount     amount to convert, in fromToken\r\n\r\n        @return expected conversion return amount and conversion fee\r\n    */\r\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256, uint256) {\r\n        require(_fromToken != _toToken); // validate input\r\n\r\n        // conversion between the token and one of its connectors\r\n        if (_toToken == token)\r\n            return getPurchaseReturn(_fromToken, _amount);\r\n        else if (_fromToken == token)\r\n            return getSaleReturn(_toToken, _amount);\r\n\r\n        // conversion between 2 connectors\r\n        return getCrossConnectorReturn(_fromToken, _toToken, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev returns the expected return for buying the token for a connector token\r\n\r\n        @param _connectorToken  connector token contract address\r\n        @param _depositAmount   amount to deposit (in the connector token)\r\n\r\n        @return expected purchase return amount and conversion fee\r\n    */\r\n    function getPurchaseReturn(IERC20Token _connectorToken, uint256 _depositAmount)\r\n        public\r\n        view\r\n        active\r\n        validConnector(_connectorToken)\r\n        returns (uint256, uint256)\r\n    {\r\n        Connector storage connector = connectors[_connectorToken];\r\n        require(connector.isPurchaseEnabled); // validate input\r\n\r\n        uint256 tokenSupply = token.totalSupply();\r\n        uint256 connectorBalance = getConnectorBalance(_connectorToken);\r\n        IBancorFormula formula = IBancorFormula(registry.addressOf(ContractIds.BANCOR_FORMULA));\r\n        uint256 amount = formula.calculatePurchaseReturn(tokenSupply, connectorBalance, connector.weight, _depositAmount);\r\n        uint256 finalAmount = getFinalAmount(amount, 1);\r\n\r\n        // return the amount minus the conversion fee and the conversion fee\r\n        return (finalAmount, amount - finalAmount);\r\n    }\r\n\r\n    /**\r\n        @dev returns the expected return for selling the token for one of its connector tokens\r\n\r\n        @param _connectorToken  connector token contract address\r\n        @param _sellAmount      amount to sell (in the smart token)\r\n\r\n        @return expected sale return amount and conversion fee\r\n    */\r\n    function getSaleReturn(IERC20Token _connectorToken, uint256 _sellAmount)\r\n        public\r\n        view\r\n        active\r\n        validConnector(_connectorToken)\r\n        returns (uint256, uint256)\r\n    {\r\n        Connector storage connector = connectors[_connectorToken];\r\n        uint256 tokenSupply = token.totalSupply();\r\n        uint256 connectorBalance = getConnectorBalance(_connectorToken);\r\n        IBancorFormula formula = IBancorFormula(registry.addressOf(ContractIds.BANCOR_FORMULA));\r\n        uint256 amount = formula.calculateSaleReturn(tokenSupply, connectorBalance, connector.weight, _sellAmount);\r\n        uint256 finalAmount = getFinalAmount(amount, 1);\r\n\r\n        // return the amount minus the conversion fee and the conversion fee\r\n        return (finalAmount, amount - finalAmount);\r\n    }\r\n\r\n    /**\r\n        @dev returns the expected return for selling one of the connector tokens for another connector token\r\n\r\n        @param _fromConnectorToken  contract address of the connector token to convert from\r\n        @param _toConnectorToken    contract address of the connector token to convert to\r\n        @param _sellAmount          amount to sell (in the from connector token)\r\n\r\n        @return expected sale return amount and conversion fee (in the to connector token)\r\n    */\r\n    function getCrossConnectorReturn(IERC20Token _fromConnectorToken, IERC20Token _toConnectorToken, uint256 _sellAmount)\r\n        public\r\n        view\r\n        active\r\n        validConnector(_fromConnectorToken)\r\n        validConnector(_toConnectorToken)\r\n        returns (uint256, uint256)\r\n    {\r\n        Connector storage fromConnector = connectors[_fromConnectorToken];\r\n        Connector storage toConnector = connectors[_toConnectorToken];\r\n        require(toConnector.isPurchaseEnabled); // validate input\r\n\r\n        IBancorFormula formula = IBancorFormula(registry.addressOf(ContractIds.BANCOR_FORMULA));\r\n        uint256 amount = formula.calculateCrossConnectorReturn(\r\n            getConnectorBalance(_fromConnectorToken), \r\n            fromConnector.weight, \r\n            getConnectorBalance(_toConnectorToken), \r\n            toConnector.weight, \r\n            _sellAmount);\r\n        uint256 finalAmount = getFinalAmount(amount, 2);\r\n\r\n        // return the amount minus the conversion fee and the conversion fee\r\n        // the fee is higher (magnitude = 2) since cross connector conversion equals 2 conversions (from / to the smart token)\r\n        return (finalAmount, amount - finalAmount);\r\n    }\r\n\r\n    /**\r\n        @dev converts a specific amount of _fromToken to _toToken\r\n\r\n        @param _fromToken  ERC20 token to convert from\r\n        @param _toToken    ERC20 token to convert to\r\n        @param _amount     amount to convert, in fromToken\r\n        @param _minReturn  if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n\r\n        @return conversion return amount\r\n    */\r\n    function convertInternal(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn)\r\n        public\r\n        bancorNetworkOnly\r\n        conversionsAllowed\r\n        greaterThanZero(_minReturn)\r\n        returns (uint256)\r\n    {\r\n        require(_fromToken != _toToken); // validate input\r\n\r\n        // conversion between the token and one of its connectors\r\n        if (_toToken == token)\r\n            return buy(_fromToken, _amount, _minReturn);\r\n        else if (_fromToken == token)\r\n            return sell(_toToken, _amount, _minReturn);\r\n\r\n        uint256 amount;\r\n        uint256 feeAmount;\r\n\r\n        // conversion between 2 connectors\r\n        (amount, feeAmount) = getCrossConnectorReturn(_fromToken, _toToken, _amount);\r\n        // ensure the trade gives something in return and meets the minimum requested amount\r\n        require(amount != 0 && amount >= _minReturn);\r\n\r\n        // update the source token virtual balance if relevant\r\n        Connector storage fromConnector = connectors[_fromToken];\r\n        if (fromConnector.isVirtualBalanceEnabled)\r\n            fromConnector.virtualBalance = safeAdd(fromConnector.virtualBalance, _amount);\r\n\r\n        // update the target token virtual balance if relevant\r\n        Connector storage toConnector = connectors[_toToken];\r\n        if (toConnector.isVirtualBalanceEnabled)\r\n            toConnector.virtualBalance = safeSub(toConnector.virtualBalance, amount);\r\n\r\n        // ensure that the trade won't deplete the connector balance\r\n        uint256 toConnectorBalance = getConnectorBalance(_toToken);\r\n        assert(amount < toConnectorBalance);\r\n\r\n        // transfer funds from the caller in the from connector token\r\n        assert(_fromToken.transferFrom(msg.sender, this, _amount));\r\n        // transfer funds to the caller in the to connector token\r\n        // the transfer might fail if the actual connector balance is smaller than the virtual balance\r\n        assert(_toToken.transfer(msg.sender, amount));\r\n\r\n        // dispatch the conversion event\r\n        // the fee is higher (magnitude = 2) since cross connector conversion equals 2 conversions (from / to the smart token)\r\n        dispatchConversionEvent(_fromToken, _toToken, _amount, amount, feeAmount);\r\n\r\n        // dispatch price data updates for the smart token / both connectors\r\n        emit PriceDataUpdate(_fromToken, token.totalSupply(), getConnectorBalance(_fromToken), fromConnector.weight);\r\n        emit PriceDataUpdate(_toToken, token.totalSupply(), getConnectorBalance(_toToken), toConnector.weight);\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n        @dev converts a specific amount of _fromToken to _toToken\r\n\r\n        @param _fromToken  ERC20 token to convert from\r\n        @param _toToken    ERC20 token to convert to\r\n        @param _amount     amount to convert, in fromToken\r\n        @param _minReturn  if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n\r\n        @return conversion return amount\r\n    */\r\n    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256) {\r\n        convertPath = [_fromToken, token, _toToken];\r\n        return quickConvert(convertPath, _amount, _minReturn);\r\n    }\r\n\r\n    /**\r\n        @dev buys the token by depositing one of its connector tokens\r\n\r\n        @param _connectorToken  connector token contract address\r\n        @param _depositAmount   amount to deposit (in the connector token)\r\n        @param _minReturn       if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n\r\n        @return buy return amount\r\n    */\r\n    function buy(IERC20Token _connectorToken, uint256 _depositAmount, uint256 _minReturn) internal returns (uint256) {\r\n        uint256 amount;\r\n        uint256 feeAmount;\r\n        (amount, feeAmount) = getPurchaseReturn(_connectorToken, _depositAmount);\r\n        // ensure the trade gives something in return and meets the minimum requested amount\r\n        require(amount != 0 && amount >= _minReturn);\r\n\r\n        // update virtual balance if relevant\r\n        Connector storage connector = connectors[_connectorToken];\r\n        if (connector.isVirtualBalanceEnabled)\r\n            connector.virtualBalance = safeAdd(connector.virtualBalance, _depositAmount);\r\n\r\n        // transfer funds from the caller in the connector token\r\n        assert(_connectorToken.transferFrom(msg.sender, this, _depositAmount));\r\n        // issue new funds to the caller in the smart token\r\n        token.issue(msg.sender, amount);\r\n\r\n        // dispatch the conversion event\r\n        dispatchConversionEvent(_connectorToken, token, _depositAmount, amount, feeAmount);\r\n\r\n        // dispatch price data update for the smart token/connector\r\n        emit PriceDataUpdate(_connectorToken, token.totalSupply(), getConnectorBalance(_connectorToken), connector.weight);\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n        @dev sells the token by withdrawing from one of its connector tokens\r\n\r\n        @param _connectorToken  connector token contract address\r\n        @param _sellAmount      amount to sell (in the smart token)\r\n        @param _minReturn       if the conversion results in an amount smaller the minimum return - it is cancelled, must be nonzero\r\n\r\n        @return sell return amount\r\n    */\r\n    function sell(IERC20Token _connectorToken, uint256 _sellAmount, uint256 _minReturn) internal returns (uint256) {\r\n        require(_sellAmount <= token.balanceOf(msg.sender)); // validate input\r\n        uint256 amount;\r\n        uint256 feeAmount;\r\n        (amount, feeAmount) = getSaleReturn(_connectorToken, _sellAmount);\r\n        // ensure the trade gives something in return and meets the minimum requested amount\r\n        require(amount != 0 && amount >= _minReturn);\r\n\r\n        // ensure that the trade will only deplete the connector balance if the total supply is depleted as well\r\n        uint256 tokenSupply = token.totalSupply();\r\n        uint256 connectorBalance = getConnectorBalance(_connectorToken);\r\n        assert(amount < connectorBalance || (amount == connectorBalance && _sellAmount == tokenSupply));\r\n\r\n        // update virtual balance if relevant\r\n        Connector storage connector = connectors[_connectorToken];\r\n        if (connector.isVirtualBalanceEnabled)\r\n            connector.virtualBalance = safeSub(connector.virtualBalance, amount);\r\n\r\n        // destroy _sellAmount from the caller's balance in the smart token\r\n        token.destroy(msg.sender, _sellAmount);\r\n        // transfer funds to the caller in the connector token\r\n        // the transfer might fail if the actual connector balance is smaller than the virtual balance\r\n        assert(_connectorToken.transfer(msg.sender, amount));\r\n\r\n        // dispatch the conversion event\r\n        dispatchConversionEvent(token, _connectorToken, _sellAmount, amount, feeAmount);\r\n\r\n        // dispatch price data update for the smart token/connector\r\n        emit PriceDataUpdate(_connectorToken, token.totalSupply(), getConnectorBalance(_connectorToken), connector.weight);\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n        @dev converts the token to any other token in the bancor network by following a predefined conversion path\r\n        note that when converting from an ERC20 token (as opposed to a smart token), allowance must be set beforehand\r\n\r\n        @param _path        conversion path, see conversion path format in the BancorNetwork contract\r\n        @param _amount      amount to convert from (in the initial source token)\r\n        @param _minReturn   if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n\r\n        @return tokens issued in return\r\n    */\r\n    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn)\r\n        public\r\n        payable\r\n        validConversionPath(_path)\r\n        returns (uint256)\r\n    {\r\n        return quickConvertPrioritized(_path, _amount, _minReturn, 0x0, 0x0, 0x0, 0x0);\r\n    }\r\n\r\n    /**\r\n        @dev converts the token to any other token in the bancor network by following a predefined conversion path\r\n        note that when converting from an ERC20 token (as opposed to a smart token), allowance must be set beforehand\r\n\r\n        @param _path        conversion path, see conversion path format in the BancorNetwork contract\r\n        @param _amount      amount to convert from (in the initial source token)\r\n        @param _minReturn   if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n        @param _block       if the current block exceeded the given parameter - it is cancelled\r\n        @param _v           (signature[128:130]) associated with the signer address and helps validating if the signature is legit\r\n        @param _r           (signature[0:64]) associated with the signer address and helps validating if the signature is legit\r\n        @param _s           (signature[64:128]) associated with the signer address and helps validating if the signature is legit\r\n\r\n        @return tokens issued in return\r\n    */\r\n    function quickConvertPrioritized(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, uint256 _block, uint8 _v, bytes32 _r, bytes32 _s)\r\n        public\r\n        payable\r\n        validConversionPath(_path)\r\n        returns (uint256)\r\n    {\r\n        IERC20Token fromToken = _path[0];\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(registry.addressOf(ContractIds.BANCOR_NETWORK));\r\n\r\n        // we need to transfer the source tokens from the caller to the BancorNetwork contract,\r\n        // so it can execute the conversion on behalf of the caller\r\n        if (msg.value == 0) {\r\n            // not ETH, send the source tokens to the BancorNetwork contract\r\n            // if the token is the smart token, no allowance is required - destroy the tokens\r\n            // from the caller and issue them to the BancorNetwork contract\r\n            if (fromToken == token) {\r\n                token.destroy(msg.sender, _amount); // destroy _amount tokens from the caller's balance in the smart token\r\n                token.issue(bancorNetwork, _amount); // issue _amount new tokens to the BancorNetwork contract\r\n            } else {\r\n                // otherwise, we assume we already have allowance, transfer the tokens directly to the BancorNetwork contract\r\n                assert(fromToken.transferFrom(msg.sender, bancorNetwork, _amount));\r\n            }\r\n        }\r\n\r\n        // execute the conversion and pass on the ETH with the call\r\n        return bancorNetwork.convertForPrioritized2.value(msg.value)(_path, _amount, _minReturn, msg.sender, _block, _v, _r, _s);\r\n    }\r\n\r\n    /**\r\n        @dev buys the token with all connector tokens using the same percentage\r\n        i.e. if the caller increases the supply by 10%, it will cost an amount equal to\r\n        10% of each connector token balance\r\n        can only be called if the max total weight is exactly 100% and while conversions are enabled\r\n\r\n        @param _amount  amount to increase the supply by (in the smart token)\r\n    */\r\n    function fund(uint256 _amount)\r\n        public\r\n        maxTotalWeightOnly\r\n        conversionsAllowed\r\n    {\r\n        uint256 supply = token.totalSupply();\r\n\r\n        // iterate through the connector tokens and transfer a percentage equal to the ratio between _amount\r\n        // and the total supply in each connector from the caller to the converter\r\n        IERC20Token connectorToken;\r\n        uint256 connectorBalance;\r\n        uint256 connectorAmount;\r\n        for (uint16 i = 0; i < connectorTokens.length; i++) {\r\n            connectorToken = connectorTokens[i];\r\n            connectorBalance = getConnectorBalance(connectorToken);\r\n            connectorAmount = safeMul(_amount, connectorBalance) / supply;\r\n\r\n            // update virtual balance if relevant\r\n            Connector storage connector = connectors[connectorToken];\r\n            if (connector.isVirtualBalanceEnabled)\r\n                connector.virtualBalance = safeAdd(connector.virtualBalance, connectorAmount);\r\n\r\n            // transfer funds from the caller in the connector token\r\n            assert(connectorToken.transferFrom(msg.sender, this, connectorAmount));\r\n\r\n            // dispatch price data update for the smart token/connector\r\n            emit PriceDataUpdate(connectorToken, supply + _amount, connectorBalance + connectorAmount, connector.weight);\r\n        }\r\n\r\n        // issue new funds to the caller in the smart token\r\n        token.issue(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev sells the token for all connector tokens using the same percentage\r\n        i.e. if the holder sells 10% of the supply, they will receive 10% of each\r\n        connector token balance in return\r\n        can only be called if the max total weight is exactly 100%\r\n        note that the function can also be called if conversions are disabled\r\n\r\n        @param _amount  amount to liquidate (in the smart token)\r\n    */\r\n    function liquidate(uint256 _amount) public maxTotalWeightOnly {\r\n        uint256 supply = token.totalSupply();\r\n\r\n        // destroy _amount from the caller's balance in the smart token\r\n        token.destroy(msg.sender, _amount);\r\n\r\n        // iterate through the connector tokens and send a percentage equal to the ratio between _amount\r\n        // and the total supply from each connector balance to the caller\r\n        IERC20Token connectorToken;\r\n        uint256 connectorBalance;\r\n        uint256 connectorAmount;\r\n        for (uint16 i = 0; i < connectorTokens.length; i++) {\r\n            connectorToken = connectorTokens[i];\r\n            connectorBalance = getConnectorBalance(connectorToken);\r\n            connectorAmount = safeMul(_amount, connectorBalance) / supply;\r\n\r\n            // update virtual balance if relevant\r\n            Connector storage connector = connectors[connectorToken];\r\n            if (connector.isVirtualBalanceEnabled)\r\n                connector.virtualBalance = safeSub(connector.virtualBalance, connectorAmount);\r\n\r\n            // transfer funds to the caller in the connector token\r\n            // the transfer might fail if the actual connector balance is smaller than the virtual balance\r\n            assert(connectorToken.transfer(msg.sender, connectorAmount));\r\n\r\n            // dispatch price data update for the smart token/connector\r\n            emit PriceDataUpdate(connectorToken, supply - _amount, connectorBalance - connectorAmount, connector.weight);\r\n        }\r\n    }\r\n\r\n    // deprecated, backward compatibility\r\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256) {\r\n        return convertInternal(_fromToken, _toToken, _amount, _minReturn);\r\n    }\r\n\r\n    /**\r\n        @dev helper, dispatches the Conversion event\r\n\r\n        @param _fromToken       ERC20 token to convert from\r\n        @param _toToken         ERC20 token to convert to\r\n        @param _amount          amount purchased/sold (in the source token)\r\n        @param _returnAmount    amount returned (in the target token)\r\n    */\r\n    function dispatchConversionEvent(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _returnAmount, uint256 _feeAmount) private {\r\n        // fee amount is converted to 255 bits -\r\n        // negative amount means the fee is taken from the source token, positive amount means its taken from the target token\r\n        // currently the fee is always taken from the target token\r\n        // since we convert it to a signed number, we first ensure that it's capped at 255 bits to prevent overflow\r\n        assert(_feeAmount <= 2 ** 255);\r\n        emit Conversion(_fromToken, _toToken, msg.sender, _amount, _returnAmount, int256(_feeAmount));\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_CONVERTER_UPGRADER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_connectorToken\",\"type\":\"address\"},{\"name\":\"_weight\",\"type\":\"uint32\"},{\"name\":\"_enableVirtualBalance\",\"type\":\"bool\"},{\"name\":\"_virtualBalance\",\"type\":\"uint256\"}],\"name\":\"updateConnector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"connectors\",\"outputs\":[{\"name\":\"virtualBalance\",\"type\":\"uint256\"},{\"name\":\"weight\",\"type\":\"uint32\"},{\"name\":\"isVirtualBalanceEnabled\",\"type\":\"bool\"},{\"name\":\"isPurchaseEnabled\",\"type\":\"bool\"},{\"name\":\"isSet\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"connectorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRegistryUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"name\":\"_block\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"quickConvertPrioritized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"disableConversions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"convertInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_magnitude\",\"type\":\"uint8\"}],\"name\":\"getFinalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"converterType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_weight\",\"type\":\"uint32\"},{\"name\":\"_enableVirtualBalance\",\"type\":\"bool\"}],\"name\":\"addConnector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setConversionWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_connectorToken\",\"type\":\"address\"},{\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"disableConnectorPurchases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_CONVERTER_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"change\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT_CONVERTER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_FORMULA\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"connectorTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_connectorToken\",\"type\":\"address\"},{\"name\":\"_sellAmount\",\"type\":\"uint256\"}],\"name\":\"getSaleReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromToken\",\"type\":\"address\"},{\"name\":\"_toToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FEATURES\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"disableTokenTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimTokensEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fromConnectorToken\",\"type\":\"address\"},{\"name\":\"_toConnectorToken\",\"type\":\"address\"},{\"name\":\"_sellAmount\",\"type\":\"uint256\"}],\"name\":\"getCrossConnectorReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_NETWORK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_GAS_PRICE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVERTER_CONVERSION_WHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxConversionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_connectorToken\",\"type\":\"address\"},{\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"getPurchaseReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableClaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_X\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptManagement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_connectorToken\",\"type\":\"address\"}],\"name\":\"getConnectorBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conversionFee\",\"type\":\"uint32\"}],\"name\":\"setConversionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"quickConvert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"disableRegistryUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_maxConversionFee\",\"type\":\"uint32\"},{\"name\":\"_connectorToken\",\"type\":\"address\"},{\"name\":\"_connectorWeight\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_toToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_trader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_return\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_conversionFee\",\"type\":\"int256\"}],\"name\":\"Conversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_connectorToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_connectorBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_connectorWeight\",\"type\":\"uint32\"}],\"name\":\"PriceDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevFee\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_newFee\",\"type\":\"uint32\"}],\"name\":\"ConversionFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_conversionsEnabled\",\"type\":\"bool\"}],\"name\":\"ConversionsEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"ManagerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]", "ContractName": "BancorConverter", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b7813b63600909e3a1df6dacf3bda76bd1c7d7bc00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd400000000000000000000000000000000000000000000000000000000000027100000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c00000000000000000000000000000000000000000000000000000000000186a0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8adda2e9e204d9435c93c8e584b431ded1f8b39a256b071340f8827eb179f9c9"}