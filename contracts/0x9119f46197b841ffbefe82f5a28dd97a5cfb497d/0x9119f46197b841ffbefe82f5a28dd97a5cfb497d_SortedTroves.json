{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/CheckContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\ncontract CheckContract {\\r\\n    /**\\r\\n     * Check that the account is an already deployed non-destroyed contract.\\r\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\r\\n     */\\r\\n    function checkContract(address _account) internal view {\\r\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(_account) }\\r\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/IERC2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change one's\\r\\n * {IERC20-allowance} without having to send a transaction, by signing a\\r\\n * message. This allows users to spend tokens without having to hold Ether.\\r\\n *\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\r\\n * \\r\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\r\\n */\\r\\ninterface IERC2612 {\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\r\\n     * given `owner`'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(address owner, address spender, uint256 amount, \\r\\n                    uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     *\\r\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to \\r\\n     * a value in the near future. The deadline argument can be set to uint(-1) to \\r\\n     * create Permits that effectively never expire.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n    \\r\\n    function version() external view returns (string memory);\\r\\n    function permitTypeHash() external view returns (bytes32);\\r\\n    function domainSeparator() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * Based on OpenZeppelin's Ownable contract:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n *\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     *\\r\\n     * NOTE: This function is not safe, as it doesn\u2019t check owner is calling it.\\r\\n     * Make sure you check it before calling it.\\r\\n     */\\r\\n    function _renounceOwnership() internal {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IBorrowerOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// Common interface for the Trove Manager.\\r\\ninterface IBorrowerOperations {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\r\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\r\\n    event PriceFeedAddressChanged(address  _newPriceFeedAddress);\\r\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\r\\n    event THUSDTokenAddressChanged(address _thusdTokenAddress);\\r\\n    event PCVAddressChanged(address _pcvAddress);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n\\r\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\r\\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, uint8 operation);\\r\\n    event THUSDBorrowingFeePaid(address indexed _borrower, uint256 _THUSDFee);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function setAddresses(\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _defaultPoolAddress,\\r\\n        address _stabilityPoolAddress,\\r\\n        address _gasPoolAddress,\\r\\n        address _collSurplusPoolAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _pcvAddress,\\r\\n        address _collateralAddress\\r\\n\\r\\n    ) external;\\r\\n\\r\\n    function openTrove(uint256 _maxFee, uint256 _THUSDAmount, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable;\\r\\n\\r\\n    function addColl(uint256 _assetAmount, address _upperHint, address _lowerHint) external payable;\\r\\n\\r\\n    function moveCollateralGainToTrove(address _user, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable;\\r\\n\\r\\n    function withdrawColl(uint256 _amount, address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    function withdrawTHUSD(uint256 _maxFee, uint256 _amount, address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    function repayTHUSD(uint256 _amount, address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    function closeTrove() external;\\r\\n\\r\\n    function adjustTrove(uint256 _maxFee, uint256 _collWithdrawal, uint256 _debtChange, bool isDebtIncrease, uint256 _assetAmount, address _upperHint, address _lowerHint) external payable;\\r\\n\\r\\n    function claimCollateral() external;\\r\\n\\r\\n    function getCompositeDebt(uint256 _debt) external pure returns (uint);\\r\\n\\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ILiquityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./IPriceFeed.sol\\\";\\r\\n\\r\\n\\r\\ninterface ILiquityBase {\\r\\n    function priceFeed() external view returns (IPriceFeed);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPCV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./ITHUSDToken.sol\\\";\\r\\n\\r\\ninterface IPCV {\\r\\n\\r\\n    // --- Events --\\r\\n    event THUSDTokenAddressSet(address _thusdTokenAddress);\\r\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\r\\n    event CollateralAddressSet(address _collateralAddress);\\r\\n    event BAMMAddressSet(address _bammAddress);\\r\\n    event RolesSet(address _council, address _treasury);\\r\\n\\r\\n    event BAMMDeposit(uint256 _thusdAmount);\\r\\n    event BAMMWithdraw(uint256 _numShares);\\r\\n    event THUSDWithdraw(address _recipient, uint256 _thusdAmount);\\r\\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\\r\\n\\r\\n    event PCVDebtPaid(uint256 _paidDebt);\\r\\n    \\r\\n    event RecipientAdded(address _recipient);\\r\\n    event RecipientRemoved(address _recipient);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function debtToPay() external returns(uint256);\\r\\n    function payDebt(uint256 _thusdToBurn) external;\\r\\n\\r\\n    function setAddresses(\\r\\n        address _thusdTokenAddress, \\r\\n        address _borrowerOperations, \\r\\n        address payable _bammAddress,\\r\\n        address _collateralERC20\\r\\n    ) external;\\r\\n    function initialize() external;\\r\\n\\r\\n    function depositToBAMM(uint256 _thusdAmount) external;\\r\\n    function withdrawFromBAMM(uint256 _numShares) external;\\r\\n    function withdrawTHUSD(address _recipient, uint256 _thusdAmount) external;\\r\\n    function withdrawCollateral(address _recipient, uint256 _collateralAmount) external;\\r\\n\\r\\n    function addRecipientToWhitelist(address _recipient) external;\\r\\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\\r\\n    function removeRecipientFromWhitelist(address _recipient) external;\\r\\n    function removeRecipientsFromWhitelist(address[] calldata _recipients) external;\\r\\n\\r\\n    function startChangingRoles(address _council, address _treasury) external;\\r\\n    function cancelChangingRoles() external;\\r\\n    function finalizeChangingRoles() external;\\r\\n    \\r\\n    function collateralERC20() external view returns(IERC20);\\r\\n    function thusdToken() external view returns(ITHUSDToken);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n\\r\\n    // --- Events ---\\r\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\r\\n   \\r\\n    // --- Function ---\\r\\n    function fetchPrice() external returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ISortedTroves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// Common interface for the SortedTroves Doubly Linked List.\\r\\ninterface ISortedTroves {\\r\\n\\r\\n    // --- Events ---\\r\\n    \\r\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\r\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\r\\n    event NodeAdded(address _id, uint256 _NICR);\\r\\n    event NodeRemoved(address _id);\\r\\n\\r\\n    // --- Functions ---\\r\\n    \\r\\n    function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;\\r\\n\\r\\n    function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;\\r\\n\\r\\n    function remove(address _id) external;\\r\\n\\r\\n    function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;\\r\\n\\r\\n    function contains(address _id) external view returns (bool);\\r\\n\\r\\n    function isFull() external view returns (bool);\\r\\n\\r\\n    function isEmpty() external view returns (bool);\\r\\n\\r\\n    function getSize() external view returns (uint256);\\r\\n\\r\\n    function getMaxSize() external view returns (uint256);\\r\\n\\r\\n    function getFirst() external view returns (address);\\r\\n\\r\\n    function getLast() external view returns (address);\\r\\n\\r\\n    function getNext(address _id) external view returns (address);\\r\\n\\r\\n    function getPrev(address _id) external view returns (address);\\r\\n\\r\\n    function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);\\r\\n\\r\\n    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IStabilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/*\\r\\n * The Stability Pool holds THUSD tokens deposited by Stability Pool depositors.\\r\\n *\\r\\n * When a trove is liquidated, then depending on system conditions, some of its THUSD debt gets offset with\\r\\n * THUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of THUSD tokens in the Stability Pool is burned.\\r\\n *\\r\\n * Thus, a liquidation causes each depositor to receive a THUSD loss, in proportion to their deposit as a share of total deposits.\\r\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors,\\r\\n * in the same proportion.\\r\\n *\\r\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\r\\n * of the total THUSD in the Stability Pool, depletes 40% of each deposit.\\r\\n *\\r\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\r\\n * multiplying it by some factor in range ]0,1[\\r\\n *\\r\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\r\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\r\\n *\\r\\n */\\r\\ninterface IStabilityPool {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\r\\n    event StabilityPoolTHUSDBalanceUpdated(uint256 _newBalance);\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\r\\n    event THUSDTokenAddressChanged(address _newTHUSDTokenAddress);\\r\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n\\r\\n    event P_Updated(uint256 _P);\\r\\n    event S_Updated(uint256 _S, uint128 _epoch, uint128 _scale);\\r\\n    event EpochUpdated(uint128 _currentEpoch);\\r\\n    event ScaleUpdated(uint128 _currentScale);\\r\\n\\r\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _S);\\r\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\r\\n\\r\\n    event CollateralGainWithdrawn(address indexed _depositor, uint256 _collateral, uint256 _THUSDLoss);\\r\\n    event CollateralSent(address _to, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /*\\r\\n     * Called only once on init, to set addresses of other Liquity contracts\\r\\n     * Callable only by owner, renounces ownership at the end\\r\\n     */\\r\\n    function setAddresses(\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _collateralAddress\\r\\n    ) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - _amount is not zero\\r\\n     * ---\\r\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\r\\n     */\\r\\n    function provideToSP(uint256 _amount) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - _amount is zero or there are no under collateralized troves left in the system\\r\\n     * - User has a non zero deposit\\r\\n     * ---\\r\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\r\\n     * - Decreases deposit stake, and takes new snapshot.\\r\\n     *\\r\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\r\\n     */\\r\\n    function withdrawFromSP(uint256 _amount) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - User has a non zero deposit\\r\\n     * - User has an open trove\\r\\n     * - User has some collateral gain\\r\\n     * ---\\r\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\r\\n     * - Leaves their compounded deposit in the Stability Pool\\r\\n     * - Updates snapshots for deposit\\r\\n     */\\r\\n    function withdrawCollateralGainToTrove(address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - Caller is TroveManager\\r\\n     * ---\\r\\n     * Cancels out the specified debt against the THUSD contained in the Stability Pool (as far as possible)\\r\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\r\\n     * Only called by liquidation functions in the TroveManager.\\r\\n     */\\r\\n    function offset(uint256 _debt, uint256 _coll) external;\\r\\n\\r\\n    /*\\r\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\r\\n     * to exclude edge cases like collateral received from a self-destruct.\\r\\n     */\\r\\n    function getCollateralBalance() external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Returns THUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\r\\n     */\\r\\n    function getTotalTHUSDDeposits() external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\r\\n     */\\r\\n    function getDepositorCollateralGain(address _depositor) external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Return the user's compounded deposit.\\r\\n     */\\r\\n    function getCompoundedTHUSDDeposit(address _depositor) external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Only callable by Active Pool, updates ERC20 tokens recieved\\r\\n     */\\r\\n    function updateCollateralBalance(uint256 _amount) external;\\r\\n    /*\\r\\n     * Fallback function\\r\\n     * Only callable by Active Pool, it just accounts for ETH received\\r\\n     * receive() external payable;\\r\\n     */\\r\\n    \\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITHUSDToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\r\\n\\r\\ninterface ITHUSDToken is IERC20Metadata, IERC2612 {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\r\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\r\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\r\\n\\r\\n    event THUSDTokenBalanceUpdated(address _user, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function mintList(address contractAddress) external view returns (bool);\\r\\n    function burnList(address contractAddress) external view returns (bool);\\r\\n\\r\\n    function mint(address _account, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external;\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITroveManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./ILiquityBase.sol\\\";\\r\\nimport \\\"./IStabilityPool.sol\\\";\\r\\nimport \\\"./ITHUSDToken.sol\\\";\\r\\nimport \\\"./IPCV.sol\\\";\\r\\n\\r\\n\\r\\n// Common interface for the Trove Manager.\\r\\ninterface ITroveManager is ILiquityBase {\\r\\n\\r\\n    enum Status {\\r\\n        nonExistent,\\r\\n        active,\\r\\n        closedByOwner,\\r\\n        closedByLiquidation,\\r\\n        closedByRedemption\\r\\n    }\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event THUSDTokenAddressChanged(address _newTHUSDTokenAddress);\\r\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\r\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\r\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\r\\n    event PCVAddressChanged(address _pcvAddress);\\r\\n\\r\\n    event Liquidation(uint256 _liquidatedDebt, uint256 _liquidatedColl, uint256 _collGasCompensation, uint256 _THUSDGasCompensation);\\r\\n    event Redemption(uint256 _attemptedTHUSDAmount, uint256 _actualTHUSDAmount, uint256 _collateralSent, uint256 _collateralFee);\\r\\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, uint8 operation);\\r\\n    event TroveLiquidated(address indexed _borrower, uint256 _debt, uint256 _coll, uint8 operation);\\r\\n    event BaseRateUpdated(uint256 _baseRate);\\r\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\r\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\r\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\r\\n    event LTermsUpdated(uint256 _L_Collateral, uint256 _L_THUSDDebt);\\r\\n    event TroveSnapshotsUpdated(uint256 _L_Collateral, uint256 _L_THUSDDebt);\\r\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function setAddresses(\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _defaultPoolAddress,\\r\\n        address _stabilityPoolAddress,\\r\\n        address _gasPoolAddress,\\r\\n        address _collSurplusPoolAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _pcvAddress\\r\\n    ) external;\\r\\n\\r\\n    function stabilityPool() external view returns (IStabilityPool);\\r\\n    function thusdToken() external view returns (ITHUSDToken);\\r\\n    function pcv() external view returns (IPCV);\\r\\n\\r\\n    function getTroveOwnersCount() external view returns (uint);\\r\\n\\r\\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\r\\n\\r\\n    function getNominalICR(address _borrower) external view returns (uint);\\r\\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint);\\r\\n\\r\\n    function liquidate(address _borrower) external;\\r\\n\\r\\n    function liquidateTroves(uint256 _n) external;\\r\\n\\r\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\r\\n\\r\\n    function redeemCollateral(\\r\\n        uint256 _THUSDAmount,\\r\\n        address _firstRedemptionHint,\\r\\n        address _upperPartialRedemptionHint,\\r\\n        address _lowerPartialRedemptionHint,\\r\\n        uint256 _partialRedemptionHintNICR,\\r\\n        uint256 _maxIterations,\\r\\n        uint256 _maxFee\\r\\n    ) external;\\r\\n\\r\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint);\\r\\n\\r\\n    function updateTroveRewardSnapshots(address _borrower) external;\\r\\n\\r\\n    function addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\r\\n\\r\\n    function applyPendingRewards(address _borrower) external;\\r\\n\\r\\n    function getPendingCollateralReward(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getPendingTHUSDDebtReward(address _borrower) external view returns (uint);\\r\\n\\r\\n     function hasPendingRewards(address _borrower) external view returns (bool);\\r\\n\\r\\n    function getEntireDebtAndColl(address _borrower) external view returns (\\r\\n        uint256 debt,\\r\\n        uint256 coll,\\r\\n        uint256 pendingTHUSDDebtReward,\\r\\n        uint256 pendingCollateralReward\\r\\n    );\\r\\n\\r\\n    function closeTrove(address _borrower) external;\\r\\n\\r\\n    function removeStake(address _borrower) external;\\r\\n\\r\\n    function getRedemptionRate() external view returns (uint);\\r\\n    function getRedemptionRateWithDecay() external view returns (uint);\\r\\n\\r\\n    function getRedemptionFeeWithDecay(uint256 _collateralDrawn) external view returns (uint);\\r\\n\\r\\n    function getBorrowingRate() external view returns (uint);\\r\\n    function getBorrowingRateWithDecay() external view returns (uint);\\r\\n\\r\\n    function getBorrowingFee(uint256 THUSDDebt) external view returns (uint);\\r\\n    function getBorrowingFeeWithDecay(uint256 _THUSDDebt) external view returns (uint);\\r\\n\\r\\n    function decayBaseRateFromBorrowing() external;\\r\\n\\r\\n    function getTroveStatus(address _borrower) external view returns (Status);\\r\\n\\r\\n    function getTroveStake(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getTroveDebt(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getTroveColl(address _borrower) external view returns (uint);\\r\\n\\r\\n    function setTroveStatus(address _borrower, Status _status) external;\\r\\n\\r\\n    function increaseTroveColl(address _borrower, uint256 _collIncrease) external returns (uint);\\r\\n\\r\\n    function decreaseTroveColl(address _borrower, uint256 _collDecrease) external returns (uint);\\r\\n\\r\\n    function increaseTroveDebt(address _borrower, uint256 _debtIncrease) external returns (uint);\\r\\n\\r\\n    function decreaseTroveDebt(address _borrower, uint256 _collDecrease) external returns (uint);\\r\\n\\r\\n    function getTCR(uint256 _price) external view returns (uint);\\r\\n\\r\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SortedTroves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\r\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\r\\nimport \\\"./Interfaces/IBorrowerOperations.sol\\\";\\r\\nimport \\\"./Dependencies/Ownable.sol\\\";\\r\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\r\\n\\r\\n/*\\r\\n* A sorted doubly linked list with nodes sorted in descending order.\\r\\n*\\r\\n* Nodes map to active Troves in the system - the ID property is the address of a Trove owner.\\r\\n* Nodes are ordered according to their current nominal individual collateral ratio (NICR),\\r\\n* which is like the ICR but without the price, i.e., just collateral / debt.\\r\\n*\\r\\n* The list optionally accepts insert position hints.\\r\\n*\\r\\n* NICRs are computed dynamically at runtime, and not stored on the Node. This is because NICRs of active Troves\\r\\n* change dynamically as liquidation events occur.\\r\\n*\\r\\n* The list relies on the fact that liquidation events preserve ordering: a liquidation decreases the NICRs of all active Troves,\\r\\n* but maintains their order. A node inserted based on current NICR will maintain the correct position,\\r\\n* relative to it's peers, as rewards accumulate, as long as it's raw collateral and debt have not changed.\\r\\n* Thus, Nodes remain sorted by current NICR.\\r\\n*\\r\\n* Nodes need only be re-inserted upon a Trove operation - when the owner adds or removes collateral or debt\\r\\n* to their position.\\r\\n*\\r\\n* The list is a modification of the following audited SortedDoublyLinkedList:\\r\\n* https://github.com/livepeer/protocol/blob/master/contracts/libraries/SortedDoublyLL.sol\\r\\n*\\r\\n*\\r\\n* Changes made in the Liquity implementation:\\r\\n*\\r\\n* - Keys have been removed from nodes\\r\\n*\\r\\n* - Ordering checks for insertion are performed by comparing an NICR argument to the current NICR, calculated at runtime.\\r\\n*   The list relies on the property that ordering by ICR is maintained as the collateral:USD price varies.\\r\\n*\\r\\n* - Public functions with parameters have been made internal to save gas, and given an external wrapper function for external access\\r\\n*/\\r\\ncontract SortedTroves is Ownable, CheckContract, ISortedTroves {\\r\\n\\r\\n    string constant public NAME = \\\"SortedTroves\\\";\\r\\n\\r\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\r\\n\\r\\n    address public borrowerOperationsAddress;\\r\\n\\r\\n    ITroveManager public troveManager;\\r\\n\\r\\n    // Information for a node in the list\\r\\n    struct Node {\\r\\n        bool exists;\\r\\n        address nextId;                  // Id of next node (smaller NICR) in the list\\r\\n        address prevId;                  // Id of previous node (larger NICR) in the list\\r\\n    }\\r\\n\\r\\n    // Information for the list\\r\\n    struct Data {\\r\\n        address head;                        // Head of the list. Also the node in the list with the largest NICR\\r\\n        address tail;                        // Tail of the list. Also the node in the list with the smallest NICR\\r\\n        uint256 maxSize;                     // Maximum size of the list\\r\\n        uint256 size;                        // Current size of the list\\r\\n        mapping (address => Node) nodes;     // Track the corresponding ids for each node in the list\\r\\n    }\\r\\n\\r\\n    Data public data;\\r\\n\\r\\n    // --- Dependency setters ---\\r\\n\\r\\n    function setParams(uint256 _size, address _troveManagerAddress, address _borrowerOperationsAddress) external override onlyOwner {\\r\\n        require(_size > 0, \\\"SortedTroves: Size cant be zero\\\");\\r\\n        checkContract(_troveManagerAddress);\\r\\n        checkContract(_borrowerOperationsAddress);\\r\\n\\r\\n        data.maxSize = _size;\\r\\n\\r\\n        troveManager = ITroveManager(_troveManagerAddress);\\r\\n        borrowerOperationsAddress = _borrowerOperationsAddress;\\r\\n\\r\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\r\\n        emit BorrowerOperationsAddressChanged(_borrowerOperationsAddress);\\r\\n\\r\\n        _renounceOwnership();\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Add a node to the list\\r\\n     * @param _id Node's id\\r\\n     * @param _NICR Node's NICR\\r\\n     * @param _prevId Id of previous node for the insert position\\r\\n     * @param _nextId Id of next node for the insert position\\r\\n     */\\r\\n\\r\\n    function insert (address _id, uint256 _NICR, address _prevId, address _nextId) external override {\\r\\n        ITroveManager troveManagerCached = troveManager;\\r\\n\\r\\n        _requireCallerIsBOorTroveM(troveManagerCached);\\r\\n        _insert(troveManagerCached, _id, _NICR, _prevId, _nextId);\\r\\n    }\\r\\n\\r\\n    function _insert(ITroveManager _troveManager, address _id, uint256 _NICR, address _prevId, address _nextId) internal {\\r\\n        // List must not be full\\r\\n        require(!isFull(), \\\"SortedTroves: List is full\\\");\\r\\n        // List must not already contain node\\r\\n        require(!contains(_id), \\\"SortedTroves: List already contains the node\\\");\\r\\n        // Node id must not be null\\r\\n        require(_id != address(0), \\\"SortedTroves: Id cannot be zero\\\");\\r\\n        // NICR must be non-zero\\r\\n        require(_NICR > 0, \\\"SortedTroves: NICR must be positive\\\");\\r\\n\\r\\n        address prevId = _prevId;\\r\\n        address nextId = _nextId;\\r\\n\\r\\n        if (!_validInsertPosition(_troveManager, _NICR, prevId, nextId)) {\\r\\n            // Sender's hint was not a valid insert position\\r\\n            // Use sender's hint to find a valid insert position\\r\\n            (prevId, nextId) = _findInsertPosition(_troveManager, _NICR, prevId, nextId);\\r\\n        }\\r\\n\\r\\n         data.nodes[_id].exists = true;\\r\\n\\r\\n        if (prevId == address(0) && nextId == address(0)) {\\r\\n            // Insert as head and tail\\r\\n            data.head = _id;\\r\\n            data.tail = _id;\\r\\n        } else if (prevId == address(0)) {\\r\\n            // Insert before `prevId` as the head\\r\\n            data.nodes[_id].nextId = data.head;\\r\\n            data.nodes[data.head].prevId = _id;\\r\\n            data.head = _id;\\r\\n        } else if (nextId == address(0)) {\\r\\n            // Insert after `nextId` as the tail\\r\\n            data.nodes[_id].prevId = data.tail;\\r\\n            data.nodes[data.tail].nextId = _id;\\r\\n            data.tail = _id;\\r\\n        } else {\\r\\n            // Insert at insert position between `prevId` and `nextId`\\r\\n            data.nodes[_id].nextId = nextId;\\r\\n            data.nodes[_id].prevId = prevId;\\r\\n            data.nodes[prevId].nextId = _id;\\r\\n            data.nodes[nextId].prevId = _id;\\r\\n        }\\r\\n\\r\\n        data.size += 1;\\r\\n        emit NodeAdded(_id, _NICR);\\r\\n    }\\r\\n\\r\\n    function remove(address _id) external override {\\r\\n        _requireCallerIsTroveManager();\\r\\n        _remove(_id);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Remove a node from the list\\r\\n     * @param _id Node's id\\r\\n     */\\r\\n    function _remove(address _id) internal {\\r\\n        // List must contain the node\\r\\n        require(contains(_id), \\\"SortedTroves: List does not contain the id\\\");\\r\\n\\r\\n        if (data.size > 1) {\\r\\n            // List contains more than a single node\\r\\n            if (_id == data.head) {\\r\\n                // The removed node is the head\\r\\n                // Set head to next node\\r\\n                data.head = data.nodes[_id].nextId;\\r\\n                // Set prev pointer of new head to null\\r\\n                data.nodes[data.head].prevId = address(0);\\r\\n            } else if (_id == data.tail) {\\r\\n                // The removed node is the tail\\r\\n                // Set tail to previous node\\r\\n                data.tail = data.nodes[_id].prevId;\\r\\n                // Set next pointer of new tail to null\\r\\n                data.nodes[data.tail].nextId = address(0);\\r\\n            } else {\\r\\n                // The removed node is neither the head nor the tail\\r\\n                // Set next pointer of previous node to the next node\\r\\n                data.nodes[data.nodes[_id].prevId].nextId = data.nodes[_id].nextId;\\r\\n                // Set prev pointer of next node to the previous node\\r\\n                data.nodes[data.nodes[_id].nextId].prevId = data.nodes[_id].prevId;\\r\\n            }\\r\\n        } else {\\r\\n            // List contains a single node\\r\\n            // Set the head and tail to null\\r\\n            data.head = address(0);\\r\\n            data.tail = address(0);\\r\\n        }\\r\\n\\r\\n        delete data.nodes[_id];\\r\\n        data.size -= 1;\\r\\n        emit NodeRemoved(_id);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Re-insert the node at a new position, based on its new NICR\\r\\n     * @param _id Node's id\\r\\n     * @param _newNICR Node's new NICR\\r\\n     * @param _prevId Id of previous node for the new insert position\\r\\n     * @param _nextId Id of next node for the new insert position\\r\\n     */\\r\\n    function reInsert(address _id, uint256 _newNICR, address _prevId, address _nextId) external override {\\r\\n        ITroveManager troveManagerCached = troveManager;\\r\\n\\r\\n        _requireCallerIsBOorTroveM(troveManagerCached);\\r\\n        // List must contain the node\\r\\n        require(contains(_id), \\\"SortedTroves: List does not contain the id\\\");\\r\\n        // NICR must be non-zero\\r\\n        require(_newNICR > 0, \\\"SortedTroves: NICR must be positive\\\");\\r\\n\\r\\n        // Remove node from the list\\r\\n        _remove(_id);\\r\\n\\r\\n        _insert(troveManagerCached, _id, _newNICR, _prevId, _nextId);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Checks if the list contains a node\\r\\n     */\\r\\n    function contains(address _id) public view override returns (bool) {\\r\\n        return data.nodes[_id].exists;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Checks if the list is full\\r\\n     */\\r\\n    function isFull() public view override returns (bool) {\\r\\n        return data.size == data.maxSize;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Checks if the list is empty\\r\\n     */\\r\\n    function isEmpty() public view override returns (bool) {\\r\\n        return data.size == 0;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the current size of the list\\r\\n     */\\r\\n    function getSize() external view override returns (uint256) {\\r\\n        return data.size;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the maximum size of the list\\r\\n     */\\r\\n    function getMaxSize() external view override returns (uint256) {\\r\\n        return data.maxSize;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the first node in the list (node with the largest NICR)\\r\\n     */\\r\\n    function getFirst() external view override returns (address) {\\r\\n        return data.head;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the last node in the list (node with the smallest NICR)\\r\\n     */\\r\\n    function getLast() external view override returns (address) {\\r\\n        return data.tail;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the next node (with a smaller NICR) in the list for a given node\\r\\n     * @param _id Node's id\\r\\n     */\\r\\n    function getNext(address _id) external view override returns (address) {\\r\\n        return data.nodes[_id].nextId;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the previous node (with a larger NICR) in the list for a given node\\r\\n     * @param _id Node's id\\r\\n     */\\r\\n    function getPrev(address _id) external view override returns (address) {\\r\\n        return data.nodes[_id].prevId;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Check if a pair of nodes is a valid insertion point for a new node with the given NICR\\r\\n     * @param _NICR Node's NICR\\r\\n     * @param _prevId Id of previous node for the insert position\\r\\n     * @param _nextId Id of next node for the insert position\\r\\n     */\\r\\n    function validInsertPosition(uint256 _NICR, address _prevId, address _nextId) external view override returns (bool) {\\r\\n        return _validInsertPosition(troveManager, _NICR, _prevId, _nextId);\\r\\n    }\\r\\n\\r\\n    function _validInsertPosition(ITroveManager _troveManager, uint256 _NICR, address _prevId, address _nextId) internal view returns (bool) {\\r\\n        if (_prevId == address(0) && _nextId == address(0)) {\\r\\n            // `(null, null)` is a valid insert position if the list is empty\\r\\n            return isEmpty();\\r\\n        } else if (_prevId == address(0)) {\\r\\n            // `(null, _nextId)` is a valid insert position if `_nextId` is the head of the list\\r\\n            return data.head == _nextId && _NICR >= _troveManager.getNominalICR(_nextId);\\r\\n        } else if (_nextId == address(0)) {\\r\\n            // `(_prevId, null)` is a valid insert position if `_prevId` is the tail of the list\\r\\n            return data.tail == _prevId && _NICR <= _troveManager.getNominalICR(_prevId);\\r\\n        } else {\\r\\n            // `(_prevId, _nextId)` is a valid insert position if they are adjacent nodes and `_NICR` falls between the two nodes' NICRs\\r\\n            return data.nodes[_prevId].nextId == _nextId &&\\r\\n                   _troveManager.getNominalICR(_prevId) >= _NICR &&\\r\\n                   _NICR >= _troveManager.getNominalICR(_nextId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Descend the list (larger NICRs to smaller NICRs) to find a valid insert position\\r\\n     * @param _troveManager TroveManager contract, passed in as param to save SLOAD\u2019s\\r\\n     * @param _NICR Node's NICR\\r\\n     * @param _startId Id of node to start descending the list from\\r\\n     */\\r\\n    function _descendList(ITroveManager _troveManager, uint256 _NICR, address _startId) internal view returns (address, address) {\\r\\n        // If `_startId` is the head, check if the insert position is before the head\\r\\n        if (data.head == _startId && _NICR >= _troveManager.getNominalICR(_startId)) {\\r\\n            return (address(0), _startId);\\r\\n        }\\r\\n\\r\\n        address prevId = _startId;\\r\\n        address nextId = data.nodes[prevId].nextId;\\r\\n\\r\\n        // Descend the list until we reach the end or until we find a valid insert position\\r\\n        while (prevId != address(0) && !_validInsertPosition(_troveManager, _NICR, prevId, nextId)) {\\r\\n            prevId = data.nodes[prevId].nextId;\\r\\n            nextId = data.nodes[prevId].nextId;\\r\\n        }\\r\\n\\r\\n        return (prevId, nextId);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Ascend the list (smaller NICRs to larger NICRs) to find a valid insert position\\r\\n     * @param _troveManager TroveManager contract, passed in as param to save SLOAD\u2019s\\r\\n     * @param _NICR Node's NICR\\r\\n     * @param _startId Id of node to start ascending the list from\\r\\n     */\\r\\n    function _ascendList(ITroveManager _troveManager, uint256 _NICR, address _startId) internal view returns (address, address) {\\r\\n        // If `_startId` is the tail, check if the insert position is after the tail\\r\\n        if (data.tail == _startId && _NICR <= _troveManager.getNominalICR(_startId)) {\\r\\n            return (_startId, address(0));\\r\\n        }\\r\\n\\r\\n        address nextId = _startId;\\r\\n        address prevId = data.nodes[nextId].prevId;\\r\\n\\r\\n        // Ascend the list until we reach the end or until we find a valid insertion point\\r\\n        while (nextId != address(0) && !_validInsertPosition(_troveManager, _NICR, prevId, nextId)) {\\r\\n            nextId = data.nodes[nextId].prevId;\\r\\n            prevId = data.nodes[nextId].prevId;\\r\\n        }\\r\\n\\r\\n        return (prevId, nextId);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Find the insert position for a new node with the given NICR\\r\\n     * @param _NICR Node's NICR\\r\\n     * @param _prevId Id of previous node for the insert position\\r\\n     * @param _nextId Id of next node for the insert position\\r\\n     */\\r\\n    function findInsertPosition(uint256 _NICR, address _prevId, address _nextId) external view override returns (address, address) {\\r\\n        return _findInsertPosition(troveManager, _NICR, _prevId, _nextId);\\r\\n    }\\r\\n\\r\\n    function _findInsertPosition(ITroveManager _troveManager, uint256 _NICR, address _prevId, address _nextId) internal view returns (address, address) {\\r\\n        address prevId = _prevId;\\r\\n        address nextId = _nextId;\\r\\n\\r\\n        if (prevId != address(0)) {\\r\\n            if (!contains(prevId) || _NICR > _troveManager.getNominalICR(prevId)) {\\r\\n                // `prevId` does not exist anymore or now has a smaller NICR than the given NICR\\r\\n                prevId = address(0);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (nextId != address(0)) {\\r\\n            if (!contains(nextId) || _NICR < _troveManager.getNominalICR(nextId)) {\\r\\n                // `nextId` does not exist anymore or now has a larger NICR than the given NICR\\r\\n                nextId = address(0);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (prevId == address(0) && nextId == address(0)) {\\r\\n            // No hint - descend list starting from head\\r\\n            return _descendList(_troveManager, _NICR, data.head);\\r\\n        } else if (prevId == address(0)) {\\r\\n            // No `prevId` for hint - ascend list starting from `nextId`\\r\\n            return _ascendList(_troveManager, _NICR, nextId);\\r\\n        } else if (nextId == address(0)) {\\r\\n            // No `nextId` for hint - descend list starting from `prevId`\\r\\n            return _descendList(_troveManager, _NICR, prevId);\\r\\n        } else {\\r\\n            // Descend list starting from `prevId`\\r\\n            return _descendList(_troveManager, _NICR, prevId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- 'require' functions ---\\r\\n\\r\\n    function _requireCallerIsTroveManager() internal view {\\r\\n        require(msg.sender == address(troveManager), \\\"SortedTroves: Caller is not the TroveManager\\\");\\r\\n    }\\r\\n\\r\\n    function _requireCallerIsBOorTroveM(ITroveManager _troveManager) internal view {\\r\\n        require(msg.sender == borrowerOperationsAddress || msg.sender == address(_troveManager),\\r\\n                \\\"SortedTroves: Caller is neither BO nor TroveM\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"}],\"name\":\"NodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"NodeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedDoublyLLAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOperationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"head\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tail\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"findInsertPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirst\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLast\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getNext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getPrev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newNICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"reInsert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_NICR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prevId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nextId\",\"type\":\"address\"}],\"name\":\"validInsertPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SortedTroves", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}