{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/JBTiered721DelegateProjectDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport { JBOwnable } from \\\"@jbx-protocol/juice-ownable/src/JBOwnable.sol\\\";\\nimport { JBOperatable } from \\\"@jbx-protocol/juice-contracts-v3/contracts/abstract/JBOperatable.sol\\\";\\nimport { IJBDirectory } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBDirectory.sol\\\";\\nimport { IJBController3_1 } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBController3_1.sol\\\";\\nimport { IJBOperatorStore } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBOperatorStore.sol\\\";\\nimport { JBOperations } from \\\"@jbx-protocol/juice-contracts-v3/contracts/libraries/JBOperations.sol\\\";\\nimport { JBFundingCycleMetadata } from \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycleMetadata.sol\\\";\\n\\nimport { IJBTiered721DelegateDeployer } from \\\"./interfaces/IJBTiered721DelegateDeployer.sol\\\";\\nimport { IJBTiered721DelegateProjectDeployer } from \\\"./interfaces/IJBTiered721DelegateProjectDeployer.sol\\\";\\nimport { IJBTiered721Delegate } from \\\"./interfaces/IJBTiered721Delegate.sol\\\";\\nimport { JBDeployTiered721DelegateData } from \\\"./structs/JBDeployTiered721DelegateData.sol\\\";\\nimport { JBLaunchFundingCyclesData } from \\\"./structs/JBLaunchFundingCyclesData.sol\\\";\\nimport { JBReconfigureFundingCyclesData } from \\\"./structs/JBReconfigureFundingCyclesData.sol\\\";\\nimport { JBLaunchProjectData } from \\\"./structs/JBLaunchProjectData.sol\\\";\\n\\n/// @title JBTiered721DelegateProjectDeployer\\n/// @notice Deploys a project with an associated tiered 721 delegate.\\n/// @custom:version 3.3\\ncontract JBTiered721DelegateProjectDeployer is JBOperatable, IJBTiered721DelegateProjectDeployer {\\n    //*********************************************************************//\\n    // --------------- public immutable stored properties ---------------- //\\n    //*********************************************************************//\\n\\n    /// @notice The directory of terminals and controllers for projects.\\n    IJBDirectory public immutable override directory;\\n\\n    /// @notice The contract responsible for deploying the delegate.\\n    IJBTiered721DelegateDeployer public immutable override delegateDeployer;\\n\\n    //*********************************************************************//\\n    // -------------------------- constructor ---------------------------- //\\n    //*********************************************************************//\\n\\n    /// @param _directory The directory of terminals and controllers for projects.\\n    /// @param _delegateDeployer The delegate deployer.\\n    /// @param _operatorStore A contract storing operator assignments.\\n    constructor(\\n        IJBDirectory _directory,\\n        IJBTiered721DelegateDeployer _delegateDeployer,\\n        IJBOperatorStore _operatorStore\\n    ) JBOperatable(_operatorStore) {\\n        directory = _directory;\\n        delegateDeployer = _delegateDeployer;\\n    }\\n\\n    //*********************************************************************//\\n    // ---------------------- external transactions ---------------------- //\\n    //*********************************************************************//\\n\\n    /// @notice Launches a new project with a tiered 721 delegate attached.\\n    /// @param _owner The address to set as the owner of the project. The project's ERC-721 will be owned by this address.\\n    /// @param _deployTiered721DelegateData Data necessary to deploy the delegate.\\n    /// @param _launchProjectData Data necessary to launch the project.\\n    /// @param _controller The controller with which the funding cycles should be configured.\\n    /// @return projectId The ID of the newly configured project.\\n    function launchProjectFor(\\n        address _owner,\\n        JBDeployTiered721DelegateData memory _deployTiered721DelegateData,\\n        JBLaunchProjectData memory _launchProjectData,\\n        IJBController3_1 _controller\\n    ) external override returns (uint256 projectId) {\\n        // Get the project ID, optimistically knowing it will be one greater than the current count.\\n        projectId = directory.projects().count() + 1;\\n\\n        // Deploy the delegate contract.\\n        IJBTiered721Delegate _delegate =\\n            delegateDeployer.deployDelegateFor(projectId, _deployTiered721DelegateData);\\n\\n        // Launch the project.\\n        _launchProjectFor(_owner, _launchProjectData, _delegate, _controller);\\n\\n        // Transfer the ownership of the delegate to the project.\\n        JBOwnable(address(_delegate)).transferOwnershipToProject(projectId);\\n    }\\n\\n    /// @notice Launches funding cycles for a project with an attached delegate.\\n    /// @dev Only a project's owner or operator can launch its funding cycles.\\n    /// @param _projectId The ID of the project for which the funding cycles will be launched.\\n    /// @param _deployTiered721DelegateData Data necessary to deploy a delegate.\\n    /// @param _launchFundingCyclesData Data necessary to launch the funding cycles for the project.\\n    /// @param _controller The controller with which the funding cycles should be configured.\\n    /// @return configuration The configuration of the funding cycle that was successfully created.\\n    function launchFundingCyclesFor(\\n        uint256 _projectId,\\n        JBDeployTiered721DelegateData memory _deployTiered721DelegateData,\\n        JBLaunchFundingCyclesData memory _launchFundingCyclesData,\\n        IJBController3_1 _controller\\n    )\\n        external\\n        override\\n        requirePermission(directory.projects().ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\\n        returns (uint256 configuration)\\n    {\\n        // Deploy the delegate contract.\\n        IJBTiered721Delegate _delegate =\\n            delegateDeployer.deployDelegateFor(_projectId, _deployTiered721DelegateData);\\n\\n        // Transfer the ownership of the delegate to the project.\\n        JBOwnable(address(_delegate)).transferOwnershipToProject(_projectId);\\n\\n        // Launch the funding cycles.\\n        return _launchFundingCyclesFor(_projectId, _launchFundingCyclesData, _delegate, _controller);\\n    }\\n    \\n    /// @notice Reconfigures funding cycles for a project with an attached delegate.\\n    /// @dev Only a project's owner or operator can configure its funding cycles.\\n    /// @param _projectId The ID of the project for which funding cycles are being reconfigured.\\n    /// @param _deployTiered721DelegateData Data necessary to deploy a delegate.\\n    /// @param _reconfigureFundingCyclesData Data necessary to reconfigure the funding cycle.\\n    /// @param _controller The controller with which the funding cycles should be configured.\\n    /// @return configuration The configuration of the successfully reconfigured funding cycle.\\n    function reconfigureFundingCyclesOf(\\n        uint256 _projectId,\\n        JBDeployTiered721DelegateData memory _deployTiered721DelegateData,\\n        JBReconfigureFundingCyclesData memory _reconfigureFundingCyclesData,\\n        IJBController3_1 _controller\\n    )\\n        external\\n        override\\n        requirePermission(directory.projects().ownerOf(_projectId), _projectId, JBOperations.RECONFIGURE)\\n        returns (uint256 configuration)\\n    {\\n        // Deploy the delegate contract.\\n        IJBTiered721Delegate _delegate =\\n            delegateDeployer.deployDelegateFor(_projectId, _deployTiered721DelegateData);\\n\\n        // Transfer the ownership of the delegate to the project.\\n        JBOwnable(address(_delegate)).transferOwnershipToProject(_projectId);\\n\\n        // Reconfigure the funding cycles.\\n        return _reconfigureFundingCyclesOf(_projectId, _reconfigureFundingCyclesData, _delegate, _controller);\\n    }\\n\\n    //*********************************************************************//\\n    // ------------------------ internal functions ----------------------- //\\n    //*********************************************************************//\\n\\n    /// @notice Launches a project.\\n    /// @param _owner The address to set as the project's owner.\\n    /// @param _launchProjectData Data needed to launch the project.\\n    /// @param _dataSource The data source to set for the project.\\n    /// @param _controller The controller to be used for configuring the project's funding cycles.\\n    function _launchProjectFor(\\n        address _owner,\\n        JBLaunchProjectData memory _launchProjectData,\\n        IJBTiered721Delegate _dataSource,\\n        IJBController3_1 _controller\\n    ) internal {\\n        _controller.launchProjectFor(\\n            _owner,\\n            _launchProjectData.projectMetadata,\\n            _launchProjectData.data,\\n            JBFundingCycleMetadata({\\n                global: _launchProjectData.metadata.global,\\n                reservedRate: _launchProjectData.metadata.reservedRate,\\n                redemptionRate: _launchProjectData.metadata.redemptionRate,\\n                ballotRedemptionRate: _launchProjectData.metadata.ballotRedemptionRate,\\n                pausePay: _launchProjectData.metadata.pausePay,\\n                pauseDistributions: _launchProjectData.metadata.pauseDistributions,\\n                pauseRedeem: _launchProjectData.metadata.pauseRedeem,\\n                pauseBurn: _launchProjectData.metadata.pauseBurn,\\n                allowMinting: _launchProjectData.metadata.allowMinting,\\n                allowTerminalMigration: _launchProjectData.metadata.allowTerminalMigration,\\n                allowControllerMigration: _launchProjectData.metadata.allowControllerMigration,\\n                holdFees: _launchProjectData.metadata.holdFees,\\n                preferClaimedTokenOverride: _launchProjectData.metadata.preferClaimedTokenOverride,\\n                useTotalOverflowForRedemptions: _launchProjectData.metadata.useTotalOverflowForRedemptions,\\n                // Enable using the data source for the project's pay function.\\n                useDataSourceForPay: true,\\n                useDataSourceForRedeem: _launchProjectData.metadata.useDataSourceForRedeem,\\n                // Set the delegate address as the data source of the project's funding cycle metadata.\\n                dataSource: address(_dataSource),\\n                metadata: _launchProjectData.metadata.metadata\\n            }),\\n            _launchProjectData.mustStartAtOrAfter,\\n            _launchProjectData.groupedSplits,\\n            _launchProjectData.fundAccessConstraints,\\n            _launchProjectData.terminals,\\n            _launchProjectData.memo\\n        );\\n    }\\n\\n    /// @notice Launches a funding cycle for a project.\\n    /// @param _projectId The project ID to launch a funding cycle for.\\n    /// @param _launchFundingCyclesData Data necessary to launch a funding cycle for the project.\\n    /// @param _dataSource The data source to be set for the project.\\n    /// @param _controller The controller to configure the project's funding cycles with.\\n    /// @return configuration The configuration of the funding cycle that was successfully created.\\n    function _launchFundingCyclesFor(\\n        uint256 _projectId,\\n        JBLaunchFundingCyclesData memory _launchFundingCyclesData,\\n        IJBTiered721Delegate _dataSource,\\n        IJBController3_1 _controller\\n    ) internal returns (uint256) {\\n        return _controller.launchFundingCyclesFor(\\n            _projectId,\\n            _launchFundingCyclesData.data,\\n            JBFundingCycleMetadata({\\n                global: _launchFundingCyclesData.metadata.global,\\n                reservedRate: _launchFundingCyclesData.metadata.reservedRate,\\n                redemptionRate: _launchFundingCyclesData.metadata.redemptionRate,\\n                ballotRedemptionRate: _launchFundingCyclesData.metadata.ballotRedemptionRate,\\n                pausePay: _launchFundingCyclesData.metadata.pausePay,\\n                pauseDistributions: _launchFundingCyclesData.metadata.pauseDistributions,\\n                pauseRedeem: _launchFundingCyclesData.metadata.pauseRedeem,\\n                pauseBurn: _launchFundingCyclesData.metadata.pauseBurn,\\n                allowMinting: _launchFundingCyclesData.metadata.allowMinting,\\n                allowTerminalMigration: _launchFundingCyclesData.metadata.allowTerminalMigration,\\n                allowControllerMigration: _launchFundingCyclesData.metadata.allowControllerMigration,\\n                holdFees: _launchFundingCyclesData.metadata.holdFees,\\n                preferClaimedTokenOverride: _launchFundingCyclesData.metadata.preferClaimedTokenOverride,\\n                useTotalOverflowForRedemptions: _launchFundingCyclesData.metadata.useTotalOverflowForRedemptions,\\n                // Set the project to use the data source for its pay function.\\n                useDataSourceForPay: true,\\n                useDataSourceForRedeem: _launchFundingCyclesData.metadata.useDataSourceForRedeem,\\n                // Set the delegate address as the data source of the provided metadata.\\n                dataSource: address(_dataSource),\\n                metadata: _launchFundingCyclesData.metadata.metadata\\n            }),\\n            _launchFundingCyclesData.mustStartAtOrAfter,\\n            _launchFundingCyclesData.groupedSplits,\\n            _launchFundingCyclesData.fundAccessConstraints,\\n            _launchFundingCyclesData.terminals,\\n            _launchFundingCyclesData.memo\\n        );\\n    }\\n\\n    /// @notice Reconfigure funding cycles for a project.\\n    /// @param _projectId The ID of the project for which the funding cycles are being reconfigured.\\n    /// @param _reconfigureFundingCyclesData Data necessary to reconfigure the project's funding cycles.\\n    /// @param _dataSource The data source to be set for the project.\\n    /// @param _controller The controller to be used for configuring the project's funding cycles.\\n    /// @return The configuration of the successfully reconfigured funding cycle.\\n    function _reconfigureFundingCyclesOf(\\n        uint256 _projectId,\\n        JBReconfigureFundingCyclesData memory _reconfigureFundingCyclesData,\\n        IJBTiered721Delegate _dataSource,\\n        IJBController3_1 _controller\\n    ) internal returns (uint256) {\\n        return _controller.reconfigureFundingCyclesOf(\\n            _projectId,\\n            _reconfigureFundingCyclesData.data,\\n            JBFundingCycleMetadata({\\n                global: _reconfigureFundingCyclesData.metadata.global,\\n                reservedRate: _reconfigureFundingCyclesData.metadata.reservedRate,\\n                redemptionRate: _reconfigureFundingCyclesData.metadata.redemptionRate,\\n                ballotRedemptionRate: _reconfigureFundingCyclesData.metadata.ballotRedemptionRate,\\n                pausePay: _reconfigureFundingCyclesData.metadata.pausePay,\\n                pauseDistributions: _reconfigureFundingCyclesData.metadata.pauseDistributions,\\n                pauseRedeem: _reconfigureFundingCyclesData.metadata.pauseRedeem,\\n                pauseBurn: _reconfigureFundingCyclesData.metadata.pauseBurn,\\n                allowMinting: _reconfigureFundingCyclesData.metadata.allowMinting,\\n                allowTerminalMigration: _reconfigureFundingCyclesData.metadata.allowTerminalMigration,\\n                allowControllerMigration: _reconfigureFundingCyclesData.metadata.allowControllerMigration,\\n                holdFees: _reconfigureFundingCyclesData.metadata.holdFees,\\n                preferClaimedTokenOverride: _reconfigureFundingCyclesData.metadata.preferClaimedTokenOverride,\\n                useTotalOverflowForRedemptions: _reconfigureFundingCyclesData.metadata.useTotalOverflowForRedemptions,\\n                // Set the project to use the data source for its pay function.\\n                useDataSourceForPay: true,\\n                useDataSourceForRedeem: _reconfigureFundingCyclesData.metadata.useDataSourceForRedeem,\\n                // Set the delegate address as the data source of the provided metadata.\\n                dataSource: address(_dataSource),\\n                metadata: _reconfigureFundingCyclesData.metadata.metadata\\n            }),\\n            _reconfigureFundingCyclesData.mustStartAtOrAfter,\\n            _reconfigureFundingCyclesData.groupedSplits,\\n            _reconfigureFundingCyclesData.fundAccessConstraints,\\n            _reconfigureFundingCyclesData.memo\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-ownable/src/JBOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Juicebox variation on OpenZeppelin Ownable\\npragma solidity ^0.8.0;\\n\\nimport { JBOwnableOverrides, IJBProjects, IJBOperatorStore } from \\\"./JBOwnableOverrides.sol\\\";\\n\\ncontract JBOwnable is JBOwnableOverrides {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n      @param _projects the JBProjects to use to get the owner of the project\\n      @param _operatorStore the operatorStore to use for the permissions\\n     */\\n    constructor(\\n        IJBProjects _projects,\\n        IJBOperatorStore _operatorStore\\n    ) JBOwnableOverrides(_projects, _operatorStore) {}\\n\\n    /**\\n     * @dev Throws if called by an account that is not the owner and does not have permission to act as the owner\\n     */\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    function _emitTransferEvent(address previousOwner, address newOwner)\\n        internal\\n        virtual\\n        override\\n    {\\n        emit OwnershipTransferred(previousOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/abstract/JBOperatable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {IJBOperatable} from './../interfaces/IJBOperatable.sol';\\nimport {IJBOperatorStore} from './../interfaces/IJBOperatorStore.sol';\\n\\n/// @notice Modifiers to allow access to functions based on the message sender's operator status.\\nabstract contract JBOperatable is IJBOperatable {\\n  //*********************************************************************//\\n  // --------------------------- custom errors -------------------------- //\\n  //*********************************************************************//\\n  error UNAUTHORIZED();\\n\\n  //*********************************************************************//\\n  // ---------------------------- modifiers ---------------------------- //\\n  //*********************************************************************//\\n\\n  /// @notice Only allows the speficied account or an operator of the account to proceed.\\n  /// @param _account The account to check for.\\n  /// @param _domain The domain namespace to look for an operator within.\\n  /// @param _permissionIndex The index of the permission to check for.\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    _requirePermission(_account, _domain, _permissionIndex);\\n    _;\\n  }\\n\\n  /// @notice Only allows the speficied account, an operator of the account to proceed, or a truthy override flag.\\n  /// @param _account The account to check for.\\n  /// @param _domain The domain namespace to look for an operator within.\\n  /// @param _permissionIndex The index of the permission to check for.\\n  /// @param _override A condition to force allowance for.\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    _requirePermissionAllowingOverride(_account, _domain, _permissionIndex, _override);\\n    _;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /// @notice A contract storing operator assignments.\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /// @param _operatorStore A contract storing operator assignments.\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- internal views ------------------------- //\\n  //*********************************************************************//\\n\\n  /// @notice Require the message sender is either the account or has the specified permission.\\n  /// @param _account The account to allow.\\n  /// @param _domain The domain namespace within which the permission index will be checked.\\n  /// @param _permissionIndex The permission index that an operator must have within the specified domain to be allowed.\\n  function _requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) internal view {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n  }\\n\\n  /// @notice Require the message sender is either the account, has the specified permission, or the override condition is true.\\n  /// @param _account The account to allow.\\n  /// @param _domain The domain namespace within which the permission index will be checked.\\n  /// @param _domain The permission index that an operator must have within the specified domain to be allowed.\\n  /// @param _override The override condition to allow.\\n  function _requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) internal view {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBDirectory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IJBFundingCycleStore} from './IJBFundingCycleStore.sol';\\nimport {IJBPaymentTerminal} from './IJBPaymentTerminal.sol';\\nimport {IJBProjects} from './IJBProjects.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, address indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event SetTerminals(uint256 indexed projectId, IJBPaymentTerminal[] terminals, address caller);\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function controllerOf(uint256 projectId) external view returns (address);\\n\\n  function isAllowedToSetFirstController(address account) external view returns (bool);\\n\\n  function terminalsOf(uint256 projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(\\n    uint256 projectId,\\n    IJBPaymentTerminal terminal\\n  ) external view returns (bool);\\n\\n  function primaryTerminalOf(\\n    uint256 projectId,\\n    address token\\n  ) external view returns (IJBPaymentTerminal);\\n\\n  function setControllerOf(uint256 projectId, address controller) external;\\n\\n  function setTerminalsOf(uint256 projectId, IJBPaymentTerminal[] calldata terminals) external;\\n\\n  function setPrimaryTerminalOf(\\n    uint256 projectId,\\n    address token,\\n    IJBPaymentTerminal terminal\\n  ) external;\\n\\n  function setIsAllowedToSetFirstController(address account, bool flag) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBController3_1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport {JBBallotState} from './../enums/JBBallotState.sol';\\nimport {JBFundAccessConstraints} from './../structs/JBFundAccessConstraints.sol';\\nimport {JBFundingCycle} from './../structs/JBFundingCycle.sol';\\nimport {JBFundingCycleData} from './../structs/JBFundingCycleData.sol';\\nimport {JBFundingCycleMetadata} from './../structs/JBFundingCycleMetadata.sol';\\nimport {JBGroupedSplits} from './../structs/JBGroupedSplits.sol';\\nimport {JBProjectMetadata} from './../structs/JBProjectMetadata.sol';\\nimport {JBSplit} from './../structs/JBSplit.sol';\\nimport {IJBController3_0_1} from './IJBController3_0_1.sol';\\nimport {IJBDirectory} from './IJBDirectory.sol';\\nimport {IJBFundAccessConstraintsStore} from './IJBFundAccessConstraintsStore.sol';\\nimport {IJBFundingCycleStore} from './IJBFundingCycleStore.sol';\\nimport {IJBMigratable} from './IJBMigratable.sol';\\nimport {IJBPaymentTerminal} from './IJBPaymentTerminal.sol';\\nimport {IJBProjects} from './IJBProjects.sol';\\nimport {IJBSplitsStore} from './IJBSplitsStore.sol';\\nimport {IJBTokenStore} from './IJBTokenStore.sol';\\n\\ninterface IJBController3_1 is IJBController3_0_1, IERC165 {\\n  event LaunchProject(uint256 configuration, uint256 projectId, string memo, address caller);\\n\\n  event LaunchFundingCycles(uint256 configuration, uint256 projectId, string memo, address caller);\\n\\n  event ReconfigureFundingCycles(\\n    uint256 configuration,\\n    uint256 projectId,\\n    string memo,\\n    address caller\\n  );\\n\\n  event DistributeReservedTokens(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 tokenCount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event DistributeToReservedTokenSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    uint256 tokenCount,\\n    address caller\\n  );\\n\\n  event MintTokens(\\n    address indexed beneficiary,\\n    uint256 indexed projectId,\\n    uint256 tokenCount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    uint256 reservedRate,\\n    address caller\\n  );\\n\\n  event BurnTokens(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 tokenCount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event Migrate(uint256 indexed projectId, IJBMigratable to, address caller);\\n\\n  event PrepMigration(uint256 indexed projectId, address from, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function tokenStore() external view returns (IJBTokenStore);\\n\\n  function splitsStore() external view returns (IJBSplitsStore);\\n\\n  function fundAccessConstraintsStore() external view returns (IJBFundAccessConstraintsStore);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function reservedTokenBalanceOf(uint256 projectId) external view returns (uint256);\\n\\n  function totalOutstandingTokensOf(uint256 projectId) external view returns (uint256);\\n\\n  function getFundingCycleOf(\\n    uint256 projectId,\\n    uint256 configuration\\n  )\\n    external\\n    view\\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\\n\\n  function latestConfiguredFundingCycleOf(\\n    uint256 projectId\\n  )\\n    external\\n    view\\n    returns (JBFundingCycle memory, JBFundingCycleMetadata memory metadata, JBBallotState);\\n\\n  function currentFundingCycleOf(\\n    uint256 projectId\\n  )\\n    external\\n    view\\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\\n\\n  function queuedFundingCycleOf(\\n    uint256 projectId\\n  )\\n    external\\n    view\\n    returns (JBFundingCycle memory fundingCycle, JBFundingCycleMetadata memory metadata);\\n\\n  function launchProjectFor(\\n    address owner,\\n    JBProjectMetadata calldata projectMetadata,\\n    JBFundingCycleData calldata data,\\n    JBFundingCycleMetadata calldata metadata,\\n    uint256 mustStartAtOrAfter,\\n    JBGroupedSplits[] memory groupedSplits,\\n    JBFundAccessConstraints[] memory fundAccessConstraints,\\n    IJBPaymentTerminal[] memory terminals,\\n    string calldata memo\\n  ) external returns (uint256 projectId);\\n\\n  function launchFundingCyclesFor(\\n    uint256 projectId,\\n    JBFundingCycleData calldata data,\\n    JBFundingCycleMetadata calldata metadata,\\n    uint256 mustStartAtOrAfter,\\n    JBGroupedSplits[] memory groupedSplits,\\n    JBFundAccessConstraints[] memory fundAccessConstraints,\\n    IJBPaymentTerminal[] memory terminals,\\n    string calldata memo\\n  ) external returns (uint256 configuration);\\n\\n  function reconfigureFundingCyclesOf(\\n    uint256 projectId,\\n    JBFundingCycleData calldata data,\\n    JBFundingCycleMetadata calldata metadata,\\n    uint256 mustStartAtOrAfter,\\n    JBGroupedSplits[] memory groupedSplits,\\n    JBFundAccessConstraints[] memory fundAccessConstraints,\\n    string calldata memo\\n  ) external returns (uint256);\\n\\n  function mintTokensOf(\\n    uint256 projectId,\\n    uint256 tokenCount,\\n    address beneficiary,\\n    string calldata memo,\\n    bool preferClaimedTokens,\\n    bool useReservedRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address holder,\\n    uint256 projectId,\\n    uint256 tokenCount,\\n    string calldata memo,\\n    bool preferClaimedTokens\\n  ) external;\\n\\n  function distributeReservedTokensOf(\\n    uint256 projectId,\\n    string memory memo\\n  ) external returns (uint256);\\n\\n  function migrate(uint256 projectId, IJBMigratable to) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBOperatorStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {JBOperatorData} from './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address operator,\\n    address account,\\n    uint256 domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address operator,\\n    address account,\\n    uint256 domain,\\n    uint256 permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address operator,\\n    address account,\\n    uint256 domain,\\n    uint256[] calldata permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata operatorData) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/libraries/JBOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_METADATA = 6;\\n  uint256 public constant ISSUE = 7;\\n  uint256 public constant SET_TOKEN = 8;\\n  uint256 public constant MINT = 9;\\n  uint256 public constant BURN = 10;\\n  uint256 public constant CLAIM = 11;\\n  uint256 public constant TRANSFER = 12;\\n  uint256 public constant REQUIRE_CLAIM = 13; // unused in v3\\n  uint256 public constant SET_CONTROLLER = 14;\\n  uint256 public constant SET_TERMINALS = 15;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 16;\\n  uint256 public constant USE_ALLOWANCE = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycleMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {JBGlobalFundingCycleMetadata} from './JBGlobalFundingCycleMetadata.sol';\\n\\n/// @custom:member global Data used globally in non-migratable ecosystem contracts.\\n/// @custom:member reservedRate The reserved rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_RESERVED_RATE`.\\n/// @custom:member redemptionRate The redemption rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n/// @custom:member ballotRedemptionRate The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n/// @custom:member pausePay A flag indicating if the pay functionality should be paused during the funding cycle.\\n/// @custom:member pauseDistributions A flag indicating if the distribute functionality should be paused during the funding cycle.\\n/// @custom:member pauseRedeem A flag indicating if the redeem functionality should be paused during the funding cycle.\\n/// @custom:member pauseBurn A flag indicating if the burn functionality should be paused during the funding cycle.\\n/// @custom:member allowMinting A flag indicating if minting tokens should be allowed during this funding cycle.\\n/// @custom:member allowTerminalMigration A flag indicating if migrating terminals should be allowed during this funding cycle.\\n/// @custom:member allowControllerMigration A flag indicating if migrating controllers should be allowed during this funding cycle.\\n/// @custom:member holdFees A flag indicating if fees should be held during this funding cycle.\\n/// @custom:member preferClaimedTokenOverride A flag indicating if claimed tokens should always be prefered to unclaimed tokens when minting.\\n/// @custom:member useTotalOverflowForRedemptions A flag indicating if redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.\\n/// @custom:member useDataSourceForPay A flag indicating if the data source should be used for pay transactions during this funding cycle.\\n/// @custom:member useDataSourceForRedeem A flag indicating if the data source should be used for redeem transactions during this funding cycle.\\n/// @custom:member dataSource The data source to use during this funding cycle.\\n/// @custom:member metadata Metadata of the metadata, up to uint8 in size.\\nstruct JBFundingCycleMetadata {\\n  JBGlobalFundingCycleMetadata global;\\n  uint256 reservedRate;\\n  uint256 redemptionRate;\\n  uint256 ballotRedemptionRate;\\n  bool pausePay;\\n  bool pauseDistributions;\\n  bool pauseRedeem;\\n  bool pauseBurn;\\n  bool allowMinting;\\n  bool allowTerminalMigration;\\n  bool allowControllerMigration;\\n  bool holdFees;\\n  bool preferClaimedTokenOverride;\\n  bool useTotalOverflowForRedemptions;\\n  bool useDataSourceForPay;\\n  bool useDataSourceForRedeem;\\n  address dataSource;\\n  uint256 metadata;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJBTiered721DelegateDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IJBDirectory } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBDirectory.sol\\\";\\n\\nimport { JB721GovernanceType } from \\\"../enums/JB721GovernanceType.sol\\\";\\nimport { JBDeployTiered721DelegateData } from \\\"../structs/JBDeployTiered721DelegateData.sol\\\";\\nimport { IJBTiered721Delegate } from \\\"./IJBTiered721Delegate.sol\\\";\\n\\ninterface IJBTiered721DelegateDeployer {\\n    event DelegateDeployed(\\n        uint256 indexed projectId,\\n        IJBTiered721Delegate newDelegate,\\n        JB721GovernanceType governanceType\\n    );\\n\\n    function deployDelegateFor(\\n        uint256 projectId,\\n        JBDeployTiered721DelegateData memory deployTieredNFTRewardDelegateData\\n    ) external returns (IJBTiered721Delegate delegate);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJBTiered721DelegateProjectDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IJBDirectory } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBDirectory.sol\\\";\\nimport { IJBProjects } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBProjects.sol\\\";\\nimport { IJBController3_1 } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBController3_1.sol\\\";\\nimport { JBProjectMetadata } from \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBProjectMetadata.sol\\\";\\n\\nimport { JBDeployTiered721DelegateData } from \\\"../structs/JBDeployTiered721DelegateData.sol\\\";\\nimport { JBLaunchProjectData } from \\\"../structs/JBLaunchProjectData.sol\\\";\\nimport { JBLaunchFundingCyclesData } from \\\"../structs/JBLaunchFundingCyclesData.sol\\\";\\nimport { JBReconfigureFundingCyclesData } from \\\"../structs/JBReconfigureFundingCyclesData.sol\\\";\\nimport { IJBTiered721DelegateDeployer } from \\\"./IJBTiered721DelegateDeployer.sol\\\";\\n\\ninterface IJBTiered721DelegateProjectDeployer {\\n    function directory() external view returns (IJBDirectory);\\n\\n    function delegateDeployer() external view returns (IJBTiered721DelegateDeployer);\\n\\n    function launchProjectFor(\\n        address owner,\\n        JBDeployTiered721DelegateData memory deployTiered721DelegateData,\\n        JBLaunchProjectData memory launchProjectData,\\n        IJBController3_1 controller\\n    ) external returns (uint256 projectId);\\n\\n    function launchFundingCyclesFor(\\n        uint256 projectId,\\n        JBDeployTiered721DelegateData memory deployTiered721DelegateData,\\n        JBLaunchFundingCyclesData memory launchFundingCyclesData,\\n        IJBController3_1 controller\\n    ) external returns (uint256 configuration);\\n\\n    function reconfigureFundingCyclesOf(\\n        uint256 projectId,\\n        JBDeployTiered721DelegateData memory deployTiered721DelegateData,\\n        JBReconfigureFundingCyclesData memory reconfigureFundingCyclesData,\\n        IJBController3_1 controller\\n    ) external returns (uint256 configuration);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJBTiered721Delegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IJBDirectory } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBDirectory.sol\\\";\\nimport { IJBFundingCycleStore } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBFundingCycleStore.sol\\\";\\nimport { IJBPrices } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPrices.sol\\\";\\n\\nimport { IJB721Delegate } from \\\"./IJB721Delegate.sol\\\";\\nimport { IJB721TokenUriResolver } from \\\"./IJB721TokenUriResolver.sol\\\";\\nimport { IJBTiered721DelegateStore } from \\\"./IJBTiered721DelegateStore.sol\\\";\\nimport { JB721PricingParams } from \\\"./../structs/JB721PricingParams.sol\\\";\\nimport { JB721TierParams } from \\\"./../structs/JB721TierParams.sol\\\";\\nimport { JBTiered721Flags } from \\\"./../structs/JBTiered721Flags.sol\\\";\\nimport { JBTiered721MintReservesForTiersData } from \\\"./../structs/JBTiered721MintReservesForTiersData.sol\\\";\\nimport { JBTiered721MintForTiersData } from \\\"./../structs/JBTiered721MintForTiersData.sol\\\";\\n\\ninterface IJBTiered721Delegate is IJB721Delegate {\\n    event Mint(\\n        uint256 indexed tokenId,\\n        uint256 indexed tierId,\\n        address indexed beneficiary,\\n        uint256 totalAmountContributed,\\n        address caller\\n    );\\n\\n    event MintReservedToken(\\n        uint256 indexed tokenId, uint256 indexed tierId, address indexed beneficiary, address caller\\n    );\\n\\n    event AddTier(uint256 indexed tierId, JB721TierParams data, address caller);\\n\\n    event RemoveTier(uint256 indexed tierId, address caller);\\n\\n    event SetEncodedIPFSUri(uint256 indexed tierId, bytes32 encodedIPFSUri, address caller);\\n\\n    event SetBaseUri(string indexed baseUri, address caller);\\n\\n    event SetContractUri(string indexed contractUri, address caller);\\n\\n    event SetTokenUriResolver(IJB721TokenUriResolver indexed newResolver, address caller);\\n\\n    event AddCredits(\\n        uint256 indexed changeAmount, uint256 indexed newTotalCredits, address indexed account, address caller\\n    );\\n\\n    event UseCredits(\\n        uint256 indexed changeAmount, uint256 indexed newTotalCredits, address indexed account, address caller\\n    );\\n\\n    function codeOrigin() external view returns (address);\\n\\n    function store() external view returns (IJBTiered721DelegateStore);\\n\\n    function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n    function pricingContext() external view returns (uint256, uint256, IJBPrices);\\n\\n    function creditsOf(address _address) external view returns (uint256);\\n\\n    function firstOwnerOf(uint256 _tokenId) external view returns (address);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function adjustTiers(JB721TierParams[] memory tierDataToAdd, uint256[] memory tierIdsToRemove) external;\\n\\n    function mintReservesFor(JBTiered721MintReservesForTiersData[] memory mintReservesForTiersData) external;\\n\\n    function mintReservesFor(uint256 tierId, uint256 count) external;\\n\\n    function mintFor(uint16[] calldata tierIds, address beneficiary) external returns (uint256[] memory tokenIds);\\n\\n    function setMetadata(\\n        string memory baseUri,\\n        string calldata contractMetadataUri,\\n        IJB721TokenUriResolver tokenUriResolver,\\n        uint256 encodedIPFSUriTierId,\\n        bytes32 encodedIPFSUri\\n    ) external;\\n\\n    function initialize(\\n        uint256 projectId,\\n        string memory name,\\n        string memory symbol,\\n        IJBFundingCycleStore fundingCycleStore,\\n        string memory baseUri,\\n        IJB721TokenUriResolver tokenUriResolver,\\n        string memory contractUri,\\n        JB721PricingParams memory pricing,\\n        IJBTiered721DelegateStore store,\\n        JBTiered721Flags memory flags\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JBDeployTiered721DelegateData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBDirectory.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBFundingCycleStore.sol\\\";\\nimport \\\"./../enums/JB721GovernanceType.sol\\\";\\nimport \\\"./../interfaces/IJB721TokenUriResolver.sol\\\";\\nimport \\\"./../interfaces/IJBTiered721DelegateStore.sol\\\";\\nimport \\\"./JB721PricingParams.sol\\\";\\nimport \\\"./JBTiered721Flags.sol\\\";\\n\\n/// @custom:member name The name of the token.\\n/// @custom:member symbol The symbol that the token should be represented by.\\n/// @custom:member fundingCycleStore A contract storing all funding cycle configurations.\\n/// @custom:member baseUri A URI to use as a base for full token URIs.\\n/// @custom:member tokenUriResolver A contract responsible for resolving the token URI for each token ID.\\n/// @custom:member contractUri A URI where contract metadata can be found. \\n/// @custom:member pricing The tier pricing according to which token distribution will be made. \\n/// @custom:member reservedTokenBeneficiary The address receiving the reserved token\\n/// @custom:member store The store contract to use.\\n/// @custom:member flags A set of flags that help define how this contract works.\\n/// @custom:member governanceType The type of governance to allow the NFTs to be used for.\\nstruct JBDeployTiered721DelegateData {\\n    string name;\\n    string symbol;\\n    IJBFundingCycleStore fundingCycleStore;\\n    string baseUri;\\n    IJB721TokenUriResolver tokenUriResolver;\\n    string contractUri;\\n    JB721PricingParams pricing;\\n    address reservedTokenBeneficiary;\\n    IJBTiered721DelegateStore store;\\n    JBTiered721Flags flags;\\n    JB721GovernanceType governanceType;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JBLaunchFundingCyclesData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPaymentTerminal.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycleData.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundAccessConstraints.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBGroupedSplits.sol\\\";\\nimport \\\"./JBPayDataSourceFundingCycleMetadata.sol\\\";\\n\\n/// @custom:member data Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n/// @custom:member metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n/// @custom:member mustStartAtOrAfter The time before which the configured funding cycle cannot start.\\n/// @custom:member groupedSplits An array of splits to set for any number of groups. \\n/// @custom:member fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The `_distributionLimit` and `_overflowAllowance` parameters must fit in a `uint232`.\\n/// @custom:member terminals Payment terminals to add for the project.\\n/// @custom:member memo A memo to pass along to the emitted event.\\nstruct JBLaunchFundingCyclesData {\\n    JBFundingCycleData data;\\n    JBPayDataSourceFundingCycleMetadata metadata;\\n    uint256 mustStartAtOrAfter;\\n    JBGroupedSplits[] groupedSplits;\\n    JBFundAccessConstraints[] fundAccessConstraints;\\n    IJBPaymentTerminal[] terminals;\\n    string memo;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JBReconfigureFundingCyclesData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycleData.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundAccessConstraints.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBGroupedSplits.sol\\\";\\nimport \\\"./JBPayDataSourceFundingCycleMetadata.sol\\\";\\n\\n/// @custom:member data Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n/// @custom:member metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n/// @custom:member mustStartAtOrAfter The time before which the configured funding cycle cannot start.\\n/// @custom:member groupedSplits An array of splits to set for any number of groups. \\n/// @custom:member fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The `_distributionLimit` and `_overflowAllowance` parameters must fit in a `uint232`.\\n/// @custom:member terminals Payment terminals to add for the project.\\n/// @custom:member memo A memo to pass along to the emitted event.\\nstruct JBReconfigureFundingCyclesData {\\n    JBFundingCycleData data;\\n    JBPayDataSourceFundingCycleMetadata metadata;\\n    uint256 mustStartAtOrAfter;\\n    JBGroupedSplits[] groupedSplits;\\n    JBFundAccessConstraints[] fundAccessConstraints;\\n    string memo;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JBLaunchProjectData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPaymentTerminal.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBProjectMetadata.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycleData.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundAccessConstraints.sol\\\";\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBGroupedSplits.sol\\\";\\nimport \\\"./JBPayDataSourceFundingCycleMetadata.sol\\\";\\n\\n/// @custom:member projectMetadata Metadata to associate with the project within a particular domain. This can be updated any time by the owner of the project.\\n/// @custom:member data Data that defines the project's first funding cycle. These properties will remain fixed for the duration of the funding cycle.\\n/// @custom:member metadata Metadata specifying the controller specific params that a funding cycle can have. These properties will remain fixed for the duration of the funding cycle.\\n/// @custom:member mustStartAtOrAfter The time before which the configured funding cycle cannot start.\\n/// @custom:member groupedSplits An array of splits to set for any number of groups. \\n/// @custom:member fundAccessConstraints An array containing amounts that a project can use from its treasury for each payment terminal. Amounts are fixed point numbers using the same number of decimals as the accompanying terminal. The `_distributionLimit` and `_overflowAllowance` parameters must fit in a `uint232`.\\n/// @custom:member terminals Payment terminals to add for the project.\\n/// @custom:member memo A memo to pass along to the emitted event.\\nstruct JBLaunchProjectData {\\n    JBProjectMetadata projectMetadata;\\n    JBFundingCycleData data;\\n    JBPayDataSourceFundingCycleMetadata metadata;\\n    uint256 mustStartAtOrAfter;\\n    JBGroupedSplits[] groupedSplits;\\n    JBFundAccessConstraints[] fundAccessConstraints;\\n    IJBPaymentTerminal[] terminals;\\n    string memo;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-ownable/src/JBOwnableOverrides.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Juicebox variation on OpenZeppelin Ownable\\n\\npragma solidity ^0.8.0;\\n\\nimport { JBOwner } from \\\"./struct/JBOwner.sol\\\";\\nimport { IJBOwnable } from \\\"./interfaces/IJBOwnable.sol\\\";\\n\\nimport { IJBOperatable } from '@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBOperatable.sol';\\nimport { IJBOperatorStore } from \\\"@jbx-protocol/juice-contracts-v3/contracts/abstract/JBOperatable.sol\\\";\\nimport { IJBProjects } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBProjects.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions and can grant other users permission to those functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner or an approved address.\\n *\\n * Supports meta-transactions.\\n */\\nabstract contract JBOwnableOverrides is Context, IJBOwnable, IJBOperatable {\\n    //*********************************************************************//\\n    // --------------------------- custom errors --------------------------//\\n    //*********************************************************************//\\n\\n    error UNAUTHORIZED();\\n    error INVALID_NEW_OWNER(address ownerAddress, uint256 projectId);\\n\\n    //*********************************************************************//\\n    // ---------------- public immutable stored properties --------------- //\\n    //*********************************************************************//\\n\\n    /** \\n        @notice \\n        A contract storing operator assignments.\\n    */\\n    IJBOperatorStore public immutable operatorStore;\\n\\n    /**\\n        @notice\\n        The IJBProjects to use to get the owner of a project\\n     */\\n    IJBProjects public immutable projects;\\n\\n    //*********************************************************************//\\n    // --------------------- public stored properties -------------------- //\\n    //*********************************************************************//\\n\\n    /**\\n       @notice\\n       the JBOwner information\\n     */\\n    JBOwner public override jbOwner;\\n\\n    //*********************************************************************//\\n    // -------------------------- constructor ---------------------------- //\\n    //*********************************************************************//\\n\\n    /**\\n      @param _projects the JBProjects to use to get the owner of the project\\n      @param _operatorStore the operatorStore to use for the permissions\\n     */\\n    constructor(\\n        IJBProjects _projects,\\n        IJBOperatorStore _operatorStore\\n    ) {\\n        operatorStore = _operatorStore;\\n        projects = _projects;\\n\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    //*********************************************************************//\\n    // ---------------------------- modifiers ---------------------------- //\\n    //*********************************************************************//\\n\\n    /** \\n        @notice\\n        Only allows the speficied account or an operator of the account to proceed. \\n\\n        @param _account The account to check for.\\n        @param _domain The domain namespace to look for an operator within. \\n        @param _permissionIndex The index of the permission to check for. \\n    */\\n    modifier requirePermission(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex\\n    ) {\\n        _requirePermission(_account, _domain, _permissionIndex);\\n        _;\\n    }\\n\\n     /** \\n        @notice\\n        Only allows callers that have received permission from the projectOwner for this project.\\n\\n        @dev If the owner is not a project then this will always revert\\n\\n        @param _permissionIndex The index of the permission to check for. \\n    */\\n    modifier requirePermissionFromProject(\\n        uint256 _permissionIndex\\n    ) {\\n        JBOwner memory _ownerData = jbOwner;\\n\\n        // If the owner is not a project then this should always revert\\n        if (_ownerData.projectId == 0)\\n            revert UNAUTHORIZED();\\n\\n        address _owner = _ownerData.projectId == 0 ?\\n         _ownerData.owner : projects.ownerOf(_ownerData.projectId);\\n\\n        _requirePermission(_owner, _ownerData.projectId, _permissionIndex);\\n        _;\\n    }\\n\\n    /** \\n        @notice\\n        Only allows the speficied account, an operator of the account to proceed, or a truthy override flag. \\n\\n        @param _account The account to check for.\\n        @param _domain The domain namespace to look for an operator within. \\n        @param _permissionIndex The index of the permission to check for. \\n        @param _override A condition to force allowance for.\\n    */\\n    modifier requirePermissionAllowingOverride(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex,\\n        bool _override\\n    ) {\\n        _requirePermissionAllowingOverride(_account, _domain, _permissionIndex, _override);\\n        _;\\n    }\\n\\n    //*********************************************************************//\\n    // --------------------------- public methods ------------------------ //\\n    //*********************************************************************//\\n\\n    /**\\n     @notice Returns the address of the current project owner.\\n    */\\n    function owner() public view virtual returns (address) {\\n        JBOwner memory _ownerData = jbOwner;\\n\\n        if(_ownerData.projectId == 0)\\n            return _ownerData.owner;\\n\\n        return projects.ownerOf(_ownerData.projectId);\\n    }\\n\\n    /**\\n       @notice Leaves the contract without owner. It will not be possible to call\\n       `onlyOwner`/`_checkOwner` functions anymore. Can only be called by the current owner.\\n     \\n       NOTE: Renouncing ownership will leave the contract without an owner,\\n       thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual {\\n        _checkOwner();\\n        _transferOwnership(address(0), 0);\\n    }\\n\\n    /**\\n       @notice Transfers ownership of the contract to a new account (`newOwner`).\\n       Can only be called by the current owner.\\n       @param _newOwner the static address that should receive ownership\\n     */\\n    function transferOwnership(address _newOwner) public virtual {\\n        _checkOwner();\\n        if(_newOwner == address(0))\\n            revert INVALID_NEW_OWNER(_newOwner, 0);\\n            \\n        _transferOwnership(_newOwner, 0);\\n    }\\n\\n    /**\\n       @notice Transfer ownershipt of the contract to a (Juicebox) project\\n       @dev ProjectID is limited to a uint88\\n       @param _projectId the project that should receive ownership\\n     */\\n    function transferOwnershipToProject(uint256 _projectId) public virtual {\\n        _checkOwner();\\n        if(_projectId == 0 || _projectId > type(uint88).max)\\n            revert INVALID_NEW_OWNER(address(0), _projectId);\\n\\n        _transferOwnership(address(0), uint88(_projectId));\\n    }\\n\\n    /**\\n       @notice Sets the permission index that allows other callers to perform operations on behave of the project owner\\n       @param _permissionIndex the permissionIndex to use for 'onlyOwner' calls\\n     */\\n    function setPermissionIndex(uint8 _permissionIndex) public virtual {\\n        _checkOwner();\\n        _setPermissionIndex(_permissionIndex);\\n    }\\n\\n    //*********************************************************************//\\n    // -------------------------- internal methods ----------------------- //\\n    //*********************************************************************//\\n\\n    /**\\n       @dev Sets the permission index that allows other callers to perform operations on behave of the project owner\\n       Internal function without access restriction.\\n\\n       @param _permissionIndex the permissionIndex to use for 'onlyOwner' calls\\n     */\\n    function _setPermissionIndex(uint8 _permissionIndex) internal virtual {\\n        jbOwner.permissionIndex = _permissionIndex;\\n        emit PermissionIndexChanged(_permissionIndex);\\n    }\\n\\n    /**\\n       @dev helper to allow for drop-in replacement of OZ\\n\\n       @param _newOwner the static address that should become the owner of this contract\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        _transferOwnership(_newOwner, 0);\\n    }\\n\\n    /**\\n       @dev Transfers ownership of the contract to a new account (`_newOwner`) OR a project (`_projectID`).\\n       Internal function without access restriction.\\n\\n       @param _newOwner the static owner address that should receive ownership\\n       @param _projectId the projectId this contract should follow ownership of\\n     */\\n    function _transferOwnership(address _newOwner, uint88 _projectId) internal virtual {\\n        // Can't both set a new owner and set a projectId to have ownership\\n        if (_projectId != 0 && _newOwner != address(0))\\n            revert INVALID_NEW_OWNER(_newOwner, _projectId); \\n        // Load the owner data from storage\\n        JBOwner memory _ownerData = jbOwner;\\n        // Get an address representation of the old owner\\n        address _oldOwner = _ownerData.projectId == 0 ?\\n         _ownerData.owner : projects.ownerOf(_ownerData.projectId);\\n        // Update the storage to the new owner and reset the permissionIndex\\n        // this is to prevent clashing permissions for the new user/owner\\n        jbOwner = JBOwner({\\n            owner: _newOwner,\\n            projectId: _projectId,\\n            permissionIndex: 0\\n        });\\n        // Emit the ownership transferred event using an address representation of the new owner\\n        _emitTransferEvent(_oldOwner, _projectId == 0 ? _newOwner : projects.ownerOf(_projectId));\\n    }\\n\\n    //*********************************************************************//\\n    // -------------------------- internal views ------------------------- //\\n    //*********************************************************************//\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        JBOwner memory _ownerData = jbOwner;\\n\\n        address _owner = _ownerData.projectId == 0 ?\\n         _ownerData.owner : projects.ownerOf(_ownerData.projectId);\\n        \\n        _requirePermission(_owner, _ownerData.projectId, _ownerData.permissionIndex);\\n    }\\n\\n    /** \\n    @dev\\n    Require the message sender is either the account or has the specified permission.\\n\\n    @param _account The account to allow.\\n    @param _domain The domain namespace within which the permission index will be checked.\\n    @param _permissionIndex The permission index that an operator must have within the specified domain to be allowed.\\n  */\\n    function _requirePermission(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex\\n    ) internal view virtual {\\n        address _sender = _msgSender();\\n        if (\\n            _sender != _account &&\\n            !operatorStore.hasPermission(\\n                _sender,\\n                _account,\\n                _domain,\\n                _permissionIndex\\n            ) &&\\n            !operatorStore.hasPermission(_sender, _account, 0, _permissionIndex)\\n        ) revert UNAUTHORIZED();\\n    }\\n\\n    /** \\n    @dev\\n    Require the message sender is either the account, has the specified permission, or the override condition is true.\\n\\n    @param _account The account to allow.\\n    @param _domain The domain namespace within which the permission index will be checked.\\n    @param _domain The permission index that an operator must have within the specified domain to be allowed.\\n    @param _override The override condition to allow.\\n  */\\n    function _requirePermissionAllowingOverride(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex,\\n        bool _override\\n    ) internal view virtual {\\n        // short-circuit if the override is true\\n        if (_override) return;\\n        // Perform regular check otherwise\\n        _requirePermission(_account, _domain, _permissionIndex);\\n    }\\n\\n    function _emitTransferEvent(address previousOwner, address newOwner) internal virtual;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBOperatable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IJBOperatorStore} from './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBFundingCycleStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {JBBallotState} from './../enums/JBBallotState.sol';\\nimport {JBFundingCycle} from './../structs/JBFundingCycle.sol';\\nimport {JBFundingCycleData} from './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 projectId) external view returns (uint256);\\n\\n  function get(\\n    uint256 projectId,\\n    uint256 configuration\\n  ) external view returns (JBFundingCycle memory);\\n\\n  function latestConfiguredOf(\\n    uint256 projectId\\n  ) external view returns (JBFundingCycle memory fundingCycle, JBBallotState ballotState);\\n\\n  function queuedOf(uint256 projectId) external view returns (JBFundingCycle memory fundingCycle);\\n\\n  function currentOf(uint256 projectId) external view returns (JBFundingCycle memory fundingCycle);\\n\\n  function currentBallotStateOf(uint256 projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 projectId,\\n    JBFundingCycleData calldata data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPaymentTerminal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface IJBPaymentTerminal is IERC165 {\\n  function acceptsToken(address token, uint256 projectId) external view returns (bool);\\n\\n  function currencyForToken(address token) external view returns (uint256);\\n\\n  function decimalsForToken(address token) external view returns (uint256);\\n\\n  // Return value must be a fixed point number with 18 decimals.\\n  function currentEthOverflowOf(uint256 projectId) external view returns (uint256);\\n\\n  function pay(\\n    uint256 projectId,\\n    uint256 amount,\\n    address token,\\n    address beneficiary,\\n    uint256 minReturnedTokens,\\n    bool preferClaimedTokens,\\n    string calldata memo,\\n    bytes calldata metadata\\n  ) external payable returns (uint256 beneficiaryTokenCount);\\n\\n  function addToBalanceOf(\\n    uint256 projectId,\\n    uint256 amount,\\n    address token,\\n    string calldata memo,\\n    bytes calldata metadata\\n  ) external payable;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBProjects.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {JBProjectMetadata} from './../structs/JBProjectMetadata.sol';\\nimport {IJBTokenUriResolver} from './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver indexed resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataContentOf(\\n    uint256 projectId,\\n    uint256 domain\\n  ) external view returns (string memory);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function createFor(\\n    address owner,\\n    JBProjectMetadata calldata metadata\\n  ) external returns (uint256 projectId);\\n\\n  function setMetadataOf(uint256 projectId, JBProjectMetadata calldata metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver newResolver) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/enums/JBBallotState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum JBBallotState {\\n  Active,\\n  Approved,\\n  Failed\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundAccessConstraints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IJBPaymentTerminal} from './../interfaces/IJBPaymentTerminal.sol';\\n\\n/// @custom:member terminal The terminal within which the distribution limit and the overflow allowance applies.\\n/// @custom:member token The token for which the fund access constraints apply.\\n/// @custom:member distributionLimit The amount of the distribution limit, as a fixed point number with the same number of decimals as the terminal within which the limit applies.\\n/// @custom:member distributionLimitCurrency The currency of the distribution limit.\\n/// @custom:member overflowAllowance The amount of the allowance, as a fixed point number with the same number of decimals as the terminal within which the allowance applies.\\n/// @custom:member overflowAllowanceCurrency The currency of the overflow allowance.\\nstruct JBFundAccessConstraints {\\n  IJBPaymentTerminal terminal;\\n  address token;\\n  uint256 distributionLimit;\\n  uint256 distributionLimitCurrency;\\n  uint256 overflowAllowance;\\n  uint256 overflowAllowanceCurrency;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IJBFundingCycleBallot} from './../interfaces/IJBFundingCycleBallot.sol';\\n\\n/// @custom:member number The funding cycle number for the cycle's project. Each funding cycle has a number that is an increment of the cycle that directly preceded it. Each project's first funding cycle has a number of 1.\\n/// @custom:member configuration The timestamp when the parameters for this funding cycle were configured. This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n/// @custom:member basedOn The `configuration` of the funding cycle that was active when this cycle was created.\\n/// @custom:member start The timestamp marking the moment from which the funding cycle is considered active. It is a unix timestamp measured in seconds.\\n/// @custom:member duration The number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \u2013 any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n/// @custom:member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n/// @custom:member discountRate A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n/// @custom:member ballot An address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n/// @custom:member metadata Extra data that can be associated with a funding cycle.\\nstruct JBFundingCycle {\\n  uint256 number;\\n  uint256 configuration;\\n  uint256 basedOn;\\n  uint256 start;\\n  uint256 duration;\\n  uint256 weight;\\n  uint256 discountRate;\\n  IJBFundingCycleBallot ballot;\\n  uint256 metadata;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBFundingCycleData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IJBFundingCycleBallot} from './../interfaces/IJBFundingCycleBallot.sol';\\n\\n/// @custom:member duration The number of seconds the funding cycle lasts for, after which a new funding cycle will start. A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will immediately start with the updated properties. If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \u2013 any proposed changes will apply to the subsequent cycle. If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n/// @custom:member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is received.\\n/// @custom:member discountRate A percent by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`. If it's 0, each funding cycle will have equal weight. If the number is 90%, the next funding cycle will have a 10% smaller weight. This weight is out of `JBConstants.MAX_DISCOUNT_RATE`.\\n/// @custom:member ballot An address of a contract that says whether a proposed reconfiguration should be accepted or rejected. It can be used to create rules around how a project owner can change funding cycle parameters over time.\\nstruct JBFundingCycleData {\\n  uint256 duration;\\n  uint256 weight;\\n  uint256 discountRate;\\n  IJBFundingCycleBallot ballot;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBGroupedSplits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {JBSplit} from './JBSplit.sol';\\n\\n/// @custom:member group The group indentifier.\\n/// @custom:member splits The splits to associate with the group.\\nstruct JBGroupedSplits {\\n  uint256 group;\\n  JBSplit[] splits;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBProjectMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @custom:member content The metadata content.\\n/// @custom:member domain The domain within which the metadata applies.\\nstruct JBProjectMetadata {\\n  string content;\\n  uint256 domain;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBSplit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IJBSplitAllocator} from './../interfaces/IJBSplitAllocator.sol';\\n\\n/// @custom:member preferClaimed A flag that only has effect if a projectId is also specified, and the project has a token contract attached. If so, this flag indicates if the tokens that result from making a payment to the project should be delivered claimed into the beneficiary's wallet, or unclaimed to save gas.\\n/// @custom:member preferAddToBalance A flag indicating if a distribution to a project should prefer triggering it's addToBalance function instead of its pay function.\\n/// @custom:member percent The percent of the whole group that this split occupies. This number is out of `JBConstants.SPLITS_TOTAL_PERCENT`.\\n/// @custom:member projectId The ID of a project. If an allocator is not set but a projectId is set, funds will be sent to the protocol treasury belonging to the project who's ID is specified. Resulting tokens will be routed to the beneficiary with the claimed token preference respected.\\n/// @custom:member beneficiary An address. The role the of the beneficary depends on whether or not projectId is specified, and whether or not an allocator is specified. If allocator is set, the beneficiary will be forwarded to the allocator for it to use. If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it. If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n/// @custom:member lockedUntil Specifies if the split should be unchangeable until the specified time, with the exception of extending the locked period.\\n/// @custom:member allocator If an allocator is specified, funds will be sent to the allocator contract along with all properties of this split.\\nstruct JBSplit {\\n  bool preferClaimed;\\n  bool preferAddToBalance;\\n  uint256 percent;\\n  uint256 projectId;\\n  address payable beneficiary;\\n  uint256 lockedUntil;\\n  IJBSplitAllocator allocator;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBController3_0_1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBController3_0_1 {\\n  function reservedTokenBalanceOf(uint256 projectId) external view returns (uint256);\\n\\n  function totalOutstandingTokensOf(uint256 projectId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBFundAccessConstraintsStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport {JBFundAccessConstraints} from './../structs/JBFundAccessConstraints.sol';\\nimport {IJBPaymentTerminal} from './IJBPaymentTerminal.sol';\\n\\ninterface IJBFundAccessConstraintsStore is IERC165 {\\n  event SetFundAccessConstraints(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed projectId,\\n    JBFundAccessConstraints constraints,\\n    address caller\\n  );\\n\\n  function distributionLimitOf(\\n    uint256 projectId,\\n    uint256 configuration,\\n    IJBPaymentTerminal terminal,\\n    address token\\n  ) external view returns (uint256 distributionLimit, uint256 distributionLimitCurrency);\\n\\n  function overflowAllowanceOf(\\n    uint256 projectId,\\n    uint256 configuration,\\n    IJBPaymentTerminal terminal,\\n    address token\\n  ) external view returns (uint256 overflowAllowance, uint256 overflowAllowanceCurrency);\\n\\n  function setFor(\\n    uint256 projectId,\\n    uint256 configuration,\\n    JBFundAccessConstraints[] memory fundAccessConstaints\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBMigratable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBMigratable {\\n  function prepForMigrationOf(uint256 projectId, address from) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBSplitsStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {JBGroupedSplits} from './../structs/JBGroupedSplits.sol';\\nimport {JBSplit} from './../structs/JBSplit.sol';\\nimport {IJBDirectory} from './IJBDirectory.sol';\\nimport {IJBProjects} from './IJBProjects.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 projectId,\\n    uint256 domain,\\n    uint256 group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(uint256 projectId, uint256 domain, JBGroupedSplits[] memory groupedSplits) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBTokenStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IJBFundingCycleStore} from './IJBFundingCycleStore.sol';\\nimport {IJBProjects} from './IJBProjects.sol';\\nimport {IJBToken} from './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 initialUnclaimedBalance,\\n    uint256 initialClaimedBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 initialUnclaimedBalance,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event Set(uint256 indexed projectId, IJBToken indexed newToken, address caller);\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function fundingCycleStore() external view returns (IJBFundingCycleStore);\\n\\n  function unclaimedBalanceOf(address holder, uint256 projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 projectId) external view returns (uint256);\\n\\n  function balanceOf(address holder, uint256 projectId) external view returns (uint256 result);\\n\\n  function issueFor(\\n    uint256 projectId,\\n    string calldata name,\\n    string calldata symbol\\n  ) external returns (IJBToken token);\\n\\n  function setFor(uint256 projectId, IJBToken token) external;\\n\\n  function burnFrom(\\n    address holder,\\n    uint256 projectId,\\n    uint256 amount,\\n    bool preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address holder,\\n    uint256 projectId,\\n    uint256 amount,\\n    bool preferClaimedTokens\\n  ) external;\\n\\n  function claimFor(address holder, uint256 projectId, uint256 amount) external;\\n\\n  function transferFrom(\\n    address holder,\\n    uint256 projectId,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBOperatorData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @custom:member operator The address of the operator.\\n/// @custom:member domain The domain within which the operator is being given permissions. A domain of 0 is a wildcard domain, which gives an operator access to all domains.\\n/// @custom:member permissionIndexes The indexes of the permissions the operator is being given.\\nstruct JBOperatorData {\\n  address operator;\\n  uint256 domain;\\n  uint256[] permissionIndexes;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBGlobalFundingCycleMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @custom:member allowSetTerminals A flag indicating if setting terminals should be allowed during this funding cycle.\\n/// @custom:member allowSetController A flag indicating if setting a new controller should be allowed during this funding cycle.\\n/// @custom:member pauseTransfers A flag indicating if the project token transfer functionality should be paused during the funding cycle.\\nstruct JBGlobalFundingCycleMetadata {\\n  bool allowSetTerminals;\\n  bool allowSetController;\\n  bool pauseTransfers;\\n}\\n\"\r\n    },\r\n    \"contracts/enums/JB721GovernanceType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum JB721GovernanceType {\\n    NONE,\\n    ONCHAIN\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPrices.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IJBPriceFeed} from './IJBPriceFeed.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, IJBPriceFeed feed);\\n\\n  function feedFor(uint256 currency, uint256 base) external view returns (IJBPriceFeed);\\n\\n  function priceFor(\\n    uint256 currency,\\n    uint256 base,\\n    uint256 decimals\\n  ) external view returns (uint256);\\n\\n  function addFeedFor(uint256 currency, uint256 base, IJBPriceFeed priceFeed) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJB721Delegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IJBDirectory } from \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBDirectory.sol\\\";\\n\\ninterface IJB721Delegate {\\n    function projectId() external view returns (uint256);\\n\\n    function directory() external view returns (IJBDirectory);\\n\\n    function payMetadataDelegateId() external view returns (bytes4);\\n\\n    function redeemMetadataDelegateId() external view returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJB721TokenUriResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJB721TokenUriResolver {\\n    function tokenUriOf(address nft, uint256 tokenId) external view returns (string memory tokenUri);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IJBTiered721DelegateStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IJB721TokenUriResolver } from \\\"./IJB721TokenUriResolver.sol\\\";\\nimport { JB721TierParams } from \\\"./../structs/JB721TierParams.sol\\\";\\nimport { JB721Tier } from \\\"./../structs/JB721Tier.sol\\\";\\nimport { JBTiered721Flags } from \\\"./../structs/JBTiered721Flags.sol\\\";\\n\\ninterface IJBTiered721DelegateStore {\\n    event CleanTiers(address indexed nft, address caller);\\n\\n    function totalSupplyOf(address _nft) external view returns (uint256);\\n\\n    function balanceOf(address _nft, address _owner) external view returns (uint256);\\n\\n    function maxTierIdOf(address _nft) external view returns (uint256);\\n\\n    function tiersOf(\\n        address nft,\\n        uint256[] calldata categories,\\n        bool includeResolvedUri,\\n        uint256 startingSortIndex,\\n        uint256 size\\n    ) external view returns (JB721Tier[] memory tiers);\\n\\n    function tierOf(address nft, uint256 id, bool includeResolvedUri) external view returns (JB721Tier memory tier);\\n\\n    function tierBalanceOf(address nft, address owner, uint256 tier) external view returns (uint256);\\n\\n    function tierOfTokenId(address nft, uint256 tokenId, bool includeResolvedUri)\\n        external\\n        view\\n        returns (JB721Tier memory tier);\\n\\n    function tierIdOfToken(uint256 tokenId) external pure returns (uint256);\\n\\n    function encodedIPFSUriOf(address nft, uint256 tierId) external view returns (bytes32);\\n\\n    function redemptionWeightOf(address nft, uint256[] memory tokenIds) external view returns (uint256 weight);\\n\\n    function totalRedemptionWeight(address nft) external view returns (uint256 weight);\\n\\n    function numberOfReservedTokensOutstandingFor(address nft, uint256 tierId) external view returns (uint256);\\n\\n    function numberOfReservesMintedFor(address nft, uint256 tierId) external view returns (uint256);\\n\\n    function numberOfBurnedFor(address nft, uint256 tierId) external view returns (uint256);\\n\\n    function isTierRemoved(address nft, uint256 tierId) external view returns (bool);\\n\\n    function flagsOf(address nft) external view returns (JBTiered721Flags memory);\\n\\n    function votingUnitsOf(address nft, address account) external view returns (uint256 units);\\n\\n    function tierVotingUnitsOf(address nft, address account, uint256 tierId) external view returns (uint256 units);\\n\\n    function defaultReservedTokenBeneficiaryOf(address nft) external view returns (address);\\n\\n    function reservedTokenBeneficiaryOf(address nft, uint256 tierId) external view returns (address);\\n\\n    function tokenUriResolverOf(address nft) external view returns (IJB721TokenUriResolver);\\n\\n    function encodedTierIPFSUriOf(address nft, uint256 tokenId) external view returns (bytes32);\\n\\n    function recordAddTiers(JB721TierParams[] memory tierData) external returns (uint256[] memory tierIds);\\n\\n    function recordMintReservesFor(uint256 tierId, uint256 count) external returns (uint256[] memory tokenIds);\\n\\n    function recordBurn(uint256[] memory tokenIds) external;\\n\\n    function recordMint(uint256 amount, uint16[] calldata tierIds, bool isManualMint)\\n        external\\n        returns (uint256[] memory tokenIds, uint256 leftoverAmount);\\n\\n    function recordTransferForTier(uint256 tierId, address from, address to) external;\\n\\n    function recordRemoveTierIds(uint256[] memory tierIds) external;\\n\\n    function recordSetTokenUriResolver(IJB721TokenUriResolver resolver) external;\\n\\n    function recordSetEncodedIPFSUriOf(uint256 tierId, bytes32 encodedIPFSUri) external;\\n\\n    function recordFlags(JBTiered721Flags calldata flag) external;\\n\\n    function cleanTiers(address nft) external;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JB721PricingParams.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPrices.sol\\\";\\nimport \\\"./JB721TierParams.sol\\\";\\n\\n/// @custom:member tiers The tiers to set.\\n/// @custom:member currency The currency that the tier contribution floors are denoted in.\\n/// @custom:member decimals The number of decimals included in the tier contribution floor fixed point numbers.\\n/// @custom:member prices A contract that exposes price feeds that can be used to resolved the value of a contributions that are sent in different currencies. Set to the zero address if payments must be made in `currency`.\\nstruct JB721PricingParams {\\n    JB721TierParams[] tiers;\\n    uint48 currency;\\n    uint48 decimals;\\n    IJBPrices prices;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JB721TierParams.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @custom:member price The minimum contribution to qualify for this tier.\\n/// @custom:member initialQuantity The initial `remainingAllowance` value when the tier was set.\\n/// @custom:member votingUnits The amount of voting significance to give this tier compared to others.\\n/// @custom:member reservedRate The number of minted tokens needed in the tier to allow for minting another reserved token.\\n/// @custom:member reservedRateBeneficiary The beneificary of the reserved tokens for this tier.\\n/// @custom:member encodedIPFSUri The URI to use for each token within the tier.\\n/// @custom:member category A category to group NFT tiers by.\\n/// @custom:member allowManualMint A flag indicating if the contract's owner can mint from this tier on demand.\\n/// @custom:member shouldUseReservedRateBeneficiaryAsDefault A flag indicating if the `reservedTokenBeneficiary` should be stored as the default beneficiary for all tiers.\\n/// @custom:member transfersPausable A flag indicating if transfers from this tier can be pausable. \\n/// @custom:member useVotingUnits A flag indicating if the voting units override should be used over the price as the tier's voting units.\\nstruct JB721TierParams {\\n    uint104 price;\\n    uint32 initialQuantity;\\n    uint32 votingUnits;\\n    uint16 reservedRate;\\n    address reservedTokenBeneficiary;\\n    bytes32 encodedIPFSUri;\\n    uint24 category;\\n    bool allowManualMint;\\n    bool shouldUseReservedTokenBeneficiaryAsDefault;\\n    bool transfersPausable;\\n    bool useVotingUnits;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JBTiered721Flags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @custom:member lockReservedTokenChanges A flag indicating if reserved tokens can change over time by adding new tiers with a reserved rate.\\n/// @custom:member lockVotingUnitChanges A flag indicating if voting unit expectations can change over time by adding new tiers with voting units.\\n/// @custom:member lockManualMintingChanges A flag indicating if manual minting expectations can change over time by adding new tiers with manual minting.\\n/// @custom:member preventOverspending A flag indicating if payments sending more than the value the NFTs being minted are worth should be reverted.\\nstruct JBTiered721Flags {\\n    bool lockReservedTokenChanges;\\n    bool lockVotingUnitChanges;\\n    bool lockManualMintingChanges;\\n    bool preventOverspending;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JBTiered721MintReservesForTiersData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @custom:member tierId The ID of the tier to mint within.\\n/// @custom:member count The number of reserved tokens to mint.\\nstruct JBTiered721MintReservesForTiersData {\\n    uint256 tierId;\\n    uint256 count;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JBTiered721MintForTiersData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @custom:member tierIds The IDs of the tier to mint within.\\n/// @custom:member beneficiary The beneficiary to mint for.\\nstruct JBTiered721MintForTiersData {\\n    uint16[] tierIds;\\n    address beneficiary;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JBPayDataSourceFundingCycleMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@jbx-protocol/juice-contracts-v3/contracts/structs/JBGlobalFundingCycleMetadata.sol\\\";\\n\\n/// @custom:member global Data used globally in non-migratable ecosystem contracts.\\n/// @custom:member reservedRate The reserved rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_RESERVED_RATE`.\\n/// @custom:member redemptionRate The redemption rate of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n/// @custom:member ballotRedemptionRate The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of `JBConstants.MAX_REDEMPTION_RATE`.\\n/// @custom:member pausePay A flag indicating if the pay functionality should be paused during the funding cycle.\\n/// @custom:member pauseDistributions A flag indicating if the distribute functionality should be paused during the funding cycle.\\n/// @custom:member pauseRedeem A flag indicating if the redeem functionality should be paused during the funding cycle.\\n/// @custom:member pauseBurn A flag indicating if the burn functionality should be paused during the funding cycle.\\n/// @custom:member allowMinting A flag indicating if minting tokens should be allowed during this funding cycle.\\n/// @custom:member allowTerminalMigration A flag indicating if migrating terminals should be allowed during this funding cycle.\\n/// @custom:member allowControllerMigration A flag indicating if migrating controllers should be allowed during this funding cycle.\\n/// @custom:member holdFees A flag indicating if fees should be held during this funding cycle.\\n/// @custom:member preferClaimedTokenOverride A flag indicating if claimed tokens should always be prefered to unclaimed tokens when minting.\\n/// @custom:member useTotalOverflowForRedemptions A flag indicating if redemptions should use the project's balance held in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.\\n/// @custom:member useDataSourceForRedeem A flag indicating if the data source should be used for redeem transactions during this funding cycle.\\n/// @custom:member metadata Metadata of the metadata, up to uint8 in size.\\nstruct JBPayDataSourceFundingCycleMetadata {\\n    JBGlobalFundingCycleMetadata global;\\n    uint256 reservedRate;\\n    uint256 redemptionRate;\\n    uint256 ballotRedemptionRate;\\n    bool pausePay;\\n    bool pauseDistributions;\\n    bool pauseRedeem;\\n    bool pauseBurn;\\n    bool allowMinting;\\n    bool allowTerminalMigration;\\n    bool allowControllerMigration;\\n    bool holdFees;\\n    bool preferClaimedTokenOverride;\\n    bool useTotalOverflowForRedemptions;\\n    bool useDataSourceForRedeem;\\n    uint256 metadata;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-ownable/src/struct/JBOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n  @member owner if set then the contract belongs to this static address.\\n  @member projectId if set then the contract belongs to whatever address owns the project\\n  @member permissionIndex the permission that is required on the specified project to act as the owner for this contract.\\n */\\nstruct JBOwner {\\n    address owner;\\n    uint88 projectId;\\n    uint8 permissionIndex;\\n}\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-ownable/src/interfaces/IJBOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBOwnable {\\n    // event OwnershipTransferred(\\n    //     address indexed previousOwner,\\n    //     address indexed newOwner\\n    // );\\n    event PermissionIndexChanged(uint8 newIndex);\\n\\n    function jbOwner()\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint88 projectOwner,\\n            uint8 permissionIndex\\n        );\\n\\n    function transferOwnershipToProject(uint256 _projectId) external;\\n\\n    function setPermissionIndex(uint8 _permissionIndex) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBTokenUriResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 projectId) external view returns (string memory tokenUri);\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBFundingCycleBallot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport {JBBallotState} from './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot is IERC165 {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(\\n    uint256 projectId,\\n    uint256 configuration,\\n    uint256 start\\n  ) external view returns (JBBallotState);\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBSplitAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport {JBSplitAllocationData} from '../structs/JBSplitAllocationData.sol';\\n\\n/// @title Split allocator\\n/// @notice Provide a way to process a single split with extra logic\\n/// @dev The contract address should be set as an allocator in the adequate split\\ninterface IJBSplitAllocator is IERC165 {\\n  /// @notice This function is called by JBPaymentTerminal.distributePayoutOf(..), during the processing of the split including it\\n  /// @dev Critical business logic should be protected by an appropriate access control. The token and/or eth are optimistically transfered to the allocator for its logic.\\n  /// @param data the data passed by the terminal, as a JBSplitAllocationData struct:\\n  function allocate(JBSplitAllocationData calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBToken {\\n  function projectId() external view returns (uint256);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply(uint256 projectId) external view returns (uint256);\\n\\n  function balanceOf(address account, uint256 projectId) external view returns (uint256);\\n\\n  function mint(uint256 projectId, address account, uint256 amount) external;\\n\\n  function burn(uint256 projectId, address account, uint256 amount) external;\\n\\n  function approve(uint256, address spender, uint256 amount) external;\\n\\n  function transfer(uint256 projectId, address to, uint256 amount) external;\\n\\n  function transferFrom(uint256 projectId, address from, address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/interfaces/IJBPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IJBPriceFeed {\\n  function currentPrice(uint256 targetDecimals) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/structs/JB721Tier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/// @custom:member id The tier's ID.\\n/// @custom:member price The price that must be paid to qualify for this tier.\\n/// @custom:member remainingQuantity Remaining number of tokens in this tier. Together with idCeiling this enables for consecutive, increasing token ids to be issued to contributors.\\n/// @custom:member initialQuantity The initial `remainingAllowance` value when the tier was set.\\n/// @custom:member votingUnits The amount of voting significance to give this tier compared to others.\\n/// @custom:member reservedRate The number of minted tokens needed in the tier to allow for minting another reserved token.\\n/// @custom:member reservedRateBeneficiary The beneificary of the reserved tokens for this tier.\\n/// @custom:member encodedIPFSUri The URI to use for each token within the tier.\\n/// @custom:member category A category to group NFT tiers by.\\n/// @custom:member allowManualMint A flag indicating if the contract's owner can mint from this tier on demand.\\n/// @custom:member transfersPausable A flag indicating if transfers from this tier can be pausable. \\n/// @custom:member resolvedTokenUri A resolved token URI if a resolver is included for the NFT to which this tier belongs.\\nstruct JB721Tier {\\n    uint256 id;\\n    uint256 price;\\n    uint256 remainingQuantity;\\n    uint256 initialQuantity;\\n    uint256 votingUnits;\\n    uint256 reservedRate;\\n    address reservedTokenBeneficiary;\\n    bytes32 encodedIPFSUri;\\n    uint256 category;\\n    bool allowManualMint;\\n    bool transfersPausable;\\n    string resolvedUri;\\n}\\n\"\r\n    },\r\n    \"node_modules/@jbx-protocol/juice-contracts-v3/contracts/structs/JBSplitAllocationData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {JBSplit} from './JBSplit.sol';\\n\\n/// @custom:member token The token being sent to the split allocator.\\n/// @custom:member amount The amount being sent to the split allocator, as a fixed point number.\\n/// @custom:member decimals The number of decimals in the amount.\\n/// @custom:member projectId The project to which the split belongs.\\n/// @custom:member group The group to which the split belongs.\\n/// @custom:member split The split that caused the allocation.\\nstruct JBSplitAllocationData {\\n  address token;\\n  uint256 amount;\\n  uint256 decimals;\\n  uint256 projectId;\\n  uint256 group;\\n  JBSplit split;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@jbx-protocol/=node_modules/@jbx-protocol/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@paulrberg/=node_modules/@paulrberg/\",\r\n      \"@prb/=node_modules/@prb/\",\r\n      \"prb-math/=node_modules/prb-math/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBTiered721DelegateDeployer\",\"name\":\"_delegateDeployer\",\"type\":\"address\"},{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"delegateDeployer\",\"outputs\":[{\"internalType\":\"contract IJBTiered721DelegateDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"fundingCycleStore\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"contract IJB721TokenUriResolver\",\"name\":\"tokenUriResolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"uint104\",\"name\":\"price\",\"type\":\"uint104\"},{\"internalType\":\"uint32\",\"name\":\"initialQuantity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"votingUnits\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"reservedRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"reservedTokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"encodedIPFSUri\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"category\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"allowManualMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUseReservedTokenBeneficiaryAsDefault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transfersPausable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useVotingUnits\",\"type\":\"bool\"}],\"internalType\":\"struct JB721TierParams[]\",\"name\":\"tiers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint48\",\"name\":\"currency\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"decimals\",\"type\":\"uint48\"},{\"internalType\":\"contract IJBPrices\",\"name\":\"prices\",\"type\":\"address\"}],\"internalType\":\"struct JB721PricingParams\",\"name\":\"pricing\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"reservedTokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBTiered721DelegateStore\",\"name\":\"store\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"lockReservedTokenChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockVotingUnitChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockManualMintingChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preventOverspending\",\"type\":\"bool\"}],\"internalType\":\"struct JBTiered721Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"enum JB721GovernanceType\",\"name\":\"governanceType\",\"type\":\"uint8\"}],\"internalType\":\"struct JBDeployTiered721DelegateData\",\"name\":\"_deployTiered721DelegateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowSetTerminals\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSetController\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseTransfers\",\"type\":\"bool\"}],\"internalType\":\"struct JBGlobalFundingCycleMetadata\",\"name\":\"global\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowMinting\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferClaimedTokenOverride\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useTotalOverflowForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBPayDataSourceFundingCycleMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferAddToBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"fundAccessConstraints\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IJBPaymentTerminal[]\",\"name\":\"terminals\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"internalType\":\"struct JBLaunchFundingCyclesData\",\"name\":\"_launchFundingCyclesData\",\"type\":\"tuple\"},{\"internalType\":\"contract IJBController3_1\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"launchFundingCyclesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"fundingCycleStore\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"contract IJB721TokenUriResolver\",\"name\":\"tokenUriResolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"uint104\",\"name\":\"price\",\"type\":\"uint104\"},{\"internalType\":\"uint32\",\"name\":\"initialQuantity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"votingUnits\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"reservedRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"reservedTokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"encodedIPFSUri\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"category\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"allowManualMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUseReservedTokenBeneficiaryAsDefault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transfersPausable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useVotingUnits\",\"type\":\"bool\"}],\"internalType\":\"struct JB721TierParams[]\",\"name\":\"tiers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint48\",\"name\":\"currency\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"decimals\",\"type\":\"uint48\"},{\"internalType\":\"contract IJBPrices\",\"name\":\"prices\",\"type\":\"address\"}],\"internalType\":\"struct JB721PricingParams\",\"name\":\"pricing\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"reservedTokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBTiered721DelegateStore\",\"name\":\"store\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"lockReservedTokenChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockVotingUnitChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockManualMintingChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preventOverspending\",\"type\":\"bool\"}],\"internalType\":\"struct JBTiered721Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"enum JB721GovernanceType\",\"name\":\"governanceType\",\"type\":\"uint8\"}],\"internalType\":\"struct JBDeployTiered721DelegateData\",\"name\":\"_deployTiered721DelegateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"domain\",\"type\":\"uint256\"}],\"internalType\":\"struct JBProjectMetadata\",\"name\":\"projectMetadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowSetTerminals\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSetController\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseTransfers\",\"type\":\"bool\"}],\"internalType\":\"struct JBGlobalFundingCycleMetadata\",\"name\":\"global\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowMinting\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferClaimedTokenOverride\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useTotalOverflowForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBPayDataSourceFundingCycleMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferAddToBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"fundAccessConstraints\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IJBPaymentTerminal[]\",\"name\":\"terminals\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"internalType\":\"struct JBLaunchProjectData\",\"name\":\"_launchProjectData\",\"type\":\"tuple\"},{\"internalType\":\"contract IJBController3_1\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"launchProjectFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"fundingCycleStore\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"contract IJB721TokenUriResolver\",\"name\":\"tokenUriResolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"uint104\",\"name\":\"price\",\"type\":\"uint104\"},{\"internalType\":\"uint32\",\"name\":\"initialQuantity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"votingUnits\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"reservedRate\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"reservedTokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"encodedIPFSUri\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"category\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"allowManualMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUseReservedTokenBeneficiaryAsDefault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transfersPausable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useVotingUnits\",\"type\":\"bool\"}],\"internalType\":\"struct JB721TierParams[]\",\"name\":\"tiers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint48\",\"name\":\"currency\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"decimals\",\"type\":\"uint48\"},{\"internalType\":\"contract IJBPrices\",\"name\":\"prices\",\"type\":\"address\"}],\"internalType\":\"struct JB721PricingParams\",\"name\":\"pricing\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"reservedTokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IJBTiered721DelegateStore\",\"name\":\"store\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"lockReservedTokenChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockVotingUnitChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockManualMintingChanges\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preventOverspending\",\"type\":\"bool\"}],\"internalType\":\"struct JBTiered721Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"enum JB721GovernanceType\",\"name\":\"governanceType\",\"type\":\"uint8\"}],\"internalType\":\"struct JBDeployTiered721DelegateData\",\"name\":\"_deployTiered721DelegateData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"}],\"internalType\":\"struct JBFundingCycleData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowSetTerminals\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowSetController\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseTransfers\",\"type\":\"bool\"}],\"internalType\":\"struct JBGlobalFundingCycleMetadata\",\"name\":\"global\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"reservedRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ballotRedemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pausePay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseDistributions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseRedeem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pauseBurn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowMinting\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowTerminalMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowControllerMigration\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"holdFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferClaimedTokenOverride\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useTotalOverflowForRedemptions\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDataSourceForRedeem\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBPayDataSourceFundingCycleMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"mustStartAtOrAfter\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preferAddToBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"internalType\":\"struct JBSplit[]\",\"name\":\"splits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct JBGroupedSplits[]\",\"name\":\"groupedSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionLimitCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overflowAllowanceCurrency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundAccessConstraints[]\",\"name\":\"fundAccessConstraints\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"internalType\":\"struct JBReconfigureFundingCyclesData\",\"name\":\"_reconfigureFundingCyclesData\",\"type\":\"tuple\"},{\"internalType\":\"contract IJBController3_1\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"reconfigureFundingCyclesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JBTiered721DelegateProjectDeployer", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000065572fb928b46f9adb7cfe5a4c41226f636161ea0000000000000000000000005c9f2fd6ce9e600dd9c4ca4cd67e777cbab6353b0000000000000000000000006f3c5afca0c9edf3926ef2ddf17c8ae6391afefb", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}