{"SourceCode": "// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\n// import \"@openzeppelin/contracts/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    constructor() public {\r\n        _registerInterface(\r\n            ERC1155Receiver(0).onERC1155Received.selector ^\r\n            ERC1155Receiver(0).onERC1155BatchReceived.selector\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/EnumerableMap.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IAlpaToken.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IAlpaToken is IERC20 {\r\n    function mint(address _to, uint256 _amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IAlpaSupplier.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\ninterface IAlpaSupplier {\r\n    /**\r\n     * @dev mint and distribute ALPA to caller\r\n     * NOTE: caller must be approved consumer\r\n     */\r\n    function distribute(uint256 _since) external returns (uint256);\r\n\r\n    /**\r\n     * @dev returns number of ALPA _consumer is expected to recieved at current block\r\n     */\r\n    function preview(address _consumer, uint256 _since)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/ICryptoAlpaca.sol\r\n\r\n\r\n// pragma solidity =0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\ninterface ICryptoAlpaca is IERC1155 {\r\n    function getAlpaca(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 id,\r\n            bool isReady,\r\n            uint256 cooldownEndBlock,\r\n            uint256 birthTime,\r\n            uint256 matronId,\r\n            uint256 sireId,\r\n            uint256 hatchingCost,\r\n            uint256 hatchingCostMultiplier,\r\n            uint256 hatchCostMultiplierEndBlock,\r\n            uint256 generation,\r\n            uint256 gene,\r\n            uint256 energy,\r\n            uint256 state\r\n        );\r\n\r\n    function hasPermissionToBreedAsSire(address _addr, uint256 _id)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function grandPermissionToBreed(address _addr, uint256 _sireId) external;\r\n\r\n    function clearPermissionToBreed(uint256 _alpacaId) external;\r\n\r\n    function hatch(uint256 _matronId, uint256 _sireId)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function crack(uint256 _id) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/ICryptoAlpacaEnergyListener.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/introspection/IERC165.sol\";\r\n\r\ninterface ICryptoAlpacaEnergyListener is IERC165 {\r\n    /**\r\n        @dev Handles the Alpaca energy change callback.\r\n        @param id The id of the Alpaca which the energy changed\r\n        @param oldEnergy The ID of the token being transferred\r\n        @param newEnergy The amount of tokens being transferred\r\n    */\r\n    function onCryptoAlpacaEnergyChanged(\r\n        uint256 id,\r\n        uint256 oldEnergy,\r\n        uint256 newEnergy\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/CryptoAlpacaEnergyListener.sol\r\n\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/introspection/ERC165.sol\";\r\n// import \"contracts/interfaces/ICryptoAlpacaEnergyListener.sol\";\r\n\r\nabstract contract CryptoAlpacaEnergyListener is\r\n    ERC165,\r\n    ICryptoAlpacaEnergyListener\r\n{\r\n    constructor() public {\r\n        _registerInterface(\r\n            CryptoAlpacaEnergyListener(0).onCryptoAlpacaEnergyChanged.selector\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/AlpacaFarm/AlpacaFarm.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import \"@openzeppelin/contracts/utils/EnumerableMap.sol\";\r\n// import \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/math/Math.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// import \"contracts/interfaces/IAlpaToken.sol\";\r\n// import \"contracts/interfaces/IAlpaSupplier.sol\";\r\n// import \"contracts/interfaces/ICryptoAlpaca.sol\";\r\n// import \"contracts/interfaces/CryptoAlpacaEnergyListener.sol\";\r\n\r\n// Alpaca Farm manages your LP and takes good care of you alpaca!\r\ncontract AlpacaFarm is\r\n    Ownable,\r\n    ReentrancyGuard,\r\n    ERC1155Receiver,\r\n    CryptoAlpacaEnergyListener\r\n{\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n\r\n    event Withdraw(address indexed user, uint256 amount);\r\n\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n\r\n    /* ========== STRUCT ========== */\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        // How many LP tokens the user has provided.\r\n        uint256 amount;\r\n        // Reward debt. What has been paid so far\r\n        uint256 rewardDebt;\r\n        // alpaca user transfered to AlpacaFarm to manage the LP assets\r\n        uint256 alpacaID;\r\n        // alpaca's energy\r\n        uint256 alpacaEnergy;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        // Address of LP token contract.\r\n        IERC20 lpToken;\r\n        // Last block number that ALPAs distribution occurs.\r\n        uint256 lastRewardBlock;\r\n        // Accumulated ALPAs per share. Share is determined by LP deposit and total alpaca's energy\r\n        uint256 accAlpaPerShare;\r\n        // Accumulated Share\r\n        uint256 accShare;\r\n    }\r\n\r\n    /* ========== STATES ========== */\r\n\r\n    // The ALPA ERC20 token\r\n    IAlpaToken public alpa;\r\n\r\n    // Crypto alpaca contract\r\n    ICryptoAlpaca public cryptoAlpaca;\r\n\r\n    // Alpa Supplier\r\n    IAlpaSupplier public supplier;\r\n\r\n    // Energy if user does not have any alpaca transfered to AlpacaFarm to manage the LP assets\r\n    uint256 public constant EMPTY_ALPACA_ENERGY = 1;\r\n\r\n    // farm pool info\r\n    PoolInfo public poolInfo;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    // map that keep tracks of the alpaca's original owner so contract knows where to send back when\r\n    // users swapped or retrieved their alpacas\r\n    EnumerableMap.UintToAddressMap private alpacaOriginalOwner;\r\n\r\n    uint256 public constant SAFE_MULTIPLIER = 1e16;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        IAlpaToken _alpa,\r\n        ICryptoAlpaca _cryptoAlpaca,\r\n        IAlpaSupplier _supplier,\r\n        IERC20 lpToken,\r\n        uint256 _startBlock\r\n    ) public {\r\n        alpa = _alpa;\r\n        cryptoAlpaca = _cryptoAlpaca;\r\n        supplier = _supplier;\r\n        poolInfo = PoolInfo({\r\n            lpToken: lpToken,\r\n            lastRewardBlock: block.number.max(_startBlock),\r\n            accAlpaPerShare: 0,\r\n            accShare: 0\r\n        });\r\n    }\r\n\r\n    /* ========== PUBLIC ========== */\r\n\r\n    /**\r\n     * @dev View `_user` pending ALPAs\r\n     */\r\n    function pendingAlpa(address _user) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        uint256 accAlpaPerShare = poolInfo.accAlpaPerShare;\r\n        uint256 lpSupply = poolInfo.lpToken.balanceOf(address(this));\r\n\r\n        if (block.number > poolInfo.lastRewardBlock && lpSupply != 0) {\r\n            uint256 total = supplier.preview(\r\n                address(this),\r\n                poolInfo.lastRewardBlock\r\n            );\r\n\r\n            accAlpaPerShare = accAlpaPerShare.add(\r\n                total.mul(SAFE_MULTIPLIER).div(poolInfo.accShare)\r\n            );\r\n        }\r\n        return\r\n            user\r\n                .amount\r\n                .mul(_safeUserAlpacaEnergy(user))\r\n                .mul(accAlpaPerShare)\r\n                .div(SAFE_MULTIPLIER)\r\n                .sub(user.rewardDebt);\r\n    }\r\n\r\n    /**\r\n     * @dev Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    function updatePool() public {\r\n        if (block.number <= poolInfo.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 lpSupply = poolInfo.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            poolInfo.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 reward = supplier.distribute(poolInfo.lastRewardBlock);\r\n        poolInfo.accAlpaPerShare = poolInfo.accAlpaPerShare.add(\r\n            reward.mul(SAFE_MULTIPLIER).div(poolInfo.accShare)\r\n        );\r\n\r\n        poolInfo.lastRewardBlock = block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieve caller's Alpaca.\r\n     */\r\n    function retrieve() public nonReentrant {\r\n        address sender = _msgSender();\r\n\r\n        UserInfo storage user = userInfo[sender];\r\n        require(user.alpacaID != 0, \"AlpacaFarm: you do not have any alpaca\");\r\n\r\n        if (user.amount > 0) {\r\n            updatePool();\r\n            uint256 pending = user\r\n                .amount\r\n                .mul(user.alpacaEnergy)\r\n                .mul(poolInfo.accAlpaPerShare)\r\n                .div(SAFE_MULTIPLIER)\r\n                .sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                _safeAlpaTransfer(msg.sender, pending);\r\n            }\r\n\r\n            user.rewardDebt = user\r\n                .amount\r\n                .mul(EMPTY_ALPACA_ENERGY)\r\n                .mul(poolInfo.accAlpaPerShare)\r\n                .div(SAFE_MULTIPLIER);\r\n\r\n            poolInfo.accShare = poolInfo.accShare.sub(\r\n                (user.alpacaEnergy.sub(1)).mul(user.amount)\r\n            );\r\n        }\r\n\r\n        uint256 prevAlpacaID = user.alpacaID;\r\n        user.alpacaID = 0;\r\n        user.alpacaEnergy = 0;\r\n\r\n        // Remove alpaca id to original user mapping\r\n        alpacaOriginalOwner.remove(prevAlpacaID);\r\n\r\n        cryptoAlpaca.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            prevAlpacaID,\r\n            1,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit LP tokens to AlpacaFarm for ALPA allocation.\r\n     */\r\n    function deposit(uint256 _amount) public nonReentrant {\r\n        updatePool();\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        if (user.amount > 0) {\r\n            uint256 pending = user\r\n                .amount\r\n                .mul(_safeUserAlpacaEnergy(user))\r\n                .mul(poolInfo.accAlpaPerShare)\r\n                .div(SAFE_MULTIPLIER)\r\n                .sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                _safeAlpaTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            poolInfo.lpToken.safeTransferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                _amount\r\n            );\r\n            user.amount = user.amount.add(_amount);\r\n            poolInfo.accShare = poolInfo.accShare.add(\r\n                _safeUserAlpacaEnergy(user).mul(_amount)\r\n            );\r\n        }\r\n\r\n        user.rewardDebt = user\r\n            .amount\r\n            .mul(_safeUserAlpacaEnergy(user))\r\n            .mul(poolInfo.accAlpaPerShare)\r\n            .div(SAFE_MULTIPLIER);\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw LP tokens from AlpacaFarm.\r\n     */\r\n    function withdraw(uint256 _amount) public nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount >= _amount, \"AlpacaFarm: invalid amount\");\r\n\r\n        updatePool();\r\n        uint256 pending = user\r\n            .amount\r\n            .mul(_safeUserAlpacaEnergy(user))\r\n            .mul(poolInfo.accAlpaPerShare)\r\n            .div(SAFE_MULTIPLIER)\r\n            .sub(user.rewardDebt);\r\n\r\n        if (pending > 0) {\r\n            _safeAlpaTransfer(msg.sender, pending);\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            poolInfo.lpToken.safeTransfer(address(msg.sender), _amount);\r\n            poolInfo.accShare = poolInfo.accShare.sub(\r\n                _safeUserAlpacaEnergy(user).mul(_amount)\r\n            );\r\n        }\r\n\r\n        user.rewardDebt = user\r\n            .amount\r\n            .mul(_safeUserAlpacaEnergy(user))\r\n            .mul(poolInfo.accAlpaPerShare)\r\n            .div(SAFE_MULTIPLIER);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards.\r\n    // EMERGENCY ONLY.\r\n    function emergencyWithdraw() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount > 0, \"AlpacaFarm: insufficient balance\");\r\n\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        poolInfo.lpToken.safeTransfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, amount);\r\n    }\r\n\r\n    /* ========== PRIVATE ========== */\r\n\r\n    function _safeUserAlpacaEnergy(UserInfo storage info)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (info.alpacaEnergy == 0) {\r\n            return EMPTY_ALPACA_ENERGY;\r\n        }\r\n        return info.alpacaEnergy;\r\n    }\r\n\r\n    // Safe alpa transfer function, just in case if rounding error causes pool to not have enough ALPAs.\r\n    function _safeAlpaTransfer(address _to, uint256 _amount) private {\r\n        uint256 alpaBal = alpa.balanceOf(address(this));\r\n        if (_amount > alpaBal) {\r\n            alpa.transfer(_to, alpaBal);\r\n        } else {\r\n            alpa.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /* ========== ERC1155Receiver ========== */\r\n\r\n    /**\r\n     * @dev onERC1155Received implementation per IERC1155Receiver spec\r\n     */\r\n    function onERC1155Received(\r\n        address,\r\n        address _from,\r\n        uint256 _id,\r\n        uint256,\r\n        bytes calldata\r\n    ) external override nonReentrant returns (bytes4) {\r\n        require(\r\n            msg.sender == address(cryptoAlpaca),\r\n            \"AlpacaFarm: received alpaca from unauthenticated contract\"\r\n        );\r\n\r\n        require(_id != 0, \"AlpacaFarm: invalid alpaca\");\r\n\r\n        UserInfo storage user = userInfo[_from];\r\n\r\n        // Fetch alpaca energy\r\n        (, , , , , , , , , , , uint256 energy, ) = cryptoAlpaca.getAlpaca(_id);\r\n        require(energy > 0, \"AlpacaFarm: invalid alpaca energy\");\r\n\r\n        if (user.amount > 0) {\r\n            updatePool();\r\n\r\n            uint256 pending = user\r\n                .amount\r\n                .mul(_safeUserAlpacaEnergy(user))\r\n                .mul(poolInfo.accAlpaPerShare)\r\n                .div(SAFE_MULTIPLIER)\r\n                .sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                _safeAlpaTransfer(_from, pending);\r\n            }\r\n            // Update user reward debt with new energy\r\n            user.rewardDebt = user\r\n                .amount\r\n                .mul(energy)\r\n                .mul(poolInfo.accAlpaPerShare)\r\n                .div(SAFE_MULTIPLIER);\r\n\r\n            poolInfo.accShare = poolInfo\r\n                .accShare\r\n                .add(energy.mul(user.amount))\r\n                .sub(_safeUserAlpacaEnergy(user).mul(user.amount));\r\n        }\r\n\r\n        // update user global\r\n        uint256 prevAlpacaID = user.alpacaID;\r\n        user.alpacaID = _id;\r\n        user.alpacaEnergy = energy;\r\n\r\n        // keep track of alpaca owner\r\n        alpacaOriginalOwner.set(_id, _from);\r\n\r\n        // Give original owner the right to breed\r\n        cryptoAlpaca.grandPermissionToBreed(_from, _id);\r\n\r\n        if (prevAlpacaID != 0) {\r\n            // Transfer alpaca back to owner\r\n            cryptoAlpaca.safeTransferFrom(\r\n                address(this),\r\n                _from,\r\n                prevAlpacaID,\r\n                1,\r\n                \"\"\r\n            );\r\n        }\r\n\r\n        return\r\n            bytes4(\r\n                keccak256(\r\n                    \"onERC1155Received(address,address,uint256,uint256,bytes)\"\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev onERC1155BatchReceived implementation per IERC1155Receiver spec\r\n     * User should not send using batch.\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) external override returns (bytes4) {\r\n        require(\r\n            false,\r\n            \"AlpacaFarm: only supports transfer single alpaca at a time (e.g safeTransferFrom)\"\r\n        );\r\n    }\r\n\r\n    /* ========== ICryptoAlpacaEnergyListener ========== */\r\n\r\n    /**\r\n        @dev Handles the Alpaca energy change callback.\r\n        @param _id The id of the Alpaca which the energy changed\r\n        @param _newEnergy The new alpaca energy it changed to\r\n    */\r\n    function onCryptoAlpacaEnergyChanged(\r\n        uint256 _id,\r\n        uint256,\r\n        uint256 _newEnergy\r\n    ) external override {\r\n        require(\r\n            msg.sender == address(cryptoAlpaca),\r\n            \"AlpacaFarm: received alpaca from unauthenticated contract\"\r\n        );\r\n\r\n        require(\r\n            alpacaOriginalOwner.contains(_id),\r\n            \"AlpacaFarm: original owner not found\"\r\n        );\r\n\r\n        address originalOwner = alpacaOriginalOwner.get(_id);\r\n        UserInfo storage user = userInfo[originalOwner];\r\n\r\n        if (user.amount > 0) {\r\n            updatePool();\r\n\r\n            uint256 pending = user\r\n                .amount\r\n                .mul(_safeUserAlpacaEnergy(user))\r\n                .mul(poolInfo.accAlpaPerShare)\r\n                .div(SAFE_MULTIPLIER)\r\n                .sub(user.rewardDebt);\r\n\r\n            if (pending > 0) {\r\n                _safeAlpaTransfer(originalOwner, pending);\r\n            }\r\n\r\n            // Update user reward debt with new energy\r\n            user.rewardDebt = user\r\n                .amount\r\n                .mul(_newEnergy)\r\n                .mul(poolInfo.accAlpaPerShare)\r\n                .div(SAFE_MULTIPLIER);\r\n\r\n            poolInfo.accShare = poolInfo\r\n                .accShare\r\n                .add(_newEnergy.mul(user.amount))\r\n                .sub(_safeUserAlpacaEnergy(user).mul(user.amount));\r\n        }\r\n\r\n        // update alpaca energy\r\n        user.alpacaEnergy = _newEnergy;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAlpaToken\",\"name\":\"_alpa\",\"type\":\"address\"},{\"internalType\":\"contract ICryptoAlpaca\",\"name\":\"_cryptoAlpaca\",\"type\":\"address\"},{\"internalType\":\"contract IAlpaSupplier\",\"name\":\"_supplier\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMPTY_ALPACA_ENERGY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpa\",\"outputs\":[{\"internalType\":\"contract IAlpaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoAlpaca\",\"outputs\":[{\"internalType\":\"contract ICryptoAlpaca\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newEnergy\",\"type\":\"uint256\"}],\"name\":\"onCryptoAlpacaEnergyChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAlpa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAlpaPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplier\",\"outputs\":[{\"internalType\":\"contract IAlpaSupplier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpacaID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpacaEnergy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlpacaFarm", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ca4408137eb639570f8e647d9bd7b7e8717514a000000000000000000000000c7e5e9434f4a71e6db978bd65b4d61d3593e5f2700000000000000000000000014285e0c66379c0af1b1e8e9092f67a66ccf5cd7000000000000000000000000441f9e2c89a343cefb390a8954b3b562f8f91eca0000000000000000000000000000000000000000000000000000000000ab1efc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://03be7096e9b54ae044d1e8e002eec77deba4797351ba17e05a2a81e5699d0b82"}