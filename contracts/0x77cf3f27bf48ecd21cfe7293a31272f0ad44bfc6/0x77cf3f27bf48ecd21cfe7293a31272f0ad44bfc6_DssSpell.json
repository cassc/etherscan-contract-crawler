{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.8.16 >=0.5.12 >=0.8.16 <0.9.0;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n//\r\n// CollateralOpts.sol -- Data structure for onboarding collateral\r\n//\r\n// Copyright (C) 2020-2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.8.16; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address clip;\r\n    address calc;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 startingPriceFactor;\r\n    uint256 breakerTolerance;\r\n    uint256 auctionDuration;\r\n    uint256 permittedDrop;\r\n    uint256 liquidationRatio;\r\n    uint256 kprFlatReward;\r\n    uint256 kprPctReward;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020-2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.8.16; */\r\n\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n    function suck(address, address, uint256) external;\r\n}\r\n\r\ninterface ClipLike {\r\n    function vat() external returns (address);\r\n    function dog() external returns (address);\r\n    function spotter() external view returns (address);\r\n    function calc() external view returns (address);\r\n    function ilk() external returns (bytes32);\r\n}\r\n\r\ninterface DogLike {\r\n    function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike_2 {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n    function setPriceTolerance(address, uint256) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function xlip(bytes32) external view returns (address);\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface LerpFactoryLike {\r\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n}\r\n\r\ninterface LerpLike {\r\n    function tick() external returns (uint256);\r\n}\r\n\r\ninterface RwaOracleLike {\r\n    function bump(bytes32 ilk, uint256 val) external;\r\n}\r\n\r\n\r\nlibrary DssExecLib {\r\n\r\n    /* WARNING\r\n\r\nThe following library code acts as an interface to the actual DssExecLib\r\nlibrary, which can be found in its own deployed contract. Only trust the actual\r\nlibrary's implementation.\r\n\r\n    */\r\n\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    uint256 constant internal WAD      = 10 ** 18;\r\n    uint256 constant internal RAY      = 10 ** 27;\r\n    uint256 constant internal RAD      = 10 ** 45;\r\n    uint256 constant internal THOUSAND = 10 ** 3;\r\n    uint256 constant internal MILLION  = 10 ** 6;\r\n    uint256 constant internal BPS_ONE_PCT             = 100;\r\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\r\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\r\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\r\n    function mkr()        public view returns (address) { return getChangelogAddress(\"MCD_GOV\"); }\r\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\r\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\r\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\r\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\r\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\r\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\r\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\r\n    function clip(bytes32 _ilk) public view returns (address _clip) {}\r\n    function flip(bytes32 _ilk) public view returns (address _flip) {}\r\n    function calc(bytes32 _ilk) public view returns (address _calc) {}\r\n    function getChangelogAddress(bytes32 _key) public view returns (address) {}\r\n    function setAuthority(address _base, address _authority) public {}\r\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {}\r\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {}\r\n    function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {}\r\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {}\r\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {}\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020-2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.8.16; */\r\n\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface OracleLike_1 {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public view virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    function description() external view virtual returns (string memory);\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external view returns (uint256 castTime) {\r\n        require(eta <= type(uint40).max);\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020-2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.8.16; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function description() external view returns (string memory);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    function description() external view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. block.timestamp + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(uint256 _expiration, address _spellAction) {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(block.timestamp <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = block.timestamp + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// lib/dss-test/lib/dss-interfaces/src/ERC/GemAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// A base ERC-20 abstract class\r\n// https://eips.ethereum.org/EIPS/eip-20\r\ninterface GemAbstract {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// SPDX-FileCopyrightText: \u00a9 2020 Dai Foundation <www.daifoundation.org>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.8.16; */\r\n\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n/* import { GemAbstract } from \"dss-interfaces/ERC/GemAbstract.sol\"; */\r\n\r\ninterface ProxyLike {\r\n    function exec(address target, bytes calldata args) external payable returns (bytes memory out);\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: cast keccak -- \"$(wget 'https://raw.githubusercontent.com/makerdao/community/5156da9ff964a917fa90d55413b2ad2f8f8341ac/governance/votes/Executive%20Vote%20-%20November%2015%2C%202023.md' -q -O - 2>/dev/null)\"\r\n    string public constant override description =\r\n        \"2023-11-15 MakerDAO Executive Spell | Hash: 0x5831e082f6599a8bdd8c772f43836bce1170f121e2d47218069a03feb3638ccc\";\r\n\r\n    // Set office hours according to the summary\r\n    function officeHours() public pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    // ---------- Pass HVB Resolutions ----------\r\n    // Forum: https://forum.makerdao.com/t/huntingdon-valley-bank-transaction-documents-on-permaweb/16264/19\r\n    // Poll: https://vote.makerdao.com/polling/QmNgKzcG\r\n    // Updated Standing Instructions to Escrow Agent - QmWVWXckY482WLTtCFv3x45DFioV1K8mfRM3FVrodqUDud\r\n    // Approval of New Payment Instructions to Galaxy Digital Trading Cayman LLC - QmSbwqULr66CiCvNips93vwTrvoTe4i2rJVmho7QfmyqZG\r\n\r\n    // Comma-separated list of DAO resolutions IPFS hashes.\r\n    string public constant dao_resolutions = \"QmWVWXckY482WLTtCFv3x45DFioV1K8mfRM3FVrodqUDud,QmSbwqULr66CiCvNips93vwTrvoTe4i2rJVmho7QfmyqZG\";\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmVp4mhhbwWGTfbh2BzwQB9eiBrQBKiqcPRZCaAxNUaar6\r\n    //\r\n    // uint256 internal constant X_PCT_RATE      = ;\r\n\r\n    // --- MATH ---\r\n    uint256 internal constant MILLION                = 10 ** 6;\r\n\r\n    GemAbstract internal immutable MKR               = GemAbstract(DssExecLib.mkr());\r\n\r\n    // ---------- Spark Proxy ----------\r\n    // Spark Proxy: https://github.com/marsfoundation/sparklend/blob/d42587ba36523dcff24a4c827dc29ab71cd0808b/script/output/5/primary-sce-latest.json#L2\r\n    address internal constant SPARK_PROXY            = 0x3300f198988e4C9C63F75dF86De36421f06af8c4;\r\n\r\n    // ---------- Trigger Spark Proxy Spell ----------\r\n    address internal constant SPARK_SPELL            = 0xDa69603384Ef825E52FD5B8bEF656ff62Fe19703;\r\n\r\n    // ---------- Whistleblower Bounty ----------\r\n    address internal constant VENICE_TREE            = 0xCDDd2A697d472d1e8a0B1B188646c756d097b058;\r\n\r\n    // ---------- Launch Project Funds ----------\r\n    address internal constant LAUNCH_PROJECT_FUNDING = 0x3C5142F28567E6a0F172fd0BaaF1f2847f49D02F;\r\n\r\n    // ---------- Delegates ----------\r\n    address internal constant DEFENSOR               = 0x9542b441d65B6BF4dDdd3d4D2a66D8dCB9EE07a9;\r\n    address internal constant TRUENAME               = 0x612F7924c367575a0Edf21333D96b15F1B345A5d;\r\n    address internal constant BONAPUBLICA            = 0x167c1a762B08D7e78dbF8f24e5C3f1Ab415021D3;\r\n    address internal constant CLOAKY                 = 0x869b6d5d8FA7f4FFdaCA4D23FFE0735c5eD1F818;\r\n    address internal constant NAVIGATOR              = 0x11406a9CC2e37425F15f920F494A51133ac93072;\r\n    address internal constant VIGILANT               = 0x2474937cB55500601BCCE9f4cb0A0A72Dc226F61;\r\n    address internal constant UPMAKER                = 0xbB819DF169670DC71A16F58F55956FE642cc6BcD;\r\n    address internal constant PBG                    = 0x8D4df847dB7FfE0B46AF084fE031F7691C6478c2;\r\n    address internal constant PALC                   = 0x78Deac4F87BD8007b9cb56B8d53889ed5374e83A;\r\n    address internal constant BLUE                   = 0xb6C09680D822F162449cdFB8248a7D3FC26Ec9Bf;\r\n    address internal constant JAG                    = 0x58D1ec57E4294E4fe650D1CB12b96AE34349556f;\r\n\r\n    function actions() public override {\r\n        // ---------- Spark Proxy-Spell ----------\r\n        // Forum: https://forum.makerdao.com/t/proposal-to-adjust-sparklend-parameters/22542\r\n        // Poll: https://vote.makerdao.com/polling/QmaBLbxP\r\n        // Poll: https://vote.makerdao.com/polling/QmZwRgr5\r\n        // Poll: https://vote.makerdao.com/polling/QmQPrHsm\r\n        // Poll: https://vote.makerdao.com/polling/QmRG9qUp\r\n        // Poll: https://vote.makerdao.com/polling/QmQjKpbU\r\n\r\n        // Gnosis Chain - Increase wstETH Supply Cap to 10,000 wstETH\r\n        // Ethereum - Set DAI Market Maximum Loan-to-Value to Zero Percent\r\n        // Ethereum - Reactivate WBTC and Optimize Parameters for Current Market Conditions\r\n        // Ethereum - Increase rETH & wstETH Supply Caps\r\n        // Ethereum & Gnosis Chain - Adjust ETH Market Interest Rate Models\r\n        ProxyLike(SPARK_PROXY).exec(SPARK_SPELL, abi.encodeWithSignature(\"execute()\"));\r\n\r\n\r\n        // ----- Adjust Spark Protocol D3M Maximum Debt Ceiling -----\r\n        // Forum: https://forum.makerdao.com/t/proposal-to-adjust-sparklend-parameters/22542\r\n        // Poll: https://vote.makerdao.com/polling/QmVbrypf#poll-detail\r\n\r\n        // Increase the DIRECT-SPARK-DAI Maximum Debt Ceiling from 400 million DAI to 800 million DAI.\r\n        // Keep gap and ttl at current settings (20 million and  hours respectively)\r\n        DssExecLib.setIlkAutoLineDebtCeiling(\"DIRECT-SPARK-DAI\", 800 * MILLION);\r\n\r\n\r\n        // ---------- Launch Project Funds Transfer ----------\r\n        // Forum: https://forum.makerdao.com/t/utilization-of-the-launch-project-under-the-accessibility-scope/21468/6\r\n\r\n        // Launch Project - 2200000.00 DAI - 0x3C5142F28567E6a0F172fd0BaaF1f2847f49D02F\r\n        DssExecLib.sendPaymentFromSurplusBuffer(LAUNCH_PROJECT_FUNDING, 2_200_000);\r\n        // Launch Project - 500.00 MKR - 0x3C5142F28567E6a0F172fd0BaaF1f2847f49D02F\r\n        MKR.transfer(LAUNCH_PROJECT_FUNDING, 500.00 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n\r\n\r\n        // ---------- Whistleblower Bounty ----------\r\n        // Forum: https://forum.makerdao.com/t/ads-derecognition-due-to-operational-security-breach/22532\r\n        // MIP: https://mips.makerdao.com/mips/details/MIP101#2-6-6-aligned-delegate-operational-security\r\n\r\n        // VeniceTree - 27.78 MKR - 0xCDDd2A697d472d1e8a0B1B188646c756d097b058\r\n        MKR.transfer(VENICE_TREE, 27.78 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n\r\n\r\n        // ---------- October Delegate Compensation  ----------\r\n        // Forum: https://forum.makerdao.com/t/october-2023-aligned-delegate-compensation/22732\r\n\r\n        // 0xDefensor - 41.67 MKR - 0x9542b441d65B6BF4dDdd3d4D2a66D8dCB9EE07a9\r\n        MKR.transfer(DEFENSOR,    41.67 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // TRUE NAME - 41.67 MKR - 0x612f7924c367575a0edf21333d96b15f1b345a5d\r\n        MKR.transfer(TRUENAME,    41.67 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // BONAPUBLICA - 41.67 MKR - 0x167c1a762B08D7e78dbF8f24e5C3f1Ab415021D3\r\n        MKR.transfer(BONAPUBLICA, 41.67 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // Cloaky - 41.67 MKR - 0x869b6d5d8FA7f4FFdaCA4D23FFE0735c5eD1F818\r\n        MKR.transfer(CLOAKY,      41.67 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // Navigator - 40.33 MKR - 0x11406a9CC2e37425F15f920F494A51133ac93072\r\n        MKR.transfer(NAVIGATOR,   40.33 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // vigilant - 13.84 MKR - 0x2474937cB55500601BCCE9f4cb0A0A72Dc226F61\r\n        MKR.transfer(VIGILANT,    13.84 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // \"UPMaker - 13.89 MKR - \t0xbb819df169670dc71a16f58f55956fe642cc6bcd\"\r\n        MKR.transfer(UPMAKER,     13.89 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // PBG - 13.89 MKR - 0x8D4df847dB7FfE0B46AF084fE031F7691C6478c2\r\n        MKR.transfer(PBG,         13.89 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // PALC - 13.44 MKR - 0x78Deac4F87BD8007b9cb56B8d53889ed5374e83A\r\n        MKR.transfer(PALC,        13.44 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // BLUE - 12.97 MKR - 0xb6C09680D822F162449cdFB8248a7D3FC26Ec9Bf\r\n        MKR.transfer(BLUE,        12.97 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n        // JAG - 4.45 MKR - 0x58D1ec57E4294E4fe650D1CB12b96AE34349556f\r\n        MKR.transfer(JAG,         4.45 ether); // NOTE: 'ether' is a keyword helper, only MKR is transferred here\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:8de6ddbcd5053d32292aaa0d2105a32d108484a6", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c6228d6718b29029d9a3a75d3f66299eb34c9618c90b76d1dd229597db3e7aed"}