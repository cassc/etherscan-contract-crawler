{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.6.12;\n\ncontract Ownable {\n    // Owner of the contract\n    address private _owner;\n\n    /**\n     * @dev Event to show ownership has been transferred\n     * @param previousOwner representing the address of the previous owner\n     * @param newOwner representing the address of the new owner\n     */\n    event OwnershipTransferred(address previousOwner, address newOwner);\n\n    /**\n     * @dev The constructor sets the original owner of the contract to the sender account.\n     */\n    constructor() public {\n        setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Tells the address of the owner\n     * @return the address of the owner\n     */\n    function owner() external view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Sets a new owner address\n     */\n    function setOwner(address newOwner) internal {\n        _owner = newOwner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        setOwner(newOwner);\n    }\n}\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n\ncontract Controller is Ownable {\n    /**\n     * @dev A controller manages a single worker address.\n     * controllers[controller] = worker\n     */\n    mapping(address => address) internal controllers;\n\n    event ControllerConfigured(\n        address indexed _controller,\n        address indexed _worker\n    );\n    event ControllerRemoved(address indexed _controller);\n\n    /**\n     * @notice Ensures that caller is the controller of a non-zero worker\n     * address.\n     */\n    modifier onlyController() {\n        require(\n            controllers[msg.sender] != address(0),\n            \"The value of controllers[msg.sender] must be non-zero\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Gets the worker at address _controller.\n     */\n    function getWorker(address _controller) external view returns (address) {\n        return controllers[_controller];\n    }\n\n    // onlyOwner functions\n\n    /**\n     * @notice Configure a controller with the given worker.\n     * @param _controller The controller to be configured with a worker.\n     * @param _worker The worker to be set for the newly configured controller.\n     * _worker must not be a non-zero address. To disable a worker,\n     * use removeController instead.\n     */\n    function configureController(address _controller, address _worker)\n        public\n        onlyOwner\n    {\n        require(\n            _controller != address(0),\n            \"Controller must be a non-zero address\"\n        );\n        require(_worker != address(0), \"Worker must be a non-zero address\");\n        controllers[_controller] = _worker;\n        emit ControllerConfigured(_controller, _worker);\n    }\n\n    /**\n     * @notice disables a controller by setting its worker to address(0).\n     * @param _controller The controller to disable.\n     */\n    function removeController(address _controller) public onlyOwner {\n        require(\n            _controller != address(0),\n            \"Controller must be a non-zero address\"\n        );\n        require(\n            controllers[_controller] != address(0),\n            \"Worker must be a non-zero address\"\n        );\n        controllers[_controller] = address(0);\n        emit ControllerRemoved(_controller);\n    }\n}\n\n\ninterface MinterManagementInterface {\n    function isMinter(address _account) external view returns (bool);\n\n    function minterAllowance(address _minter) external view returns (uint256);\n\n    function configureMinter(address _minter, uint256 _minterAllowedAmount)\n        external\n        returns (bool);\n\n    function removeMinter(address _minter) external returns (bool);\n}\n\n\ncontract MintController is Controller {\n    using SafeMath for uint256;\n\n    /**\n     * @dev MintController calls the minterManager to execute/record minter\n     * management tasks, as well as to query the status of a minter address.\n     */\n    MinterManagementInterface internal minterManager;\n\n    event MinterManagerSet(\n        address indexed _oldMinterManager,\n        address indexed _newMinterManager\n    );\n    event MinterConfigured(\n        address indexed _msgSender,\n        address indexed _minter,\n        uint256 _allowance\n    );\n    event MinterRemoved(address indexed _msgSender, address indexed _minter);\n    event MinterAllowanceIncremented(\n        address indexed _msgSender,\n        address indexed _minter,\n        uint256 _increment,\n        uint256 _newAllowance\n    );\n\n    event MinterAllowanceDecremented(\n        address indexed msgSender,\n        address indexed minter,\n        uint256 decrement,\n        uint256 newAllowance\n    );\n\n    /**\n     * @notice Initializes the minterManager.\n     * @param _minterManager The address of the minterManager contract.\n     */\n    constructor(address _minterManager) public {\n        minterManager = MinterManagementInterface(_minterManager);\n    }\n\n    /**\n     * @notice gets the minterManager\n     */\n    function getMinterManager()\n        external\n        view\n        returns (MinterManagementInterface)\n    {\n        return minterManager;\n    }\n\n    // onlyOwner functions\n\n    /**\n     * @notice Sets the minterManager.\n     * @param _newMinterManager The address of the new minterManager contract.\n     */\n    function setMinterManager(address _newMinterManager) public onlyOwner {\n        emit MinterManagerSet(address(minterManager), _newMinterManager);\n        minterManager = MinterManagementInterface(_newMinterManager);\n    }\n\n    // onlyController functions\n\n    /**\n     * @notice Removes the controller's own minter.\n     */\n    function removeMinter() public onlyController returns (bool) {\n        address minter = controllers[msg.sender];\n        emit MinterRemoved(msg.sender, minter);\n        return minterManager.removeMinter(minter);\n    }\n\n    /**\n     * @notice Enables the minter and sets its allowance.\n     * @param _newAllowance New allowance to be set for minter.\n     */\n    function configureMinter(uint256 _newAllowance)\n        public\n        onlyController\n        returns (bool)\n    {\n        address minter = controllers[msg.sender];\n        emit MinterConfigured(msg.sender, minter, _newAllowance);\n        return internal_setMinterAllowance(minter, _newAllowance);\n    }\n\n    /**\n     * @notice Increases the minter's allowance if and only if the minter is an\n     * active minter.\n     * @dev An minter is considered active if minterManager.isMinter(minter)\n     * returns true.\n     */\n    function incrementMinterAllowance(uint256 _allowanceIncrement)\n        public\n        onlyController\n        returns (bool)\n    {\n        require(\n            _allowanceIncrement > 0,\n            \"Allowance increment must be greater than 0\"\n        );\n        address minter = controllers[msg.sender];\n        require(\n            minterManager.isMinter(minter),\n            \"Can only increment allowance for minters in minterManager\"\n        );\n\n        uint256 currentAllowance = minterManager.minterAllowance(minter);\n        uint256 newAllowance = currentAllowance.add(_allowanceIncrement);\n\n        emit MinterAllowanceIncremented(\n            msg.sender,\n            minter,\n            _allowanceIncrement,\n            newAllowance\n        );\n\n        return internal_setMinterAllowance(minter, newAllowance);\n    }\n\n    /**\n     * @notice decreases the minter allowance if and only if the minter is\n     * currently active. The controller can safely send a signed\n     * decrementMinterAllowance() transaction to a minter and not worry\n     * about it being used to undo a removeMinter() transaction.\n     */\n    function decrementMinterAllowance(uint256 _allowanceDecrement)\n        public\n        onlyController\n        returns (bool)\n    {\n        require(\n            _allowanceDecrement > 0,\n            \"Allowance decrement must be greater than 0\"\n        );\n        address minter = controllers[msg.sender];\n        require(\n            minterManager.isMinter(minter),\n            \"Can only decrement allowance for minters in minterManager\"\n        );\n\n        uint256 currentAllowance = minterManager.minterAllowance(minter);\n        uint256 actualAllowanceDecrement = (\n            currentAllowance > _allowanceDecrement\n                ? _allowanceDecrement\n                : currentAllowance\n        );\n        uint256 newAllowance = currentAllowance.sub(actualAllowanceDecrement);\n\n        emit MinterAllowanceDecremented(\n            msg.sender,\n            minter,\n            actualAllowanceDecrement,\n            newAllowance\n        );\n\n        return internal_setMinterAllowance(minter, newAllowance);\n    }\n\n    // Internal functions\n\n    /**\n     * @notice Uses the MinterManagementInterface to enable the minter and\n     * set its allowance.\n     * @param _minter Minter to set new allowance of.\n     * @param _newAllowance New allowance to be set for minter.\n     */\n    function internal_setMinterAllowance(address _minter, uint256 _newAllowance)\n        internal\n        returns (bool)\n    {\n        return minterManager.configureMinter(_minter, _newAllowance);\n    }\n}\n\n\ncontract MasterMinter is MintController {\n    constructor(address _minterManager) public MintController(_minterManager) {}\n}\n\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"ControllerConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAllowance\",\"type\":\"uint256\"}],\"name\":\"MinterAllowanceDecremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newAllowance\",\"type\":\"uint256\"}],\"name\":\"MinterAllowanceIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"}],\"name\":\"MinterConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldMinterManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newMinterManager\",\"type\":\"address\"}],\"name\":\"MinterManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"configureController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAllowance\",\"type\":\"uint256\"}],\"name\":\"configureMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowanceDecrement\",\"type\":\"uint256\"}],\"name\":\"decrementMinterAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinterManager\",\"outputs\":[{\"internalType\":\"contract MinterManagementInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"getWorker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowanceIncrement\",\"type\":\"uint256\"}],\"name\":\"incrementMinterAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMinterManager\",\"type\":\"address\"}],\"name\":\"setMinterManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterMinter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "istanbul", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}