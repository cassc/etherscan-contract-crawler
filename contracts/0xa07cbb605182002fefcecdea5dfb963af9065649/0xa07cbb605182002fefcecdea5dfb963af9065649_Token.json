{"SourceCode": "/*\r\n\r\n /$$$$$$$$  /$$$$$$   /$$$$$$  /$$$$$$$$\r\n|_____ $$  /$$__  $$ /$$__  $$|_____ $$ \r\n     /$$/ | $$  \\ $$| $$  \\__/     /$$/ \r\n    /$$/  | $$  | $$| $$ /$$$$    /$$/  \r\n   /$$/   | $$  | $$| $$|_  $$   /$$/   \r\n  /$$/    | $$  | $$| $$  \\ $$  /$$/    \r\n /$$$$$$$$|  $$$$$$/|  $$$$$$/ /$$$$$$$$\r\n|________/ \\______/  \\______/ |________/\r\n                \r\n*/                        \r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/*\r\n * Telegram : https://t.me/ZOGZ_ERC\r\n*/\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"you are not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address payable private MarketingWallet;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _isExcludeFromFee;\r\n    \r\n    uint256 private _totalSupply;\r\n\r\n    IUniswapRouter public _uniswapRouter;\r\n\r\n    mapping(address => bool) public isMarketPair;\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    address public _uniswapPair;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (){\r\n\r\n        _name = \"ZOGZ PEPE FAMILY\";\r\n        _symbol = \"ZOGZ\";\r\n        _decimals = 18;\r\n        uint256 Supply = 1000000000;\r\n\r\n        _totalSupply = Supply * 10 ** _decimals;\r\n\r\n        address receiveAddr = msg.sender;\r\n        _balances[receiveAddr] = _totalSupply;\r\n        emit Transfer(address(0), receiveAddr, _totalSupply);\r\n\r\n        MarketingWallet = payable(msg.sender);\r\n        _walletMAX = _totalSupply * 2 / 100;\r\n\r\n        _isExcludeFromFee[address(this)] = true;\r\n        _isExcludeFromFee[receiveAddr] = true;\r\n        _isExcludeFromFee[MarketingWallet] = true;\r\n\r\n        IUniswapRouter swapRouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _uniswapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        IUniswapFactory swapFactory = IUniswapFactory(swapRouter.factory());\r\n        _uniswapPair = swapFactory.createPair(address(this), swapRouter.WETH());\r\n\r\n        isMarketPair[_uniswapPair] = true;\r\n        IERC20(_uniswapRouter.WETH()).approve(\r\n            address(address(_uniswapRouter)),\r\n            ~uint256(0)\r\n        );\r\n        _isExcludeFromFee[address(swapRouter)] = true;\r\n\r\n    }\r\n\r\n    function setFundAddr(\r\n        address payable newAddr\r\n    ) public onlyOwner{\r\n        MarketingWallet = newAddr;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256 public _buyCount=0;\r\n    uint256 private _initialBuyTax=0;\r\n    uint256 private _initialSellTax=0;\r\n    uint256 private _finalBuyTax=30;\r\n    uint256 private _finalSellTax=30;\r\n    uint256 private _reduceBuyTaxAt=0;\r\n    uint256 private _reduceSellTaxAt=0;\r\n    uint256 private _preventSwapBefore=0;\r\n\r\n    function recuseTax(\r\n        uint256 newBuy,\r\n        uint256 newSell,\r\n        uint256 newReduceBuy,\r\n        uint256 newReduceSell,\r\n        uint256 newPreventSwapBefore\r\n    ) public onlyOwner {\r\n        _finalBuyTax = newBuy;\r\n        _finalSellTax = newSell;\r\n        _reduceBuyTaxAt = newReduceBuy;\r\n        _reduceSellTaxAt = newReduceSell;\r\n        _preventSwapBefore = newPreventSwapBefore;\r\n    }\r\n\r\n    bool public remainHolder = true;\r\n    function changeRemain() public onlyOwner{\r\n        remainHolder = !remainHolder;\r\n    }\r\n\r\n    uint256 public _walletMAX;\r\n\r\n    function setWalletMax(uint8 percentage) public onlyOwner{\r\n        _walletMAX = totalSupply() * percentage / 100;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (inSwap){\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (isMarketPair[to] && !inSwap && !_isExcludeFromFee[from] && !_isExcludeFromFee[to] && _buyCount > _preventSwapBefore) {\r\n            uint256 _numSellToken = amount;\r\n            if (_numSellToken > balanceOf(address(this))){\r\n                _numSellToken = _balances[address(this)];\r\n            }\r\n            if (_numSellToken > 0){\r\n                swapTokenForETH(_numSellToken);\r\n            }\r\n        }\r\n\r\n        if (!_isExcludeFromFee[from] && !_isExcludeFromFee[to] && !inSwap) {\r\n            require(startTradeBlock > 0);\r\n            takeFee = true;\r\n            \r\n            // buyCount\r\n            if (isMarketPair[from] && to != address(_uniswapRouter) && !_isExcludeFromFee[to]) {\r\n                _buyCount++;\r\n                require(balanceOf(to) + amount <= _walletMAX,\"walletlimit\");\r\n            }\r\n\r\n            // remainHolder\r\n            if (remainHolder && amount == balance) {\r\n                amount = amount - (amount / 10000);\r\n            }\r\n\r\n        }\r\n\r\n        _transferToken(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _transferToken(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 taxFee;\r\n            if (isMarketPair[recipient]) {\r\n                taxFee = _buyCount > _reduceSellTaxAt ? _finalSellTax : _initialSellTax;\r\n            } else if (isMarketPair[sender]) {\r\n                taxFee = _buyCount > _reduceBuyTaxAt ? _finalBuyTax : _initialBuyTax;\r\n            }\r\n            uint256 swapAmount = tAmount * taxFee / 100;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _balances[address(this)] = _balances[address(this)] + swapAmount;\r\n                emit Transfer(sender, address(this), swapAmount);\r\n            }\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient] + (tAmount - feeAmount);\r\n        emit Transfer(sender, recipient, tAmount - feeAmount);\r\n\r\n    }\r\n\r\n    uint256 public startTradeBlock;\r\n    function startTrade() public onlyOwner {\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function removeERC20(address _token) external {\r\n        if(_token != address(this)){\r\n            IERC20(_token).transfer(MarketingWallet, IERC20(_token).balanceOf(address(this)));\r\n            MarketingWallet.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function swapTokenForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapRouter.WETH();\r\n        _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 _bal = address(this).balance;\r\n        if (_bal > 0){\r\n            MarketingWallet.transfer(_bal);\r\n        }\r\n    }\r\n\r\n    function setFeeExclude(address account, bool value) public onlyOwner{\r\n        _isExcludeFromFee[account] = value;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRemain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReduceBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReduceSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPreventSwapBefore\",\"type\":\"uint256\"}],\"name\":\"recuseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setFundAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"setWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dddc575baee28edac1708b353d859820251eeb1a1c5d46b5207f51af824051b9"}