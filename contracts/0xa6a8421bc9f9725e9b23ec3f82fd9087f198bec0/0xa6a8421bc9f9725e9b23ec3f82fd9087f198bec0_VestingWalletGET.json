{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/VestingWalletGET.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/utils/Address.sol\\\";\\nimport \\\"openzeppelin-contracts/utils/Context.sol\\\";\\nimport \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ILockedRevenueDistributionToken.sol\\\";\\n\\n/**\\n * @title VestingWalletGET\\n * @dev This contract handles the vesting of ERC20 tokens for a given beneficiary. Custody of multiple tokens\\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\\n * The vesting schedule is customizable through the {vestedAmount} function.\\n *\\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\\n * be immediately releasable.\\n */\\ncontract VestingWalletGET is Context {\\n\\n    // events\\n    event AdminAccessBurned();\\n    event EtherSaved(uint256 amount);\\n    event ERC20Released(address indexed token, uint256 amount);\\n    event AdminWithdraw(address indexed token, uint256 amount);\\n    event NothingToClaim();\\n    event UnlockedTokensStaked(uint256 amountUnlocked, uint256 amountStaked);\\n    uint256 private immutable cooldownPeriod_;\\n    uint256 private lastReleased_;\\n    mapping(address => uint256) private _erc20Released;\\n    address private immutable beneficiary_;\\n    uint64 private immutable start_;\\n    ILockedRevenueDistributionToken public immutable stakingContract_;\\n    IERC20 public immutable lockToken_;\\n    uint64 private immutable duration_;\\n\\n    address private administeredBy_;\\n    bool public adminAccessBurned;\\n\\n    /**\\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\\n     */\\n    constructor(\\n        address _beneficiaryAddress,\\n        address _administeredBy,\\n        address _lockToken,\\n        address _stakingContract,\\n        uint64 _startTimestamp,\\n        uint64 _durationSeconds,\\n        uint256 _cooldownPeriod\\n    ) payable {\\n        require(\\n            _beneficiaryAddress != address(0),\\n            \\\"VestingWallet: beneficiary is zero address\\\"\\n        );\\n        lockToken_ = IERC20(_lockToken);\\n        stakingContract_ = ILockedRevenueDistributionToken(_stakingContract);\\n        beneficiary_ = _beneficiaryAddress;\\n        start_ = _startTimestamp;\\n        duration_ = _durationSeconds;\\n        cooldownPeriod_ = _cooldownPeriod;\\n        lastReleased_ = _startTimestamp;\\n        administeredBy_ = _administeredBy;\\n        adminAccessBurned = false;\\n    }\\n\\n    /**\\n     * @dev The contract should be able to receive Eth.\\n     */\\n    receive() external payable virtual {}\\n\\n    /**\\n     * @dev Getter for the beneficiary address.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return beneficiary_;\\n    }\\n\\n    /**\\n     * @dev Getter for the admin address.\\n     */\\n    function administeredBy() public view virtual returns (address) {\\n        return administeredBy_;\\n    }\\n\\n    /**\\n     * @dev Getter for the start timestamp.\\n     */\\n    function start() public view virtual returns (uint256) {\\n        return start_;\\n    }\\n\\n    /**\\n     * @dev Getter for the vesting duration.\\n     */\\n    function duration() public view virtual returns (uint256) {\\n        return duration_;\\n    }\\n\\n    /**\\n     * @dev Duration of the cooldown period\\n     */\\n    function cooldownPeriod() public view virtual returns (uint256) {\\n        return cooldownPeriod_;\\n    }\\n\\n    /**\\n     * @dev Timestamp of the last token release\\n     */\\n    function lastRelease() public view virtual returns (uint256) {\\n        return lastReleased_;\\n    }\\n\\n    /**\\n     * @dev Amount of token already released\\n     */\\n    function released(address token) public view virtual returns (uint256) {\\n        return _erc20Released[token];\\n    }\\n\\n    /**\\n     * @dev Release the native token (ether) that was sent to this wallt by accident\\n     */\\n    function salvageEthereum() public virtual {\\n        require(msg.sender == beneficiary(), \\\"VestingWallet: not beneficiary\\\");\\n        emit EtherSaved(address(this).balance);\\n        Address.sendValue(payable(beneficiary()), address(this).balance);\\n    }\\n\\n\\n    function burnAdminAccess() public virtual {\\n        require(msg.sender == administeredBy_, \\\"VestingWallet: not administered by admin\\\");\\n        require(!adminAccessBurned, \\\"VestingWallet: admin access already burned\\\");\\n        administeredBy_ = address(0);\\n        adminAccessBurned = true;\\n        emit AdminAccessBurned();\\n    }\\n\\n    /**\\n     * @notice Withdraw vested tokens by admin\\n     * @param _tokenAddress address of the token to withdraw\\n     * @param _withdrawAmount amount of token to withdraw\\n     */\\n    function withdrawTokensByAdmin(address _tokenAddress, uint256 _withdrawAmount) external {\\n        require(msg.sender == administeredBy_, \\\"VestingWallet: not administered by admin\\\");\\n        require(!adminAccessBurned, \\\"VestingWallet: admin access burned\\\");\\n        SafeERC20.safeTransfer(IERC20(_tokenAddress), administeredBy_, _withdrawAmount);\\n        emit AdminWithdraw(_tokenAddress, _withdrawAmount);\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(address token) public view virtual returns (uint256) {  \\n        uint256 vested_ = vestedAmount(token, uint64(block.timestamp));\\n        if(vested_ != 0) {\\n            return vested_ - released(token);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function releaseLockToken() public virtual returns(uint256 amountStakedTokensReleased_){\\n        return release(address(lockToken_));\\n    }\\n\\n    /**\\n     * @dev Release the tokens that have already vested.\\n     * Emits a {ERC20Released} event.\\n     */\\n    function release(address token) public virtual returns(uint256 amountStakedTokensReleased_){\\n        uint256 amount = releasable(token);\\n        if (amount != 0) {\\n            lastReleased_ = block.timestamp;\\n        } else {\\n            emit NothingToClaim();\\n            return 0;\\n        }\\n        _erc20Released[token] += amount;\\n        emit ERC20Released(token, amount);\\n        SafeERC20.safeApprove(IERC20(token), address(stakingContract_), amount);\\n        uint256 amountStakedTokens_ = stakingContract_.deposit(amount, beneficiary(), 0);\\n        emit UnlockedTokensStaked(amount, amountStakedTokens_);\\n        return amountStakedTokens_;\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(\\n        address token,\\n        uint64 timestamp\\n    ) public view virtual returns (uint256) {\\n        return\\n            _vestingSchedule(\\n                IERC20(token).balanceOf(address(this)) + released(token),\\n                timestamp\\n            );\\n    }\\n\\n    /**\\n     * @dev Virtual implementation of the vesting formula. This returns the amount vested, as a function of time, for\\n     * an asset given its total historical allocation.\\n     */\\n    function _vestingSchedule(\\n        uint256 totalAllocation,\\n        uint64 timestamp\\n    ) internal view virtual returns (uint256) {\\n        if (timestamp <= start()) {\\n            return 0;\\n        } else if ((lastReleased_ + cooldownPeriod_) > timestamp) {\\n            return 0;\\n        } else if (timestamp > start() + duration()) {\\n            return totalAllocation;\\n        } else {\\n            return (totalAllocation * (timestamp - start())) / duration();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILockedRevenueDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.7;\\n\\ninterface ILockedRevenueDistributionToken {\\n    /**\\n     * @notice        Represents a withdrawal request, packed into a single word.\\n     * @custom:member unlockedAt Timestamp after which the withdrawal is unlocked.\\n     * @custom:member shares     Amount of shares to be burned upon withdrawal execution.\\n     * @custom:member assets     Amount of assets to be returned to user upon withdrawal execution.\\n     */\\n    struct WithdrawalRequest {\\n        uint32 unlockedAt;\\n        uint32 lockTime;\\n        uint96 shares;\\n        uint96 assets;\\n    }\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                              Events                               \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Emitted when burning shares upon withdrawal request cancellation.\\n     * @param  assets_ Amount of assets returned to contract address.\\n     * @param  shares_ Share delta between withdrawal request creation and cancellation.\\n     */\\n    event CancellationBurn(uint256 assets_, uint256 shares_);\\n\\n    /**\\n     * @notice Emitted when the instant withdrawal fee is set.\\n     * @param  percentage_ A percentage value from 0 to 100.\\n     */\\n    event InstantWithdrawalFeeChanged(uint256 percentage_);\\n\\n    /**\\n     * @notice Emitted when time-to-unlock for a standard withdrawal set.\\n     * @param  lockTime_ Integer length of lock time, e.g. `26 weeks`.\\n     */\\n    event LockTimeChanged(uint256 lockTime_);\\n\\n    /**\\n     * @notice Emitted when redistributing rewards upon early execution or cancellation of a withdrawal request.\\n     * @param  assets_ Assets redistributed to remaining stakers.\\n     */\\n    event Redistribute(uint256 assets_);\\n\\n    /**\\n     * @notice Emitted when refunding shares upon withdrawal request cancellation.\\n     * @param  receiver_   Account to refund shares to at spot rate.\\n     * @param  assets_     Equivalent asset value for shares returned.\\n     * @param  shares_     Amount of shares returned to the receiver.\\n     */\\n    event Refund(address indexed receiver_, uint256 assets_, uint256 shares_);\\n\\n    /**\\n     * @notice Emitted when fee exemption status has been set for an address.\\n     * @param  account_ Address in which to apply the exemption.\\n     * @param  status_  True for exempt, false to remove exemption.\\n     */\\n    event WithdrawalFeeExemptionStatusChanged(address indexed account_, bool status_);\\n\\n    /**\\n     * @notice Emitted when an instant withdrawal fee is paid.\\n     * @param  caller_   The caller of the `redeem` or `withdraw` function.\\n     * @param  receiver_ The receiver of the assets.\\n     * @param  owner_    The owner of the shares or withdrawal request.\\n     * @param  fee_      The assets paid as fee.\\n     */\\n    event WithdrawalFeePaid(address indexed caller_, address indexed receiver_, address indexed owner_, uint256 fee_);\\n\\n    /**\\n     * @notice Emitted when a new withdrawal request has been created for an account.\\n     * @param  request_ Struct containing shares, assets, and maturity date of the created request.\\n     * @param  pos_   Index/position of the withdrawal request created.\\n     */\\n    event WithdrawalRequestCreated(WithdrawalRequest request_, uint256 pos_);\\n\\n    /**\\n     * @notice Emitted when an account cancels any existing withdrawal requests.\\n     * @param  pos_   Index/position of the withdrawal request cancelled.\\n     */\\n    event WithdrawalRequestCancelled(uint256 pos_);\\n\\n    /**\\n     * @notice Emitted when a withdrawal request has been executed with shares burned and assets withdrawn.\\n     * @param  pos_ Index/position of the withdrawal request executed.\\n     */\\n    event WithdrawalRequestExecuted(uint256 pos_);\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                          State Variables                          \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Constant maximum lock time able to be set using `setLockTime` to avoid permanent lockup.\\n     * @return maximumLockTime_ Maxmimum lock time integer length, e.g. `104 weeks`.\\n     */\\n    function MAXIMUM_LOCK_TIME() external view returns (uint256 maximumLockTime_);\\n\\n    /**\\n     * @notice Constant vesting period, used in `updateVestingSchedule`.\\n     * @return vestingPeriod_ Fixed vesting period, e.g. `2 weeks`.\\n     */\\n    function VESTING_PERIOD() external view returns (uint256 vestingPeriod_);\\n\\n    /**\\n     * @notice Constant time window in which unlocked withdrawal requests can be executed.\\n     * @return withdrawalWindow_ Fixed withdrawal window, e.g. `4 weeks`.\\n     */\\n    function WITHDRAWAL_WINDOW() external view returns (uint256 withdrawalWindow_);\\n\\n    /**\\n     * @notice Percentage withdrawal fee to be applied to instant withdrawals.\\n     * @return instantWithdrawalFee_ A percentage value from 0 to 100.\\n     */\\n    function instantWithdrawalFee() external view returns (uint256 instantWithdrawalFee_);\\n\\n    /**\\n     * @notice The lock time set for standard withdrawals to become unlocked.\\n     * @return lockTime_ Length of lock of a standard withdrawal request, e.g. `26 weeks`.\\n     */\\n    function lockTime() external view returns (uint256 lockTime_);\\n\\n    /**\\n     * @notice Returns exemption status for a given account. When true then instant withdrawal fee will not apply.\\n     * @param  account_ Account to check for exemption.\\n     * @return status_  Exemption status.\\n     */\\n    function withdrawalFeeExemptions(address account_) external view returns (bool status_);\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                     Administrative Functions                      \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Sets the intstant withdrawal fee, applied when making instant withdrawals or redemptions.\\n     * @notice Can only be set by owner.\\n     * @param  percentage_ Fee percentage. Must be an integer between 0 and 100 inclusive.\\n     */\\n    function setInstantWithdrawalFee(uint256 percentage_) external;\\n\\n    /**\\n     * @notice Sets the lock time for standard withdrawals to become unlocked.\\n     * @notice Can only be set by owner.\\n     * @notice Must be lower than MAXIMUM_LOCK_TIME to prevent permanent lockup.\\n     * @param  lockTime_ Length of lock of a standard withdrawal request.\\n     */\\n    function setLockTime(uint256 lockTime_) external;\\n\\n    /**\\n     * @notice Sets or unsets an owner address to be exempt from the withdrawal fee.\\n     * @notice Useful in case of future migrations where an approved contract may be given permission to migrate\\n     * balances to a new token. Can also be used to exempt third-party vaults from facing withdrawal fee when\\n     * managing balances, such as lending platform liquidations.\\n     * @notice Can only be set by contract `owner`.\\n     * @dev    The zero address cannot be set as exmempt as this will always represent an address that pays fees.\\n     * @param  owner_  Owner address to exempt from instant withdrawal fees.\\n     * @param  status_ true to add exemption, false to remove exemption.\\n     */\\n    function setWithdrawalFeeExemption(address owner_, bool status_) external;\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                         Public Functions                          \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Creates a new withdrawal request for future execution using the shares conversion at the point of\\n     * request. May only be executed after the unlock date.\\n     * @notice Transfers shares to the vault contract to reserve them, reducing share balance.\\n     * @param  shares_ Amount of shares to redeem upon unlock.\\n     */\\n    function createWithdrawalRequest(uint256 shares_) external;\\n\\n    /**\\n     * @notice Removes an open withdrawal request for the sender.\\n     * @param  pos_ Index/position of the withdrawal request to be cancelled.\\n     */\\n    function cancelWithdrawalRequest(uint256 pos_) external;\\n\\n    /**\\n     * @notice Executes an existing withdrawal request for msg.sender. Before the request is unlocked, a percentage\\n     * fee will be paid, equal to a percentage of the instantWithdrawalFee by time elapsed of the request.\\n     * @param  pos_ Index/position of the withdrawal request to be executed.\\n     */\\n    function executeWithdrawalRequest(uint256 pos_) external;\\n\\n    /**\\n     * @notice Executes an existing withdrawal request that has passed its unlock date.\\n     * @dev    Identical to parent implementation but made public by fixed vesting period and removal of owner check.\\n     * @return issuanceRate_ Slope of release of newly added assets, scaled up by `precision`.\\n     * @return freeAssets_   Amount of assets currently released to stakers.\\n     */\\n    function updateVestingSchedule() external returns (uint256 issuanceRate_, uint256 freeAssets_);\\n\\n    /**\\n     * @notice ERC5143 slippage-protected deposit method. The transaction will revert if the shares to be returned is\\n     * less than minShares_.\\n     * @param  assets_    Amount of assets to deposit.\\n     * @param  receiver_  The receiver of the shares.\\n     * @param  minShares_ Minimum amount of shares to be returned.\\n     * @return shares_    Amount of shares returned to receiver_.\\n     */\\n    function deposit(uint256 assets_, address receiver_, uint256 minShares_) external returns (uint256 shares_);\\n\\n    /**\\n     * @notice ERC5143 slippage-protected mint method. The transaction will revert if the assets to be deducted is\\n     * greater than maxAssets_.\\n     * @param  shares_    Amount of shares to mint.\\n     * @param  receiver_  The receiver of the shares.\\n     * @param  maxAssets_ Maximum amount of assets to be deducted.\\n     * @return assets_    Amount of deducted when minting shares.\\n     */\\n    function mint(uint256 shares_, address receiver_, uint256 maxAssets_) external returns (uint256 assets_);\\n\\n    /**\\n     * @notice ERC5143 slippage-protected redeem method. The transaction will revert if the assets to be returned is\\n     * less than minAssets_.\\n     * @param  shares_    Amount of shares to redeem.\\n     * @param  receiver_  The receiver of the assets.\\n     * @param  owner_     Owner of shares making redemption.\\n     * @param  minAssets_ Minimum amount of assets to be returned.\\n     * @return assets_    Amount of assets returned.\\n     */\\n    function redeem(uint256 shares_, address receiver_, address owner_, uint256 minAssets_)\\n        external\\n        returns (uint256 assets_);\\n\\n    /**\\n     * @notice ERC5143 slippage-protected withdraw method. The transaction will revert if the shares to be deducted is\\n     * greater than maxShares_.\\n     * @param  assets_    Amount of assets to withdraw.\\n     * @param  receiver_  The receiver of the assets.\\n     * @param  owner_     Owner of shares making withdrawal.\\n     * @param  maxShares_ Minimum amount of shares to be deducted.\\n     * @return shares_    Amount of shares deducted.\\n     */\\n    function withdraw(uint256 assets_, address receiver_, address owner_, uint256 maxShares_)\\n        external\\n        returns (uint256 shares_);\\n\\n    /*\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591                          View Functions                           \u2591\u2591\u2591\u2591\\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591*/\\n\\n    /**\\n     * @notice Previews a redemption of shares for owner. Applies withdrawal fee if owner does not have an exemption.\\n     * @param  owner_  Owner of shares making redemption.\\n     * @param  shares_ Amount of shares to redeem.\\n     * @return assets_ Assets redeemed for shares for owner.\\n     * @param  fee_    The assets paid as fee.\\n     */\\n    function previewRedeem(uint256 shares_, address owner_) external view returns (uint256 assets_, uint256 fee_);\\n\\n    /**\\n     * @notice Previews a withdrawal of assets for owner. Applies withdrawal fee if owner does not have an exemption.\\n     * @param  owner_  Owner of shares makeing withdrawal.\\n     * @param  assets_ Amount of assets to withdraw.\\n     * @return shares_ Shares needed to be burned for owner.\\n     * @param  fee_    The assets paid as fee.\\n     */\\n    function previewWithdraw(uint256 assets_, address owner_) external view returns (uint256 shares_, uint256 fee_);\\n\\n    /**\\n     * @notice Previews a withdrawal request execution, calculating the assets returned to the receiver and fee paid.\\n     * @notice Fee percentage reduces linearly from instantWithdrawalFee until 0 at the unlockedAt timestamp.\\n     * @param  pos_     Index/position of the withdrawal request to be previewed.\\n     * @param  owner_   Owner of the withdrawal request.\\n     * @return request_ The WithdrawalRequest struct within storage.\\n     * @return assets_  Amount of assets returned to owner if withdrawn.\\n     * @return fee_     The assets paid as fee.\\n     */\\n    function previewWithdrawalRequest(uint256 pos_, address owner_)\\n        external\\n        view\\n        returns (WithdrawalRequest memory request_, uint256 assets_, uint256 fee_);\\n\\n    /**\\n     * @notice Returns a count of the number of created withdrawal requests for an account, including cancelled.\\n     * @param  owner_ Account address of owner of withdrawal requests.\\n     * @return count_ Number of withdrawal request created for owner account.\\n     */\\n    function withdrawalRequestCount(address owner_) external view returns (uint256 count_);\\n\\n    /**\\n     * @notice Returns an array of created withdrawal requests for an account, including cancelled.\\n     * @param  owner_    Account address of owner of withdrawal requests.\\n     * @return requests_ Array of withdrawal request structs for an owner.\\n     */\\n    function withdrawalRequests(address owner_) external view returns (WithdrawalRequest[] memory requests_);\\n\\n    /**\\n     * @notice Returns existing withdrawal request for a given account.\\n     * @param  account_ Account address holding withdrawal request.\\n     * @param  pos_     Index/position of the withdrawal request in the array.\\n     * @return request_ Withdrawal request struct found at position for owner.\\n     */\\n    function withdrawalRequests(address account_, uint256 pos_)\\n        external\\n        view\\n        returns (WithdrawalRequest memory request_);\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_administeredBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_durationSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AdminAccessBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnlocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"UnlockedTokensStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminAccessBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administeredBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAdminAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToken_\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStakedTokensReleased_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseLockToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStakedTokensReleased_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salvageEthereum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract_\",\"outputs\":[{\"internalType\":\"contract ILockedRevenueDistributionToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VestingWalletGET", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001e89950e1aa76ae80af5e9013408bf417ce6cc53000000000000000000000000f989c1694a735b10c2dac36078fa929cd4235af50000000000000000000000008a854288a5976036a725879164ca3e91d30c6a1b0000000000000000000000003e49e9c890cd5b015a18ed76e7a4093f569f1a040000000000000000000000000000000000000000000000000000000065e1c3400000000000000000000000000000000000000000000000000000000003c267000000000000000000000000000000000000000000000000000000000000278d00", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}