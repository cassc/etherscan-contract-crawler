{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DogensTokenAirdropper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* DOGENS TOKEN AIRDROPPER CONTRACT\\nTelegram : https://t.me/dogenstoken\\nWebsite  : https://www.dogens.io\\nTwitter  : https://twitter.com/DogensToken\\n    LAUNCH YOUR TOKEN WITH DOGENS\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ncontract Dogens_Token_Airdropper is Ownable {\\n    uint256 public FEE = 0.05 ether; \\n    address payable public constant TREASURY_ADDRESS = payable(address(0));\\n    address public constant ADDRESS_ZERO = address(0);\\n\\n\\n    function distributeEther(address[] memory recipients, uint256[] memory values) external payable {\\n        require(recipients.length == values.length, \\\"Mismatched recipients and values length\\\");\\n        uint256 currentFee = (msg.sender == owner()) ? 0 : FEE;\\n        uint256 totalAmount;\\n        uint256 balanceBefore = address(this).balance;\\n\\n        if (currentFee > 0) {\\n            require(msg.value >= currentFee, \\\"Fee not covered by provided ETH\\\");\\n            (bool success, ) = TREASURY_ADDRESS.call{ value: currentFee }(\\\"\\\");\\n            require(success, \\\"Failed to transfer fee to treasury\\\");\\n        }\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            (bool success, ) = payable(recipients[i]).call{value: values[i]}(\\\"\\\");\\n            require(success, \\\"Failed to distribute ETH to recipient\\\");\\n            totalAmount += values[i];\\n        }\\n\\n        require(msg.value >= totalAmount, \\\"Not enough ETH sent to cover distribution\\\");\\n\\n        uint256 diff = address(this).balance - balanceBefore;\\n        if (diff > 0) {\\n            (bool success, ) = payable(msg.sender).call{value: diff}(\\\"\\\");\\n            require(success, \\\"Failed to refund sender\\\");\\n        }\\n    }\\n\\n    function distributeToken(IERC20 token, address[] memory recipients, uint256[] memory values) external payable {\\n        require(recipients.length == values.length, \\\"Mismatched recipients and values length\\\");\\n\\n        uint256 total = 0;\\n        uint256 currentFee = (msg.sender == owner()) ? 0 : FEE;\\n\\n        if (currentFee > 0) {\\n            require(msg.value >= currentFee, \\\"Fee not covered by provided ETH\\\");\\n            (bool success, ) = TREASURY_ADDRESS.call{ value: currentFee }(\\\"\\\");\\n            require(success, \\\"Failed to transfer fee to treasury\\\");\\n        }\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            total += values[i];\\n        }\\n\\n        require(token.transferFrom(msg.sender, address(this), total), \\\"Token transfer failed\\\");\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            require(token.transfer(recipients[i], values[i]), \\\"Failed to distribute token to recipient\\\");\\n        }\\n    }\\n\\n    function distributeTokenSimple(IERC20 token, address[] memory recipients, uint256[] memory values) external payable {\\n        require(recipients.length == values.length, \\\"Mismatched recipients and values length\\\");\\n        uint256 currentFee = (msg.sender == owner()) ? 0 : FEE;\\n\\n        if (currentFee > 0) {\\n            require(msg.value >= currentFee, \\\"Fee not covered by provided ETH\\\");\\n            (bool success, ) = TREASURY_ADDRESS.call{ value: currentFee }(\\\"\\\");\\n            require(success, \\\"Failed to transfer fee to treasury\\\");\\n        }\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            require(token.transferFrom(msg.sender, recipients[i], values[i]), \\\"Failed to distribute token to recipient\\\");\\n        }\\n    }\\n\\n    function RecycleETHorToken(address _token, uint256 _amount) external onlyOwner {\\n        if (_token != address(0)) {\\n            IERC20(_token).transfer(msg.sender, _amount);\\n        } else {\\n            (bool success, ) = payable(msg.sender).call{ value: _amount }(\\\"\\\");\\n            require(success, \\\"Failed to recover ETH\\\");\\n        }\\n    }\\n\\n    function ChangeFee(uint256 _fee) external onlyOwner {\\n        require(_fee > 0, \\\"Invalid fee: must be non-zero\\\");\\n        FEE = _fee;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"ChangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RecycleETHorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"distributeEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"distributeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokenSimple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Dogens_Token_Airdropper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}