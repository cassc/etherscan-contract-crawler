{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/OpStateBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\n// Optimism interface for cross domain messaging\\nimport {ICrossDomainMessenger} from\\n    \\\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\\\";\\nimport {IOpWorldID} from \\\"./interfaces/IOpWorldID.sol\\\";\\nimport {IRootHistory} from \\\"./interfaces/IRootHistory.sol\\\";\\nimport {IWorldIDIdentityManager} from \\\"./interfaces/IWorldIDIdentityManager.sol\\\";\\nimport {Ownable2Step} from \\\"openzeppelin-contracts/access/Ownable2Step.sol\\\";\\nimport {ICrossDomainOwnable3} from \\\"./interfaces/ICrossDomainOwnable3.sol\\\";\\n\\n/// @title World ID State Bridge Optimism\\n/// @author Worldcoin\\n/// @notice Distributes new World ID Identity Manager roots to an OP Stack network\\n/// @dev This contract lives on Ethereum mainnet and works for Optimism and any OP Stack based chain\\ncontract OpStateBridge is Ownable2Step {\\n    ///////////////////////////////////////////////////////////////////\\n    ///                           STORAGE                           ///\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice The address of the OpWorldID contract on any OP Stack chain\\n    address public immutable opWorldIDAddress;\\n\\n    /// @notice address for OP Stack chain Ethereum mainnet L1CrossDomainMessenger contract\\n    address internal immutable crossDomainMessengerAddress;\\n\\n    /// @notice Ethereum mainnet worldID Address\\n    address public immutable worldIDAddress;\\n\\n    /// @notice Amount of gas purchased on the OP Stack chain for propagateRoot\\n    uint32 internal _gasLimitPropagateRoot;\\n\\n    /// @notice Amount of gas purchased on the OP Stack chain for SetRootHistoryExpiry\\n    uint32 internal _gasLimitSetRootHistoryExpiry;\\n\\n    /// @notice Amount of gas purchased on the OP Stack chain for transferOwnershipOp\\n    uint32 internal _gasLimitTransferOwnership;\\n\\n    /// @notice The default gas limit amount to buy on an OP stack chain to do simple transactions\\n    uint32 public constant DEFAULT_OP_GAS_LIMIT = 1000000;\\n\\n    ///////////////////////////////////////////////////////////////////\\n    ///                            EVENTS                           ///\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice Emitted when the StateBridge gives ownership of the OPWorldID contract\\n    /// to the WorldID Identity Manager contract away\\n    /// @param previousOwner The previous owner of the OPWorldID contract\\n    /// @param newOwner The new owner of the OPWorldID contract\\n    /// @param isLocal Whether the ownership transfer is local (Optimism/OP Stack chain EOA/contract)\\n    /// or an Ethereum EOA or contract\\n    event OwnershipTransferredOp(\\n        address indexed previousOwner, address indexed newOwner, bool isLocal\\n    );\\n\\n    /// @notice Emitted when the StateBridge sends a root to the OPWorldID contract\\n    /// @param root The root sent to the OPWorldID contract on the OP Stack chain\\n    event RootPropagated(uint256 root);\\n\\n    /// @notice Emitted when the StateBridge sets the root history expiry for OpWorldID and PolygonWorldID\\n    /// @param rootHistoryExpiry The new root history expiry\\n    event SetRootHistoryExpiry(uint256 rootHistoryExpiry);\\n\\n    /// @notice Emitted when the StateBridge sets the gas limit for sendRootOp\\n    /// @param _opGasLimit The new opGasLimit for sendRootOp\\n    event SetGasLimitPropagateRoot(uint32 _opGasLimit);\\n\\n    /// @notice Emitted when the StateBridge sets the gas limit for SetRootHistoryExpiry\\n    /// @param _opGasLimit The new opGasLimit for SetRootHistoryExpiry\\n    event SetGasLimitSetRootHistoryExpiry(uint32 _opGasLimit);\\n\\n    /// @notice Emitted when the StateBridge sets the gas limit for transferOwnershipOp\\n    /// @param _opGasLimit The new opGasLimit for transferOwnershipOptimism\\n    event SetGasLimitTransferOwnershipOp(uint32 _opGasLimit);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    ///                            ERRORS                           ///\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice Emitted when an attempt is made to renounce ownership.\\n    error CannotRenounceOwnership();\\n\\n    /// @notice Emitted when an attempt is made to set the gas limit to zero\\n    error GasLimitZero();\\n\\n    /// @notice Emitted when an attempt is made to set an address to zero\\n    error AddressZero();\\n\\n    ///////////////////////////////////////////////////////////////////\\n    ///                         CONSTRUCTOR                         ///\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice constructor\\n    /// @param _worldIDIdentityManager Deployment address of the WorldID Identity Manager contract\\n    /// @param _opWorldIDAddress Address of the Optimism contract that will receive the new root and timestamp\\n    /// @param _crossDomainMessenger L1CrossDomainMessenger contract used to communicate with the desired OP\\n    /// Stack network\\n    /// @custom:revert if any of the constructor params addresses are zero\\n    constructor(\\n        address _worldIDIdentityManager,\\n        address _opWorldIDAddress,\\n        address _crossDomainMessenger\\n    ) {\\n        if (\\n            _worldIDIdentityManager == address(0) || _opWorldIDAddress == address(0)\\n                || _crossDomainMessenger == address(0)\\n        ) {\\n            revert AddressZero();\\n        }\\n\\n        opWorldIDAddress = _opWorldIDAddress;\\n        worldIDAddress = _worldIDIdentityManager;\\n        crossDomainMessengerAddress = _crossDomainMessenger;\\n        _gasLimitPropagateRoot = DEFAULT_OP_GAS_LIMIT;\\n        _gasLimitSetRootHistoryExpiry = DEFAULT_OP_GAS_LIMIT;\\n        _gasLimitTransferOwnership = DEFAULT_OP_GAS_LIMIT;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////\\n    ///                          PUBLIC API                         ///\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice Sends the latest WorldID Identity Manager root to the IOpStack.\\n    /// @dev Calls this method on the L1 Proxy contract to relay roots to the destination OP Stack chain\\n    function propagateRoot() external {\\n        uint256 latestRoot = IWorldIDIdentityManager(worldIDAddress).latestRoot();\\n\\n        // The `encodeCall` function is strongly typed, so this checks that we are passing the\\n        // correct data to the optimism bridge.\\n        bytes memory message = abi.encodeCall(IOpWorldID.receiveRoot, (latestRoot));\\n\\n        ICrossDomainMessenger(crossDomainMessengerAddress).sendMessage(\\n            // Contract address on the OP Stack Chain\\n            opWorldIDAddress,\\n            message,\\n            _gasLimitPropagateRoot\\n        );\\n\\n        emit RootPropagated(latestRoot);\\n    }\\n\\n    /// @notice Adds functionality to the StateBridge to transfer ownership\\n    /// of OpWorldID to another contract on L1 or to a local OP Stack chain EOA\\n    /// @param _owner new owner (EOA or contract)\\n    /// @param _isLocal true if new owner is on Optimism, false if it is a cross-domain owner\\n    /// @custom:revert if _owner is set to the zero address\\n    function transferOwnershipOp(address _owner, bool _isLocal) external onlyOwner {\\n        if (_owner == address(0)) {\\n            revert AddressZero();\\n        }\\n\\n        // The `encodeCall` function is strongly typed, so this checks that we are passing the\\n        // correct data to the OP Stack chain bridge.\\n        bytes memory message =\\n            abi.encodeCall(ICrossDomainOwnable3.transferOwnership, (_owner, _isLocal));\\n\\n        ICrossDomainMessenger(crossDomainMessengerAddress).sendMessage(\\n            // Contract address on the OP Stack Chain\\n            opWorldIDAddress,\\n            message,\\n            _gasLimitTransferOwnership\\n        );\\n\\n        emit OwnershipTransferredOp(owner(), _owner, _isLocal);\\n    }\\n\\n    /// @notice Adds functionality to the StateBridge to set the root history expiry on OpWorldID\\n    /// @param _rootHistoryExpiry new root history expiry\\n    function setRootHistoryExpiry(uint256 _rootHistoryExpiry) external onlyOwner {\\n        // The `encodeCall` function is strongly typed, so this checks that we are passing the\\n        // correct data to the optimism bridge.\\n        bytes memory message =\\n            abi.encodeCall(IRootHistory.setRootHistoryExpiry, (_rootHistoryExpiry));\\n\\n        ICrossDomainMessenger(crossDomainMessengerAddress).sendMessage(\\n            // Contract address on the OP Stack Chain\\n            opWorldIDAddress,\\n            message,\\n            _gasLimitSetRootHistoryExpiry\\n        );\\n\\n        emit SetRootHistoryExpiry(_rootHistoryExpiry);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////\\n    ///                         OP GAS LIMIT                        ///\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice Sets the gas limit for the propagateRoot method\\n    /// @param _opGasLimit The new gas limit for the propagateRoot method\\n    function setGasLimitPropagateRoot(uint32 _opGasLimit) external onlyOwner {\\n        if (_opGasLimit <= 0) {\\n            revert GasLimitZero();\\n        }\\n\\n        _gasLimitPropagateRoot = _opGasLimit;\\n\\n        emit SetGasLimitPropagateRoot(_opGasLimit);\\n    }\\n\\n    /// @notice Sets the gas limit for the SetRootHistoryExpiry method\\n    /// @param _opGasLimit The new gas limit for the SetRootHistoryExpiry method\\n    function setGasLimitSetRootHistoryExpiry(uint32 _opGasLimit) external onlyOwner {\\n        if (_opGasLimit <= 0) {\\n            revert GasLimitZero();\\n        }\\n\\n        _gasLimitSetRootHistoryExpiry = _opGasLimit;\\n\\n        emit SetGasLimitSetRootHistoryExpiry(_opGasLimit);\\n    }\\n\\n    /// @notice Sets the gas limit for the transferOwnershipOp method\\n    /// @param _opGasLimit The new gas limit for the transferOwnershipOp method\\n    function setGasLimitTransferOwnershipOp(uint32 _opGasLimit) external onlyOwner {\\n        if (_opGasLimit <= 0) {\\n            revert GasLimitZero();\\n        }\\n\\n        _gasLimitTransferOwnership = _opGasLimit;\\n\\n        emit SetGasLimitTransferOwnershipOp(_opGasLimit);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////\\n    ///                          OWNERSHIP                          ///\\n    ///////////////////////////////////////////////////////////////////\\n    /// @notice Ensures that ownership of WorldID implementations cannot be renounced.\\n    /// @dev This function is intentionally not `virtual` as we do not want it to be possible to\\n    ///      renounce ownership for any WorldID implementation.\\n    /// @dev This function is marked as `onlyOwner` to maintain the access restriction from the base\\n    ///      contract.\\n    function renounceOwnership() public view override onlyOwner {\\n        revert CannotRenounceOwnership();\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit\\n    );\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOpWorldID.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\n/// @title Interface for the OpWorldID contract\\n/// @author Worldcoin\\n/// @custom:usage abi.encodeCall(IOpWorldID.receiveRoot, (_newRoot, _supersedeTimestamp));\\ninterface IOpWorldID {\\n    ////////////////////////////////////////////////////////////////////////////////\\n    ///                               ROOT MIRRORING                            ///\\n    ///////////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice This function is called by the state bridge contract when it forwards a new root to\\n    ///         the bridged WorldID.\\n    /// @dev    This function can revert if Optimism's CrossDomainMessenger stops processing proofs\\n    ///         or if OPLabs stops submitting them. Next iteration of Optimism's cross-domain messaging, will be\\n    ///         fully permissionless for message-passing, so this will not be an issue.\\n    ///         Sequencer needs to include changes to the CrossDomainMessenger contract on L1, not economically penalized\\n    ///         if messages are not included, however the fraud prover (Cannon) can force the sequencer to include it.\\n    ///\\n    /// @param newRoot The value of the new root.\\n    ///\\n    /// @custom:reverts CannotOverwriteRoot If the root already exists in the root history.\\n    /// @custom:reverts string If the caller is not the owner.\\n    function receiveRoot(uint256 newRoot) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRootHistory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\n/// @title Interface for WorldID setRooHistoryExpiry\\n/// @author Worldcoin\\n/// @notice Interface for WorldID setRooHistoryExpiry\\n/// @dev Used in StateBridge to set the root history expiry time on Optimism (OPWorldID)\\n/// @custom:usage abi.encodeCall(IRootHistory.setRootHistoryExpiry, (_expiryTime));\\ninterface IRootHistory {\\n    /// @notice Sets the amount of time it takes for a root in the root history to expire.\\n    ///\\n    /// @param expiryTime The new amount of time it takes for a root to expire.\\n    ///\\n    /// @custom:reverts string If the caller is not the owner.\\n    function setRootHistoryExpiry(uint256 expiryTime) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWorldIDIdentityManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\n/// @title IWorldIDIdentityManager\\n/// @author Worldcoin\\n/// @dev used to fetch the latest root from the WorldIDIdentityManager\\ninterface IWorldIDIdentityManager {\\n    /// @notice returns the latest root\\n    function latestRoot() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICrossDomainOwnable3.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.15;\\n\\n/// @title Optimism - CrossDomainOwnable3 Interface\\n/// @author Worldcoin\\n/// @notice Interface for the CrossDomainOwnable contract for the Optimism L2\\n/// @dev Adds functionality to the StateBridge to transfer ownership\\n/// of OpWorldID to another contract on L1 or to a local Optimism EOA\\n/// @custom:usage abi.encodeCall(ICrossDomainOwnable3.transferOwnership, (_owner, _isLocal));\\ninterface ICrossDomainOwnable3 {\\n    /// @notice transfers owner to a cross-domain or local owner\\n    /// @param _owner new owner (EOA or contract)\\n    /// @param _isLocal true if new owner is on Optimism, false if it is a cross-domain owner\\n    function transferOwnership(address _owner, bool _isLocal) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@prb/test/=lib/prb-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"src/=src/\",\r\n      \"semaphore/=lib/semaphore-v3/packages/contracts/contracts/\",\r\n      \"solmate/=lib/solmate/\",\r\n      \"@rari-capital/solmate/=lib/solmate/\",\r\n      \"@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/\",\r\n      \"@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"fx-portal/contracts/=lib/contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"prb-test/=lib/prb-test/src/\",\r\n      \"semaphore-v3/=lib/semaphore-v3/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000,\r\n      \"details\": {\r\n        \"peephole\": true,\r\n        \"inliner\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worldIDIdentityManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opWorldIDAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crossDomainMessenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRenounceOwnership\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GasLimitZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocal\",\"type\":\"bool\"}],\"name\":\"OwnershipTransferredOp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"RootPropagated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_opGasLimit\",\"type\":\"uint32\"}],\"name\":\"SetGasLimitPropagateRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_opGasLimit\",\"type\":\"uint32\"}],\"name\":\"SetGasLimitSetRootHistoryExpiry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_opGasLimit\",\"type\":\"uint32\"}],\"name\":\"SetGasLimitTransferOwnershipOp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rootHistoryExpiry\",\"type\":\"uint256\"}],\"name\":\"SetRootHistoryExpiry\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_OP_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opWorldIDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propagateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_opGasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasLimitPropagateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_opGasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasLimitSetRootHistoryExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_opGasLimit\",\"type\":\"uint32\"}],\"name\":\"setGasLimitTransferOwnershipOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rootHistoryExpiry\",\"type\":\"uint256\"}],\"name\":\"setRootHistoryExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLocal\",\"type\":\"bool\"}],\"name\":\"transferOwnershipOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldIDAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OpStateBridge", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000f7134ce138832c1456f2a91d64621ee90c2bddea000000000000000000000000b3e7771a6e2d7dd8c0666042b7a07c39b938eb7d00000000000000000000000025ace71c97b33cc4729cf772ae268934f7ab5fa1", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}