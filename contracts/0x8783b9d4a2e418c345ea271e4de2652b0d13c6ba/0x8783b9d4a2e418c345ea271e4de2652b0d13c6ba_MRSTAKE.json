{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface NFTMINT1155 {\r\n    function mint(address wallet, uint256 id, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract MRSTAKE is Context, Ownable {\r\n    using SafeMath for uint256;\r\n    IERC20 public token;\r\n    mapping(uint256 => uint256) public minStakeAmount;\r\n    mapping(uint256 => uint256) public stakeTime;\r\n    NFTMINT1155 public nftToken;\r\n\r\n    struct Stake {\r\n        uint256 nftId; //nft collection id to be minted\r\n        uint256 stakeId; //array position of stakes array of a wallet\r\n        uint256 unlockTime; // timestamp when the stake will be unlocked\r\n        uint256 stakedAmount; // amount of token being staked\r\n        address owner; // owner of the stake\r\n    }\r\n\r\n    mapping(address => Stake[]) private stakeInfo;\r\n\r\n    constructor(\r\n        address _token,\r\n        address _nftToken\r\n    ){\r\n        token = IERC20(_token);\r\n        nftToken = NFTMINT1155(_nftToken);\r\n    }\r\n\r\n    /**\r\n    * @dev Stake the stakeAmount of token and mint new nft\r\n    * Mint new NFT to msg.sender\r\n    * Emits a {Staked} event\r\n    */\r\n    event Staked(\r\n        address indexed account, \r\n        uint256 stakeAmount, \r\n        uint256 _nftId\r\n    );\r\n\r\n    function stake(uint256 nftId, uint256 amountToMint) external {\r\n        require(amountToMint != 0, \"Mint amount can not be zero\");\r\n        require(minStakeAmount[nftId] != 0, \"Minimum staking amount is not set for the collection\");\r\n        require(stakeTime[nftId] != 0, \"Stake time is not set for the collection\");\r\n\r\n        uint256 _stakeAmount = amountToMint.mul(minStakeAmount[nftId]);\r\n        token.transferFrom(_msgSender(), address(this), _stakeAmount);\r\n        nftToken.mint(_msgSender(), nftId, amountToMint);\r\n\r\n        Stake memory _stakeInfo = Stake(0, 0, 0, 0, address(0));\r\n        _stakeInfo.stakeId = stakeInfo[_msgSender()].length;\r\n        _stakeInfo.nftId = nftId;\r\n        _stakeInfo.unlockTime = block.timestamp.add(stakeTime[nftId]);\r\n        _stakeInfo.stakedAmount = _stakeAmount;\r\n        _stakeInfo.owner = _msgSender();\r\n        stakeInfo[_msgSender()].push(_stakeInfo);\r\n        emit Staked(_msgSender(), _stakeAmount, nftId);\r\n    }\r\n\r\n    /**\r\n    * @dev Restake if the unlock time is over \r\n    * Mint new NFT to msg.sender\r\n    * Emits a {Staked} event\r\n     */\r\n    function reStake(\r\n        uint256 stakeId\r\n    ) external {\r\n        Stake memory _stakeInfo = stakeInfo[_msgSender()][stakeId];\r\n        require(_stakeInfo.owner == _msgSender(), \"caller is not the owner of stake\");\r\n        require(\r\n            _stakeInfo.unlockTime != 0 && \r\n            _stakeInfo.nftId != 0 &&\r\n            _stakeInfo.stakeId == stakeId &&\r\n            _stakeInfo.stakedAmount != 0, \r\n            \"stake not found\"\r\n        );\r\n\r\n        require(block.timestamp >= _stakeInfo.unlockTime, \"lock is not completed\");\r\n        uint256 _stakedAmount = _stakeInfo.stakedAmount;\r\n        uint256 _amountToMint = _stakedAmount.div(minStakeAmount[_stakeInfo.nftId]);\r\n\r\n        if(_amountToMint == 0) {\r\n            _amountToMint = 1;\r\n        }\r\n\r\n        nftToken.mint(_msgSender(), _stakeInfo.nftId, _amountToMint);\r\n        _stakeInfo.unlockTime = block.timestamp.add(stakeTime[_stakeInfo.nftId]);\r\n        stakeInfo[_msgSender()][stakeId] = _stakeInfo;\r\n        emit Staked(_msgSender(), _stakedAmount, _stakeInfo.nftId);\r\n    }\r\n\r\n    /**\r\n    * @dev Unstake based on nft id only if unlock time is over\r\n    * Transfer staked amount of token to the msg.sender\r\n    * Emits a {Unstaked} event\r\n     */\r\n    event Unstaked(\r\n        address indexed account,\r\n        uint256 stakeAmount,\r\n        uint256 nftId\r\n    );\r\n\r\n    function unstake(\r\n        uint256 stakeId\r\n    ) external {\r\n        Stake memory _stakeInfo = stakeInfo[_msgSender()][stakeId];\r\n        require(_stakeInfo.owner == _msgSender(), \"caller is not the owner of the stake\");\r\n        require(\r\n            _stakeInfo.nftId != 0 && \r\n            _stakeInfo.unlockTime != 0 &&\r\n            _stakeInfo.stakeId == stakeId &&\r\n            _stakeInfo.stakedAmount != 0, \r\n            \"stake not found\"\r\n        );\r\n        require(block.timestamp >= _stakeInfo.unlockTime, \"lock is not completed.\");\r\n        uint256 _stakedAmount = _stakeInfo.stakedAmount;\r\n        _removeStakeInfo(stakeId, _msgSender());\r\n        token.transfer(_msgSender(), _stakedAmount);\r\n        emit Unstaked(_msgSender(), _stakedAmount, _stakeInfo.nftId);\r\n    }\r\n\r\n    function _removeStakeInfo(\r\n        uint256 _stakeId, \r\n        address wallet\r\n    ) internal{\r\n        stakeInfo[wallet][_stakeId] = stakeInfo[wallet][stakeInfo[wallet].length - 1];\r\n        stakeInfo[wallet][_stakeId].stakeId = _stakeId;\r\n        stakeInfo[wallet].pop();\r\n    }\r\n\r\n    /**\r\n    * @dev Update the token address\r\n    * Emits a {UpdateToken} event\r\n     */\r\n    event UpdateToken(address indexed _newToken);\r\n    function updateToken(\r\n        address newToken\r\n    ) external onlyOwner {\r\n        token = IERC20(newToken);\r\n        emit UpdateToken(newToken);\r\n    }\r\n\r\n    /**\r\n    * @dev Update min token stake amount\r\n    * Emits a {UpdateStakeAmount} event \r\n     */\r\n    event UpdateMinStakeAmount(uint256 _nftId, uint256 _stakeAmount);\r\n    function updateMinStakeAmount(\r\n        uint256 _minStakeAmount,\r\n        uint256 _nftId\r\n    ) external onlyOwner {\r\n        minStakeAmount[_nftId] = _minStakeAmount;\r\n        emit UpdateMinStakeAmount(_nftId, _minStakeAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Update token stake time\r\n    * Emits a {UpdateStakeTime} event\r\n     */\r\n    event UpdateStakeTime(uint256 _nftId, uint256 _stakeTime);\r\n    function updateStakeTime(\r\n        uint256 _stakeTime,\r\n        uint256 _nftId\r\n    ) external onlyOwner {\r\n        stakeTime[_nftId] = _stakeTime;\r\n        emit UpdateStakeTime(_nftId, _stakeTime);\r\n    }\r\n\r\n    /**\r\n    * @dev Take any `_token` from the contract\r\n     */\r\n    function withdrawToken(\r\n        address _token,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(_token).transfer(to, amount);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Take `_amount` of eth out from the contract to `_to` wallet address\r\n     */\r\n    function withdrawETH(\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        (bool success, ) = _to.call{value: _amount}(\"\");\r\n        require(success, \"eth sending failed.\");\r\n    }\r\n\r\n    /**\r\n    * @dev Get stake detail based on minted nft id\r\n     */\r\n    function getStakeInfo(\r\n        address wallet\r\n    ) external view returns(Stake[] memory) {\r\n        return stakeInfo[wallet];\r\n    }\r\n\r\n    /**\r\n    * @dev Update the NFT address\r\n    * Emits a {UpdateNftAddress} event\r\n     */\r\n    event UpdateNftAddress(address indexed _nftAddress);\r\n    function updateNftAddress(\r\n        address _nftAddress\r\n    ) external onlyOwner {\r\n        nftToken = NFTMINT1155(_nftAddress);\r\n        emit UpdateNftAddress(_nftAddress);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMinStakeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"UpdateNftAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeTime\",\"type\":\"uint256\"}],\"name\":\"UpdateStakeTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"UpdateToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct MRSTAKE.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftToken\",\"outputs\":[{\"internalType\":\"contract NFTMINT1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"reStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToMint\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"updateNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"updateStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MRSTAKE", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a4cb3ef5f41a4d89d6fced22ea8a1c57957629aa000000000000000000000000ce44172f6b61fb97f6b5ba5c6163908f0fb60729", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5d821220a0a1d450dc5a4e539a7536ff5189d0658b21fdaaa608e67b34760385"}