{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ShidoStakingV4.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at etherscan.com on 2023-10-19\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\\nlibrary customErrors{\\n    error zeroAmount(uint256 amount);\\n    error amountGreaterThanStakedAmount(uint256 amount);\\n    error noStakesFound();\\n    error LockinPeriodNotEnded(uint256 time);\\n    error LockinPeriodOver(uint256 time);\\n    error ZeroLockinPeriod(uint256 period);\\n    error rateShouldBeInBetween0to30(uint256 rate);\\n    error amountIsMoreThanCurrentReward(uint256 amount);\\n    error zeroAddress();\\n    error rewardWalletEmpty();\\n    error invalidArrayLength();\\n    error restrictedAddresses();\\n}\\n\\nlibrary events{\\n    event Staked(\\n        address indexed user,\\n        uint128 amount,\\n        uint128 unlockTime,\\n        uint128 depositTime\\n    );\\n    event Withdrawn(address indexed user, uint128 amount, uint256 reward);\\n    event EmergencyExit(address indexed user, uint128 amount, uint128 fee);\\n    event RewardRate(uint64 rewardRate);\\n    event LockinTime(uint128 lockinTime);\\n    event EmergencyExitFeeChanged(uint64 fee);\\n    event RewardStaked(uint256 amount);\\n    event ClaimedShidoReward(address indexed user, uint256 amount);\\n    event AirDropped(address indexed user, uint128 amount);\\n}\\n\\ncontract ShidoStakingV4 is Initializable, ReentrancyGuard {\\n    struct Stake {\\n        uint128 amount;\\n        uint128 unlockTime;\\n        uint128 depositTime;\\n        uint128 claimedReward;\\n    }\\n\\n    mapping(address => Stake) public userStake;\\n    mapping(address => uint128) public pendingReward;\\n\\n    address public stakeToken;\\n    address public rewardWallet;\\n    address public owner;\\n    address public airdropOwner;\\n\\n    uint128 private totalStakes;\\n    uint128 private totalRewards;\\n\\n    uint128 public lockInPeriod;\\n    uint64 public emergencyExitFees;\\n    uint64 public rewardRate;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _shidoToken,\\n        address _rewardWallet\\n    ) external initializer {\\n        if (_shidoToken == address(0)) {\\n            revert customErrors.zeroAddress();\\n        }\\n        if (_rewardWallet == address(0)) {\\n            revert customErrors.zeroAddress();\\n        }\\n        owner = msg.sender;\\n        stakeToken = _shidoToken;\\n        lockInPeriod = 30 days;\\n        emergencyExitFees = 5;\\n        rewardRate = 800;\\n        rewardWallet = _rewardWallet;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function.\\\");\\n        _;\\n    }\\n\\n    modifier onlyValid() {\\n        require(msg.sender == airdropOwner, \\\"only airdrop owner can airdrop\\\");\\n        _;\\n    }\\n\\n    function stake(uint128 _amount) external nonReentrant {\\n        Stake memory userStakeData = userStake[msg.sender];\\n        if (_amount == 0) {\\n            revert customErrors.zeroAmount(_amount);\\n        }\\n        if (userStakeData.amount == 0) {\\n            userStakeData.unlockTime = uint128(block.timestamp + lockInPeriod);\\n        }\\n        uint256 reward = _calculateReward(msg.sender, userStakeData.amount);\\n        pendingReward[msg.sender] = pendingReward[msg.sender] + uint128(reward);\\n\\n        userStakeData.amount = userStakeData.amount + _amount;\\n        userStakeData.depositTime = uint128(block.timestamp);\\n\\n        userStake[msg.sender] = userStakeData;\\n        totalStakes += _amount;\\n        IERC20(stakeToken).transferFrom(msg.sender, address(this), _amount);\\n        emit events.Staked(\\n            msg.sender,\\n            _amount,\\n            userStakeData.unlockTime,\\n            userStakeData.depositTime\\n        );\\n    }\\n\\n    function withdraw(uint128 _amount) external nonReentrant {\\n        Stake memory userStakeData = userStake[msg.sender];\\n        uint256 reward;\\n\\n        if (_amount <= 0) {\\n            revert customErrors.zeroAmount(_amount);\\n        }\\n        if (_amount > userStakeData.amount) {\\n            revert customErrors.amountGreaterThanStakedAmount(_amount);\\n        }\\n        if (block.timestamp < userStakeData.unlockTime) {\\n            revert customErrors.LockinPeriodNotEnded(block.timestamp);\\n        }\\n        if (msg.sender == 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4 || msg.sender == 0xdD870fA1b7C4700F2BD7f44238821C26f7392148 || msg.sender == 0x583031D1113aD414F02576BD6afaBfb302140225){\\n            revert customErrors.restrictedAddresses();\\n        }\\n        uint128 pendingRewardAmount = pendingReward[msg.sender];\\n\\n        if (_amount == userStakeData.amount) {\\n            reward = _calculateReward(msg.sender, _amount);\\n            totalRewards += uint128(reward) + pendingRewardAmount;\\n            if (\\n                IERC20(stakeToken).balanceOf(rewardWallet) <\\n                reward + pendingRewardAmount\\n            ) {\\n                revert customErrors.rewardWalletEmpty();\\n            }\\n            userStakeData = Stake(\\n                0,\\n                0,\\n                0,\\n                userStakeData.claimedReward +\\n                    uint128(reward + pendingRewardAmount)\\n            );\\n            totalStakes -= _amount;\\n            pendingReward[msg.sender] = 0;\\n            userStake[msg.sender] = userStakeData;\\n            IERC20(stakeToken).transfer(msg.sender, _amount);\\n            IERC20(stakeToken).transferFrom(\\n                rewardWallet,\\n                msg.sender,\\n                reward + pendingRewardAmount\\n            );\\n            emit events.Withdrawn(msg.sender, _amount, reward);\\n        } else if (_amount < userStakeData.amount) {\\n            reward = _calculateReward(msg.sender, _amount);\\n            if (\\n                IERC20(stakeToken).balanceOf(rewardWallet) <\\n                reward + pendingRewardAmount\\n            ) {\\n                revert customErrors.rewardWalletEmpty();\\n            }\\n            totalRewards += uint128(reward + pendingRewardAmount);\\n            userStakeData.amount = userStakeData.amount - _amount;\\n            userStakeData.claimedReward += uint128(\\n                reward + pendingRewardAmount\\n            );\\n            totalStakes -= _amount;\\n            pendingReward[msg.sender] = 0;\\n            userStake[msg.sender] = userStakeData;\\n            IERC20(stakeToken).transfer(msg.sender, _amount);\\n            IERC20(stakeToken).transferFrom(\\n                rewardWallet,\\n                msg.sender,\\n                reward + pendingRewardAmount\\n            );\\n            emit events.Withdrawn(msg.sender, _amount, reward);\\n        }\\n    }\\n\\n    function emergencyExit(uint128 _amount) external nonReentrant {\\n        uint128 fee;\\n        Stake memory userStakeData = userStake[msg.sender];\\n\\n        if (block.timestamp > userStakeData.unlockTime) {\\n            revert customErrors.LockinPeriodOver(block.timestamp);\\n        }\\n        if (_amount > userStakeData.amount) {\\n            revert customErrors.amountGreaterThanStakedAmount(_amount);\\n        }\\n        if (userStakeData.amount <= 0) {\\n            revert customErrors.noStakesFound();\\n        }\\n        if (_amount == 0) {\\n            revert customErrors.zeroAmount(_amount);\\n        }\\n        if (_amount == userStakeData.amount) {\\n            fee = (_amount * emergencyExitFees) / 100;\\n            userStakeData = Stake(0, 0, 0, userStakeData.claimedReward);\\n            totalStakes -= _amount;\\n            pendingReward[msg.sender] = 0;\\n            userStake[msg.sender] = userStakeData;\\n            IERC20(stakeToken).transfer(msg.sender, _amount - fee);\\n            IERC20(stakeToken).transfer(rewardWallet, fee);\\n            emit events.EmergencyExit(msg.sender, _amount, fee);\\n        } else if (_amount < userStakeData.amount) {\\n            pendingReward[msg.sender] = 0;\\n            fee = (_amount * emergencyExitFees) / 100;\\n            userStakeData.amount = userStakeData.amount - _amount;\\n            userStakeData.depositTime = uint128(block.timestamp);\\n            totalStakes -= _amount;\\n            userStake[msg.sender] = userStakeData;\\n            IERC20(stakeToken).transfer(msg.sender, _amount - fee);\\n            IERC20(stakeToken).transfer(rewardWallet, fee);\\n            emit events.EmergencyExit(msg.sender, _amount, fee);\\n        }\\n    }\\n\\n    function stakeShidoReward() external nonReentrant {\\n        Stake memory userStakeData = userStake[msg.sender];\\n        uint256 currentReward = _calculateReward(\\n            msg.sender,\\n            userStakeData.amount\\n        );\\n        if (currentReward == 0) {\\n            revert customErrors.zeroAmount(currentReward);\\n        }\\n        uint128 pendingRewardAmount = pendingReward[msg.sender];\\n        totalStakes += uint128(currentReward + pendingRewardAmount);\\n\\n        userStakeData.amount =\\n            userStakeData.amount +\\n            uint128(currentReward + pendingRewardAmount);\\n        userStakeData.depositTime = uint128(block.timestamp);\\n\\n        userStake[msg.sender] = userStakeData;\\n        pendingReward[msg.sender] = 0;\\n        if (\\n            IERC20(stakeToken).balanceOf(rewardWallet) <\\n            currentReward + pendingRewardAmount\\n        ) {\\n            revert customErrors.rewardWalletEmpty();\\n        }\\n        IERC20(stakeToken).transferFrom(\\n            rewardWallet,\\n            address(this),\\n            currentReward + pendingRewardAmount\\n        );\\n        emit events.RewardStaked(currentReward);\\n    }\\n\\n    function claimReward() external nonReentrant {\\n        Stake memory userStakeData = userStake[msg.sender];\\n        uint256 reward;\\n        uint128 pendingRewardAmount = pendingReward[msg.sender];\\n\\n        if (userStakeData.amount <= 0) {\\n            revert customErrors.noStakesFound();\\n        }\\n        reward = _calculateReward(msg.sender, userStakeData.amount);\\n        if (reward <= 0) {\\n            revert customErrors.zeroAmount(reward);\\n        }\\n        if (msg.sender == 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4 || msg.sender == 0xdD870fA1b7C4700F2BD7f44238821C26f7392148 || msg.sender == 0x583031D1113aD414F02576BD6afaBfb302140225){\\n            revert customErrors.restrictedAddresses();\\n        }\\n        totalRewards += uint128(reward + pendingRewardAmount);\\n\\n        userStakeData.depositTime = uint128(block.timestamp);\\n        userStakeData.claimedReward =\\n            userStakeData.claimedReward +\\n            uint128(reward + pendingRewardAmount);\\n\\n        pendingReward[msg.sender] = 0;\\n        userStake[msg.sender] = userStakeData;\\n        if (\\n            IERC20(stakeToken).balanceOf(rewardWallet) <\\n            reward + pendingRewardAmount\\n        ) {\\n            revert customErrors.rewardWalletEmpty();\\n        }\\n        IERC20(stakeToken).transferFrom(\\n            rewardWallet,\\n            msg.sender,\\n            reward + pendingRewardAmount\\n        );\\n        emit events.ClaimedShidoReward(msg.sender, reward);\\n    }\\n\\n    function airdropStake(\\n        address[] memory _airdropAddresses,\\n        uint128[] memory _amount\\n    ) external nonReentrant onlyValid {\\n        if(_airdropAddresses.length != _amount.length ){revert customErrors.invalidArrayLength();}\\n        \\n        uint128 _totalStakes;\\n        \\n        for (uint256 i = 0; i < _airdropAddresses.length; i++) {\\n            _amount[i] = _amount[i]*10**18;\\n\\n            Stake memory userStakeData = userStake[_airdropAddresses[i]];\\n\\n            userStakeData = Stake(\\n                _amount[i],\\n                uint128(block.timestamp) + uint128(lockInPeriod),\\n                uint128(block.timestamp),\\n                0\\n            );\\n\\n            userStake[_airdropAddresses[i]] = userStakeData;\\n\\n            _totalStakes = _totalStakes + _amount[i];\\n        }\\n        totalStakes = totalStakes + _totalStakes;\\n\\n        IERC20(stakeToken).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _totalStakes\\n        );\\n    }\\n\\n    function changeRewardWallet(address _newRewrdWallet) external onlyOwner {\\n        rewardWallet = _newRewrdWallet;\\n    }\\n\\n    function changeStakeToken(address _address) external onlyOwner {\\n        stakeToken = _address;\\n    }\\n\\n    function setLockInPeriod(uint128 period) external onlyOwner {\\n        lockInPeriod = period;\\n        emit events.LockinTime(lockInPeriod);\\n    }\\n\\n    function setRewardRate(uint64 rate) external onlyOwner {\\n        rewardRate = rate;\\n        emit events.RewardRate(rewardRate);\\n    }\\n\\n    function setAirdropWallet(address _addr) external onlyOwner {\\n        airdropOwner = _addr;\\n    }\\n\\n    function setEmergencyExitFees(uint64 fee) external onlyOwner {\\n        emergencyExitFees = fee;\\n        emit events.EmergencyExitFeeChanged(emergencyExitFees);\\n    }\\n\\n    function changeOwner(address _address) external onlyOwner {\\n        if (_address == address(0)) {\\n            revert customErrors.zeroAddress();\\n        }\\n        owner = _address;\\n    }\\n\\n    function renounceOwner() external onlyOwner {\\n        owner = address(0);\\n    }\\n\\n    function calculateReward(\\n        address user,\\n        uint128 _amount\\n    ) internal view returns (uint256) {\\n        uint256 time = (block.timestamp - userStake[user].depositTime);\\n        uint256 reward = (_amount * rewardRate * time) / (365 days * 100 * 100);\\n        return reward + pendingReward[user];\\n    }\\n\\n    function _calculateReward(\\n        address user,\\n        uint128 _amount\\n    ) internal view returns (uint256) {\\n        uint256 time = (block.timestamp - userStake[user].depositTime);\\n        uint256 reward = (_amount * rewardRate * time) / (365 days * 100 * 100);\\n        return reward;\\n    }\\n\\n    function getTotalStakes() external view returns (uint128) {\\n        return totalStakes;\\n    }\\n\\n    function getTotalRewards() external view returns (uint128) {\\n        return totalRewards;\\n    }\\n\\n    function getUserReward(\\n        address _add\\n    ) external view returns (uint256 _reward) {\\n        _reward = calculateReward(_add, userStake[_add].amount);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LockinPeriodNotEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LockinPeriodOver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"amountGreaterThanStakedAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"noStakesFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"restrictedAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"rewardWalletEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"zeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_airdropAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amount\",\"type\":\"uint128[]\"}],\"name\":\"airdropStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRewrdWallet\",\"type\":\"address\"}],\"name\":\"changeRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExitFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shidoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockInPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAirdropWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"fee\",\"type\":\"uint64\"}],\"name\":\"setEmergencyExitFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"}],\"name\":\"setLockInPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeShidoReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unlockTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"depositTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimedReward\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShidoStakingV4", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}