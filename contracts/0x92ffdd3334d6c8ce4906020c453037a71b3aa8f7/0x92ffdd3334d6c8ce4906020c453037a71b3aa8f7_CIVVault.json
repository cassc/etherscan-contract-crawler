{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/CIV-TimeOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/// @title TimeOracle\\n/// @author Civilization\\n/// @notice This contract is used to track periods of time based on a given epoch duration\\n/// @dev The owner of the contract can change the epoch duration\\ncontract TimeOracle {\\n    address public owner; // Owner of the contract\\n    uint public startTime; // Start time of the tracking\\n    uint public epochDuration; // Duration of each period in seconds\\n    uint public currentPeriod; // Current periods elapsed from the start\\n\\n    /// @notice Initializes the contract with a given epoch duration\\n    /// @param _epochDuration Duration of each period in seconds\\n    constructor(uint _epochDuration) {\\n        owner = msg.sender; // Set the deployer as the owner\\n        startTime = block.timestamp; // Initialization at deployment time\\n        epochDuration = _epochDuration;\\n    }\\n\\n    /// @notice Calculates the start time for current period\\n    /// @return currentPeriodStartTime The start time for the current period\\n    function getCurrentPeriod()\\n        external\\n        view\\n        returns (uint currentPeriodStartTime)\\n    {\\n        require(\\n            block.timestamp >= startTime,\\n            \\\"TimeOracle: Query before start time\\\"\\n        );\\n\\n        // Calculate how many periods have passed since the start\\n        uint period = (block.timestamp - startTime) /\\n            epochDuration;\\n\\n        // Calculate the start time for the current period\\n        currentPeriodStartTime = startTime + period * epochDuration;\\n\\n        return currentPeriodStartTime;\\n    }\\n\\n    /// @notice Allows the owner to set a new epoch duration\\n    /// @param _newEpochDuration The new epoch duration in seconds\\n    function setEpochDuration(uint _newEpochDuration) external {\\n        require(\\n            msg.sender == owner,\\n            \\\"TimeOracle: Only owner can change epochDuration\\\"\\n        );\\n\\n        // Calculate the current period before changing epochDuration\\n        currentPeriod += (block.timestamp - startTime) / epochDuration;\\n\\n        // Update startTime to now\\n        startTime = block.timestamp;\\n\\n        // Update epochDuration\\n        epochDuration = _newEpochDuration;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CIV-Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/**\\n * @title  Civ Vault\\n * @author Ren / Frank\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/FixedPoint.sol\\\";\\nimport \\\"./interfaces/ICivFund.sol\\\";\\nimport \\\"./CIV-VaultGetter.sol\\\";\\nimport \\\"./CIV-VaultFactory.sol\\\";\\n\\ncontract CIVVault is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ICivFundRT;\\n    using FixedPoint for *;\\n\\n    /// @notice All Fees Base Amount\\n    uint public constant feeBase = 10_000;\\n    /// @notice Safety Factor to avoid out of Gas in loops\\n    uint public gasBuffer;\\n    /// @notice Number of strategies\\n    uint public strategiesCounter;\\n    /// @notice vault getter contract\\n    ICivVaultGetter public vaultGetter;\\n    /// @notice share factory contract\\n    CIVFundShareFactory public fundShareFactory;\\n    /// @notice mapping with info on each strategy\\n    mapping(uint => StrategyInfo) private _strategyInfo;\\n    /// @notice structure with epoch info\\n    mapping(uint => mapping(uint => EpochInfo)) private _epochInfo;\\n    /// @notice Info of each user that enters the fund\\n    mapping(uint => mapping(address => UserInfo)) private _userInfo;\\n    /// @notice Counter for the epochs of each strategy\\n    mapping(uint => uint) private _epochCounter;\\n    /// @notice Each Strategies epoch informations per address\\n    mapping(uint => mapping(address => mapping(uint => UserInfoEpoch)))\\n        private _userInfoEpoch;\\n    /// @notice Mapping of depositors on a particular epoch\\n    mapping(uint => mapping(uint => mapping(uint => address)))\\n        private _depositors;\\n    /// @notice Mapping of guarantee locks on a strategy for each user\\n    mapping(uint => mapping(address => mapping(uint => GuaranteeInfo)))\\n        private _userGuaranteeLock; // Index of the depositor in the depositors mapping\\n\\n    ////////////////// EVENTS //////////////////\\n\\n    /// @notice Event emitted when user deposit fund to our vault or vault deposit fund to strategy\\n    event Deposit(\\n        address indexed user,\\n        address receiver,\\n        uint indexed id,\\n        uint amount\\n    );\\n    /// @notice Event emitted when user request withdraw fund from our vault or vault withdraw fund to user\\n    event Withdraw(address indexed user, uint indexed id, uint amount);\\n    /// @notice Event emitted when owner sets new fee\\n    event SetFee(\\n        uint id,\\n        uint oldFee,\\n        uint newFee,\\n        uint oldDuration,\\n        uint newDuration\\n    );\\n    /// @notice Event emitted when owner sets new guarantee fee\\n    event SetGuaranteeFee(uint oldFee, uint newFee);\\n    /// @notice Event emitted when owner sets new gas buffer\\n    event SetGasBuffer(uint gasBuffer, uint newGasBuffer);\\n    /// @notice Event emitted when owner sets new deposit duration\\n    event SetEpochDuration(uint id, uint oldDuration, uint newDuration);\\n    /// @notice Event emitted when owner sets new guarantee token lock time\\n    event SetGuaranteeLockTime(uint id, uint oldLocktime, uint newLockTime);\\n    /// @notice Event emitted when owner sets new treasury addresses\\n    event SetWithdrawAddress(\\n        uint id,\\n        address[] oldAddress,\\n        address[] newAddress\\n    );\\n    /// @notice Event emitted when owner sets new invest address\\n    event SetInvestAddress(uint id, address oldAddress, address newAddress);\\n    /// @notice Event emitted when send fee to our treasury\\n    event SendFeeWithOwner(uint id, address treasuryAddress, uint feeAmount);\\n    /// @notice Event emitted when owner update new VPS\\n    event UpdateVPS(uint id, uint lastEpoch, uint VPS);\\n    /// @notice Event emitted when owner paused deposit\\n    event SetPaused(uint id, bool paused);\\n    /// @notice Event emitted when owner set new Max & Min Deposit Amount\\n    event SetLimits(\\n        uint id,\\n        uint oldMaxAmount,\\n        uint newMaxAmount,\\n        uint oldMinAmount,\\n        uint newMinAmount,\\n        uint oldMaxUsers,\\n        uint newMaxUsers\\n    );\\n    /// @notice Event emitted when user cancel pending deposit from vault\\n    event CancelDeposit(address user, uint id, uint amount);\\n    /// @notice Event emitted when user cancel withdraw request from vault\\n    event CancelWithdraw(address user, uint id, uint amount);\\n    /// @notice Event emitted when Uniswap Token Price Updated\\n    event Update(uint id, uint index);\\n    /// @notice Event emitted when user claim guarantee token\\n    event ClaimGuarantee(uint id, address user, uint guaranteeAmount);\\n    /// @notice Event emitted when user claim Asset token for each epoch\\n    event ClaimWithdrawedToken(\\n        uint id,\\n        address user,\\n        uint epoch,\\n        uint assetAmount\\n    );\\n    /// @notice Event emitted when user claim Asset token\\n    event WithdrawedToken(uint id, address user, uint assetAmount);\\n    /// @notice Event emitted when owner adds new strategy\\n    event AddStrategy(\\n        uint indexed id,\\n        uint indexed fee,\\n        uint maxDeposit,\\n        uint minDeposit,\\n        bool paused,\\n        address[] withdrawAddress,\\n        address assetToken,\\n        address guaranteeToken,\\n        uint lockPeriod,\\n        uint feeDuration\\n    );\\n    /// @notice Event emitted when strategy is initialized\\n    event InitializeStrategy(uint indexed id);\\n\\n    ////////////////// ERROR CODES //////////////////\\n    /*\\n    ERR_V.1 = \\\"Strategy does not exist\\\";\\n    ERR_V.2 = \\\"Deposit paused\\\";\\n    ERR_V.3 = \\\"Treasury Address Length must be 2\\\";\\n    ERR_V.4 = \\\"Burn failed\\\";\\n    ERR_V.5 = \\\"Guarantee Token address cannot be null address\\\";\\n    ERR_V.6 = \\\"First Treasury address cannot be null address\\\";\\n    ERR_V.7 = \\\"Second Treasury address cannot be null address\\\";\\n    ERR_V.8 = \\\"Minting failed\\\";\\n    ERR_V.9 = \\\"Strategy already initialized\\\";\\n    ERR_V.10 = \\\"No epochs exist\\\";\\n    ERR_V.11 = \\\"Wait for the previos epoch to settle before requesting withdraw\\\";\\n    ERR_V.12 = \\\"Insufficient contract balance\\\";\\n    ERR_V.13 = \\\"Not enough amount to withdraw\\\";\\n    ERR_V.14 = \\\"Strategy address cannot be null address\\\";\\n    ERR_V.15 = \\\"Enable withdraw for previous epoch\\\";\\n    ERR_V.16 = \\\"Distribute all shares for previous epoch\\\";\\n    ERR_V.17 = \\\"Epoch does not exist\\\";\\n    ERR_V.18 = \\\"Epoch not yet expired\\\";\\n    ERR_V.19 = \\\"No funds available to withdraw\\\";\\n    ERR_V.20 = \\\"Amount can't be 0\\\";\\n    ERR_V.21 = \\\"Insufficient User balance\\\";\\n    ERR_V.22 = \\\"No more users are allowed\\\";\\n    ERR_V.23 = \\\"Deposit amount exceeds epoch limit\\\";\\n    ERR_V.24 = \\\"Epoch expired\\\";\\n    ERR_V.25 = \\\"Current balance not enough\\\";\\n    ERR_V.26 = \\\"Not enough total withdrawals\\\";\\n    ERR_V.27 = \\\"VPS not yet updated\\\";\\n    ERR_V.28 = \\\"Already started distribution\\\";\\n    ERR_V.29 = \\\"Not yet distributed\\\";\\n    ERR_V.30 = \\\"Already distributed\\\";\\n    ERR_V.31 = \\\"Fee duration not yet passed\\\";\\n    ERR_V.32 = \\\"Vault balance is not enough to pay fees\\\";\\n    ERR_V.33 = \\\"Transfer Failed\\\";\\n    ERR_V.34 = \\\"Withdraw Token cannot be deposit token\\\";\\n    ERR_V.35 = \\\"No pending Fees to distribute\\\";\\n    ERR_V.36 = \\\"Nothing to claim\\\";\\n    ERR_V.37 = \\\"Wait for rebalancing to complete\\\";\\n    */\\n\\n    ////////////////// MODIFIER //////////////////\\n\\n    modifier checkStrategyExistence(uint _id) {\\n        require(strategiesCounter > _id, \\\"ERR_V.1\\\");\\n        _;\\n    }\\n\\n    modifier checkEpochExistence(uint _id) {\\n        require(_epochCounter[_id] > 0, \\\"ERR_V.10\\\");\\n        _;\\n    }\\n\\n    ////////////////// CONSTRUCTOR //////////////////\\n\\n    constructor() {\\n        CivVaultGetter getterContract = new CivVaultGetter(address(this));\\n        fundShareFactory = new CIVFundShareFactory();\\n        vaultGetter = ICivVaultGetter(address(getterContract));\\n    }\\n\\n    ////////////////// INITIALIZATION //////////////////\\n\\n    /// @notice Add new strategy to our vault\\n    /// @dev Only Owner can call this function\\n    /// @param addStrategyParam Parameters for new strategy\\n    function addStrategy(\\n        AddStrategyParam memory addStrategyParam\\n    ) external virtual nonReentrant onlyOwner {\\n        require(addStrategyParam._withdrawAddresses.length == 2, \\\"ERR_V.3\\\");\\n        require(\\n            address(addStrategyParam._guaranteeToken) != address(0),\\n            \\\"ERR_V.5\\\"\\n        );\\n        require(\\n            addStrategyParam._withdrawAddresses[0] != address(0),\\n            \\\"ERR_V.6\\\"\\n        );\\n        require(\\n            addStrategyParam._withdrawAddresses[1] != address(0),\\n            \\\"ERR_V.7\\\"\\n        );\\n        /// deploy new CIVFundShare contract\\n        CIVFundShare fundRepresentToken = fundShareFactory.createCIVFundShare();\\n\\n        _strategyInfo[strategiesCounter] = StrategyInfo({\\n            assetToken: addStrategyParam._assetToken,\\n            fundRepresentToken: ICivFundRT(address(fundRepresentToken)),\\n            guaranteeToken: addStrategyParam._guaranteeToken,\\n            fee: addStrategyParam._fee,\\n            guaranteeFee: addStrategyParam._guaranteeFee,\\n            withdrawAddress: addStrategyParam._withdrawAddresses,\\n            investAddress: addStrategyParam._investAddress,\\n            initialized: false,\\n            pendingFees: 0,\\n            maxDeposit: addStrategyParam._maxDeposit,\\n            maxUsers: addStrategyParam._maxUsers,\\n            minDeposit: addStrategyParam._minAmount,\\n            paused: addStrategyParam._paused,\\n            epochDuration: addStrategyParam._epochDuration,\\n            lockPeriod: addStrategyParam._lockPeriod,\\n            feeDuration: addStrategyParam._feeDuration,\\n            lastFeeDistribution: 0,\\n            lastProcessedEpoch: 0,\\n            watermark: 0\\n        });\\n\\n        uint id = strategiesCounter;\\n        strategiesCounter++;\\n        vaultGetter.addUniPair(\\n            id,\\n            address(addStrategyParam._assetToken),\\n            address(addStrategyParam._guaranteeToken)\\n        );\\n        emit AddStrategy(\\n            id,\\n            addStrategyParam._fee,\\n            addStrategyParam._maxDeposit,\\n            addStrategyParam._minAmount,\\n            addStrategyParam._paused,\\n            addStrategyParam._withdrawAddresses,\\n            address(addStrategyParam._assetToken),\\n            address(addStrategyParam._guaranteeToken),\\n            addStrategyParam._lockPeriod,\\n            addStrategyParam._feeDuration\\n        );\\n    }\\n\\n    /// @notice Delayed strategy start\\n    /// @dev Only Owner can call this function\\n    /// @param _id strategy id\\n    function initializeStrategy(\\n        uint _id\\n    ) external onlyOwner checkStrategyExistence(_id) {\\n        require(!_strategyInfo[_id].initialized, \\\"ERR_V.9\\\");\\n\\n        _strategyInfo[_id].initialized = true;\\n        vaultGetter.addTimeOracle(_id, _strategyInfo[_id].epochDuration);\\n\\n        _epochInfo[_id][_epochCounter[_id]] = EpochInfo({\\n            totDepositors: 0,\\n            totDepositedAssets: 0,\\n            totWithdrawnShares: 0,\\n            VPS: 0,\\n            newShares: 0,\\n            currentWithdrawAssets: 0,\\n            epochStartTime: block.timestamp,\\n            lastDepositorProcessed: 0,\\n            duration: _strategyInfo[_id].epochDuration\\n        });\\n\\n        _epochCounter[_id]++;\\n        emit InitializeStrategy(_id);\\n    }\\n\\n    ////////////////// SETTER //////////////////\\n\\n    /// @notice Sets new fee and new collecting fee duration\\n    /// @dev Only Owner can call this function\\n    /// @param _id Strategy Id\\n    /// @param _newFee New Fee Percent\\n    /// @param _newDuration New Collecting Fee Duration\\n    function setFee(\\n        uint _id,\\n        uint _newFee,\\n        uint _newDuration\\n    ) external onlyOwner checkStrategyExistence(_id) {\\n        emit SetFee(\\n            _id,\\n            _strategyInfo[_id].fee,\\n            _newFee,\\n            _strategyInfo[_id].feeDuration,\\n            _newDuration\\n        );\\n        _strategyInfo[_id].fee = _newFee;\\n        _strategyInfo[_id].feeDuration = _newDuration;\\n    }\\n\\n    /// @notice Sets new Strategy guarantee token lock time and guarantee fee\\n    /// @dev Only Owner can call this function\\n    /// @param _id Strategy Id\\n    /// @param _lockTime New Guarantee token lock time\\n    /// @param _newFee new guarantee fee amount\\n    function setStrategyGuarantee(\\n        uint _id,\\n        uint _lockTime,\\n        uint _newFee\\n    ) external onlyOwner checkStrategyExistence(_id) {\\n        emit SetGuaranteeLockTime(\\n            _id,\\n            _strategyInfo[_id].lockPeriod,\\n            _lockTime\\n        );\\n        emit SetGuaranteeFee(_strategyInfo[_id].guaranteeFee, _newFee);\\n        _strategyInfo[_id].lockPeriod = _lockTime;\\n        _strategyInfo[_id].guaranteeFee = _newFee;\\n    }\\n\\n    /// @notice Sets new deposit fund from vault to strategy duration\\n    /// @dev Only Owner can call this function\\n    /// @param _id Strategy Id\\n    /// @param _newDuration New Duration for Deposit fund from vault to strategy\\n    function setEpochDuration(\\n        uint _id,\\n        uint _newDuration\\n    ) external onlyOwner checkStrategyExistence(_id) {\\n        emit SetEpochDuration(\\n            _id,\\n            _strategyInfo[_id].epochDuration,\\n            _newDuration\\n        );\\n        vaultGetter.setEpochDuration(_id, _newDuration);\\n        _strategyInfo[_id].epochDuration = _newDuration;\\n    }\\n\\n    /// @notice Sets new treasury addresses to keep fee\\n    /// @dev Only Owner can call this function\\n    /// @param _id Strategy Id\\n    /// @param _newAddress Address list to keep fee\\n    function setWithdrawAddress(\\n        uint _id,\\n        address[] memory _newAddress\\n    ) external onlyOwner checkStrategyExistence(_id) {\\n        require(_newAddress.length == 2, \\\"ERR_V.3\\\");\\n        require(_newAddress[0] != address(0), \\\"ERR_V.6\\\");\\n        require(_newAddress[1] != address(0), \\\"ERR_V.7\\\");\\n        emit SetWithdrawAddress(\\n            _id,\\n            _strategyInfo[_id].withdrawAddress,\\n            _newAddress\\n        );\\n        _strategyInfo[_id].withdrawAddress = _newAddress;\\n    }\\n\\n    /// @notice Sets new treasury addresses to keep fee\\n    /// @dev Only Owner can call this function\\n    /// @param _id Strategy Id\\n    /// @param _newAddress Address list to keep fee\\n    function setInvestAddress(\\n        uint _id,\\n        address _newAddress\\n    ) external onlyOwner checkStrategyExistence(_id) {\\n        require(_newAddress != address(0), \\\"ERR_V.14\\\");\\n        emit SetInvestAddress(\\n            _id,\\n            _strategyInfo[_id].investAddress,\\n            _newAddress\\n        );\\n        _strategyInfo[_id].investAddress = _newAddress;\\n    }\\n\\n    /// @notice Set Pause of Unpause for deposit to vault\\n    /// @dev Only Owner can change this status\\n    /// @param _id Strategy Id\\n    /// @param _paused paused or unpaused for deposit\\n    function setPaused(\\n        uint _id,\\n        bool _paused\\n    ) external onlyOwner checkStrategyExistence(_id) {\\n        emit SetPaused(_id, _paused);\\n        _strategyInfo[_id].paused = _paused;\\n    }\\n\\n    /// @notice Set limits on a given strategy\\n    /// @dev Only Owner can change this status\\n    /// @param _id Strategy Id\\n    /// @param _newMaxDeposit New Max Deposit Amount\\n    /// @param _newMinDeposit New Min Deposit Amount\\n    /// @param _newMaxUsers New Max User Count\\n    function setEpochLimits(\\n        uint _id,\\n        uint _newMaxDeposit,\\n        uint _newMinDeposit,\\n        uint _newMaxUsers\\n    ) external onlyOwner checkStrategyExistence(_id) {\\n        emit SetLimits(\\n            _id,\\n            _strategyInfo[_id].maxDeposit,\\n            _newMaxDeposit,\\n            _strategyInfo[_id].minDeposit,\\n            _newMinDeposit,\\n            _strategyInfo[_id].maxUsers,\\n            _newMaxUsers\\n        );\\n        _strategyInfo[_id].maxDeposit = _newMaxDeposit;\\n        _strategyInfo[_id].minDeposit = _newMinDeposit;\\n        _strategyInfo[_id].maxUsers = _newMaxUsers;\\n    }\\n\\n    /// @notice Sets new gas buffer\\n    /// @dev Only Owner can call this function\\n    /// @param _gasBuffer new gas buffer amount\\n    function setGasBuffer(uint _gasBuffer) external onlyOwner {\\n        emit SetGasBuffer(gasBuffer, _gasBuffer);\\n        gasBuffer = _gasBuffer;\\n    }\\n\\n    ////////////////// GETTER //////////////////\\n\\n    /**\\n     * @dev Fetches the strategy information for a given strategy _id.\\n     * @param _id The ID of the strategy to fetch the information for.\\n     * @return strategy The StrategyInfo struct associated with the provided _id.\\n     */\\n    function getStrategyInfo(\\n        uint _id\\n    )\\n        external\\n        view\\n        checkStrategyExistence(_id)\\n        returns (StrategyInfo memory strategy)\\n    {\\n        strategy = _strategyInfo[_id];\\n    }\\n\\n    /**\\n     * @dev Fetches the epoch information for a given strategy _id.\\n     * @param _id The ID of the strategy to fetch the information for.\\n     * @param _index The index of the epoch to fetch the information for.\\n     * @return epoch The EpochInfo struct associated with the provided _id and _index.\\n     */\\n    function getEpochInfo(\\n        uint _id,\\n        uint _index\\n    )\\n        external\\n        view\\n        checkStrategyExistence(_id)\\n        checkEpochExistence(_id)\\n        returns (EpochInfo memory epoch)\\n    {\\n        epoch = _epochInfo[_id][_index];\\n    }\\n\\n    /**\\n     * @dev Fetches the current epoch number for a given strategy _id.\\n     * The current epoch is determined as the last index of the epochInfo mapping for the strategy.\\n     * @param _id The _id of the strategy to fetch the current epoch for.\\n     * @return The current epoch number for the given strategy _id.\\n     */\\n    function getCurrentEpoch(\\n        uint _id\\n    )\\n        public\\n        view\\n        checkStrategyExistence(_id)\\n        checkEpochExistence(_id)\\n        returns (uint)\\n    {\\n        return _epochCounter[_id] - 1;\\n    }\\n\\n    /**\\n     * @dev Fetches the user information for a given strategy _id.\\n     * @param _id The _id of the strategy to fetch the information for.\\n     * @param _user The address of the user to fetch the information for.\\n     * @return user The UserInfo struct associated with the provided _id and _user.\\n     */\\n    function getUserInfo(\\n        uint _id,\\n        address _user\\n    ) external view checkStrategyExistence(_id) returns (UserInfo memory user) {\\n        user = _userInfo[_id][_user];\\n    }\\n\\n    /**\\n     * @dev Fetches the user information for a given strategy _id.\\n     * @param _id The _id of the strategy to fetch the information for.\\n     * @param _epoch The starting index to fetch the information for.\\n     * @return users An array of addresses of unique depositors.\\n     */\\n    function getDepositors(\\n        uint _id,\\n        uint _epoch\\n    )\\n        external\\n        view\\n        checkStrategyExistence(_id)\\n        returns (address[] memory users)\\n    {  \\n        // Initialize the return array with the size equal to the range between the start and end indices\\n        users = new address[](_epochInfo[_id][_epoch].totDepositors);\\n\\n        // Loop through the mapping to populate the return array\\n        for (uint i = 0; i < _epochInfo[_id][_epoch].totDepositors; i++) {\\n            users[i] = _depositors[_id][_epoch][i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the deposit parameters for a given strategy _id.\\n     * @param _id The _id of the strategy to fetch the information for.\\n     * @param _user The address of the user to fetch the information for.\\n     * @param _index The index of the deposit to fetch the information for.\\n     * @return userEpochStruct The UserInfoEpoch struct associated with the provided _id, _user and _index.\\n     */\\n    function getUserInfoEpoch(\\n        uint _id,\\n        address _user,\\n        uint _index\\n    )\\n        external\\n        view\\n        checkStrategyExistence(_id)\\n        returns (UserInfoEpoch memory userEpochStruct)\\n    {\\n        userEpochStruct = _userInfoEpoch[_id][_user][_index];\\n    }\\n\\n    /**\\n     * @dev Fetches the guarantee parameters for an user for a certain index.\\n     * @param _id The _id of the strategy to fetch the information for.\\n     * @param _user The address of the user to fetch the information for.\\n     * @param _index The index of the user guarantee lock to fetch the information for.\\n     * @return userGuarantee The UserInfoEpoch struct associated with the provided id, _user and _index.\\n     */\\n    function getGuaranteeInfo(\\n        uint _id,\\n        address _user,\\n        uint _index\\n    )\\n        external\\n        view\\n        checkStrategyExistence(_id)\\n        returns (GuaranteeInfo memory userGuarantee)\\n    {\\n        userGuarantee = _userGuaranteeLock[_id][_user][_index];\\n    }\\n\\n    ////////////////// UPDATE //////////////////\\n\\n    /**\\n     * @dev Updates the current epoch information for the specified strategy\\n     * @param _id The Strategy _id\\n     * @return currentEpoch The _id of the current epoch\\n     *\\n     * This function checks if the current epoch's duration has been met or exceeded.\\n     * If true, it initializes a new epoch with its starting time as the current block timestamp.\\n     * If false, no action is taken.\\n     *\\n     * Requirements:\\n     * - The strategy must be initialized.\\n     * - The current block timestamp must be equal to or greater than the start\\n     *   time of the current epoch plus the epoch's duration.\\n     */\\n    function updateEpoch(\\n        uint _id\\n    ) private checkEpochExistence(_id) returns (uint) {\\n        uint currentEpoch = getCurrentEpoch(_id);\\n\\n        if (\\n            block.timestamp >=\\n            _epochInfo[_id][currentEpoch].epochStartTime +\\n                _epochInfo[_id][currentEpoch].duration\\n        ) {\\n            require(_epochInfo[_id][currentEpoch].VPS > 0, \\\"ERR_V.37\\\");\\n\\n            _epochInfo[_id][_epochCounter[_id]] = EpochInfo({\\n                totDepositors: 0,\\n                totDepositedAssets: 0,\\n                totWithdrawnShares: 0,\\n                VPS: 0,\\n                newShares: 0,\\n                currentWithdrawAssets: 0,\\n                epochStartTime: vaultGetter.getCurrentPeriod(_id),\\n                lastDepositorProcessed: 0,\\n                duration: _strategyInfo[_id].epochDuration\\n            });\\n\\n            _epochCounter[_id]++;\\n        }\\n\\n        return getCurrentEpoch(_id);\\n    }\\n\\n    /// @notice Calculate fees to the treasury address and save it in the strategy mapping and returns adjusted VPS\\n    /**\\n     * @dev Internal function\\n     */\\n    /// @param _id Strategy _id\\n    /// @param _newVPS new Net Asset Value\\n    /// @return adjustedVPS The new VPS after fees have been deducted\\n    function calculateFees(\\n        uint _id,\\n        uint _newVPS\\n    ) private returns (uint adjustedVPS) {\\n        StrategyInfo storage strategy = _strategyInfo[_id];\\n\\n        uint sharesMultiplier = 10 ** strategy.fundRepresentToken.decimals();\\n        uint totalSupplyShares = strategy.fundRepresentToken.totalSupply();\\n        uint actualFee = 0;\\n        adjustedVPS = _newVPS;\\n\\n        if (strategy.watermark < _newVPS) {\\n            actualFee =\\n                ((_newVPS - strategy.watermark) *\\n                    strategy.fee *\\n                    totalSupplyShares) /\\n                feeBase /\\n                sharesMultiplier;\\n            if (actualFee > 0) {\\n                strategy.watermark = _newVPS;\\n                strategy.lastFeeDistribution = block.timestamp;\\n                strategy.pendingFees += actualFee;\\n\\n                // Calculate adjusted VPS based on the actual fee\\n                uint adjustedTotalValue = (_newVPS * totalSupplyShares) /\\n                    sharesMultiplier -\\n                    actualFee;\\n                adjustedVPS =\\n                    (adjustedTotalValue * sharesMultiplier) \\n                    / totalSupplyShares;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Processes the fund associated with a particular strategy, handling deposits,\\n     * minting, and burning of shares.\\n     * @param _id The Strategy _id\\n     * @param _newVPS New value per share (VPS) expressed in decimals (same as assetToken)\\n     * - must be greater than 0\\n     *\\n     * This function performs the following actions:\\n     * 1. Retrieves the current epoch and strategy info;\\n     * 2. Calculate the new shares and current withdrawal based on new VPS;\\n     * 3. Mints or burns shares depending on the new shares and total withdrawals.\\n     * 4. Handles deposits and withdrawals by transferring the Asset tokens.\\n     *\\n     * Requirements:\\n     * - `_newVPS` must be greater than 0.\\n     * - The necessary amount of Asset tokens must be present in the contract for deposits if required.\\n     * - The necessary amount of Asset tokens must be present in the investAddress for withdrawals if required.\\n     */\\n    function processFund(uint _id, uint _newVPS) private {\\n        require(_newVPS > 0, \\\"ERR_V.35\\\");\\n\\n        // Step 1\\n        EpochInfo storage epoch = _epochInfo[_id][\\n            _strategyInfo[_id].lastProcessedEpoch\\n        ];\\n        StrategyInfo memory strategy = _strategyInfo[_id];\\n\\n        uint sharesMultiplier = 10 ** strategy.fundRepresentToken.decimals();\\n\\n        // Step 2\\n        uint newShares = (epoch.totDepositedAssets * sharesMultiplier) /\\n            _newVPS;\\n        uint currentWithdrawAssets = (_newVPS * epoch.totWithdrawnShares) /\\n            sharesMultiplier;\\n\\n        epoch.newShares = newShares;\\n        epoch.currentWithdrawAssets = currentWithdrawAssets;\\n\\n        // Step 3\\n        if (newShares > epoch.totWithdrawnShares) {\\n            uint sharesToMint = newShares - epoch.totWithdrawnShares;\\n            bool success = strategy.fundRepresentToken.mint(sharesToMint);\\n            require(success, \\\"ERR_V.8\\\");\\n        } else {\\n            uint offSetShares = epoch.totWithdrawnShares - newShares;\\n            if (offSetShares > 0) {\\n                bool success = strategy.fundRepresentToken.burn(offSetShares);\\n                require(success, \\\"ERR_V.4\\\");\\n            }\\n        }\\n\\n        // Step 4\\n        if (epoch.totDepositedAssets >= currentWithdrawAssets) {\\n            uint netDeposits = epoch.totDepositedAssets - currentWithdrawAssets;\\n            if (netDeposits > 0) {\\n                require(\\n                    strategy.assetToken.balanceOf(address(this)) >= netDeposits,\\n                    \\\"ERR_V.12\\\"\\n                );\\n                strategy.assetToken.safeTransfer(\\n                    strategy.investAddress,\\n                    netDeposits\\n                );\\n                emit Deposit(\\n                    address(this),\\n                    strategy.investAddress,\\n                    _id,\\n                    netDeposits\\n                );\\n            }\\n        } else {\\n            uint offSet = currentWithdrawAssets - epoch.totDepositedAssets;\\n            require(\\n                strategy.assetToken.balanceOf(strategy.investAddress) >= offSet,\\n                \\\"ERR_V.13\\\"\\n            );\\n            strategy.assetToken.safeTransferFrom(\\n                strategy.investAddress,\\n                address(this),\\n                offSet\\n            );\\n        }\\n    }\\n\\n    /// @notice Sets new VPS of the strategy.\\n    /**\\n     * @dev Only Owner can call this function.\\n     *      Owner must transfer fund to our vault before calling this function\\n     */\\n    /// @param _id Strategy _id\\n    /// @param _newVPS New VPS value\\n    function rebalancing(\\n        uint _id,\\n        uint _newVPS\\n    ) external nonReentrant onlyOwner checkStrategyExistence(_id) {\\n        StrategyInfo storage strategy = _strategyInfo[_id];\\n        require(strategy.investAddress != address(0), \\\"ERR_V.14\\\");\\n\\n        if (strategy.lastProcessedEpoch == 0) {\\n            EpochInfo storage initEpoch = _epochInfo[_id][0];\\n            if (initEpoch.VPS > 0) {\\n                require(\\n                    initEpoch.lastDepositorProcessed == initEpoch.totDepositors,\\n                    \\\"ERR_V.16\\\"\\n                );\\n                require(_epochCounter[_id] > 1, \\\"ERR_V.17\\\");\\n                strategy.lastProcessedEpoch++;\\n                EpochInfo storage newEpoch = _epochInfo[_id][1];\\n                require(\\n                    block.timestamp >=\\n                        newEpoch.epochStartTime + newEpoch.duration,\\n                    \\\"ERR_V.18\\\"\\n                );\\n                _newVPS = calculateFees(_id, _newVPS);\\n                newEpoch.VPS = _newVPS;\\n            } else {\\n                require(\\n                    block.timestamp >=\\n                        initEpoch.epochStartTime + initEpoch.duration,\\n                    \\\"ERR_V.18\\\"\\n                );\\n                strategy.watermark = _newVPS;\\n                initEpoch.VPS = _newVPS;\\n            }\\n        } else {\\n            require(\\n                _epochInfo[_id][strategy.lastProcessedEpoch]\\n                    .lastDepositorProcessed ==\\n                    _epochInfo[_id][strategy.lastProcessedEpoch].totDepositors,\\n                \\\"ERR_V.16\\\"\\n            );\\n            strategy.lastProcessedEpoch++;\\n            require(\\n                _epochCounter[_id] > strategy.lastProcessedEpoch,\\n                \\\"ERR_V.17\\\"\\n            );\\n            EpochInfo storage subsequentEpoch = _epochInfo[_id][\\n                strategy.lastProcessedEpoch\\n            ];\\n            require(\\n                block.timestamp >=\\n                    subsequentEpoch.epochStartTime + subsequentEpoch.duration,\\n                \\\"ERR_V.18\\\"\\n            );\\n            _newVPS = calculateFees(_id, _newVPS);\\n            subsequentEpoch.VPS = _newVPS;\\n        }\\n\\n        processFund(_id, _newVPS);\\n\\n        emit UpdateVPS(_id, strategy.lastProcessedEpoch, _newVPS);\\n    }\\n\\n    ////////////////// MAIN //////////////////\\n\\n    /// @notice Claim withdrawed token epochs\\n    /// @param _id Strategy _id\\n    function claimGuaranteeToken(\\n        uint _id\\n    )\\n        external\\n        nonReentrant\\n        checkStrategyExistence(_id)\\n        checkEpochExistence(_id)\\n    {\\n        StrategyInfo memory strategy = _strategyInfo[_id];\\n        UserInfo storage user = _userInfo[_id][_msgSender()];\\n\\n        uint endIndex = user.numberOfLocks;\\n        uint startingIndexFinal = user.startingIndexGuarantee;\\n        uint actualGuarantee;\\n        for (uint i = user.startingIndexGuarantee; i < endIndex; i++) {\\n            if (\\n                block.timestamp <\\n                _userGuaranteeLock[_id][_msgSender()][i].lockStartTime +\\n                    strategy.lockPeriod\\n            ) {\\n                break;\\n            }\\n            actualGuarantee += _userGuaranteeLock[_id][_msgSender()][i]\\n                .lockAmount;\\n            startingIndexFinal = i + 1;\\n        }\\n        require(actualGuarantee > 0, \\\"ERR_V.19\\\");\\n        user.startingIndexGuarantee = startingIndexFinal;\\n        strategy.guaranteeToken.safeTransfer(_msgSender(), actualGuarantee);\\n        emit ClaimGuarantee(_id, _msgSender(), actualGuarantee);\\n    }\\n\\n    /// @notice Users Deposit tokens to our vault\\n    /**\\n     * @dev Anyone can call this function if strategy is not paused.\\n     *      Users must approve deposit token before calling this function\\n     *      We mint represent token to users so that we can calculate each users deposit amount outside\\n     */\\n    /// @param _id Strategy _id\\n    /// @param _amount Token Amount to deposit\\n    function deposit(\\n        uint _id,\\n        uint _amount\\n    ) external nonReentrant checkStrategyExistence(_id) {\\n        require(_strategyInfo[_id].paused == false, \\\"ERR_V.2\\\");\\n        StrategyInfo storage strategy = _strategyInfo[_id];\\n        require(_amount > strategy.minDeposit, \\\"ERR_V.20\\\");\\n        require(\\n            strategy.assetToken.balanceOf(_msgSender()) >= _amount,\\n            \\\"ERR_V.21\\\"\\n        );\\n        uint curEpoch = updateEpoch(_id);\\n        UserInfoEpoch storage userEpoch = _userInfoEpoch[_id][_msgSender()][\\n            curEpoch\\n        ];\\n        EpochInfo storage epoch = _epochInfo[_id][curEpoch];\\n        UserInfo storage user = _userInfo[_id][_msgSender()];\\n\\n        require(\\n            epoch.totDepositedAssets + _amount <= strategy.maxDeposit,\\n            \\\"ERR_V.23\\\"\\n        );\\n\\n        // Transfer guarantee token to the vault.\\n        vaultGetter.updateAll(_id);\\n        uint guaranteeAmount = (vaultGetter.getPrice(_id, _amount) *\\n            strategy.guaranteeFee) / feeBase;\\n        strategy.guaranteeToken.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            guaranteeAmount\\n        );\\n\\n        GuaranteeInfo storage guaranteeInfo = _userGuaranteeLock[_id][\\n            _msgSender()\\n        ][user.numberOfLocks];\\n        if (userEpoch.epochGuaranteeIndex == 0)\\n            userEpoch.epochGuaranteeIndex = user.numberOfLocks;\\n        user.numberOfLocks++;\\n        guaranteeInfo.lockStartTime = block.timestamp;\\n        guaranteeInfo.lockAmount = guaranteeAmount;\\n\\n        if (!userEpoch.hasDeposited) {\\n            require(epoch.totDepositors + 1 <= strategy.maxUsers, \\\"ERR_V.22\\\");\\n            _depositors[_id][curEpoch][epoch.totDepositors] = _msgSender();\\n            userEpoch.depositIndex = epoch.totDepositors;\\n            epoch.totDepositors++;\\n            userEpoch.hasDeposited = true;\\n        }\\n\\n        epoch.totDepositedAssets += _amount;\\n        strategy.assetToken.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            _amount\\n        );\\n        userEpoch.depositInfo += _amount;\\n        emit Deposit(_msgSender(), address(this), _id, _amount);\\n    }\\n\\n    /// @notice Immediately withdraw current pending deposit amount\\n    /// @param _id Strategy _id\\n    function cancelDeposit(\\n        uint _id\\n    )\\n        external\\n        nonReentrant\\n        checkStrategyExistence(_id)\\n        checkEpochExistence(_id)\\n    {\\n        StrategyInfo storage strategy = _strategyInfo[_id];\\n        uint curEpoch = getCurrentEpoch(_id);\\n        EpochInfo storage epoch = _epochInfo[_id][curEpoch];\\n        require(\\n            block.timestamp < epoch.epochStartTime + epoch.duration,\\n            \\\"ERR_V.24\\\"\\n        );\\n        UserInfoEpoch storage userEpoch = _userInfoEpoch[_id][_msgSender()][\\n            curEpoch\\n        ];\\n        uint amount = userEpoch.depositInfo;\\n        require(amount > 0, \\\"ERR_V.20\\\");\\n        userEpoch.depositInfo = 0;\\n        epoch.totDepositedAssets -= amount;\\n        strategy.assetToken.safeTransfer(_msgSender(), amount);\\n\\n        UserInfo storage user = _userInfo[_id][_msgSender()];\\n        // Guarantee refund logic start //\\n\\n        uint actualGuarantee;\\n        uint iterations;\\n        for (\\n            uint i = userEpoch.epochGuaranteeIndex;\\n            i < user.numberOfLocks;\\n            i++\\n        ) {\\n            actualGuarantee += _userGuaranteeLock[_id][_msgSender()][i]\\n                .lockAmount;\\n            iterations++;\\n        }\\n        user.numberOfLocks -= iterations;\\n        strategy.guaranteeToken.safeTransfer(_msgSender(), actualGuarantee);\\n        // Guarantee refund logic end //\\n        if (_depositors[_id][curEpoch][epoch.totDepositors] == _depositors[_id][curEpoch][userEpoch.depositIndex]) {\\n            _depositors[_id][curEpoch][epoch.totDepositors] = address(0);\\n        } else {\\n            address replaceAddress = _depositors[_id][curEpoch][epoch.totDepositors];\\n            _depositors[_id][curEpoch][epoch.totDepositors] = address(0);\\n            _depositors[_id][curEpoch][userEpoch.depositIndex] = replaceAddress;\\n            _userInfoEpoch[_id][replaceAddress][curEpoch].depositIndex = userEpoch\\n            .depositIndex;\\n        }\\n        userEpoch.depositIndex = 0;\\n        epoch.totDepositors--;\\n        userEpoch.hasDeposited = false;\\n\\n        emit CancelDeposit(_msgSender(), _id, amount);\\n    }\\n\\n    /// @notice Sends Withdraw Request to vault\\n    /**\\n     * @dev Withdraw amount user shares from vault\\n     */\\n    /// @param _id Strategy _id\\n    function withdraw(\\n        uint _id,\\n        uint _amount\\n    )\\n        external\\n        nonReentrant\\n        checkStrategyExistence(_id)\\n        checkEpochExistence(_id)\\n    {\\n        uint sharesBalance = _strategyInfo[_id].fundRepresentToken.balanceOf(\\n            _msgSender()\\n        );\\n        require(sharesBalance >= _amount, \\\"ERR_V.25\\\");\\n        uint curEpoch = updateEpoch(_id);\\n        UserInfoEpoch storage userEpoch = _userInfoEpoch[_id][_msgSender()][\\n            curEpoch\\n        ];\\n        UserInfo storage user = _userInfo[_id][_msgSender()];\\n        if (user.lastEpoch > 0 && userEpoch.withdrawInfo == 0)\\n            _claimWithdrawedTokens(_id, user.lastEpoch, _msgSender());\\n\\n        _epochInfo[_id][curEpoch].totWithdrawnShares += _amount;\\n        userEpoch.withdrawInfo += _amount;\\n        if (user.lastEpoch != curEpoch) user.lastEpoch = curEpoch;\\n        _strategyInfo[_id].fundRepresentToken.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            _amount\\n        );\\n        emit Withdraw(_msgSender(), _id, _amount);\\n    }\\n\\n    /// @notice Immediately withdraw current pending shares amount\\n    /// @param _id Strategy _id\\n    function cancelWithdraw(\\n        uint _id\\n    )\\n        external\\n        nonReentrant\\n        checkStrategyExistence(_id)\\n        checkEpochExistence(_id)\\n    {\\n        StrategyInfo storage strategy = _strategyInfo[_id];\\n        uint curEpoch = getCurrentEpoch(_id);\\n        EpochInfo storage epoch = _epochInfo[_id][curEpoch];\\n        require(\\n            block.timestamp < epoch.epochStartTime + epoch.duration,\\n            \\\"ERR_V.24\\\"\\n        );\\n        UserInfoEpoch storage userEpoch = _userInfoEpoch[_id][_msgSender()][\\n            curEpoch\\n        ];\\n        UserInfo storage user = _userInfo[_id][_msgSender()];\\n        uint amount = userEpoch.withdrawInfo;\\n        require(amount > 0, \\\"ERR_V.20\\\");\\n        userEpoch.withdrawInfo = 0;\\n        user.lastEpoch = 0;\\n        require(epoch.totWithdrawnShares >= amount, \\\"ERR_V.26\\\");\\n        epoch.totWithdrawnShares -= amount;\\n        strategy.fundRepresentToken.safeTransfer(_msgSender(), amount);\\n\\n        emit CancelWithdraw(_msgSender(), _id, amount);\\n    }\\n\\n    /// @notice Internal get withdraw tokens from vault for user\\n    /**\\n     * @dev Withdraw user funds from vault\\n     */\\n    /// @param _id Strategy _id\\n    /// @param _user Strategy _id\\n    function _claimWithdrawedTokens(\\n        uint _id,\\n        uint _lastEpoch,\\n        address _user\\n    ) internal {\\n        EpochInfo storage epoch = _epochInfo[_id][_lastEpoch];\\n\\n        uint withdrawInfo = _userInfoEpoch[_id][_user][_lastEpoch].withdrawInfo;\\n        uint availableToClaim;\\n        if (withdrawInfo > 0) {\\n            uint dueWithdraw = (withdrawInfo * epoch.currentWithdrawAssets) /\\n                epoch.totWithdrawnShares;\\n\\n            availableToClaim += dueWithdraw;\\n            emit ClaimWithdrawedToken(_id, _user, _lastEpoch, dueWithdraw);\\n        }\\n        if (availableToClaim > 0)\\n            _strategyInfo[_id].assetToken.safeTransfer(_user, availableToClaim);\\n        emit WithdrawedToken(_id, _user, availableToClaim);\\n    }\\n\\n    /// @notice Get withdraw tokens from vault\\n    /**\\n     * @dev Withdraw my fund from vault\\n     */\\n    /// @param _id Strategy _id\\n    function claimWithdrawedTokens(\\n        uint _id\\n    ) external nonReentrant checkStrategyExistence(_id) {\\n        UserInfo storage user = _userInfo[_id][_msgSender()];\\n        uint lastEpoch = user.lastEpoch;\\n        require(lastEpoch > 0, \\\"ERR_V.36\\\");\\n        _claimWithdrawedTokens(_id, lastEpoch, _msgSender());\\n        user.lastEpoch = 0;\\n    }\\n\\n    /// @notice Distribute shares to the epoch depositors\\n    /**\\n     * @dev Only Owner can call this function if deposit duration is passed.\\n     *      Owner must setPaused(false)\\n     */\\n    /// @param _id Strategy _id\\n    function processDeposits(\\n        uint _id\\n    ) external nonReentrant onlyOwner checkStrategyExistence(_id) {\\n        StrategyInfo memory strategy = _strategyInfo[_id];\\n        EpochInfo memory epoch = _epochInfo[_id][strategy.lastProcessedEpoch];\\n        require(epoch.VPS > 0, \\\"ERR_V.27\\\");\\n        require(epoch.lastDepositorProcessed == 0, \\\"ERR_V.28\\\");\\n        if (epoch.totDepositedAssets == 0) {\\n            return;\\n        }\\n\\n        distributeShares(_id);\\n    }\\n\\n    /**\\n     * @dev Continues the process of distributing shares for a specific strategy, if possible.\\n     * This function is only callable by the contract owner.\\n     * @param _id The _id of the strategy for which to continue distributing shares.\\n     */\\n    function continueDistributingShares(\\n        uint _id\\n    ) external nonReentrant onlyOwner checkStrategyExistence(_id) {\\n        // Check if there's anything to distribute\\n        EpochInfo memory epoch = _epochInfo[_id][\\n            _strategyInfo[_id].lastProcessedEpoch\\n        ];\\n        require(epoch.VPS > 0, \\\"ERR_V.27\\\");\\n        require(epoch.lastDepositorProcessed != 0, \\\"ERR_V.29\\\");\\n        require(epoch.lastDepositorProcessed < epoch.totDepositors, \\\"ERR_V.30\\\");\\n        distributeShares(_id);\\n    }\\n\\n    /**\\n     * @dev Distributes the newly minted shares among the depositors of a specific strategy.\\n     * The function processes depositors until it runs out of gas.\\n     * @param _id The _id of the strategy for which to distribute shares.\\n     */\\n    function distributeShares(uint _id) internal {\\n        EpochInfo storage epoch = _epochInfo[_id][\\n            _strategyInfo[_id].lastProcessedEpoch\\n        ];\\n        uint i = epoch.lastDepositorProcessed;\\n        uint sharesToDistribute = epoch.newShares;\\n\\n        while (i < epoch.totDepositors && gasleft() > gasBuffer) {\\n            address investor = _depositors[_id][_strategyInfo[_id].lastProcessedEpoch][i];\\n            uint depositInfo = _userInfoEpoch[_id][investor][\\n                _strategyInfo[_id].lastProcessedEpoch\\n            ].depositInfo;\\n            uint dueShares = (sharesToDistribute * depositInfo) /\\n                epoch.totDepositedAssets;\\n\\n            if (dueShares > 0) {\\n                // Transfer the shares\\n                _strategyInfo[_id].fundRepresentToken.safeTransfer(\\n                    investor,\\n                    dueShares\\n                );\\n            }\\n\\n            i++;\\n        }\\n\\n        epoch.lastDepositorProcessed = i;\\n    }\\n\\n    /**\\n     * @notice Distribute pending fees to the treasury addresses\\n     * @dev Internal function\\n     */\\n    /// @param _id Strategy _id\\n    function sendPendingFees(\\n        uint _id\\n    ) external nonReentrant onlyOwner checkStrategyExistence(_id) {\\n        StrategyInfo storage strategy = _strategyInfo[_id];\\n\\n        require(\\n            block.timestamp >=\\n                strategy.lastFeeDistribution + strategy.feeDuration,\\n            \\\"ERR_V.31\\\"\\n        );\\n\\n        uint pendingFees = strategy.pendingFees;\\n        require(pendingFees > 0, \\\"ERR_V.35\\\");\\n        require(\\n            strategy.assetToken.balanceOf(address(this)) >= pendingFees,\\n            \\\"ERR_V.32\\\"\\n        );\\n        strategy.pendingFees = 0;\\n\\n        address addr0 = strategy.withdrawAddress[0];\\n        address addr1 = strategy.withdrawAddress[1];\\n        emit SendFeeWithOwner(_id, addr0, pendingFees / 2);\\n        emit SendFeeWithOwner(_id, addr1, pendingFees / 2);\\n        strategy.assetToken.safeTransfer(addr0, pendingFees / 2);\\n        strategy.assetToken.safeTransfer(addr1, pendingFees / 2);\\n    }\\n\\n    /// @notice Withdraw ERC-20 Token to the owner\\n    /**\\n     * @dev Only Owner can call this function\\n     */\\n    /// @param _tokenContract ERC-20 Token address\\n    function withdrawERC20(IERC20 _tokenContract) external onlyOwner {\\n        for (uint i = 0; i < strategiesCounter; i++) {\\n            require(\\n                _strategyInfo[i].guaranteeToken != _tokenContract,\\n                \\\"ERR_V.34\\\"\\n            );\\n            require(_strategyInfo[i].assetToken != _tokenContract, \\\"ERR_V.34\\\");\\n        }\\n        _tokenContract.safeTransfer(\\n            _msgSender(),\\n            _tokenContract.balanceOf(address(this))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CIV-VaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @custom:security-contact info@civfund.org\\ncontract CIVFundShare is ERC20, Ownable {\\n    constructor(address _owner) ERC20(\\\"CIVFundShare\\\", \\\"XCIV\\\") {\\n        _transferOwnership(_owner);\\n    }\\n\\n    function mint(uint _amount) public onlyOwner returns (bool) {\\n        _mint(_msgSender(), _amount);\\n        return true;\\n    }\\n\\n    function burn(uint _amount) public returns (bool) {\\n        _burn(_msgSender(), _amount);\\n        return true;\\n    }\\n}\\n\\ncontract CIVFundShareFactory {\\n    function createCIVFundShare() public returns (CIVFundShare) {\\n        CIVFundShare fundRepresentToken = new CIVFundShare(msg.sender);\\n        return fundRepresentToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CIV-VaultGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./dependencies/FixedPoint.sol\\\";\\nimport \\\"./interfaces/ICivFund.sol\\\";\\nimport \\\"./dependencies/UniswapV2OracleLibrary.sol\\\";\\nimport \\\"./CIV-TimeOracle.sol\\\";\\n\\n////////////////// ERROR CODES //////////////////\\n/*\\n    ERR_VG.1 = \\\"Msg.sender is not the Vault\\\";\\n    ERR_VG.2 = \\\"Can't get first pair\\\";\\n    ERR_VG.3 = \\\"Can't get second pair\\\";\\n    ERR_VG.4 = \\\"Epoch not yet expired\\\";\\n    ERR_VG.5 = \\\"Nothing to withdraw\\\";\\n    ERR_VG.6 = \\\"Wait for the previos epoch to settle before requesting withdraw\\\";\\n*/\\n\\ncontract CivVaultGetter is ReentrancyGuard {\\n    using SafeMath for uint;\\n    using FixedPoint for *;\\n\\n    ICivVault public civVault;\\n    /// @notice Uniswap Factory address\\n    address public constant UNISWAP_FACTORY =\\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // to be adjusted for mainnet\\n    /// @notice Wrapped ETH Address\\n    address public constant WETH_ADDRESS =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // to be adjusted for mainnet\\n    /// @notice Dead Address\\n    address public constant NULL_ADDRESS =\\n        0x0000000000000000000000000000000000000000;\\n    /// @notice Uniswap TWAP Period\\n    uint public constant PERIOD = 24 hours;\\n\\n    /// @notice Each Strategy Uniswap Pair Info List\\n    mapping(uint => PairInfo[]) public pairInfo;\\n\\n    /// @notice Each Strategy time Oracle\\n    mapping(uint => TimeOracle) public timeOracle;\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(civVault), \\\"ERR_VG.1\\\");\\n        _;\\n    }\\n\\n    constructor(address _civVaultAddress) {\\n        civVault = ICivVault(_civVaultAddress);\\n    }\\n\\n    /// @notice Add new uniswap pair info to pairInfo list\\n    /// @dev Interal function\\n    /// @param _id Strategy Id\\n    /// @param _pair Uniswap Pair Interface\\n    function addPair(uint _id, IUniswapV2Pair _pair) internal {\\n        (, , uint32 blockTimestampLast) = _pair.getReserves();\\n        (\\n            uint price0Cumulative,\\n            uint price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(_pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        FixedPoint.uq112x112 memory price0Average = FixedPoint.uq112x112(\\n            uint224(\\n                (price0Cumulative - _pair.price0CumulativeLast()) / timeElapsed\\n            )\\n        );\\n        FixedPoint.uq112x112 memory price1Average = FixedPoint.uq112x112(\\n            uint224(\\n                (price1Cumulative - _pair.price1CumulativeLast()) / timeElapsed\\n            )\\n        );\\n        pairInfo[_id].push(\\n            PairInfo({\\n                pair: _pair,\\n                price0CumulativeLast: price0Cumulative,\\n                price1CumulativeLast: price1Cumulative,\\n                token0: _pair.token0(),\\n                token1: _pair.token1(),\\n                price0Average: price0Average,\\n                price1Average: price1Average,\\n                blockTimestampLast: blockTimestamp\\n            })\\n        );\\n    }\\n\\n    /// @notice Deploy new Time Oracle for the strategy\\n    /// @param _id Strategy Id\\n    /// @param _epochDuration Epoch Duration\\n    function addTimeOracle(uint _id, uint _epochDuration) external onlyVault {\\n        timeOracle[_id] = new TimeOracle(_epochDuration);\\n    }\\n\\n    /// @notice Add new uniswap pair info to pairInfo list from token pair address\\n    /// @param _id Strategy Id\\n    /// @param _token0 Token0 Address\\n    /// @param _token1 Token1 Address\\n    function addUniPair(\\n        uint _id,\\n        address _token0,\\n        address _token1\\n    ) external nonReentrant onlyVault {\\n        IUniswapV2Factory factory = IUniswapV2Factory(UNISWAP_FACTORY);\\n        address pairAddress = factory.getPair(_token1, _token0);\\n\\n        if (pairAddress == NULL_ADDRESS) {\\n            pairAddress = factory.getPair(_token1, WETH_ADDRESS);\\n            require(pairAddress != NULL_ADDRESS, \\\"ERR_VG.2\\\");\\n            IUniswapV2Pair _pairA = IUniswapV2Pair(pairAddress);\\n            addPair(_id, _pairA);\\n            pairAddress = factory.getPair(_token0, WETH_ADDRESS);\\n            require(pairAddress != NULL_ADDRESS, \\\"ERR_VG.3\\\");\\n            IUniswapV2Pair _pairB = IUniswapV2Pair(pairAddress);\\n            addPair(_id, _pairB);\\n        } else {\\n            IUniswapV2Pair _pair = IUniswapV2Pair(pairAddress);\\n            addPair(_id, _pair);\\n        }\\n    }\\n\\n    /// @notice Update Uniswap LP token price\\n    /// @dev Anyone can call this function but we update price after PERIOD of time\\n    /// @param _id Strategy Id\\n    /**\\n     * @param _index PairInfo index\\n     *              We can have 1 or 2 index\\n     *              If Deposit/Guarantee Token Pair exists on uniswap there's only 1 pairInfo\\n     *              If Deposit/Guarantee Token Pair does not exist on uniswap, we have 2 pairInfo\\n     *              Deposit/WETH Pair and Guarantee/WETH token pair to get price\\n     */\\n    function update(uint _id, uint _index) public {\\n        PairInfo storage info = pairInfo[_id][_index];\\n        (\\n            uint price0Cumulative,\\n            uint price1Cumulative,\\n            uint32 blockTimestamp\\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(info.pair));\\n        uint32 timeElapsed = blockTimestamp - info.blockTimestampLast; // overflow is desired\\n\\n        // ensure that at least one full period has passed since the last update\\n        if (timeElapsed < PERIOD) return;\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        info.price0Average = FixedPoint.uq112x112(\\n            uint224(\\n                (price0Cumulative - info.price0CumulativeLast) / timeElapsed\\n            )\\n        );\\n        info.price0CumulativeLast = price0Cumulative;\\n        info.price1Average = FixedPoint.uq112x112(\\n            uint224(\\n                (price1Cumulative - info.price1CumulativeLast) / timeElapsed\\n            )\\n        );\\n        info.price1CumulativeLast = price1Cumulative;\\n        info.blockTimestampLast = blockTimestamp;\\n    }\\n\\n    /// @notice Update Uniswap LP token price for all pairs\\n    /// @dev Anyone can call this function but we update price after PERIOD of time\\n    /// @param _id Strategy Id\\n    function updateAll(uint _id) public {\\n        for (uint i = 0; i < pairInfo[_id].length; i++) update(_id, i);\\n    }\\n\\n    /// @notice Set new epochDuration for Strategy\\n    /// @dev Only the Getter can call this function from timeOracle\\n    /// @param _id Strategy Id\\n    /// @param _newEpochDuration new epochDuration\\n    function setEpochDuration(uint _id, uint _newEpochDuration) public {\\n        timeOracle[_id].setEpochDuration(_newEpochDuration);\\n    }\\n\\n    /**\\n     * @dev Get the current period for a Strategy\\n     * @param _id The ID of the Strategy\\n     * @return currentPeriodStartTime The end time for the current period\\n     */\\n    function getCurrentPeriod(\\n        uint _id\\n    ) external view returns (uint currentPeriodStartTime) {\\n        return timeOracle[_id].getCurrentPeriod();\\n    }\\n\\n    /// @dev Get Guarantee amount for deposit to the vault\\n    /// @param _id Strategy Id\\n    /// @param _amount Amount to deposit in the vault\\n    /// @return amount Guarantee Token Amount needs for deposit in a given strategy\\n    function getDepositGuarantee(\\n        uint _id,\\n        uint _amount\\n    ) external view returns (uint) {\\n        return\\n            (getPrice(_id, _amount) *\\n                civVault.getStrategyInfo(_id).guaranteeFee) /\\n            civVault.feeBase();\\n    }\\n\\n    /// @dev Get available deposit amount based of user's guarantee amount\\n    /// @param _id Strategy Id\\n    /// @param _user User address\\n    /// @return amount Current Available Deposit amount regarding users's current guarantee token balance in a given strategy\\n    function getAllowedDeposit(\\n        uint _id,\\n        address _user\\n    ) external view returns (uint) {\\n        IERC20Extended guarantee = IERC20Extended(\\n            address(civVault.getStrategyInfo(_id).guaranteeToken)\\n        );\\n        return\\n            (getReversePrice(_id, guarantee.balanceOf(_user)) *\\n                civVault.feeBase()) /\\n            civVault.getStrategyInfo(_id).guaranteeFee;\\n    }\\n\\n    /// @dev Get Guarantee Token symbol and decimal\\n    /// @param _id Strategy Id\\n    /// @return symbol Guarantee Token Symbol in a given strategy\\n    /// @return decimals Guarantee Token Decimal in a given strategy\\n    function getGuaranteeTokenInfo(\\n        uint _id\\n    ) external view returns (string memory symbol, uint decimals) {\\n        IERC20Extended guarantee = IERC20Extended(\\n            address(civVault.getStrategyInfo(_id).guaranteeToken)\\n        );\\n        symbol = guarantee.symbol();\\n        decimals = guarantee.decimals();\\n    }\\n\\n    /// @dev Get claimable guarantee token amount\\n    /// @param _id Strategy Id\\n    /// @param _user userAddress\\n    /// @return amount Current claimable guarantee token amount\\n    function getClaimableGuaranteeToken(\\n        uint _id,\\n        address _user\\n    ) external view returns (uint) {\\n        StrategyInfo memory strategy = civVault.getStrategyInfo(_id);\\n        UserInfo memory user = civVault.getUserInfo(_id, _user);\\n        uint endIndex = user.numberOfLocks;\\n        uint unLocked;\\n        for (uint i = user.startingIndexGuarantee; i < endIndex; i++) {\\n            if (\\n                block.timestamp <\\n                civVault.getGuaranteeInfo(_id, _user, i).lockStartTime +\\n                    strategy.lockPeriod\\n            ) {\\n                break;\\n            }\\n            unLocked += civVault.getGuaranteeInfo(_id, _user, i).lockAmount;\\n        }\\n\\n        return unLocked;\\n    }\\n\\n    /**\\n     * @dev Retrieves the current balance of the user's guarantee token, fund representative token, and liquidity strategy token in a specific strategy.\\n     * @param _id The ID of the strategy from which to retrieve user balance information.\\n     * @param _user The user EOA\\n     * @return guaranteeBalance The balance of the user's guarantee token in the given strategy.\\n     * @return representTokenBalance The balance of the user's fund representative token in the given strategy.\\n     * @return assetTokenBalance The balance of the user's liquidity strategy token in the given strategy.\\n     * @return guaranteeAddress The contract address of the guarantee token in the given strategy.\\n     * @return representTokenAddress The contract address of the fund representative token in the given strategy.\\n     * @return assetTokenAddress The contract address of the liquidity strategy token in the given strategy.\\n     */\\n    function getUserBalances(\\n        uint _id,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint guaranteeBalance,\\n            uint representTokenBalance,\\n            uint assetTokenBalance,\\n            address guaranteeAddress,\\n            address representTokenAddress,\\n            address assetTokenAddress\\n        )\\n    {\\n        guaranteeAddress = address(\\n            civVault.getStrategyInfo(_id).guaranteeToken\\n        );\\n        IERC20 guarantee = IERC20(guaranteeAddress);\\n        guaranteeBalance = guarantee.balanceOf(_user);\\n\\n        representTokenAddress = address(\\n            civVault.getStrategyInfo(_id).fundRepresentToken\\n        );\\n        IERC20 representToken = IERC20(representTokenAddress);\\n        representTokenBalance = representToken.balanceOf(_user);\\n\\n        assetTokenAddress = address(civVault.getStrategyInfo(_id).assetToken);\\n        IERC20 assetToken = IERC20(assetTokenAddress);\\n        assetTokenBalance = assetToken.balanceOf(_user);\\n\\n        return (\\n            guaranteeBalance,\\n            representTokenBalance,\\n            assetTokenBalance,\\n            guaranteeAddress,\\n            representTokenAddress,\\n            assetTokenAddress\\n        );\\n    }\\n\\n    /// @notice get net values for new VPS for a certain epoch\\n    /// @param _id Strategy Id\\n    /// @param _newVPS New Value Per Share\\n    /// @param _epochId Epoch Id\\n    /// @return _epochs array of unclaimed epochs\\n    function getNetValues(\\n        uint _id,\\n        uint _newVPS,\\n        uint _epochId\\n    ) public view returns (uint, uint) {\\n        EpochInfo memory epoch = civVault.getEpochInfo(_id, _epochId);\\n        StrategyInfo memory strategy = civVault.getStrategyInfo(_id);\\n        require(\\n            block.timestamp >=\\n                epoch.epochStartTime +\\n                    epoch.duration,\\n            \\\"ERR_VG.4\\\"\\n        );\\n        uint currentWithdrawAssets = _newVPS * epoch.totWithdrawnShares;\\n        uint decimals = uint(strategy.fundRepresentToken.decimals());\\n        uint multiplier = 10 ** decimals;\\n        uint newShares = (epoch.totDepositedAssets * multiplier) / _newVPS;\\n\\n        return (currentWithdrawAssets, newShares);\\n    }\\n\\n    /// @notice get unclaimed withdrawed token epochs\\n    /// @param _id Strategy Id\\n    /// @return _epochs array of unclaimed epochs\\n    function getUnclaimedTokens(\\n        uint _id,\\n        address _user\\n    ) public view returns (uint) {\\n        uint lastEpoch = civVault.getUserInfo(_id, _user).lastEpoch;\\n        require(lastEpoch > 0, \\\"ERR_VG.5\\\");\\n        EpochInfo memory epoch = civVault.getEpochInfo(_id, lastEpoch);\\n        require(epoch.VPS > 0, \\\"ERR_VG.6\\\");\\n        uint withdrawInfo = civVault\\n            .getUserInfoEpoch(_id, _user, lastEpoch)\\n            .withdrawInfo;\\n\\n        return\\n            (withdrawInfo * epoch.currentWithdrawAssets) /\\n            epoch.totWithdrawnShares;\\n    }\\n\\n    /// @notice Get Price of the each strategy's guarantee token amount based on deposit token amount\\n    /// @dev Public Function\\n    /// @param _id Strategy Id\\n    /// @param _amountIn deposit token amount\\n    /// @return amountOut Price of the token1 in a given strategy\\n    function getPrice(\\n        uint _id,\\n        uint _amountIn\\n    ) public view virtual returns (uint amountOut) {\\n        StrategyInfo memory strategyInfo = civVault.getStrategyInfo(_id);\\n        PairInfo[] memory curPairInfo = pairInfo[_id];\\n        if (curPairInfo.length == 1) {\\n            if (address(strategyInfo.assetToken) == curPairInfo[0].token0)\\n                amountOut = curPairInfo[0]\\n                    .price0Average\\n                    .mul(_amountIn)\\n                    .decode144();\\n            else\\n                amountOut = curPairInfo[0]\\n                    .price1Average\\n                    .mul(_amountIn)\\n                    .decode144();\\n        } else {\\n            FixedPoint.uq112x112 memory value;\\n            if (address(strategyInfo.guaranteeToken) == curPairInfo[0].token0) {\\n                value = curPairInfo[0].price1Average;\\n            } else {\\n                value = curPairInfo[0].price0Average;\\n            }\\n            if (address(strategyInfo.assetToken) == curPairInfo[1].token0) {\\n                value = value.muluq(curPairInfo[1].price1Average.reciprocal());\\n            } else {\\n                value = value.muluq(curPairInfo[1].price0Average.reciprocal());\\n            }\\n            amountOut = value.mul(_amountIn).decode144();\\n        }\\n    }\\n\\n    /// @notice Get Price of the each strategy's deposit token amount based on guarantee token amount\\n    /// @dev Public Function\\n    /// @param _id Strategy Id\\n    /// @param _amountIn guarantee token amount\\n    /// @return amountOut Price of the token0 in a given strategy\\n    function getReversePrice(\\n        uint _id,\\n        uint _amountIn\\n    ) public view virtual returns (uint amountOut) {\\n        StrategyInfo memory strategyInfo = civVault.getStrategyInfo(_id);\\n        PairInfo[] memory curPairInfo = pairInfo[_id];\\n        if (curPairInfo.length == 1) {\\n            if (address(strategyInfo.guaranteeToken) == curPairInfo[0].token0)\\n                amountOut = curPairInfo[0]\\n                    .price0Average\\n                    .mul(_amountIn)\\n                    .decode144();\\n            else\\n                amountOut = curPairInfo[0]\\n                    .price1Average\\n                    .mul(_amountIn)\\n                    .decode144();\\n        } else {\\n            FixedPoint.uq112x112 memory value;\\n            if (address(strategyInfo.assetToken) == curPairInfo[0].token0) {\\n                value = curPairInfo[0].price1Average;\\n            } else {\\n                value = curPairInfo[0].price0Average;\\n            }\\n            if (address(strategyInfo.guaranteeToken) == curPairInfo[1].token0) {\\n                value = value.muluq(curPairInfo[1].price1Average.reciprocal());\\n            } else {\\n                value = value.muluq(curPairInfo[1].price0Average.reciprocal());\\n            }\\n            amountOut = value.mul(_amountIn).decode144();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0;\\n\\nimport \\\"./FullMath.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, 'FixedPoint::muli: overflow');\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= type(uint112).max, 'FixedPoint::muluq: upper overflow');\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, 'FixedPoint::muluq: sum overflow');\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, 'FixedPoint::fraction: overflow');\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        //uint256 twos = -denominator & denominator;\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/UniswapV2OracleLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICivFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../dependencies/FixedPoint.sol\\\";\\n\\nstruct StrategyInfo {\\n    // Info on each strategy\\n    IERC20 assetToken; // Address of asset token e.g. USDT\\n    IERC20 guaranteeToken; // Guarantee Token address e.g. Stone\\n    ICivFundRT fundRepresentToken; // Fund Represent tokens for deposit in the strategy XCIV\\n    uint fee; // Strategy Fee Amount\\n    uint guaranteeFee; // Strategy Guarantee Fee Amount\\n    uint maxDeposit; // Strategy Max Deposit Amount per Epoch\\n    uint maxUsers; // Strategy Max User per Epoch\\n    uint minDeposit; // Strategy Min Deposit Amount\\n    uint epochDuration; // Duration of an Epoch\\n    uint lockPeriod; // Strategy Guarantee Token Lock Period\\n    uint feeDuration; // Fee withdraw period\\n    uint lastFeeDistribution; // Last timestamp of distribution\\n    uint lastProcessedEpoch; // Last Epoch Processed\\n    uint watermark; // Fee watermark\\n    uint pendingFees; // Pending fees that owner can withdraw\\n    address[] withdrawAddress; // Strategy Withdraw Address\\n    address investAddress; // Strategy Invest Address\\n    bool initialized; // Is strategy initialized?\\n    bool paused; // Flag that deposit is paused or not\\n}\\n\\nstruct EpochInfo {\\n    uint totDepositors; // Current depositors of the epoch\\n    uint totDepositedAssets; // Tot deposited asset in current epoch\\n    uint totWithdrawnShares; // Tot withdrawn asset in current epoch\\n    uint VPS; // VPS after rebalancing\\n    uint newShares; // New shares after rebalancing\\n    uint currentWithdrawAssets; // Withdrawn asset after rebalancing\\n    uint epochStartTime; // Epoch start time from time oracle\\n    uint lastDepositorProcessed; // Last depositor that has recived shares\\n    uint duration;\\n}\\n\\nstruct UserInfo {\\n    uint lastEpoch; // Last withdraw epoch\\n    uint startingIndexGuarantee; // Starting index of guarantee lock\\n    uint numberOfLocks; // Number of guarantee locks the user has\\n}\\n\\nstruct GuaranteeInfo {\\n    uint lockStartTime; // startTime of the guarantee lock\\n    uint lockAmount; // Amount of guarantee locked\\n}\\n\\nstruct UserInfoEpoch {\\n    uint depositInfo;\\n    uint withdrawInfo;\\n    uint depositIndex;\\n    uint epochGuaranteeIndex;\\n    bool hasDeposited;\\n}\\n\\nstruct AddStrategyParam {\\n    IERC20 _assetToken;\\n    IERC20 _guaranteeToken;\\n    uint _maxDeposit;\\n    uint _maxUsers;\\n    uint _minAmount;\\n    uint _fee;\\n    uint _guaranteeFee;\\n    uint _epochDuration;\\n    uint _lockPeriod;\\n    uint _feeDuration;\\n    address _investAddress;\\n    address[] _withdrawAddresses;\\n    bool _paused;\\n}\\n\\nstruct PairInfo {\\n    IUniswapV2Pair pair; //Uniswap Pair Address\\n    uint price0CumulativeLast;\\n    uint price1CumulativeLast;\\n    FixedPoint.uq112x112 price0Average; // First token average price\\n    FixedPoint.uq112x112 price1Average; // Second token average price\\n    uint32 blockTimestampLast; //Last time we calculate price\\n    address token0; // First token address\\n    address token1; // Second token address\\n}\\n\\ninterface ICivVault {\\n    function guaranteeFee() external view returns (uint);\\n\\n    function feeBase() external view returns (uint);\\n\\n    function getStrategyInfo(\\n        uint _id\\n    ) external view returns (StrategyInfo memory);\\n\\n    function getEpochInfo(\\n        uint _id,\\n        uint _index\\n    ) external view returns (EpochInfo memory);\\n\\n    function getCurrentEpoch(uint _id) external view returns (uint);\\n\\n    function getUserInfo(\\n        uint _id,\\n        address _user\\n    ) external view returns (UserInfo memory);\\n\\n    function getUserInfoEpoch(\\n        uint _id,\\n        address _user,\\n        uint _index\\n    ) external view returns (UserInfoEpoch memory);\\n\\n    function getGuaranteeInfo(\\n        uint _idid,\\n        address _user,\\n        uint _index\\n    ) external view returns (GuaranteeInfo memory);\\n}\\n\\ninterface ICivFundRT is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function mint(uint _amount) external returns (bool);\\n\\n    function burn(uint _amount) external returns (bool);\\n}\\n\\ninterface ICivVaultGetter {\\n    function addUniPair(uint, address, address) external;\\n\\n    function getPrice(uint, uint) external view returns (uint);\\n\\n    function getReversePrice(uint, uint) external view returns (uint);\\n\\n    function getBalanceOfUser(uint, address) external view returns (uint);\\n\\n    function updateAll(uint) external;\\n\\n    function addTimeOracle(uint, uint) external;\\n\\n    function setEpochDuration(uint, uint) external;\\n\\n    function getCurrentPeriod(uint) external view returns (uint);\\n}\\n\\ninterface IERC20Extended is IERC20 {\\n    function decimals() external view returns (uint);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"withdrawAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guaranteeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDuration\",\"type\":\"uint256\"}],\"name\":\"AddStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CancelDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CancelWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guaranteeAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimGuarantee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimWithdrawedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InitializeStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"SendFeeWithOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"SetEpochDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasBuffer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGasBuffer\",\"type\":\"uint256\"}],\"name\":\"SetGasBuffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SetGuaranteeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLocktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockTime\",\"type\":\"uint256\"}],\"name\":\"SetGuaranteeLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetInvestAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxUsers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxUsers\",\"type\":\"uint256\"}],\"name\":\"SetLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oldAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newAddress\",\"type\":\"address[]\"}],\"name\":\"SetWithdrawAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VPS\",\"type\":\"uint256\"}],\"name\":\"UpdateVPS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawedToken\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"_assetToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_guaranteeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guaranteeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_investAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_withdrawAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"internalType\":\"struct AddStrategyParam\",\"name\":\"addStrategyParam\",\"type\":\"tuple\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimGuaranteeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimWithdrawedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"continueDistributingShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundShareFactory\",\"outputs\":[{\"internalType\":\"contract CIVFundShareFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getDepositors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getEpochInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totDepositors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totDepositedAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totWithdrawnShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentWithdrawAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositorProcessed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct EpochInfo\",\"name\":\"epoch\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getGuaranteeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GuaranteeInfo\",\"name\":\"userGuarantee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getStrategyInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"guaranteeToken\",\"type\":\"address\"},{\"internalType\":\"contract ICivFundRT\",\"name\":\"fundRepresentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFeeDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProcessedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"watermark\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingFees\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"withdrawAddress\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"investAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"internalType\":\"struct StrategyInfo\",\"name\":\"strategy\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingIndexGuarantee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfLocks\",\"type\":\"uint256\"}],\"internalType\":\"struct UserInfo\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserInfoEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositInfo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawInfo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochGuaranteeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasDeposited\",\"type\":\"bool\"}],\"internalType\":\"struct UserInfoEpoch\",\"name\":\"userEpochStruct\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"initializeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"processDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newVPS\",\"type\":\"uint256\"}],\"name\":\"rebalancing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"sendPendingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setEpochDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMaxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMaxUsers\",\"type\":\"uint256\"}],\"name\":\"setEpochLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasBuffer\",\"type\":\"uint256\"}],\"name\":\"setGasBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setInvestAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setStrategyGuarantee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_newAddress\",\"type\":\"address[]\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategiesCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultGetter\",\"outputs\":[{\"internalType\":\"contract ICivVaultGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CIVVault", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}