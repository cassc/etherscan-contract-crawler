{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: LVMMarket.sol\r\n\r\n//SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\ncontract LVMMarket is Ownable {\r\n    IUniswapV2Router02 public router;\r\n    bool inSwapAndSend;\r\n    Fees public fees;\r\n    Wallets public wallets;\r\n\r\n    struct Fees {\r\n        uint256 burnFee;\r\n        uint256 marketingWalletShare;\r\n        uint256 devWalletShare;\r\n        uint256 gameWalletShare;\r\n        uint256 totalBackupWalletFees;\r\n    }\r\n\r\n    struct Wallets {\r\n        address deadWallet;\r\n        address marketingWallet;\r\n        address devWallet;\r\n        address gameWallet;\r\n    }\r\n    // Boolean determines if a token is allowed\r\n    mapping(address => bool) public tokenAllowed;\r\n    // determines if token IS a partner token or not\r\n    mapping(address => bool) public isPartnerToken;\r\n    // If its a partner token, what wallet to send them to\r\n    mapping(address => address) public partnerTokenWallet;\r\n\r\n    uint256 priceOfBuy5 = 6 * 10 ** 6;\r\n    uint256 priceOfBuy10 = 11 * 10 ** 6;\r\n    uint256 priceOfBuy25 = 26 * 10 ** 6;\r\n    uint256 priceOfBuy50 = 51 * 10 ** 6;\r\n    uint256 priceOfBuy100 = 101 * 10 ** 6;\r\n    uint256 priceOfBuy250 = 251 * 10 ** 6;\r\n    uint256 priceOfBuy500 = 501 * 10 ** 6;\r\n\r\n    receive() external payable {}\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndSend = true;\r\n        _;\r\n        inSwapAndSend = false;\r\n    }\r\n\r\n    constructor() {\r\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        fees.burnFee = 150;\r\n        fees.marketingWalletShare = 50;\r\n        fees.devWalletShare = 100;\r\n        fees.gameWalletShare = 700;\r\n\r\n        fees.totalBackupWalletFees = fees.devWalletShare + fees.gameWalletShare;\r\n\r\n        wallets.deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n        wallets.marketingWallet = 0x1FC0d68562B36891404F59Bd2734C9f0498ec255;\r\n        wallets.devWallet = 0xE2477Cae1b720b142C3586d99E4C83De5bc71614;\r\n        wallets.gameWallet = 0x360A19f7494c8fe067285C44745eD064517F430A;\r\n    }\r\n\r\n    function Buy50000InGameTokens(address _token) external returns (bool) {\r\n        uint256 price = getPriceIntokens(_token, priceOfBuy5);\r\n        buy(_token, price);\r\n        return true;\r\n    }\r\n\r\n    function Buy100000InGameTokens(address _token) external returns (bool) {\r\n        uint256 price = getPriceIntokens(_token, priceOfBuy10);\r\n        buy(_token, price);\r\n        return true;\r\n    }\r\n\r\n    function Buy250000InGameTokens(address _token) external returns (bool) {\r\n        uint256 price = getPriceIntokens(_token, priceOfBuy25);\r\n        buy(_token, price);\r\n        return true;\r\n    }\r\n\r\n    function Buy500000InGameTokens(address _token) public {\r\n        uint256 price = getPriceIntokens(_token, priceOfBuy50);\r\n        buy(_token, price);\r\n    }\r\n\r\n    function Buy1000000InGameTokens(address _token) external returns (bool) {\r\n        uint256 price = getPriceIntokens(_token, priceOfBuy100);\r\n        buy(_token, price);\r\n        return true;\r\n    }\r\n\r\n    function Buy2500000InGameTokens(address _token) external returns (bool) {\r\n        uint256 price = getPriceIntokens(_token, priceOfBuy250);\r\n        buy(_token, price);\r\n        return true;\r\n    }\r\n\r\n    function Buy5000000InGameTokens(address _token) external returns (bool) {\r\n        uint256 price = getPriceIntokens(_token, priceOfBuy500);\r\n        buy(_token, price);\r\n        return true;\r\n    }\r\n\r\n    function buy(address _token, uint _amount) internal {\r\n        // Make sure the token is a valid and allowed token\r\n        require(tokenAllowed[_token], \"Not a valid token\");\r\n        IERC20 token = IERC20(_token);\r\n        // Calculate the amounts to send\r\n        uint256 amountToBurn = (_amount * fees.burnFee) / 1000;\r\n        uint256 amountToMarketing = (_amount * fees.marketingWalletShare) /\r\n            1000;\r\n        uint256 amountToDevWallet = (_amount * fees.devWalletShare) / 1000;\r\n        uint256 amountToGameWallet = _amount -\r\n            amountToBurn -\r\n            amountToMarketing -\r\n            amountToDevWallet;\r\n\r\n        // If its a partner token, send to their wallet, if its not, burn\r\n        token.transferFrom(\r\n            msg.sender,\r\n            isPartnerToken[_token]\r\n                ? partnerTokenWallet[_token]\r\n                : wallets.deadWallet,\r\n            amountToBurn\r\n        );\r\n        // Marketing wallet amount\r\n        token.transferFrom(\r\n            msg.sender,\r\n            wallets.marketingWallet,\r\n            amountToMarketing\r\n        );\r\n        // Dev wallet amount\r\n        token.transferFrom(msg.sender, wallets.devWallet, amountToDevWallet);\r\n        // Game wallet amount\r\n        token.transferFrom(msg.sender, wallets.gameWallet, amountToGameWallet);\r\n    }\r\n\r\n    function updateAllowedTokens(\r\n        address _token,\r\n        bool _allowed\r\n    ) external onlyOwner {\r\n        tokenAllowed[_token] = _allowed;\r\n    }\r\n\r\n    function updatePartnerTokens(\r\n        address _tokenAddress,\r\n        bool _allowed,\r\n        address _partnerWallet\r\n    ) external onlyOwner {\r\n        require(\r\n            IUniswapV2Factory(router.factory()).getPair(\r\n                router.WETH(),\r\n                _tokenAddress\r\n            ) != address(0),\r\n            \"Token does not have a WETH pair on V2\"\r\n        );\r\n        tokenAllowed[_tokenAddress] = _allowed;\r\n        isPartnerToken[_tokenAddress] = _allowed;\r\n        partnerTokenWallet[_tokenAddress] = _partnerWallet;\r\n    }\r\n\r\n    function updateFees(Fees memory _newFees) external onlyOwner {\r\n        fees.burnFee = _newFees.burnFee;\r\n        fees.marketingWalletShare = _newFees.marketingWalletShare;\r\n        fees.devWalletShare = _newFees.devWalletShare;\r\n        fees.gameWalletShare = _newFees.gameWalletShare;\r\n        fees.totalBackupWalletFees =\r\n            _newFees.devWalletShare +\r\n            _newFees.gameWalletShare;\r\n    }\r\n\r\n    function updateWallets(Wallets memory _wallets) external onlyOwner {\r\n        wallets.deadWallet = _wallets.deadWallet;\r\n        wallets.marketingWallet = _wallets.marketingWallet;\r\n        wallets.devWallet = _wallets.devWallet;\r\n        wallets.gameWallet = _wallets.gameWallet;\r\n    }\r\n\r\n    function getPriceIntokens(\r\n        address _token,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        return getPrice(_token, _amount);\r\n    }\r\n\r\n    function changePriceOfBuy50000InGameTokens(uint256 _newPrice) external onlyOwner {\r\n        priceOfBuy5 = _newPrice;\r\n    }\r\n\r\n    function changePriceOfBuy100000InGameTokens(uint256 _newPrice) external onlyOwner {\r\n        priceOfBuy10 = _newPrice;\r\n    }\r\n\r\n    function changePriceOfBuy250000InGameTokens(uint256 _newPrice) external onlyOwner {\r\n        priceOfBuy25 = _newPrice;\r\n    }\r\n\r\n    function changePriceOfBuy500000InGameTokens(uint256 _newPrice) external onlyOwner {\r\n        priceOfBuy50 = _newPrice;\r\n    }\r\n\r\n    function changePriceOfBuy1000000InGameTokens(uint256 _newPrice) external onlyOwner {\r\n        priceOfBuy100 = _newPrice;\r\n    }\r\n\r\n    function changePriceOfBuy2500000InGameTokens(uint256 _newPrice) external onlyOwner {\r\n        priceOfBuy250 = _newPrice;\r\n    }\r\n\r\n    function changePriceOfBuy5000000InGameTokens(uint256 _newPrice) external onlyOwner {\r\n        priceOfBuy500 = _newPrice;\r\n    }\r\n\r\n    function getPrice(\r\n        address _token,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        path[1] = router.WETH();\r\n        uint[] memory result = router.getAmountsOut(_amount, path);\r\n\r\n        path[0] = router.WETH();\r\n        path[1] = _token;\r\n        uint[] memory finalResult = router.getAmountsOut(result[1], path);\r\n\r\n        return finalResult[1];\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"Buy1000000InGameTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"Buy100000InGameTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"Buy2500000InGameTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"Buy250000InGameTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"Buy5000000InGameTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"Buy500000InGameTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"Buy50000InGameTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOfBuy1000000InGameTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOfBuy100000InGameTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOfBuy2500000InGameTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOfBuy250000InGameTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOfBuy5000000InGameTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOfBuy500000InGameTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceOfBuy50000InGameTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingWalletShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devWalletShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameWalletShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBackupWalletFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPriceIntokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPartnerToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerTokenWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingWalletShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devWalletShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameWalletShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBackupWalletFees\",\"type\":\"uint256\"}],\"internalType\":\"struct LVMMarket.Fees\",\"name\":\"_newFees\",\"type\":\"tuple\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_partnerWallet\",\"type\":\"address\"}],\"name\":\"updatePartnerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"deadWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameWallet\",\"type\":\"address\"}],\"internalType\":\"struct LVMMarket.Wallets\",\"name\":\"_wallets\",\"type\":\"tuple\"}],\"name\":\"updateWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deadWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LVMMarket", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ef1e6a71aafb8a8e78287d33118d1848f5d5ca9463eb92b2c293e5c4e04697d"}