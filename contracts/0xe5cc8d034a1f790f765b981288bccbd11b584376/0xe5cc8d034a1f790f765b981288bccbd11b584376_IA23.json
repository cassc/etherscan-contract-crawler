{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IA23.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title: Indi Art 2023\\n/// @author: manifold.xyz\\n\\nimport \\\"./manifold/ERC721Creator.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                                                                //\\n//                                                                                                                                //\\n//    NMMMMMWNWx'..''..;0MMWWKO000XK:..xWNNo..xMMMMMMMMMMMMWNK0c.. 'OWNXXXx..:XWWMWNK:    :KWWMWd..,dk00XMMMMMMMMMMWWXKd..cXkl    //\\n//    WMMMWMWNNd'...'..;0MMWWK0KOkKK:..xWNKl..dWMMMMMMMMMMMWX0O:.. 'OWNNNXx..:XWWMWN0:    :KWWMNo..'okO0XMMMMMMMMMMWWK0o. :KOl    //\\n//    NWWMWWWXNx'......;0MMWN0OK0k0K:..dWNKl..dWMMMMMMMMMMMWX0k:.. 'OWWNXNk' ;KWWMMWK:  . :KWWMNo. 'okO0KMMMMMMMMMMWN0Ol. :0Ol    //\\n//    XWWMWMWXNk'......,OMMWNOOXKk0K:..dWNKl..dWMMMMMMMMMMWWKOxl:,'c0NXKKKd. :KWWWWMK:. . :KWWMNo. 'oxO0KWMMMMMMMMMNXOdc. ;OOc    //\\n//    XWWMWWNNWx'......;0MMWN0OXKk00:..xWXKl..dWMMMMMMWNXXXXKKK000KKXXXXXXOc'lXWWWWWK:... ;KNWMNo. 'oxO0KWMMMMMMMMWKOxo;. ;0Oc    //\\n//    XWWMWWNNWx'......,OMWNN0OXXO00:..xWX0l..dWMMMMWX00Odlok0K000KK00KXXNNX00XNNWWWK;....:KNWMNo. 'oxO0KWMMMMMMMMWKOxl;. ;00l    //\\n//    XWNMWWWNWx'......,OMWNNK0NKkOO:..dWXKl..dWMMWNX0d;,;ldxocloxkO00XKKXXNNNXKXNWWX:....:KNWMWo..'lxO00WMMMMMMMMWKOxl;. ;00c    //\\n//    NWWMMMWWWk,......,OMWWWK0XKkkk:..oNNKl..dWMWXX0: .,okO0OkOOdc:,',,';lkXXNNNWWWXc....:KXNMWo..'lxO00WMMMMMMMMWKOdl:. ;0Kc    //\\n//    WMMMWWWWM0;......,OMWWWK0NKkkO:..oNNKl..oNWNXKc   .:dOkkOd;.        .'cOXNWWWWK:....;KXXMWo...lxO00WMMMMMMMMWKOxl:. ;0Kc    //\\n//    WMMWWMWWW0;......,OMWWWKKNXOO0c..oWNKl..oWMWW0' ..;lkx:,'.  ....    .'.,kXXNWWXc....;KXNMWd...ldO00WMMMMMMMMMX0ko:. ;0Kl    //\\n//    WMMWWMMWW0:......;0MWWWXKNX000c..dWNKo..oWMMMXd,..,;;;,...;;:oOkc'..'ll;dXNNWWXc....;0XXMWd...ldkO0NMMMMMMMMMX0xl;. 'k0l    //\\n//    WMMMMMMWW0,......;0MWWWXKXK000l.'xNXKd,,xNNNNXOdc,;:,....':clkXKc,lkKXX0x0NWWNXc... ;KXXMNd. .ldkOONMMMMMMMMMX0xc;. 'x0l    //\\n//    WMMMMMMWWO,......,OMWWWXOOxdddc:ldkxolcclddc;'.;l;','. ...'lddoc,:0WMN0xxxdONWXl... ;KXXMNo...cdkOONMMMMMMMMMXOd:,. 'x0c    //\\n//    WMMMMMMWWO;......;0MWWXOdo:'..............    .,c;;l;;dOk;,odl;,'lKX0OdllxdONMNl. . ,0XNMXo...cdkOONMMMMMMMMMX0xc,. 'k0:    //\\n//    WMMMMMMWMO,......;OWWXkll;.     ..'....        ';';c,;dxkocdxoodlloddxo,'o0NWMNo. . ,OKXMNo...cdkOONMMMMMMMMMN0xc;. 'k0c    //\\n//    NWWMWWWNWO,......,OWXkdd;      .';;;,'..      .,..''',;:oollolc:,',:c:;':ONWMWNo. . ,OXNMWd. .cdkOONMMMMMMMMMNKkl:. 'O0c    //\\n//    000KK0OOOd,......,kXkdkl..    .,::;;;..       .,..'',;,,,,:dOxc;,;dkkxkk0NXNWWNo. . 'OXNMWx...cdxkONMMMMMMMMMNKOl;. ,OKc    //\\n//    c;:cc:::::,......'ll:dd;cl,...colc:::,....  .'c;,;:ccccclx0XXx'..,okKXXXNNKKWMNo. . 'kXNMWx...coxkONMMMMMMMMMNKOl;. ,0Kc    //\\n//    ..................,.:xcoOko,,:lllc;::..',;;lx0KdloooldOXWWMWWd..oXNNNWWMWNKKWMNo. . 'OXNMWx'..cokOONMMMMMMMMMNKOo;. ,0Kc    //\\n//    lllllllllc,......,odOdd0xkOdoolldl'....,:okOXNN0ocldKWMMMWWWNO,.xNNKXWMMMWXXWMNo... 'OXXWWx...cokOkXMMMMMMMMMNKko:. 'k0l    //\\n//    NNNNNNNNN0:......cKXOx0Xdloc:;:d0d'. ..,:cx0XKOkdooOMMMMMMMNX0c.;0W00NMMMMNNWWNd... 'OXXWMk. .coxOOXMMMMMMMMMNKxlc. 'x0l    //\\n//    OOOOOOOO0x;......:0OoxK0;.....,kXk,.   .,:dKXkddddxKMMMWNNNXXO;.:0KoxNWMMMWNWMWd....'kKXWMk' .cdxOOXMMMMMMMMMNKkl:. 'k0l    //\\n//    xxkkkkkkkd;......l0dlxKx. .   ;0XO:.    .,x0K0d:;dKXXXNXXKookl..c0xckXWMMMWWWWNo....'kKXWMO'..cdxOOXMMMMMMMMMNKkl:. 'k0l    //\\n//    xkkkkkkkkd;......lx:cxKd...  .dNKc.     .;xKKOx::xklcxOKXd,ckc..dOcckXMMMMWWWMXc... 'kKKWMO'..:dxkOXMMMMMMMMMN0ko:. 'kKl    //\\n//    xkkkkkkkkx;......ol;lxKk'....:KMXl,;,'..;dKNK0d:lc'..'l0O,'ok: .xk:l0WMMMMWNWWXc....'k0KWMO'..:oxOOXMMMMMMMMMN0kd:. 'xKo    //\\n//    xkkkkkkkkx:.....'ddoOk0k;''.,kWMMXO0Odox0NNKO0xxxollcoOXd..:l' ,kx:oXMMMMWXNWWXc....'k0KWMO'..cdxOkXMMMMMMMMMWK0xc. .xKo    //\\n//    kkkkkkkkkx;.....;kkoclOk,..;dXWWWNNNNNNWWWKkxxxkOk0WWMXKo..'.  ,kkckWMMMMNKXWMXl....'k0KWMO'..cdxkkXMMMMMMMMMWXKkl. .dKo    //\\n//    kxkkkkxxkd;.....l0x,.,o, .;lkNNNWWWWWWMMMNkox0XXKKNMMMXkc...   .d0OKWMMMMWKXWMXl... 'x0KWMk'..cdxkkKMMMMMMMMMWXKkl. .dKo    //\\n//    kxxxxxxxkd;....;kO; .;c. . .;dOXWMMMMMMMXxcldKWMMMMMMMNxll,    .:kKNMMMMMMNNWMXl... 'x0KWMO'..:dxkkKMMMMMMMMMWXKOl' .xKo    //\\n//    kxxxxxxxkd;....l0l. .lx,...   .,oKWMMWWWKooONWWWMMMMMMWOoc.     'oKWMMMMMWXXWMXl....'x0KWMO,..:dkOkKMMMMMMMMMWXKOo' .xKl    //\\n//    xxxxkkxxkx;...'dk.  .;kklcc:.    .ckKNNNN00NMWWWWWMMMMMXl.     .cOWMMMMMMMXXWMXl... .xO0WMO'..cxkOkKMMMMMMMMMWNX0d' .xKl    //\\n//    xxxxkkkkkx:...,ko.   .'d0K0Oxd:'.   ':oddx0K0KXXKNMMMMMWx'.    .:OMMMMMMMMNNWMNo... .dO0WMO'..cxkOkKMMMMMMMMMWNNKx, .kXl    //\\n//    xxxxkkkkkx:...;kl.      .ck00Okxdl;'.. .';clclx0XWN00WMMNOo,...,dXMMMMMMMMWNWMNo... .dO0WMO,..cxk0OKMMMMMMMMMWNNXO; .kXl    //\\n//    xkxxkkkkkx:...;xl...     ..:xO0Okdolcc;'. ..;ccldk0xd0KXNNNOdloKWMMMMMMMMMWWWMNo... .xO0WMO,..cxk0OXMMMMMMMMMMWNX0: .kNk    //\\n//    kkxxkkkkkx:...,xd,;;,'...  ...,okkxdoddl:'.......cOk:,..'',:lloxKWMMMWMMMMWWWMNo.....x00WM0,..:xk00XMMMMMMMMMMMWNXkcoKWW    //\\n//    kxxxkkkkkx:...'l0kdxkc...   .   .....,,;;;;:;.';';xl.    .      .c0WMMMMMMWWWMWo.....x00WM0,..:xO00XMMMMMMMMMMMWNXXNNNXK    //\\n//    kkxxkkkkkx:....'dKkdl' ......             ....,c,;xx;.....        .:dOXWMMWWWMWd.....x00WMO,..ckOKKNMMMMMWWWWWWNXK0koc;,    //\\n//    kxxkkkkkkkc...'.,x0c. .......                  . .';::.               .;xXWWWMWd.....xKKWMO,..lO0XNWMWWNXKOkdolc:'......    //\\n//    xkkkkkkkkkc..','.lKKd;.    ...                       ..       ..         ;KWWMWd.....kXXWM0;.'o0KKKOkdoc;,..........,,''    //\\n//    xkkkkkkkOk:..','.;xXNk:,.     ....   .  ...  ..         ',.   ';,.     ...oWMMWd.....kXNWWKdccclc;'....'','..',;:clddxxd    //\\n//    xkkkkkkkOk:...,'.;okKNOdl;,'';codxdc,'',;lol:cdo;.  .. .o0Oc;,..;,....;c;.cNMMWx.....kKxoc;'.......;:::clccodxkkkkkkkOKO    //\\n//    kkkkkkkkOx:...'.,do;oKNX0OkkkxocxXX0kxxkO0XWNXXNNOl,,clcdXWWN0o::;'..'....lNMMWd....'do,..........:o:..;ok0d:;,..'.,ldkx    //\\n//    kkkkkkkkkxc...'.,kd,,;lkKXNWWNXKXNWNXXKKK0kkkOkdlldl;cx:cXMMMWNX0x,  ...coxNMMNd'...'dkdc'.........'....;odl:,,,,'.,;,;:    //\\n//    kkkkkkkkkkc...'..ckx:'..,:lxOKKXXXNNNNXKXKKKXNXd. ...:xxkNMMMMMWW0c.  .'lkONMMWx'...'x0xc...................',;;,....'',    //\\n//    kkkkkkkkkkc'..'...lO0kxoc:,,,;cclllllodk0XNWMMWKc.';.'odlOMMMMMWW0:',..,;lkXMMWk'...'k0xc..;:,''....'..'''.....''...';;,    //\\n//    kkkkkkkkkkc'.''..'cxkO0K00OOkkkOOOOOO0KKKXNWWWNXk,.......lXWMNK0Xx. ....'o0KWMWk,....xOxc'';cxOOkocll:,.......''''...,,,    //\\n//    kkkkkkkkOkl'..'...cdxkkOOOO0OOkkkxkOOOKWN0000OOKKc   ..  .kNMN0O0c       ,xKWMMO,....oOdc';lxKWMMWWNNX0kxolc:;,'.....,,,    //\\n//    kkkkkkkkkkl'..'...cddxddxxxkkxxxxdxkkx0WXOkOOOkOKo.   ..  cXWWKO0:       .xXWMM0,....oOxolONWMMMMMMMMMMMWWNNX0Oxdool:::,    //\\n//    kkkkkkkkkkc...'...cddddddddddddddddxxx0WXOkkOOOOKO, .,;,. .kNWN0O:  ..   'kXWMWKl;,'.oOxxoodxkO0KXNWMMMMMMMMWNNXKXXK0Okx    //\\n//    kkkkkkkkOkc...'...cdddddddddddddoodxxxKNN0kkkOkO0Kx'.:c:,..oKNWNKl  .'.  'kXWMWNXK0kx0KKOlclccccllodxkOKNWMMMMMMMMMWNXXX    //\\n//    kkkkkkkkOkc...'...cdddddddddddddoodxkKNNWNX0kOkOOKKx,';::' ;kKWWNk..',.  ,ONMMWWWWWWNWNNKdclccclllccccccoxxkkOKXNNWWMMMM    //\\n//    oooooooooc,...'...cdddddddddddddoodxONMNNMMXOkkkkk00d,':c,..ckWWW0:.',.  'OWMWKOO000KKKXXdclcclllccccccccccccclloddkkOKX    //\\n//    '''''''''.....'...cdddddddooddddoddxONMWWMMN0kkxxxx00x:,:;. .lXNNXd,',.  ,ONMW0xdxxxxxkXKoccccllllcccccccccccccccccccclo    //\\n//    ccclllllc:'...'...:doodddooooooooodxkKMMMMNKOkkxxddxO0x:;:'  'kK0X0c.'.. ,ONMW0xxkkxxxkXKo:cccllllcccccccccccccccccccccc    //\\n//    0OO000000d,...'...cdddddoooddddddddxdONMMN0kxxxxddddxO0x:;,. .lKO0Xk,... 'OWMW0xxxxxxkOKKo:ccccllllllccccccccccccccccccc    //\\n//    xxxxxxxkOxc,..,...o0kddddddddddddddolo0MMN0O0KXXK0kxxxOKx:'...,k00XXd,,' .kWMW0ddxxxkkk00l;ccccllllllllcllcccccllllclcll    //\\n//    xxxxkkkkO00kddkkkOKX0xddddoooooooooox0NMMMWWWWNNNNXOkkkOKOc''..l0KKN0c,, .xWMMKxdddxxkk00o:cccllllllllllllllllllllllllll    //\\n//    xxxxkkkOKNWWWWWNXK0OkxddoooooooooooxKNNKXWNXNWMMWWNXK0OO0K0l,,';xKKNXo,'. lNMMXkdddxxkk00dccclllllllllllllllllllllllllll    //\\n//    xxxxkkkOKWMWX0OxxdddoooooooooooodkOXWNx,xN0kkOKXNWWNXXKK0O0Odc;,cOXNNk;'. :XMMW0dddxxkO0Olclllllllllllllllllllllllllllll    //\\n//    kkkOOO0KXWMWKkdooooooooooooodkOKNWMMW0,,0NXK00OkOO0KXNWWNK000k:,cxOXWO,.. .OMMMKxddxkkO00oclllllllllllllllllllllllllllll    //\\n//    NWWWWWWMMMWN0xdooooddoldkO0KNWMWWWMMXl.dWMMMMWWNXXKK0KKXXNWNNXOlcccxKk,.'. lWMMNOdxxkkO00dllllllllllllllllllllllllllllll    //\\n//    MMMMMMWNX0OxddooodddoxOKNNNNNNNXXNNXd.;XMMMMNK0000KXXXXXKKKXXNNKxl',lc..:. ,KMMMKxdxxkkOkolllllcclllllllllllllllllllllll    //\\n//    MWXK0kxdollooooodddkXWNXXXXXXXKKXXKk,'OMMMMW0dooooodxxkOOOOOO0NN0d, .lcco; .dNMMNOdxxkkkxollllllccllllllllllllllllllllll    //\\n//    kxooooooooooooooddlkNX0OOkkkkkOXWW0c'xWMMMMXkooooooodddddxxl;cOX0dlc':O0Ox;.;ONMMXkdxxkkxollllllclllllllllllllllllllllll    //\\n//    ddxddddooooloooodxldKkllllloood0WNo.oWMMMMMXxoooooooodddddxdldKKocldl':k0ko'.dKNMWKkxxkkxollllllllllllllllllllllllllllll    //\\n//    xxdddooooooooooodxoxOxlllooooodONO;lXMMMMMMNOdoooooooodddxkkO00Odc..;,.,dkxc.l0KWMWKkxkkxlclllllllllllllllllllllllllllll    //\\n//    ooooooooooooooooodddoolllooooodkKooXMMMMMMMWNKOxddoooooddxkOO00Okkd;',..;dkx;c0KNMMWKOkkxlclllllllllllllllllllllllllllll    //\\n//    oooooooooooolllooooolllllooooodOOdOMMWNNWMMMMWNXKOkxdooodddxxkkOOOOOxdllc:xOoxKK0XWMNKkkxoclllllllllllllllllllllllllllll    //\\n//    oooooolloolllllllllllllloooooodxx0NWX0OKWMMMMMMMWWNXKOxddddddddxxkOOOO000lckdlOKkxOXWNKOkoclllllllllllllllllllllllllllll    //\\n//    olllllllllllllllllllllloooooodd;'dK0OOKNWWMMMMMMMMMMMWNX0OkxxxdddxxkOkkkOx:ox:lKKxlxKWWXOo:lllllllllllllllllllllllllllll    //\\n//    llllllllcllcclllllllllloooooddl'.;dKKXNNXKXNWMMMMMMMMMMMWWNNXXKOkxxkkkOkkd;;l;lO0kolodKNKdllllllllllllllllllllllllllllll    //\\n//    llllllllllcccllllllllloooooodxOkxkKXKOxxkkO0KKXWWWWMMMMMMMMMMMMWNXK0OOOOkkl,''o0dcdkkkKWNkllllllllllllllllllllloolllllll    //\\n//    llllllllllccllllllllooooooodddxkkOOkxddddddxkOOKKXXXNWWMMMMMMMMMMMMWNXXK0Oklckkkx;;ldONWWkllllllllllllllllllllllllllllll    //\\n//    lllllllllllllllllllloooooodddddddddddddddddddddxxkO0KXXXNWWMMMMMMMMMMMMWWWNK0K0Oxc;,'c0WNdclllllllllllllllllllllllllllll    //\\n//    oooooooooooloolllloooooooodddddddddddddddddddooddddxkO00KXNWWMMWMMMMMMMMMMMWWXKKKkdoxKWMNd:llllllllllllllllllllllllllllc    //\\n//                                                                                                                                //\\n//                                                                                                                                //\\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\ncontract IA23 is ERC721Creator {\\n    constructor() ERC721Creator(\\\"Indi Art 2023\\\", \\\"IA23\\\") {}\\n}\\n\"\r\n    },\r\n    \"contracts/manifold/ERC721Creator.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\ncontract ERC721Creator is Proxy {\\n    \\n    constructor(string memory name, string memory symbol) {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = 0x2d3fC875de7Fe7Da43AD0afa0E7023c9B91D06b1;\\n        Address.functionDelegateCall(\\n            0x2d3fC875de7Fe7Da43AD0afa0E7023c9B91D06b1,\\n            abi.encodeWithSignature(\\\"initialize(string,string)\\\", name, symbol)\\n        );\\n    }\\n        \\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n     function implementation() public view returns (address) {\\n        return _implementation();\\n    }\\n\\n    function _implementation() internal override view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }    \\n\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IA23", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x2d3fc875de7fe7da43ad0afa0e7023c9b91d06b1", "SwarmSource": ""}