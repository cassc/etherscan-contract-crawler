{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts-verify/interfaces/IKUMAUniswapStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IKUMAUniswapStaking {\\n    event AccessControllerSet(address newAccessController);\\n    event StablecoinSet(address stablecoin);\\n    event WrappedKIBTSet(address KIBT);\\n    event NewRouterSet(address router);\\n    event NewUniswapFeeSet(uint24 newFee);\\n    event Deposit(address stableSwapPool, address user, uint256 stablecoinAmount, uint256 KIBTBought);\\n    event DepositWrappedKIBT(address indexed user, uint256 wrappedKIBTAmount);\\n    event Withdraw(address indexed pool, address indexed user, uint256 wrappedKIBTAmount, uint256 stablecoinBought);\\n    event WithdrawWrappedKIBT(address indexed user, uint256 wrappedKIBTAmount);\\n    event SharesTransferred(address indexed sender, address indexed receiver, uint256 sharesTransferred);\\n\\n    function deposit(uint256 stablecoinAmount, uint256 minKIBTOut) external returns (uint256);\\n    function depositWrappedKIBT(uint256 wrappedKIBTDepositAmount) external;\\n    function withdraw(uint256 wrappedKIBTWithdrawAmount, uint256 minStablecoinOut)\\n        external\\n        returns (uint256 stablecoinBought);\\n    function withdrawWrappedKIBT(uint256 wrappedKIBTWithdrawAmount) external;\\n    function transferShares(uint256 shareTransferAmount, address receiver) external;\\n    function setRouter(address newUniswapRouter) external;\\n    function setUniswapFee(uint24 newFee) external;\\n    function getWithdrawableWrappedKIBT(address user) external view returns (uint256);\\n    function getShares(address user) external view returns (uint256);\\n    function getTotalShares() external view returns (uint256);\\n    function getRouter() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts-verify/interfaces/uniswap-core/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts-verify/interfaces/uniswap-core/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0, address indexed token1, uint24 indexed fee, int24 tickSpacing, address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"contracts-verify/interfaces/uniswap-periphery/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../../uniswap-core/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    function factory() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts-verify/KUMAUniswapStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IKUMAUniswapStaking} from \\\"./interfaces/IKUMAUniswapStaking.sol\\\";\\nimport {IAccessControl} from \\\"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\\\";\\nimport {Roles} from \\\"./libraries/Roles.sol\\\";\\nimport {KUMAStakingErrors} from \\\"./libraries/Errors.sol\\\";\\nimport {ReentrancyGuard} from \\\"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IWrappedRebaseToken} from \\\"lib/wrapped-rebase-tokens/src/interfaces/IWrappedRebaseToken.sol\\\";\\nimport {ISwapRouter} from \\\"./interfaces/uniswap-periphery/interfaces/ISwapRouter.sol\\\";\\nimport {IUniswapV3Factory} from \\\"./interfaces/uniswap-core/interfaces/IUniswapV3Factory.sol\\\";\\n\\ncontract KUMAUniswapStaking is IKUMAUniswapStaking, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IAccessControl public immutable accessController;\\n    IERC20 public immutable stablecoin; // The stablecoin that can be swapped to staked wKIBT\\n    IWrappedRebaseToken public immutable wKIBT; // The wrapped KIBT that can be staked and swapped for stablecoin\\n\\n    ISwapRouter private _uniswapRouter;\\n    uint24 private _uniswapFee;\\n    uint256 private _totalShares;\\n    mapping(address => uint256) private _shares; // Mapping of indiviual users to their wrappedRebaseToken balances\\n\\n    /**\\n     * @notice Checks that msg.sender has a specific `role` access\\n     * @param role Bytes32 role from the Roles library\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        if (!accessController.hasRole(role, msg.sender)) {\\n            revert KUMAStakingErrors.ACCESS_CONTROL_ACCOUNT_IS_MISSING_ROLE(msg.sender, role);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @param _accessController KUMA AccessController\\n     * @param _stablecoin Stablecoin that can be swapped to staked wKIBT\\n     * @param _wKIBT Wrapped KIBT that is escrowed in this contract\\n     * @param uniswapRouter Address of the Uniswap V3 router that can be used to for swaps\\n     * @param uniswapFee Fee of the Uniswap pool that is used for swaps\\n     */\\n    constructor(\\n        IAccessControl _accessController,\\n        IERC20 _stablecoin,\\n        IWrappedRebaseToken _wKIBT,\\n        ISwapRouter uniswapRouter,\\n        uint24 uniswapFee\\n    ) {\\n        if (\\n            address(_accessController) == address(0) || address(_stablecoin) == address(0)\\n                || address(_wKIBT) == address(0) || address(uniswapRouter) == address(0)\\n        ) {\\n            revert KUMAStakingErrors.CANNOT_SET_TO_ADDRESS_ZERO();\\n        }\\n\\n        accessController = _accessController;\\n        stablecoin = _stablecoin;\\n        wKIBT = _wKIBT;\\n        _uniswapRouter = uniswapRouter;\\n        _uniswapFee = uniswapFee;\\n\\n        emit AccessControllerSet(address(_accessController));\\n        emit StablecoinSet(address(_stablecoin));\\n        emit WrappedKIBTSet(address(_wKIBT));\\n        emit NewRouterSet(address(uniswapRouter));\\n        emit NewUniswapFeeSet(uniswapFee);\\n    }\\n\\n    /**\\n     * @notice Swap stablecoin for wKIBT and holds the wKIBT into this contract\\n     * @notice  Deposited wKIBT - swap fees can be later withdrawn using withdraw\\n     * @dev Must approve this contract to spend stablecoin for stablecoinAmount before this can be called\\n     * @param stablecoinInAmount Amount of stablecoin to exchange for wKIBT, in stablecoin decimals\\n     * @param minWrappedKIBTOut Minimum amount of wKIBT to receive from the exchange, in wKIBT decimals\\n     * @return Actual amount of wKIBT received in swap that will now accrue in this contract\\n     */\\n    function deposit(uint256 stablecoinInAmount, uint256 minWrappedKIBTOut) external nonReentrant returns (uint256) {\\n        if (stablecoinInAmount == 0) {\\n            revert KUMAStakingErrors.CANNOT_DEPOSIT_ZERO_TOKENS();\\n        }\\n        // Cache variables for gas savings\\n        IERC20 stablecoin_ = stablecoin;\\n        address wKIBT_ = address(wKIBT);\\n        uint24 uniswapFee_ = _uniswapFee;\\n        ISwapRouter uniswapRouter_ = _uniswapRouter;\\n\\n        stablecoin_.safeTransferFrom(msg.sender, address(this), stablecoinInAmount);\\n        stablecoin_.safeIncreaseAllowance(address(uniswapRouter_), stablecoinInAmount);\\n\\n        uint256 _wKIBTBought = uniswapRouter_.exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: address(stablecoin_),\\n                tokenOut: wKIBT_,\\n                fee: uniswapFee_,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: stablecoinInAmount,\\n                amountOutMinimum: minWrappedKIBTOut,\\n                sqrtPriceLimitX96: 0 // Bound by minKIBTOut so we don't need to set a limit\\n            })\\n        );\\n\\n        _shares[msg.sender] += _wKIBTBought;\\n        _totalShares += _wKIBTBought;\\n\\n        emit Deposit(\\n            IUniswapV3Factory(uniswapRouter_.factory()).getPool(address(stablecoin_), wKIBT_, uniswapFee_),\\n            msg.sender,\\n            stablecoinInAmount,\\n            _wKIBTBought\\n        );\\n        return _wKIBTBought;\\n    }\\n\\n    /**\\n     * @notice Deposit wrapped rebase tokens to this staking contract directly\\n     * @notice Similar to deposit, but without swapping from the stablecoin\\n     * @dev Increments a user's share depending on the amount of deposited wrapped rebase tokens\\n     * @dev Requires approval of the wrapped rebase token for the depositAmount\\n     * @param wrappedKIBTDepositAmount Amount of wrapped rebase tokens to deposit, in wrapped rebase token decimals\\n     */\\n    function depositWrappedKIBT(uint256 wrappedKIBTDepositAmount) external {\\n        if (wrappedKIBTDepositAmount == 0) {\\n            revert KUMAStakingErrors.CANNOT_DEPOSIT_ZERO_TOKENS();\\n        }\\n        _shares[msg.sender] += wrappedKIBTDepositAmount;\\n        _totalShares += wrappedKIBTDepositAmount;\\n        IERC20(address(wKIBT)).safeTransferFrom(msg.sender, address(this), wrappedKIBTDepositAmount);\\n        emit DepositWrappedKIBT(msg.sender, wrappedKIBTDepositAmount);\\n    }\\n\\n    /**\\n     * @notice Swap staked wKIBT for stablecoin and send received stablecoin to user\\n     * @param wrappedKIBTWithdrawAmount Amount of wKIBT to withdraw and swap for stablecoin, in wKIBT decimals\\n     * @param minStablecoinOut Minimum amount of stablecoin to receive from the exchange, in stablecoin decimals\\n     * @return stablecoinBought Actual amount of stablecoin received from swap\\n     */\\n    function withdraw(uint256 wrappedKIBTWithdrawAmount, uint256 minStablecoinOut)\\n        external\\n        nonReentrant\\n        returns (uint256 stablecoinBought)\\n    {\\n        if (wrappedKIBTWithdrawAmount == 0) {\\n            revert KUMAStakingErrors.CANNOT_WITHDRAW_ZERO_TOKENS();\\n        }\\n        uint256 userShares_ = _shares[msg.sender];\\n        if (userShares_ < wrappedKIBTWithdrawAmount) {\\n            revert KUMAStakingErrors.REQUESTED_WITHDRAW_AMOUNT_HIGHER_THAN_USER_BALANCE(\\n                msg.sender, wrappedKIBTWithdrawAmount, userShares_\\n            );\\n        }\\n\\n        // Cache variables for gas savings\\n        address wKIBT_ = address(wKIBT);\\n        address stablecoin_ = address(stablecoin);\\n        ISwapRouter uniswapRouter_ = _uniswapRouter;\\n        uint24 uniswapFee_ = _uniswapFee;\\n\\n        IERC20(wKIBT_).safeIncreaseAllowance(address(uniswapRouter_), wrappedKIBTWithdrawAmount);\\n\\n        _shares[msg.sender] = userShares_ - wrappedKIBTWithdrawAmount;\\n        _totalShares -= wrappedKIBTWithdrawAmount;\\n\\n        stablecoinBought = uniswapRouter_.exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: address(wKIBT_),\\n                tokenOut: stablecoin_,\\n                fee: uniswapFee_,\\n                recipient: msg.sender,\\n                deadline: block.timestamp,\\n                amountIn: wrappedKIBTWithdrawAmount,\\n                amountOutMinimum: minStablecoinOut,\\n                sqrtPriceLimitX96: 0 // Bound by minKIBTOut so we don't need to set a limit\\n            })\\n        );\\n\\n        emit Withdraw(\\n            address(IUniswapV3Factory(uniswapRouter_.factory()).getPool(stablecoin_, address(wKIBT_), uniswapFee_)),\\n            msg.sender,\\n            wrappedKIBTWithdrawAmount,\\n            stablecoinBought\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw a user's wrapped rebase tokens without swapping on the Curve Pool\\n     * @notice Useful if there is low liquidity in the curve pool or if the user wants to keep wrapped rebase tokens\\n     * @param wrappedKIBTWithdrawAmount Amount of wKIBT to withdraw, in wKIBT decimals\\n     */\\n    function withdrawWrappedKIBT(uint256 wrappedKIBTWithdrawAmount) external {\\n        if (wrappedKIBTWithdrawAmount == 0) {\\n            revert KUMAStakingErrors.CANNOT_WITHDRAW_ZERO_TOKENS();\\n        }\\n        uint256 userShares_ = _shares[msg.sender];\\n        if (userShares_ < wrappedKIBTWithdrawAmount) {\\n            revert KUMAStakingErrors.REQUESTED_WITHDRAW_AMOUNT_HIGHER_THAN_USER_BALANCE(\\n                msg.sender, wrappedKIBTWithdrawAmount, userShares_\\n            );\\n        }\\n\\n        _shares[msg.sender] = userShares_ - wrappedKIBTWithdrawAmount;\\n        _totalShares -= wrappedKIBTWithdrawAmount;\\n        IERC20(address(wKIBT)).safeTransfer(msg.sender, wrappedKIBTWithdrawAmount);\\n        emit WithdrawWrappedKIBT(msg.sender, wrappedKIBTWithdrawAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers the stake of the sender to another user\\n     * @param shareTransferAmount Amount of shares to transfer, in 27 decimals\\n     * @param receiver Address of the receiver\\n     */\\n    function transferShares(uint256 shareTransferAmount, address receiver) external {\\n        if (shareTransferAmount == 0) {\\n            revert KUMAStakingErrors.CANNOT_TRANSFER_ZERO_SHARES();\\n        }\\n        if (receiver == address(0)) {\\n            revert KUMAStakingErrors.CANNOT_TRANSFER_TO_ADDRESS_ZERO();\\n        }\\n        if (receiver == msg.sender) {\\n            revert KUMAStakingErrors.CANNOT_TRANSFER_TO_SELF();\\n        }\\n        if (shareTransferAmount > _shares[msg.sender]) {\\n            revert KUMAStakingErrors.REQUESTED_TRANSFER_AMOUNT_HIGHER_THAN_USER_BALANCE(\\n                msg.sender, shareTransferAmount, _shares[msg.sender]\\n            );\\n        }\\n\\n        _shares[msg.sender] -= shareTransferAmount;\\n        _shares[receiver] += shareTransferAmount;\\n        emit SharesTransferred(msg.sender, receiver, shareTransferAmount);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the Uniswap v3 router\\n     * @dev Can only be called by the `KUMA_MANAGER_ROLE`.\\n     * @param newUniswapRouter New Uniswap v3 router.\\n     */\\n    function setRouter(address newUniswapRouter) external onlyRole(Roles.KUMA_MANAGER_ROLE) {\\n        if (address(newUniswapRouter) == address(0)) {\\n            revert KUMAStakingErrors.CANNOT_SET_TO_ADDRESS_ZERO();\\n        }\\n        _uniswapRouter = ISwapRouter(newUniswapRouter);\\n        emit NewRouterSet(address(newUniswapRouter));\\n    }\\n\\n    /**\\n     * @notice Sets the Uniswap v3 fee\\n     * @dev Can only be called by the `KUMA_MANAGER_ROLE`.\\n     * @param newFee New Uniswap v3 fee.\\n     */\\n    function setUniswapFee(uint24 newFee) external onlyRole(Roles.KUMA_MANAGER_ROLE) {\\n        _uniswapFee = newFee;\\n        emit NewUniswapFeeSet(newFee);\\n    }\\n\\n    /**\\n     * @notice Return the amount of wrapped KIBT that can be withdrawn by the user in 18 decimals\\n     * @param user Address of the user to query\\n     */\\n    function getWithdrawableWrappedKIBT(address user) external view returns (uint256) {\\n        return _shares[user];\\n    }\\n\\n    /**\\n     * @notice Return the amount of shares for a user; equivalent to the amount of wrapped KIBT staked for the user\\n     * @param user Address of the user to query\\n     */\\n    function getShares(address user) external view returns (uint256) {\\n        return _shares[user];\\n    }\\n\\n    /**\\n     * @notice Return the total amount of shares in this contract; equivalent to the total amount of wrapped KIBT staked\\n     */\\n    function getTotalShares() external view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @notice Return uniswap fee for the pool\\n     */\\n    function getUniswapFee() external view returns (uint24) {\\n        return _uniswapFee;\\n    }\\n\\n    /**\\n     * @notice Return the address of the Uniswap v3 router\\n     */\\n    function getRouter() external view returns (address) {\\n        return address(_uniswapRouter);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts-verify/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary KUMAStakingErrors {\\n    error ACCESS_CONTROL_ACCOUNT_IS_MISSING_ROLE(address account, bytes32 role);\\n    error CANNOT_SET_TO_ADDRESS_ZERO();\\n    error CANNOT_TRANSFER_TO_ADDRESS_ZERO();\\n    error CANNOT_DEPOSIT_ZERO_TOKENS();\\n    error CANNOT_TRANSFER_ZERO_SHARES();\\n    error CANNOT_TRANSFER_TO_SELF();\\n    error CANNOT_WITHDRAW_ZERO_TOKENS();\\n    error REQUESTED_WITHDRAW_AMOUNT_HIGHER_THAN_USER_BALANCE(address user, uint256 requestedAmount, uint256 balance);\\n    error REQUESTED_TRANSFER_AMOUNT_HIGHER_THAN_USER_BALANCE(\\n        address user, uint256 requestedShareTransferAmount, uint256 shareBalance\\n    );\\n    error INVALID_POOL_INDICIES(uint256 stablecoinPoolIndex, uint256 KIBTPoolIndex);\\n}\\n\"\r\n    },\r\n    \"contracts-verify/libraries/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nlibrary Roles {\\n    bytes32 public constant KUMA_POOL_ACCESS_ROLE = keccak256(\\\"KUMA_POOL_ACCESS_ROLE\\\");\\n    bytes32 public constant KUMA_MANAGER_ROLE = keccak256(\\\"KUMA_MANAGER_ROLE\\\");\\n    bytes32 public constant MCAG_MINT_ROLE = keccak256(\\\"MCAG_MINT_ROLE\\\");\\n    bytes32 public constant MCAG_BURN_ROLE = keccak256(\\\"MCAG_BURN_ROLE\\\");\\n    bytes32 public constant MCAG_BLACKLIST_ROLE = keccak256(\\\"MCAG_BLACKLIST_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/wrapped-rebase-tokens/src/interfaces/IWrappedRebaseToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"lib/kuma-protocol/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedRebaseToken is IERC20 {\\n    function wrap(uint256 depositAmount) external;\\n\\n    function unWrap(uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"_accessController\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract IWrappedRebaseToken\",\"name\":\"_wKIBT\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"uniswapFee\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"ACCESS_CONTROL_ACCOUNT_IS_MISSING_ROLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANNOT_DEPOSIT_ZERO_TOKENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANNOT_SET_TO_ADDRESS_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANNOT_TRANSFER_TO_ADDRESS_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANNOT_TRANSFER_TO_SELF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANNOT_TRANSFER_ZERO_SHARES\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CANNOT_WITHDRAW_ZERO_TOKENS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedShareTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareBalance\",\"type\":\"uint256\"}],\"name\":\"REQUESTED_TRANSFER_AMOUNT_HIGHER_THAN_USER_BALANCE\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"REQUESTED_WITHDRAW_AMOUNT_HIGHER_THAN_USER_BALANCE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessController\",\"type\":\"address\"}],\"name\":\"AccessControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableSwapPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"KIBTBought\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedKIBTAmount\",\"type\":\"uint256\"}],\"name\":\"DepositWrappedKIBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"NewRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"newFee\",\"type\":\"uint24\"}],\"name\":\"NewUniswapFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesTransferred\",\"type\":\"uint256\"}],\"name\":\"SharesTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"StablecoinSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedKIBTAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoinBought\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedKIBTAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawWrappedKIBT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"KIBT\",\"type\":\"address\"}],\"name\":\"WrappedKIBTSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessController\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWrappedKIBTOut\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wrappedKIBTDepositAmount\",\"type\":\"uint256\"}],\"name\":\"depositWrappedKIBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableWrappedKIBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUniswapRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"newFee\",\"type\":\"uint24\"}],\"name\":\"setUniswapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"transferShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wKIBT\",\"outputs\":[{\"internalType\":\"contract IWrappedRebaseToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wrappedKIBTWithdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStablecoinOut\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinBought\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wrappedKIBTWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawWrappedKIBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KUMAUniswapStaking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005fad6f80312aee6f19784a7fc359f90d441163de00000000000000000000000068037790a0229e9ce6eaa8a99ea92964106c4703000000000000000000000000f1254e912e4fb87c178df9a9baf6dd49009e3fe400000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc450000000000000000000000000000000000000000000000000000000000000bb8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}