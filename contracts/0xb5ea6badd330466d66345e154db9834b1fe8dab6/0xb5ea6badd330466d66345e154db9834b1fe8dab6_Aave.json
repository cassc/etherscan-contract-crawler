{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseProtocolProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\nimport {Multicall} from \\\"./Multicall.sol\\\";\\nimport {Permit} from \\\"./Permit.sol\\\";\\n\\n/**\\n * @title Handles payment and approve functions\\n * @author Pino development team\\n */\\ncontract BaseProtocolProxy is Permit, Multicall, Ownable2Step {\\n    using SafeERC20 for IERC20;\\n\\n    IWETH9 public immutable weth;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Thrown when the ETH transfer call is failed\\n     * @param _caller Address of the caller of the transaction\\n     * @param _recipient Address of the recipient receiving ETH\\n     */\\n    error FailedToSendEther(address _caller, address _recipient);\\n\\n    /**\\n     * @notice Thrown when the amount of ETH to transfer is 0\\n     */\\n    error InvalidAmountToTransfer();\\n\\n    /**\\n     * @notice Proxy contract constructor, sets permit2 and weth addresses\\n     * @param _permit2 Permit2 contract address\\n     * @param _weth WETH9 contract address\\n     */\\n    constructor(address _permit2, address _weth) payable Permit(_permit2) {\\n        weth = IWETH9(_weth);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Withdraws ETH and transfers to the recipient\\n     * @param _recipient Address of the destination receiving the fees\\n     */\\n    function withdrawAdmin(address _recipient) external onlyOwner {\\n        _sendETH(_recipient, address(this).balance);\\n    }\\n\\n    /**\\n     * @notice Approves an ERC20 token to multiple spenders\\n     * @param _token ERC20 token address\\n     * @param _spenders The spender which spends the tokens (usually DeFi protocols)\\n     */\\n    function approveToken(IERC20 _token, address[] calldata _spenders) external payable {\\n        for (uint256 i = 0; i < _spenders.length;) {\\n            _token.forceApprove(_spenders[i], type(uint256).max);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Wraps ETH to WETH\\n     * @param _proxyFeeInWei Fee of the proxy contract\\n     */\\n    function wrapETH(uint256 _proxyFeeInWei) external payable nonETHReuse {\\n        weth.deposit{value: msg.value - _proxyFeeInWei}();\\n    }\\n\\n    /**\\n     * @notice Unwraps total amount of WETH9 to ETH and transfers the amount to the recipient\\n     * @param _recipient The destination address\\n     */\\n    function unwrapWETH9(address _recipient) external payable {\\n        uint256 balanceWETH = weth.balanceOf(address(this));\\n\\n        if (balanceWETH > 0) {\\n            weth.withdraw(balanceWETH);\\n\\n            _sendETH(_recipient, balanceWETH);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sweeps the total amount of tokens to inside the contract to the recipient\\n     * @param _token ERC20 token address\\n     * @param _recipient The destination address\\n     * @return amount Transferred amount of the token\\n     */\\n    function sweepToken(IERC20 _token, address _recipient) public payable returns (uint256 amount) {\\n        amount = _token.balanceOf(address(this));\\n\\n        if (amount > 0) {\\n            _token.safeTransfer(_recipient, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer ETH to the destination\\n     * @param _recipient The destination address\\n     * @param _amount Ether amount\\n     */\\n    function _sendETH(address _recipient, uint256 _amount) internal {\\n        if (_amount == 0) {\\n            revert InvalidAmountToTransfer();\\n        }\\n\\n        (bool success,) = _recipient.call{value: _amount}(\\\"\\\");\\n\\n        if (!success) {\\n            revert FailedToSendEther(msg.sender, _recipient);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Handles multicall function\\n * @author Pino development team\\n */\\ncontract Multicall {\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n    uint256 private _status;\\n\\n    /**\\n     * @notice Thrown when the nonETHReuse modifier is called twice in the multicall\\n     */\\n    error EtherReuseGuardCall();\\n\\n    /**\\n     * @dev Prevents a caller from calling multiple functions that work with ETH in a transaction\\n     */\\n    modifier nonETHReuse() {\\n        _nonReuseBefore();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets status to NOT_ENTERED\\n     */\\n    constructor() payable {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @notice Multiple calls on proxy functions\\n     * @param _calldata An array of calldata that is called one by one\\n     * @dev The other param is for the referral program of the Pino server\\n     */\\n    function multicall(bytes[] calldata _calldata, uint256) external payable {\\n        // Unlock ether locker just in case if it was locked before\\n        unlockETHReuse();\\n\\n        // Loop through each calldata and execute them\\n        for (uint256 i = 0; i < _calldata.length;) {\\n            (bool success, bytes memory result) = address(this).delegatecall(_calldata[i]);\\n\\n            // Check if the call was successful or not\\n            if (!success) {\\n                // Next 7 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            // Increment variable i more efficiently\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        /*\\n         * To ensure proper execution, unlock reusability for future use.\\n         * In some cases, the caller might invoke a function with the 'nonETHReuse'\\n         * modifier directly, bypassing the 'unlockETHReuse' step at the beginning of the\\n         * multicall. This would render the function unusable if not unlocked here.\\n         */\\n        unlockETHReuse();\\n    }\\n\\n    /**\\n     * @notice Unlocks the reentrancy\\n     * @dev Should be used before and after all the calls\\n     */\\n    function unlockETHReuse() internal {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    function _nonReuseBefore() private {\\n        // On the first call to nonETHReuse, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert EtherReuseGuardCall();\\n        }\\n\\n        // Any calls to nonETHReuse after this point will fail\\n        _status = ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IPermit2} from \\\"../interfaces/IPermit2.sol\\\";\\n\\n/**\\n * @title Permit2 SignatureTransfer functions\\n * @author Pino development team\\n */\\ncontract Permit {\\n    IPermit2 public immutable permit2;\\n\\n    /**\\n     * @notice Sets permit2 contract address\\n     * @param _permit2 Permit2 contract address\\n     */\\n    constructor(address _permit2) payable {\\n        permit2 = IPermit2(_permit2);\\n    }\\n\\n    /**\\n     * @notice Transfers 1 token from user to the contract using Permit2\\n     * @param _permit PermitTransferFrom data struct\\n     * @param _signature EIP712 Signature of the Permit2 data structure\\n     */\\n    function permitTransferFrom(IPermit2.PermitTransferFrom calldata _permit, bytes calldata _signature)\\n        public\\n        payable\\n    {\\n        permit2.permitTransferFrom(\\n            _permit,\\n            IPermit2.SignatureTransferDetails({to: address(this), requestedAmount: _permit.permitted.amount}),\\n            msg.sender,\\n            _signature\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers multiple tokens from user to the contract using Permit2\\n     * @param _permit permitBatchTransferFrom data struct\\n     * @param _signature EIP712 Signature of the Permit2 data structure\\n     */\\n    function permitBatchTransferFrom(IPermit2.PermitBatchTransferFrom calldata _permit, bytes calldata _signature)\\n        external\\n        payable\\n    {\\n        uint256 tokensLen = _permit.permitted.length;\\n\\n        IPermit2.SignatureTransferDetails[] memory details = new IPermit2.SignatureTransferDetails[](tokensLen);\\n\\n        for (uint256 i = 0; i < tokensLen;) {\\n            details[i].to = address(this);\\n            details[i].requestedAmount = _permit.permitted[i].amount;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        permit2.permitTransferFrom(_permit, details, msg.sender, _signature);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Aave/IAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {ILendingPoolV2} from \\\"./ILendingPoolV2.sol\\\";\\nimport {ILendingPoolV3} from \\\"./ILendingPoolV3.sol\\\";\\nimport {IWethGateway} from \\\"./IWethGateway.sol\\\";\\n\\n/**\\n * @title Aave proxy contract interface\\n * @author Pino development team\\n * @notice Deposits and Withdraws tokens to the lending pool\\n */\\ninterface IAave {\\n    /**\\n     * @notice Emitted when a token is deposited to the lending pool\\n     * @param _caller Address of the caller of the transaction\\n     * @param _recipient The recipient that received the aTokens\\n     * @param _token The underlying ERC20 token\\n     * @param _amount The amount of the ERC20 token\\n     */\\n    event Deposit(address _caller, address _recipient, address _token, uint256 _amount);\\n\\n    /**\\n     * @notice Emitted when a token is withdrawn from the lending pool\\n     * @param _caller Address of the caller of the transaction\\n     * @param _recipient The recipient that received the tokens\\n     * @param _token The underlying ERC20 token\\n     * @param _amount The amount of the ERC20 token\\n     */\\n    event Withdraw(address _caller, address _recipient, address _token, uint256 _amount);\\n\\n    /**\\n     * @notice Emitted when a token is repaid to the lending pool\\n     * @param _caller Address of the caller of the transaction\\n     * @param _recipient The recipient that received the repayment\\n     * @param _token The underlying ERC20 token\\n     * @param _amount The amount of the ERC20 token\\n     */\\n    event Repay(address _caller, address _recipient, address _token, uint256 _amount);\\n\\n    /**\\n     * @notice Emitted when a token is borrowed from the lending pool\\n     * @param _callerAndDebtor Address of the caller of the transaction that will receive the debt\\n     * @param _token The underlying ERC20 token\\n     * @param _amount The amount of the ERC20 token\\n     * @param _rateMode The interest rate mode at which the user wants to borrow\\n     */\\n    event Borrow(address _callerAndDebtor, address _token, uint256 _amount, uint256 _rateMode);\\n\\n    /**\\n     * @notice Deposits a token to the lending pool V2 and transfers aTokens to recipient\\n     * @param _token The underlying token to deposit\\n     * @param _amount Amount to deposit\\n     * @param _recipient Recipient of the deposit that will receive aTokens\\n     */\\n    function depositV2(address _token, uint256 _amount, address _recipient) external payable;\\n\\n    /**\\n     * @notice Deposits a token to the lending pool V3 and transfers aTokens to recipient\\n     * @param _token The underlying token to deposit\\n     * @param _amount Amount to deposit\\n     * @param _recipient Recipient of the deposit that will receive aTokens\\n     */\\n    function depositV3(address _token, uint256 _amount, address _recipient) external payable;\\n\\n    /**\\n     * @notice Receives aToken and transfers ERC20 token to recipient using lending pool V2\\n     * @param _token The underlying token to withdraw\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient to receive ERC20 tokens\\n     * @return withdrawn The amount withdrawn from the lending pool\\n     */\\n    function withdrawV2(address _token, uint256 _amount, address _recipient)\\n        external\\n        payable\\n        returns (uint256 withdrawn);\\n\\n    /**\\n     * @notice Receives aToken and transfers ERC20 token to recipient using lending pool V3\\n     * @param _token The underlying token to withdraw\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient to receive ERC20 tokens\\n     * @return withdrawn The amount withdrawn from the lending pool\\n     */\\n    function withdrawV3(address _token, uint256 _amount, address _recipient)\\n        external\\n        payable\\n        returns (uint256 withdrawn);\\n\\n    /**\\n     * @notice Receives A_WETH and transfers ETH token to recipient using lending pool V2\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient to receive ETH\\n     */\\n    function withdrawETHV2(uint256 _amount, address _recipient) external payable;\\n\\n    /**\\n     * @notice Receives A_WETH and transfers ETH token to recipient using lending pool V3\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient to receive ETH\\n     */\\n    function withdrawETHV3(uint256 _amount, address _recipient) external payable;\\n\\n    /**\\n     * @notice Repays a borrowed token using lending pool V2\\n     * @param _token The underlying token to repay\\n     * @param _amount Amount to repay\\n     * @param _rateMode Rate mode, 1 for stable and 2 for variable\\n     * @param _recipient Recipient to repay for\\n     * @return repaid The final amount repaid\\n     */\\n    function repayV2(address _token, uint256 _amount, uint256 _rateMode, address _recipient)\\n        external\\n        payable\\n        returns (uint256 repaid);\\n\\n    /**\\n     * @notice Repays a borrowed token using lending pool V3\\n     * @param _token The underlying token to repay\\n     * @param _amount Amount to repay\\n     * @param _rateMode Rate mode, 1 for stable and 2 for variable\\n     * @param _recipient Recipient to repay for\\n     * @return repaid The final amount repaid\\n     */\\n    function repayV3(address _token, uint256 _amount, uint256 _rateMode, address _recipient)\\n        external\\n        payable\\n        returns (uint256 repaid);\\n\\n    /**\\n     * @notice Borrows an specific amount of tokens on behalf of the caller from lendingPoolV2\\n     * @param _token The underlying token to borrow\\n     * @param _amount Amount to borrow\\n     * @param _rateMode The interest rate mode at which the user wants to borrow\\n     * @dev This action transfers the borrowed tokens to the proxy contract\\n     */\\n    function borrowV2(address _token, uint256 _amount, uint256 _rateMode) external payable;\\n\\n    /**\\n     * @notice Borrows an specific amount of tokens on behalf of the caller from lendingPoolV3\\n     * @param _token The underlying token to borrow\\n     * @param _amount Amount to borrow\\n     * @param _rateMode The interest rate mode at which the user wants to borrow\\n     * @dev This action transfers the borrowed tokens to the proxy contract\\n     */\\n    function borrowV3(address _token, uint256 _amount, uint256 _rateMode) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Aave/ILendingPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/**\\n * @notice Aave lending pool V2 interface\\n */\\ninterface ILendingPoolV2 {\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     *\\n     */\\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     *\\n     */\\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     *\\n     */\\n    function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf)\\n        external;\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     *\\n     */\\n    function repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Aave/ILendingPoolV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/**\\n * @notice Aave lending pool V3 interface\\n */\\ninterface ILendingPoolV3 {\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf)\\n        external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(address asset, uint256 amount, uint256 interestRateMode, address onBehalfOf)\\n        external\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Aave/IWethGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/**\\n * @notice Aave WETH gateway interface\\n */\\ninterface IWethGateway {\\n    function withdrawETH(address lendingPool, uint256 amount, address to) external;\\n    function depositETH(address lendingPool, address onBehalfOf, uint16 referralCode) external payable;\\n    function repayETH(address lendingPool, uint256 amount, uint256 rateMode, address onBehalfOf) external payable;\\n    function borrowETH(address lendingPool, uint256 amount, uint256 interestRateMode, uint16 referralCode)\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/**\\n * @title SignatureTransfer\\n * @notice Handles ERC20 token transfers through signature based actions\\n * @dev Requires user's token approval on the Permit2 contract\\n */\\ninterface IPermit2 {\\n    /**\\n     * @notice The token and amount details for a transfer signed in the permit transfer signature\\n     */\\n    struct TokenPermissions {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount that can be spent\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @notice The signed permit message for a single token transfer\\n     */\\n    struct PermitTransferFrom {\\n        TokenPermissions permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice Specifies the recipient address and amount for batched transfers.\\n     * @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n     * @dev Reverts if the requested amount is greater than the permitted signed amount.\\n     */\\n    struct SignatureTransferDetails {\\n        // recipient address\\n        address to;\\n        // spender requested amount\\n        uint256 requestedAmount;\\n    }\\n\\n    /**\\n     * @notice Used to reconstruct the signed permit message for multiple token transfers\\n     * @dev Do not need to pass in spender address as it is required that it is msg.sender\\n     * @dev Note that a user still signs over a spender address\\n     */\\n    struct PermitBatchTransferFrom {\\n        // the tokens and corresponding amounts permitted for a transfer\\n        TokenPermissions[] permitted;\\n        // a unique value for every token owner's signature to prevent signature replays\\n        uint256 nonce;\\n        // deadline on the permit signature\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice Transfers a token using a signed permit message\\n     * @dev Reverts if the requested amount is greater than the permitted signed amount\\n     * @param permit The permit data signed over by the owner\\n     * @param owner The owner of the tokens to transfer\\n     * @param transferDetails The spender's requested transfer details for the permitted token\\n     * @param signature The signature to verify\\n     */\\n    function permitTransferFrom(\\n        PermitTransferFrom calldata permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /**\\n     * @notice Transfers multiple tokens using a signed permit message\\n     * @param permit The permit data signed over by the owner\\n     * @param owner The owner of the tokens to transfer\\n     * @param transferDetails Specifies the recipient and requested amount for the token transfer\\n     * @param signature The signature to verify\\n     */\\n    function permitTransferFrom(\\n        PermitBatchTransferFrom calldata permit,\\n        SignatureTransferDetails[] calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice IWETH9 WETH interface\\n */\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/Aave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n                                           +##*:                                          \\n                                         .######-                                         \\n                                        .########-                                        \\n                                        *#########.                                       \\n                                       :##########+                                       \\n                                       *###########.                                      \\n                                      :############=                                      \\n                   *###################################################.                  \\n                   :##################################################=                   \\n                    .################################################-                    \\n                     .*#############################################-                     \\n                       =##########################################*.                      \\n                        :########################################=                        \\n                          -####################################=                          \\n                            -################################+.                           \\n               =##########################################################*               \\n               .##########################################################-               \\n                .*#######################################################:                \\n                  =####################################################*.                 \\n                   .*#################################################-                   \\n                     -##############################################=                     \\n                       -##########################################=.                      \\n                         :+####################################*-                         \\n           *###################################################################:          \\n           =##################################################################*           \\n            :################################################################=            \\n              =############################################################*.             \\n               .*#########################################################-               \\n                 :*#####################################################-                 \\n                   .=################################################+:                   \\n                      -+##########################################*-.                     \\n     .+*****************###########################################################*:     \\n      +############################################################################*.     \\n       :##########################################################################=       \\n         -######################################################################+.        \\n           -##################################################################+.          \\n             -*#############################################################=             \\n               :=########################################################+:               \\n                  :=##################################################+-                  \\n                     .-+##########################################*=:                     \\n                         .:=*################################*+-.                         \\n                              .:-=+*##################*+=-:.                              \\n                                     .:=*#########+-.                                     \\n                                         .+####*:                                         \\n                                           .*#:    */\\npragma solidity 0.8.18;\\n\\nimport {BaseProtocolProxy} from \\\"../base/BaseProtocolProxy.sol\\\";\\nimport {IAave} from \\\"../interfaces/Aave/IAave.sol\\\";\\nimport {ILendingPoolV2} from \\\"../interfaces/Aave/ILendingPoolV2.sol\\\";\\nimport {ILendingPoolV3} from \\\"../interfaces/Aave/ILendingPoolV3.sol\\\";\\nimport {IWethGateway} from \\\"../interfaces/Aave/IWethGateway.sol\\\";\\n\\n/**\\n * @title Aave proxy contract\\n * @author Pino development team\\n * @notice Contract is used to deposit, withdraw, and repay tokens to the Aave lending pool\\n */\\ncontract Aave is IAave, BaseProtocolProxy {\\n    IWethGateway public immutable wethGateway;\\n    ILendingPoolV2 public immutable lendingPoolV2;\\n    ILendingPoolV3 public immutable lendingPoolV3;\\n    uint16 private constant REFERRAL_CODE = 0;\\n\\n    /**\\n     * @notice Sets LendingPool addresses for different Aave versions\\n     * @param _permit2 Address of Permit2 contract\\n     * @param _weth Address of WETH9 contract\\n     * @param _lendingPoolV2 Aave lending pool V2 address\\n     * @param _lendingPoolV3 Aave lending pool V3 address\\n     * @param _wethGateway Aave WethGateway contract address\\n     */\\n    constructor(\\n        address _permit2,\\n        address _weth,\\n        ILendingPoolV2 _lendingPoolV2,\\n        ILendingPoolV3 _lendingPoolV3,\\n        IWethGateway _wethGateway\\n    ) payable BaseProtocolProxy(_permit2, _weth) {\\n        wethGateway = _wethGateway;\\n        lendingPoolV2 = _lendingPoolV2;\\n        lendingPoolV3 = _lendingPoolV3;\\n    }\\n\\n    /**\\n     * @notice Deposits a token to the lending pool V2 and transfers aTokens to recipient\\n     * @param _token The underlying token to deposit\\n     * @param _amount Amount to deposit\\n     * @param _recipient Recipient of the deposit that will receive aTokens\\n     */\\n    function depositV2(address _token, uint256 _amount, address _recipient) external payable {\\n        lendingPoolV2.deposit(_token, _amount, _recipient, REFERRAL_CODE);\\n\\n        emit Deposit(msg.sender, _recipient, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposits a token to the lending pool V3 and transfers aTokens to recipient\\n     * @param _token The underlying token to deposit\\n     * @param _amount Amount to deposit\\n     * @param _recipient Recipient of the deposit that will receive aTokens\\n     */\\n    function depositV3(address _token, uint256 _amount, address _recipient) external payable {\\n        lendingPoolV3.supply(_token, _amount, _recipient, REFERRAL_CODE);\\n\\n        emit Deposit(msg.sender, _recipient, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Receives aToken and transfers ERC20 token to recipient using lending pool V2\\n     * @param _token The underlying token to withdraw\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient to receive ERC20 tokens\\n     * @return withdrawn The amount withdrawn from the lending pool\\n     */\\n    function withdrawV2(address _token, uint256 _amount, address _recipient)\\n        external\\n        payable\\n        returns (uint256 withdrawn)\\n    {\\n        withdrawn = lendingPoolV2.withdraw(_token, _amount, _recipient);\\n\\n        emit Withdraw(msg.sender, _recipient, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Burns aToken and transfers ERC20 token to recipient using lending pool V3\\n     * @param _token The underlying token to withdraw\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient to receive ERC20 tokens\\n     * @return withdrawn The amount withdrawn from the lending pool\\n     */\\n    function withdrawV3(address _token, uint256 _amount, address _recipient)\\n        external\\n        payable\\n        returns (uint256 withdrawn)\\n    {\\n        withdrawn = lendingPoolV3.withdraw(_token, _amount, _recipient);\\n\\n        emit Withdraw(msg.sender, _recipient, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Receives A_WETH and transfers ETH token to recipient using lending pool V2\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient to receive ETH\\n     */\\n    function withdrawETHV2(uint256 _amount, address _recipient) external payable {\\n        wethGateway.withdrawETH(address(lendingPoolV2), _amount, _recipient);\\n\\n        emit Withdraw(msg.sender, _recipient, ETH, _amount);\\n    }\\n\\n    /**\\n     * @notice Receives A_WETH and transfers ETH token to recipient using lending pool V3\\n     * @param _amount Amount to withdraw\\n     * @param _recipient Recipient to receive ETH\\n     */\\n    function withdrawETHV3(uint256 _amount, address _recipient) external payable {\\n        wethGateway.withdrawETH(address(lendingPoolV3), _amount, _recipient);\\n\\n        emit Withdraw(msg.sender, _recipient, ETH, _amount);\\n    }\\n\\n    /**\\n     * @notice Repays a borrowed token using lending pool V2\\n     * @param _token The underlying token to repay\\n     * @param _amount Amount to repay\\n     * @param _rateMode Rate mode, 1 for stable and 2 for variable\\n     * @param _recipient Recipient to repay for\\n     * @return repaid The final amount repaid\\n     */\\n    function repayV2(address _token, uint256 _amount, uint256 _rateMode, address _recipient)\\n        external\\n        payable\\n        returns (uint256 repaid)\\n    {\\n        repaid = lendingPoolV2.repay(_token, _amount, _rateMode, _recipient);\\n\\n        emit Repay(msg.sender, _recipient, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Repays a borrowed token using lending pool V3\\n     * @param _token The underlying token to repay\\n     * @param _amount Amount to repay\\n     * @param _rateMode Rate mode, 1 for stable and 2 for variable\\n     * @param _recipient Recipient to repay for\\n     * @return repaid The final amount repaid\\n     */\\n    function repayV3(address _token, uint256 _amount, uint256 _rateMode, address _recipient)\\n        external\\n        payable\\n        returns (uint256 repaid)\\n    {\\n        repaid = lendingPoolV3.repay(_token, _amount, _rateMode, _recipient);\\n\\n        emit Repay(msg.sender, _recipient, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Borrows an specific amount of tokens on behalf of the caller from lendingPoolV2\\n     * @param _token The underlying token to borrow\\n     * @param _amount Amount to borrow\\n     * @param _rateMode The interest rate mode at which the user wants to borrow\\n     * @dev This action transfers the borrowed tokens to the proxy contract\\n     */\\n    function borrowV2(address _token, uint256 _amount, uint256 _rateMode) external payable {\\n        lendingPoolV2.borrow(_token, _amount, _rateMode, REFERRAL_CODE, msg.sender);\\n\\n        emit Borrow(msg.sender, _token, _amount, _rateMode);\\n    }\\n\\n    /**\\n     * @notice Borrows an specific amount of tokens on behalf of the caller from lendingPoolV3\\n     * @param _token The underlying token to borrow\\n     * @param _amount Amount to borrow\\n     * @param _rateMode The interest rate mode at which the user wants to borrow\\n     * @dev This action transfers the borrowed tokens to the proxy contract\\n     */\\n    function borrowV3(address _token, uint256 _amount, uint256 _rateMode) external payable {\\n        lendingPoolV3.borrow(_token, _amount, _rateMode, REFERRAL_CODE, msg.sender);\\n\\n        emit Borrow(msg.sender, _token, _amount, _rateMode);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permit2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPoolV2\",\"name\":\"_lendingPoolV2\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPoolV3\",\"name\":\"_lendingPoolV3\",\"type\":\"address\"},{\"internalType\":\"contract IWethGateway\",\"name\":\"_wethGateway\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EtherReuseGuardCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"FailedToSendEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountToTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_callerAndDebtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rateMode\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_spenders\",\"type\":\"address[]\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateMode\",\"type\":\"uint256\"}],\"name\":\"borrowV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateMode\",\"type\":\"uint256\"}],\"name\":\"borrowV3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositV3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPoolV2\",\"outputs\":[{\"internalType\":\"contract ILendingPoolV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPoolV3\",\"outputs\":[{\"internalType\":\"contract ILendingPoolV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_calldata\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit2\",\"outputs\":[{\"internalType\":\"contract IPermit2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitBatchTransferFrom\",\"name\":\"_permit\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"permitBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPermit2.PermitTransferFrom\",\"name\":\"_permit\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"repayV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repaid\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"repayV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repaid\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethGateway\",\"outputs\":[{\"internalType\":\"contract IWethGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawETHV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawETHV3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proxyFeeInWei\",\"type\":\"uint256\"}],\"name\":\"wrapETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Aave", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba3000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007d2768de32b0b80b7a3454c06bdac94a69ddc7a900000000000000000000000087870bca3f3fd6335c3f4ce8392d69350b4fa4e2000000000000000000000000effc18fc3b7eb8e676dac549e0c693ad50d1ce31", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}