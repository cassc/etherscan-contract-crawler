{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/constants/CommonConstants.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract CommonConstants {\r\n\r\n    uint public constant EXCHANGE_RATE_BASE_RATE = 1e18;\r\n\r\n}\r\n\r\n// File: contracts/interfaces/InterestRateInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface InterestRateInterface {\r\n\r\n    /**\r\n      * @dev Returns the current interest rate for the given DMMA and corresponding total supply & active supply\r\n      *\r\n      * @param dmmTokenId The DMMA whose interest should be retrieved\r\n      * @param totalSupply The total supply fot he DMM token\r\n      * @param activeSupply The supply that's currently being lent by users\r\n      * @return The interest rate in APY, which is a number with 18 decimals\r\n      */\r\n    function getInterestRate(uint dmmTokenId, uint totalSupply, uint activeSupply) external view returns (uint);\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Blacklistable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Allows accounts to be blacklisted by the owner of the contract.\r\n *\r\n *  Taken from USDC's contract for blacklisting certain addresses from owning and interacting with the token.\r\n */\r\ncontract Blacklistable is Ownable {\r\n\r\n    string public constant BLACKLISTED = \"BLACKLISTED\";\r\n\r\n    mapping(address => bool) internal blacklisted;\r\n\r\n    event Blacklisted(address indexed account);\r\n    event UnBlacklisted(address indexed account);\r\n    event BlacklisterChanged(address indexed newBlacklister);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the creator of this contract\r\n    */\r\n    modifier onlyBlacklister() {\r\n        require(msg.sender == owner(), \"MUST_BE_BLACKLISTER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    modifier notBlacklisted(address account) {\r\n        require(blacklisted[account] == false, BLACKLISTED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted. Reverts with `BLACKLISTED` if blacklisted.\r\n    */\r\n    function checkNotBlacklisted(address account) public view {\r\n        require(!blacklisted[account], BLACKLISTED);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return blacklisted[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Adds `account` to blacklist\r\n     *\r\n     * @param account The address to blacklist\r\n    */\r\n    function blacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = true;\r\n        emit Blacklisted(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes account from blacklist\r\n     *\r\n     * @param account The address to remove from the blacklist\r\n    */\r\n    function unBlacklist(address account) public onlyBlacklister {\r\n        blacklisted[account] = false;\r\n        emit UnBlacklisted(account);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IDmmController.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IDmmController {\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event AdminDeposit(address indexed sender, uint amount);\r\n    event AdminWithdraw(address indexed receiver, uint amount);\r\n\r\n    function blacklistable() external view returns (Blacklistable);\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the provided data.\r\n     *\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA\r\n     * @param symbol            The symbol of the new DMMA, IE mDAI or mUSDC\r\n     * @param name              The name of this token, IE `DMM: DAI`\r\n     * @param decimals          The number of decimals of the underlying token, and therefore the number for this DMMA\r\n     * @param minMintAmount     The minimum amount that can be minted for any given transaction.\r\n     * @param minRedeemAmount   The minimum amount that can be redeemed any given transaction.\r\n     * @param totalSupply       The initial total supply for this market.\r\n     */\r\n    function addMarket(\r\n        address underlyingToken,\r\n        string calldata symbol,\r\n        string calldata name,\r\n        uint8 decimals,\r\n        uint minMintAmount,\r\n        uint minRedeemAmount,\r\n        uint totalSupply\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Creates a new mToken using the already-existing token.\r\n     *\r\n     * @param dmmToken          The token that should be added to this controller.\r\n     * @param underlyingToken   The token that should be wrapped to create a new DMMA.\r\n     */\r\n    function addMarketFromExistingDmmToken(\r\n        address dmmToken,\r\n        address underlyingToken\r\n    ) external;\r\n\r\n    /**\r\n     * @param newController The new controller who should receive ownership of the provided DMM token IDs.\r\n     */\r\n    function transferOwnershipToNewController(\r\n        address newController\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Enables the corresponding DMMA to allow minting new tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be enabled.\r\n     */\r\n    function enableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Disables the corresponding DMMA from minting new tokens. This allows the market to close over time, since\r\n     *      users are only able to redeem tokens.\r\n     *\r\n     * @param dmmTokenId  The DMMA that should be disabled.\r\n     */\r\n    function disableMarket(uint dmmTokenId) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `InterestRateInterface` interface.\r\n     *\r\n     * @param newInterestRateInterface  The new contract that implements the `InterestRateInterface` interface.\r\n     */\r\n    function setInterestRateInterface(address newInterestRateInterface) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainAssetValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainAssetValuator(address newOffChainAssetValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `IOffChainAssetValuator` interface.\r\n     *\r\n     * @param newOffChainCurrencyValuator The new contract that implements the `IOffChainAssetValuator` interface.\r\n     */\r\n    function setOffChainCurrencyValuator(address newOffChainCurrencyValuator) external;\r\n\r\n    /**\r\n     * @dev Sets a new contract that implements the `UnderlyingTokenValuator` interface\r\n     *\r\n     * @param newUnderlyingTokenValuator The new contract that implements the `UnderlyingTokenValuator` interface\r\n     */\r\n    function setUnderlyingTokenValuator(address newUnderlyingTokenValuator) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinCollateralization   The new min collateralization (with 18 decimals) at which the DMME must be in\r\n     *                                  order to add to the total supply of DMM.\r\n     */\r\n    function setMinCollateralization(uint newMinCollateralization) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param newMinReserveRatio   The new ratio (with 18 decimals) that is used to enforce a certain percentage of assets\r\n     *                          are kept in each DMMA.\r\n     */\r\n    function setMinReserveRatio(uint newMinReserveRatio) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`. This call reverts with\r\n     *      INSUFFICIENT_COLLATERAL if there isn't enough collateral in the Chainlink contract to cover the controller's\r\n     *      requirements for minimum collateral.\r\n     */\r\n    function increaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Increases the max supply for the provided `dmmTokenId` by `amount`.\r\n     */\r\n    function decreaseTotalSupply(uint dmmTokenId, uint amount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA. These withdrawn funds are then\r\n     *      allocated to real-world assets that will be used to pay interest into the DMMA.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminWithdrawFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @dev Allows the owners of the DMM Ecosystem to deposit funds into a DMMA. These funds are used to disburse\r\n     *      interest payments and add more liquidity to the specific market.\r\n     *\r\n     * @param dmmTokenId        The ID of the DMM token whose underlying will be funded.\r\n     * @param underlyingAmount  The amount underlying the DMM token that will be deposited into the DMMA.\r\n     */\r\n    function adminDepositFunds(uint dmmTokenId, uint underlyingAmount) external;\r\n\r\n    /**\r\n     * @dev Gets the collateralization of the system assuming 1-year's worth of interest payments are due by dividing\r\n     *      the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the\r\n     *      aggregate interest owed (plus the principal), assuming each DMMA was at maximum usage.\r\n     *\r\n     * @return  The 1-year collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getTotalCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the current collateralization of the system assuming by dividing the total value of all the\r\n     *      collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed\r\n     *      (plus the principal), using the current usage of each DMMA.\r\n     *\r\n     * @return  The active collateralization of the system, as a number with 18 decimals. For example\r\n     *          `1010000000000000000` is 101% or 1.01.\r\n     */\r\n    function getActiveCollateralization() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the underlying token, IE DAI or USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByUnderlyingTokenAddress(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenId(uint dmmTokenId) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the interest rate from the DMM token, IE DMM: DAI or DMM: USDC.\r\n     *\r\n     * @return  The current interest rate, represented using 18 decimals. Meaning, `65000000000000000` is 6.5% APY or\r\n     *          0.065.\r\n     */\r\n    function getInterestRateByDmmTokenAddress(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRateByUnderlying(address underlyingToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the exchange rate from the underlying to the DMM token, such that\r\n     *      `DMM: Token = underlying / exchangeRate`\r\n     *\r\n     * @return  The current exchange rate, represented using 18 decimals. Meaning, `200000000000000000` is 0.2.\r\n     */\r\n    function getExchangeRate(address dmmToken) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Gets the DMM token for the provided underlying token. For example, sending DAI returns DMM: DAI.\r\n     */\r\n    function getDmmTokenForUnderlying(address underlyingToken) external view returns (address);\r\n\r\n    /**\r\n     * @dev Gets the underlying token for the provided DMM token. For example, sending DMM: DAI returns DAI.\r\n     */\r\n    function getUnderlyingTokenForDmm(address dmmToken) external view returns (address);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMMA or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenId(uint dmmTokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this DMM token (IE DMM: DAI) or false if it is not enabled.\r\n     */\r\n    function isMarketEnabledByDmmTokenAddress(address dmmToken) external view returns (bool);\r\n\r\n    /**\r\n     * @return True if the market is enabled for this underlying token (IE DAI) or false if it is not enabled.\r\n     */\r\n    function getTokenIdFromDmmTokenAddress(address dmmTokenAddress) external view returns (uint);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IDmmToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * Basically an interface except, contains the implementation of the type-hashes for offline signature generation.\r\n *\r\n * This contract contains the signatures and documentation for all publicly-implemented functions in the DMM token.\r\n */\r\ninterface IDmmToken {\r\n\r\n    /*****************\r\n     * Events\r\n     */\r\n\r\n    event Mint(address indexed minter, address indexed recipient, uint amount);\r\n    event Redeem(address indexed redeemer, address indexed recipient, uint amount);\r\n    event FeeTransfer(address indexed owner, address indexed recipient, uint amount);\r\n\r\n    event TotalSupplyIncreased(uint oldTotalSupply, uint newTotalSupply);\r\n    event TotalSupplyDecreased(uint oldTotalSupply, uint newTotalSupply);\r\n\r\n    event OffChainRequestValidated(address indexed owner, address indexed feeRecipient, uint nonce, uint expiry, uint feeAmount);\r\n\r\n    /*****************\r\n     * Functions\r\n     */\r\n\r\n    /**\r\n     * @dev The controller that deployed this parent\r\n     */\r\n    function controller() external view returns (IDmmController);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @return  The min amount that can be minted in a single transaction. This amount corresponds with the number of\r\n     *          decimals that this token has.\r\n     */\r\n    function minMintAmount() external view returns (uint);\r\n\r\n    /**\r\n     * @return  The min amount that can be redeemed from DMM to underlying in a single transaction. This amount\r\n     *          corresponds with the number of decimals that this token has.\r\n     */\r\n    function minRedeemAmount() external view returns (uint);\r\n\r\n    /**\r\n      * @dev The amount of DMM that is in circulation (outside of this contract)\r\n      */\r\n    function activeSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Attempts to add `amount` to the total supply by issuing the tokens to this contract. This call fires a\r\n     *      Transfer event from the 0x0 address to this contract.\r\n     */\r\n    function increaseTotalSupply(uint amount) external;\r\n\r\n    /**\r\n     * @dev Attempts to remove `amount` from the total supply by destroying those tokens that are held in this\r\n     *      contract. This call reverts with TOO_MUCH_ACTIVE_SUPPLY if `amount` is not held in this contract.\r\n     */\r\n    function decreaseTotalSupply(uint amount) external;\r\n\r\n    /**\r\n     * @dev An admin function that lets the ecosystem's organizers deposit the underlying token around which this DMMA\r\n     *      wraps to this contract. This is used to replenish liquidity and after interest payouts are made from the\r\n     *      real-world assets.\r\n     */\r\n    function depositUnderlying(uint underlyingAmount) external returns (bool);\r\n\r\n    /**\r\n     * @dev An admin function that lets the ecosystem's organizers withdraw the underlying token around which this DMMA\r\n     *      wraps from this contract. This is used to withdraw deposited tokens, to be allocated to real-world assets\r\n     *      that produce income streams and can cover interest payments.\r\n     */\r\n    function withdrawUnderlying(uint underlyingAmount) external returns (bool);\r\n\r\n    /**\r\n      * @dev The timestamp at which the exchange rate was last updated.\r\n      */\r\n    function exchangeRateLastUpdatedTimestamp() external view returns (uint);\r\n\r\n    /**\r\n      * @dev The timestamp at which the exchange rate was last updated.\r\n      */\r\n    function exchangeRateLastUpdatedBlockNumber() external view returns (uint);\r\n\r\n    /**\r\n     * @dev The exchange rate from underlying to DMM. Invert this number to go from DMM to underlying. This number\r\n     *      has 18 decimals.\r\n     */\r\n    function getCurrentExchangeRate() external view returns (uint);\r\n\r\n    /**\r\n     * @dev The current nonce of the provided `owner`. This `owner` should be the signer for any gasless transactions.\r\n     */\r\n    function nonceOf(address owner) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers the token around which this DMMA wraps from msg.sender to the DMMA contract. Then, sends the\r\n     *      corresponding amount of DMM to the msg.sender. Note, this call reverts with INSUFFICIENT_DMM_LIQUIDITY if\r\n     *      there is not enough DMM available to be minted.\r\n     *\r\n     * @param amount The amount of underlying to send to this DMMA for conversion to DMM.\r\n     * @return The amount of DMM minted.\r\n     */\r\n    function mint(uint amount) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers the token around which this DMMA wraps from sender to the DMMA contract. Then, sends the\r\n     *      corresponding amount of DMM to recipient. Note, an allowance must be set for sender for the underlying\r\n     *      token that is at least of size `amount` / `exchangeRate`. This call reverts with INSUFFICIENT_DMM_LIQUIDITY\r\n     *      if there is not enough DMM available to be minted. See #MINT_TYPE_HASH. This function gives the `owner` the\r\n     *      illusion of committing a gasless transaction, allowing a relayer to broadcast the transaction and\r\n     *      potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param recipient     The address that will receive the newly-minted DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of underlying that should be minted by `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee. Must be <= `amount`.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return  The amount of DMM minted, minus the fees paid. To get the total amount minted, add the `feeAmount` to\r\n     *          the returned amount from this function call.\r\n     */\r\n    function mintFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers DMM from msg.sender to this DMMA contract. Then, sends the corresponding amount of token around\r\n     *      which this DMMA wraps to the msg.sender. Note, this call reverts with INSUFFICIENT_UNDERLYING_LIQUIDITY if\r\n     *      there is not enough DMM available to be redeemed.\r\n     *\r\n     * @param amount    The amount of DMM to be transferred from msg.sender to this DMMA.\r\n     * @return          The amount of underlying redeemed.\r\n     */\r\n    function redeem(uint amount) external returns (uint);\r\n\r\n    /**\r\n     * @dev Transfers DMM from `owner` to the DMMA contract. Then, sends the corresponding amount of token around which\r\n     *      this DMMA wraps to `recipient`. Note, an allowance must be set for sender for the underlying\r\n     *      token that is at least of size `amount`. This call reverts with INSUFFICIENT_UNDERLYING_LIQUIDITY\r\n     *      if there is not enough underlying available to be redeemed. See #REDEEM_TYPE_HASH. This function gives the\r\n     *      `owner` the illusion of committing a gasless transaction, allowing a relayer to broadcast the transaction\r\n     *      and potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param recipient     The address that will receive the newly-redeemed DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of DMM that should be redeemed for `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee. Must be <= `amount`\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return  The amount of underlying redeemed.\r\n     */\r\n    function redeemFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint);\r\n\r\n    /**\r\n     * @dev Sets an allowance for owner with spender using an offline-generated signature. This function allows a\r\n     *      relayer to send the transaction, giving the owner the illusion of committing a gasless transaction. See\r\n     *      #PERMIT_TYPEHASH.\r\n     *\r\n     * @param owner         The user that signed the off-chain message.\r\n     * @param spender       The contract/wallet that can spend DMM tokens on behalf of owner.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param allowed       True if the spender can spend funds on behalf of owner or false to revoke this privilege.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint nonce,\r\n        uint expiry,\r\n        bool allowed,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers DMM from the `owner` to `recipient` using an offline-generated signature. This function allows a\r\n     *      relayer to send the transaction, giving the owner the illusion of committing a gasless transaction. See\r\n     *      #TRANSFER_TYPEHASH. This function gives the `owner` the illusion of committing a gasless transaction,\r\n     *      allowing a relayer to broadcast the transaction and potentially collect a fee for doing so.\r\n     *\r\n     * @param owner         The user that signed the off-chain message and originator of the transfer.\r\n     * @param recipient     The address that will receive the transferred DMM tokens.\r\n     * @param nonce         An auto-incrementing integer that prevents replay attacks. See #nonceOf(address) to get the\r\n     *                      owner's current nonce.\r\n     * @param expiry        The timestamp, in unix seconds, at which the signed off-chain message expires. A value of 0\r\n     *                      means there is no expiration.\r\n     * @param amount        The amount of DMM that should be transferred from `owner` and sent to `recipient`.\r\n     * @param feeAmount     The amount of DMM to be sent to feeRecipient for sending this transaction on behalf of\r\n     *                      owner. Can be 0, which means the user won't be charged a fee.\r\n     * @param feeRecipient  The address that should receive the fee. A value of 0x0 will send the fees to `msg.sender`.\r\n     *                      Note, no fees are sent if the feeAmount is 0, regardless of what feeRecipient is.\r\n     * @param v             The ECDSA V parameter.\r\n     * @param r             The ECDSA R parameter.\r\n     * @param s             The ECDSA S parameter.\r\n     * @return              True if the transfer was successful or false if it failed.\r\n     */\r\n    function transferFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n}\r\n\r\n// File: contracts/libs/DmmTokenLibrary.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\nlibrary DmmTokenLibrary {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    /*****************\r\n     * Structs\r\n     */\r\n\r\n    struct Storage {\r\n        uint exchangeRate;\r\n        uint exchangeRateLastUpdatedTimestamp;\r\n        uint exchangeRateLastUpdatedBlockNumber;\r\n        mapping(address => uint) nonces;\r\n    }\r\n\r\n    /*****************\r\n     * Events\r\n     */\r\n\r\n    event Mint(address indexed minter, address indexed recipient, uint amount);\r\n    event Redeem(address indexed redeemer, address indexed recipient, uint amount);\r\n    event FeeTransfer(address indexed owner, address indexed recipient, uint amount);\r\n\r\n    event OffChainRequestValidated(address indexed owner, address indexed feeRecipient, uint nonce, uint expiry, uint feeAmount);\r\n\r\n    /*****************\r\n     * Public Constants\r\n     */\r\n\r\n    uint public constant INTEREST_RATE_BASE = 1e18;\r\n    uint public constant SECONDS_IN_YEAR = 31536000; // 60 * 60 * 24 * 365\r\n\r\n    /**********************\r\n     * Public Functions\r\n     */\r\n\r\n    function amountToUnderlying(uint amount, uint exchangeRate, uint exchangeRateBaseRate) internal pure returns (uint) {\r\n        return (amount.mul(exchangeRate)).div(exchangeRateBaseRate);\r\n    }\r\n\r\n    function underlyingToAmount(uint underlyingAmount, uint exchangeRate, uint exchangeRateBaseRate) internal pure returns (uint) {\r\n        return (underlyingAmount.mul(exchangeRateBaseRate)).div(exchangeRate);\r\n    }\r\n\r\n    function accrueInterest(uint exchangeRate, uint interestRate, uint _seconds) internal pure returns (uint) {\r\n        uint interestAccrued = INTEREST_RATE_BASE.add(((interestRate.mul(_seconds)).div(SECONDS_IN_YEAR)));\r\n        return (exchangeRate.mul(interestAccrued)).div(INTEREST_RATE_BASE);\r\n    }\r\n\r\n    /***************************\r\n     * Internal User Functions\r\n     */\r\n\r\n    function getCurrentExchangeRate(Storage storage _storage, uint interestRate) internal view returns (uint) {\r\n        if (_storage.exchangeRateLastUpdatedTimestamp >= block.timestamp) {\r\n            // The exchange rate has not changed yet\r\n            return _storage.exchangeRate;\r\n        } else {\r\n            uint diffInSeconds = block.timestamp.sub(_storage.exchangeRateLastUpdatedTimestamp, \"INVALID_BLOCK_TIMESTAMP\");\r\n            return accrueInterest(_storage.exchangeRate, interestRate, diffInSeconds);\r\n        }\r\n    }\r\n\r\n    function updateExchangeRateIfNecessaryAndGet(IDmmToken token, Storage storage _storage) internal returns (uint) {\r\n        uint previousExchangeRate = _storage.exchangeRate;\r\n        uint dmmTokenInterestRate = token.controller().getInterestRateByDmmTokenAddress(address(token));\r\n        uint currentExchangeRate = getCurrentExchangeRate(_storage, dmmTokenInterestRate);\r\n        if (currentExchangeRate != previousExchangeRate) {\r\n            _storage.exchangeRateLastUpdatedTimestamp = block.timestamp;\r\n            _storage.exchangeRateLastUpdatedBlockNumber = block.number;\r\n            _storage.exchangeRate = currentExchangeRate;\r\n            return currentExchangeRate;\r\n        } else {\r\n            return currentExchangeRate;\r\n        }\r\n    }\r\n\r\n    function validateOffChainMint(\r\n        Storage storage _storage,\r\n        bytes32 domainSeparator,\r\n        bytes32 typeHash,\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                keccak256(abi.encode(typeHash, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient))\r\n            )\r\n        );\r\n\r\n        require(owner != address(0), \"CANNOT_MINT_FROM_ZERO_ADDRESS\");\r\n        require(recipient != address(0), \"CANNOT_MINT_TO_ZERO_ADDRESS\");\r\n        validateOffChainRequest(_storage, digest, owner, nonce, expiry, feeAmount, feeRecipient, v, r, s);\r\n    }\r\n\r\n    function validateOffChainRedeem(\r\n        Storage storage _storage,\r\n        bytes32 domainSeparator,\r\n        bytes32 typeHash,\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                keccak256(abi.encode(typeHash, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient))\r\n            )\r\n        );\r\n\r\n        require(owner != address(0), \"CANNOT_REDEEM_FROM_ZERO_ADDRESS\");\r\n        require(recipient != address(0), \"CANNOT_REDEEM_TO_ZERO_ADDRESS\");\r\n        validateOffChainRequest(_storage, digest, owner, nonce, expiry, feeAmount, feeRecipient, v, r, s);\r\n    }\r\n\r\n    function validateOffChainPermit(\r\n        Storage storage _storage,\r\n        bytes32 domainSeparator,\r\n        bytes32 typeHash,\r\n        address owner,\r\n        address spender,\r\n        uint nonce,\r\n        uint expiry,\r\n        bool allowed,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                keccak256(abi.encode(typeHash, owner, spender, nonce, expiry, allowed, feeAmount, feeRecipient))\r\n            )\r\n        );\r\n\r\n        require(owner != address(0), \"CANNOT_APPROVE_FROM_ZERO_ADDRESS\");\r\n        require(spender != address(0), \"CANNOT_APPROVE_TO_ZERO_ADDRESS\");\r\n        validateOffChainRequest(_storage, digest, owner, nonce, expiry, feeAmount, feeRecipient, v, r, s);\r\n    }\r\n\r\n    function validateOffChainTransfer(\r\n        Storage storage _storage,\r\n        bytes32 domainSeparator,\r\n        bytes32 typeHash,\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                keccak256(abi.encode(typeHash, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient))\r\n            )\r\n        );\r\n\r\n        require(owner != address(0x0), \"CANNOT_TRANSFER_FROM_ZERO_ADDRESS\");\r\n        require(recipient != address(0x0), \"CANNOT_TRANSFER_TO_ZERO_ADDRESS\");\r\n        validateOffChainRequest(_storage, digest, owner, nonce, expiry, feeAmount, feeRecipient, v, r, s);\r\n    }\r\n\r\n    /***************************\r\n     * Internal Admin Functions\r\n     */\r\n\r\n    function _depositUnderlying(IDmmToken token, address sender, uint underlyingAmount) internal returns (bool) {\r\n        IERC20 underlyingToken = IERC20(token.controller().getUnderlyingTokenForDmm(address(token)));\r\n        underlyingToken.safeTransferFrom(sender, address(token), underlyingAmount);\r\n        return true;\r\n    }\r\n\r\n    function _withdrawUnderlying(IDmmToken token, address sender, uint underlyingAmount) internal returns (bool) {\r\n        IERC20 underlyingToken = IERC20(token.controller().getUnderlyingTokenForDmm(address(token)));\r\n        underlyingToken.safeTransfer(sender, underlyingAmount);\r\n        return true;\r\n    }\r\n\r\n    /***************************\r\n     * Private Functions\r\n     */\r\n\r\n    /**\r\n     * @dev throws if the validation fails\r\n     */\r\n    function validateOffChainRequest(\r\n        Storage storage _storage,\r\n        bytes32 digest,\r\n        address owner,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) private {\r\n        uint expectedNonce = _storage.nonces[owner];\r\n\r\n        require(owner == ecrecover(digest, v, r, s), \"INVALID_SIGNATURE\");\r\n        require(expiry == 0 || now <= expiry, \"REQUEST_EXPIRED\");\r\n        require(nonce == expectedNonce, \"INVALID_NONCE\");\r\n        if (feeAmount > 0) {\r\n            require(feeRecipient != address(0x0), \"INVALID_FEE_ADDRESS\");\r\n        }\r\n\r\n        emit OffChainRequestValidated(\r\n            owner,\r\n            feeRecipient,\r\n            expectedNonce,\r\n            expiry,\r\n            feeAmount\r\n        );\r\n        _storage.nonces[owner] += 1;\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IOwnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IOwnable {\r\n\r\n    function owner() external view returns (address);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IPausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IPausable {\r\n\r\n    function paused() external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/utils/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, ReentrancyGuard, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    constructor() public {}\r\n\r\n    /********************\r\n     * Modifiers\r\n     */\r\n\r\n    modifier whenNotPaused() {\r\n        require(!IPausable(pausable()).paused(), \"ECOSYSTEM_PAUSED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if `account` is blacklisted\r\n     *\r\n     * @param account The address to check\r\n    */\r\n    modifier notBlacklisted(address account) {\r\n        require(Blacklistable(blacklistable()).isBlacklisted(account) == false, \"BLACKLISTED\");\r\n        _;\r\n    }\r\n\r\n    /********************\r\n     * Public Functions\r\n     */\r\n\r\n    function pausable() public view returns (address);\r\n\r\n    function blacklistable() public view returns (Blacklistable);\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n    nonReentrant\r\n    public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    )\r\n    public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n    nonReentrant\r\n    public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"TRANSFER_EXCEEDS_ALLOWANCE\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n    notBlacklisted(_msgSender())\r\n    notBlacklisted(spender)\r\n    public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n    notBlacklisted(_msgSender())\r\n    notBlacklisted(spender)\r\n    public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ALLOWANCE_BELOW_ZERO\"));\r\n        return true;\r\n    }\r\n\r\n    /**************************\r\n     * Internal Functions\r\n     */\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"CANNOT_TRANSFER_FROM_ZERO_ADDRESS\");\r\n        require(recipient != address(0), \"CANNOT_TRANSFER_TO_ZERO_ADDRESS\");\r\n\r\n        blacklistable().checkNotBlacklisted(_msgSender());\r\n        blacklistable().checkNotBlacklisted(sender);\r\n        blacklistable().checkNotBlacklisted(recipient);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"TRANSFER_EXCEEDS_BALANCE\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"CANNOT_APPROVE_FROM_ZERO_ADDRESS\");\r\n        require(spender != address(0), \"CANNOT_APPROVE_TO_ZERO_ADDRESS\");\r\n\r\n        blacklistable().checkNotBlacklisted(_msgSender());\r\n        blacklistable().checkNotBlacklisted(owner);\r\n        blacklistable().checkNotBlacklisted(spender);\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     */\r\n    function mintToThisContract(uint256 amount) internal {\r\n        address account = address(this);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `address(this)` must have at least `amount` tokens.\r\n    */\r\n    function burnFromThisContract(uint256 amount) internal {\r\n        address account = address(this);\r\n        _balances[account] = _balances[account].sub(amount, \"BURN_EXCEEDS_BALANCE\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/impl/DmmToken.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DmmToken is ERC20, IDmmToken, CommonConstants {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    using DmmTokenLibrary for *;\r\n\r\n    /***************************\r\n     * Public Constant Fields\r\n     */\r\n\r\n    // bytes32 public constant PERMIT_TYPE_HASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed,uint256 feeAmount,address feeRecipient)\");\r\n    bytes32 public constant PERMIT_TYPE_HASH = 0x22fa96956322098f6fd394e06f1b7e0f6930565923f9ad3d20802e9a2eb58fb1;\r\n\r\n    // bytes32 public constant TRANSFER_TYPE_HASH = keccak256(\"Transfer(address owner,address recipient,uint256 nonce,uint256 expiry,uint amount,uint256 feeAmount,address feeRecipient)\");\r\n    bytes32 public constant TRANSFER_TYPE_HASH = 0x25166116e36b48414096856a22ea40032193e38f65136c76738e306be6abd587;\r\n\r\n    // bytes32 public constant MINT_TYPE_HASH = keccak256(\"Mint(address owner,address recipient,uint256 nonce,uint256 expiry,uint256 amount,uint256 feeAmount,address feeRecipient)\");\r\n    bytes32 public constant MINT_TYPE_HASH = 0x82e81310e0eab12a427992778464769ef831d801011489bc90ed3ef82f2cb3d1;\r\n\r\n    // bytes32 public constant REDEEM_TYPE_HASH = keccak256(\"Redeem(address owner,address recipient,uint256 nonce,uint256 expiry,uint256 amount,uint256 feeAmount,address feeRecipient)\");\r\n    bytes32 public constant REDEEM_TYPE_HASH = 0x24e7162538bf7f86bd3180c9ee9f60f06db3bd66eb344ea3b00f69b84af5ddcf;\r\n\r\n    /*****************\r\n     * Public Fields\r\n     */\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint public minMintAmount;\r\n    uint public minRedeemAmount;\r\n\r\n    IDmmController public controller;\r\n    bytes32 public domainSeparator;\r\n\r\n    /*****************\r\n     * Private Fields\r\n     */\r\n\r\n    DmmTokenLibrary.Storage private _storage;\r\n\r\n    constructor(\r\n        string memory _symbol,\r\n        string memory _name,\r\n        uint8 _decimals,\r\n        uint _minMintAmount,\r\n        uint _minRedeemAmount,\r\n        uint _totalSupply,\r\n        address _controller\r\n    ) public {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n        minMintAmount = _minMintAmount;\r\n        minRedeemAmount = _minRedeemAmount;\r\n        controller = IDmmController(_controller);\r\n\r\n        uint256 chainId;\r\n        assembly {chainId := chainid()}\r\n\r\n        domainSeparator = keccak256(abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(/* version */ \"1\")),\r\n                chainId,\r\n                address(this)\r\n            ));\r\n\r\n        _storage = DmmTokenLibrary.Storage({\r\n            exchangeRate : EXCHANGE_RATE_BASE_RATE,\r\n            exchangeRateLastUpdatedTimestamp : block.timestamp,\r\n            exchangeRateLastUpdatedBlockNumber : block.number\r\n            });\r\n\r\n        mintToThisContract(_totalSupply);\r\n    }\r\n\r\n    /********************\r\n     * Modifiers\r\n     */\r\n\r\n    modifier isNotDisabled {\r\n        require(controller.isMarketEnabledByDmmTokenAddress(address(this)), \"MARKET_DISABLED\");\r\n        _;\r\n    }\r\n\r\n    /********************\r\n     * Public Functions\r\n     */\r\n\r\n    function() payable external {\r\n        revert(\"NO_DEFAULT_FUNCTION\");\r\n    }\r\n\r\n    function pausable() public view returns (address) {\r\n        return address(controller);\r\n    }\r\n\r\n    function blacklistable() public view returns (Blacklistable) {\r\n        return controller.blacklistable();\r\n    }\r\n\r\n    function activeSupply() public view returns (uint) {\r\n        return totalSupply().sub(balanceOf(address(this)));\r\n    }\r\n\r\n    function increaseTotalSupply(uint amount) public onlyOwner whenNotPaused {\r\n        uint oldTotalSupply = _totalSupply;\r\n        mintToThisContract(amount);\r\n        emit TotalSupplyIncreased(oldTotalSupply, _totalSupply);\r\n    }\r\n\r\n    function decreaseTotalSupply(uint amount) public onlyOwner whenNotPaused {\r\n        // If there's underflow, throw the specified error\r\n        require(balanceOf(address(this)) >= amount, \"TOO_MUCH_ACTIVE_SUPPLY\");\r\n        uint oldTotalSupply = _totalSupply;\r\n        burnFromThisContract(amount);\r\n        emit TotalSupplyDecreased(oldTotalSupply, _totalSupply);\r\n    }\r\n\r\n    function depositUnderlying(uint underlyingAmount) onlyOwner whenNotPaused public returns (bool) {\r\n        return this._depositUnderlying(_msgSender(), underlyingAmount);\r\n    }\r\n\r\n    function withdrawUnderlying(uint underlyingAmount) onlyOwner whenNotPaused public returns (bool) {\r\n        return this._withdrawUnderlying(_msgSender(), underlyingAmount);\r\n    }\r\n\r\n    function getCurrentExchangeRate() public view returns (uint) {\r\n        return _storage.getCurrentExchangeRate(controller.getInterestRateByDmmTokenAddress(address(this)));\r\n    }\r\n\r\n    function exchangeRateLastUpdatedTimestamp() public view returns (uint) {\r\n        return _storage.exchangeRateLastUpdatedTimestamp;\r\n    }\r\n\r\n    function exchangeRateLastUpdatedBlockNumber() public view returns (uint) {\r\n        return _storage.exchangeRateLastUpdatedBlockNumber;\r\n    }\r\n\r\n    function nonceOf(address owner) public view returns (uint) {\r\n        return _storage.nonces[owner];\r\n    }\r\n\r\n    function mint(\r\n        uint underlyingAmount\r\n    )\r\n    whenNotPaused\r\n    nonReentrant\r\n    isNotDisabled\r\n    public returns (uint) {\r\n        return _mint(_msgSender(), _msgSender(), underlyingAmount);\r\n    }\r\n\r\n    function transferUnderlyingIn(address owner, uint underlyingAmount) internal {\r\n        address underlyingToken = controller.getUnderlyingTokenForDmm(address(this));\r\n        IERC20(underlyingToken).safeTransferFrom(owner, address(this), underlyingAmount);\r\n    }\r\n\r\n    function transferUnderlyingOut(address recipient, uint underlyingAmount) internal {\r\n        address underlyingToken = controller.getUnderlyingTokenForDmm(address(this));\r\n        IERC20(underlyingToken).transfer(recipient, underlyingAmount);\r\n    }\r\n\r\n    function mintFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint underlyingAmount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    whenNotPaused\r\n    nonReentrant\r\n    isNotDisabled\r\n    public returns (uint) {\r\n        return _mintFromGaslessRequest(\r\n            owner,\r\n            recipient,\r\n            nonce,\r\n            expiry,\r\n            underlyingAmount,\r\n            feeAmount,\r\n            feeRecipient,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    function redeem(\r\n        uint amount\r\n    )\r\n    whenNotPaused\r\n    nonReentrant\r\n    public returns (uint) {\r\n        return _redeem(_msgSender(), _msgSender(), amount, /* shouldUseAllowance */ false);\r\n    }\r\n\r\n    function redeemFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    whenNotPaused\r\n    nonReentrant\r\n    public returns (uint) {\r\n        return _redeemFromGaslessRequest(\r\n            owner,\r\n            recipient,\r\n            nonce,\r\n            expiry,\r\n            amount,\r\n            feeAmount,\r\n            feeRecipient,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint nonce,\r\n        uint expiry,\r\n        bool allowed,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    whenNotPaused\r\n    nonReentrant\r\n    public {\r\n        checkGaslessBlacklist(feeRecipient);\r\n\r\n        _storage.validateOffChainPermit(domainSeparator, PERMIT_TYPE_HASH, owner, spender, nonce, expiry, allowed, feeAmount, feeRecipient, v, r, s);\r\n\r\n        uint wad = allowed ? uint(- 1) : 0;\r\n        _approve(owner, spender, wad);\r\n\r\n        doFeeTransferForDmmIfNecessary(owner, feeRecipient, feeAmount);\r\n    }\r\n\r\n    function transferFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    whenNotPaused\r\n    nonReentrant\r\n    public {\r\n        checkGaslessBlacklist(feeRecipient);\r\n\r\n        _storage.validateOffChainTransfer(domainSeparator, TRANSFER_TYPE_HASH, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient, v, r, s);\r\n\r\n        uint amountLessFee = amount.sub(feeAmount, \"FEE_TOO_LARGE\");\r\n        _transfer(owner, recipient, amountLessFee);\r\n        doFeeTransferForDmmIfNecessary(owner, feeRecipient, feeAmount);\r\n    }\r\n\r\n    /************************************\r\n     * Private & Internal Functions\r\n     */\r\n\r\n    function _mint(address owner, address recipient, uint underlyingAmount) internal returns (uint) {\r\n        // No need to check if recipient or msgSender are blacklisted because `_transfer` checks it.\r\n        blacklistable().checkNotBlacklisted(owner);\r\n\r\n        uint currentExchangeRate = this.updateExchangeRateIfNecessaryAndGet(_storage);\r\n        uint amount = underlyingAmount.underlyingToAmount(currentExchangeRate, EXCHANGE_RATE_BASE_RATE);\r\n\r\n        require(balanceOf(address(this)) >= amount, \"INSUFFICIENT_DMM_LIQUIDITY\");\r\n\r\n        // Transfer underlying to this contract\r\n        transferUnderlyingIn(owner, underlyingAmount);\r\n\r\n        // Transfer DMM to the recipient\r\n        _transfer(address(this), recipient, amount);\r\n\r\n        emit Mint(owner, recipient, amount);\r\n\r\n        require(amount >= minMintAmount, \"INSUFFICIENT_MINT_AMOUNT\");\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Note, right now all invocations of this function set `shouldUseAllowance` to `false`. Reason being, all\r\n     *      calls are either done via explicit off-chain signatures (and therefore the owner and recipient are explicit;\r\n     *      anyone can call the function), OR the msgSender is both the owner and recipient, in which case no allowance\r\n     *      should be needed to redeem funds if the user is the spender of the same user's funds.\r\n     */\r\n    function _redeem(address owner, address recipient, uint amount, bool shouldUseAllowance) internal returns (uint) {\r\n        // No need to check owner or msgSender for blacklist because `_transfer` covers them.\r\n        blacklistable().checkNotBlacklisted(recipient);\r\n\r\n        uint currentExchangeRate = this.updateExchangeRateIfNecessaryAndGet(_storage);\r\n        uint underlyingAmount = amount.amountToUnderlying(currentExchangeRate, EXCHANGE_RATE_BASE_RATE);\r\n\r\n        IERC20 underlyingToken = IERC20(this.controller().getUnderlyingTokenForDmm(address(this)));\r\n        require(underlyingToken.balanceOf(address(this)) >= underlyingAmount, \"INSUFFICIENT_UNDERLYING_LIQUIDITY\");\r\n\r\n        if (shouldUseAllowance) {\r\n            uint newAllowance = allowance(owner, _msgSender()).sub(amount, \"INSUFFICIENT_ALLOWANCE\");\r\n            _approve(owner, _msgSender(), newAllowance);\r\n        }\r\n        _transfer(owner, address(this), amount);\r\n\r\n        // Transfer underlying to the recipient from this contract\r\n        transferUnderlyingOut(recipient, underlyingAmount);\r\n\r\n        emit Redeem(owner, recipient, amount);\r\n\r\n        require(amount >= minRedeemAmount, \"INSUFFICIENT_REDEEM_AMOUNT\");\r\n\r\n        return underlyingAmount;\r\n    }\r\n\r\n    function _mintFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint underlyingAmount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal returns (uint) {\r\n        checkGaslessBlacklist(feeRecipient);\r\n\r\n        // To avoid stack too deep issues, splitting the call into 2 parts is essential.\r\n        _storage.validateOffChainMint(domainSeparator, MINT_TYPE_HASH, owner, recipient, nonce, expiry, underlyingAmount, feeAmount, feeRecipient, v, r, s);\r\n\r\n        // Initially, we mint to this contract so we can send handle the fees.\r\n        // We don't delegate the call for transferring the underlying in, because gasless requests are designed to\r\n        // allow any relayer to broadcast the user's cryptographically-secure message.\r\n        uint amount = _mint(owner, address(this), underlyingAmount);\r\n        require(amount >= feeAmount, \"FEE_TOO_LARGE\");\r\n\r\n        uint amountLessFee = amount.sub(feeAmount);\r\n        require(amountLessFee >= minMintAmount, \"INSUFFICIENT_MINT_AMOUNT\");\r\n\r\n        _transfer(address(this), recipient, amountLessFee);\r\n\r\n        doFeeTransferForDmmIfNecessary(address(this), feeRecipient, feeAmount);\r\n\r\n        return amountLessFee;\r\n    }\r\n\r\n    function _redeemFromGaslessRequest(\r\n        address owner,\r\n        address recipient,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint amount,\r\n        uint feeAmount,\r\n        address feeRecipient,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal returns (uint) {\r\n        checkGaslessBlacklist(feeRecipient);\r\n\r\n        // To avoid stack too deep issues, splitting the call into 2 parts is essential.\r\n        _storage.validateOffChainRedeem(domainSeparator, REDEEM_TYPE_HASH, owner, recipient, nonce, expiry, amount, feeAmount, feeRecipient, v, r, s);\r\n\r\n        uint amountLessFee = amount.sub(feeAmount, \"FEE_TOO_LARGE\");\r\n        require(amountLessFee >= minRedeemAmount, \"INSUFFICIENT_REDEEM_AMOUNT\");\r\n\r\n        uint underlyingAmount = _redeem(owner, recipient, amountLessFee, /* shouldUseAllowance */ false);\r\n        doFeeTransferForDmmIfNecessary(owner, feeRecipient, feeAmount);\r\n\r\n        return underlyingAmount;\r\n    }\r\n\r\n    function checkGaslessBlacklist(address feeRecipient) private view {\r\n        if (feeRecipient != address(0x0)) {\r\n            blacklistable().checkNotBlacklisted(feeRecipient);\r\n        }\r\n    }\r\n\r\n    function doFeeTransferForDmmIfNecessary(address owner, address feeRecipient, uint feeAmount) private {\r\n        if (feeAmount > 0) {\r\n            require(balanceOf(owner) >= feeAmount, \"INSUFFICIENT_BALANCE_FOR_FEE\");\r\n            _transfer(owner, feeRecipient, feeAmount);\r\n            emit FeeTransfer(owner, feeRecipient, feeAmount);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRedeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"OffChainRequestValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"TotalSupplyDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"TotalSupplyIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_RATE_BASE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REDEEM_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSFER_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blacklistable\",\"outputs\":[{\"internalType\":\"contract Blacklistable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IDmmController\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"depositUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateLastUpdatedBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateLastUpdatedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRedeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mintFromGaslessRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"redeemFromGaslessRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferFromGaslessRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DmmToken", "CompilerVersion": "v0.5.13+commit.5b0b510c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000048c273950000000000000000000000000004cb120dd1d33c9a3de8bc15620c7cd43418d77e200000000000000000000000000000000000000000000000000000000000000056d555344430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009444d4d3a20555344430000000000000000000000000000000000000000000000", "EVMVersion": "istanbul", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://07307dcde4ef0149f21ecb1293b870dce5c589056296a1481a2d14408f685e55"}