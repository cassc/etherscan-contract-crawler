{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC20Interface {\r\n    function mint(address usr, uint wad) external;\r\n    function burnFrom(address src, uint wad) external;\r\n    function balanceOf(address usr) external returns (uint);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n}\r\n\r\ncontract TokenSwap {\r\n  \r\n    // Exchange ratios for each token\r\n    uint256 public ratioSWSH;\r\n    uint256 public ratioRTC;\r\n    uint256 public ratioLIQLO;\r\n    uint256 public ratioSPECTRE;\r\n\r\n    // Destination address for input tokens\r\n    address public inputTokenDestination;\r\n    \r\n    ERC20Interface public SWSH;\r\n    ERC20Interface public RTC;\r\n    ERC20Interface public LIQLO;\r\n    ERC20Interface public SPECTRE;\r\n    ERC20Interface public PSHP;\r\n    \r\n    mapping (address => uint) public blocks;\r\n    mapping (address => bool) public owners;\r\n\r\n    // Constructor to initialize contract with token addresses and exchange ratios\r\n    constructor() {\r\n        owners[msg.sender] = true;\r\n        inputTokenDestination = msg.sender;\r\n        \r\n        ratioSWSH = 6171399053000000000;\r\n        ratioRTC = 8916187149000000000;\r\n        ratioLIQLO = 2670096288000000000;\r\n        ratioSPECTRE = 33913829810000000000;\r\n        \r\n        SWSH = ERC20Interface(0x3ac2AB91dDF57e2385089202Ca221C360CED0062);\r\n        RTC = ERC20Interface(0x7f9A00E03c2E53A3aF6031C17A150DBeDaAab3dC);\r\n        LIQLO = ERC20Interface(0x59AD6061A0be82155E7aCcE9F0C37Bf59F9c1e3C);\r\n        SPECTRE = ERC20Interface(0x441d91F7AAEe51C7AE8cAB84333D6383A8a8C175);\r\n        PSHP = ERC20Interface(0x88D59Ba796fDf639dEd3b5E720988D59fDb71Eb8);\r\n    }\r\n    \r\n    function control() internal returns (bool) {\r\n        require((msg.sender == tx.origin), \"Access denied\");\r\n        require((blocks[msg.sender] < block.number), \"Block used\");\r\n\r\n        blocks[msg.sender] = block.number;\r\n        return true;\r\n    }\r\n\r\n    // Swap function for exchanging input tokens for output token X\r\n    function swapTokens(uint256 amountSWSH, uint256 amountRTC, uint256 amountLIQLO, uint256 amountSPECTRE) public {\r\n        require(control());\r\n        \r\n        // Calculating the total output tokens with higher precision\r\n        uint256 totalOutputX = (amountSWSH * 10**18 / ratioSWSH) +\r\n                               (amountRTC * 10**18 / ratioRTC) +\r\n                               (amountLIQLO * 10**18 / ratioLIQLO) +\r\n                               (amountSPECTRE * 10**18 / ratioSPECTRE);\r\n\r\n        require(totalOutputX > 0 && PSHP.balanceOf(address(this)) >= totalOutputX, \"Insufficient token PSHP amount\");\r\n\r\n        // Transfer input tokens from the user to the destination address\r\n        if(amountSWSH > 0) {\r\n            require(SWSH.transferFrom(msg.sender, inputTokenDestination, amountSWSH), \"Transfer of token SWSH failed\");\r\n        }\r\n        if(amountRTC > 0) {\r\n            require(RTC.transferFrom(msg.sender, inputTokenDestination, amountRTC), \"Transfer of token RTC failed\");\r\n        }\r\n        if(amountLIQLO > 0) {\r\n            require(LIQLO.transferFrom(msg.sender, inputTokenDestination, amountLIQLO), \"Transfer of token LIQLO failed\");\r\n        }\r\n        if(amountSPECTRE > 0) {\r\n            require(SPECTRE.transferFrom(msg.sender, inputTokenDestination, amountSPECTRE), \"Transfer of token SPECTRE failed\");\r\n        }\r\n\r\n        // Transfer output tokens to the user\r\n        require(PSHP.transfer(msg.sender, totalOutputX), \"Transfer of token PSHP failed\");\r\n    }\r\n    \r\n    function depositTokenX(uint256 amount) public {\r\n        require(owners[msg.sender] == true);\r\n        require(PSHP.transferFrom(msg.sender, address(this), amount), \"Deposit of token PSHP failed\");\r\n    }\r\n    \r\n    function withdrawTokenX(uint256 amount) public {\r\n        require(owners[msg.sender] == true);\r\n        require(PSHP.transfer(msg.sender, amount), \"Withdrawal of token PSHP failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LIQLO\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PSHP\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RTC\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECTRE\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWSH\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokenX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputTokenDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioLIQLO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioRTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioSPECTRE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioSWSH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSWSH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRTC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLIQLO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSPECTRE\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenSwap", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19240bccf49b199e87fe4176d65886b0dcca9f1c94096348543f10af4a614ad3"}