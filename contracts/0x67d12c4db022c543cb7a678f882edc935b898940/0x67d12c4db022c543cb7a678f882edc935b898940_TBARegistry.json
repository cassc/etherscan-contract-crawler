{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TBARegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/utils/Create2.sol\\\";\\nimport \\\"./IERC6551Registry.sol\\\";\\n\\n/**\\n * @title TBARegistry\\n * @dev This contract implements the registry for Token Bound Accounts (TBA) as per the ERC-6551 standard.\\n * It facilitates the creation and management of accounts bound to non-fungible tokens (NFTs),\\n * enabling each NFT to operate as its own smart contract account.\\n * \\n * The contract leverages the Ethereum Create2 opcode for deploying smart contracts at specified addresses,\\n * allowing for predictable contract addresses and efficient user onboarding.\\n * \\n * Each created account is registered within the contract, mapping the account address to its corresponding\\n * NFT's contract address and token ID.\\n *\\n * The contract allows for the computation of account addresses prior to their actual creation,\\n * aiding in the planning and management of TBAs.\\n *\\n * @author Logan Brutsche\\n */\\ncontract TBARegistry is IERC6551Registry {\\n    error InitializationFailed();\\n\\n    struct TBA {\\n        address tokenContract;\\n        uint tokenId;\\n    }\\n    mapping (address => TBA) public registeredAccounts;\\n\\n    /**\\n     * @dev Creates a new account with a bound non-fungible token using the provided parameters and returns the created account's address.\\n     * @param _implementation Address of the TBA account implementation.\\n     * @param _chainId Chain ID on which the account is created.\\n     * @param _tokenContract Address of the NFT contract.\\n     * @param _tokenId ID of the token to be bound to the new account.\\n     * @param _salt A value to modify the resulting address.\\n     * @param initData Initialization data to be called on the new account.\\n     * @return The address of the created account.\\n     */\\n    function createAccount(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt,\\n        bytes calldata initData\\n    ) external returns (address) {\\n        bytes memory code = _creationCode(_implementation, _chainId, _tokenContract, _tokenId, _salt);\\n\\n        address _account = Create2.computeAddress(\\n            bytes32(_salt),\\n            keccak256(code)\\n        );\\n\\n        if (_account.code.length != 0) return _account;\\n\\n        _account = Create2.deploy(0, bytes32(_salt), code);\\n\\n        registeredAccounts[_account].tokenContract = _tokenContract;\\n        registeredAccounts[_account].tokenId = _tokenId;\\n\\n        if (initData.length != 0) {\\n            (bool success, ) = _account.call(initData);\\n            if (!success) revert InitializationFailed();\\n        }\\n\\n        emit AccountCreated(\\n            _account,\\n            _implementation,\\n            _chainId,\\n            _tokenContract,\\n            _tokenId,\\n            _salt\\n        );\\n\\n        return _account;\\n    }\\n\\n    /**\\n     * @dev Computes and returns the address of the account with the provided parameters without actually creating the account.\\n     * @param _implementation Address of the TBA account implementation.\\n     * @param _chainId Chain ID for which to compute the account address.\\n     * @param _tokenContract Address of the token contract.\\n     * @param _tokenId ID of the token for which to compute the account address.\\n     * @param _salt A value to modify the resulting address.\\n     * @return The address of the computed account.\\n     */\\n    function account(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt\\n    ) external view returns (address) {\\n        bytes32 bytecodeHash = keccak256(\\n            _creationCode(_implementation, _chainId, _tokenContract, _tokenId, _salt)\\n        );\\n\\n        return Create2.computeAddress(bytes32(_salt), bytecodeHash);\\n    }\\n\\n    /**\\n     * @dev Generates the creation code for an account with the provided parameters.\\n     * @param _implementation Address of the TBA account implementation.\\n     * @param _chainId Chain ID on which the account is created.\\n     * @param _tokenContract Address of the token contract.\\n     * @param _tokenId ID of the token to be bound to the new account.\\n     * @param _salt A value to modify the resulting creation code.\\n     * @return The creation code for the account.\\n     */\\n    function _creationCode(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                hex\\\"3d60ad80600a3d3981f3363d3d373d3d3d363d73\\\",\\n                _implementation,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                abi.encode(_salt, _chainId, _tokenContract, _tokenId)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/IERC6551Registry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry SHALL emit the AccountCreated event upon successful account creation\\n     */\\n    event AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId,\\n        uint256 salt\\n    );\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * If initData is not empty and account has not yet been created, calls account with\\n     * provided initData after creation.\\n     *\\n     * Emits AccountCreated event.\\n     *\\n     * @return the address of the account\\n     */\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token\\n     *\\n     * @return The computed address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"sstore2/=lib/sstore2/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"Create2EmptyBytecode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Create2FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"Create2InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TBARegistry", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}