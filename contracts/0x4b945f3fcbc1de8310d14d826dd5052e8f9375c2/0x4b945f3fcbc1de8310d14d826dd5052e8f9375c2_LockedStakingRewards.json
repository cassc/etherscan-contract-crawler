{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Staking/LockedStakingRewards.sol\": {\r\n      \"content\": \"//SPDX License Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n// We dont use Reentrancy Guard here because we only call the stakeToken contract which is assumed to be non-malicious\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ncontract LockedStakingRewards is Ownable {\\r\\n    IERC20 public constant stakeToken = IERC20(0x8765b1A0eb57ca49bE7EACD35b24A574D0203656);\\r\\n\\r\\n    uint256 public constant depositDuration = 7 days;\\r\\n    uint256 private constant basisPoints = 1e4;\\r\\n    \\r\\n    struct Pool {\\r\\n        uint256 tokenPerShareMultiplier;\\r\\n        bool isTerminated;\\r\\n        uint256 cycleDuration;\\r\\n        uint256 startOfDeposit;\\r\\n        uint256 tokenPerShare;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Pool) public pool;\\r\\n\\r\\n    mapping(address => mapping(uint256 => uint256)) private _shares;\\r\\n\\r\\n    constructor(Pool[] memory _initialPools) {\\r\\n        for (uint256 i = 0; i < _initialPools.length; i++) {\\r\\n            createPool(i, _initialPools[i]);\\r\\n        }\\r\\n        transferOwnership(0x2a9Da28bCbF97A8C008Fd211f5127b860613922D);\\r\\n    }\\r\\n\\r\\n        ///////// Transformative functions ///////////\\r\\n    function receiveApproval\\r\\n    (\\r\\n        address _sender,\\r\\n        uint256 _amount,\\r\\n        address _stakeToken,\\r\\n        bytes memory data\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        uint256 _pool;\\r\\n        assembly {\\r\\n            _pool := mload(add(data, 0x20))\\r\\n        }\\r\\n        require(isTransferPhase(_pool), \\\"pool is locked currently\\\");\\r\\n\\r\\n        require(stakeToken.transferFrom(_sender, address(this), _amount));\\r\\n        _shares[_sender][_pool] += _amount * basisPoints / pool[_pool].tokenPerShare;\\r\\n        emit Staked(_sender, _pool, _amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _sharesAmount, uint256 _pool) external {\\r\\n        require(isTransferPhase(_pool), \\\"pool is locked currently\\\");\\r\\n        require(_sharesAmount <= _shares[msg.sender][_pool], \\\"cannot withdraw more than balance\\\");\\r\\n\\r\\n        uint256 _tokenAmount = sharesToToken(_sharesAmount, _pool);\\r\\n        _shares[msg.sender][_pool] -= _sharesAmount;\\r\\n        require(stakeToken.transfer(msg.sender, _tokenAmount));\\r\\n        emit Unstaked(msg.sender, _pool, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    function updatePool(uint256 _pool) external {\\r\\n        require(block.timestamp > pool[_pool].startOfDeposit + depositDuration, \\\"can only update after depositDuration\\\");\\r\\n        require(!pool[_pool].isTerminated, \\\"can not terminated pools\\\");\\r\\n\\r\\n        pool[_pool].startOfDeposit += pool[_pool].cycleDuration;\\r\\n        pool[_pool].tokenPerShare = pool[_pool].tokenPerShare * pool[_pool].tokenPerShareMultiplier / basisPoints;\\r\\n        emit PoolUpdated(_pool, pool[_pool].startOfDeposit, pool[_pool].tokenPerShare);\\r\\n    }\\r\\n\\r\\n        ///////////// Restricted Access Functions /////////////\\r\\n\\r\\n    function updateTokenPerShareMultiplier(uint256 _pool, uint256 newTokenPerShareMultiplier) external onlyOwner {\\r\\n        require(isTransferPhase(_pool), \\\"pool only updateable during transfer phase\\\");\\r\\n        pool[_pool].tokenPerShareMultiplier = newTokenPerShareMultiplier;\\r\\n    }\\r\\n\\r\\n    function terminatePool(uint256 _pool) public onlyOwner {\\r\\n        pool[_pool].isTerminated = true;\\r\\n        emit PoolKilled(_pool);\\r\\n    }\\r\\n\\r\\n    function createPool(uint256 _pool, Pool memory pool_) public onlyOwner {\\r\\n        require(pool[_pool].cycleDuration == 0, \\\"cannot override an existing pool\\\");\\r\\n        pool[_pool] = pool_;\\r\\n        emit PoolUpdated(_pool, pool[_pool].startOfDeposit, pool[_pool].tokenPerShare);\\r\\n    }\\r\\n\\r\\n        ///////////// View Functions /////////////\\r\\n\\r\\n    function isTransferPhase(uint256 _pool) public view returns(bool) {\\r\\n        return(\\r\\n            (block.timestamp > pool[_pool].startOfDeposit &&\\r\\n            block.timestamp < pool[_pool].startOfDeposit + depositDuration) ||\\r\\n            pool[_pool].isTerminated\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getPoolInfo(uint256 _pool) public view returns(bool, uint256) {\\r\\n        return (isTransferPhase(_pool), pool[_pool].startOfDeposit);\\r\\n    }\\r\\n\\r\\n    function viewUserShares(address _user, uint256 _pool) public view returns(uint256) {\\r\\n        return _shares[_user][_pool];\\r\\n    }\\r\\n\\r\\n    function viewUserTokenAmount(address _user, uint256 _pool) public view returns(uint256) {\\r\\n        return viewUserShares(_user, _pool) * pool[_pool].tokenPerShare / basisPoints;\\r\\n    }\\r\\n\\r\\n    function sharesToToken(uint256 _sharesAmount, uint256 _pool) public view returns(uint256) {\\r\\n        return _sharesAmount * pool[_pool].tokenPerShare / basisPoints;\\r\\n    }\\r\\n\\r\\n    function tokenToShares(uint256 _tokenAmount, uint256 _pool) public view returns(uint256) {\\r\\n        return _tokenAmount * basisPoints / pool[_pool].tokenPerShare;\\r\\n    }\\r\\n\\r\\n    function getUserTokenAmountAfter(address _user, uint256 _pool) public view returns(uint256) {\\r\\n        if(block.timestamp > pool[_pool].startOfDeposit) {\\r\\n            return sharesToToken(_shares[_user][_pool], _pool) * pool[_pool].tokenPerShareMultiplier / basisPoints;\\r\\n        }\\r\\n        return sharesToToken(_shares[_user][_pool], _pool);\\r\\n    }\\r\\n\\r\\n\\r\\n        ///////////// Events /////////////\\r\\n    \\r\\n    event Staked(address indexed staker, uint256 indexed pool, uint256 amount);\\r\\n    event Unstaked(address indexed staker, uint256 indexed pool, uint256 amount);\\r\\n    event PoolUpdated(uint256 indexed pool, uint256 newDepositStart, uint256 newTokenPerShare);\\r\\n    event PoolKilled(uint256 indexed pool);\\r\\n\\r\\n        ///////////// SnapshotHelper /////////////\\r\\n    IERC20 constant private vest = IERC20(0x29Fb510fFC4dB425d6E2D22331aAb3F31C1F1771);\\r\\n\\r\\n    function balanceOf(address _user) external view returns(uint256) {\\r\\n        uint256 sum = vest.balanceOf(_user);\\r\\n        for(uint i = 0; i < 5; i++) {\\r\\n            sum += viewUserTokenAmount(_user, i);\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPerShareMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTerminated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startOfDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedStakingRewards.Pool[]\",\"name\":\"_initialPools\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"PoolKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokenPerShare\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenPerShareMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTerminated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startOfDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct LockedStakingRewards.Pool\",\"name\":\"pool_\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"getUserTokenAmountAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"isTransferPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPerShareMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTerminated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startOfDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"sharesToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"terminatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"tokenToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTokenPerShareMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateTokenPerShareMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"viewUserShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"viewUserTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockedStakingRewards", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000002ade0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000000000000000061ba6560000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000033ad00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ed4e000000000000000000000000000000000000000000000000000000000061ba656000000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001da9c000000000000000000000000000000000000000000000000000000000061ba65600000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b538000000000000000000000000000000000000000000000000000000000061c39fe00000000000000000000000000000000000000000000000000000000000002710", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}