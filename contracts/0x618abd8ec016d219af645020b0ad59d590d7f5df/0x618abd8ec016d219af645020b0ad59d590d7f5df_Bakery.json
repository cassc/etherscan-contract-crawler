{"SourceCode": "{\"Bakery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Token.sol\\\";\\n\\ncontract Bakery {\\n\\n\\tstruct Info {\\n\\t\\tToken[] tokens;\\n\\t\\tmapping(address =\\u003e uint256) nonce;\\n\\t\\taddress template;\\n\\t}\\n\\tInfo private info;\\n\\n\\n\\tconstructor() {\\n\\t\\tToken _template = new Token();\\n\\t\\t_template.lock();\\n\\t\\tinfo.template = address(_template);\\n\\t}\\n\\t\\n\\tfunction salt() public returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(msg.sender, info.nonce[msg.sender]++));\\n\\t}\\n\\n\\tfunction launch(bool _deployProxy, string memory _name, string memory _symbol, uint256 _totalSupply, uint256 _initialMarketCap, uint256 _transferTax, uint256 _creatorFee) external payable returns (address) {\\n\\t\\tToken _token;\\n\\t\\t{\\n\\t\\t\\tbytes32 _salt = salt();\\n\\t\\t\\tif (_deployProxy) {\\n\\t\\t\\t\\taddress _proxy;\\n\\t\\t\\t\\tbytes20 _template = bytes20(info.template);\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet _clone := mload(0x40)\\n\\t\\t\\t\\t\\tmstore(_clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n\\t\\t\\t\\t\\tmstore(add(_clone, 0x14), _template)\\n\\t\\t\\t\\t\\tmstore(add(_clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n\\t\\t\\t\\t\\t_proxy := create2(0, _clone, 0x37, _salt)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t_token = Token(_proxy);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_token = new Token{salt:_salt}();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_token.initialize{value:msg.value}(msg.sender, _name, _symbol, _totalSupply, _initialMarketCap, _transferTax, _creatorFee);\\n\\t\\tinfo.tokens.push(_token);\\n\\t\\treturn address(_token);\\n\\t}\\n\\n\\n\\tfunction template() public view returns (address) {\\n\\t\\treturn info.template;\\n\\t}\\n\\t\\n\\tfunction totalTokens() public view returns (uint256) {\\n\\t\\treturn info.tokens.length;\\n\\t}\\n\\n\\tfunction tokenAtIndex(uint256 _index) public view returns (Token) {\\n\\t\\treturn info.tokens[_index];\\n\\t}\\n\\n\\tfunction allTokens() public view returns (Token[] memory) {\\n\\t\\treturn info.tokens;\\n\\t}\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface Callable {\\n\\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\\n}\\n\\ninterface Router {\\n\\tfunction WETH() external pure returns (address);\\n\\tfunction factory() external pure returns (address);\\n\\tfunction addLiquidityETH(address, uint256, uint256, uint256, address, uint256) external payable returns (uint256, uint256, uint256);\\n\\tfunction swapExactETHForTokens(uint256, address[] calldata, address, uint256) external payable returns (uint256[] memory);\\n}\\n\\ninterface Factory {\\n\\tfunction createPair(address, address) external returns (address);\\n}\\n\\ninterface Pair {\\n\\tfunction balanceOf(address) external view returns (uint256);\\n\\tfunction transfer(address, uint256) external returns (bool);\\n}\\n\\n\\ncontract Token {\\n\\n\\tuint256 constant private UINT_MAX = type(uint256).max;\\n\\tuint256 constant private MAX_NAME_LENGTH = 32;\\n\\tuint256 constant private MIN_SUPPLY = 1e16; // 0.01 tokens\\n\\tuint256 constant private MAX_SUPPLY = 1e33; // 1 quadrillion tokens\\n\\tuint256 constant private PERCENT_PRECISION = 1000; // 1 = 0.1%\\n\\tRouter constant private ROUTER = Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\tuint8 constant public decimals = 18;\\n\\n\\tstring constant public source = \\\"Created with Bossman\\u0027s Bakery (bakery.mullet.capital)!\\\";\\n\\n\\n\\tstruct User {\\n\\t\\tuint256 balance;\\n\\t\\tmapping(address =\\u003e uint256) allowance;\\n\\t}\\n\\n\\tstruct Info {\\n\\t\\tbool locked;\\n\\t\\taddress pair;\\n\\t\\taddress creator;\\n\\t\\tuint256 totalSupply;\\n\\t\\tuint256 initialMarketCap;\\n\\t\\tuint256 transferTax;\\n\\t\\tuint256 creatorFee;\\n\\t\\tmapping(address =\\u003e User) users;\\n\\t}\\n\\tInfo private info;\\n\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\\n\\n\\t\\n\\tfunction lock() external {\\n\\t\\trequire(!info.locked);\\n\\t\\trequire(totalSupply() == 0);\\n\\t\\tinfo.locked = true;\\n\\t}\\n\\t\\n\\tfunction initialize(address _creator, string memory _name, string memory _symbol, uint256 _totalSupply, uint256 _initialMarketCap, uint256 _transferTax, uint256 _creatorFee) external payable {\\n\\t\\trequire(!info.locked);\\n\\t\\trequire(totalSupply() == 0);\\n\\t\\trequire(bytes(_name).length \\u003e 0 \\u0026\\u0026 bytes(_name).length \\u003c= MAX_NAME_LENGTH);\\n\\t\\trequire(bytes(_symbol).length \\u003e 0 \\u0026\\u0026 bytes(_symbol).length \\u003c= MAX_NAME_LENGTH);\\n\\t\\trequire(_totalSupply \\u003e= MIN_SUPPLY \\u0026\\u0026 _totalSupply \\u003c= MAX_SUPPLY);\\n\\t\\trequire(_initialMarketCap \\u003e 0);\\n\\t\\trequire(_transferTax \\u003c PERCENT_PRECISION);\\n\\t\\trequire(_creatorFee \\u003c PERCENT_PRECISION);\\n\\t\\trequire(msg.value \\u003e= _initialMarketCap);\\n\\t\\tinfo.creator = _creator;\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\t\\tinfo.totalSupply = _totalSupply;\\n\\t\\tinfo.users[address(this)].balance = _totalSupply;\\n\\t\\temit Transfer(address(0x0), address(this), _totalSupply);\\n\\t\\tinfo.initialMarketCap = _initialMarketCap;\\n\\t\\tinfo.creatorFee = _creatorFee;\\n\\t\\t_createLP();\\n\\t\\tinfo.transferTax = _transferTax;\\n\\t}\\n\\n\\tfunction collectTax() external {\\n\\t\\taddress _this = address(this);\\n\\t\\tuint256 _tokens = balanceOf(_this);\\n\\t\\trequire(_tokens \\u003e 0);\\n\\t\\t_transfer(_this, creator(), _tokens / 2);\\n\\t\\t_transfer(_this, 0xe6c791FBd46dB3f4EdA5f7Bb76474F4FA530733E, _tokens / 3);\\n\\t\\t_transfer(_this, 0xc28C9da0F8a500DFfC16Ff09a3DD1Cc4c530D346, _tokens / 6);\\n\\t}\\n\\n\\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\\n\\t\\treturn _transfer(msg.sender, _to, _tokens);\\n\\t}\\n\\n\\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\\n\\t\\treturn _approve(msg.sender, _spender, _tokens);\\n\\t}\\n\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint256 _allowance = allowance(_from, msg.sender);\\n\\t\\t\\trequire(_allowance \\u003e= _tokens);\\n\\t\\t\\tif (_allowance != UINT_MAX) {\\n\\t\\t\\t\\tinfo.users[_from].allowance[msg.sender] -= _tokens;\\n\\t\\t\\t}\\n\\t\\t\\treturn _transfer(_from, _to, _tokens);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\\n\\t\\t_transfer(msg.sender, _to, _tokens);\\n\\t\\tuint32 _size;\\n\\t\\tassembly {\\n\\t\\t\\t_size := extcodesize(_to)\\n\\t\\t}\\n\\t\\tif (_size \\u003e 0) {\\n\\t\\t\\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\n\\tfunction creator() public view returns (address) {\\n\\t\\treturn info.creator;\\n\\t}\\n\\n\\tfunction pair() public view returns (address) {\\n\\t\\treturn info.pair;\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn info.totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address _user) public view returns (uint256) {\\n\\t\\treturn info.users[_user].balance;\\n\\t}\\n\\n\\tfunction allowance(address _user, address _spender) public view returns (uint256) {\\n\\t\\treturn info.users[_user].allowance[_spender];\\n\\t}\\n\\n\\tfunction initialMarketCap() external view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(_uint2str(info.initialMarketCap, 18, 5), \\\" ETH\\\"));\\n\\t}\\n\\n\\tfunction transferTax() external view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(_uint2str(info.transferTax * 100, 3, 3), \\\"%\\\"));\\n\\t}\\n\\n\\tfunction creatorFee() external view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(_uint2str(info.creatorFee * 100, 3, 3), \\\"%\\\"));\\n\\t}\\n\\n\\t\\n\\tfunction _createLP() internal {\\n\\t\\taddress _this = address(this);\\n\\t\\taddress _weth = ROUTER.WETH();\\n\\t\\t_approve(_this, address(ROUTER), totalSupply());\\n\\t\\tinfo.pair = Factory(ROUTER.factory()).createPair(_weth, _this);\\n\\t\\t( , , uint256 _lpTokens) = ROUTER.addLiquidityETH{ value: info.initialMarketCap }(_this, totalSupply(), 0, 0, _this, block.timestamp);\\n\\t\\tPair _pair = Pair(pair());\\n\\t\\tif (info.creatorFee \\u003e 0) {\\n\\t\\t\\t_pair.transfer(creator(), _lpTokens * info.creatorFee / PERCENT_PRECISION);\\n\\t\\t}\\n\\t\\t_pair.transfer(address(0x0), _pair.balanceOf(_this));\\n\\t\\tif (msg.value \\u003e info.initialMarketCap) {\\n\\t\\t\\taddress[] memory _path = new address[](2);\\n\\t\\t\\t_path[0] = _weth;\\n\\t\\t\\t_path[1] = _this;\\n\\t\\t\\tROUTER.swapExactETHForTokens{ value: msg.value - info.initialMarketCap }(0, _path, creator(), block.timestamp);\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction _approve(address _owner, address _spender, uint256 _tokens) internal returns (bool) {\\n\\t\\tinfo.users[_owner].allowance[_spender] = _tokens;\\n\\t\\temit Approval(_owner, _spender, _tokens);\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(_tokens \\u003e 0);\\n\\t\\t\\trequire(balanceOf(_from) \\u003e= _tokens);\\n\\t\\t\\taddress _this = address(this);\\n\\t\\t\\tif (info.transferTax == 0 || _from == _this || _to == _this || _from == creator()) {\\n\\t\\t\\t\\tinfo.users[_from].balance -= _tokens;\\n\\t\\t\\t\\tinfo.users[_to].balance += _tokens;\\n\\t\\t\\t\\temit Transfer(_from, _to, _tokens);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinfo.users[_from].balance -= _tokens;\\n\\t\\t\\t\\tuint256 _tax = _tokens * info.transferTax / PERCENT_PRECISION;\\n\\t\\t\\t\\tinfo.users[_this].balance += _tax;\\n\\t\\t\\t\\temit Transfer(_from, _this, _tax);\\n\\t\\t\\t\\tinfo.users[_to].balance += _tokens - _tax;\\n\\t\\t\\t\\temit Transfer(_from, _to, _tokens - _tax);\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\n\\tfunction _uint2str(uint256 _value, uint256 _scale, uint256 _maxDecimals) internal pure returns (string memory str) {\\n\\t\\tuint256 _d = _scale \\u003e _maxDecimals ? _maxDecimals : _scale;\\n\\t\\tuint256 _n = _value / 10**(_scale \\u003e _d ? _scale - _d : 0);\\n\\t\\tif (_n == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint256 _digits = 1;\\n\\t\\tuint256 _tmp = _n;\\n\\t\\twhile (_tmp \\u003e 9) {\\n\\t\\t\\t_tmp /= 10;\\n\\t\\t\\t_digits++;\\n\\t\\t}\\n\\t\\t_tmp = _digits \\u003e _d ? _digits : _d + 1;\\n\\t\\tuint256 _offset = (_tmp \\u003e _d + 1 ? _tmp - _d - 1 \\u003e _d ? _d : _tmp - _d - 1 : 0);\\n\\t\\tfor (uint256 i = 0; i \\u003c _tmp - _offset; i++) {\\n\\t\\t\\tuint256 _dec = i \\u003c _tmp - _digits ? 0 : (_n / (10**(_tmp - i - 1))) % 10;\\n\\t\\t\\tbytes memory _char = new bytes(1);\\n\\t\\t\\t_char[0] = bytes1(uint8(_dec) + 48);\\n\\t\\t\\tstr = string(abi.encodePacked(str, string(_char)));\\n\\t\\t\\tif (i \\u003c _tmp - _d - 1) {\\n\\t\\t\\t\\tif ((i + 1) % 3 == (_tmp - _d) % 3) {\\n\\t\\t\\t\\t\\tstr = string(abi.encodePacked(str, \\\",\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif ((_n / 10**_offset) % 10**(_tmp - _offset - i - 1) == 0) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t} else if (i == _tmp - _d - 1) {\\n\\t\\t\\t\\t\\tstr = string(abi.encodePacked(str, \\\".\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"contract Token[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_deployProxy\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMarketCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_creatorFee\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenAtIndex\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Bakery", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://53055bcab1f59921766b17fc0a8838a48bda24472e9911cd8f4e9226928a687f"}