{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface Aggregator {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract MemeKombat is Ownable, Pausable {\r\n    IERC20 public token;\r\n    IERC20 public usdt;\r\n\r\n    uint256 public USDTRaised;\r\n    uint256 public MaxUSDTRaised;\r\n    uint256 public maxTokensToBuy;\r\n    uint256 public totalTokensSold;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    uint256 public PresaleRate;\r\n\r\n    Aggregator public aggregatorInterface;\r\n\r\n    enum TokenType {\r\n        ETH,\r\n        USDT\r\n    }\r\n\r\n    mapping(address => uint256) public userDeposits;\r\n\r\n    event MaxTokensUpdated(\r\n        uint256 prevValue,\r\n        uint256 newValue,\r\n        uint256 timestamp\r\n    );\r\n    event TokensBought(\r\n        address indexed user,\r\n        uint256 indexed tokensBought,\r\n        address indexed purchaseToken,\r\n        uint256 amountPaid,\r\n        uint256 timestamp\r\n    );\r\n    event TokensClaimed(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    constructor() {\r\n        token = IERC20(0x95E1C5a40D5A1B722AdE86832F268993eb43c66d);\r\n        usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        aggregatorInterface = Aggregator(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        );\r\n        maxTokensToBuy = 500000 ether;\r\n        startTime = block.timestamp;\r\n        endTime = block.timestamp + 5 days;\r\n        PresaleRate = 1176;\r\n        MaxUSDTRaised = 1000000 * 1e6;\r\n    }\r\n\r\n    function changeMaxTokensToBuy(uint256 _maxTokensToBuy) external onlyOwner {\r\n        require(_maxTokensToBuy > 0, \"Zero max tokens to buy value\");\r\n        maxTokensToBuy = _maxTokensToBuy;\r\n        emit MaxTokensUpdated(maxTokensToBuy, _maxTokensToBuy, block.timestamp);\r\n    }\r\n\r\n    function changeSaleStartTime(uint256 _startTime) external onlyOwner {\r\n        require(block.timestamp <= _startTime, \"Sale time in past\");\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function changeSaleEndTime(uint256 _endTime) external onlyOwner {\r\n        require(_endTime > startTime, \"Invalid endTime\");\r\n        require(_endTime >= block.timestamp, \"End time past\");\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function updatePresaleRate(uint256 _newRate) external onlyOwner {\r\n        require(_newRate > 0, \"Inalid presale rate\");\r\n        PresaleRate = _newRate;\r\n    }\r\n\r\n    function pause() external onlyOwner returns (bool success) {\r\n        _pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() external onlyOwner returns (bool success) {\r\n        _unpause();\r\n        return true;\r\n    }\r\n\r\n    function setMaxUSDTRaised(uint256 _newUsdtRaised) external onlyOwner {\r\n        require(_newUsdtRaised > 0, \"Wrong value\");\r\n        require(\r\n            _newUsdtRaised > USDTRaised,\r\n            \"Maximum USDT must be greater than the USDT Raised\"\r\n        );\r\n        MaxUSDTRaised = _newUsdtRaised;\r\n    }\r\n\r\n    function sendValue(address recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Low balance\");\r\n        (bool success, ) = payable(recipient).call{value: amount}(\"\");\r\n        require(success, \"cicca Payment failed\");\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) public onlyOwner {\r\n        require(amount > 0, \"Invalid enter amount\");\r\n        sendValue(owner(), amount);\r\n    }\r\n\r\n    function withdrawTokens(address _token, uint256 amount) external onlyOwner {\r\n        require(isContract(_token), \"Invalid contract address\");\r\n        require(\r\n            IERC20(_token).balanceOf(address(this)) >= amount,\r\n            \"Insufficient tokens\"\r\n        );\r\n        IERC20(_token).transfer(_msgSender(), amount);\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool iscontract) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    modifier checkSaleState(uint256 amount) {\r\n        require(startTime <= block.timestamp, \"ICO not start\");\r\n        require(endTime >= block.timestamp, \"ICO end\");\r\n        require(amount > 0, \"Invalid amount\");\r\n        _;\r\n    }\r\n\r\n    function buyWithUSDT(\r\n        uint256 amount\r\n    ) external checkSaleState(amount) whenNotPaused {\r\n        uint256 numOfTokens = calculateToken(amount, TokenType.USDT);\r\n        require(numOfTokens <= maxTokensToBuy, \"max tokens buy\");\r\n        uint256 ourAllowance = usdt.allowance(_msgSender(), address(this));\r\n        require(amount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        usdt.transferFrom(_msgSender(), address(this), amount);\r\n        userDeposits[_msgSender()] = numOfTokens;\r\n        USDTRaised += amount;\r\n        totalTokensSold += numOfTokens;\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            numOfTokens,\r\n            address(usdt),\r\n            amount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function buyWithETH()\r\n        external\r\n        payable\r\n        checkSaleState(msg.value)\r\n        whenNotPaused\r\n    {\r\n        uint256 ethToUsdt = (getLatestPrice() * msg.value) / 1e8;\r\n        uint256 numOfTokens = calculateToken(ethToUsdt, TokenType.ETH);\r\n        require(numOfTokens <= maxTokensToBuy, \"max tokens buy\");\r\n        userDeposits[_msgSender()] = numOfTokens;\r\n        totalTokensSold += numOfTokens;\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            numOfTokens,\r\n            address(0),\r\n            ethToUsdt,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function calculateToken(\r\n        uint256 _usdtAmount,\r\n        TokenType _type\r\n    ) private view returns (uint256) {\r\n        uint256 numOfTokens;\r\n        if (_type == TokenType.USDT) {\r\n            numOfTokens = _usdtAmount * PresaleRate * 1e12;\r\n        } else {\r\n            numOfTokens = _usdtAmount * PresaleRate;\r\n        }\r\n        return (numOfTokens / 1000);\r\n    }\r\n\r\n    function ethBuyHelper(\r\n        uint256 amount\r\n    ) external view returns (uint256 numOfTokens) {\r\n        uint256 ethToUsdt = (getLatestPrice() * amount) / 1e8;\r\n        numOfTokens = calculateToken(ethToUsdt, TokenType.ETH);\r\n    }\r\n\r\n    function usdtBuyHelper(\r\n        uint256 amount\r\n    ) external view returns (uint256 numOfTokens) {\r\n        numOfTokens = calculateToken(amount, TokenType.USDT);\r\n    }\r\n\r\n    function claim() external whenNotPaused returns (bool) {\r\n        require(endTime < block.timestamp, \"Claim time has not started\");\r\n        require(userDeposits[_msgSender()] > 0, \"No deposit\");\r\n        uint256 amount = userDeposits[_msgSender()];\r\n        bool success = token.transfer(_msgSender(), amount);\r\n        require(success, \"Failed to send tokens\");\r\n        emit TokensClaimed(_msgSender(), amount, block.timestamp);\r\n        userDeposits[_msgSender()] = 0;\r\n        delete userDeposits[_msgSender()];\r\n        return success;\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    function getTokenBalance() public view returns (uint256 tokenBalance) {\r\n        tokenBalance = token.balanceOf(address(this));\r\n    }\r\n\r\n    function getUsdtBalance() public view returns (uint256 usdtBalance) {\r\n        usdtBalance = usdt.balanceOf(address(this));\r\n    }\r\n\r\n    function getEthBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MaxTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MaxUSDTRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregatorInterface\",\"outputs\":[{\"internalType\":\"contract Aggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokensToBuy\",\"type\":\"uint256\"}],\"name\":\"changeMaxTokensToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeSaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"changeSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUsdtRaised\",\"type\":\"uint256\"}],\"name\":\"setMaxUSDTRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"updatePresaleRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MemeKombat", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cbabd20f03dd76edf5f751e86905a9e7a82bbccc0b0e94899f3b13596f604d55"}