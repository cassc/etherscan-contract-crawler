{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@hashflow/contracts-evm/contracts/interfaces/IHashflowRouter.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\nimport './IQuote.sol';\\n\\n/// @title IHashflowRouter\\n/// @author Victor Ionescu\\n/**\\n * @notice In terms of user-facing functionality, the Router is responsible for:\\n * - orchestrating trades\\n * - managing cross-chain permissions\\n *\\n * Every trade requires consent from two parties: the Trader and the Market Maker.\\n * However, there are two models to establish consent:\\n * - RFQ-T: in this model, the Market Maker provides an EIP-191 signature for the quote,\\n *   while the Trader signs the transaction and submits it on-chain\\n * - RFQ-M: in this model, the Trader provides an EIP-712 signature for the quote,\\n *   the Market Maker provides an EIP-191 signature, and a 3rd party relays the trade.\\n *   The 3rd party can be the Market Maker itself.\\n *\\n * In terms of Hashflow internals, the Router maintains a set of authorized pool\\n * contracts that are allowed to be used for trading. This allowlist creates\\n * guarantees against malicious behavior, as documented in specific places.\\n *\\n * The Router contract is not upgradeable. In order to change functionality, a new\\n * Router has to be deployed, and new HashflowPool contracts have to be deployed\\n * by the Market Makers.\\n */\\n/// @dev Trade / liquidity events are emitted at the HashflowPool level, rather than the router.\\ninterface IHashflowRouter is IQuote {\\n    /**\\n     * @notice X-Chain message received from an X-Chain Messenger. This is used by the\\n     * Router to communicate a fill to a HashflowPool.\\n     */\\n    struct XChainFillMessage {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcHashflowChainId;\\n        /// @notice The address of the HashflowPool on the source chain.\\n        bytes32 srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        address dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        address dstExternalAccount;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        address dstTrader;\\n        /// @notice The token that the trader buys on the destination chain.\\n        address quoteToken;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice The caller of the trade function on the source chain.\\n        bytes32 srcCaller;\\n        /// @notice The contract to call, if any.\\n        address dstContract;\\n        /// @notice The calldata for the contract.\\n        bytes dstContractCalldata;\\n    }\\n\\n    /// @notice Emitted when the authorization status of a pool changes.\\n    /// @param pool The pool whose status changed.\\n    /// @param authorized The new auth status.\\n    event UpdatePoolAuthorizaton(address pool, bool authorized);\\n\\n    /// @notice Emitted when a sender pool authorization changes.\\n    /// @param pool Pool address on this chain.\\n    /// @param otherHashflowChainId Hashflow Chain ID of the other chain.\\n    /// @param otherChainPool Pool address on the other chain.\\n    /// @param authorized Whether the pool is authorized.\\n    event UpdateXChainPoolAuthorization(\\n        address indexed pool,\\n        uint16 otherHashflowChainId,\\n        bytes32 otherChainPool,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorization of an x-caller changes.\\n    /// @param pool Pool address on this chain.\\n    /// @param otherHashflowChainId Hashflow Chain ID of the other chain.\\n    /// @param caller Caller address on the other chain.\\n    /// @param authorized Whether the caller is authorized.\\n    event UpdateXChainCallerAuthorization(\\n        address indexed pool,\\n        uint16 otherHashflowChainId,\\n        bytes32 caller,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorization status of an X-Chain Messenger changes for a pool.\\n    /// @param pool Pool address for which the Messenger authorization changes.\\n    /// @param xChainMessenger Address of the Messenger.\\n    /// @param authorized Whether the X-Chain Messenger is authorized.\\n    event UpdateXChainMessengerAuthorization(\\n        address indexed pool,\\n        address xChainMessenger,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorized status of an X-Chain Messenger changes for a callee.\\n    /// @param callee Address of the callee.\\n    /// @param xChainMessenger Address of the Messenger.\\n    /// @param authorized Whether the X-Chain Messenger is authorized.\\n    event UpdateXChainMessengerCallerAuthorization(\\n        address indexed callee,\\n        address xChainMessenger,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the Limit Order Guardian address is updated.\\n    /// @param guardian The new Guardian address.\\n    event UpdateLimitOrderGuardian(address guardian);\\n\\n    /// @notice Initializes the Router. Called one time.\\n    /// @param factory The address of the HashflowFactory contract.\\n    function initialize(address factory) external;\\n\\n    /// @notice Returns the address of the associated HashflowFactor contract.\\n    function factory() external view returns (address);\\n\\n    function authorizedXChainPools(\\n        bytes32 dstPool,\\n        uint16 srcHChainId,\\n        bytes32 srcPool\\n    ) external view returns (bool);\\n\\n    function authorizedXChainCallers(\\n        address dstContract,\\n        uint16 srcHashflowChainId,\\n        bytes32 caller\\n    ) external view returns (bool);\\n\\n    function authorizedXChainMessengersByPool(address pool, address messenger)\\n        external\\n        view\\n        returns (bool);\\n\\n    function authorizedXChainMessengersByCallee(\\n        address callee,\\n        address messenger\\n    ) external view returns (bool);\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote data to be executed.\\n    function tradeRFQT(RFQTQuote memory quote) external payable;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote data to be executed.\\n    /// @dev Does not support native tokens for the baseToken.\\n    function tradeRFQTWithPermit(\\n        RFQTQuote memory quote,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    function tradeRFQM(RFQMQuote memory quote) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeRFQMWithPermit(\\n        RFQMQuote memory quote,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    /// @param guardianSignature A signature issued by the Limit Order Guardian.\\n    function tradeRFQMLimitOrder(\\n        RFQMQuote memory quote,\\n        bytes memory guardianSignature\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param guardianSignature A signature issued by the Limit Order Guardian.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeRFQMLimitOrderWithPermit(\\n        RFQMQuote memory quote,\\n        bytes memory guardianSignature,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an RFQ-T cross-chain trade.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    function tradeXChainRFQT(\\n        XChainRFQTQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) external payable;\\n\\n    /// @notice Executes an RFQ-T cross-chain trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeXChainRFQTWithPermit(\\n        XChainRFQTQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external payable;\\n\\n    /// @notice Executes an RFQ-M cross-chain trade.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    function tradeXChainRFQM(\\n        XChainRFQMQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) external payable;\\n\\n    /// @notice Similar to tradeXChainRFQm, but includes a spend permit for the baseToken.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount to approve.\\n    function tradeXChainRFQMWithPermit(\\n        XChainRFQMQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external payable;\\n\\n    /// @notice Completes the second leg of a cross-chain trade.\\n    /// @param fillMessage Payload containing information necessary to complete the trade.\\n    function fillXChain(XChainFillMessage memory fillMessage) external;\\n\\n    /// @notice Returns whether the pool is authorized for trading.\\n    /// @param pool The address of the HashflowPool.\\n    function authorizedPools(address pool) external view returns (bool);\\n\\n    /// @notice Allows the owner to unauthorize a potentially compromised pool. Cannot be reverted.\\n    /// @param pool The address of the HashflowPool.\\n    function forceUnauthorizePool(address pool) external;\\n\\n    /// @notice Authorizes a HashflowPool for trading.\\n    /// @dev Can only be called by the HashflowFactory or the admin.\\n    function updatePoolAuthorization(address pool, bool authorized) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain pool pair.\\n    /// @param otherHashflowChainId The Hashflow Chain ID of the peer chain.\\n    /// @param otherPool The 32-byte representation of the Pool address on the peer chain.\\n    /// @param authorized Whether the pool is authorized to communicate with the sender pool.\\n    function updateXChainPoolAuthorization(\\n        uint16 otherHashflowChainId,\\n        bytes32 otherPool,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain caller.\\n    /// @param otherHashflowChainId The Hashflow Chain ID of the peer chain.\\n    /// @param caller The caller address.\\n    /// @param authorized Whether the caller is authorized to send an x-call to the sender pool.\\n    function updateXChainCallerAuthorization(\\n        uint16 otherHashflowChainId,\\n        bytes32 caller,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain Messenger app.\\n    /// @param xChainMessenger The address of the Messenger App.\\n    /// @param authorized The new authorization status.\\n    function updateXChainMessengerAuthorization(\\n        address xChainMessenger,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain Messenger app.\\n    /// @param xChainMessenger The address of the Messenger App.\\n    /// @param authorized The new authorization status.\\n    function updateXChainMessengerCallerAuthorization(\\n        address xChainMessenger,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Used to stop all operations on a pool, in case of an emergency.\\n    /// @param pool The address of the HashflowPool.\\n    /// @param enabled Whether the pool is enabled.\\n    function killswitchPool(address pool, bool enabled) external;\\n\\n    /// @notice Used to update the Limit Order Guardian.\\n    /// @param guardian The address of the new Guardian.\\n    function updateLimitOrderGuardian(address guardian) external;\\n\\n    /// @notice Allows the owner to withdraw excess funds from the Router.\\n    /// @dev Under normal operations, the Router should not have excess funds.\\n    function withdrawFunds(address token) external;\\n}\\n\"\r\n    },\r\n    \"@hashflow/contracts-evm/contracts/interfaces/IQuote.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\n/// @title IQuote\\n/// @author Victor Ionescu\\n/**\\n * @notice Interface for quote structs used for trading. There are two major types of trades:\\n * - intra-chain: atomic transactions within one chain\\n * - cross-chain: multi-leg transactions between two chains, which utilize interoperability protocols\\n *                such as Wormhole.\\n *\\n * Separately, there are two trading modes:\\n * - RFQ-T: the trader signs the transaction, the market maker signs the quote\\n * - RFQ-M: both the trader and Market Maker sign the quote, any relayer can sign the transaction\\n */\\ninterface IQuote {\\n    /// @notice Used for intra-chain RFQ-T trades.\\n    struct RFQTQuote {\\n        /// @notice The address of the HashflowPool to trade against.\\n        address pool;\\n        /**\\n         * @notice The external account linked to the HashflowPool.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address externalAccount;\\n        /// @notice The recipient of the quoteToken at the end of the trade.\\n        address trader;\\n        /**\\n         * @notice The account \\\"effectively\\\" making the trade (ultimately receiving the funds).\\n         * This is commonly used by aggregators, where a proxy contract (the 'trader')\\n         * receives the quoteToken, and the effective trader is the user initiating the call.\\n         *\\n         * This field DOES NOT influence movement of funds. However, it is used to check against\\n         * quote replay.\\n         */\\n        address effectiveTrader;\\n        /// @notice The token that the trader sells.\\n        address baseToken;\\n        /// @notice The token that the trader buys.\\n        address quoteToken;\\n        /**\\n         * @notice The amount of baseToken sold in this trade. The exchange rate\\n         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.\\n         *\\n         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.\\n         */\\n        uint256 effectiveBaseTokenAmount;\\n        /// @notice The max amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought when baseTokenAmount is sold.\\n        uint256 quoteTokenAmount;\\n        /// @notice The Unix timestamp (in seconds) when the quote expires.\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice The nonce used by this effectiveTrader. Nonces are used to protect against replay.\\n        uint256 nonce;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes signature;\\n    }\\n\\n    /// @notice Used for intra-chain RFQ-M trades.\\n    struct RFQMQuote {\\n        /// @notice The address of the HashflowPool to trade against.\\n        address pool;\\n        /**\\n         * @notice The external account linked to the HashflowPool.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address externalAccount;\\n        /// @notice The account that will be debited baseToken / credited quoteToken.\\n        address trader;\\n        /// @notice The token that the trader sells.\\n        address baseToken;\\n        /// @notice The token that the trader buys.\\n        address quoteToken;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /// @notice The Unix timestamp (in seconds) when the quote expires.\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice Signature provided by the trader (EIP-712).\\n        bytes takerSignature;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes makerSignature;\\n    }\\n\\n    /// @notice Used for cross-chain RFQ-T trades.\\n    struct XChainRFQTQuote {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcChainId;\\n        /// @notice The Hashflow Chain ID of the destination chain.\\n        uint16 dstChainId;\\n        /// @notice The address of the HashflowPool to trade against on the source chain.\\n        address srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        /// @dev This is bytes32 in order to anticipate non-EVM chains.\\n        bytes32 dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the source chain.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address srcExternalAccount;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        bytes32 dstExternalAccount;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        bytes32 dstTrader;\\n        /// @notice The token that the trader sells on the source chain.\\n        address baseToken;\\n        /// @notice The token that the trader buys on the destination chain.\\n        bytes32 quoteToken;\\n        /**\\n         * @notice The amount of baseToken sold in this trade. The exchange rate\\n         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.\\n         *\\n         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.\\n         */\\n        uint256 effectiveBaseTokenAmount;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /**\\n         * @notice The Unix timestamp (in seconds) when the quote expire. Only enforced\\n         * on the source chain.\\n         */\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice The nonce used by this trader.\\n        uint256 nonce;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /**\\n         * @notice The address of the IHashflowXChainMessenger contract used for\\n         * cross-chain communication.\\n         */\\n        address xChainMessenger;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes signature;\\n    }\\n\\n    /// @notice Used for Cross-Chain RFQ-M trades.\\n    struct XChainRFQMQuote {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcChainId;\\n        /// @notice The Hashflow Chain ID of the destination chain.\\n        uint16 dstChainId;\\n        /// @notice The address of the HashflowPool to trade against on the source chain.\\n        address srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        /// @dev This is bytes32 in order to anticipate non-EVM chains.\\n        bytes32 dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the source chain.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address srcExternalAccount;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        bytes32 dstExternalAccount;\\n        /// @notice The account that will be debited baseToken on the source chain.\\n        address trader;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        bytes32 dstTrader;\\n        /// @notice The token that the trader sells on the source chain.\\n        address baseToken;\\n        /// @notice The token that the trader buys on the destination chain.\\n        bytes32 quoteToken;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /**\\n         * @notice The Unix timestamp (in seconds) when the quote expire. Only enforced\\n         * on the source chain.\\n         */\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /**\\n         * @notice The address of the IHashflowXChainMessenger contract used for\\n         * cross-chain communication.\\n         */\\n        address xChainMessenger;\\n        /// @notice Signature provided by the trader (EIP-712).\\n        bytes takerSignature;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes makerSignature;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/RenovaQuest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport '../interfaces/core/IRenovaCommandDeckBase.sol';\\nimport '../interfaces/core/IRenovaQuest.sol';\\nimport '../interfaces/nft/IRenovaAvatarBase.sol';\\n\\n/// @title RenovaQuest\\n/// @author Victor Ionescu\\n/// @notice See {IRenovaQuest}\\ncontract RenovaQuest is IRenovaQuest, Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    address private immutable _renovaCommandDeck;\\n    address private immutable _renovaAvatar;\\n    address private immutable _hashflowRouter;\\n\\n    /// @inheritdoc IRenovaQuest\\n    uint256 public immutable startTime;\\n\\n    /// @inheritdoc IRenovaQuest\\n    uint256 public immutable endTime;\\n\\n    /// @inheritdoc IRenovaQuest\\n    address public immutable depositToken;\\n\\n    /// @inheritdoc IRenovaQuest\\n    uint256 public immutable minDepositAmount;\\n\\n    /// @inheritdoc IRenovaQuest\\n    address public immutable questOwner;\\n\\n    /// @inheritdoc IRenovaQuest\\n    mapping(address => bool) public registered;\\n\\n    /// @inheritdoc IRenovaQuest\\n    mapping(address => bool) public allowedTokens;\\n\\n    /// @inheritdoc IRenovaQuest\\n    uint256 public numRegisteredPlayers;\\n\\n    /// @inheritdoc IRenovaQuest\\n    mapping(address => mapping(address => uint256))\\n        public portfolioTokenBalances;\\n\\n    uint256 public constant MAX_QUEST_LENGTH = (1 days) * 31 * 4;\\n\\n    constructor(\\n        address renovaAvatar,\\n        address hashflowRouter,\\n        uint256 _startTime,\\n        uint256 _endTime,\\n        address _depositToken,\\n        uint256 _minDepositAmount,\\n        address _questOwner\\n    ) {\\n        _renovaCommandDeck = _msgSender();\\n\\n        require(\\n            _startTime > block.timestamp,\\n            'RenovaQuest::constructor Start time should be in the future.'\\n        );\\n        require(\\n            _endTime > _startTime,\\n            'RenovaQuest::constructor End time should be after start time.'\\n        );\\n        require(\\n            (_endTime - _startTime) <= MAX_QUEST_LENGTH,\\n            'RenovaQuest::constructor Quest too long.'\\n        );\\n\\n        startTime = _startTime;\\n        endTime = _endTime;\\n        depositToken = _depositToken;\\n        minDepositAmount = _minDepositAmount;\\n\\n        allowedTokens[depositToken] = true;\\n\\n        questOwner = _questOwner;\\n\\n        _renovaAvatar = renovaAvatar;\\n        _hashflowRouter = hashflowRouter;\\n\\n        emit UpdateTokenAuthorizationStatus(depositToken, true);\\n    }\\n\\n    /// @dev Fallback function to receive native token.\\n    receive() external payable {}\\n\\n    /// @inheritdoc IRenovaQuest\\n    function updateTokenAuthorization(\\n        address token,\\n        bool status\\n    ) external override {\\n        require(\\n            _msgSender() == questOwner,\\n            'RenovaQuest::updateTokenAuthorization Sender must be quest owner.'\\n        );\\n\\n        allowedTokens[token] = status;\\n\\n        emit UpdateTokenAuthorizationStatus(token, status);\\n    }\\n\\n    /// @inheritdoc IRenovaQuest\\n    function depositAndEnter(\\n        uint256 depositAmount\\n    ) external payable override nonReentrant {\\n        _depositAndEnter(_msgSender(), depositAmount);\\n    }\\n\\n    /// @inheritdoc IRenovaQuest\\n    function withdrawTokens(\\n        address[] memory tokens\\n    ) external override nonReentrant {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 amount = portfolioTokenBalances[_msgSender()][tokens[i]];\\n            if (amount == 0) {\\n                continue;\\n            }\\n            portfolioTokenBalances[_msgSender()][tokens[i]] = 0;\\n\\n            emit WithdrawToken(_msgSender(), tokens[i], amount);\\n\\n            if (tokens[i] == address(0)) {\\n                payable(_msgSender()).sendValue(amount);\\n            } else {\\n                IERC20(tokens[i]).safeTransfer(_msgSender(), amount);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IRenovaQuest\\n    function trade(\\n        IHashflowRouter.RFQTQuote memory quote\\n    ) external override nonReentrant {\\n        require(\\n            block.timestamp >= startTime && block.timestamp < endTime,\\n            'RenovaQuest::trade Quest is not ongoing.'\\n        );\\n        require(\\n            allowedTokens[quote.quoteToken],\\n            'RenovaQuest::trade Quote Token not allowed.'\\n        );\\n\\n        require(\\n            registered[_msgSender()],\\n            'RenovaQuest::trade Player not registered.'\\n        );\\n\\n        require(\\n            portfolioTokenBalances[_msgSender()][quote.baseToken] >=\\n                quote.effectiveBaseTokenAmount,\\n            'RenovaQuest::trade Insufficient balance'\\n        );\\n\\n        require(\\n            quote.trader == address(this),\\n            'RenovaQuest::trade Trader should be Quest contract.'\\n        );\\n\\n        require(\\n            quote.effectiveTrader == _msgSender(),\\n            'RenovaQuest::trade Effective Trader should be player.'\\n        );\\n\\n        uint256 quoteTokenAmount = quote.quoteTokenAmount;\\n        if (quote.effectiveBaseTokenAmount < quote.baseTokenAmount) {\\n            quoteTokenAmount =\\n                (quote.effectiveBaseTokenAmount * quote.quoteTokenAmount) /\\n                quote.baseTokenAmount;\\n        }\\n\\n        portfolioTokenBalances[_msgSender()][quote.baseToken] -= quote\\n            .effectiveBaseTokenAmount;\\n        portfolioTokenBalances[_msgSender()][\\n            quote.quoteToken\\n        ] += quoteTokenAmount;\\n\\n        emit Trade(\\n            _msgSender(),\\n            quote.baseToken,\\n            quote.quoteToken,\\n            quote.effectiveBaseTokenAmount,\\n            quoteTokenAmount\\n        );\\n\\n        uint256 msgValue = 0;\\n\\n        if (quote.baseToken == address(0)) {\\n            msgValue = quote.effectiveBaseTokenAmount;\\n        } else {\\n            IERC20(quote.baseToken).forceApprove(\\n                _hashflowRouter,\\n                quote.effectiveBaseTokenAmount\\n            );\\n        }\\n\\n        uint256 balanceBefore = _questBalanceOf(quote.quoteToken);\\n\\n        IHashflowRouter(_hashflowRouter).tradeRFQT{value: msgValue}(quote);\\n\\n        uint256 balanceAfter = _questBalanceOf(quote.quoteToken);\\n\\n        require(\\n            balanceBefore + quoteTokenAmount == balanceAfter,\\n            'RenovaQuest::trade Did not receive enough quote token.'\\n        );\\n    }\\n\\n    /// @notice Deposits tokens and registers the player for the Quest.\\n    /// @param player The address of the player depositing tokens.\\n    /// @param depositAmount The amount of token to deposit.\\n    function _depositAndEnter(address player, uint256 depositAmount) internal {\\n        require(\\n            block.timestamp < endTime,\\n            'RenovaQuest::_depositAndEnter Can only deposit before the quest ends.'\\n        );\\n        require(\\n            depositAmount >= minDepositAmount,\\n            'RenovaQuest::_depositAndEnter Deposit amount too low.'\\n        );\\n        require(\\n            !registered[player],\\n            'RenovaQuest::_depositAndEnter Player has already entered the quest.'\\n        );\\n\\n        uint256 avatarTokenId = IRenovaAvatarBase(_renovaAvatar).tokenIds(\\n            player\\n        );\\n        require(\\n            avatarTokenId != 0,\\n            'RenovaQuest::_depositAndEnter Player has not minted Avatar.'\\n        );\\n\\n        if (depositToken == address(0)) {\\n            require(\\n                msg.value == depositAmount,\\n                'RenovaQuest::_depositAndEnter msg.value should equal amount.'\\n            );\\n        } else {\\n            require(\\n                msg.value == 0,\\n                'RenovaQuest::_depositAndEnter msg.value should be 0.'\\n            );\\n        }\\n\\n        registered[player] = true;\\n        portfolioTokenBalances[player][depositToken] += depositAmount;\\n        numRegisteredPlayers++;\\n\\n        emit DepositToken(player, depositToken, depositAmount);\\n        emit RegisterPlayer(player);\\n\\n        if (depositToken != address(0)) {\\n            uint256 balanceBefore = IERC20(depositToken).balanceOf(\\n                address(this)\\n            );\\n\\n            IRenovaCommandDeckBase(_renovaCommandDeck).depositTokenForQuest(\\n                player,\\n                depositAmount\\n            );\\n\\n            uint256 balanceAfter = IERC20(depositToken).balanceOf(\\n                address(this)\\n            );\\n\\n            require(\\n                balanceAfter == balanceBefore + depositAmount,\\n                'RenovaQuest::_depositAndEnter Balance mismatch.'\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the amount of token that this Quest currently holds.\\n    /// @param token The token to return the balance for.\\n    /// @return The balance.\\n    function _questBalanceOf(address token) internal view returns (uint256) {\\n        if (token == address(0)) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/core/IRenovaCommandDeckBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport './IRenovaQuest.sol';\\n\\n/// @title IRenovaCommandDeckBase\\n/// @author Victor Ionescu\\n/**\\n\\nThe Command Deck contract is a central point of command in the Hashverse.\\nIt handles:\\n- official contract addresses for the Item and the Avatar\\n- minting of Hashverse Items post Quest completion\\n- creation of Quests\\n\\nThe Command Deck exists on every chain, however only the main chain\\nCommand Deck can mint items.\\n*/\\ninterface IRenovaCommandDeckBase {\\n    /// @notice Emitted every time the Hashflow Router is updated.\\n    /// @param newRouter The address of the new Hashflow Router.\\n    /// @param oldRouter The address of the old Hashflow Router.\\n    event UpdateHashflowRouter(address newRouter, address oldRouter);\\n\\n    /// @notice Emitted every time the Quest Owner changes.\\n    /// @param newQuestOwner The address of the new Quest Owner.\\n    /// @param oldQuestOwner The address of the old Quest Owner.\\n    event UpdateQuestOwner(address newQuestOwner, address oldQuestOwner);\\n\\n    /// @notice Emitted every time a Quest is created.\\n    /// @param questId The Quest ID.\\n    /// @param questAddress The address of the contract handling the Quest logic.\\n    /// @param startTime The quest start time, in unix seconds.\\n    /// @param endTime The quest end time, in unix seconds.\\n    /// @param depositToken The token to be deposited to enter.\\n    /// @param minDepositAmount The minimum ampount to be deposited to enter.\\n    event CreateQuest(\\n        bytes32 questId,\\n        address questAddress,\\n        uint256 startTime,\\n        uint256 endTime,\\n        address depositToken,\\n        uint256 minDepositAmount\\n    );\\n\\n    /// @notice Returns the Avatar contract address.\\n    /// @return The address of the Avatar contract.\\n    function renovaAvatar() external view returns (address);\\n\\n    /// @notice Returns the Item contract address.\\n    /// @return The address of the Item contract.\\n    function renovaItem() external view returns (address);\\n\\n    /// @notice Returns the Router contract address.\\n    /// @return The address of the Router contract.\\n    function hashflowRouter() external view returns (address);\\n\\n    /// @notice Returns the Quest Owner address.\\n    /// @return The address of the Quest Owner.\\n    function questOwner() external view returns (address);\\n\\n    /// @notice Returns the deployment contract address for a quest ID.\\n    /// @param questId The Quest ID.\\n    /// @return The deployed contract address if the quest ID is valid.\\n    function questDeploymentAddresses(\\n        bytes32 questId\\n    ) external view returns (address);\\n\\n    /// @notice Returns the ID of a quest deployed at a particular address.\\n    /// @param questAddress The address of the Quest contract.\\n    /// @return The quest ID.\\n    function questIdsByDeploymentAddress(\\n        address questAddress\\n    ) external view returns (bytes32);\\n\\n    /// @notice Deposits tokens into a Quest.\\n    /// @param player The address of the player depositing the tokens.\\n    /// @param depositAmount The deposit amount.\\n    /// @dev This function helps save gas by only setting allowance to this contract.\\n    function depositTokenForQuest(\\n        address player,\\n        uint256 depositAmount\\n    ) external;\\n\\n    /// @notice Creates a Quest in the Hashverse.\\n    /// @param questId The Quest ID.\\n    /// @param startTime The quest start time, in Unix seconds.\\n    /// @param endTime The quest end time, in Unix seconds.\\n    /// @param depositToken The token that needs to be deposited in order for a player to enter.\\n    /// @param minDepositAmount The min amount deposited.\\n    function createQuest(\\n        bytes32 questId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        address depositToken,\\n        uint256 minDepositAmount\\n    ) external;\\n\\n    /// @notice Updates the Hashflow Router contract address.\\n    /// @param hashflowRouter The new Hashflow Router contract address.\\n    function updateHashflowRouter(address hashflowRouter) external;\\n\\n    /// @notice Updates the Quest Owner address.\\n    /// @param questOwner The new Quest Owner address.\\n    function updateQuestOwner(address questOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/core/IRenovaQuest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport '@hashflow/contracts-evm/contracts/interfaces/IHashflowRouter.sol';\\nimport '../nft/IRenovaAvatarBase.sol';\\n\\n/// @title IRenovaQuest\\n/// @author Victor Ionescu\\n/**\\n@notice Contract that represents one Quest. Every Quest gets deployed by the Command Deck.\\n\\nQuests have a start time and end time. Trading happens during those time bounds.\\n\\nQuests each have a deposit token and a minimum deposit amount.\\nOnly one deposit is allowed.\\n\\nDeposits can occur at any time prior to quest end. Withdrawals can occur at any time.\\n\\nPlayers register by depositing.\\n*/\\ninterface IRenovaQuest {\\n    /// @notice Emitted when a token authorization status changes.\\n    /// @param token The address of the token.\\n    /// @param status Whether the token is allowed for trading.\\n    event UpdateTokenAuthorizationStatus(address token, bool status);\\n\\n    /// @notice Emitted when a player registers for a quest.\\n    /// @param player The player registering for the quest.\\n    event RegisterPlayer(address indexed player);\\n\\n    /// @notice Emitted when a player deposits a token for a Quest.\\n    /// @param player The player who deposits the token.\\n    /// @param token The address of the token (0x0 for native token).\\n    /// @param amount The amount of token being deposited.\\n    event DepositToken(address indexed player, address token, uint256 amount);\\n\\n    /// @notice Emitted when a player withdraws a token from a Quest.\\n    /// @param player The player who withdraws the token.\\n    /// @param token The address of the token (0x0 for native token).\\n    /// @param amount The amount of token being withdrawn.\\n    event WithdrawToken(address indexed player, address token, uint256 amount);\\n\\n    /// @notice Emitted when a player trades as part of the Quest.\\n    /// @param player The player who traded.\\n    /// @param baseToken The address of the token the player sold.\\n    /// @param quoteToken The address of the token the player bought.\\n    /// @param baseTokenAmount The amount sold.\\n    /// @param quoteTokenAmount The amount bought.\\n    event Trade(\\n        address indexed player,\\n        address baseToken,\\n        address quoteToken,\\n        uint256 baseTokenAmount,\\n        uint256 quoteTokenAmount\\n    );\\n\\n    /// @notice Returns the Quest start time.\\n    /// @return The Quest start time.\\n    function startTime() external view returns (uint256);\\n\\n    /// @notice Returns the Quest end time.\\n    /// @return The Quest end time.\\n    function endTime() external view returns (uint256);\\n\\n    /// @notice Returns the token to deposit to enter.\\n    /// @return The address of the deposit token.\\n    function depositToken() external view returns (address);\\n\\n    /// @notice Return the minimum deposit amount to enter.\\n    /// @return The minimum deposit amount.\\n    function minDepositAmount() external view returns (uint256);\\n\\n    /// @notice Returns the address that has authority over the quest.\\n    /// @return The address that has authority over the quest.\\n    function questOwner() external view returns (address);\\n\\n    /// @notice Returns whether a player has registered for the Quest.\\n    /// @param player The address of the player.\\n    /// @return Whether the player has registered.\\n    function registered(address player) external view returns (bool);\\n\\n    /// @notice Used by the owner to allow / disallow a token for trading.\\n    /// @param token The address of the token.\\n    /// @param status The authorization status.\\n    function updateTokenAuthorization(address token, bool status) external;\\n\\n    /// @notice Returns whether a token is allowed for deposits / trading.\\n    /// @param token The address of the token.\\n    /// @return Whether the token is allowed for trading.\\n    function allowedTokens(address token) external view returns (bool);\\n\\n    /// @notice Returns the number of registered players.\\n    /// @return The number of registered players.\\n    function numRegisteredPlayers() external view returns (uint256);\\n\\n    /// @notice Returns the token balance for each token the player has in the Quest.\\n    /// @param player The address of the player.\\n    /// @param token The address of the token.\\n    /// @return The player's token balance for this Quest.\\n    function portfolioTokenBalances(\\n        address player,\\n        address token\\n    ) external view returns (uint256);\\n\\n    /// @notice Deposits tokens prior to the beginning of the Quest.\\n    /// @param depositAmount The amount of depositToken to deposit.\\n    function depositAndEnter(uint256 depositAmount) external payable;\\n\\n    /// @notice Withdraws the full balance of the selected tokens from the Quest.\\n    /// @param tokens The addresses of the tokens to withdraw.\\n    function withdrawTokens(address[] memory tokens) external;\\n\\n    /// @notice Trades within the Quest.\\n    /// @param quote The Hashflow Quote.\\n    function trade(IHashflowRouter.RFQTQuote memory quote) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/erc/IERC4906Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906Upgradeable is IERC165Upgradeable, IERC721Upgradeable {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/nft/IRenovaAvatarBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport '../external/erc/IERC4906Upgradeable.sol';\\n\\n/// @title IRenovaAvatarBase\\n/// @author Victor Ionescu\\n/**\\n@notice NFT base contract holding Avatars. In order to play in the Hashverse players\\nhave to mint an Avatar. Avatars are soul-bound (non-transferrable) and represent\\nthe entirety of a player's journey in the Hashverse.\\n\\nAvatars can be minted on multiple chains. Minting new Avatars can only happen on the\\nmain chain. Once an Avatar is minted on the main chain, it can be minted on satellite\\nchains by making cross-chain calls.\\n\\nPlayers have to mint Avatars on each chain if they want to enter a quest that is\\noccurring on that particular chain.\\n*/\\ninterface IRenovaAvatarBase is IERC4906Upgradeable {\\n    enum RenovaFaction {\\n        RESISTANCE,\\n        SOLUS\\n    }\\n\\n    /// @notice Emitted when an Avatar is minted.\\n    /// @param player The owner of the Avatar.\\n    /// @param tokenId The Token ID minted.\\n    /// @param faction The faction of the Avatar.\\n    /// @param characterId The character ID minted.\\n    event Mint(\\n        address indexed player,\\n        uint256 tokenId,\\n        RenovaFaction faction,\\n        uint256 characterId\\n    );\\n\\n    /// @notice Emitted when the Custom Metadata URI is updated.\\n    /// @param uri The new URI.\\n    event UpdateCustomURI(string uri);\\n\\n    /// @notice Returns the faction of a player.\\n    /// @param player The player.\\n    /// @return The faction.\\n    function factions(address player) external view returns (RenovaFaction);\\n\\n    /// @notice Returns the character ID of a player.\\n    /// @param player The player.\\n    /// @return The character ID.\\n    function characterIds(address player) external view returns (uint256);\\n\\n    /// @notice Returns the token ID of a player.\\n    /// @param player The player.\\n    /// @return The token ID.\\n    function tokenIds(address player) external view returns (uint256);\\n\\n    /// @notice Sets a custom base URI for the token metadata.\\n    /// @param customBaseURI The new Custom URI.\\n    function setCustomBaseURI(string memory customBaseURI) external;\\n\\n    /// @notice Emits a refresh metadata event for a token.\\n    /// @param tokenId The ID of the token.\\n    function refreshMetadata(uint256 tokenId) external;\\n\\n    /// @notice Emits a refresh metadata event for all tokens.\\n    function refreshAllMetadata() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"renovaAvatar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hashflowRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_questOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RegisterPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateTokenAuthorizationStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_QUEST_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"depositAndEnter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRegisteredPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"portfolioTokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"externalAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"effectiveTrader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"effectiveBaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IQuote.RFQTQuote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateTokenAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RenovaQuest", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e3cff05ce7d7f1be0e6d80fbc0d9c64bc0b326200000000000000000000000055084ee0fef03f14a305cd24286359a35d73515100000000000000000000000000000000000000000000000000000000652aacfb00000000000000000000000000000000000000000000000000000000652d87d4000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000f42400000000000000000000000002ab6dd39f851eca7948b12352ac8befee594e936", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}