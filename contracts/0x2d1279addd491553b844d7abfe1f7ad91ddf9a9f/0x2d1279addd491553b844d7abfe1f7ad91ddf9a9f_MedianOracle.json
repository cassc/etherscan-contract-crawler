{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Select\r\n * @dev Median Selection Library\r\n */\r\nlibrary Select {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Sorts the input array up to the denoted size, and returns the median.\r\n     * @param array Input array to compute its median.\r\n     * @param size Number of elements in array to compute the median for.\r\n     * @return Median of array.\r\n     */\r\n    function computeMedian(uint256[] array, uint256 size)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(size > 0 && array.length >= size);\r\n        for (uint256 i = 1; i < size; i++) {\r\n            for (uint256 j = i; j > 0 && array[j-1]  > array[j]; j--) {\r\n                uint256 tmp = array[j];\r\n                array[j] = array[j-1];\r\n                array[j-1] = tmp;\r\n            }\r\n        }\r\n        if (size % 2 == 1) {\r\n            return array[size / 2];\r\n        } else {\r\n            return array[size / 2].add(array[size / 2 - 1]) / 2;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IOracle {\r\n    function getData() external returns (uint256, address, bool);\r\n}\r\n\r\n/**\r\n * @title Median Oracle\r\n *\r\n * @notice Provides a value onchain that's aggregated from a whitelisted set of\r\n *         providers.\r\n */\r\ncontract MedianOracle is Ownable, IOracle {\r\n    using SafeMath for uint256;\r\n\r\n    struct Report {\r\n        uint256 timestamp;\r\n        uint256 payload;\r\n    }\r\n\r\n    // Addresses of providers authorized to push reports.\r\n    address[] public providers;\r\n\r\n    // Address of the target asset.\r\n    address public targetAsset;\r\n\r\n    // Reports indexed by provider address. Report[0].timestamp > 0\r\n    // indicates provider existence.\r\n    mapping (address => Report[2]) public providerReports;\r\n\r\n    event ProviderAdded(address provider);\r\n    event ProviderRemoved(address provider);\r\n    event ReportTimestampOutOfRange(address provider);\r\n    event ProviderReportPushed(address indexed provider, uint256 payload, uint256 timestamp);\r\n\r\n    // The number of seconds after which the report is deemed expired.\r\n    uint256 public reportExpirationTimeSec;\r\n\r\n    // The number of seconds since reporting that has to pass before a report\r\n    // is usable.\r\n    uint256 public reportDelaySec;\r\n\r\n    // The minimum number of providers with valid reports to consider the\r\n    // aggregate report valid.\r\n    uint256 public minimumProviders = 1;\r\n\r\n    // Timestamp of 1 is used to mark uninitialized and invalidated data.\r\n    // This is needed so that timestamp of 1 is always considered expired.\r\n    uint256 private constant MAX_REPORT_EXPIRATION_TIME = 520 weeks;\r\n\r\n    /**\r\n    * @param reportExpirationTimeSec_ The number of seconds after which the\r\n    *                                 report is deemed expired.\r\n    * @param reportDelaySec_ The number of seconds since reporting that has to\r\n    *                        pass before a report is usable\r\n    * @param minimumProviders_ The minimum number of providers with valid\r\n    *                          reports to consider the aggregate report valid.\r\n    */\r\n    constructor(uint256 reportExpirationTimeSec_,\r\n                uint256 reportDelaySec_,\r\n                uint256 minimumProviders_)\r\n        public\r\n    {\r\n        require(reportExpirationTimeSec_ <= MAX_REPORT_EXPIRATION_TIME);\r\n        require(minimumProviders_ > 0);\r\n        reportExpirationTimeSec = reportExpirationTimeSec_;\r\n        reportDelaySec = reportDelaySec_;\r\n        minimumProviders = minimumProviders_;\r\n    }\r\n\r\n     /**\r\n     * @notice Sets the report expiration period.\r\n     * @param reportExpirationTimeSec_ The number of seconds after which the\r\n     *        report is deemed expired.\r\n     */\r\n    function setReportExpirationTimeSec(uint256 reportExpirationTimeSec_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(reportExpirationTimeSec_ <= MAX_REPORT_EXPIRATION_TIME);\r\n        reportExpirationTimeSec = reportExpirationTimeSec_;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the time period since reporting that has to pass before a\r\n    *         report is usable.\r\n    * @param reportDelaySec_ The new delay period in seconds.\r\n    */\r\n    function setReportDelaySec(uint256 reportDelaySec_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        reportDelaySec = reportDelaySec_;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the minimum number of providers with valid reports to\r\n    *         consider the aggregate report valid.\r\n    * @param minimumProviders_ The new minimum number of providers.\r\n    */\r\n    function setMinimumProviders(uint256 minimumProviders_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(minimumProviders_ > 0);\r\n        minimumProviders = minimumProviders_;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the asset contract address to track the price.\r\n     * @param targetAsset_ Address of the asset token.\r\n     */\r\n    function setTargetAsset(\r\n        address targetAsset_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        targetAsset = targetAsset_;\r\n    }\r\n\r\n    /**\r\n     * @notice Pushes a report for the calling provider.\r\n     * @param payload is expected to be 18 decimal fixed point number.\r\n     */\r\n    function pushReport(uint256 payload) external\r\n    {\r\n        address providerAddress = msg.sender;\r\n        Report[2] storage reports = providerReports[providerAddress];\r\n        uint256[2] memory timestamps = [reports[0].timestamp, reports[1].timestamp];\r\n\r\n        require(timestamps[0] > 0);\r\n\r\n        uint8 index_recent = timestamps[0] >= timestamps[1] ? 0 : 1;\r\n        uint8 index_past = 1 - index_recent;\r\n\r\n        // Check that the push is not too soon after the last one.\r\n        require(timestamps[index_recent].add(reportDelaySec) <= now);\r\n\r\n        reports[index_past].timestamp = now;\r\n        reports[index_past].payload = payload;\r\n\r\n        emit ProviderReportPushed(providerAddress, payload, now);\r\n    }\r\n\r\n    /**\r\n    * @notice Invalidates the reports of the calling provider.\r\n    */\r\n    function purgeReports() external\r\n    {\r\n        address providerAddress = msg.sender;\r\n        require (providerReports[providerAddress][0].timestamp > 0);\r\n        providerReports[providerAddress][0].timestamp=1;\r\n        providerReports[providerAddress][1].timestamp=1;\r\n    }\r\n\r\n    /**\r\n    * @notice Computes median of provider reports whose timestamps are in the\r\n    *         valid timestamp range.\r\n    * @return AggregatedValue: Median of providers reported values.\r\n    *         valid: Boolean indicating an aggregated value was computed successfully.\r\n    */\r\n    function getData()\r\n        external\r\n        returns (uint256, address, bool)\r\n    {\r\n        uint256 reportsCount = providers.length;\r\n        uint256[] memory validReports = new uint256[](reportsCount);\r\n        uint256 size = 0;\r\n        uint256 minValidTimestamp =  now.sub(reportExpirationTimeSec);\r\n        uint256 maxValidTimestamp =  now.sub(reportDelaySec);\r\n\r\n        for (uint256 i = 0; i < reportsCount; i++) {\r\n            address providerAddress = providers[i];\r\n            Report[2] memory reports = providerReports[providerAddress];\r\n\r\n            uint8 index_recent = reports[0].timestamp >= reports[1].timestamp ? 0 : 1;\r\n            uint8 index_past = 1 - index_recent;\r\n            uint256 reportTimestampRecent = reports[index_recent].timestamp;\r\n            if (reportTimestampRecent > maxValidTimestamp) {\r\n                // Recent report is too recent.\r\n                uint256 reportTimestampPast = providerReports[providerAddress][index_past].timestamp;\r\n                if (reportTimestampPast < minValidTimestamp) {\r\n                    // Past report is too old.\r\n                    emit ReportTimestampOutOfRange(providerAddress);\r\n                } else if (reportTimestampPast > maxValidTimestamp) {\r\n                    // Past report is too recent.\r\n                    emit ReportTimestampOutOfRange(providerAddress);\r\n                } else {\r\n                    // Using past report.\r\n                    validReports[size++] = providerReports[providerAddress][index_past].payload;\r\n                }\r\n            } else {\r\n                // Recent report is not too recent.\r\n                if (reportTimestampRecent < minValidTimestamp) {\r\n                    // Recent report is too old.\r\n                    emit ReportTimestampOutOfRange(providerAddress);\r\n                } else {\r\n                    // Using recent report.\r\n                    validReports[size++] = providerReports[providerAddress][index_recent].payload;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (size < minimumProviders) {\r\n            return (0, targetAsset, false);\r\n        }\r\n\r\n        return (Select.computeMedian(validReports, size), targetAsset, true);\r\n    }\r\n\r\n    /**\r\n     * @notice Authorizes a provider.\r\n     * @param provider Address of the provider.\r\n     */\r\n    function addProvider(address provider)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(providerReports[provider][0].timestamp == 0);\r\n        providers.push(provider);\r\n        providerReports[provider][0].timestamp = 1;\r\n        emit ProviderAdded(provider);\r\n    }\r\n\r\n    /**\r\n     * @notice Revokes provider authorization.\r\n     * @param provider Address of the provider.\r\n     */\r\n    function removeProvider(address provider)\r\n        external\r\n        onlyOwner\r\n    {\r\n        delete providerReports[provider];\r\n        for (uint256 i = 0; i < providers.length; i++) {\r\n            if (providers[i] == provider) {\r\n                if (i + 1  != providers.length) {\r\n                    providers[i] = providers[providers.length-1];\r\n                }\r\n                providers.length--;\r\n                emit ProviderRemoved(provider);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return The number of authorized providers.\r\n     */\r\n    function providersSize()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return providers.length;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"reportDelaySec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payload\",\"type\":\"uint256\"}],\"name\":\"pushReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"addProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAsset_\",\"type\":\"address\"}],\"name\":\"setTargetAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumProviders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purgeReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reportDelaySec_\",\"type\":\"uint256\"}],\"name\":\"setReportDelaySec\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"providersSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reportExpirationTimeSec\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumProviders_\",\"type\":\"uint256\"}],\"name\":\"setMinimumProviders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providerReports\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"payload\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reportExpirationTimeSec_\",\"type\":\"uint256\"}],\"name\":\"setReportExpirationTimeSec\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"reportExpirationTimeSec_\",\"type\":\"uint256\"},{\"name\":\"reportDelaySec_\",\"type\":\"uint256\"},{\"name\":\"minimumProviders_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ReportTimestampOutOfRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payload\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProviderReportPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "MedianOracle", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ed05ed329697bf01d8af11840d4c9d7e446b39e21211ea4a42c079fe5d00a139"}