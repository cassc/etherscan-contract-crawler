{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Ownership contract\r\n// _newOwner is address of new owner\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n    address public liquidityOwner;\r\n    address public teamOwner;\r\n    address public marketingOwner;\r\n    address public platformOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = 0x8f75E4E6110F5112E37B260B3644473cc2085d71;\r\n        liquidityOwner = 0x38676A1d8C2Be34a80BF030C8D5b559a662893C3;\r\n        teamOwner = 0xd44123dBa5068ca9f43475ec623Fe1E58909844C;\r\n        marketingOwner = 0xD68A6eC85ed26Ab35849a2030Af6566be1dec30A;\r\n        platformOwner = 0xeB1E1a490c973Df9f9e2B925cD0f75Dcb33Af40d;\r\n\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // transfer Ownership to other address\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner,_newOwner);\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// Max Supply:  390000000\r\n// ICO : 150000000 \r\n// Liquidity : 70000000\r\n// Team : 20000000  \r\n// Marketing: 10000000\r\n// Platform :  140000000   \r\n\r\n// ----------------------------------------------------------------------------\r\ncontract SatoPay is ERC20Interface, Owned {\r\n    \r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint public icoSupply;\r\n\tuint public liquiditySupply;\r\n    uint public teamSupply;\r\n    uint public marketingSupply;\r\n    uint public platformSupply;\r\n    uint public RATE;\r\n    bool public isStopped = false;\r\n\r\n    mapping(address => uint) balances;\r\n\tmapping(address => uint) buylimit;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    event Mint(address indexed to, uint256 amount);\r\n    event ChangeRate(uint256 amount);\r\n    \r\n    modifier onlyWhenRunning {\r\n        require(!isStopped);\r\n        _;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"STOP\";\r\n        name = \"SatoPay\";\r\n        decimals = 18;\r\n        _totalSupply = 390000000 * 10**uint(decimals);\r\n        icoSupply = 150000000 * 10**uint(decimals);\r\n\t\tliquiditySupply = 70000000 * 10**uint(decimals);\r\n        teamSupply = 20000000 * 10**uint(decimals);\r\n        marketingSupply = 10000000 * 10**uint(decimals);\r\n        platformSupply = 140000000 * 10**uint(decimals);\r\n\r\n        \r\n        balances[owner] = icoSupply;\r\n        balances[liquidityOwner] = liquiditySupply;\r\n        balances[teamOwner] = teamSupply;\r\n        balances[marketingOwner] = marketingSupply;\r\n        balances[platformOwner] = platformSupply;\r\n\r\n      \r\n        RATE = 100000; // 1 ETH = 100000 STOP \r\n        \r\n        emit Transfer(address(0), owner, icoSupply);\r\n        emit Transfer(address(0), liquidityOwner, liquiditySupply);\r\n        emit Transfer(address(0), teamOwner, teamSupply);\r\n        emit Transfer(address(0), marketingOwner, marketingSupply);\r\n        emit Transfer(address(0), platformOwner, platformSupply);\r\n\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // It invokes when someone sends ETH to this contract address\r\n    // requires enough gas for execution\r\n    // ----------------------------------------------------------------------------\r\n    function() public payable {\r\n        \r\n        buyTokens();\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Function to handle eth and token transfers\r\n    // tokens are transferred to user\r\n    // ETH are transferred to current owner\r\n    // ----------------------------------------------------------------------------\r\n    function buyTokens() onlyWhenRunning public payable {\r\n        require(msg.value > 0);\r\n        \r\n        uint tokens = msg.value.mul(RATE);\r\n        require(balances[owner] >= tokens);\r\n        require(buylimit[msg.sender].add(msg.value) <= 25 ether, \"Maximum 25 eth allowed for Buy\");\r\n       \r\n\t\t\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        balances[owner] = balances[owner].sub(tokens);\r\n        buylimit[msg.sender]=buylimit[msg.sender].add(msg.value);\r\n        emit Transfer(owner, msg.sender, tokens);\r\n        \r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        require(to != address(0));\r\n        require(tokens > 0);\r\n        require(balances[msg.sender] >= tokens);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        require(spender != address(0));\r\n        require(tokens > 0);\r\n        \r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(tokens > 0);\r\n        require(balances[from] >= tokens);\r\n        require(allowed[from][msg.sender] >= tokens);\r\n        \r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Increase the amount of tokens that an owner allowed to a spender.\r\n    //\r\n    // approve should be called when allowed[_spender] == 0. To increment\r\n    // allowed value is better to use this function to avoid 2 calls (and wait until\r\n    // the first transaction is mined)\r\n    // _spender The address which will spend the funds.\r\n    // _addedValue The amount of tokens to increase the allowance by.\r\n    // ------------------------------------------------------------------------\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        require(_spender != address(0));\r\n        \r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Decrease the amount of tokens that an owner allowed to a spender.\r\n    //\r\n    // approve should be called when allowed[_spender] == 0. To decrement\r\n    // allowed value is better to use this function to avoid 2 calls (and wait until\r\n    // the first transaction is mined)\r\n    // _spender The address which will spend the funds.\r\n    // _subtractedValue The amount of tokens to decrease the allowance by.\r\n    // ------------------------------------------------------------------------\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        require(_spender != address(0));\r\n        \r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Change the ETH to IO rate\r\n    // ------------------------------------------------------------------------\r\n    function changeRate(uint256 _rate) public onlyOwner {\r\n        require(_rate > 0);\r\n        \r\n        RATE =_rate;\r\n        emit ChangeRate(_rate);\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Function to mint tokens\r\n    // _to The address that will receive the minted tokens.\r\n    // _amount The amount of tokens to mint.\r\n    // A boolean that indicates if the operation was successful.\r\n    // ------------------------------------------------------------------------\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_amount > 0);\r\n        \r\n        uint newamount = _amount * 10**uint(decimals);\r\n        _totalSupply = _totalSupply.add(newamount);\r\n        balances[_to] = balances[_to].add(newamount);\r\n        \r\n        emit Mint(_to, newamount);\r\n        emit Transfer(address(0), _to, newamount);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // function to stop the ICO\r\n    // ------------------------------------------------------------------------\r\n    function stopICO() onlyOwner public {\r\n        isStopped = true;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // function to resume ICO\r\n    // ------------------------------------------------------------------------\r\n    function resumeICO() onlyOwner public {\r\n        isStopped = false;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquiditySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "SatoPay", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f34da8141e710279c453a42682e65871f33d7d07ace4c3728a18ca8ef0540e1d"}