{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20UniswapV2InternalSwaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IUniswapV2Pair {\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function mint(address to) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IERC20 {\\n    function transferFrom(address from, address to, uint amount) external;\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function approve(address spender, uint256 amount) external;\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n}\\n\\n/**\\n * @notice UniswapV2Pair does not allow to receive to token0 or token1.\\n * As a workaround, this contract can receive tokens and has max approval\\n * for the creator.\\n */\\ncontract ERC20HolderWithApproval {\\n    constructor(address token) {\\n        IERC20(token).approve(msg.sender, type(uint256).max);\\n    }\\n}\\n\\n/**\\n * @notice Gas optimized ERC20 token based on solmate's ERC20 contract.\\n * @dev Optimizations assume a UniswapV2 WETH pair as main liquidity.\\n */\\nabstract contract ERC20UniswapV2InternalSwaps {\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant FACTORY =\\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address private immutable wethReceiver;\\n    address public immutable pair;\\n\\n    error InvalidAddress();\\n\\n    constructor() {\\n        // assumption to save additional gas\\n        if (address(this) >= WETH) {\\n            revert InvalidAddress();\\n        }\\n        pair = IUniswapV2Factory(FACTORY).createPair(address(this), WETH);\\n        wethReceiver = address(new ERC20HolderWithApproval(WETH));\\n    }\\n\\n    /**\\n     * @dev Swap tokens to WETH directly on pair, to save gas.\\n     * No check for minimal return, susceptible to price manipulation!\\n     */\\n    function _swapForWETH(uint amountToken, address to) internal {\\n        uint amountWeth = _getAmountWeth(amountToken);\\n        _transferFromContractBalance(pair, amountToken);\\n        // Pair prevents receiving tokens to one of the pairs addresses\\n        IUniswapV2Pair(pair).swap(0, amountWeth, wethReceiver, new bytes(0));\\n        IERC20(WETH).transferFrom(wethReceiver, to, amountWeth);\\n    }\\n\\n    /**\\n     * @dev Add tokens and WETH to liquidity, directly on pair, to save gas.\\n     * No check for minimal return, susceptible to price manipulation!\\n     * Sufficient WETH in contract balancee assumed!\\n     */\\n    function _addLiquidity(\\n        uint amountToken,\\n        address to\\n    ) internal returns (uint amountWeth) {\\n        amountWeth = _quoteToken(amountToken);\\n        _transferFromContractBalance(pair, amountToken);\\n        IERC20(WETH).transferFrom(address(this), pair, amountWeth);\\n        IUniswapV2Pair(pair).mint(to);\\n    }\\n\\n    /**\\n     * @dev Add tokens and WETH as initial liquidity, directly on pair, to save gas.\\n     * No checks performed. Caller has to make sure to have access to the token before public!\\n     * Sufficient WETH in contract balancee assumed!\\n     */\\n    function _addInitialLiquidity(\\n        uint amountToken,\\n        uint amountWeth,\\n        address to\\n    ) internal {\\n        _transferFromContractBalance(pair, amountToken);\\n        IERC20(WETH).transferFrom(address(this), pair, amountWeth);\\n        IUniswapV2Pair(pair).mint(to);\\n    }\\n\\n    /**\\n     * @dev Add tokens and ETH as initial liquidity, directly on pair, to save gas.\\n     * No checks performed. Caller has to make sure to have access to the token before public!\\n     * Sufficient ETH in contract balancee assumed!\\n     */\\n    function _addInitialLiquidityEth(\\n        uint amountToken,\\n        uint amountEth,\\n        address to\\n    ) internal {\\n        IWETH(WETH).deposit{value: amountEth}();\\n        _addInitialLiquidity(amountToken, amountEth, to);\\n    }\\n\\n    /** @dev Transfer all WETH from contract balance to `to`. */\\n    function _sweepWeth(address to) internal returns (uint amountWeth) {\\n        amountWeth = IERC20(WETH).balanceOf(address(this));\\n        IERC20(WETH).transferFrom(address(this), to, amountWeth);\\n    }\\n\\n    /** @dev Transfer all ETH from contract balance to `to`. */\\n    function _sweepEth(address to) internal {\\n        _safeTransferETH(to, address(this).balance);\\n    }\\n\\n    /** @dev Quote `amountToken` in ETH, assuming no fees (used for liquidity). */\\n    function _quoteToken(\\n        uint amountToken\\n    ) internal view returns (uint amountEth) {\\n        (uint reserveToken, uint reserveEth) = IUniswapV2Pair(pair)\\n            .getReserves();\\n        amountEth = (amountToken * reserveEth) / reserveToken;\\n    }\\n\\n    /** @dev Quote `amountToken` in WETH, assuming 0.3% uniswap fees (used for swap). */\\n    function _getAmountWeth(\\n        uint amounToken\\n    ) internal view returns (uint amountWeth) {\\n        (uint reserveToken, uint reserveWeth) = IUniswapV2Pair(pair)\\n            .getReserves();\\n        uint amountTokenWithFee = amounToken * 997;\\n        uint numerator = amountTokenWithFee * reserveWeth;\\n        uint denominator = (reserveToken * 1000) + amountTokenWithFee;\\n        amountWeth = numerator / denominator;\\n    }\\n\\n    /** @dev Quote `amountWeth` in tokens, assuming 0.3% uniswap fees (used for swap). */\\n    function _getAmountToken(\\n        uint amounWeth,\\n        uint reserveToken,\\n        uint reserveWeth\\n    ) internal pure returns (uint amountToken) {\\n        uint numerator = reserveToken * amounWeth * 1000;\\n        uint denominator = (reserveWeth - amounWeth) * 997;\\n        amountToken = (numerator / denominator) + 1;\\n    }\\n\\n    /** @dev Get reserves of pair. */\\n    function _getReserve()\\n        internal\\n        view\\n        returns (uint reserveToken, uint reserveWeth)\\n    {\\n        (reserveToken, reserveWeth) = IUniswapV2Pair(pair).getReserves();\\n    }\\n\\n    /** @dev Transfer `amount` ETH to `to` gas efficiently. */\\n    function _safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /** @dev Returns true if `_address` is a contract. */\\n    function _isContract(address _address) internal view returns (bool) {\\n        uint32 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_address)\\n        }\\n        return (size > 0);\\n    }\\n\\n    /** @dev Transfeer `amount` tokens from contract balance to `to`. */\\n    function _transferFromContractBalance(\\n        address to,\\n        uint256 amount\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/Pepeland.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20UniswapV2InternalSwaps} from \\\"./ERC20UniswapV2InternalSwaps.sol\\\";\\n\\ncontract Pepeland is ERC20, Ownable, ERC20UniswapV2InternalSwaps {\\n    /** @notice Minimum threshold in ETH to trigger #swapTokensAndAddLiquidity. */\\n    uint256 public constant SWAP_THRESHOLD_ETH_MIN = 0.005 ether;\\n    /** @notice Maximum threshold in ETH to trigger #swapTokensAndAddLiquidity. */\\n    uint256 public constant SWAP_THRESHOLD_ETH_MAX = 50 ether;\\n\\n    uint256 private constant _SHARE_LIQUIDITY = 70;\\n    uint256 private constant _MAX_SUPPLY = 8_888_888_888 ether;\\n    uint256 private constant _SUPPLY_LIQUIDITY =\\n        (_MAX_SUPPLY * _SHARE_LIQUIDITY) / 100;\\n    uint256 private constant _LAUNCH_BUY_TAX = 0;\\n    uint256 private constant _LAUNCH_SELL_TAX = 69_00;\\n\\n    /** @notice Tax recipient wallet. */\\n    address public taxRecipient;\\n    /** @notice Whether address is extempt from transfer tax. */\\n    mapping(address => bool) public taxFreeAccount;\\n    /** @notice Whether address is an exchange pool. */\\n    mapping(address => bool) public isExchangePool;\\n    /** @notice Threshold in ETH of tokens to collect before triggering #swapTokensAndAddLiquidity. */\\n    uint256 public swapThresholdEth = 0.1 ether;\\n    /** @notice Tax manager. @dev Can **NOT** change transfer taxes. */\\n    address public taxManager;\\n    /** @notice Buy tax in bps (4.20%). In first hour after adding liquidity, buy tax will be #_LAUNCH_BUY_TAX. */\\n    uint256 public buyTax = 4_20;\\n    /** @notice Sell tax in bps (6.9%). In first hour after adding liquidity, sell tax will be #_LAUNCH_SELL_TAX. */\\n    uint256 public sellTax = 6_90;\\n\\n    uint256 private _launchTaxEndsAt = type(uint256).max;\\n\\n\\n    event TaxRecipientChanged(address indexed taxRecipient);\\n    event SwapThresholdChanged(uint256 swapThresholdEth);\\n    event TaxFreeStateChanged(address indexed account, bool indexed taxFree);\\n    event ExchangePoolStateChanged(\\n        address indexed account,\\n        bool indexed isExchangePool\\n    );\\n    event TaxManagerChanged(address indexed taxManager);\\n    event TaxesChanged(uint256 newBuyTax, uint256 newSellTax);\\n    event TaxesWithdrawn(uint256 amount);\\n\\n    error Unauthorized();\\n    error InvalidParameters();\\n    error InvalidSwapThreshold();\\n    error InvalidTax();\\n\\n    modifier onlyTaxManager() {\\n        if (msg.sender != taxManager) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        address _taxRecipient,\\n        address _taxManager\\n    ) ERC20(\\\"Pepeland\\\", \\\"Pepeland\\\") {\\n        _transferOwnership(_owner);\\n\\n        taxManager = _taxManager;\\n        emit TaxManagerChanged(_taxManager);\\n        taxRecipient = _taxRecipient;\\n        emit TaxRecipientChanged(_taxRecipient);\\n\\n        taxFreeAccount[_taxRecipient] = true;\\n        emit TaxFreeStateChanged(_taxRecipient, true);\\n        taxFreeAccount[address(this)] = true;\\n        emit TaxFreeStateChanged(address(this), true);\\n        isExchangePool[pair] = true;\\n        emit ExchangePoolStateChanged(pair, true);\\n        emit TaxesChanged(buyTax, sellTax);\\n\\n        _mint(address(this), _SUPPLY_LIQUIDITY);\\n        _mint(_taxRecipient, _MAX_SUPPLY - _SUPPLY_LIQUIDITY);\\n    }\\n\\n    // *** Owner Interface ***\\n\\n    /**\\n     * @notice Launch the token by providing liquidity.\\n     * @dev Only callable by owner, renounces ownership.\\n     */\\n    function launch() external payable onlyOwner {\\n        _addInitialLiquidityEth(_SUPPLY_LIQUIDITY, msg.value, msg.sender);\\n\\n        _launchTaxEndsAt = block.timestamp + 60 minutes;\\n\\n        renounceOwnership();\\n    }\\n\\n    // *** Tax Manager Interface ***\\n\\n    /**\\n     * @notice Set `taxFree` state of `account`.\\n     * @param account account\\n     * @param taxFree true if `account` should be extempt from transfer taxes.\\n     * @dev Only callable by taxManager.\\n     */\\n    function setTaxFreeAccount(\\n        address account,\\n        bool taxFree\\n    ) external onlyTaxManager {\\n        if (taxFreeAccount[account] == taxFree) {\\n            revert InvalidParameters();\\n        }\\n        taxFreeAccount[account] = taxFree;\\n        emit TaxFreeStateChanged(account, taxFree);\\n    }\\n\\n    /**\\n     * @notice Set `exchangePool` state of `account`\\n     * @param account account\\n     * @param exchangePool whether `account` is an exchangePool\\n     * @dev ExchangePool state is used to decide if transfer is a swap\\n     * and should trigger #swapTokensAndAddLiquidity.\\n     */\\n    function setExchangePool(\\n        address account,\\n        bool exchangePool\\n    ) external onlyTaxManager {\\n        if (isExchangePool[account] == exchangePool) {\\n            revert InvalidParameters();\\n        }\\n        isExchangePool[account] = exchangePool;\\n        emit ExchangePoolStateChanged(account, exchangePool);\\n    }\\n\\n    /**\\n     * @notice Transfer taxManager role to `newTaxManager`.\\n     * @param newTaxManager new taxManager\\n     * @dev Only callable by taxManager.\\n     */\\n    function transferTaxManager(address newTaxManager) external onlyTaxManager {\\n        if (newTaxManager == taxManager) {\\n            revert InvalidParameters();\\n        }\\n        taxManager = newTaxManager;\\n        emit TaxManagerChanged(newTaxManager);\\n    }\\n\\n    /**\\n     * @notice Set taxRecipient address to `newTaxRecipient`.\\n     * @param newTaxRecipient new taxRecipient\\n     * @dev Only callable by taxManager.\\n     */\\n    function setTaxRecipient(address newTaxRecipient) external onlyTaxManager {\\n        if (newTaxRecipient == taxRecipient) {\\n            revert InvalidParameters();\\n        }\\n        taxRecipient = newTaxRecipient;\\n        emit TaxRecipientChanged(newTaxRecipient);\\n    }\\n\\n    /**\\n     * @notice Withdraw tax collected (which would usually be automatically swapped to weth) to taxRecipient\\n     * @dev Only callable by taxManager.\\n     */\\n    function withdrawTaxes() external onlyTaxManager {\\n        uint256 balance = balanceOf(address(this));\\n        if (balance > 0) {\\n            super._transfer(address(this), taxRecipient, balance);\\n            emit TaxesWithdrawn(balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Change the amount of tokens collected via tax before a swap is triggered.\\n     * @param newSwapThresholdEth new threshold received in ETH\\n     * @dev Only callable by taxManager\\n     */\\n    function setSwapThresholdEth(\\n        uint256 newSwapThresholdEth\\n    ) external onlyTaxManager {\\n        if (\\n            newSwapThresholdEth < SWAP_THRESHOLD_ETH_MIN ||\\n            newSwapThresholdEth > SWAP_THRESHOLD_ETH_MAX ||\\n            newSwapThresholdEth == swapThresholdEth\\n        ) {\\n            revert InvalidSwapThreshold();\\n        }\\n        swapThresholdEth = newSwapThresholdEth;\\n        emit SwapThresholdChanged(newSwapThresholdEth);\\n    }\\n\\n    /**\\n     * @notice Set tax for buying and selling the token\\n     * @param newBuyTax new buy tax in bps\\n     * @param newSellTax new sell tax in bps\\n     * @dev Only callable by taxManager\\n     */\\n    function lowerTaxes(\\n        uint256 newBuyTax,\\n        uint256 newSellTax\\n    ) external onlyTaxManager {\\n        if (\\n            newBuyTax >= buyTax ||\\n            newSellTax >= sellTax\\n        ) {\\n            revert InvalidTax();\\n        }\\n        buyTax = newBuyTax;\\n        sellTax = newSellTax;\\n        emit TaxesChanged(newBuyTax, newSellTax);\\n    }\\n\\n    /**\\n     * @notice Threshold of how many tokens to collect from tax before calling #swapTokens.\\n     * @dev Depends on swapThresholdEth which can be configured by taxManager.\\n     * Restricted to 5% of liquidity.\\n     */\\n    function swapThresholdToken() public view returns (uint256) {\\n        (uint reserveToken, uint reserveWeth) = _getReserve();\\n        uint256 maxSwapEth = (reserveWeth * 5) / 100;\\n        return\\n            _getAmountToken(\\n                swapThresholdEth > maxSwapEth ? maxSwapEth : swapThresholdEth,\\n                reserveToken,\\n                reserveWeth\\n            );\\n    }\\n\\n    // *** Internal Interface ***\\n\\n    /** @notice IERC20#_transfer */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (\\n            !taxFreeAccount[from] &&\\n            !taxFreeAccount[to] &&\\n            !taxFreeAccount[msg.sender]\\n        ) {\\n            uint256 fee = (amount *\\n                (\\n                    isExchangePool[from] /* buying */\\n                        ? (\\n                            block.timestamp > _launchTaxEndsAt\\n                                ? _LAUNCH_BUY_TAX\\n                                : buyTax\\n                        )\\n                        : (\\n                            block.timestamp > _launchTaxEndsAt\\n                                ? _LAUNCH_SELL_TAX\\n                                : sellTax\\n                        )\\n                )) / 100_00;\\n            super._transfer(from, address(this), fee);\\n            unchecked {\\n                amount -= fee;\\n            }\\n\\n            if (isExchangePool[to]) /* selling */ {\\n                _swapTokens(swapThresholdToken());\\n            }\\n        }\\n        super._transfer(from, to, amount);\\n    }\\n\\n    /** @dev Transfeer `amount` tokens from contract balance to `to`. */\\n    function _transferFromContractBalance(\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        super._transfer(address(this), to, amount);\\n    }\\n\\n    /**\\n     * @notice Swap `amountToken` collected from tax to WETH to add to send to taxRecipient.\\n     */\\n    function _swapTokens(uint256 amountToken) internal {\\n        if (balanceOf(address(this)) < amountToken) {\\n            return;\\n        }\\n\\n        _swapForWETH(amountToken, taxRecipient);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isExchangePool\",\"type\":\"bool\"}],\"name\":\"ExchangePoolStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapThresholdEth\",\"type\":\"uint256\"}],\"name\":\"SwapThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"taxFree\",\"type\":\"bool\"}],\"name\":\"TaxFreeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taxManager\",\"type\":\"address\"}],\"name\":\"TaxManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taxRecipient\",\"type\":\"address\"}],\"name\":\"TaxRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"TaxesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TaxesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SWAP_THRESHOLD_ETH_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_THRESHOLD_ETH_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExchangePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"lowerTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exchangePool\",\"type\":\"bool\"}],\"name\":\"setExchangePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapThresholdEth\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholdEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"taxFree\",\"type\":\"bool\"}],\"name\":\"setTaxFreeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxRecipient\",\"type\":\"address\"}],\"name\":\"setTaxRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxFreeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxManager\",\"type\":\"address\"}],\"name\":\"transferTaxManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pepeland", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000fae71fd9eb8b530e6b0d21afef04e1a7a794e516000000000000000000000000a30279fa40682821d5441239102c78788672e57e000000000000000000000000a30279fa40682821d5441239102c78788672e57e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}