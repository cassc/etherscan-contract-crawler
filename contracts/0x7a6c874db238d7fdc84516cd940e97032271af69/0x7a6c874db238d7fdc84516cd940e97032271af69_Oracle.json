{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {Math} from \\\"openzeppelin/utils/math/Math.sol\\\";\\n\\nimport {ProtocolEvents} from \\\"./interfaces/ProtocolEvents.sol\\\";\\nimport {\\n    IOracle,\\n    IOracleReadRecord,\\n    IOracleReadPending,\\n    IOracleWrite,\\n    IOracleManager,\\n    OracleRecord\\n} from \\\"./interfaces/IOracle.sol\\\";\\nimport {IStakingInitiationRead} from \\\"./interfaces/IStaking.sol\\\";\\nimport {IReturnsAggregatorWrite} from \\\"./interfaces/IReturnsAggregator.sol\\\";\\nimport {IPauser} from \\\"./interfaces/IPauser.sol\\\";\\n\\n/// @notice Events emitted by the oracle contract.\\ninterface OracleEvents {\\n    /// @notice Emitted when a new oracle record was added to the list of oracle records. A pending record will only\\n    /// emit this event if it was accepted by the admin.\\n    /// @param index The index of the new record.\\n    /// @param record The new record that was added to the list.\\n    event OracleRecordAdded(uint256 indexed index, OracleRecord record);\\n\\n    /// @notice Emitted when a record has been modified.\\n    /// @param index The index of the record that was modified.\\n    /// @param record The newly modified record.\\n    event OracleRecordModified(uint256 indexed index, OracleRecord record);\\n\\n    /// @notice Emitted when a pending update has been rejected.\\n    /// @param pendingUpdate The rejected pending update.\\n    event OraclePendingUpdateRejected(OracleRecord pendingUpdate);\\n\\n    /// @notice Emitted when the oracle's record did not pass a sanity check.\\n    /// @param reasonHash The hash of the reason for the record rejection.\\n    /// @param reason The reason for the record rejection.\\n    /// @param record The record that was rejected.\\n    /// @param value The value that violated a bound.\\n    /// @param bound The bound of the rejected update.\\n    event OracleRecordFailedSanityCheck(\\n        bytes32 indexed reasonHash, string reason, OracleRecord record, uint256 value, uint256 bound\\n    );\\n}\\n\\n/// @title Oracle\\n/// @notice The oracle contract stores records which are snapshots of consensus layer state over discrete periods of\\n/// time. These records provide consensus layer data to the protocol's onchain contracts for their accounting logic.\\ncontract Oracle is Initializable, AccessControlEnumerableUpgradeable, IOracle, OracleEvents, ProtocolEvents {\\n    // Errors.\\n    error CannotUpdateWhileUpdatePending();\\n    error CannotModifyInitialRecord();\\n    error InvalidConfiguration();\\n    error InvalidRecordModification();\\n    error InvalidUpdateStartBlock(uint256 wantUpdateStartBlock, uint256 gotUpdateStartBlock);\\n    error InvalidUpdateEndBeforeStartBlock(uint256 end, uint256 start);\\n    error InvalidUpdateMoreDepositsProcessedThanSent(uint256 processed, uint256 sent);\\n    error InvalidUpdateMoreValidatorsThanInitiated(uint256 numValidatorsOnRecord, uint256 numInitiatedValidators);\\n    error NoUpdatePending();\\n    error Paused();\\n    error RecordDoesNotExist(uint256 idx);\\n    error UnauthorizedOracleUpdater(address sender, address oracleUpdater);\\n    error UpdateEndBlockNumberNotFinal(uint256 updateFinalizingBlock);\\n    error ZeroAddress();\\n\\n    /// @notice Role allowed to modify the settable properties on the contract.\\n    bytes32 public constant ORACLE_MANAGER_ROLE = keccak256(\\\"ORACLE_MANAGER_ROLE\\\");\\n\\n    /// @notice Role allowed to modify an existing oracle record.\\n    bytes32 public constant ORACLE_MODIFIER_ROLE = keccak256(\\\"ORACLE_MODIFIER_ROLE\\\");\\n\\n    /// @notice Role allowed to resolve or replace pending oracle updates which have failed the sanity check.\\n    bytes32 public constant ORACLE_PENDING_UPDATE_RESOLVER_ROLE = keccak256(\\\"ORACLE_PENDING_UPDATE_RESOLVER_ROLE\\\");\\n\\n    /// @notice Finalization block number delta upper bound for the setter.\\n    uint256 internal constant _FINALIZATION_BLOCK_NUMBER_DELTA_UPPER_BOUND = 2048;\\n\\n    /// @notice Stores the oracle records.\\n    /// @dev Must not be pushed directly to, use `_pushRecord` instead.\\n    OracleRecord[] internal _records;\\n\\n    /// @inheritdoc IOracleReadPending\\n    bool public hasPendingUpdate;\\n\\n    /// @notice The pending oracle update, if it was rejected by `_sanityCheckUpdate`.\\n    /// @dev Undefined if `hasPendingUpdate` is false.\\n    OracleRecord internal _pendingUpdate;\\n\\n    // @notice The number of blocks which must have passed before we accept an oracle update to ensure that the analysed\\n    // period is finalised.\\n    // NOTE: We cannot make guarantees about the consensus layer's state, but it is expected that\\n    // finalisation takes 2 epochs.\\n    uint256 public finalizationBlockNumberDelta;\\n\\n    /// @notice The address allowed to push oracle updates.\\n    address public oracleUpdater;\\n\\n    /// @notice The pauser contract.\\n    /// @dev Keeps the pause state across the protocol.\\n    IPauser public pauser;\\n\\n    /// @notice The staking contract.\\n    /// @dev Quantities tracked by the staking contract during validator initiation are used to sanity check oracle\\n    /// updates.\\n    IStakingInitiationRead public staking;\\n\\n    /// @notice The aggregator contract.\\n    /// @dev Called when pushing an oracle record to process.\\n    IReturnsAggregatorWrite public aggregator;\\n\\n    //\\n    // Sanity check parameters\\n    //\\n\\n    /// @notice The minimum deposit per new validator (on average).\\n    /// @dev This is used to put constraints on the reported processed deposits. Even thought this will foreseeably be\\n    /// 32 ETH, we keep it as a configurable parameter to allow for future changes.\\n    uint256 public minDepositPerValidator;\\n\\n    /// @notice The maximum deposit per new validator (on average).\\n    /// @dev This is used to put constraints on the reported processed deposits. Even thought this will foreseeably be\\n    /// 32 ETH, we keep it as a configurable parameter to allow for future changes.\\n    uint256 public maxDepositPerValidator;\\n\\n    /// @notice The minimum consensus layer gain per block (in part-per-trillion, i.e. in units of 1e-12).\\n    /// @dev This is used to put constraints on the reported change of the total consensus layer balance.\\n    uint40 public minConsensusLayerGainPerBlockPPT;\\n\\n    /// @notice The maximum consensus layer gain per block (in part-per-trillion, i.e. in units of 1e-12).\\n    /// @dev This is used to put constraints on the reported change of the total consensus layer balance.\\n    uint40 public maxConsensusLayerGainPerBlockPPT;\\n\\n    /// @notice The maximum consensus layer loss (in part-per-million, i.e. in units of 1e-6).\\n    /// This value doesn't scale with time and represents a total loss over a given period, remaining independent of the\\n    /// blocks. It encapsulates scenarios such as a single substantial slashing event or concurrent off-chain oracle\\n    /// service downtime with validators incurring attestation penalties.\\n    /// @dev This is used to put constraints on the reported change of the total consensus layer balance.\\n    uint24 public maxConsensusLayerLossPPM;\\n\\n    /// @notice The minimum report size to allow for any report.\\n    /// @dev This value helps defend against the extreme bounds of checks in the case of malicious oracles.\\n    uint16 public minReportSizeBlocks;\\n\\n    /// @notice The denominator of a parts-per-million (PPM) fraction.\\n    uint24 internal constant _PPM_DENOMINATOR = 1e6;\\n\\n    /// @notice The denominator of a parts-per-trillion (PPT) fraction.\\n    uint40 internal constant _PPT_DENOMINATOR = 1e12;\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        address manager;\\n        address oracleUpdater;\\n        address pendingResolver;\\n        IReturnsAggregatorWrite aggregator;\\n        IPauser pauser;\\n        IStakingInitiationRead staking;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        // We intentionally do not assign an address to the ORACLE_MODIFIER_ROLE. This is to prevent\\n        // unintentional oracle modifications outside of exceptional circumstances.\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        _grantRole(ORACLE_MANAGER_ROLE, init.manager);\\n        _grantRole(ORACLE_PENDING_UPDATE_RESOLVER_ROLE, init.pendingResolver);\\n\\n        aggregator = init.aggregator;\\n        oracleUpdater = init.oracleUpdater;\\n        pauser = init.pauser;\\n        staking = init.staking;\\n\\n        // Assumes 2 epochs (in blocks).\\n        finalizationBlockNumberDelta = 64;\\n\\n        minReportSizeBlocks = 100;\\n        minDepositPerValidator = 32 ether;\\n        maxDepositPerValidator = 32 ether;\\n\\n        // 7200 slots per day * 365 days per year = 2628000 slots per year\\n        // assuming 5% yield per year\\n        // 5% / 2628000 = 1.9025e-8\\n        // 1.9025e-8 per slot = 19025 PPT\\n        maxConsensusLayerGainPerBlockPPT = 190250; // 10x approximate rate\\n        minConsensusLayerGainPerBlockPPT = 1903; // 0.1x approximate rate\\n\\n        // We chose a lower bound of a 0.1% loss for the protocol based on several factors:\\n        //\\n        // - Sanity check should not fail for normal operations where we define normal operations as attestation\\n        // penalties due to offline validators. Supposing all our validators go offline, the protocol is expected\\n        // to have a 0.03% missed attestation penalty on mainnet for all validators' balance for a single day.\\n        // - For a major slashing event, (i.e. 1 ETH slashed for half of our validators), we should expect a drop of\\n        // 1.56% of the entire protocol. This *must* trigger the consensus layer loss lower bound.\\n        maxConsensusLayerLossPPM = 1000;\\n\\n        // Initializing the oracle with a zero record, so that all contract functions (e.g. `latestRecord`) work as\\n        // expected. We set updateEndBlock to be the block at which the staking contract was initialized, so that the\\n        // first time an Oracle computes a report, it doesn't bother looking at blocks earlier than when the protocol\\n        // was deployed. That would be a waste, as our system would not have been running then.\\n        _pushRecord(OracleRecord(0, uint64(staking.initializationBlockNumber()), 0, 0, 0, 0, 0, 0));\\n    }\\n\\n    /// @inheritdoc IOracleWrite\\n    /// @dev Reverts if the update is invalid. If the update is valid but does not pass the `_sanityCheckUpdate`, the\\n    /// update is marked as pending and must be approved or replaced by the `ORACLE_PENDING_UPDATE_RESOLVER_ROLE`. If\\n    /// the update fails the sanity check, it will also pause the protocol.\\n    /// @param newRecord The oracle record to update to.\\n    function receiveRecord(OracleRecord calldata newRecord) external {\\n        if (pauser.isSubmitOracleRecordsPaused()) {\\n            revert Paused();\\n        }\\n\\n        if (msg.sender != oracleUpdater) {\\n            revert UnauthorizedOracleUpdater(msg.sender, oracleUpdater);\\n        }\\n\\n        if (hasPendingUpdate) {\\n            revert CannotUpdateWhileUpdatePending();\\n        }\\n\\n        validateUpdate(_records.length - 1, newRecord);\\n\\n        uint256 updateFinalizingBlock = newRecord.updateEndBlock + finalizationBlockNumberDelta;\\n        if (block.number < updateFinalizingBlock) {\\n            revert UpdateEndBlockNumberNotFinal(updateFinalizingBlock);\\n        }\\n\\n        (string memory rejectionReason, uint256 value, uint256 bound) = sanityCheckUpdate(latestRecord(), newRecord);\\n        if (bytes(rejectionReason).length > 0) {\\n            _pendingUpdate = newRecord;\\n            hasPendingUpdate = true;\\n            emit OracleRecordFailedSanityCheck({\\n                reasonHash: keccak256(bytes(rejectionReason)),\\n                reason: rejectionReason,\\n                record: newRecord,\\n                value: value,\\n                bound: bound\\n            });\\n            // Failing the sanity check will pause the protocol providing the admins time to accept or reject the\\n            // pending update.\\n            pauser.pauseAll();\\n            return;\\n        }\\n\\n        _pushRecord(newRecord);\\n    }\\n\\n    /// @notice Modifies an existing record's balances due to errors or malicious behavior. Modifiying the latest\\n    /// oracle record will have an effect on the total controlled supply, thereby altering the exchange rate.\\n    /// Note that users who have already requested to unstake, and are in the queue, will not be affected by the new\\n    /// exchange rate.\\n    /// @dev This function should only be called in an emergency situation where the oracle has posted an invalid\\n    /// record, either due to a calculations issue (or in the unlikely event of a compromise). If the new record\\n    /// reports higher returns in the window, then we need to reprocess the difference. If the new record reports\\n    /// lower returns in the window, then we need to top up the difference in the consensusLayerReceiver wallet. Without\\n    /// adding the missing funds in the consensusLayerReceiver wallet this function will revert in the future.\\n    /// @param idx The index of the oracle record to modify.\\n    /// @param record The new oracle record that will modify the existing one.\\n    function modifyExistingRecord(uint256 idx, OracleRecord calldata record) external onlyRole(ORACLE_MODIFIER_ROLE) {\\n        if (idx == 0) {\\n            revert CannotModifyInitialRecord();\\n        }\\n\\n        if (idx >= _records.length) {\\n            revert RecordDoesNotExist(idx);\\n        }\\n\\n        OracleRecord storage existingRecord = _records[idx];\\n        // Cannot modify the bounds of the record to prevent gaps in the\\n        // records.\\n        if (\\n            existingRecord.updateStartBlock != record.updateStartBlock\\n                || existingRecord.updateEndBlock != record.updateEndBlock\\n        ) {\\n            revert InvalidRecordModification();\\n        }\\n\\n        validateUpdate(idx - 1, record);\\n\\n        // If the new record has a higher windowWithdrawnRewardAmount or windowWithdrawnPrincipalAmount, we need to\\n        // process the difference. If this is the case, then when we processed the event, we didn't take enough from\\n        // the consensus layer returns wallet.\\n        uint256 missingRewards = 0;\\n        uint256 missingPrincipals = 0;\\n\\n        if (record.windowWithdrawnRewardAmount > existingRecord.windowWithdrawnRewardAmount) {\\n            missingRewards = record.windowWithdrawnRewardAmount - existingRecord.windowWithdrawnRewardAmount;\\n        }\\n        if (record.windowWithdrawnPrincipalAmount > existingRecord.windowWithdrawnPrincipalAmount) {\\n            missingPrincipals = record.windowWithdrawnPrincipalAmount - existingRecord.windowWithdrawnPrincipalAmount;\\n        }\\n\\n        _records[idx] = record;\\n        emit OracleRecordModified(idx, record);\\n\\n        // Move external call to the end to avoid any reentrancy issues.\\n        if (missingRewards > 0 || missingPrincipals > 0) {\\n            aggregator.processReturns({\\n                rewardAmount: missingRewards,\\n                principalAmount: missingPrincipals,\\n                shouldIncludeELRewards: false\\n            });\\n        }\\n    }\\n\\n    /// @notice Check that the new oracle record is technically valid by comparing it to the previous\\n    /// record.\\n    /// @dev Reverts if the oracle record fails to pass validation. This is much stricter compared to the sanityCheck\\n    /// as the validation logic ensures that our oracle invariants are kept intact.\\n    /// @param prevRecordIndex The index of the previous record.\\n    /// @param newRecord The oracle record to validate.\\n    function validateUpdate(uint256 prevRecordIndex, OracleRecord calldata newRecord) public view {\\n        OracleRecord storage prevRecord = _records[prevRecordIndex];\\n        if (newRecord.updateEndBlock <= newRecord.updateStartBlock) {\\n            revert InvalidUpdateEndBeforeStartBlock(newRecord.updateEndBlock, newRecord.updateStartBlock);\\n        }\\n\\n        // Ensure that oracle records are aligned i.e. making sure that the new record window picks up where the\\n        // previous one left off.\\n        if (newRecord.updateStartBlock != prevRecord.updateEndBlock + 1) {\\n            revert InvalidUpdateStartBlock(prevRecord.updateEndBlock + 1, newRecord.updateStartBlock);\\n        }\\n\\n        // Ensure that the offchain oracle has only tracked deposits from the protocol. The processed deposits on the\\n        // consensus layer can be at most the amount of ether the protocol has deposited into the deposit contract.\\n        if (newRecord.cumulativeProcessedDepositAmount > staking.totalDepositedInValidators()) {\\n            revert InvalidUpdateMoreDepositsProcessedThanSent(\\n                newRecord.cumulativeProcessedDepositAmount, staking.totalDepositedInValidators()\\n            );\\n        }\\n\\n        if (\\n            uint256(newRecord.currentNumValidatorsNotWithdrawable)\\n                + uint256(newRecord.cumulativeNumValidatorsWithdrawable) > staking.numInitiatedValidators()\\n        ) {\\n            revert InvalidUpdateMoreValidatorsThanInitiated(\\n                newRecord.currentNumValidatorsNotWithdrawable + newRecord.cumulativeNumValidatorsWithdrawable,\\n                staking.numInitiatedValidators()\\n            );\\n        }\\n    }\\n\\n    /// @notice Sanity checks an incoming oracle update. If it fails, the update is rejected and marked as pending to be\\n    /// approved or replaced by the `ORACLE_PENDING_UPDATE_RESOLVER_ROLE`.\\n    /// @dev If the record fails the sanity check, the function does not revert as we want to store the offending oracle\\n    /// record in a pending state.\\n    /// @param newRecord The incoming record to check.\\n    /// @return A tuple containing the reason for the rejection, the value that failed the check and the bound that it\\n    /// violated. The reason is the empty string if the update is valid.\\n    function sanityCheckUpdate(OracleRecord memory prevRecord, OracleRecord calldata newRecord)\\n        public\\n        view\\n        returns (string memory, uint256, uint256)\\n    {\\n        uint64 reportSize = newRecord.updateEndBlock - newRecord.updateStartBlock + 1;\\n        {\\n            //\\n            // Report size\\n            //\\n            // We implement this as a sanity check rather than a validation because the report is technically valid\\n            // and there may be a feasible reason to accept small report at some point.\\n            if (reportSize < minReportSizeBlocks) {\\n                return (\\\"Report blocks below minimum bound\\\", reportSize, minReportSizeBlocks);\\n            }\\n        }\\n        {\\n            //\\n            // Number of validators\\n            //\\n            // Checks that the total number of validators and the number of validators that are in the withdrawable state\\n            // did not decrease in the new oracle period.\\n            if (newRecord.cumulativeNumValidatorsWithdrawable < prevRecord.cumulativeNumValidatorsWithdrawable) {\\n                return (\\n                    \\\"Cumulative number of withdrawable validators decreased\\\",\\n                    newRecord.cumulativeNumValidatorsWithdrawable,\\n                    prevRecord.cumulativeNumValidatorsWithdrawable\\n                );\\n            }\\n            {\\n                uint256 prevNumValidators =\\n                    prevRecord.currentNumValidatorsNotWithdrawable + prevRecord.cumulativeNumValidatorsWithdrawable;\\n                uint256 newNumValidators =\\n                    newRecord.currentNumValidatorsNotWithdrawable + newRecord.cumulativeNumValidatorsWithdrawable;\\n\\n                if (newNumValidators < prevNumValidators) {\\n                    return (\\\"Total number of validators decreased\\\", newNumValidators, prevNumValidators);\\n                }\\n            }\\n        }\\n\\n        {\\n            //\\n            // Deposits\\n            //\\n            // Checks that the total amount of deposits processed by the oracle did not decrease in the new oracle\\n            // period. It also checks that the amount of newly deposited ETH is possible given how many validators\\n            // we have included in the new period.\\n            if (newRecord.cumulativeProcessedDepositAmount < prevRecord.cumulativeProcessedDepositAmount) {\\n                return (\\n                    \\\"Processed deposit amount decreased\\\",\\n                    newRecord.cumulativeProcessedDepositAmount,\\n                    prevRecord.cumulativeProcessedDepositAmount\\n                );\\n            }\\n\\n            uint256 newDeposits =\\n                (newRecord.cumulativeProcessedDepositAmount - prevRecord.cumulativeProcessedDepositAmount);\\n            uint256 newValidators = (\\n                newRecord.currentNumValidatorsNotWithdrawable + newRecord.cumulativeNumValidatorsWithdrawable\\n                    - prevRecord.currentNumValidatorsNotWithdrawable - prevRecord.cumulativeNumValidatorsWithdrawable\\n            );\\n\\n            if (newDeposits < newValidators * minDepositPerValidator) {\\n                return (\\n                    \\\"New deposits below min deposit per validator\\\", newDeposits, newValidators * minDepositPerValidator\\n                );\\n            }\\n\\n            if (newDeposits > newValidators * maxDepositPerValidator) {\\n                return (\\n                    \\\"New deposits above max deposit per validator\\\", newDeposits, newValidators * maxDepositPerValidator\\n                );\\n            }\\n        }\\n\\n        {\\n            //\\n            // Consensus layer balance change from the previous period.\\n            //\\n            // Checks that the change in the consensus layer balance is within the bounds given by the maximum loss and\\n            // minimum gain parameters. For example, a major slashing event will cause an out of bounds loss in the\\n            // consensus layer.\\n\\n            // The baselineGrossCLBalance represents the expected growth of our validators balance in the new period\\n            // given no slashings, no rewards, etc. It's used as the baseline in our upper (growth) and lower (loss)\\n            // bounds calculations.\\n            uint256 baselineGrossCLBalance = prevRecord.currentTotalValidatorBalance\\n                + (newRecord.cumulativeProcessedDepositAmount - prevRecord.cumulativeProcessedDepositAmount);\\n\\n            // The newGrossCLBalance is the actual amount of ETH we have recorded in the consensus layer for the new\\n            // record period.\\n            uint256 newGrossCLBalance = newRecord.currentTotalValidatorBalance\\n                + newRecord.windowWithdrawnPrincipalAmount + newRecord.windowWithdrawnRewardAmount;\\n\\n            {\\n                // Relative lower bound on the net decrease of ETH on the consensus layer.\\n                // Depending on the parameters the loss term might completely dominate over the minGain one.\\n                //\\n                // Using a minConsensusLayerGainPerBlockPPT greater than 0, the lower bound becomes an upward slope.\\n                // Setting minConsensusLayerGainPerBlockPPT, the lower bound becomes a constant.\\n                uint256 lowerBound = baselineGrossCLBalance\\n                    - Math.mulDiv(maxConsensusLayerLossPPM, baselineGrossCLBalance, _PPM_DENOMINATOR)\\n                    + Math.mulDiv(minConsensusLayerGainPerBlockPPT * reportSize, baselineGrossCLBalance, _PPT_DENOMINATOR);\\n\\n                if (newGrossCLBalance < lowerBound) {\\n                    return (\\\"Consensus layer change below min gain or max loss\\\", newGrossCLBalance, lowerBound);\\n                }\\n            }\\n            {\\n                // Upper bound on the rewards generated by validators scaled linearly with time and number of active\\n                // validators.\\n                uint256 upperBound = baselineGrossCLBalance\\n                    + Math.mulDiv(maxConsensusLayerGainPerBlockPPT * reportSize, baselineGrossCLBalance, _PPT_DENOMINATOR);\\n\\n                if (newGrossCLBalance > upperBound) {\\n                    return (\\\"Consensus layer change above max gain\\\", newGrossCLBalance, upperBound);\\n                }\\n            }\\n        }\\n\\n        return (\\\"\\\", 0, 0);\\n    }\\n\\n    /// @dev Pushes a record to the list of records, emits an oracle added event, and processes the\\n    /// oracle record in the aggregator.\\n    /// @param record The record to push.\\n    function _pushRecord(OracleRecord memory record) internal {\\n        emit OracleRecordAdded(_records.length, record);\\n        _records.push(record);\\n\\n        aggregator.processReturns({\\n            rewardAmount: record.windowWithdrawnRewardAmount,\\n            principalAmount: record.windowWithdrawnPrincipalAmount,\\n            shouldIncludeELRewards: true\\n        });\\n    }\\n\\n    /// @notice Accepts the current pending update and adds it to the list of oracle records.\\n    /// @dev Accepting the current pending update resets the update pending state.\\n    function acceptPendingUpdate() external onlyRole(ORACLE_PENDING_UPDATE_RESOLVER_ROLE) {\\n        if (!hasPendingUpdate) {\\n            revert NoUpdatePending();\\n        }\\n\\n        _pushRecord(_pendingUpdate);\\n        _resetPending();\\n    }\\n\\n    /// @notice Rejects the current pending update.\\n    /// @dev Rejecting the current pending update resets the pending state.\\n    function rejectPendingUpdate() external onlyRole(ORACLE_PENDING_UPDATE_RESOLVER_ROLE) {\\n        if (!hasPendingUpdate) {\\n            revert NoUpdatePending();\\n        }\\n\\n        emit OraclePendingUpdateRejected(_pendingUpdate);\\n        _resetPending();\\n    }\\n\\n    /// @inheritdoc IOracleReadRecord\\n    function latestRecord() public view returns (OracleRecord memory) {\\n        return _records[_records.length - 1];\\n    }\\n\\n    /// @inheritdoc IOracleReadPending\\n    function pendingUpdate() external view returns (OracleRecord memory) {\\n        if (!hasPendingUpdate) {\\n            revert NoUpdatePending();\\n        }\\n        return _pendingUpdate;\\n    }\\n\\n    /// @inheritdoc IOracleReadRecord\\n    function recordAt(uint256 idx) external view returns (OracleRecord memory) {\\n        return _records[idx];\\n    }\\n\\n    /// @inheritdoc IOracleReadRecord\\n    function numRecords() external view returns (uint256) {\\n        return _records.length;\\n    }\\n\\n    /// @dev Resets the pending update by removing the update from storage and resetting the hasPendingUpdate flag.\\n    function _resetPending() internal {\\n        delete _pendingUpdate;\\n        hasPendingUpdate = false;\\n    }\\n\\n    /// @notice Sets the finalization block number delta in the contract.\\n    /// See also {finalizationBlockNumberDelta}.\\n    /// @param finalizationBlockNumberDelta_ The new finalization block number delta.\\n    function setFinalizationBlockNumberDelta(uint256 finalizationBlockNumberDelta_)\\n        external\\n        onlyRole(ORACLE_MANAGER_ROLE)\\n    {\\n        if (\\n            finalizationBlockNumberDelta_ == 0\\n                || finalizationBlockNumberDelta_ > _FINALIZATION_BLOCK_NUMBER_DELTA_UPPER_BOUND\\n        ) {\\n            revert InvalidConfiguration();\\n        }\\n\\n        finalizationBlockNumberDelta = finalizationBlockNumberDelta_;\\n        emit ProtocolConfigChanged(\\n            this.setFinalizationBlockNumberDelta.selector,\\n            \\\"setFinalizationBlockNumberDelta(uint256)\\\",\\n            abi.encode(finalizationBlockNumberDelta_)\\n        );\\n    }\\n\\n    /// @inheritdoc IOracleManager\\n    /// @dev See also {oracleUpdater}.\\n    function setOracleUpdater(address newUpdater) external onlyRole(ORACLE_MANAGER_ROLE) notZeroAddress(newUpdater) {\\n        oracleUpdater = newUpdater;\\n        emit ProtocolConfigChanged(this.setOracleUpdater.selector, \\\"setOracleUpdater(address)\\\", abi.encode(newUpdater));\\n    }\\n\\n    /// @notice Sets min deposit per validator in the contract.\\n    /// See also {minDepositPerValidator}.\\n    /// @param minDepositPerValidator_ The new min deposit per validator.\\n    function setMinDepositPerValidator(uint256 minDepositPerValidator_) external onlyRole(ORACLE_MANAGER_ROLE) {\\n        minDepositPerValidator = minDepositPerValidator_;\\n        emit ProtocolConfigChanged(\\n            this.setMinDepositPerValidator.selector,\\n            \\\"setMinDepositPerValidator(uint256)\\\",\\n            abi.encode(minDepositPerValidator_)\\n        );\\n    }\\n\\n    /// @notice Sets max deposit per validator in the contract.\\n    /// See also {maxDepositPerValidator}.\\n    /// @param maxDepositPerValidator_ The new max deposit per validator.\\n    function setMaxDepositPerValidator(uint256 maxDepositPerValidator_) external onlyRole(ORACLE_MANAGER_ROLE) {\\n        maxDepositPerValidator = maxDepositPerValidator_;\\n        emit ProtocolConfigChanged(\\n            this.setMaxDepositPerValidator.selector,\\n            \\\"setMaxDepositPerValidator(uint256)\\\",\\n            abi.encode(maxDepositPerValidator)\\n        );\\n    }\\n\\n    /// @notice Sets min consensus layer gain per block in the contract.\\n    /// See also {minConsensusLayerGainPerBlockPPT}.\\n    /// @param minConsensusLayerGainPerBlockPPT_ The new min consensus layer gain per block in parts per trillion.\\n    function setMinConsensusLayerGainPerBlockPPT(uint40 minConsensusLayerGainPerBlockPPT_)\\n        external\\n        onlyRole(ORACLE_MANAGER_ROLE)\\n        onlyFractionLeqOne(minConsensusLayerGainPerBlockPPT_, _PPT_DENOMINATOR)\\n    {\\n        minConsensusLayerGainPerBlockPPT = minConsensusLayerGainPerBlockPPT_;\\n        emit ProtocolConfigChanged(\\n            this.setMinConsensusLayerGainPerBlockPPT.selector,\\n            \\\"setMinConsensusLayerGainPerBlockPPT(uint40)\\\",\\n            abi.encode(minConsensusLayerGainPerBlockPPT_)\\n        );\\n    }\\n\\n    /// @notice Sets max consensus layer gain per block in the contract.\\n    /// See also {maxConsensusLayerGainPerBlockPPT}.\\n    /// @param maxConsensusLayerGainPerBlockPPT_ The new max consensus layer gain per block in parts per million.\\n    function setMaxConsensusLayerGainPerBlockPPT(uint40 maxConsensusLayerGainPerBlockPPT_)\\n        external\\n        onlyRole(ORACLE_MANAGER_ROLE)\\n        onlyFractionLeqOne(maxConsensusLayerGainPerBlockPPT_, _PPT_DENOMINATOR)\\n    {\\n        maxConsensusLayerGainPerBlockPPT = maxConsensusLayerGainPerBlockPPT_;\\n        emit ProtocolConfigChanged(\\n            this.setMaxConsensusLayerGainPerBlockPPT.selector,\\n            \\\"setMaxConsensusLayerGainPerBlockPPT(uint40)\\\",\\n            abi.encode(maxConsensusLayerGainPerBlockPPT_)\\n        );\\n    }\\n\\n    /// @notice Sets max consensus layer loss per block in the contract.\\n    /// See also {maxConsensusLayerLossPPM}.\\n    /// @param maxConsensusLayerLossPPM_ The new max consensus layer loss per block in parts per million.\\n    function setMaxConsensusLayerLossPPM(uint24 maxConsensusLayerLossPPM_)\\n        external\\n        onlyRole(ORACLE_MANAGER_ROLE)\\n        onlyFractionLeqOne(maxConsensusLayerLossPPM_, _PPM_DENOMINATOR)\\n    {\\n        maxConsensusLayerLossPPM = maxConsensusLayerLossPPM_;\\n        emit ProtocolConfigChanged(\\n            this.setMaxConsensusLayerLossPPM.selector,\\n            \\\"setMaxConsensusLayerLossPPM(uint24)\\\",\\n            abi.encode(maxConsensusLayerLossPPM_)\\n        );\\n    }\\n\\n    /// @notice Sets the minimum report size.\\n    /// See also {minReportSizeBlocks}.\\n    /// @param minReportSizeBlocks_ The new minimum report size, in blocks.\\n    function setMinReportSizeBlocks(uint16 minReportSizeBlocks_) external onlyRole(ORACLE_MANAGER_ROLE) {\\n        // Sanity check on upper bound is covered by uint16 which is ~9 days.\\n        minReportSizeBlocks = minReportSizeBlocks_;\\n        emit ProtocolConfigChanged(\\n            this.setMinReportSizeBlocks.selector, \\\"setMinReportSizeBlocks(uint16)\\\", abi.encode(minReportSizeBlocks_)\\n        );\\n    }\\n\\n    /// @notice Ensures that the given fraction is less than or equal to one.\\n    /// @param numerator The numerator of the fraction.\\n    /// @param denominator The denominator of the fraction.\\n    modifier onlyFractionLeqOne(uint256 numerator, uint256 denominator) {\\n        if (numerator > denominator) {\\n            revert InvalidConfiguration();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the given address is not the zero address.\\n    /// @param addr The address to check.\\n    modifier notZeroAddress(address addr) {\\n        if (addr == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ProtocolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface ProtocolEvents {\\n    /// @notice Emitted when a protocol configuration has been updated.\\n    /// @param setterSelector The selector of the function that updated the configuration.\\n    /// @param setterSignature The signature of the function that updated the configuration.\\n    /// @param value The abi-encoded data passed to the function that updated the configuration. Since this event will\\n    /// only be emitted by setters, this data corresponds to the updated values in the protocol configuration.\\n    event ProtocolConfigChanged(bytes4 indexed setterSelector, string setterSignature, bytes value);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice The records stored by the oracle contract informing the protocol about consensus layer activity. It is\\n/// computed and reported by off-chain oracle services.\\n/// @dev \\\"current\\\" quantities refer to the state at the `updateEndBlock` block number.\\n/// @dev \\\"cumulative\\\" quantities refer to sums up to the `updateEndBlock` block number.\\n/// @dev \\\"window\\\" quantities refer to sums over the block window between the `updateStartBlock` and `updateEndBlock`.\\n/// @param updateStartBlock The start of the oracle record block window. This should be 1 higher than the\\n/// updateEndBlock of the previous oracle record.\\n/// @param updateEndBlock The block number up to which this oracle record was computed (inclusive).\\n/// @param currentNumValidatorsNotWithdrawable The number of our validators that do not have the withdrawable status.\\n/// @param cumulativeNumValidatorsWithdrawable The total number of our validators that have the withdrawable status.\\n/// These validators have either the status `withdrawal_possible` or `withdrawal_done`. Note: validators can\\n/// fluctuate between the two statuses due to top ups.\\n/// @param windowWithdrawnPrincipalAmount The amount of principal that has been withdrawn from the consensus layer in\\n/// the analyzed block window.\\n/// @param windowWithdrawnRewardAmount The amount of rewards that has been withdrawn from the consensus layer in the\\n/// analysed block window.\\n/// @param currentTotalValidatorBalance The total amount of ETH in the consensus layer (i.e. the sum of all validator\\n/// balances). This is one of the major quantities to compute the total value controlled by the protocol.\\n/// @param cumulativeProcessedDepositAmount The total amount of ETH that has been deposited into and processed by the\\n/// consensus layer. This is used to prevent double counting of the ETH deposited to the consensus layer.\\nstruct OracleRecord {\\n    uint64 updateStartBlock;\\n    uint64 updateEndBlock;\\n    uint64 currentNumValidatorsNotWithdrawable;\\n    uint64 cumulativeNumValidatorsWithdrawable;\\n    uint128 windowWithdrawnPrincipalAmount;\\n    uint128 windowWithdrawnRewardAmount;\\n    uint128 currentTotalValidatorBalance;\\n    uint128 cumulativeProcessedDepositAmount;\\n}\\n\\ninterface IOracleWrite {\\n    /// @notice Pushes a new record to the oracle.\\n    function receiveRecord(OracleRecord calldata record) external;\\n}\\n\\ninterface IOracleReadRecord {\\n    /// @notice Returns the latest validated record.\\n    /// @return `OracleRecord` The latest validated record.\\n    function latestRecord() external view returns (OracleRecord calldata);\\n\\n    /// @notice Returns the record at the given index.\\n    /// @param idx The index of the record to retrieve.\\n    /// @return `OracleRecord` The record at the given index.\\n    function recordAt(uint256 idx) external view returns (OracleRecord calldata);\\n\\n    /// @notice Returns the number of records in the oracle.\\n    /// @return `uint256` The number of records in the oracle.\\n    function numRecords() external view returns (uint256);\\n}\\n\\ninterface IOracleReadPending {\\n    /// @notice Returns the pending update.\\n    /// @return `OracleRecord` The pending update.\\n    function pendingUpdate() external view returns (OracleRecord calldata);\\n\\n    /// @notice Indicates whether an oracle update is pending, i.e. if it was rejected by `_sanityCheckUpdate`.\\n    function hasPendingUpdate() external view returns (bool);\\n}\\n\\ninterface IOracleRead is IOracleReadRecord, IOracleReadPending {}\\n\\ninterface IOracleManager {\\n    /// @notice Sets the new oracle updater for the contract.\\n    /// @param newUpdater The new oracle updater.\\n    function setOracleUpdater(address newUpdater) external;\\n}\\n\\ninterface IOracle is IOracleWrite, IOracleRead, IOracleManager {}\\n\"\r\n    },\r\n    \"src/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IStakingInitiationRead {\\n    /// @notice The total amount of ETH sent to the beacon chain deposit contract.\\n    function totalDepositedInValidators() external view returns (uint256);\\n\\n    /// @notice The number of validators initiated by the staking contract.\\n    function numInitiatedValidators() external view returns (uint256);\\n\\n    /// @notice The block number at which the staking contract has been initialised.\\n    function initializationBlockNumber() external view returns (uint256);\\n}\\n\\ninterface IStakingReturnsWrite {\\n    /// @notice Accepts funds sent by the returns aggregator.\\n    function receiveReturns() external payable;\\n\\n    /// @notice Accepts funds sent by the unstake requests manager.\\n    function receiveFromUnstakeRequestsManager() external payable;\\n}\\n\\ninterface IStaking is IStakingInitiationRead, IStakingReturnsWrite {}\\n\"\r\n    },\r\n    \"src/interfaces/IReturnsAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {OracleRecord} from \\\"./IOracle.sol\\\";\\n\\ninterface IReturnsAggregatorWrite {\\n    /// @notice Takes the record from the oracle, aggregates net returns accordingly and forwards them to\\n    /// the staking contract.\\n    function processReturns(uint256 rewardAmount, uint256 principalAmount, bool shouldIncludeELRewards) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPauser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IPauserRead {\\n    /// @notice Flag indicating if staking is paused.\\n    function isStakingPaused() external view returns (bool);\\n\\n    /// @notice Flag indicating if unstake requests are paused.\\n    function isUnstakeRequestsAndClaimsPaused() external view returns (bool);\\n\\n    /// @notice Flag indicating if initiate validators is paused\\n    function isInitiateValidatorsPaused() external view returns (bool);\\n\\n    /// @notice Flag indicating if submit oracle records is paused.\\n    function isSubmitOracleRecordsPaused() external view returns (bool);\\n\\n    /// @notice Flag indicating if allocate ETH is paused.\\n    function isAllocateETHPaused() external view returns (bool);\\n}\\n\\ninterface IPauserWrite {\\n    /// @notice Pauses all actions.\\n    function pauseAll() external;\\n}\\n\\ninterface IPauser is IPauserRead, IPauserWrite {}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:forge-std/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotModifyInitialRecord\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUpdateWhileUpdatePending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecordModification\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"InvalidUpdateEndBeforeStartBlock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"processed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"InvalidUpdateMoreDepositsProcessedThanSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numValidatorsOnRecord\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numInitiatedValidators\",\"type\":\"uint256\"}],\"name\":\"InvalidUpdateMoreValidatorsThanInitiated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wantUpdateStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gotUpdateStartBlock\",\"type\":\"uint256\"}],\"name\":\"InvalidUpdateStartBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoUpdatePending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"RecordDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUpdater\",\"type\":\"address\"}],\"name\":\"UnauthorizedOracleUpdater\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateFinalizingBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEndBlockNumberNotFinal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct OracleRecord\",\"name\":\"pendingUpdate\",\"type\":\"tuple\"}],\"name\":\"OraclePendingUpdateRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct OracleRecord\",\"name\":\"record\",\"type\":\"tuple\"}],\"name\":\"OracleRecordAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"reasonHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct OracleRecord\",\"name\":\"record\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bound\",\"type\":\"uint256\"}],\"name\":\"OracleRecordFailedSanityCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct OracleRecord\",\"name\":\"record\",\"type\":\"tuple\"}],\"name\":\"OracleRecordModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"setterSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"setterSignature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"ProtocolConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_MODIFIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_PENDING_UPDATE_RESOLVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract IReturnsAggregatorWrite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizationBlockNumberDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleUpdater\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingResolver\",\"type\":\"address\"},{\"internalType\":\"contract IReturnsAggregatorWrite\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"contract IPauser\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IStakingInitiationRead\",\"name\":\"staking\",\"type\":\"address\"}],\"internalType\":\"struct Oracle.Init\",\"name\":\"init\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct OracleRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxConsensusLayerGainPerBlockPPT\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxConsensusLayerLossPPM\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositPerValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minConsensusLayerGainPerBlockPPT\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositPerValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportSizeBlocks\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct OracleRecord\",\"name\":\"record\",\"type\":\"tuple\"}],\"name\":\"modifyExistingRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"contract IPauser\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingUpdate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct OracleRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct OracleRecord\",\"name\":\"newRecord\",\"type\":\"tuple\"}],\"name\":\"receiveRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"recordAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct OracleRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectPendingUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct OracleRecord\",\"name\":\"prevRecord\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct OracleRecord\",\"name\":\"newRecord\",\"type\":\"tuple\"}],\"name\":\"sanityCheckUpdate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"finalizationBlockNumberDelta_\",\"type\":\"uint256\"}],\"name\":\"setFinalizationBlockNumberDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"maxConsensusLayerGainPerBlockPPT_\",\"type\":\"uint40\"}],\"name\":\"setMaxConsensusLayerGainPerBlockPPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"maxConsensusLayerLossPPM_\",\"type\":\"uint24\"}],\"name\":\"setMaxConsensusLayerLossPPM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDepositPerValidator_\",\"type\":\"uint256\"}],\"name\":\"setMaxDepositPerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"minConsensusLayerGainPerBlockPPT_\",\"type\":\"uint40\"}],\"name\":\"setMinConsensusLayerGainPerBlockPPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDepositPerValidator_\",\"type\":\"uint256\"}],\"name\":\"setMinDepositPerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minReportSizeBlocks_\",\"type\":\"uint16\"}],\"name\":\"setMinReportSizeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUpdater\",\"type\":\"address\"}],\"name\":\"setOracleUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStakingInitiationRead\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevRecordIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"updateStartBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"updateEndBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentNumValidatorsNotWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cumulativeNumValidatorsWithdrawable\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnPrincipalAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"windowWithdrawnRewardAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentTotalValidatorBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cumulativeProcessedDepositAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct OracleRecord\",\"name\":\"newRecord\",\"type\":\"tuple\"}],\"name\":\"validateUpdate\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Oracle", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}