{"SourceCode": "// File: contracts/library/SafeMath.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/ERC20.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\nabstract contract ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /*\r\n   * Internal Functions for ERC20 standard logics\r\n   */\r\n\r\n    function _transfer(address from, address to, uint256 amount)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        _balances[from] = _balances[from].sub(\r\n            amount,\r\n            \"ERC20/transfer : cannot transfer more than token owner balance\"\r\n        );\r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n        success = true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n        success = true;\r\n    }\r\n\r\n    function _mint(address recipient, uint256 amount)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(address(0), recipient, amount);\r\n        success = true;\r\n    }\r\n\r\n    function _burn(address burned, uint256 amount)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        _balances[burned] = _balances[burned].sub(\r\n            amount,\r\n            \"ERC20Burnable/burn : Cannot burn more than user's balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(\r\n            amount,\r\n            \"ERC20Burnable/burn : Cannot burn more than totalSupply\"\r\n        );\r\n        emit Transfer(burned, address(0), amount);\r\n        success = true;\r\n    }\r\n\r\n    /*\r\n   * public view functions to view common data\r\n   */\r\n\r\n    function totalSupply() external view returns (uint256 total) {\r\n        total = _totalSupply;\r\n    }\r\n    function balanceOf(address owner) external view returns (uint256 balance) {\r\n        balance = _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining)\r\n    {\r\n        remaining = _allowances[owner][spender];\r\n    }\r\n\r\n    /*\r\n   * External view Function Interface to implement on final contract\r\n   */\r\n    function name() virtual external view returns (string memory tokenName);\r\n    function symbol() virtual external view returns (string memory tokenSymbol);\r\n    function decimals() virtual external view returns (uint8 tokenDecimals);\r\n\r\n    /*\r\n   * External Function Interface to implement on final contract\r\n   */\r\n    function transfer(address to, uint256 amount)\r\n        virtual\r\n        external\r\n        returns (bool success);\r\n    function transferFrom(address from, address to, uint256 amount)\r\n        virtual\r\n        external\r\n        returns (bool success);\r\n    function approve(address spender, uint256 amount)\r\n        virtual\r\n        external\r\n        returns (bool success);\r\n}\r\n\r\n// File: contracts/library/Ownable.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed currentOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Ownable : Function called by unauthorized user.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function owner() external view returns (address ownerAddress) {\r\n        ownerAddress = _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(newOwner != address(0), \"Ownable/transferOwnership : cannot transfer ownership to zero address\");\r\n        success = _transferOwnership(newOwner);\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner returns (bool success) {\r\n        success = _transferOwnership(address(0));\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal returns (bool success) {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n        success = true;\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/ERC20Lockable.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\nabstract contract ERC20Lockable is ERC20, Ownable {\r\n    struct LockInfo {\r\n        uint256 amount;\r\n        uint256 due;\r\n    }\r\n\r\n    mapping(address => LockInfo[]) internal _locks;\r\n    mapping(address => uint256) internal _totalLocked;\r\n\r\n    event Lock(address indexed from, uint256 amount, uint256 due);\r\n    event Unlock(address indexed from, uint256 amount);\r\n\r\n    modifier checkLock(address from, uint256 amount) {\r\n        require(_balances[from] >= _totalLocked[from].add(amount), \"ERC20Lockable/Cannot send more than unlocked amount\");\r\n        _;\r\n    }\r\n\r\n    function _lock(address from, uint256 amount, uint256 due)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            _balances[from] >= amount.add(_totalLocked[from]),\r\n            \"ERC20Lockable/lock : locked total should be smaller than balance\"\r\n        );\r\n        _totalLocked[from] = _totalLocked[from].add(amount);\r\n        _locks[from].push(LockInfo(amount, due));\r\n        emit Lock(from, amount, due);\r\n        success = true;\r\n    }\r\n\r\n    function _unlock(address from, uint256 index) internal returns (bool success) {\r\n        LockInfo storage lock = _locks[from][index];\r\n        _totalLocked[from] = _totalLocked[from].sub(lock.amount);\r\n        emit Unlock(from, lock.amount);\r\n        _locks[from][index] = _locks[from][_locks[from].length - 1];\r\n        _locks[from].pop();\r\n        success = true;\r\n    }\r\n\r\n    function unlock(address from) external returns (bool success) {\r\n        for(uint256 i = 0; i < _locks[from].length; i++){\r\n            if(_locks[from][i].due < now){\r\n                _unlock(from, i);\r\n            }\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function releaseLock(address from)\r\n        external\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        for(uint256 i = 0; i < _locks[from].length; i++){\r\n            _unlock(from, i);\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function transferWithLockUp(address recipient, uint256 amount, uint256 due)\r\n        external\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            recipient != address(0),\r\n            \"ERC20Lockable/transferWithLockUp : Cannot send to zero address\"\r\n        );\r\n        _transfer(msg.sender, recipient, amount);\r\n        _lock(recipient, amount, due);\r\n        success = true;\r\n    }\r\n\r\n    function lockInfo(address locked, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 amount, uint256 due)\r\n    {\r\n        LockInfo memory lock = _locks[locked][index];\r\n        amount = lock.amount;\r\n        due = lock.due;\r\n    }\r\n\r\n    function totalLocked(address locked) external view returns(uint256 amount, uint256 length){\r\n        amount = _totalLocked[locked];\r\n        length = _locks[locked].length;\r\n    }\r\n}\r\n\r\n// File: contracts/library/Pausable.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    bool internal _paused;\r\n\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Paused : This function can only be called when paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Paused : This function can only be called when not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused returns (bool success) {\r\n        _paused = true;\r\n        emit Paused();\r\n        success = true;\r\n    }\r\n\r\n    function unPause() external onlyOwner whenPaused returns (bool success) {\r\n        _paused = false;\r\n        emit Unpaused();\r\n        success = true;\r\n    }\r\n\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/ERC20Burnable.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\nabstract contract ERC20Burnable is ERC20, Pausable {\r\n    event Burn(address indexed burned, uint256 amount);\r\n\r\n    function burn(uint256 amount)\r\n        external\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        success = _burn(msg.sender, amount);\r\n        emit Burn(msg.sender, amount);\r\n        success = true;\r\n    }\r\n\r\n    function burnFrom(address burned, uint256 amount)\r\n        external\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        _burn(burned, amount);\r\n        emit Burn(burned, amount);\r\n        success = _approve(\r\n            burned,\r\n            msg.sender,\r\n            _allowances[burned][msg.sender].sub(\r\n                amount,\r\n                \"ERC20Burnable/burnFrom : Cannot burn more than allowance\"\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/ERC20Mintable.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\nabstract contract ERC20Mintable is ERC20, Pausable {\r\n    event Mint(address indexed receiver, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool internal _mintingFinished;\r\n    ///@notice mint token\r\n    ///@dev only owner can call this function\r\n    function mint(address receiver, uint256 amount)\r\n        external\r\n        onlyOwner\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            receiver != address(0),\r\n            \"ERC20Mintable/mint : Should not mint to zero address\"\r\n        );\r\n        require(\r\n            !_mintingFinished,\r\n            \"ERC20Mintable/mint : Cannot mint after finished\"\r\n        );\r\n        _mint(receiver, amount);\r\n        emit Mint(receiver, amount);\r\n        success = true;\r\n    }\r\n\r\n    ///@notice finish minting, cannot mint after calling this function\r\n    ///@dev only owner can call this function\r\n    function finishMint()\r\n        external\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            !_mintingFinished,\r\n            \"ERC20Mintable/finishMinting : Already finished\"\r\n        );\r\n        _mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function isFinished() external view returns(bool finished) {\r\n        finished = _mintingFinished;\r\n    }\r\n}\r\n\r\n// File: contracts/library/Freezable.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\ncontract Freezable is Ownable {\r\n    mapping(address => bool) private _frozen;\r\n\r\n    event Freeze(address indexed target);\r\n    event Unfreeze(address indexed target);\r\n\r\n    modifier whenNotFrozen(address target) {\r\n        require(!_frozen[target], \"Freezable : target is frozen\");\r\n        _;\r\n    }\r\n\r\n    function freeze(address target) external onlyOwner returns (bool success) {\r\n        _frozen[target] = true;\r\n        emit Freeze(target);\r\n        success = true;\r\n    }\r\n\r\n    function unFreeze(address target)\r\n        external\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        _frozen[target] = false;\r\n        emit Unfreeze(target);\r\n        success = true;\r\n    }\r\n\r\n    function isFrozen(address target)\r\n        external\r\n        view\r\n        returns (bool frozen)\r\n    {\r\n        return _frozen[target];\r\n    }\r\n}\r\n\r\n// File: contracts/QBEE.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract QBEE is\r\n    ERC20Lockable,\r\n    ERC20Burnable,\r\n    ERC20Mintable,\r\n    Freezable\r\n{\r\n    string constant private _name = \"QBEE\";\r\n    string constant private _symbol = \"QBZ\";\r\n    uint8 constant private _decimals = 18;\r\n    uint256 constant private _initial_supply = 8_000_000_000;\r\n\r\n    constructor() public Ownable() {\r\n        _mint(msg.sender, _initial_supply * (10**uint256(_decimals)));\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        override\r\n        external\r\n        whenNotFrozen(msg.sender)\r\n        whenNotPaused\r\n        checkLock(msg.sender, amount)\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            to != address(0),\r\n            \"QBEE/transfer : Should not send to zero address\"\r\n        );\r\n        _transfer(msg.sender, to, amount);\r\n        success = true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount)\r\n        override\r\n        external\r\n        whenNotFrozen(from)\r\n        whenNotPaused\r\n        checkLock(from, amount)\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            to != address(0),\r\n            \"QBEE/transferFrom : Should not send to zero address\"\r\n        );\r\n        _transfer(from, to, amount);\r\n        _approve(\r\n            from,\r\n            msg.sender,\r\n            _allowances[from][msg.sender].sub(\r\n                amount,\r\n                \"QBEE/transferFrom : Cannot send more than allowance\"\r\n            )\r\n        );\r\n        success = true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        override\r\n        external\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            spender != address(0),\r\n            \"QBEE/approve : Should not approve zero address\"\r\n        );\r\n        _approve(msg.sender, spender, amount);\r\n        success = true;\r\n    }\r\n\r\n    function name() override external view returns (string memory tokenName) {\r\n        tokenName = _name;\r\n    }\r\n\r\n    function symbol() override external view returns (string memory tokenSymbol) {\r\n        tokenSymbol = _symbol;\r\n    }\r\n\r\n    function decimals() override external view returns (uint8 tokenDecimals) {\r\n        tokenDecimals = _decimals;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burned\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burned\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locked\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"lockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"releaseLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locked\",\"type\":\"address\"}],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"}],\"name\":\"transferWithLockUp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QBEE", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e786b9a5b074cdaf581be7140a401bb3598a4bbd43feb343632e65afbfc7bb3f"}