{"SourceCode": "// File: contracts/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Loteria.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\n// Importando la biblioteca OpenZeppelin para gesti\u00f3n de propiedad\r\n\r\n/**\r\n * @title Loteria\r\n * @author Fidentis\r\n * @notice Este contrato implementa una loter\u00eda simple en la blockchain de Ethereum.\r\n * Los jugadores pueden comprar entradas con Ether, y una vez que se alcanza un n\u00famero\r\n * determinado de jugadores, se selecciona un ganador al azar y se le otorga el premio.\r\n * Tambi\u00e9n se incluye una cola para los jugadores si el n\u00famero m\u00e1ximo de jugadores ha sido alcanzado.\r\n * El propietario del contrato puede retirar las ganancias generadas por la plataforma.\r\n */\r\ncontract Loteria is Ownable {\r\n    address[] public jugadoresActuales;\r\n    address[] public jugadoresEnCola;\r\n\r\n    uint256 public constant entrada = 0.003 ether;\r\n    uint256 public constant maxJugadores = 10;\r\n    uint256 public balanceDeLaPlataforma;\r\n\r\n    event Ganador(address indexed ganador, uint256 monto);\r\n    event NuevoJugador(address indexed jugador);\r\n\r\n    constructor() Ownable() {}\r\n\r\n    function participar() external payable {\r\n        require(msg.value == entrada, \"Debes enviar 0.003 ETH\");\r\n\r\n        if (jugadoresActuales.length == maxJugadores) {\r\n            jugadoresEnCola.push(msg.sender);\r\n        } else {\r\n            jugadoresActuales.push(msg.sender);\r\n        }\r\n\r\n        emit NuevoJugador(msg.sender);\r\n\r\n        if (jugadoresActuales.length == maxJugadores) {\r\n            _finalizarRonda();\r\n        }\r\n    }\r\n\r\n    function _finalizarRonda() private {\r\n        address ganador = jugadoresActuales[random() % maxJugadores];\r\n        uint256 montoGanador = (entrada * maxJugadores * 85) / 100;\r\n\r\n        payable(ganador).transfer(montoGanador);\r\n        balanceDeLaPlataforma += (entrada * maxJugadores) - montoGanador;\r\n\r\n        emit Ganador(ganador, montoGanador);\r\n\r\n        uint256 jugadoresMovidos = min(maxJugadores, jugadoresEnCola.length);\r\n\r\n        for (uint256 i = 0; i < jugadoresMovidos; i++) {\r\n            jugadoresActuales[i] = jugadoresEnCola[i];\r\n        }\r\n\r\n        while (jugadoresActuales.length > jugadoresMovidos) {\r\n            jugadoresActuales.pop();\r\n        }\r\n\r\n        for (\r\n            uint256 i = 0;\r\n            i < jugadoresEnCola.length - jugadoresMovidos;\r\n            i++\r\n        ) {\r\n            jugadoresEnCola[i] = jugadoresEnCola[i + jugadoresMovidos];\r\n        }\r\n        for (uint256 i = 0; i < jugadoresMovidos; i++) {\r\n            jugadoresEnCola.pop();\r\n        }\r\n    }\r\n\r\n    function random() private view returns (uint) {\r\n        return\r\n            uint(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        blockhash(block.number - 1),\r\n                        block.timestamp,\r\n                        jugadoresActuales\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function retirarGananciasPlataforma() external onlyOwner {\r\n        uint balance = balanceDeLaPlataforma;\r\n        balanceDeLaPlataforma = 0;\r\n        payable(owner()).transfer(balance); // usamos owner() que es una funci\u00f3n proporcionada por Ownable\r\n    }\r\n\r\n    function obtenerJugadoresActuales()\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return jugadoresActuales;\r\n    }\r\n\r\n    function obtenerjugadoresEnCola() external view returns (address[] memory) {\r\n        return jugadoresEnCola;\r\n    }\r\n\r\n    function renounceOwnership() public view override onlyOwner {\r\n        revert(\"Esta funcion ha sido desactivada\");\r\n    }\r\n\r\n    function transferOwnership(address) public view override onlyOwner {\r\n        revert(\"Transferencia de propiedad desactivada\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ganador\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"monto\",\"type\":\"uint256\"}],\"name\":\"Ganador\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"jugador\",\"type\":\"address\"}],\"name\":\"NuevoJugador\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceDeLaPlataforma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entrada\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jugadoresActuales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jugadoresEnCola\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxJugadores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"obtenerJugadoresActuales\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"obtenerjugadoresEnCola\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participar\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retirarGananciasPlataforma\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Loteria", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-2-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c858ac9504717b22a64a9cea1e176d781745a2b6515ad7ebd783c6e02d0456b9"}