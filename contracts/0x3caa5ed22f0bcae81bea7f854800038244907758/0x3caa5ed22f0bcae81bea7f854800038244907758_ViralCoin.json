{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ViralCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n/*\\r\\n    Greetings from the collective minds behind #VIRAL!\\r\\n    \\r\\n    **https://ViralCoin.space**\\r\\n\\r\\n    As a consortium of developers and innovators, \\r\\n    we've crafted this token with a vision to \\r\\n    catalyze community empowerment. Our ethos \\r\\n    is grounded in the democratization of decision-making,\\r\\n    underscoring the voice and agency of each token holder.\\r\\n\\r\\n    A truly community-centric token, #VIRAL thrives on \\r\\n    the innovative ideas from its community. If you have a \\r\\n    compelling concept, voice it out! Upon collective agreement, \\r\\n    we pledge to shoulder the implementation cost. While we are \\r\\n    brimming with creative ideas, we are committed to bringing \\r\\n    unique, community-driven ideas to fruition.\\r\\n\\r\\n    We are kindling a call to action for our community: \\r\\n    unite, communicate, and deliberate on the future trajectory \\r\\n    of this token. Create a Telegram group, a Twitter page, \\r\\n    or any other communication platform. The handle @viralcoin_erc20 \\r\\n    or something similar will be our beacon to find and engage with you.\\r\\n    We have added functions in the contract \\\"getTelegramLink\\\" &\\r\\n    \\\"getTwitterLink\\\". Once we find you all, we will update these.\\r\\n    You can click read contract, then call these functions to find us.\\r\\n\\r\\n    In the spirit of decentralization, a voting DAO will \\r\\n    be established, empowering community leaders to orchestrate \\r\\n    polls based on holdings. Your voice matters, and your \\r\\n    choices will guide our actions. This novel approach can \\r\\n    be the catalyst for a community revolution.\\r\\n\\r\\n    Our growth strategy is deeply rooted in community engagement. \\r\\n    We promise to be active listeners, integrating your ideas \\r\\n    and addressing your concerns. We will validate the feasibility \\r\\n    of your proposals from both a financial and technical perspective. \\r\\n    As developers and free-thinkers, we are committed to transcending \\r\\n    the realm of the existent, transforming the non-existent into reality.\\r\\n\\r\\n    As creators, we are also proud members of this vibrant community. \\r\\n    We will be joining the telegram, twitter, and any other platform \\r\\n    the community chooses. We will remain anonymous to preserve the \\r\\n    essence of equality in the community. Our commitment is to deliver \\r\\n    on our promises and relish the journey with you.\\r\\n\\r\\n    So let's unite, and carve out a narrative for #VIRAL that we can \\r\\n    all take pride in! As the community leaders emerge, we will reach \\r\\n    out through anonymous accounts to gather wallet addresses for \\r\\n    compensation distribution. To keep the community updated, we will \\r\\n    periodically relay progress on etherscan, so stay tuned for messages.\\r\\n\\r\\n    Let's speculate, propagate, and ideate!\\r\\n    Here's to a prosperous HODLing journey!\\r\\n\\r\\n    Best Regards,\\r\\n    The ViralCoin Collective (c0dePl4y3R)\\r\\n*/\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ncontract ViralCoin is IERC20, Ownable {\\r\\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\\r\\n\\r\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    uint256 constant MAX_FEE = 6;\\r\\n\\r\\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address public immutable UNISWAP_V2_PAIR;\\r\\n\\r\\n    struct Fee {\\r\\n        uint8 reflection;\\r\\n        uint8 marketing;\\r\\n        uint8 total;\\r\\n    }\\r\\n\\r\\n    string public _name = \\\"ViralCoin\\\";\\r\\n    string public _symbol = \\\"VIRAL\\\";\\r\\n    string public telegramLink = \\\"\\\";\\r\\n    string public twitterLink = \\\"\\\";\\r\\n    uint256 public _totalSupply = 100_000_000_000 ether;\\r\\n\\r\\n    mapping(address => uint256) public _reflectionOwned;\\r\\n    uint256 public _reflectionTotal = _totalSupply;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    bool public limitsEnabled = true;\\r\\n    mapping(address => bool) public isFeeExempt;\\r\\n    mapping(address => bool) public isTxLimitExempt;\\r\\n\\r\\n    Fee public buyFee = Fee({reflection: 1, marketing: 2, total: 3});\\r\\n    Fee public sellFee = Fee({reflection: 1, marketing: 4, total: 5});\\r\\n\\r\\n    address private feeReceiver;\\r\\n\\r\\n    bool public claimingFees = true;\\r\\n    uint256 public swapThreshold = (_totalSupply * 2) / 1000;\\r\\n    bool inSwap;\\r\\n    mapping(address => bool) public blacklists;\\r\\n\\r\\n    modifier swapping() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    // This will store the address of the account that can update the links\\r\\n    address public linkUpdater;\\r\\n\\r\\n    constructor() {\\r\\n    // create uniswap pair\\r\\n    address _uniswapPair =\\r\\n        IUniswapV2Factory(UNISWAP_V2_ROUTER.factory()).createPair(address(this), UNISWAP_V2_ROUTER.WETH());\\r\\n    UNISWAP_V2_PAIR = _uniswapPair;\\r\\n\\r\\n    _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = type(uint256).max;\\r\\n    _allowances[address(this)][msg.sender] = type(uint256).max;\\r\\n\\r\\n    isTxLimitExempt[address(this)] = true;\\r\\n    isTxLimitExempt[address(UNISWAP_V2_ROUTER)] = true;\\r\\n    isTxLimitExempt[_uniswapPair] = true;\\r\\n    isTxLimitExempt[msg.sender] = true;\\r\\n    isFeeExempt[msg.sender] = true;\\r\\n\\r\\n    feeReceiver = msg.sender;\\r\\n\\r\\n    _reflectionOwned[msg.sender] = _totalSupply;\\r\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n\\r\\n    // Set the initial linkUpdater in the constructor\\r\\n    linkUpdater = msg.sender;\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveMax(address spender) external returns (bool) {\\r\\n        return approve(spender, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transferFrom(msg.sender, recipient, amount);\\r\\n    return true;\\r\\n}\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n    if (_allowances[sender][msg.sender] != type(uint256).max) {\\r\\n        require(_allowances[sender][msg.sender] >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n        _allowances[sender][msg.sender] -= amount;\\r\\n    }\\r\\n\\r\\n    _transferFrom(sender, recipient, amount);\\r\\n    return true;\\r\\n}\\r\\n\\r\\n    function exemptTransfer(address recipient, uint256 amount) external returns (bool) {\\r\\n        address sender = msg.sender;\\r\\n        _transferFrom(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function updateTelegramLink(string memory newTelegramLink) public {\\r\\n        require(msg.sender == linkUpdater, \\\"Only the deployer can update the Telegram link\\\");\\r\\n        telegramLink = newTelegramLink;\\r\\n    }\\r\\n\\r\\n    function getTelegramLink() external view returns (string memory) {\\r\\n    return telegramLink;\\r\\n}\\r\\n\\r\\n    function updateTwitterLink(string memory newTwitterLink) public {\\r\\n        require(msg.sender == linkUpdater, \\\"Only the deployer can update the Twitter link\\\");\\r\\n        twitterLink = newTwitterLink;\\r\\n    }\\r\\n    function getTwitterLink() external view returns (string memory) {\\r\\n    return twitterLink;\\r\\n}\\r\\n\\r\\n    function decimals() external pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function name() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n    return tokenFromReflection(_reflectionOwned[account]);\\r\\n}\\r\\n\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) {\\r\\n        return _allowances[holder][spender];\\r\\n    }\\r\\n\\r\\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\\r\\n        return tokens * _reflectionTotal / _totalSupply;\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 proportion) public view returns (uint256) {\\r\\n        return proportion * _totalSupply / _reflectionTotal;\\r\\n    }\\r\\n\\r\\n    function getCirculatingSupply() public view returns (uint256) {\\r\\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   owners                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    function clearStuckBalance() external onlyOwner {\\r\\n        (bool success,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function clearStuckToken() external onlyOwner {\\r\\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\\r\\n        claimingFees = _enabled;\\r\\n        swapThreshold = _amount;\\r\\n    }\\r\\n\\r\\n    function changeFees(\\r\\n        uint8 reflectionFeeBuy,\\r\\n        uint8 marketingFeeBuy,\\r\\n        uint8 reflectionFeeSell,\\r\\n        uint8 marketingFeeSell\\r\\n    ) external onlyOwner {\\r\\n        uint8 __totalBuyFee = reflectionFeeBuy + marketingFeeBuy;\\r\\n        uint8 __totalSellFee = reflectionFeeSell + marketingFeeSell;\\r\\n\\r\\n        require(__totalBuyFee <= MAX_FEE, \\\"Buy fees too high\\\");\\r\\n        require(__totalSellFee <= MAX_FEE, \\\"Sell fees too high\\\");\\r\\n\\r\\n        buyFee = Fee({\\r\\n            reflection: reflectionFeeBuy,\\r\\n            marketing: marketingFeeBuy,\\r\\n            total: __totalBuyFee\\r\\n        });\\r\\n\\r\\n        sellFee = Fee({\\r\\n            reflection: reflectionFeeSell,\\r\\n            marketing: marketingFeeSell,\\r\\n            total: __totalSellFee\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\r\\n        isFeeExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\\r\\n        isTxLimitExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setFeeReceiver(address receiver) external onlyOwner {\\r\\n        feeReceiver = receiver;\\r\\n    }\\r\\n\\r\\n    function setSwapThreshold(uint256 threshold) external onlyOwner {\\r\\n        swapThreshold = threshold;\\r\\n    }\\r\\n\\r\\n    function setLimitsEnabled(bool enabled) external onlyOwner {\\r\\n        limitsEnabled = enabled;\\r\\n    }\\r\\n\\r\\n    function blacklist(address _address, bool isBlacklisting) external onlyOwner {\\r\\n        blacklists[_address] = isBlacklisting;\\r\\n    }\\r\\n\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n    if (inSwap) {\\r\\n        _basicTransfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    if (limitsEnabled && !isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\\r\\n        require(amount <= balanceOf(sender), \\\"Insufficient Balance\\\");\\r\\n    }\\r\\n\\r\\n    if (_shouldSwapBack()) {\\r\\n        _swapBack();\\r\\n    }\\r\\n\\r\\n    uint256 reflectionAmount = amount * _reflectionTotal / _totalSupply;\\r\\n    require(_reflectionOwned[sender] >= reflectionAmount, \\\"Insufficient Balance\\\");\\r\\n    _reflectionOwned[sender] -= reflectionAmount;\\r\\n\\r\\n    uint256 reflectionReceived = _takeFeeInReflection(sender == UNISWAP_V2_PAIR ? true : false, sender, reflectionAmount);\\r\\n\\r\\n    _reflectionOwned[recipient] += reflectionReceived;\\r\\n\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n    return true;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        uint256 proportionAmount = tokensToProportion(amount);\\r\\n        require(_reflectionOwned[sender] >= proportionAmount, \\\"Insufficient Balance\\\");\\r\\n        _reflectionOwned[sender] -= proportionAmount;\\r\\n        _reflectionOwned[recipient] += proportionAmount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _takeFeeInReflection(bool buying, address sender, uint256 reflectionAmount) internal returns (uint256) {\\r\\n    Fee memory __buyFee = buyFee;\\r\\n    Fee memory __sellFee = sellFee;\\r\\n\\r\\n    uint256 reflectionFeeAmount = buying\\r\\n        ? reflectionAmount * __buyFee.total / 100\\r\\n        : reflectionAmount * __sellFee.total / 100;\\r\\n\\r\\n    // Calculate the proportion of tokens to be reflected\\r\\n    uint256 reflectionReflected = buying\\r\\n        ? reflectionFeeAmount * __buyFee.reflection / __buyFee.total\\r\\n        : reflectionFeeAmount * __sellFee.reflection / __sellFee.total;\\r\\n\\r\\n    _reflectionTotal -= reflectionReflected;\\r\\n\\r\\n    // Deduct the reflection fee from the transfer amount\\r\\n    uint256 reflectionToContract = reflectionFeeAmount - reflectionReflected;\\r\\n    if (reflectionToContract > 0) {\\r\\n        _reflectionOwned[address(this)] += reflectionToContract;\\r\\n        emit Transfer(sender, address(this), reflectionToToken(reflectionToContract));\\r\\n    }\\r\\n\\r\\n    emit Reflect(reflectionReflected, _reflectionTotal);\\r\\n    return reflectionAmount - reflectionFeeAmount;\\r\\n}\\r\\n\\r\\nfunction reflectionToToken(uint256 reflectionAmount) public view returns (uint256) {\\r\\n    return reflectionAmount * _totalSupply / _reflectionTotal;\\r\\n}\\r\\n\\r\\n    function _shouldSwapBack() internal view returns (bool) {\\r\\n    return\\r\\n        msg.sender != UNISWAP_V2_PAIR &&\\r\\n        !inSwap &&\\r\\n        claimingFees &&\\r\\n        balanceOf(address(this)) >= swapThreshold;\\r\\n}\\r\\n\\r\\n\\r\\n    function _swapBack() internal swapping {\\r\\n        Fee memory __sellFee = sellFee;\\r\\n\\r\\n        uint256 __swapThreshold = swapThreshold;\\r\\n        uint256 amountToSwap = __swapThreshold;\\r\\n        approve(address(UNISWAP_V2_ROUTER), amountToSwap);\\r\\n\\r\\n        // swap\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\r\\n\\r\\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap, 0, path, address(this), block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETH = address(this).balance;\\r\\n\\r\\n        uint256 totalSwapFee = __sellFee.total - __sellFee.reflection;\\r\\n        uint256 amountETHMarketing = amountETH * __sellFee.marketing / totalSwapFee;\\r\\n\\r\\n        // send\\r\\n        (bool tmpSuccess,) = payable(feeReceiver).call{value: amountETHMarketing}(\\\"\\\");\\r\\n        require(tmpSuccess, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalProportion\",\"type\":\"uint256\"}],\"name\":\"Reflect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_reflectionOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectionTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"reflectionFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflectionFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingFeeSell\",\"type\":\"uint8\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exemptTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTelegramLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTwitterLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionAmount\",\"type\":\"uint256\"}],\"name\":\"reflectionToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"total\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLimitsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"telegramLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twitterLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newTelegramLink\",\"type\":\"string\"}],\"name\":\"updateTelegramLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newTwitterLink\",\"type\":\"string\"}],\"name\":\"updateTwitterLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ViralCoin", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}