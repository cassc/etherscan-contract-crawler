{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ForgeV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\r\\nimport {IDynaset} from \\\"./interfaces/IDynaset.sol\\\";\\r\\nimport \\\"./interfaces/IDynasetTvlOracle.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract ForgeV1 is AccessControl , ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    /* ==========  Structs  ========== */\\r\\n\\r\\n    struct ForgeInfo {\\r\\n        bool isEth;\\r\\n        address contributionToken;\\r\\n        uint256 dynasetLp;\\r\\n        uint256 totalContribution;\\r\\n        uint256 minContribution;\\r\\n        uint256 maxContribution;\\r\\n        uint256 maxCap;\\r\\n        uint256 contributionPeriod;\\r\\n        bool withdrawEnabled;\\r\\n        bool depositEnabled;\\r\\n        bool forging;\\r\\n        uint256 nextForgeContributorIndex;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 depositAmount;\\r\\n        uint256 dynasetsOwed;\\r\\n    }\\r\\n\\r\\n    struct Contributor {\\r\\n        address contributorAddress;\\r\\n        uint256 contributedAmount;\\r\\n    }\\r\\n\\r\\n    /* ==========  Constants  ========== */\\r\\n    bytes32 public constant BLACK_SMITH = keccak256(abi.encode(\\\"BLACK_SMITH\\\"));\\r\\n\\r\\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\r\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    uint256 public constant USDC_DECIMALS = 6;\\r\\n    uint256 public constant DYNASET_DECIMALS = 18;\\r\\n\\r\\n    uint256 public constant SLIPPAGE_FACTOR = 1000;\\r\\n    uint256 public constant WITHDRAW_FEE_FACTOR = 10000;\\r\\n    uint256 public constant WITHDRAW_FEE_5_PERCENT = 500;\\r\\n    uint256 public constant WITHDRAW_FEE_4_PERCENT = 400;\\r\\n    uint256 public constant WITHDRAW_FEE_2_5_PERCENT = 250;\\r\\n\\r\\n    uint256 public constant WITHDRAW_FEE_5_PERCENT_PERIOD = 30 days;\\r\\n    uint256 public constant WITHDRAW_FEE_4_PERCENT_PERIOD = 60 days;\\r\\n    uint256 public constant WITHDRAW_FEE_2_5_PERCENT_PERIOD = 90 days;\\r\\n\\r\\n    /* ==========  State  ========== */\\r\\n    \\r\\n    // forgeID => Contributor\\r\\n    mapping(uint256 => Contributor[]) public contributors; \\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    ForgeInfo[] public forgeInfo;\\r\\n\\r\\n    IDynaset public dynaset;\\r\\n    IDynasetTvlOracle public dynasetTvlOracle;\\r\\n    address public uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n\\r\\n    uint256 public totalForges;\\r\\n    uint256 public slippage = 50;\\r\\n    uint256 public totalFee;\\r\\n    bool    public lpWithdraw;\\r\\n\\r\\n    uint256 public deadline;\\r\\n\\r\\n    /* ==========  Events  ========== */\\r\\n\\r\\n    event LogForgeAddition(uint256 indexed forgeId, address indexed contributionToken);\\r\\n    event Deposited(address indexed caller, address indexed user, uint256 amount);\\r\\n    event ForgingStarted(uint256 indexed forgeId, uint256 indexed nextForgeContributorIndex);\\r\\n    event DepositedLP(address indexed user, uint256 indexed forgeId, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event Redeemed(address indexed user, uint256 amount);\\r\\n    event Forged(address indexed user, uint256 indexed amount, uint256 price);\\r\\n    event SetlpWithdraw(bool lpWithdraw);\\r\\n    event ForgeWithdrawEnabled(bool status, uint256 forgeId);\\r\\n    event ForgeDepositEnabled(bool status, uint256 forgeId);\\r\\n    event OracleUpdated(address oracle);\\r\\n    event RouterUpgraded(address router);\\r\\n\\r\\n    /* ==========  Constructor  ========== */\\r\\n\\r\\n    constructor(\\r\\n        address _blacksmith,\\r\\n        address _dynaset,\\r\\n        address _dynasetTvlOracle\\r\\n    ) {\\r\\n        require(\\r\\n            _blacksmith != address(0)\\r\\n            && _dynaset != address(0)\\r\\n            && _dynasetTvlOracle != address(0),\\r\\n            \\\"ERR_ZERO_ADDRESS\\\"\\r\\n        );\\r\\n        dynaset = IDynaset(_dynaset);\\r\\n        dynasetTvlOracle = IDynasetTvlOracle(_dynasetTvlOracle);\\r\\n        _setupRole(BLACK_SMITH, _blacksmith);\\r\\n    }\\r\\n\\r\\n    /* ==========  External Functions  ========== */\\r\\n\\r\\n    function createForge(\\r\\n        bool isEth,\\r\\n        address contributionToken,\\r\\n        uint256 mincontrib,\\r\\n        uint256 maxcontrib,\\r\\n        uint256 maxcapital\\r\\n    ) external onlyRole(BLACK_SMITH) {\\r\\n        require(\\r\\n            mincontrib > 0 && maxcontrib > 0 && maxcapital > 0,\\r\\n            \\\"PRICE_ERROR\\\"\\r\\n        );\\r\\n        if(isEth) {\\r\\n            require(contributionToken == WETH, \\\"INCORRECT_CONTRIBUTION_TOKEN\\\");\\r\\n        }\\r\\n        forgeInfo.push(\\r\\n            ForgeInfo({\\r\\n                isEth: isEth,\\r\\n                dynasetLp: 0,\\r\\n                contributionToken: contributionToken,\\r\\n                totalContribution: 0,\\r\\n                minContribution: mincontrib,\\r\\n                maxContribution: maxcontrib,\\r\\n                maxCap: maxcapital,\\r\\n                contributionPeriod: block.timestamp,\\r\\n                withdrawEnabled: false,\\r\\n                depositEnabled: false,\\r\\n                forging: false,\\r\\n                nextForgeContributorIndex: 0\\r\\n            })\\r\\n        );\\r\\n        totalForges = totalForges + 1;\\r\\n        emit LogForgeAddition(forgeInfo.length - 1, contributionToken);\\r\\n    }\\r\\n\\r\\n    function startForging(uint256 forgeId) external onlyRole(BLACK_SMITH) {\\r\\n        ForgeInfo memory forge = forgeInfo[forgeId];\\r\\n        require(!forge.forging, \\\"ERR_FORGING_STARTED\\\");\\r\\n        require(\\r\\n            forge.nextForgeContributorIndex < contributors[forgeId].length,\\r\\n            \\\"ERR_NO_DEPOSITORS\\\"\\r\\n        );\\r\\n        forge.forging = true;\\r\\n        forge.depositEnabled = false;\\r\\n        forgeInfo[forgeId] = forge;\\r\\n        emit ForgingStarted(forgeId, forge.nextForgeContributorIndex);\\r\\n    }\\r\\n\\r\\n    //select forge to mint to assign the dynaset tokens to it\\r\\n    //mint from the contributions set to that forge\\r\\n    function forgeFunction(\\r\\n        uint256 forgeId,\\r\\n        uint256 contributorsToMint,\\r\\n        uint256 minimumAmountOut\\r\\n    ) external nonReentrant onlyRole(BLACK_SMITH) {\\r\\n        uint256 _forgeId = forgeId; // avoid stack too deep\\r\\n        ForgeInfo memory forge = forgeInfo[_forgeId];\\r\\n        require(forge.forging, \\\"ERR_FORGING_NOT_STARTED\\\");\\r\\n        require(!forge.depositEnabled, \\\"ERR_DEPOSITS_NOT_DISABLED\\\");\\r\\n\\r\\n        require(contributorsToMint > 0, \\\"CONTRIBUTORS_TO_MINT_IS_ZERO\\\");\\r\\n        uint256 finalIndex = forge.nextForgeContributorIndex + (contributorsToMint - 1);\\r\\n        uint256 totalContributors = contributors[_forgeId].length;\\r\\n        forge.forging = (finalIndex < totalContributors - 1);\\r\\n        if (finalIndex >= totalContributors) {\\r\\n            finalIndex = totalContributors - 1;\\r\\n        }\\r\\n\\r\\n        uint256 forgedAmount;\\r\\n        uint256 amountToForge;\\r\\n        uint256 i;\\r\\n\\r\\n        for (i = forge.nextForgeContributorIndex; i <= finalIndex; i++) {\\r\\n            amountToForge += contributors[_forgeId][i].contributedAmount;\\r\\n        }\\r\\n        require(amountToForge > 0, \\\"ERR_AMOUNT_TO_FORGE_ZERO\\\");\\r\\n        uint256 tokensMinted = _mintDynaset(forge.contributionToken, amountToForge);\\r\\n        require(tokensMinted >= minimumAmountOut, \\\"ERR_MINIMUM_AMOUNT_OUT\\\");\\r\\n        \\r\\n        for (i = forge.nextForgeContributorIndex; i <= finalIndex && forgedAmount < amountToForge; i++) {\\r\\n            address contributorAddress = contributors[_forgeId][i].contributorAddress;\\r\\n            UserInfo storage user = userInfo[_forgeId][contributorAddress];\\r\\n            uint256 userContributedAmount = contributors[_forgeId][i].contributedAmount;\\r\\n            \\r\\n            forgedAmount += userContributedAmount;\\r\\n            user.depositAmount = user.depositAmount - userContributedAmount;\\r\\n            uint256 userTokensMinted = tokensMinted * userContributedAmount / amountToForge;\\r\\n            user.dynasetsOwed += userTokensMinted;\\r\\n            emit Forged(\\r\\n                contributorAddress,\\r\\n                userTokensMinted,\\r\\n                userContributedAmount\\r\\n            );\\r\\n        }\\r\\n        forge.nextForgeContributorIndex = finalIndex + 1;\\r\\n        forge.totalContribution = forge.totalContribution - forgedAmount;\\r\\n        forge.dynasetLp += tokensMinted;\\r\\n        forgeInfo[_forgeId] = forge;\\r\\n    }\\r\\n\\r\\n    // deposits funds to the forge and the contribution is added to the to address.\\r\\n    // the to address will receive the dynaset LPs.\\r\\n    function deposit(\\r\\n        uint256 forgeId,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external nonReentrant payable {\\r\\n        require(to != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\r\\n        ForgeInfo memory forge = forgeInfo[forgeId];\\r\\n        require(forge.depositEnabled, \\\"ERR_DEPOSIT_DISABLED\\\");\\r\\n        require(amount > 0, \\\"ERR_ZERO_AMOUNT\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[forgeId][to];\\r\\n        if (forge.isEth) {\\r\\n            require(amount == msg.value, \\\"ERR_INVALID_AMOUNT_VALUE\\\");\\r\\n\\r\\n            uint256 totalContribution = user.depositAmount + msg.value;\\r\\n\\r\\n            require(\\r\\n                forge.minContribution <= amount,\\r\\n                \\\"ERR_AMOUNT_BELOW_MINCONTRIBUTION\\\"\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                totalContribution <= forge.maxContribution,\\r\\n                \\\"ERR_AMOUNT_ABOVE_MAXCONTRIBUTION\\\"\\r\\n            );\\r\\n\\r\\n            //3. `forge.maxCap` limit may be exceeded if `forge.isEth` flag is `true`.\\r\\n            require(\\r\\n                (forge.totalContribution + msg.value) <= forge.maxCap,\\r\\n                \\\"MAX_CAP\\\"\\r\\n            );\\r\\n            //convert to weth the eth deposited to the contract\\r\\n            //comment to run tests\\r\\n            user.depositAmount = (user.depositAmount + msg.value);\\r\\n            forge.totalContribution = (forge.totalContribution + msg.value);\\r\\n            forgeInfo[forgeId] = forge;\\r\\n            contributors[forgeId].push(Contributor(to, msg.value));\\r\\n\\r\\n            IWETH(WETH).deposit{value: msg.value}();\\r\\n            emit Deposited(msg.sender, to, amount);\\r\\n        } else {\\r\\n            require(\\r\\n                (forge.totalContribution + amount) <= forge.maxCap,\\r\\n                \\\"MAX_CAP\\\"\\r\\n            );\\r\\n            IERC20 tokenContribution = IERC20(forge.contributionToken);\\r\\n            require(\\r\\n                tokenContribution.balanceOf(msg.sender) >= amount,\\r\\n                \\\"ERR_NOT_ENOUGH_TOKENS\\\"\\r\\n            );\\r\\n            require(\\r\\n                tokenContribution.allowance(msg.sender, address(this)) >=\\r\\n                    amount,\\r\\n                \\\"ERR_INSUFFICIENT_ALLOWANCE\\\"\\r\\n            );\\r\\n\\r\\n            uint256 contribution = user.depositAmount + amount;\\r\\n\\r\\n            require(\\r\\n                forge.minContribution <= contribution,\\r\\n                \\\"ERR_AMOUNT_BELOW_MINCONTRIBUTION\\\"\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                contribution <= forge.maxContribution,\\r\\n                \\\"ERR_AMOUNT_ABOVE_MAXCONTRIBUTION\\\"\\r\\n            );\\r\\n            require(\\r\\n                tokenContribution.balanceOf(address(this)) <= forge.maxCap,\\r\\n                \\\"MAX_CAP\\\"\\r\\n            );\\r\\n            user.depositAmount = contribution;\\r\\n            forge.totalContribution = forge.totalContribution + amount;\\r\\n            forgeInfo[forgeId] = forge;\\r\\n            contributors[forgeId].push(Contributor(to, amount));\\r\\n            tokenContribution.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                amount\\r\\n            );\\r\\n            emit Deposited(msg.sender, to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function redeem(\\r\\n        uint256 forgeId,\\r\\n        uint256 amount,\\r\\n        address redeemToken,\\r\\n        uint256 minimumAmountOut\\r\\n    ) public nonReentrant {\\r\\n        ForgeInfo memory forge = forgeInfo[forgeId];\\r\\n        require(forge.withdrawEnabled, \\\"ERR_WITHDRAW_DISABLED\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[forgeId][msg.sender];\\r\\n        //require(userbalance on dynaset)\\r\\n        require(user.dynasetsOwed >= amount, \\\"ERR_INSUFFICIENT_USER_BALANCE\\\");\\r\\n\\r\\n        uint256 dynasetBalance = dynaset.balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        require(dynasetBalance >= amount, \\\"ERR_FORGE_BALANCE_INSUFFICIENT\\\");\\r\\n        uint256 startTime = forge.contributionPeriod;\\r\\n        uint256 amountSlashed = capitalSlash(amount, startTime);\\r\\n        totalFee = totalFee + (amount - amountSlashed);\\r\\n        (address[] memory tokens, uint256[] memory amounts) = dynaset.calcTokensForAmount(amountSlashed);\\r\\n        address _redeemToken = redeemToken; // avoid stack too deep\\r\\n        require(\\r\\n            _checkValidToken(tokens, _redeemToken),\\r\\n            \\\"ERR_INVALID_REDEEM_TOKEN\\\"\\r\\n        );\\r\\n\\r\\n        uint256 initialRedeemTokenBalance = IERC20(_redeemToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        forge.dynasetLp = forge.dynasetLp - amount;\\r\\n        forgeInfo[forgeId] = forge;\\r\\n        user.dynasetsOwed = user.dynasetsOwed - amount;\\r\\n        userInfo[forgeId][msg.sender] = user;\\r\\n        dynaset.exitDynaset(amountSlashed);\\r\\n        uint256 amountOut = 0;\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            address tokenOut = tokens[i];\\r\\n            uint256 amountIn = amounts[i];\\r\\n            require(\\r\\n                IERC20(tokenOut).balanceOf(address(this)) >= amountIn,\\r\\n                \\\"ERR_INSUFFICIENT_FUNDS_MINT\\\"\\r\\n            );\\r\\n            // for all tokens execpt the redeem token Swap the tokens and\\r\\n            // send them to the user address\\r\\n            // if the tokenOut == redeemToken the funds will be transfered outsede this for loop\\r\\n            if (tokenOut != _redeemToken) {\\r\\n                IERC20(tokenOut).safeIncreaseAllowance(\\r\\n                    uniswapV2Router,\\r\\n                    amountIn\\r\\n                );\\r\\n                address wethAddress = WETH;\\r\\n                uint256 pathLength;\\r\\n                if (tokenOut != wethAddress && _redeemToken != wethAddress) {\\r\\n                    pathLength = 3;\\r\\n                } else {\\r\\n                    pathLength = 2;\\r\\n                }\\r\\n                address[] memory path;\\r\\n                path = new address[](pathLength);\\r\\n                path[0] = tokenOut;\\r\\n                if (tokenOut != wethAddress && _redeemToken != wethAddress) {\\r\\n                    path[1] = wethAddress;\\r\\n                    path[2] = _redeemToken;\\r\\n                } else {\\r\\n                    path[1] = _redeemToken;\\r\\n                }\\r\\n                uint256[] memory uniAmountsOut = IUniswapV2Router(uniswapV2Router).getAmountsOut(amountIn, path);\\r\\n                uint256 minimumAmountOut_ = uniAmountsOut[pathLength - 1] \\r\\n                                            * (SLIPPAGE_FACTOR - slippage) / SLIPPAGE_FACTOR;\\r\\n                //then we will call swapExactTokensForTokens\\r\\n                //for the deadline we will pass in block.timestamp + deadline\\r\\n                //the deadline is the latest time the trade is valid for\\r\\n                uint256[] memory amountsOut = IUniswapV2Router(uniswapV2Router)\\r\\n                    .swapExactTokensForTokens(\\r\\n                        amountIn,\\r\\n                        minimumAmountOut_,\\r\\n                        path,\\r\\n                        msg.sender,\\r\\n                        block.timestamp + deadline\\r\\n                    );\\r\\n                require(amountsOut.length == path.length, \\\"ERR_SWAP_FAILED\\\");\\r\\n                amountOut += amountsOut[amountsOut.length - 1];\\r\\n            } else {\\r\\n                amountOut += amountIn;\\r\\n            }\\r\\n        }\\r\\n        require(amountOut >= minimumAmountOut, \\\"ERR_MINIMUM_AMOUNT_OUT\\\");\\r\\n        uint256 amountToTransfer = (IERC20(_redeemToken).balanceOf(address(this)) - initialRedeemTokenBalance);\\r\\n        IERC20(_redeemToken).safeTransfer(msg.sender, amountToTransfer);\\r\\n        emit Redeemed(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function setlpWithdraw(bool status) external onlyRole(BLACK_SMITH) {\\r\\n        lpWithdraw = status;\\r\\n        emit SetlpWithdraw(lpWithdraw);\\r\\n    }\\r\\n\\r\\n    function withdrawFee() external nonReentrant onlyRole(BLACK_SMITH) {\\r\\n        require(dynaset.balanceOf(address(this)) >= totalFee, \\\"ERR_INSUFFICIENT_BALANCE\\\");\\r\\n        uint256 feeToRedeem = totalFee;\\r\\n        totalFee = 0;\\r\\n        require(dynaset.transfer(msg.sender, feeToRedeem), \\\"ERR_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function setWithdraw(bool status, uint256 forgeId) external onlyRole(BLACK_SMITH) {\\r\\n        require(forgeId < totalForges, \\\"ERR_NONEXISTENT_FORGE\\\");\\r\\n        ForgeInfo memory forge = forgeInfo[forgeId];\\r\\n        forge.withdrawEnabled = status;\\r\\n        forgeInfo[forgeId] = forge;\\r\\n        emit ForgeWithdrawEnabled(status, forgeId);\\r\\n    }\\r\\n\\r\\n    function setDeposit(bool status, uint256 forgeId) external onlyRole(BLACK_SMITH) {\\r\\n        require(forgeId < totalForges, \\\"ERR_NONEXISTENT_FORGE\\\");\\r\\n        ForgeInfo memory forge = forgeInfo[forgeId];\\r\\n        forge.depositEnabled = status;\\r\\n        forgeInfo[forgeId] = forge;\\r\\n        emit ForgeDepositEnabled(status, forgeId);\\r\\n    }\\r\\n\\r\\n    function setDeadline(uint256 newDeadline) external onlyRole(BLACK_SMITH) {\\r\\n        deadline = newDeadline;\\r\\n    }\\r\\n\\r\\n    function upgradeUniswapV2Router(address newUniswapV2Router) external onlyRole(BLACK_SMITH) {\\r\\n        require(newUniswapV2Router != address(0), \\\"ERR_ADDRESS_ZERO\\\");\\r\\n        uniswapV2Router = newUniswapV2Router;\\r\\n        emit RouterUpgraded(newUniswapV2Router);\\r\\n    }\\r\\n\\r\\n    function depositOutput(uint256 forgeId, uint256 amount) public nonReentrant {\\r\\n        ForgeInfo memory forge = forgeInfo[forgeId];\\r\\n        UserInfo storage user = userInfo[forgeId][msg.sender];\\r\\n\\r\\n        require(dynaset.balanceOf(msg.sender) >= amount, \\\"ERR_INSUFFICIENT_DEPOSITOR_BALANCE\\\");\\r\\n\\r\\n        user.dynasetsOwed = user.dynasetsOwed + amount;\\r\\n        userInfo[forgeId][msg.sender] = user;\\r\\n\\r\\n        forge.dynasetLp = forge.dynasetLp + amount;\\r\\n        forgeInfo[forgeId] = forge;\\r\\n\\r\\n        require(dynaset.transferFrom(msg.sender, address(this), amount), \\\"ERR_TRANSFER_FAILED\\\");\\r\\n        emit DepositedLP(msg.sender, forgeId, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawOutput(uint256 forgeId, uint256 amount) external nonReentrant {\\r\\n        ForgeInfo memory forge = forgeInfo[forgeId];\\r\\n        UserInfo storage user = userInfo[forgeId][msg.sender];\\r\\n\\r\\n        require(lpWithdraw, \\\"ERR_WITHDRAW_DISABLED\\\");\\r\\n        require(dynaset.balanceOf(address(this)) >= user.dynasetsOwed, \\\"ERR_INSUFFICIENT_CONTRACT_BALANCE\\\");\\r\\n        require(user.dynasetsOwed >= amount, \\\"ERR_INSUFFICIENT_USER_BALANCE\\\");\\r\\n        \\r\\n        user.dynasetsOwed = user.dynasetsOwed - (amount);\\r\\n        userInfo[forgeId][msg.sender] = user;\\r\\n\\r\\n        forge.dynasetLp = forge.dynasetLp - (amount);\\r\\n        forgeInfo[forgeId] = forge;\\r\\n\\r\\n        require(dynaset.transfer(msg.sender, amount), \\\"ERR_TRANSFER_FAILED\\\");\\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // the dynaset tokens are transfered from wallet to forgeContract\\r\\n    // which are then redeemed to desired redeemToken\\r\\n    // Did not add reEntrency Guard because both depositOutput and\\r\\n    // redeem are nonReentrant \\r\\n    function redeemFromWallet(\\r\\n        uint256 forgeId,\\r\\n        uint256 amount,\\r\\n        address redeemToken,\\r\\n        uint256 minimumAmountOut\\r\\n    ) external {\\r\\n        depositOutput(forgeId, amount);\\r\\n        redeem(forgeId, amount, redeemToken, minimumAmountOut);\\r\\n    }\\r\\n\\r\\n    function setSlippage(uint256 newSlippage) external onlyRole(BLACK_SMITH) {\\r\\n        require(newSlippage < (SLIPPAGE_FACTOR / 2), \\\"SLIPPAGE_TOO_HIGH\\\");\\r\\n        slippage = newSlippage;\\r\\n    }\\r\\n    \\r\\n    function updateOracle(address newDynasetTvlOracle) external onlyRole(BLACK_SMITH) {\\r\\n        dynasetTvlOracle = IDynasetTvlOracle(newDynasetTvlOracle);\\r\\n        emit OracleUpdated(newDynasetTvlOracle);\\r\\n    }\\r\\n\\r\\n    function getUserDynasetsOwned(uint256 forgeId, address user) external view returns (uint256) {\\r\\n        return userInfo[forgeId][user].dynasetsOwed;\\r\\n    }\\r\\n\\r\\n    function getUserContribution(uint256 forgeId, address user) external view returns (uint256) {\\r\\n        return userInfo[forgeId][user].depositAmount;\\r\\n    }\\r\\n\\r\\n    function getForgeBalance(uint256 forgeId) external view returns (uint256) {\\r\\n        return forgeInfo[forgeId].totalContribution;\\r\\n    }\\r\\n\\r\\n    function getContributor(uint256 id, uint256 index) external view returns (address) {\\r\\n        return contributors[id][index].contributorAddress;\\r\\n    }\\r\\n\\r\\n    /* ==========  Public Functions  ========== */\\r\\n\\r\\n    function calculateContributionUsdc(uint256 forgeId) public view returns (uint256 contrib) {\\r\\n        ForgeInfo memory forge = forgeInfo[forgeId];\\r\\n        uint256 contributionAmount = forge.totalContribution;\\r\\n        address contributionToken = forge.contributionToken;\\r\\n        if (contributionToken == USDC) {\\r\\n            return contributionAmount;\\r\\n        } else {\\r\\n            return dynasetTvlOracle.tokenUsdcValue(contributionToken, contributionAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // withdrawal fee calculation based on contribution time\\r\\n    // 0-30 days 5%\\r\\n    // 31-60 days 4%\\r\\n    // 61 - 90 days 2.5%\\r\\n    // above 91 days 0%\\r\\n    function capitalSlash(uint256 amount, uint256 contributionTime) public view returns (uint256) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if ((contributionTime <= currentTime)\\r\\n        && (currentTime < contributionTime + WITHDRAW_FEE_5_PERCENT_PERIOD)) {\\r\\n            return amount * (WITHDRAW_FEE_FACTOR - WITHDRAW_FEE_5_PERCENT) / WITHDRAW_FEE_FACTOR;\\r\\n        }\\r\\n        if ((contributionTime + WITHDRAW_FEE_5_PERCENT_PERIOD <= currentTime) \\r\\n        && (currentTime < contributionTime + WITHDRAW_FEE_4_PERCENT_PERIOD)) {\\r\\n            return amount * (WITHDRAW_FEE_FACTOR - WITHDRAW_FEE_4_PERCENT) / WITHDRAW_FEE_FACTOR;\\r\\n        }\\r\\n        if ((contributionTime + WITHDRAW_FEE_4_PERCENT_PERIOD <= currentTime) \\r\\n        && (currentTime < contributionTime + WITHDRAW_FEE_2_5_PERCENT_PERIOD)) {\\r\\n            return amount * (WITHDRAW_FEE_FACTOR - WITHDRAW_FEE_2_5_PERCENT) / WITHDRAW_FEE_FACTOR;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n  \\r\\n    // ! Keeping it commented to verify it is not used anywhere.\\r\\n    // function getDepositors(uint256 forgeId) external view returns (address[] memory depositors) {\\r\\n    //     uint256 length = contributors[forgeId].length;\\r\\n    //     depositors = new address[](length);\\r\\n    //     for (uint256 i = 0; i < length; i++) {\\r\\n    //         depositors[i] = contributors[forgeId][i].contributorAddress;\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    // This method should multiply by 18 decimals before doing division \\r\\n    // to be sure that the outputAmount has 18 decimals precision\\r\\n    function getOutputAmount(uint256 forgeId) public view returns (uint256 amount) {\\r\\n        uint256 contributionUsdcValue = calculateContributionUsdc(forgeId);\\r\\n        uint256 output = (contributionUsdcValue * (10**(DYNASET_DECIMALS + DYNASET_DECIMALS - USDC_DECIMALS)))\\r\\n                         / dynasetTvlOracle.dynasetUsdcValuePerShare();\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    /* ==========  Internal Functions  ========== */\\r\\n\\r\\n\\r\\n    function _mintDynaset(address _contributionToken, uint256 contributionAmount) internal returns (uint256) {\\r\\n        uint256 contributionUsdcValue = dynasetTvlOracle.tokenUsdcValue(_contributionToken, contributionAmount);\\r\\n        address[] memory tokens;\\r\\n        uint256[] memory ratios;\\r\\n        uint256 totalUSDC;\\r\\n        (tokens, ratios, totalUSDC) = dynasetTvlOracle.dynasetTokenUsdcRatios();\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            address token = tokens[i];\\r\\n            uint256 amountIn = contributionAmount * ratios[i] / 1e18;\\r\\n            uint256 amountOut;\\r\\n            if (token == _contributionToken) {\\r\\n                amountOut = amountIn;\\r\\n            } else {\\r\\n                address contributionToken = _contributionToken;\\r\\n                bool routeOverWeth = (contributionToken != WETH && token != WETH);\\r\\n                uint256 pathLength = routeOverWeth ? 3 : 2;\\r\\n                address[] memory path = new address[](pathLength);\\r\\n                path[0] = contributionToken;\\r\\n                if (routeOverWeth) {\\r\\n                    path[1] = WETH;\\r\\n                }\\r\\n                path[pathLength - 1] = token;\\r\\n\\r\\n                uint256[] memory amountsOut = IUniswapV2Router(uniswapV2Router).getAmountsOut(amountIn, path);\\r\\n                amountOut = amountsOut[pathLength - 1];\\r\\n\\r\\n                IERC20(contributionToken).safeIncreaseAllowance(uniswapV2Router, amountIn);\\r\\n                require(\\r\\n                    IUniswapV2Router(uniswapV2Router)\\r\\n                        .swapExactTokensForTokens(\\r\\n                            amountIn,\\r\\n                            amountOut * (SLIPPAGE_FACTOR - slippage) / SLIPPAGE_FACTOR,\\r\\n                            path,\\r\\n                            address(this),\\r\\n                            block.timestamp + deadline\\r\\n                        )\\r\\n                        .length == path.length,\\r\\n                    \\\"ERR_SWAP_FAILED\\\"\\r\\n                );\\r\\n            }\\r\\n            IERC20(token).safeIncreaseAllowance(address(dynaset), amountOut);\\r\\n        }\\r\\n        uint256 totalSupply = dynaset.totalSupply();\\r\\n        uint256 sharesToMint = contributionUsdcValue * totalSupply / totalUSDC;\\r\\n        return dynaset.joinDynaset(sharesToMint);\\r\\n    }\\r\\n\\r\\n    function _checkValidToken(address[] memory tokens, address redeemToken) internal pure returns (bool valid) {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            if (tokens[i] == redeemToken) {\\r\\n                valid = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.15;\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function swapExactTokensForTokens(\\r\\n        //amount of tokens we are sending in\\r\\n        uint256 amountIn,\\r\\n        //the minimum amount of tokens we want out of the trade\\r\\n        uint256 amountOutMin,\\r\\n        //list of token addresses we are going to trade in.  this is necessary to calculate amounts\\r\\n        address[] calldata path,\\r\\n        //this is the address we are going to send the output tokens to\\r\\n        address to,\\r\\n        //the last time that the trade is valid for\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDynaset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IDynaset is IERC20 {\\r\\n    function joinDynaset(uint256 _amount) external returns (uint256);\\r\\n\\r\\n    function exitDynaset(uint256 _amount) external;\\r\\n\\r\\n    function calcTokensForAmount(uint256 _amount)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory tokens, uint256[] memory amounts);\\r\\n        \\r\\n    function getTokenAmounts()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory tokens, uint256[] memory amounts);\\r\\n\\r\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDynasetTvlOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.15;\\r\\n\\r\\ninterface IDynasetTvlOracle {\\r\\n    function dynasetTvlUsdc() external view returns (uint256 total_usd);\\r\\n\\r\\n    function tokenUsdcValue(address _tokenIn, uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function dynasetUsdcValuePerShare() external view returns (uint256);\\r\\n\\r\\n    function dynasetTokenUsdcRatios() external view returns (address[] memory, uint256[] memory, uint256);\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.15;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Approval(address indexed _src, address indexed _dst, uint256 _amount);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _whom) external view returns (uint256);\\r\\n\\r\\n    function allowance(address _src, address _dst)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address _dst, uint256 _amount) external returns (bool);\\r\\n\\r\\n    function transfer(address _dst, uint256 _amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address _src,\\r\\n        address _dst,\\r\\n        uint256 _amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blacksmith\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dynaset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dynasetTvlOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositedLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"}],\"name\":\"ForgeDepositEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"}],\"name\":\"ForgeWithdrawEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Forged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nextForgeContributorIndex\",\"type\":\"uint256\"}],\"name\":\"ForgingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributionToken\",\"type\":\"address\"}],\"name\":\"LogForgeAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lpWithdraw\",\"type\":\"bool\"}],\"name\":\"SetlpWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLACK_SMITH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DYNASET_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_2_5_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_2_5_PERCENT_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_4_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_4_PERCENT_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_5_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_5_PERCENT_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"}],\"name\":\"calculateContributionUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contrib\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionTime\",\"type\":\"uint256\"}],\"name\":\"capitalSlash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contributorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mincontrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxcontrib\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxcapital\",\"type\":\"uint256\"}],\"name\":\"createForge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynaset\",\"outputs\":[{\"internalType\":\"contract IDynaset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynasetTvlOracle\",\"outputs\":[{\"internalType\":\"contract IDynasetTvlOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributorsToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmountOut\",\"type\":\"uint256\"}],\"name\":\"forgeFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forgeInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dynasetLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"forging\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nextForgeContributorIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getContributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"}],\"name\":\"getForgeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDynasetsOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"redeemToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmountOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"redeemToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmountOut\",\"type\":\"uint256\"}],\"name\":\"redeemFromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDeadline\",\"type\":\"uint256\"}],\"name\":\"setDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"}],\"name\":\"setDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSlippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"}],\"name\":\"setWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setlpWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"}],\"name\":\"startForging\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalForges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDynasetTvlOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUniswapV2Router\",\"type\":\"address\"}],\"name\":\"upgradeUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasetsOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOutput\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ForgeV1", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cd231d4ba7b15a4722ac057419d9cd7689e7b8db0000000000000000000000007bb1a6b19e37028b3aa5c580339c640720e3520300000000000000000000000092cfd89ee8e809df40c2fc0abd5a9c806687dad6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}