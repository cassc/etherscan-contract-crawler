{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ArtFactory.sol\": {\r\n      \"content\": \"// File: contracts/ArtFactory.sol\\n\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./IArtData.sol\\\";\\nimport \\\"./IPlaneFactory.sol\\\";\\nimport \\\"./IArtFactory.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./enhance/IEnhancementFactory.sol\\\";\\n\\ncontract ArtFactory is IArtFactory, Ownable{\\n    using Strings for uint8;\\n    using Strings for uint;\\n    \\n    //plane static data\\n    IArtData public artData;\\n    //plane calculators\\n    IPlaneFactory public planeFactory;\\n    IEnhancementFactory enhancement;\\n\\n    constructor() {\\n    }\\n\\n    function setArtDataAddr(address artDataAddr) external virtual override onlyOwner {\\n        artData = IArtData(artDataAddr);\\n    }\\n\\n    function setPlaneFactoryAddr(address planeFactoryAddr) external virtual override onlyOwner {\\n        planeFactory = IPlaneFactory(planeFactoryAddr);\\n    }\\n\\n    function tokenHash(string memory seed, string memory attName ) internal pure returns (uint256){\\n        return uint256(keccak256(abi.encodePacked(seed, attName)));\\n    }\\n\\n    function setEnhancementFactoryAddr(address addr) external virtual onlyOwner {\\n        enhancement = IEnhancementFactory(addr);\\n    }\\n\\n    function randomX(string memory seed, string memory attName, uint256 numValues) internal pure returns (uint8) {\\n        uint256 hash = tokenHash(seed, attName);\\n        return uint8( hash %  numValues );\\n    }\\n\\n    // rawValue is a number from 0 to 99\\n    function selectByRarity(uint8 rawValue, uint8[] memory rarities) internal pure returns(uint8) {\\n        uint8 i;\\n        for(i = 0; i < rarities.length; i++) {\\n            if(rawValue < rarities[i]) {\\n                break;\\n            }\\n        }\\n        return i;\\n    }\\n\\n    function calcAttributes(string memory seed, uint256 tokenId) external view virtual override returns (BaseAttributes memory){\\n        require(address(artData) != address(0), \\\"No artData addr\\\");\\n        require(address(planeFactory) != address(0), \\\"No planeFactory addr\\\");\\n        require(address(enhancement) != address(0), \\\"No spray addr\\\");\\n\\n        BaseAttributes memory baseAtts;\\n        baseAtts.proximity = selectByRarity(randomX(seed, 'proximity', 100), artData.getProximityRarities());\\n        baseAtts.skyCol = selectByRarity(randomX(seed, 'skyCol', 100), artData.getSkyRarities());\\n        baseAtts.numPlanes = randomX(seed, 'numPlanes', artData.getMaxNumPlanes()) + 1; //num planes must start from 1\\n        baseAtts.extraParams = new uint8[](uint8(type(EP).max)+1);\\n        baseAtts.extraParams[uint(EP.NumAngles)] = randomX(seed, 'numAngles', artData.getNumAngles()) + 1;  //angles must start from 1 - we cant have num angles = 0\\n        baseAtts.palette = selectByRarity(randomX(seed, 'palette', 100), artData.getColorPaletteRarities());\\n\\n        uint paletteSize = artData.getPaletteSize(baseAtts.palette);\\n        baseAtts.planeAttributes = new PlaneAttributes[](baseAtts.numPlanes);\\n\\n\\n        for(uint i=0; i < baseAtts.numPlanes; i++) {\\n            baseAtts.planeAttributes[i] = planeFactory.buildPlane(seed, i, artData, paletteSize, baseAtts.extraParams[uint(EP.NumAngles)]);\\n        }\\n        baseAtts = enhancement.applyEnhancement(baseAtts, tokenId, seed);\\n\\n        return baseAtts;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/enhance/IEnhancementFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../Structs.sol\\\";\\n\\ninterface IEnhancementFactory {\\n\\n    function applyEnhancement(BaseAttributes memory baseAtts, uint skyId, string memory seed) external view returns (BaseAttributes memory);\\n\\n}\"\r\n    },\r\n    \"/contracts/Structs.sol\": {\r\n      \"content\": \"// File: contracts/Structs.sol\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nstruct PlaneAttributes {\\n    uint8 locX;\\n    uint8 locY;\\n    uint8 angle;\\n    uint8 trailCol;\\n    uint8 level;\\n    uint8 speed;\\n    uint8 planeType;\\n    uint8[] extraParams;\\n}\\n\\nstruct BaseAttributes {\\n    uint8 proximity;\\n    uint8 skyCol;\\n    uint8 numPlanes;\\n    uint8 palette;\\n    PlaneAttributes[] planeAttributes;\\n    uint8[] extraParams;\\n}\\n\\n\\nenum PlaneEP {\\n    PaintType,\\n    PaletteIdx,\\n    ColorIdx,\\n    ColorIdx2,\\n    ColorIdx3\\n}\\n\\nenum PaintTypes {\\n    None,\\n    Solid\\n}\\n\\nenum EP {\\n    NumAngles,\\n    PaintType,\\n    PaletteIdx\\n}\\n\\nstruct PaintData {\\n    uint8 paintType;\\n    uint[] pingIds;\\n    uint[][] extraData; //not used\\n}\\n\"\r\n    },\r\n    \"/contracts/IPlaneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./IArtData.sol\\\";\\n\\ninterface IPlaneFactory {\\n    function buildPlane(string memory seed, uint planeInstId, IArtData artData, uint numTrailColors, uint numAnglesForArt) external view returns (PlaneAttributes memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/IArtFactory.sol\": {\r\n      \"content\": \"// File: contracts/IArtFactory.sol\\n\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IArtData.sol\\\";\\nimport \\\"./IPlaneFactory.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\ninterface IArtFactory {\\n\\n    function setArtDataAddr(address artDataAddr) external;\\n\\n//    function setPlaneAddr(address planeAddr) external;\\n\\n    function setPlaneFactoryAddr(address planeFactoryAddr) external ;\\n\\n\\n//    function makeAttributeParts(BaseAttributes memory atts) external view returns (string[15] memory);\\n\\n    function calcAttributes(string memory seed, uint256 tokenId) external view returns (BaseAttributes memory);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/IArtData.sol\": {\r\n      \"content\": \"// File: contracts/IArtData.sol\\n\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./IArtData.sol\\\";\\n\\ninterface IArtData{\\n\\n    struct ArtProps {\\n        uint256 numOfX;\\n        uint256 numOfY;\\n        uint256 numAngles;\\n        uint256 numTypes;\\n        uint256[] extraParams;\\n    }\\n\\n    function getProps() external view returns(ArtProps memory);\\n\\n\\n    function getNumOfX() external view returns (uint) ;\\n\\n    function getNumOfY() external view returns (uint);\\n\\n    function getNumAngles() external view returns (uint);\\n\\n    function getNumTypes() external view returns (uint);\\n\\n    function getNumSpeeds() external view returns (uint);\\n\\n    function getSkyName(uint index) external view returns (string calldata);\\n\\n    function getNumSkyCols() external view returns (uint);\\n\\n    function getColorPaletteName(uint paletteIdx) external view returns (string calldata) ;\\n\\n    function getNumColorPalettes() external view returns (uint) ;\\n\\n    function getPaletteSize(uint paletteIdx) external view returns (uint);\\n\\n    function getProximityName(uint index) external view returns (string calldata);\\n\\n    function getNumProximities() external view returns (uint);\\n\\n    function getMaxNumPlanes() external view returns (uint);\\n\\n\\n    function getLevelRarities() external view returns (uint8[] calldata);\\n\\n    function getSpeedRarities() external view returns (uint8[] calldata);\\n\\n    function getPlaneTypeRarities() external view returns (uint8[] calldata);\\n\\n    function getProximityRarities() external view returns (uint8[] calldata);\\n\\n    function getSkyRarities() external view returns (uint8[] calldata) ;\\n\\n    function getColorPaletteRarities() external view returns (uint8[] calldata) ;\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"artData\",\"outputs\":[{\"internalType\":\"contract IArtData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"calcAttributes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"proximity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skyCol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numPlanes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"palette\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"locX\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"locY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"angle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"trailCol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"speed\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"planeType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"extraParams\",\"type\":\"uint8[]\"}],\"internalType\":\"struct PlaneAttributes[]\",\"name\":\"planeAttributes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8[]\",\"name\":\"extraParams\",\"type\":\"uint8[]\"}],\"internalType\":\"struct BaseAttributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planeFactory\",\"outputs\":[{\"internalType\":\"contract IPlaneFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artDataAddr\",\"type\":\"address\"}],\"name\":\"setArtDataAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEnhancementFactoryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"planeFactoryAddr\",\"type\":\"address\"}],\"name\":\"setPlaneFactoryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ArtFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}