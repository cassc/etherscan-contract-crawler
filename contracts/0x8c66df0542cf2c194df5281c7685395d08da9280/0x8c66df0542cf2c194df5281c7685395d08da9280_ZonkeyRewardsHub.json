{"SourceCode": "/**\r\n    Website: https://zonkey.io\r\n    Twitter: https://twitter.com/zonkeyio\r\n    Telegram: https://t.me/zonkeyofficial\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20Extended {\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function circulatingSupply() external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract ZonkeyRewardsHub {\r\n    address private constant _POOL_WALLET =\r\n        0x94e0fbC2390b38754927Fd8AD034Df3b7569FEfb;\r\n    address private constant _UNISWAP_V2_ROUTER =\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    address public immutable owner;\r\n\r\n    mapping(address => address) public tokens;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function burnAndClaim(address rewardToken, uint256 burnAmount) external {\r\n        require(\r\n            tokens[rewardToken] != address(0),\r\n            \"reward token not registered\"\r\n        );\r\n        require(burnAmount > 0, \"invalid burn amount\");\r\n\r\n        IERC20Extended rewTkn = IERC20Extended(rewardToken);\r\n        IERC20Extended utilTkn = IERC20Extended(tokens[rewardToken]);\r\n\r\n        uint256 utilityClaimAmount = _getClaimAmount(\r\n            burnAmount,\r\n            rewTkn.circulatingSupply(),\r\n            utilTkn.balanceOf(_POOL_WALLET)\r\n        );\r\n        require(utilityClaimAmount > 0, \"claimable utility tokens == 0\");\r\n\r\n        rewTkn.burnFrom(msg.sender, burnAmount);\r\n        utilTkn.transferFrom(_POOL_WALLET, msg.sender, utilityClaimAmount);\r\n    }\r\n\r\n    function configureToken(\r\n        address rewardToken,\r\n        address utilityToken\r\n    ) external onlyOwner {\r\n        require(utilityToken != address(0), \"cannot unregister token\");\r\n        tokens[rewardToken] = utilityToken;\r\n    }\r\n\r\n    function convertPool(address rewardToken) external onlyOwner {\r\n        IERC20Extended rewTkn = IERC20Extended(rewardToken);\r\n\r\n        uint256 poolBalance = rewTkn.balanceOf(_POOL_WALLET);\r\n        require(poolBalance > 0, \"pool reward token balance == 0\");\r\n\r\n        uint256 allowance = rewTkn.allowance(address(this), _UNISWAP_V2_ROUTER);\r\n        if (allowance < poolBalance)\r\n            rewTkn.approve(_UNISWAP_V2_ROUTER, type(uint256).max);\r\n\r\n        rewTkn.transferFrom(_POOL_WALLET, address(this), poolBalance);\r\n\r\n        address[] memory path = new address[](3);\r\n        path[0] = rewardToken;\r\n        path[1] = _WETH;\r\n        path[2] = tokens[rewardToken];\r\n\r\n        IUniswapV2Router02(_UNISWAP_V2_ROUTER)\r\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                poolBalance,\r\n                0,\r\n                path,\r\n                _POOL_WALLET,\r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    function getClaimAmount(\r\n        address rewardToken,\r\n        uint256 burnAmount\r\n    ) external view returns (uint256) {\r\n        return\r\n            _getClaimAmount(\r\n                burnAmount,\r\n                IERC20Extended(rewardToken).circulatingSupply(),\r\n                IERC20Extended(tokens[rewardToken]).balanceOf(_POOL_WALLET)\r\n            );\r\n    }\r\n\r\n    function withdrawERC20(address token, uint256 amount) external onlyOwner {\r\n        IERC20Extended(token).transfer(owner, amount);\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) external onlyOwner {\r\n        (bool success, ) = owner.call{value: amount}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function _getClaimAmount(\r\n        uint256 rewardBurnAmount,\r\n        uint256 rewardCirculatingSupply,\r\n        uint256 utilityTokensInPool\r\n    ) internal pure returns (uint256) {\r\n        if (\r\n            rewardBurnAmount == 0 ||\r\n            rewardCirculatingSupply == 0 ||\r\n            utilityTokensInPool == 0\r\n        ) return 0;\r\n\r\n        uint256 supplyPercentage = (rewardBurnAmount * 100_000) /\r\n            rewardCirculatingSupply;\r\n        return (supplyPercentage * utilityTokensInPool) / 100_000;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"burnAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"utilityToken\",\"type\":\"address\"}],\"name\":\"configureToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"convertPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"getClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZonkeyRewardsHub", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://020312439abb3425bf2f635aaf0f00f623ca8ab6dc134e7705039c44e9c0d7f3"}