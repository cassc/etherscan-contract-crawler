{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/watch raffle.sol/raffle.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\ncontract Raffle {\r\n    using SafeMath for uint256;\r\n    address public manager;\r\n    IERC20 public usdtAddress;\r\n\r\n    struct RaffleInfo {\r\n        string name;\r\n        string image;\r\n        string detailPageImage;\r\n        uint256 marketValue;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 ticketPrice;\r\n        uint256 maxTickets;\r\n        uint256 maxTicketsPerParticipant;\r\n        uint256 numberOfWinners;\r\n        uint256 totalTicketsSold;\r\n        bool raffleClosed;\r\n    }\r\n\r\n    RaffleInfo public raffle;\r\n\r\n    struct UserInfo {\r\n        string email;\r\n        uint256 ticketsPurchased;\r\n    }\r\n\r\n    struct Affiliate {\r\n        address affiliateAddress;\r\n        uint256 ticketsSold;\r\n        uint256 totalCommission; // Commission rate in percentage\r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfoMap;  \r\n    mapping(address => Affiliate) public affiliates; //AFF\r\n\r\n    address[] public participants;\r\n    uint256[] public winnerIndices;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _image,\r\n        string memory _detailPageImage,\r\n        uint256 _marketValue,\r\n        uint256 _endTime,\r\n        uint256 _ticketPrice,\r\n        uint256 _maxTickets,\r\n        uint256 _maxTicketsPerParticipant,\r\n        uint256 _numberOfWinners,\r\n        address _manager,\r\n        IERC20 _usdtAddress\r\n    ) {\r\n        require(_numberOfWinners <= 3, \"Winners Can't be more than 3\");\r\n        manager = _manager;\r\n        raffle = RaffleInfo(\r\n            _name,\r\n            _image,\r\n            _detailPageImage,\r\n            _marketValue,\r\n            block.timestamp,\r\n            block.timestamp.add(3600 * _endTime),\r\n            _ticketPrice,\r\n            _maxTickets,\r\n            _maxTicketsPerParticipant,\r\n            _numberOfWinners,\r\n            0,\r\n            false\r\n        );\r\n        usdtAddress = _usdtAddress;\r\n    }\r\n\r\n    event AffliateCreated(\r\n        address creator,\r\n        address affiliater,\r\n        uint256 ticketPrice,\r\n        uint256 ticketsBuy,\r\n        uint256 commission\r\n    );\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \"Only the manager can call this\");\r\n        _;\r\n    }\r\n\r\n    modifier notClosed() {\r\n        require(!raffle.raffleClosed, \"Raffle is closed\");\r\n        _;\r\n    }\r\n\r\n    function getRaffle() public view returns (RaffleInfo memory) {\r\n        return raffle;\r\n    }\r\n\r\n    // function enter(string memory email, uint256 numberOfTickets) public notClosed {\r\n    //     require(numberOfTickets > 0, \"Number of tickets must be greater than 0\");\r\n    //     require(\r\n    //         raffle.totalTicketsSold.add(numberOfTickets) <= raffle.maxTickets,\r\n    //         \"Exceeds max tickets available\"\r\n    //     );\r\n    //     require(\r\n    //         userInfoMap[msg.sender].ticketsPurchased.add(numberOfTickets) <= raffle.maxTicketsPerParticipant,\r\n    //         \"Exceeds max tickets per participant\"\r\n    //     );\r\n\r\n    //     require(usdtAddress.balanceOf(msg.sender) >= raffle.ticketPrice.mul(numberOfTickets), \"Insufficient funds\");\r\n    //     require(usdtAddress.transferFrom(msg.sender, manager, raffle.ticketPrice.mul(numberOfTickets)), \"USDT transfer failed\");\r\n\r\n    //     for (uint256 i = 0; i < numberOfTickets; i++) {\r\n    //         participants.push(msg.sender);\r\n    //     }\r\n\r\n    //     raffle.totalTicketsSold = raffle.totalTicketsSold.add(numberOfTickets);\r\n    //     userInfoMap[msg.sender] = UserInfo(email, userInfoMap[msg.sender].ticketsPurchased.add(numberOfTickets));\r\n\r\n    //     if (raffle.totalTicketsSold >= raffle.maxTickets) {\r\n    //         closeRaffle();\r\n    //     }\r\n    // }\r\n\r\n    function enter(string memory email, uint256 numberOfTickets, address referrer) public notClosed {\r\n        require(numberOfTickets > 0, \"Number of tickets must be greater than 0\");\r\n        require(\r\n            raffle.totalTicketsSold.add(numberOfTickets) <= raffle.maxTickets,\r\n            \"Exceeds max tickets available\"\r\n        );\r\n        require(\r\n            userInfoMap[msg.sender].ticketsPurchased.add(numberOfTickets) <= raffle.maxTicketsPerParticipant,\r\n            \"Exceeds max tickets per participant\"\r\n        );\r\n\r\n        uint256 ticketPrice = raffle.ticketPrice.mul(numberOfTickets);\r\n        uint256 commission = 0;\r\n\r\n        require(usdtAddress.balanceOf(msg.sender) >= ticketPrice, \"Insufficient funds\");\r\n\r\n        if (referrer != address(0)) {\r\n            Affiliate storage affiliate = affiliates[referrer];\r\n\r\n            if (affiliate.affiliateAddress == address(0)) {\r\n                // Create a new affiliate if the referrer does not exist\r\n                affiliate.affiliateAddress = referrer;\r\n            }\r\n\r\n            // Calculate the commission based on the number of tickets\r\n            if (numberOfTickets >= 1 && numberOfTickets <= 5) {\r\n                commission = ticketPrice.mul(5).div(100);\r\n            } else if (numberOfTickets <= 10) {\r\n                commission = ticketPrice.mul(10).div(100);\r\n            } else if (numberOfTickets <= 20) {\r\n                commission = ticketPrice.mul(15).div(100);\r\n            } else if (numberOfTickets > 20) {\r\n                commission = ticketPrice.mul(20).div(100);\r\n            }\r\n\r\n            usdtAddress.transferFrom(msg.sender, affiliate.affiliateAddress, commission);\r\n            affiliate.ticketsSold = affiliate.ticketsSold.add(numberOfTickets);\r\n            affiliate.totalCommission = affiliate.totalCommission.add(commission);\r\n        }\r\n\r\n        uint256 remainingAmount = ticketPrice.sub(commission);\r\n        require(usdtAddress.transferFrom(msg.sender, manager, remainingAmount), \"USDT transfer failed\");\r\n\r\n        for (uint256 i = 0; i < numberOfTickets; i++) {\r\n            participants.push(msg.sender);\r\n        }\r\n\r\n        raffle.totalTicketsSold = raffle.totalTicketsSold.add(numberOfTickets);\r\n        userInfoMap[msg.sender] = UserInfo(email, userInfoMap[msg.sender].ticketsPurchased.add(numberOfTickets));\r\n\r\n        emit AffliateCreated(\r\n            msg.sender,\r\n            referrer,\r\n            raffle.ticketPrice,\r\n            numberOfTickets,\r\n            commission\r\n        );\r\n\r\n        if (raffle.totalTicketsSold >= raffle.maxTickets) {\r\n            closeRaffle();\r\n        }\r\n    }\r\n\r\n\r\n    function closeRaffle() internal notClosed {\r\n        require(raffle.totalTicketsSold > 0, \"No participants to select from\");\r\n        require(raffle.numberOfWinners <= raffle.totalTicketsSold, \"Not enough participants for the number of winners\");\r\n\r\n        raffle.raffleClosed = true;\r\n\r\n        uint256 randomWinner = random();\r\n        for (uint256 i = 0; i < raffle.numberOfWinners; i++) {\r\n            if (i == 0) {\r\n                winnerIndices.push(randomWinner % raffle.totalTicketsSold);\r\n            } else if (i == 1) {\r\n                winnerIndices.push((randomWinner.add(randomWinner.div(2))) % raffle.totalTicketsSold);\r\n            } else {\r\n                winnerIndices.push((randomWinner.add(randomWinner.div(4))) % raffle.totalTicketsSold);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getWinners() public view returns (address[] memory) {\r\n        address[] memory winners = new address[](winnerIndices.length);\r\n        for (uint256 i = 0; i < winnerIndices.length; i++) {\r\n            winners[i] = participants[winnerIndices[i]];\r\n        }\r\n        return winners;\r\n    }\r\n\r\n    function random() private view returns (uint256) {\r\n        // return uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), block.timestamp, participants)));\r\n        return uint256(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, participants)));\r\n    }\r\n\r\n    function getParticipantsCount() public view returns (uint256) {\r\n        return raffle.totalTicketsSold;\r\n    }\r\n\r\n    function updateMaxTicketsPerParticipant(uint256 _maxTicketsPerParticipant) public onlyManager {\r\n        raffle.maxTicketsPerParticipant = _maxTicketsPerParticipant;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/watch raffle.sol/factory.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\n\r\ncontract RaffleFactory is Ownable {\r\n    IERC20 public usdtAddress;\r\n    address[] public deployedRaffles;\r\n    uint256 public affiliateCommissionDenominator = 100;\r\n\r\n    constructor(address _usdtAddress) {\r\n        usdtAddress = IERC20(_usdtAddress);\r\n    }\r\n\r\n    // struct Affiliate {\r\n    //     address affiliateAddress;\r\n    //     uint256 ticketsSold;\r\n    //     uint8 commissionRate; // Commission rate in percentage\r\n    // }\r\n\r\n    // mapping(address => Affiliate) public affiliates;\r\n\r\n    struct Winners {\r\n        address winner1;\r\n        address winner2;\r\n        address winner3;\r\n    }\r\n\r\n    // function setAffiliateCommissionRate(address affiliateAddress, uint8 commissionRate) external onlyOwner {\r\n    //     require(commissionRate <= 20, \"Commission rate cannot exceed 20%\");\r\n    //     affiliates[affiliateAddress] = Affiliate(\r\n    //         affiliateAddress,\r\n    //         0,\r\n    //         commissionRate\r\n    //     );\r\n    // }\r\n\r\n    event RaffleCreated(\r\n        address indexed raffleAddress,\r\n        string _watch,\r\n        string _image,\r\n        string _detailPageImage,\r\n        uint256 marketValue,\r\n        uint256 _endTimeHours,\r\n        uint256 ticketPrice,\r\n        uint256 maxTickets,\r\n        uint256 maxTicketsPerParticipant,\r\n        uint256 duration,\r\n        address creator\r\n    );\r\n\r\n    function createRaffle(\r\n        string memory _watch,\r\n        string memory _image,\r\n        string memory _detailPageImage,\r\n        uint256 _marketValue,\r\n        uint256 _endTimeHours,\r\n        uint256 _ticketPrice,\r\n        uint256 _maxTickets,\r\n        uint256 _maxTicketsPerParticipant,\r\n        uint256 _numberOfWinners\r\n    ) external onlyOwner {\r\n        address newRaffle = address(\r\n            new Raffle(\r\n                _watch,\r\n                _image,\r\n                _detailPageImage,\r\n                _marketValue,\r\n                _endTimeHours,\r\n                _ticketPrice,\r\n                _maxTickets,\r\n                _maxTicketsPerParticipant,\r\n                _numberOfWinners,\r\n                msg.sender,\r\n                usdtAddress\r\n            )\r\n        );\r\n        deployedRaffles.push(newRaffle);\r\n        emit RaffleCreated(\r\n            newRaffle,\r\n            _watch,\r\n            _image,\r\n            _detailPageImage,\r\n            _marketValue,\r\n            _endTimeHours,\r\n            _ticketPrice,\r\n            _maxTickets,\r\n            _maxTicketsPerParticipant,\r\n            _numberOfWinners,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function getDeployedRaffles() public view returns (address[] memory) {\r\n        return deployedRaffles;\r\n    }\r\n\r\n    function withdraw(address payable to, uint256 amount) public onlyOwner {\r\n        require(amount <= usdtAddress.balanceOf(address(this)), \"Insufficient balance\");\r\n        usdtAddress.transfer(to, amount);\r\n    }\r\n\r\n    function allWinners() external view returns (Winners[] memory) {\r\n        address[] memory raffles = deployedRaffles;\r\n        uint256 winnerzLength;\r\n        uint256 temp1;\r\n\r\n        for (uint256 i = 0; i < raffles.length; i++) {\r\n            bool raffleClosed = Raffle(raffles[i]).getRaffle().raffleClosed;\r\n            if (raffleClosed) {\r\n                address[] memory winnersAddr = Raffle(raffles[i]).getWinners();\r\n                if (winnersAddr.length > 0) {\r\n                    temp1++;\r\n                }\r\n            }\r\n        }\r\n        Winners[] memory winners = new Winners[](temp1);\r\n\r\n        for (uint256 i = 0; i < raffles.length; i++) {\r\n            bool raffleClosed = Raffle(raffles[i]).getRaffle().raffleClosed;\r\n            if (raffleClosed) {\r\n                address[] memory winnersAddr = Raffle(raffles[i]).getWinners();\r\n                if (winnersAddr.length > 0) {\r\n                    if (winnersAddr.length == 1) {\r\n                        winners[winnerzLength] = Winners(\r\n                            winnersAddr[0],\r\n                            address(0),\r\n                            address(0)\r\n                        );\r\n                        winnerzLength++;\r\n                    } else if (winnersAddr.length == 2) {\r\n                        winners[winnerzLength] = Winners(\r\n                            winnersAddr[0],\r\n                            winnersAddr[1],\r\n                            address(0)\r\n                        );\r\n                        winnerzLength++;\r\n                    } else {\r\n                        winners[winnerzLength] = Winners(\r\n                            winnersAddr[0],\r\n                            winnersAddr[1],\r\n                            winnersAddr[2]\r\n                        );\r\n                        winnerzLength++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return winners;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"raffleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_watch\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_detailPageImage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTimeHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTicketsPerParticipant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"RaffleCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"affiliateCommissionDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"winner1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner3\",\"type\":\"address\"}],\"internalType\":\"struct RaffleFactory.Winners[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_watch\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_detailPageImage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_marketValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimeHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTicketsPerParticipant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfWinners\",\"type\":\"uint256\"}],\"name\":\"createRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedRaffles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedRaffles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RaffleFactory", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://91903cbd42230f9889858a4ca8b21696ae78fc536e06506d528f63fcf396d5e3"}