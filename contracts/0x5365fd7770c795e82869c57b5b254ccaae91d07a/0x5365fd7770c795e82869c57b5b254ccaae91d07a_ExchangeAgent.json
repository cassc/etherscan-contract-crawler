{"SourceCode": "// File: interfaces/IExchangeAgent.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IExchangeAgent {\r\n    function getNeededTokenAmount(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _desiredAmount\r\n    ) external returns (uint256);\r\n\r\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\r\n\r\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\r\n\r\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\r\n\r\n    function swapTokenWithETH(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _desiredAmount\r\n    ) external;\r\n\r\n    function swapTokenWithToken(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _amount,\r\n        uint256 _desiredAmount\r\n    ) external;\r\n}\r\n\r\n// File: interfaces/ITwapOraclePriceFeed.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\ninterface ITwapOraclePriceFeed {\r\n    function update() external;\r\n\r\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\r\n}\r\n\r\n// File: interfaces/ITwapOraclePriceFeedFactory.sol\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\ninterface ITwapOraclePriceFeedFactory {\r\n    function twapOraclePriceFeedList(address _pair) external view returns (address);\r\n\r\n    function getTwapOraclePriceFeed(address _token0, address _token1) external view returns (address twapOraclePriceFeed);\r\n}\r\n\r\n// File: interfaces/IUniswapV2Factory.sol\r\n\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n// File: interfaces/IUniswapV2Pair.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\n// File: libs/TransferHelper.sol\r\n\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: ExchangeAgent.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This smart contract is for getting CVR_ETH, CVR_USDT price\r\n */\r\ncontract ExchangeAgent is Ownable, IExchangeAgent, ReentrancyGuard {\r\n    event AddGateway(address _sender, address _gateway);\r\n    event RemoveGateway(address _sender, address _gateway);\r\n    event AddAvailableCurrency(address _sender, address _currency);\r\n    event RemoveAvailableCurrency(address _sender, address _currency);\r\n    event UpdateSlippage(address _sender, uint256 _slippage);\r\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\r\n    event UpdateSlippageRate(address _user, uint256 _slippageRate);\r\n\r\n    mapping(address => bool) public whiteList; // white listed CoverCompared gateways\r\n\r\n    // available currencies in CoverCompared, token => bool\r\n    // for now we allow CVR\r\n    mapping(address => bool) public availableCurrencies;\r\n\r\n    address public immutable CVR_ADDRESS;\r\n    address public immutable USDC_ADDRESS;\r\n    /**\r\n     * We are using Uniswap V2 TWAP oracle - so it should be WETH addres in Uniswap V2\r\n     */\r\n    address public immutable WETH;\r\n    address public immutable UNISWAP_FACTORY;\r\n    address public immutable TWAP_ORACLE_PRICE_FEED_FACTORY;\r\n\r\n    uint256 public SLIPPPAGE_RAGE;\r\n    /**\r\n     * when users try to use CVR to buy products, we will discount some percentage(25% at first stage)\r\n     */\r\n    uint256 public discountPercentage = 75;\r\n\r\n    constructor(\r\n        address _CVR_ADDRESS,\r\n        address _USDC_ADDRESS,\r\n        address _WETH,\r\n        address _UNISWAP_FACTORY,\r\n        address _TWAP_ORACLE_PRICE_FEED_FACTORY\r\n    ) {\r\n        CVR_ADDRESS = _CVR_ADDRESS;\r\n        USDC_ADDRESS = _USDC_ADDRESS;\r\n        WETH = _WETH;\r\n        UNISWAP_FACTORY = _UNISWAP_FACTORY;\r\n        TWAP_ORACLE_PRICE_FEED_FACTORY = _TWAP_ORACLE_PRICE_FEED_FACTORY;\r\n        SLIPPPAGE_RAGE = 100;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    modifier onlyWhiteListed(address _gateway) {\r\n        require(whiteList[_gateway], \"Only white listed addresses are acceptable\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev If users use CVR, they will pay _discountPercentage % of cost.\r\n     */\r\n    function setDiscountPercentage(uint256 _discountPercentage) external onlyOwner {\r\n        require(_discountPercentage <= 100, \"Exceeded value\");\r\n        discountPercentage = _discountPercentage;\r\n    }\r\n\r\n    /**\r\n     * @dev Get needed _token0 amount for _desiredAmount of _token1\r\n     * _desiredAmount should consider decimals based on _token1\r\n     */\r\n    function _getNeededTokenAmount(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _desiredAmount\r\n    ) private view returns (uint256) {\r\n        address pair = IUniswapV2Factory(UNISWAP_FACTORY).getPair(_token0, _token1);\r\n        require(pair != address(0), \"There's no pair\");\r\n\r\n        address twapOraclePriceFeed = ITwapOraclePriceFeedFactory(TWAP_ORACLE_PRICE_FEED_FACTORY).getTwapOraclePriceFeed(\r\n            _token0,\r\n            _token1\r\n        );\r\n\r\n        require(twapOraclePriceFeed != address(0), \"There's no twap oracle for this pair\");\r\n\r\n        uint256 neededAmount = ITwapOraclePriceFeed(twapOraclePriceFeed).consult(_token1, _desiredAmount);\r\n        if (_token0 == CVR_ADDRESS) {\r\n            neededAmount = (neededAmount * discountPercentage) / 100;\r\n        }\r\n\r\n        return neededAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Get needed _token0 amount for _desiredAmount of _token1\r\n     */\r\n    function getNeededTokenAmount(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _desiredAmount\r\n    ) external view override returns (uint256) {\r\n        return _getNeededTokenAmount(_token0, _token1, _desiredAmount);\r\n    }\r\n\r\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view override returns (uint256) {\r\n        return _getNeededTokenAmount(WETH, USDC_ADDRESS, _desiredAmount);\r\n    }\r\n\r\n    /**\r\n     * get needed _token amount for _desiredAmount of USDC\r\n     */\r\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external view override returns (uint256) {\r\n        return _getNeededTokenAmount(_token, USDC_ADDRESS, _desiredAmount);\r\n    }\r\n\r\n    /**\r\n     * get needed _token amount for _desiredAmount of ETH\r\n     */\r\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external view override returns (uint256) {\r\n        return _getNeededTokenAmount(_token, WETH, _desiredAmount);\r\n    }\r\n\r\n    /**\r\n     * @param _amount: this one is the value with decimals\r\n     */\r\n    function swapTokenWithETH(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _desiredAmount\r\n    ) external override onlyWhiteListed(msg.sender) nonReentrant {\r\n        // store CVR in this exchagne contract\r\n        // send eth to buy gateway based on the uniswap price\r\n        require(availableCurrencies[_token], \"Token should be added in available list\");\r\n        _swapTokenWithToken(_token, WETH, _amount, _desiredAmount);\r\n    }\r\n\r\n    function swapTokenWithToken(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _amount,\r\n        uint256 _desiredAmount\r\n    ) external override onlyWhiteListed(msg.sender) nonReentrant {\r\n        require(availableCurrencies[_token0], \"Token should be added in available list\");\r\n        _swapTokenWithToken(_token0, _token1, _amount, _desiredAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev exchange _amount of _token0 with _token1 by twap oracle price\r\n     */\r\n    function _swapTokenWithToken(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _amount,\r\n        uint256 _desiredAmount\r\n    ) private {\r\n        address twapOraclePriceFeed = ITwapOraclePriceFeedFactory(TWAP_ORACLE_PRICE_FEED_FACTORY).getTwapOraclePriceFeed(\r\n            _token0,\r\n            _token1\r\n        );\r\n\r\n        uint256 swapAmount = ITwapOraclePriceFeed(twapOraclePriceFeed).consult(_token0, _amount);\r\n        uint256 availableMinAmount = (_desiredAmount * (10000 - SLIPPPAGE_RAGE)) / 10000;\r\n        if (_token0 == CVR_ADDRESS) {\r\n            availableMinAmount = (availableMinAmount * discountPercentage) / 100;\r\n        }\r\n        require(swapAmount > availableMinAmount, \"Overflow min amount\");\r\n\r\n        TransferHelper.safeTransferFrom(_token0, msg.sender, address(this), _amount);\r\n\r\n        if (_token1 == WETH) {\r\n            TransferHelper.safeTransferETH(msg.sender, _desiredAmount);\r\n        } else {\r\n            TransferHelper.safeTransfer(_token1, msg.sender, _desiredAmount);\r\n        }\r\n    }\r\n\r\n    function addWhiteList(address _gateway) external onlyOwner {\r\n        require(!whiteList[_gateway], \"Already white listed\");\r\n        whiteList[_gateway] = true;\r\n        emit AddGateway(msg.sender, _gateway);\r\n    }\r\n\r\n    function removeWhiteList(address _gateway) external onlyOwner {\r\n        require(whiteList[_gateway], \"Not white listed\");\r\n        whiteList[_gateway] = false;\r\n        emit RemoveGateway(msg.sender, _gateway);\r\n    }\r\n\r\n    function addCurrency(address _currency) external onlyOwner {\r\n        require(!availableCurrencies[_currency], \"Already available\");\r\n        availableCurrencies[_currency] = true;\r\n        emit AddAvailableCurrency(msg.sender, _currency);\r\n    }\r\n\r\n    function removeCurrency(address _currency) external onlyOwner {\r\n        require(availableCurrencies[_currency], \"Not available yet\");\r\n        availableCurrencies[_currency] = false;\r\n        emit RemoveAvailableCurrency(msg.sender, _currency);\r\n    }\r\n\r\n    function setSlippageRate(uint256 _slippageRate) external onlyOwner {\r\n        require(_slippageRate > 0 && _slippageRate < 100, \"Overflow range\");\r\n        SLIPPPAGE_RAGE = _slippageRate * 100;\r\n        emit UpdateSlippageRate(msg.sender, _slippageRate);\r\n    }\r\n\r\n    function withdrawAsset(\r\n        address _to,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        if (_token == address(0)) {\r\n            TransferHelper.safeTransferETH(_to, _amount);\r\n        } else {\r\n            TransferHelper.safeTransfer(_token, _to, _amount);\r\n        }\r\n        emit WithdrawAsset(owner(), _to, _token, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UNISWAP_FACTORY\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TWAP_ORACLE_PRICE_FEED_FACTORY\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"AddAvailableCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"AddGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"RemoveAvailableCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"RemoveGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"UpdateSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippageRate\",\"type\":\"uint256\"}],\"name\":\"UpdateSlippageRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CVR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPPAGE_RAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWAP_ORACLE_PRICE_FEED_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_desiredAmount\",\"type\":\"uint256\"}],\"name\":\"getETHAmountForUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmount\",\"type\":\"uint256\"}],\"name\":\"getNeededTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountForUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercentage\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageRate\",\"type\":\"uint256\"}],\"name\":\"setSlippageRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokenWithETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokenWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ExchangeAgent", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003c03b4ec9477809072ff9cc9292c9b25d4a8e6c6000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000d4354a2e9a5b29c0db8c22f500d8bbacaa257deb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18e7d105c94bc6c221d6e9b10b345a4c9585e62afb8ac1269b8df2b7047de27c"}