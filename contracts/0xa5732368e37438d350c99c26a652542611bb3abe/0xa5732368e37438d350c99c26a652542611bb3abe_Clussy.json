{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contract/CLUSSY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.23;\\r\\n\\r\\n/// @dev Core abstracts of Clussy.\\r\\nimport {ERC404} from \\\"./404/ERC404.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @dev Helper libraries to ensure seamless integration.\\r\\nimport {LibClussy} from \\\"./libs/Clussy.lib.sol\\\";\\r\\nimport {SafeTransferLib} from \\\"./solady/SafeTransferLib.sol\\\";\\r\\nimport {LibString} from \\\"./solady/LibString.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Clussy: \ud83e\udd21\ud83e\udd21\ud83e\udd21\ud83e\udd21\ud83e\udd21\ud83e\udd21\\r\\n * @notice An experimental ERC4\ud83e\udd214 token with clussy.\\r\\n * @author art dev: \ud83e\udd21\\r\\n * @author contract dev: \ud83e\udd21\\r\\n */\\r\\n\\r\\ncontract Clussy is ERC404, Ownable {\\r\\n    using LibString for uint256;\\r\\n\\r\\n    /// @dev The URL or IPFS Link to the metadata for the tokenURI.\\r\\n    string public baseTokenURI;\\r\\n\\r\\n    /// @dev State var to effectively revoke access to transfer control.\\r\\n    bool public trading;\\r\\n\\r\\n    /// @dev State var to effectively revoke access to transfer control.\\r\\n    bool public locked;\\r\\n\\r\\n    /// @dev Control over minting status.\\r\\n    bool private _mintSwitch;\\r\\n\\r\\n    /// @dev Lock bool to prevent the createAllTokens function from being called twice, even if the logic checks should prevent that.\\r\\n    bool private allTokensMinted;\\r\\n\\r\\n    /// @dev Variable to hold the total desired erc20 supply entered during contract creation.\\r\\n    uint256 private maxTotalSupply;\\r\\n\\r\\n    /// @dev Variable to hold the mint price set during contract creation.\\r\\n    uint256 private mintPrice;\\r\\n\\r\\n    /// @dev Variable to hold the mint price set during contract creation.\\r\\n    uint256 private walletLimit;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check if trading is ready.\\r\\n     * @param $from The address to transfer from.\\r\\n     */\\r\\n    modifier onlyTrading(address $from) {\\r\\n        /// @dev Exempt mints as well as transfers from the owner from\\r\\n        ///      the trading status check.\\r\\n        if (trading == false) {\\r\\n            if ($from != address(0) && $from != owner()) {\\r\\n                revert LibClussy.TokenLoading();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Initialize the contract.\\r\\n    constructor(address $owner, string memory $baseTokenURI, string memory $name, string memory $symbol, uint8 $decimals, uint256 $maxTotalSupplyERC721, uint256 $wholeTokensToOwner, uint256 $mintPriceinWEI, uint256 $mintWalletLimit) ERC404($name, $symbol, $decimals) Ownable($owner) {\\r\\n        /// @dev Set the base token URI.\\r\\n        baseTokenURI = $baseTokenURI;\\r\\n\\r\\n        /// @dev Make owner erc721 Transfer Exempt at contract creation.\\r\\n        _erc721TransferExempt[$owner] = true;\\r\\n\\r\\n        /// @dev Transfer desired portion of whole tokens to wallet owner.\\r\\n        balanceOf[$owner] = $wholeTokensToOwner * units;\\r\\n\\r\\n        /// @dev Modifies total erc20 Supply to reflect the amount of whole tokens transferred to the owner wallet. Set as zero if no tokens are to be transferred to the owner.\\r\\n        totalSupply = $wholeTokensToOwner * units;\\r\\n\\r\\n        /// @dev Assigns the MAX total erc20 supply with the constructor inputs, totalERC721 supply * decimal units desired for fractionalization.\\r\\n        maxTotalSupply = $maxTotalSupplyERC721 * units;\\r\\n    \\r\\n        /// @dev Sets mint price from amount provided in contract creation. Set as zero if not using mint function. \\r\\n        mintPrice = $mintPriceinWEI;\\r\\n\\r\\n        /// @dev Sets Wallet limit for mint. If no limit, set to same number as maxTotalSupplyERC721. Must be a minimum of one whole token, or no one can mint. \\r\\n        walletLimit = $mintWalletLimit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint function that allows a user to mint their individual tokens\\r\\n     * recipient - The address that the tokens are to be sent to.\\r\\n     * amount- The amount of erc721 tokens to send to that address\\r\\n     **/\\r\\n    function mint(uint256 amount) public payable {\\r\\n        /// @dev Checks user balance of this contracts ERC20 token\\r\\n        uint256 userBalance = this.erc20BalanceOf(msg.sender);\\r\\n\\r\\n        /// @dev Sets variable to represent erc721 amounts.\\r\\n        uint256 amountToken = amount * units;\\r\\n\\r\\n        /// @dev Checks if the transaction is being sent with enough eth to match the mint price.\\r\\n        if (msg.value < mintPrice * amount) revert LibClussy.PaymentInvalid();\\r\\n\\r\\n        /// @dev Prevents public minting if toggle is true.\\r\\n        if (_mintSwitch == false){\\r\\n            revert LibClussy.TokenLoading();\\r\\n        }\\r\\n\\r\\n        /// @dev Prevent the max supply from being exceeded.\\r\\n        if (maxTotalSupply < totalSupply + amountToken) {\\r\\n            revert LibClussy.SupplyInsufficient();\\r\\n        }\\r\\n\\r\\n        /// @dev Checks user balance with total amount to be added to be sure that the user does not exceed the mint wallet limit.\\r\\n        if (userBalance + amountToken > walletLimit * units) {\\r\\n           revert LibClussy.MintMaximum();\\r\\n        }\\r\\n\\r\\n        /// @dev Make sure that minting status has not been locked.\\r\\n        if(locked == true) revert LibClussy.TradingLocked();\\r\\n\\r\\n        /// @dev Mint the tokens to the recipient.\\r\\n        _mintERC20(msg.sender, amountToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Airdrop tokens to the users.\\r\\n     * @param $recipients Array of recipients to airdrop to.\\r\\n     * @param $amounts Array of amounts to airdrop to each recipient.\\r\\n     */\\r\\n    function ownerAirdrop(address[] calldata $recipients, uint256[] calldata $amounts) public onlyOwner {\\r\\n        /// @dev Prevent array issues.\\r\\n        if ($recipients.length != $amounts.length) {\\r\\n            revert LibClussy.MintInvalid();\\r\\n        }\\r\\n\\r\\n        /// @dev Send the tokens to the recipients from the owner's wallet.\\r\\n        for (uint256 i; i < $recipients.length; i++) {\\r\\n            transfer($recipients[i], $amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev set mint lock \\r\\n    function mintSwitch(bool value) public onlyOwner {\\r\\n        _mintSwitch = value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow the owner to set the ERC721 transfer exempt status.\\r\\n     * @dev This function is only available to the owner and enables the ability\\r\\n     *      to prevent NFT conversion for specific addresses.\\r\\n     * @dev This is used for the liquidity pool as well as a few other instances.\\r\\n     * @param $account The account to set the ERC721 transfer exempt status of.\\r\\n     * @param $value The value to set the ERC721 transfer exempt status to.\\r\\n     */\\r\\n    function setERC721TransferExempt(address $account, bool $value) public onlyOwner {\\r\\n        /// @dev Control the fractionalization allowances.\\r\\n        _erc721TransferExempt[$account] = $value;\\r\\n    }\\r\\n\\r\\n        /// @dev allows Owner to set whitelist value for multiple accounts in one call.\\r\\n    function setMultiERC721TransferExempt(address[] calldata $accounts, bool $value) public onlyOwner {\\r\\n        for (uint256 i; i < $accounts.length; i++) {\\r\\n            _erc721TransferExempt[$accounts[i]] = $value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow the owner to set the base token URI.\\r\\n     * @dev This function is only available to the owner and enables the ability\\r\\n     *      to set the base token URI for the tokenURI.\\r\\n     * @param $uri The URI to set as the base token URI.\\r\\n     */\\r\\n    function setBaseTokenURI(string memory $uri) public onlyOwner {\\r\\n        baseTokenURI = $uri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow the owner to set the trading status.\\r\\n     * @param $trading The status to set the trading status to.\\r\\n     */\\r\\n    function setTrading(bool $trading) public onlyOwner {\\r\\n        /// @dev Make sure that trading status has not been locked.\\r\\n        if(locked == true) revert LibClussy.TradingLocked();\\r\\n\\r\\n        /// @dev Update the state of trading for a specific user.\\r\\n        trading = $trading;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Revoke access to the transfer control.\\r\\n     * @param $locked The status to set the locked status to.\\r\\n     */\\r\\n    function setLocked(bool $locked) public onlyOwner {\\r\\n        /// @dev Make sure that trading status has not been locked.\\r\\n        if(locked == true) revert LibClussy.TradingLocked();\\r\\n\\r\\n        /// @dev Update the state of trading for all users.\\r\\n        locked = $locked;\\r\\n    }\\r\\n\\r\\n    /// @dev function to cheaply produce the rest of the tokens in the case that all the tokens available for mint are not minted. Makes it easy to throw them in a LP after.\\r\\n    function createAllTokens() public onlyOwner {\\r\\n        if(allTokensMinted == true) revert LibClussy.MintMaximum();\\r\\n        balanceOf[owner()] = maxTotalSupply - totalSupply + balanceOf[owner()];\\r\\n        totalSupply = maxTotalSupply;\\r\\n        allTokensMinted = true;\\r\\n    }\\r\\n\\r\\n    /// @dev emits on-chain event that prompts opensea to update metadata for all tokens.\\r\\n    function updateMetadata() public onlyOwner {\\r\\n        emit LibClussy.BatchMetadataUpdate(0, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow the owner to withdraw the contract balance.\\r\\n     */\\r\\n    function withdraw() public onlyOwner {\\r\\n        SafeTransferLib.safeTransferETH(owner(), address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ERC721 metadata for tokenURI to return image.\\r\\n     * @param $id The id of the token to return the image for.\\r\\n     * @return $uri The URI of the token to return the image for.\\r\\n     */\\r\\n    function tokenURI(uint256 $id) public view override returns (string memory) {\\r\\n        /// @dev Make sure the token has an owner (ie: it exists).\\r\\n        if (_getOwnerOf($id) == address(0)) revert LibClussy.TokenInvalid();\\r\\n\\r\\n        /// @dev The token ID without the encoding shift.\\r\\n        uint256 tokenId = $id - (1 << 255);\\r\\n        \\r\\n        /// @dev Concat the URI string with the tokenId and add .json at the end\\r\\n        return string.concat(baseTokenURI, tokenId.toString(), \\\".json\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ERC20 trading prevention until the time is ready.\\r\\n     * @param $from The address to transfer from.\\r\\n     * @param $to The address to transfer to.\\r\\n     * @param $value The amount to transfer.\\r\\n     */\\r\\n    function _transferERC20(address $from, address $to, uint256 $value) internal override onlyTrading($from) {\\r\\n        super._transferERC20($from, $to, $value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ERC721 trading prevention until the time is ready.\\r\\n     * @dev Realistically this should never be hit, but it is here just\\r\\n     *      to handle edge-cases where the ERC721 is being transferred\\r\\n     *      before the ERC20 is ready to be traded.\\r\\n     * @param $from The address to transfer from.\\r\\n     * @param $to The address to transfer to.\\r\\n     * @param $id The id to transfer.\\r\\n     */\\r\\n    function _transferERC721(address $from, address $to, uint256 $id) internal override onlyTrading($from) {\\r\\n        super._transferERC721($from, $to, $id);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contract/solady/LibString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Library for converting numbers into strings and other string operations.\\r\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\r\\n///\\r\\n/// @dev Note:\\r\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\r\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\r\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\r\\n/// can lead to undefined behavior.\\r\\nlibrary LibString {\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                        CUSTOM ERRORS                       */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev The length of the output is too small to contain all the hex digits.\\r\\n    error HexLengthInsufficient();\\r\\n\\r\\n    /// @dev The length of the string is more than 32 bytes.\\r\\n    error TooBigForSmallString();\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                         CONSTANTS                          */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev The constant returned when the `search` is not found in the string.\\r\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                     DECIMAL OPERATIONS                     */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the base 10 decimal representation of `value`.\\r\\n    function toString(uint256 value) internal pure returns (string memory str) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\r\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\r\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\r\\n            // and 3 words for a maximum of 78 digits.\\r\\n            str := add(mload(0x40), 0x80)\\r\\n            // Update the free memory pointer to allocate.\\r\\n            mstore(0x40, add(str, 0x20))\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end of the memory to calculate the length later.\\r\\n            let end := str\\r\\n\\r\\n            let w := not(0) // Tsk.\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            for { let temp := value } 1 {} {\\r\\n                str := add(str, w) // `sub(str, 1)`.\\r\\n                // Write the character to the pointer.\\r\\n                // The ASCII index of the '0' character is 48.\\r\\n                mstore8(str, add(48, mod(temp, 10)))\\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n                if iszero(temp) { break }\\r\\n            }\\r\\n\\r\\n            let length := sub(end, str)\\r\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n            str := sub(str, 0x20)\\r\\n            // Store the length.\\r\\n            mstore(str, length)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the base 10 decimal representation of `value`.\\r\\n    function toString(int256 value) internal pure returns (string memory str) {\\r\\n        if (value >= 0) {\\r\\n            return toString(uint256(value));\\r\\n        }\\r\\n        unchecked {\\r\\n            str = toString(~uint256(value) + 1);\\r\\n        }\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // We still have some spare memory space on the left,\\r\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\r\\n            let length := mload(str) // Load the string length.\\r\\n            mstore(str, 0x2d) // Store the '-' character.\\r\\n            str := sub(str, 1) // Move back the string pointer by a byte.\\r\\n            mstore(str, add(length, 1)) // Update the string length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                   HEXADECIMAL OPERATIONS                   */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`,\\r\\n    /// left-padded to an input length of `length` bytes.\\r\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\r\\n    /// giving a total length of `length * 2 + 2` bytes.\\r\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value, length);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\r\\n            str := sub(str, 2) // Move the pointer.\\r\\n            mstore(str, strLength) // Write the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`,\\r\\n    /// left-padded to an input length of `length` bytes.\\r\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\r\\n    /// giving a total length of `length * 2` bytes.\\r\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\r\\n    function toHexStringNoPrefix(uint256 value, uint256 length)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory str)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\\r\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\r\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\r\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\r\\n            str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\\r\\n            // Allocate the memory.\\r\\n            mstore(0x40, add(str, 0x20))\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end to calculate the length later.\\r\\n            let end := str\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\r\\n\\r\\n            let start := sub(str, add(length, length))\\r\\n            let w := not(1) // Tsk.\\r\\n            let temp := value\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            for {} 1 {} {\\r\\n                str := add(str, w) // `sub(str, 2)`.\\r\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\r\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\r\\n                temp := shr(8, temp)\\r\\n                if iszero(xor(str, start)) { break }\\r\\n            }\\r\\n\\r\\n            if temp {\\r\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n\\r\\n            // Compute the string's length.\\r\\n            let strLength := sub(end, str)\\r\\n            // Move the pointer and write the length.\\r\\n            str := sub(str, 0x20)\\r\\n            mstore(str, strLength)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\r\\n    /// As address are 20 bytes long, the output will left-padded to have\\r\\n    /// a length of `20 * 2 + 2` bytes.\\r\\n    function toHexString(uint256 value) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\r\\n            str := sub(str, 2) // Move the pointer.\\r\\n            mstore(str, strLength) // Write the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is prefixed with \\\"0x\\\".\\r\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\r\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\r\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(add(str, o), 0x3078) // Write the \\\"0x\\\" prefix, accounting for leading zero.\\r\\n            str := sub(add(str, o), 2) // Move the pointer, accounting for leading zero.\\r\\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\r\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\r\\n    function toMinimalHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\\r\\n            let strLength := mload(str) // Get the length.\\r\\n            str := add(str, o) // Move the pointer, accounting for leading zero.\\r\\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\r\\n    /// As address are 20 bytes long, the output will left-padded to have\\r\\n    /// a length of `20 * 2` bytes.\\r\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\r\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\r\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\r\\n            str := add(mload(0x40), 0x80)\\r\\n            // Allocate the memory.\\r\\n            mstore(0x40, add(str, 0x20))\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end to calculate the length later.\\r\\n            let end := str\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\r\\n\\r\\n            let w := not(1) // Tsk.\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            for { let temp := value } 1 {} {\\r\\n                str := add(str, w) // `sub(str, 2)`.\\r\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\r\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\r\\n                temp := shr(8, temp)\\r\\n                if iszero(temp) { break }\\r\\n            }\\r\\n\\r\\n            // Compute the string's length.\\r\\n            let strLength := sub(end, str)\\r\\n            // Move the pointer and write the length.\\r\\n            str := sub(str, 0x20)\\r\\n            mstore(str, strLength)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\r\\n    /// and the alphabets are capitalized conditionally according to\\r\\n    /// https://eips.ethereum.org/EIPS/eip-55\\r\\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\\r\\n        str = toHexString(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\r\\n            let o := add(str, 0x22)\\r\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\r\\n            let t := shl(240, 136) // `0b10001000 << 240`\\r\\n            for { let i := 0 } 1 {} {\\r\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\r\\n                i := add(i, 1)\\r\\n                if eq(i, 20) { break }\\r\\n            }\\r\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\r\\n            o := add(o, 0x20)\\r\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\r\\n    function toHexString(address value) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(value);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\r\\n            str := sub(str, 2) // Move the pointer.\\r\\n            mstore(str, strLength) // Write the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hexadecimal representation of `value`.\\r\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\r\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            str := mload(0x40)\\r\\n\\r\\n            // Allocate the memory.\\r\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\r\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\r\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\r\\n            mstore(0x40, add(str, 0x80))\\r\\n\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\r\\n\\r\\n            str := add(str, 2)\\r\\n            mstore(str, 40)\\r\\n\\r\\n            let o := add(str, 0x20)\\r\\n            mstore(add(o, 40), 0)\\r\\n\\r\\n            value := shl(96, value)\\r\\n\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            for { let i := 0 } 1 {} {\\r\\n                let p := add(o, add(i, i))\\r\\n                let temp := byte(i, value)\\r\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\r\\n                mstore8(p, mload(shr(4, temp)))\\r\\n                i := add(i, 1)\\r\\n                if eq(i, 20) { break }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hex encoded string from the raw bytes.\\r\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\r\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\r\\n        str = toHexStringNoPrefix(raw);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let strLength := add(mload(str), 2) // Compute the length.\\r\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\r\\n            str := sub(str, 2) // Move the pointer.\\r\\n            mstore(str, strLength) // Write the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the hex encoded string from the raw bytes.\\r\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\r\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let length := mload(raw)\\r\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\r\\n            mstore(str, add(length, length)) // Store the length of the output.\\r\\n\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\r\\n\\r\\n            let o := add(str, 0x20)\\r\\n            let end := add(raw, length)\\r\\n\\r\\n            for {} iszero(eq(raw, end)) {} {\\r\\n                raw := add(raw, 1)\\r\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\r\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\r\\n                o := add(o, 2)\\r\\n            }\\r\\n            mstore(o, 0) // Zeroize the slot after the string.\\r\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                   RUNE STRING OPERATIONS                   */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the number of UTF characters in the string.\\r\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            if mload(s) {\\r\\n                mstore(0x00, div(not(0), 255))\\r\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\r\\n                let o := add(s, 0x20)\\r\\n                let end := add(o, mload(s))\\r\\n                for { result := 1 } 1 { result := add(result, 1) } {\\r\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\r\\n                    if iszero(lt(o, end)) { break }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\r\\n    /// (i.e. all characters codes are in [0..127])\\r\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let mask := shl(7, div(not(0), 255))\\r\\n            result := 1\\r\\n            let n := mload(s)\\r\\n            if n {\\r\\n                let o := add(s, 0x20)\\r\\n                let end := add(o, n)\\r\\n                let last := mload(end)\\r\\n                mstore(end, 0)\\r\\n                for {} 1 {} {\\r\\n                    if and(mask, mload(o)) {\\r\\n                        result := 0\\r\\n                        break\\r\\n                    }\\r\\n                    o := add(o, 0x20)\\r\\n                    if iszero(lt(o, end)) { break }\\r\\n                }\\r\\n                mstore(end, last)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                   BYTE STRING OPERATIONS                   */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    // For performance and bytecode compactness, byte string operations are restricted\\r\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\r\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\r\\n    // can lead to undefined behavior.\\r\\n\\r\\n    /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\\r\\n    function replace(string memory subject, string memory search, string memory replacement)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let subjectLength := mload(subject)\\r\\n            let searchLength := mload(search)\\r\\n            let replacementLength := mload(replacement)\\r\\n\\r\\n            subject := add(subject, 0x20)\\r\\n            search := add(search, 0x20)\\r\\n            replacement := add(replacement, 0x20)\\r\\n            result := add(mload(0x40), 0x20)\\r\\n\\r\\n            let subjectEnd := add(subject, subjectLength)\\r\\n            if iszero(gt(searchLength, subjectLength)) {\\r\\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\\r\\n                let h := 0\\r\\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\\r\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\r\\n                let s := mload(search)\\r\\n                for {} 1 {} {\\r\\n                    let t := mload(subject)\\r\\n                    // Whether the first `searchLength % 32` bytes of\\r\\n                    // `subject` and `search` matches.\\r\\n                    if iszero(shr(m, xor(t, s))) {\\r\\n                        if h {\\r\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\r\\n                                mstore(result, t)\\r\\n                                result := add(result, 1)\\r\\n                                subject := add(subject, 1)\\r\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                                continue\\r\\n                            }\\r\\n                        }\\r\\n                        // Copy the `replacement` one word at a time.\\r\\n                        for { let o := 0 } 1 {} {\\r\\n                            mstore(add(result, o), mload(add(replacement, o)))\\r\\n                            o := add(o, 0x20)\\r\\n                            if iszero(lt(o, replacementLength)) { break }\\r\\n                        }\\r\\n                        result := add(result, replacementLength)\\r\\n                        subject := add(subject, searchLength)\\r\\n                        if searchLength {\\r\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                            continue\\r\\n                        }\\r\\n                    }\\r\\n                    mstore(result, t)\\r\\n                    result := add(result, 1)\\r\\n                    subject := add(subject, 1)\\r\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            let resultRemainder := result\\r\\n            result := add(mload(0x40), 0x20)\\r\\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\\r\\n            // Copy the rest of the string one word at a time.\\r\\n            for {} lt(subject, subjectEnd) {} {\\r\\n                mstore(resultRemainder, mload(subject))\\r\\n                resultRemainder := add(resultRemainder, 0x20)\\r\\n                subject := add(subject, 0x20)\\r\\n            }\\r\\n            result := sub(result, 0x20)\\r\\n            let last := add(add(result, 0x20), k) // Zeroize the slot after the string.\\r\\n            mstore(last, 0)\\r\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\r\\n            mstore(result, k) // Store the length.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\r\\n    /// searching from left to right, starting from `from`.\\r\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\r\\n    function indexOf(string memory subject, string memory search, uint256 from)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            for { let subjectLength := mload(subject) } 1 {} {\\r\\n                if iszero(mload(search)) {\\r\\n                    if iszero(gt(from, subjectLength)) {\\r\\n                        result := from\\r\\n                        break\\r\\n                    }\\r\\n                    result := subjectLength\\r\\n                    break\\r\\n                }\\r\\n                let searchLength := mload(search)\\r\\n                let subjectStart := add(subject, 0x20)\\r\\n\\r\\n                result := not(0) // Initialize to `NOT_FOUND`.\\r\\n\\r\\n                subject := add(subjectStart, from)\\r\\n                let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\\r\\n\\r\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\r\\n                let s := mload(add(search, 0x20))\\r\\n\\r\\n                if iszero(and(lt(subject, end), lt(from, subjectLength))) { break }\\r\\n\\r\\n                if iszero(lt(searchLength, 0x20)) {\\r\\n                    for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\r\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\r\\n                            if eq(keccak256(subject, searchLength), h) {\\r\\n                                result := sub(subject, subjectStart)\\r\\n                                break\\r\\n                            }\\r\\n                        }\\r\\n                        subject := add(subject, 1)\\r\\n                        if iszero(lt(subject, end)) { break }\\r\\n                    }\\r\\n                    break\\r\\n                }\\r\\n                for {} 1 {} {\\r\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\r\\n                        result := sub(subject, subjectStart)\\r\\n                        break\\r\\n                    }\\r\\n                    subject := add(subject, 1)\\r\\n                    if iszero(lt(subject, end)) { break }\\r\\n                }\\r\\n                break\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\r\\n    /// searching from left to right.\\r\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\r\\n    function indexOf(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        result = indexOf(subject, search, 0);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\r\\n    /// searching from right to left, starting from `from`.\\r\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\r\\n    function lastIndexOf(string memory subject, string memory search, uint256 from)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            for {} 1 {} {\\r\\n                result := not(0) // Initialize to `NOT_FOUND`.\\r\\n                let searchLength := mload(search)\\r\\n                if gt(searchLength, mload(subject)) { break }\\r\\n                let w := result\\r\\n\\r\\n                let fromMax := sub(mload(subject), searchLength)\\r\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\r\\n\\r\\n                let end := add(add(subject, 0x20), w)\\r\\n                subject := add(add(subject, 0x20), from)\\r\\n                if iszero(gt(subject, end)) { break }\\r\\n                // As this function is not too often used,\\r\\n                // we shall simply use keccak256 for smaller bytecode size.\\r\\n                for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\r\\n                    if eq(keccak256(subject, searchLength), h) {\\r\\n                        result := sub(subject, add(end, 1))\\r\\n                        break\\r\\n                    }\\r\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\r\\n                    if iszero(gt(subject, end)) { break }\\r\\n                }\\r\\n                break\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\r\\n    /// searching from right to left.\\r\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\r\\n    function lastIndexOf(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        result = lastIndexOf(subject, search, uint256(int256(-1)));\\r\\n    }\\r\\n\\r\\n    /// @dev Returns true if `search` is found in `subject`, false otherwise.\\r\\n    function contains(string memory subject, string memory search) internal pure returns (bool) {\\r\\n        return indexOf(subject, search) != NOT_FOUND;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns whether `subject` starts with `search`.\\r\\n    function startsWith(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let searchLength := mload(search)\\r\\n            // Just using keccak256 directly is actually cheaper.\\r\\n            // forgefmt: disable-next-item\\r\\n            result := and(\\r\\n                iszero(gt(searchLength, mload(subject))),\\r\\n                eq(\\r\\n                    keccak256(add(subject, 0x20), searchLength),\\r\\n                    keccak256(add(search, 0x20), searchLength)\\r\\n                )\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns whether `subject` ends with `search`.\\r\\n    function endsWith(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let searchLength := mload(search)\\r\\n            let subjectLength := mload(subject)\\r\\n            // Whether `search` is not longer than `subject`.\\r\\n            let withinRange := iszero(gt(searchLength, subjectLength))\\r\\n            // Just using keccak256 directly is actually cheaper.\\r\\n            // forgefmt: disable-next-item\\r\\n            result := and(\\r\\n                withinRange,\\r\\n                eq(\\r\\n                    keccak256(\\r\\n                        // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\\r\\n                        add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\\r\\n                        searchLength\\r\\n                    ),\\r\\n                    keccak256(add(search, 0x20), searchLength)\\r\\n                )\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns `subject` repeated `times`.\\r\\n    function repeat(string memory subject, uint256 times)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let subjectLength := mload(subject)\\r\\n            if iszero(or(iszero(times), iszero(subjectLength))) {\\r\\n                subject := add(subject, 0x20)\\r\\n                result := mload(0x40)\\r\\n                let output := add(result, 0x20)\\r\\n                for {} 1 {} {\\r\\n                    // Copy the `subject` one word at a time.\\r\\n                    for { let o := 0 } 1 {} {\\r\\n                        mstore(add(output, o), mload(add(subject, o)))\\r\\n                        o := add(o, 0x20)\\r\\n                        if iszero(lt(o, subjectLength)) { break }\\r\\n                    }\\r\\n                    output := add(output, subjectLength)\\r\\n                    times := sub(times, 1)\\r\\n                    if iszero(times) { break }\\r\\n                }\\r\\n                mstore(output, 0) // Zeroize the slot after the string.\\r\\n                let resultLength := sub(output, add(result, 0x20))\\r\\n                mstore(result, resultLength) // Store the length.\\r\\n                // Allocate the memory.\\r\\n                mstore(0x40, add(result, add(resultLength, 0x20)))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\r\\n    /// `start` and `end` are byte offsets.\\r\\n    function slice(string memory subject, uint256 start, uint256 end)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let subjectLength := mload(subject)\\r\\n            if iszero(gt(subjectLength, end)) { end := subjectLength }\\r\\n            if iszero(gt(subjectLength, start)) { start := subjectLength }\\r\\n            if lt(start, end) {\\r\\n                result := mload(0x40)\\r\\n                let resultLength := sub(end, start)\\r\\n                mstore(result, resultLength)\\r\\n                subject := add(subject, start)\\r\\n                let w := not(0x1f)\\r\\n                // Copy the `subject` one word at a time, backwards.\\r\\n                for { let o := and(add(resultLength, 0x1f), w) } 1 {} {\\r\\n                    mstore(add(result, o), mload(add(subject, o)))\\r\\n                    o := add(o, w) // `sub(o, 0x20)`.\\r\\n                    if iszero(o) { break }\\r\\n                }\\r\\n                // Zeroize the slot after the string.\\r\\n                mstore(add(add(result, 0x20), resultLength), 0)\\r\\n                // Allocate memory for the length and the bytes,\\r\\n                // rounded up to a multiple of 32.\\r\\n                mstore(0x40, add(result, and(add(resultLength, 0x3f), w)))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\r\\n    /// `start` is a byte offset.\\r\\n    function slice(string memory subject, uint256 start)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        result = slice(subject, start, uint256(int256(-1)));\\r\\n    }\\r\\n\\r\\n    /// @dev Returns all the indices of `search` in `subject`.\\r\\n    /// The indices are byte offsets.\\r\\n    function indicesOf(string memory subject, string memory search)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256[] memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let subjectLength := mload(subject)\\r\\n            let searchLength := mload(search)\\r\\n\\r\\n            if iszero(gt(searchLength, subjectLength)) {\\r\\n                subject := add(subject, 0x20)\\r\\n                search := add(search, 0x20)\\r\\n                result := add(mload(0x40), 0x20)\\r\\n\\r\\n                let subjectStart := subject\\r\\n                let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\\r\\n                let h := 0\\r\\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\\r\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\r\\n                let s := mload(search)\\r\\n                for {} 1 {} {\\r\\n                    let t := mload(subject)\\r\\n                    // Whether the first `searchLength % 32` bytes of\\r\\n                    // `subject` and `search` matches.\\r\\n                    if iszero(shr(m, xor(t, s))) {\\r\\n                        if h {\\r\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\r\\n                                subject := add(subject, 1)\\r\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                                continue\\r\\n                            }\\r\\n                        }\\r\\n                        // Append to `result`.\\r\\n                        mstore(result, sub(subject, subjectStart))\\r\\n                        result := add(result, 0x20)\\r\\n                        // Advance `subject` by `searchLength`.\\r\\n                        subject := add(subject, searchLength)\\r\\n                        if searchLength {\\r\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                            continue\\r\\n                        }\\r\\n                    }\\r\\n                    subject := add(subject, 1)\\r\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\r\\n                }\\r\\n                let resultEnd := result\\r\\n                // Assign `result` to the free memory pointer.\\r\\n                result := mload(0x40)\\r\\n                // Store the length of `result`.\\r\\n                mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\\r\\n                // Allocate memory for result.\\r\\n                // We allocate one more word, so this array can be recycled for {split}.\\r\\n                mstore(0x40, add(resultEnd, 0x20))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\\r\\n    function split(string memory subject, string memory delimiter)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string[] memory result)\\r\\n    {\\r\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let w := not(0x1f)\\r\\n            let indexPtr := add(indices, 0x20)\\r\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\r\\n            mstore(add(indicesEnd, w), mload(subject))\\r\\n            mstore(indices, add(mload(indices), 1))\\r\\n            let prevIndex := 0\\r\\n            for {} 1 {} {\\r\\n                let index := mload(indexPtr)\\r\\n                mstore(indexPtr, 0x60)\\r\\n                if iszero(eq(index, prevIndex)) {\\r\\n                    let element := mload(0x40)\\r\\n                    let elementLength := sub(index, prevIndex)\\r\\n                    mstore(element, elementLength)\\r\\n                    // Copy the `subject` one word at a time, backwards.\\r\\n                    for { let o := and(add(elementLength, 0x1f), w) } 1 {} {\\r\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\r\\n                        o := add(o, w) // `sub(o, 0x20)`.\\r\\n                        if iszero(o) { break }\\r\\n                    }\\r\\n                    // Zeroize the slot after the string.\\r\\n                    mstore(add(add(element, 0x20), elementLength), 0)\\r\\n                    // Allocate memory for the length and the bytes,\\r\\n                    // rounded up to a multiple of 32.\\r\\n                    mstore(0x40, add(element, and(add(elementLength, 0x3f), w)))\\r\\n                    // Store the `element` into the array.\\r\\n                    mstore(indexPtr, element)\\r\\n                }\\r\\n                prevIndex := add(index, mload(delimiter))\\r\\n                indexPtr := add(indexPtr, 0x20)\\r\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\r\\n            }\\r\\n            result := indices\\r\\n            if iszero(mload(delimiter)) {\\r\\n                result := add(indices, 0x20)\\r\\n                mstore(result, sub(mload(indices), 2))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a concatenated string of `a` and `b`.\\r\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\r\\n    function concat(string memory a, string memory b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let w := not(0x1f)\\r\\n            result := mload(0x40)\\r\\n            let aLength := mload(a)\\r\\n            // Copy `a` one word at a time, backwards.\\r\\n            for { let o := and(add(aLength, 0x20), w) } 1 {} {\\r\\n                mstore(add(result, o), mload(add(a, o)))\\r\\n                o := add(o, w) // `sub(o, 0x20)`.\\r\\n                if iszero(o) { break }\\r\\n            }\\r\\n            let bLength := mload(b)\\r\\n            let output := add(result, aLength)\\r\\n            // Copy `b` one word at a time, backwards.\\r\\n            for { let o := and(add(bLength, 0x20), w) } 1 {} {\\r\\n                mstore(add(output, o), mload(add(b, o)))\\r\\n                o := add(o, w) // `sub(o, 0x20)`.\\r\\n                if iszero(o) { break }\\r\\n            }\\r\\n            let totalLength := add(aLength, bLength)\\r\\n            let last := add(add(result, 0x20), totalLength)\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(last, 0)\\r\\n            // Stores the length.\\r\\n            mstore(result, totalLength)\\r\\n            // Allocate memory for the length and the bytes,\\r\\n            // rounded up to a multiple of 32.\\r\\n            mstore(0x40, and(add(last, 0x1f), w))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\r\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\r\\n    function toCase(string memory subject, bool toUpper)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let length := mload(subject)\\r\\n            if length {\\r\\n                result := add(mload(0x40), 0x20)\\r\\n                subject := add(subject, 1)\\r\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\r\\n                let w := not(0)\\r\\n                for { let o := length } 1 {} {\\r\\n                    o := add(o, w)\\r\\n                    let b := and(0xff, mload(add(subject, o)))\\r\\n                    mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\\r\\n                    if iszero(o) { break }\\r\\n                }\\r\\n                result := mload(0x40)\\r\\n                mstore(result, length) // Store the length.\\r\\n                let last := add(add(result, 0x20), length)\\r\\n                mstore(last, 0) // Zeroize the slot after the string.\\r\\n                mstore(0x40, add(last, 0x20)) // Allocate the memory.\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a string from a small bytes32 string.\\r\\n    /// `s` must be null-terminated, or behavior will be undefined.\\r\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := mload(0x40)\\r\\n            let n := 0\\r\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\r\\n            mstore(result, n)\\r\\n            let o := add(result, 0x20)\\r\\n            mstore(o, s)\\r\\n            mstore(add(o, n), 0)\\r\\n            mstore(0x40, add(result, 0x40))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\r\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\r\\n            mstore(0x00, s)\\r\\n            mstore(result, 0x00)\\r\\n            result := mload(0x00)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the string as a normalized null-terminated small string.\\r\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := mload(s)\\r\\n            if iszero(lt(result, 33)) {\\r\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns a lowercased copy of the string.\\r\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\r\\n    function lower(string memory subject) internal pure returns (string memory result) {\\r\\n        result = toCase(subject, false);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns an UPPERCASED copy of the string.\\r\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\r\\n    function upper(string memory subject) internal pure returns (string memory result) {\\r\\n        result = toCase(subject, true);\\r\\n    }\\r\\n\\r\\n    /// @dev Escapes the string to be used within HTML tags.\\r\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let end := add(s, mload(s))\\r\\n            result := add(mload(0x40), 0x20)\\r\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\r\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\r\\n            mstore(0x1f, 0x900094)\\r\\n            mstore(0x08, 0xc0000000a6ab)\\r\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\r\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\r\\n            for {} iszero(eq(s, end)) {} {\\r\\n                s := add(s, 1)\\r\\n                let c := and(mload(s), 0xff)\\r\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\r\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\r\\n                    mstore8(result, c)\\r\\n                    result := add(result, 1)\\r\\n                    continue\\r\\n                }\\r\\n                let t := shr(248, mload(c))\\r\\n                mstore(result, mload(and(t, 0x1f)))\\r\\n                result := add(result, shr(5, t))\\r\\n            }\\r\\n            let last := result\\r\\n            mstore(last, 0) // Zeroize the slot after the string.\\r\\n            result := mload(0x40)\\r\\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\\r\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\r\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\r\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory result)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let end := add(s, mload(s))\\r\\n            result := add(mload(0x40), 0x20)\\r\\n            if addDoubleQuotes {\\r\\n                mstore8(result, 34)\\r\\n                result := add(1, result)\\r\\n            }\\r\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\r\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\r\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\r\\n            // into the scratch space.\\r\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\r\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\r\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\r\\n            for {} iszero(eq(s, end)) {} {\\r\\n                s := add(s, 1)\\r\\n                let c := and(mload(s), 0xff)\\r\\n                if iszero(lt(c, 0x20)) {\\r\\n                    if iszero(and(shl(c, 1), e)) {\\r\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\r\\n                        mstore8(result, c)\\r\\n                        result := add(result, 1)\\r\\n                        continue\\r\\n                    }\\r\\n                    mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\r\\n                    mstore8(add(result, 1), c)\\r\\n                    result := add(result, 2)\\r\\n                    continue\\r\\n                }\\r\\n                if iszero(and(shl(c, 1), 0x3700)) {\\r\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\r\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\r\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\r\\n                    mstore(result, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\r\\n                    result := add(result, 6)\\r\\n                    continue\\r\\n                }\\r\\n                mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\r\\n                mstore8(add(result, 1), mload(add(c, 8)))\\r\\n                result := add(result, 2)\\r\\n            }\\r\\n            if addDoubleQuotes {\\r\\n                mstore8(result, 34)\\r\\n                result := add(1, result)\\r\\n            }\\r\\n            let last := result\\r\\n            mstore(last, 0) // Zeroize the slot after the string.\\r\\n            result := mload(0x40)\\r\\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\\r\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\r\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\r\\n        result = escapeJSON(s, false);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns whether `a` equals `b`.\\r\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\r\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // These should be evaluated on compile time, as far as possible.\\r\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\r\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\r\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\r\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\r\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\r\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\r\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\r\\n            // forgefmt: disable-next-item\\r\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\r\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Packs a single string with its length into a single word.\\r\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\r\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // We don't need to zero right pad the string,\\r\\n            // since this is our own custom non-standard packing scheme.\\r\\n            result :=\\r\\n                mul(\\r\\n                    // Load the length and the bytes.\\r\\n                    mload(add(a, 0x1f)),\\r\\n                    // `length != 0 && length < 32`. Abuses underflow.\\r\\n                    // Assumes that the length is valid and within the block gas limit.\\r\\n                    lt(sub(mload(a), 1), 0x1f)\\r\\n                )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Unpacks a string packed using {packOne}.\\r\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\r\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\r\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Grab the free memory pointer.\\r\\n            result := mload(0x40)\\r\\n            // Allocate 2 words (1 for the length, 1 for the bytes).\\r\\n            mstore(0x40, add(result, 0x40))\\r\\n            // Zeroize the length slot.\\r\\n            mstore(result, 0)\\r\\n            // Store the length and bytes.\\r\\n            mstore(add(result, 0x1f), packed)\\r\\n            // Right pad with zeroes.\\r\\n            mstore(add(add(result, 0x20), mload(result)), 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Packs two strings with their lengths into a single word.\\r\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\r\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let aLength := mload(a)\\r\\n            // We don't need to zero right pad the strings,\\r\\n            // since this is our own custom non-standard packing scheme.\\r\\n            result :=\\r\\n                mul(\\r\\n                    // Load the length and the bytes of `a` and `b`.\\r\\n                    or(\\r\\n                        shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))),\\r\\n                        mload(sub(add(b, 0x1e), aLength))\\r\\n                    ),\\r\\n                    // `totalLength != 0 && totalLength < 31`. Abuses underflow.\\r\\n                    // Assumes that the lengths are valid and within the block gas limit.\\r\\n                    lt(sub(add(aLength, mload(b)), 1), 0x1e)\\r\\n                )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Unpacks strings packed using {packTwo}.\\r\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\r\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\r\\n    function unpackTwo(bytes32 packed)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory resultA, string memory resultB)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Grab the free memory pointer.\\r\\n            resultA := mload(0x40)\\r\\n            resultB := add(resultA, 0x40)\\r\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\r\\n            mstore(0x40, add(resultB, 0x40))\\r\\n            // Zeroize the length slots.\\r\\n            mstore(resultA, 0)\\r\\n            mstore(resultB, 0)\\r\\n            // Store the lengths and bytes.\\r\\n            mstore(add(resultA, 0x1f), packed)\\r\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\r\\n            // Right pad with zeroes.\\r\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\r\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Directly returns `a` without copying.\\r\\n    function directReturn(string memory a) internal pure {\\r\\n        assembly {\\r\\n            // Assumes that the string does not start from the scratch space.\\r\\n            let retStart := sub(a, 0x20)\\r\\n            let retSize := add(mload(a), 0x40)\\r\\n            // Right pad with zeroes. Just in case the string is produced\\r\\n            // by a method that doesn't zero right pad.\\r\\n            mstore(add(retStart, retSize), 0)\\r\\n            // Store the return offset.\\r\\n            mstore(retStart, 0x20)\\r\\n            // End the transaction, returning the string.\\r\\n            return(retStart, retSize)\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contract/solady/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\r\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\r\\n///\\r\\n/// @dev Note:\\r\\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\\r\\n/// - For ERC20s, this implementation won't check that a token has code,\\r\\n///   responsibility is delegated to the caller.\\r\\nlibrary SafeTransferLib {\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                       CUSTOM ERRORS                        */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev The ETH transfer has failed.\\r\\n    error ETHTransferFailed();\\r\\n\\r\\n    /// @dev The ERC20 `transferFrom` has failed.\\r\\n    error TransferFromFailed();\\r\\n\\r\\n    /// @dev The ERC20 `transfer` has failed.\\r\\n    error TransferFailed();\\r\\n\\r\\n    /// @dev The ERC20 `approve` has failed.\\r\\n    error ApproveFailed();\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                         CONSTANTS                          */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\\r\\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\r\\n\\r\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\r\\n    /// storage reads and writes, but low enough to prevent griefing.\\r\\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                       ETH OPERATIONS                       */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\\r\\n    //\\r\\n    // The regular variants:\\r\\n    // - Forwards all remaining gas to the target.\\r\\n    // - Reverts if the target reverts.\\r\\n    // - Reverts if the current contract has insufficient balance.\\r\\n    //\\r\\n    // The force variants:\\r\\n    // - Forwards with an optional gas stipend\\r\\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\\r\\n    // - If the target reverts, or if the gas stipend is exhausted,\\r\\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\\r\\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\\r\\n    // - Reverts if the current contract has insufficient balance.\\r\\n    //\\r\\n    // The try variants:\\r\\n    // - Forwards with a mandatory gas stipend.\\r\\n    // - Instead of reverting, returns whether the transfer succeeded.\\r\\n\\r\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\r\\n    function safeTransferETH(address to, uint256 amount) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\\r\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sends all the ETH in the current contract to `to`.\\r\\n    function safeTransferAllETH(address to) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Transfer all the ETH and check if it succeeded or not.\\r\\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\r\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\r\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            if lt(selfbalance(), amount) {\\r\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\\r\\n                mstore(0x00, to) // Store the address in scratch space.\\r\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\r\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\r\\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\\r\\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\r\\n                mstore(0x00, to) // Store the address in scratch space.\\r\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\r\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\r\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\\r\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            if lt(selfbalance(), amount) {\\r\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\\r\\n                mstore(0x00, to) // Store the address in scratch space.\\r\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\r\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\r\\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\\r\\n    function forceSafeTransferAllETH(address to) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // forgefmt: disable-next-item\\r\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\r\\n                mstore(0x00, to) // Store the address in scratch space.\\r\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\r\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\r\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\r\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\r\\n        internal\\r\\n        returns (bool success)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\\r\\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\\r\\n        internal\\r\\n        returns (bool success)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                      ERC20 OPERATIONS                      */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\r\\n    /// Reverts upon failure.\\r\\n    ///\\r\\n    /// The `from` account must have at least `amount` approved for\\r\\n    /// the current contract to manage.\\r\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let m := mload(0x40) // Cache the free memory pointer.\\r\\n            mstore(0x60, amount) // Store the `amount` argument.\\r\\n            mstore(0x40, to) // Store the `to` argument.\\r\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\r\\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\\r\\n            // Perform the transfer, reverting upon failure.\\r\\n            if iszero(\\r\\n                and( // The arguments of `and` are evaluated from right to left.\\r\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\r\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\r\\n                )\\r\\n            ) {\\r\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\r\\n            mstore(0x40, m) // Restore the free memory pointer.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\r\\n    /// Reverts upon failure.\\r\\n    ///\\r\\n    /// The `from` account must have their entire balance approved for\\r\\n    /// the current contract to manage.\\r\\n    function safeTransferAllFrom(address token, address from, address to)\\r\\n        internal\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let m := mload(0x40) // Cache the free memory pointer.\\r\\n            mstore(0x40, to) // Store the `to` argument.\\r\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\r\\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\r\\n            // Read the balance, reverting upon failure.\\r\\n            if iszero(\\r\\n                and( // The arguments of `and` are evaluated from right to left.\\r\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\r\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\r\\n                )\\r\\n            ) {\\r\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\\r\\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\\r\\n            // Perform the transfer, reverting upon failure.\\r\\n            if iszero(\\r\\n                and( // The arguments of `and` are evaluated from right to left.\\r\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\r\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\r\\n                )\\r\\n            ) {\\r\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\r\\n            mstore(0x40, m) // Restore the free memory pointer.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\r\\n    /// Reverts upon failure.\\r\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x14, to) // Store the `to` argument.\\r\\n            mstore(0x34, amount) // Store the `amount` argument.\\r\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\r\\n            // Perform the transfer, reverting upon failure.\\r\\n            if iszero(\\r\\n                and( // The arguments of `and` are evaluated from right to left.\\r\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\r\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\r\\n                )\\r\\n            ) {\\r\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\r\\n    /// Reverts upon failure.\\r\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\r\\n            mstore(0x20, address()) // Store the address of the current contract.\\r\\n            // Read the balance, reverting upon failure.\\r\\n            if iszero(\\r\\n                and( // The arguments of `and` are evaluated from right to left.\\r\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\r\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\r\\n                )\\r\\n            ) {\\r\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            mstore(0x14, to) // Store the `to` argument.\\r\\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\\r\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\r\\n            // Perform the transfer, reverting upon failure.\\r\\n            if iszero(\\r\\n                and( // The arguments of `and` are evaluated from right to left.\\r\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\r\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\r\\n                )\\r\\n            ) {\\r\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\r\\n    /// Reverts upon failure.\\r\\n    function safeApprove(address token, address to, uint256 amount) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x14, to) // Store the `to` argument.\\r\\n            mstore(0x34, amount) // Store the `amount` argument.\\r\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\r\\n            // Perform the approval, reverting upon failure.\\r\\n            if iszero(\\r\\n                and( // The arguments of `and` are evaluated from right to left.\\r\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\r\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\r\\n                )\\r\\n            ) {\\r\\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\r\\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\\r\\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\\r\\n    /// Reverts upon failure.\\r\\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x14, to) // Store the `to` argument.\\r\\n            mstore(0x34, amount) // Store the `amount` argument.\\r\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\r\\n            // Perform the approval, retrying upon failure.\\r\\n            if iszero(\\r\\n                and( // The arguments of `and` are evaluated from right to left.\\r\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\r\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\r\\n                )\\r\\n            ) {\\r\\n                mstore(0x34, 0) // Store 0 for the `amount`.\\r\\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\r\\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\\r\\n                mstore(0x34, amount) // Store back the original `amount`.\\r\\n                // Retry the approval, reverting upon failure.\\r\\n                if iszero(\\r\\n                    and(\\r\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\r\\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\r\\n                    )\\r\\n                ) {\\r\\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\r\\n                    revert(0x1c, 0x04)\\r\\n                }\\r\\n            }\\r\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\r\\n    /// Returns zero if the `token` does not exist.\\r\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x14, account) // Store the `account` argument.\\r\\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\r\\n            amount :=\\r\\n                mul(\\r\\n                    mload(0x20),\\r\\n                    and( // The arguments of `and` are evaluated from right to left.\\r\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\r\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\r\\n                    )\\r\\n                )\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contract/libs/Clussy.lib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.23;\\r\\n\\r\\nlibrary LibClussy {\\r\\n    /// @dev Object defintion of a airdrop phase.\\r\\n    struct Phase {\\r\\n        bytes32 merkleRoot;\\r\\n        uint32 startTime;\\r\\n        uint32 endTime;\\r\\n    }\\r\\n    /// @dev The token does not exist.\\r\\n    error TokenInvalid();\\r\\n    /// @dev The token is not ready to be traded.\\r\\n    error TokenLoading();\\r\\n    /// @dev An invalid minter is attempting to mint.\\r\\n    error MintInvalid();\\r\\n    /// @dev An invalid minter is attempting to mint.\\r\\n    error MinterInvalid();\\r\\n    /// @dev Transfer state has been locked already.\\r\\n    error TradingLocked();\\r\\n    /// @dev The max supply will be exceeded.\\r\\n    error SupplyInsufficient();\\r\\n    /// @dev Maximum mint amount for this wallet has been reached.\\r\\n    error MintMaximum();\\r\\n    /// @dev Not enough was sent to the payable function.\\r\\n    error PaymentInvalid();\\r\\n    /// @dev allows batch updating of metadata on Opensea\\r\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contract/404/ERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport {IERC404} from \\\"./interfaces/IERC404.sol\\\";\\nimport {DoubleEndedQueue} from \\\"./lib/DoubleEndedQueue.sol\\\";\\nimport {ERC721Events} from \\\"./lib/ERC721Events.sol\\\";\\nimport {ERC20Events} from \\\"./lib/ERC20Events.sol\\\";\\n\\nabstract contract ERC404 is IERC404 {\\n  using DoubleEndedQueue for DoubleEndedQueue.Uint256Deque;\\n\\n  /// @dev The queue of ERC-721 tokens stored in the contract.\\n  DoubleEndedQueue.Uint256Deque private _storedERC721Ids;\\n\\n  /// @dev Token name\\n  string public name;\\n\\n  /// @dev Token symbol\\n  string public symbol;\\n\\n  /// @dev Decimals for ERC-20 representation\\n  uint8 public immutable decimals;\\n\\n  /// @dev Units for ERC-20 representation\\n  uint256 public immutable units;\\n\\n  /// @dev Total supply in ERC-20 representation\\n  uint256 public totalSupply;\\n\\n  /// @dev Current mint counter which also represents the highest\\n  ///      minted id, monotonically increasing to ensure accurate ownership\\n  uint256 public minted;\\n\\n  /// @dev Initial chain id for EIP-2612 support\\n  uint256 internal immutable _INITIAL_CHAIN_ID;\\n\\n  /// @dev Initial domain separator for EIP-2612 support\\n  bytes32 internal immutable _INITIAL_DOMAIN_SEPARATOR;\\n\\n  /// @dev Balance of user in ERC-20 representation\\n  mapping(address => uint256) public balanceOf;\\n\\n  /// @dev Allowance of user in ERC-20 representation\\n  mapping(address => mapping(address => uint256)) public allowance;\\n\\n  /// @dev Approval in ERC-721 representaion\\n  mapping(uint256 => address) public getApproved;\\n\\n  /// @dev Approval for all in ERC-721 representation\\n  mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n  /// @dev Packed representation of ownerOf and owned indices\\n  mapping(uint256 => uint256) internal _ownedData;\\n\\n  /// @dev Array of owned ids in ERC-721 representation\\n  mapping(address => uint256[]) internal _owned;\\n\\n  /// @dev Addresses that are exempt from ERC-721 transfer, typically for gas savings (pairs, routers, etc)\\n  mapping(address => bool) internal _erc721TransferExempt;\\n\\n  /// @dev EIP-2612 nonces\\n  mapping(address => uint256) public nonces;\\n\\n  /// @dev Address bitmask for packed ownership data\\n  uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n  /// @dev Owned index bitmask for packed ownership data\\n  uint256 private constant _BITMASK_OWNED_INDEX = ((1 << 96) - 1) << 160;\\n\\n  /// @dev Constant for token id encoding\\n  uint256 public constant ID_ENCODING_PREFIX = 1 << 255;\\n\\n  constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n    name = name_;\\n    symbol = symbol_;\\n\\n    if (decimals_ < 18) {\\n      revert DecimalsTooLow();\\n    }\\n\\n    decimals = decimals_;\\n    units = 10 ** decimals;\\n\\n    // EIP-2612 initialization\\n    _INITIAL_CHAIN_ID = block.chainid;\\n    _INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\n  }\\n\\n  /// @notice Function to find owner of a given ERC-721 token\\n  function ownerOf(\\n    uint256 id_\\n  ) public view virtual returns (address erc721Owner) {\\n    erc721Owner = _getOwnerOf(id_);\\n\\n    if (!_isValidTokenId(id_)) {\\n      revert InvalidTokenId();\\n    }\\n\\n    if (erc721Owner == address(0)) {\\n      revert NotFound();\\n    }\\n  }\\n\\n  function owned(\\n    address owner_\\n  ) public view virtual returns (uint256[] memory) {\\n    return _owned[owner_];\\n  }\\n\\n  function erc721BalanceOf(\\n    address owner_\\n  ) public view virtual returns (uint256) {\\n    return _owned[owner_].length;\\n  }\\n\\n  function erc20BalanceOf(\\n    address owner_\\n  ) public view virtual returns (uint256) {\\n    return balanceOf[owner_];\\n  }\\n\\n  function erc20TotalSupply() public view virtual returns (uint256) {\\n    return totalSupply;\\n  }\\n\\n  function erc721TotalSupply() public view virtual returns (uint256) {\\n    return minted;\\n  }\\n\\n  function getERC721QueueLength() public view virtual returns (uint256) {\\n    return _storedERC721Ids.length();\\n  }\\n\\n  function getERC721TokensInQueue(\\n    uint256 start_,\\n    uint256 count_\\n  ) public view virtual returns (uint256[] memory) {\\n    uint256[] memory tokensInQueue = new uint256[](count_);\\n\\n    for (uint256 i = start_; i < start_ + count_; ) {\\n      tokensInQueue[i - start_] = _storedERC721Ids.at(i);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    return tokensInQueue;\\n  }\\n\\n  /// @notice tokenURI must be implemented by child contract\\n  function tokenURI(uint256 id_) public view virtual returns (string memory);\\n\\n  /// @notice Function for token approvals\\n  /// @dev This function assumes the operator is attempting to approve\\n  ///      an ERC-721 if valueOrId_ is a possibly valid ERC-721 token id.\\n  ///      Unlike setApprovalForAll, spender_ must be allowed to be 0x0 so\\n  ///      that approval can be revoked.\\n  function approve(\\n    address spender_,\\n    uint256 valueOrId_\\n  ) public virtual returns (bool) {\\n    if (_isValidTokenId(valueOrId_)) {\\n      erc721Approve(spender_, valueOrId_);\\n    } else {\\n      return erc20Approve(spender_, valueOrId_);\\n    }\\n\\n    return true;\\n  }\\n\\n  function erc721Approve(address spender_, uint256 id_) public virtual {\\n    // Intention is to approve as ERC-721 token (id).\\n    address erc721Owner = _getOwnerOf(id_);\\n\\n    if (\\n      msg.sender != erc721Owner && !isApprovedForAll[erc721Owner][msg.sender]\\n    ) {\\n      revert Unauthorized();\\n    }\\n\\n    getApproved[id_] = spender_;\\n\\n    emit ERC721Events.Approval(erc721Owner, spender_, id_);\\n  }\\n\\n  /// @dev Providing type(uint256).max for approval value results in an\\n  ///      unlimited approval that is not deducted from on transfers.\\n  function erc20Approve(\\n    address spender_,\\n    uint256 value_\\n  ) public virtual returns (bool) {\\n    // Prevent granting 0x0 an ERC-20 allowance.\\n    if (spender_ == address(0)) {\\n      revert InvalidSpender();\\n    }\\n\\n    allowance[msg.sender][spender_] = value_;\\n\\n    emit ERC20Events.Approval(msg.sender, spender_, value_);\\n\\n    return true;\\n  }\\n\\n  /// @notice Function for ERC-721 approvals\\n  function setApprovalForAll(address operator_, bool approved_) public virtual {\\n    // Prevent approvals to 0x0.\\n    if (operator_ == address(0)) {\\n      revert InvalidOperator();\\n    }\\n    isApprovedForAll[msg.sender][operator_] = approved_;\\n    emit ERC721Events.ApprovalForAll(msg.sender, operator_, approved_);\\n  }\\n\\n  /// @notice Function for mixed transfers from an operator that may be different than 'from'.\\n  /// @dev This function assumes the operator is attempting to transfer an ERC-721\\n  ///      if valueOrId is a possible valid token id.\\n  function transferFrom(\\n    address from_,\\n    address to_,\\n    uint256 valueOrId_\\n  ) public virtual returns (bool) {\\n    if (_isValidTokenId(valueOrId_)) {\\n      erc721TransferFrom(from_, to_, valueOrId_);\\n    } else {\\n      // Intention is to transfer as ERC-20 token (value).\\n      return erc20TransferFrom(from_, to_, valueOrId_);\\n    }\\n\\n    return true;\\n  }\\n\\n  /// @notice Function for ERC-721 transfers from.\\n  /// @dev This function is recommended for ERC721 transfers.\\n  function erc721TransferFrom(\\n    address from_,\\n    address to_,\\n    uint256 id_\\n  ) public virtual {\\n    // Prevent minting tokens from 0x0.\\n    if (from_ == address(0)) {\\n      revert InvalidSender();\\n    }\\n\\n    // Prevent burning tokens to 0x0.\\n    if (to_ == address(0)) {\\n      revert InvalidRecipient();\\n    }\\n\\n    if (from_ != _getOwnerOf(id_)) {\\n      revert Unauthorized();\\n    }\\n\\n    // Check that the operator is either the sender or approved for the transfer.\\n    if (\\n      msg.sender != from_ &&\\n      !isApprovedForAll[from_][msg.sender] &&\\n      msg.sender != getApproved[id_]\\n    ) {\\n      revert Unauthorized();\\n    }\\n\\n    // We only need to check ERC-721 transfer exempt status for the recipient\\n    // since the sender being ERC-721 transfer exempt means they have already\\n    // had their ERC-721s stripped away during the rebalancing process.\\n    if (erc721TransferExempt(to_)) {\\n      revert RecipientIsERC721TransferExempt();\\n    }\\n\\n    // Transfer 1 * units ERC-20 and 1 ERC-721 token.\\n    // ERC-721 transfer exemptions handled above. Can't make it to this point if either is transfer exempt.\\n    _transferERC20(from_, to_, units);\\n    _transferERC721(from_, to_, id_);\\n  }\\n\\n  /// @notice Function for ERC-20 transfers from.\\n  /// @dev This function is recommended for ERC20 transfers\\n  function erc20TransferFrom(\\n    address from_,\\n    address to_,\\n    uint256 value_\\n  ) public virtual returns (bool) {\\n    // Prevent minting tokens from 0x0.\\n    if (from_ == address(0)) {\\n      revert InvalidSender();\\n    }\\n\\n    // Prevent burning tokens to 0x0.\\n    if (to_ == address(0)) {\\n      revert InvalidRecipient();\\n    }\\n\\n    uint256 allowed = allowance[from_][msg.sender];\\n\\n    // Check that the operator has sufficient allowance.\\n    if (allowed != type(uint256).max) {\\n      allowance[from_][msg.sender] = allowed - value_;\\n    }\\n\\n    // Transferring ERC-20s directly requires the _transferERC20WithERC721 function.\\n    // Handles ERC-721 exemptions internally.\\n    return _transferERC20WithERC721(from_, to_, value_);\\n  }\\n\\n  /// @notice Function for ERC-20 transfers.\\n  /// @dev This function assumes the operator is attempting to transfer as ERC-20\\n  ///      given this function is only supported on the ERC-20 interface.\\n  ///      Treats even large amounts that are valid ERC-721 ids as ERC-20s.\\n  function transfer(address to_, uint256 value_) public virtual returns (bool) {\\n    // Prevent burning tokens to 0x0.\\n    if (to_ == address(0)) {\\n      revert InvalidRecipient();\\n    }\\n\\n    // Transferring ERC-20s directly requires the _transferERC20WithERC721 function.\\n    // Handles ERC-721 exemptions internally.\\n    return _transferERC20WithERC721(msg.sender, to_, value_);\\n  }\\n\\n  /// @notice Function for ERC-721 transfers with contract support.\\n  /// This function only supports moving valid ERC-721 ids, as it does not exist on the ERC-20\\n  /// spec and will revert otherwise.\\n  function safeTransferFrom(\\n    address from_,\\n    address to_,\\n    uint256 id_\\n  ) public virtual {\\n    safeTransferFrom(from_, to_, id_, \\\"\\\");\\n  }\\n\\n  /// @notice Function for ERC-721 transfers with contract support and callback data.\\n  /// This function only supports moving valid ERC-721 ids, as it does not exist on the\\n  /// ERC-20 spec and will revert otherwise.\\n  function safeTransferFrom(\\n    address from_,\\n    address to_,\\n    uint256 id_,\\n    bytes memory data_\\n  ) public virtual {\\n    if (!_isValidTokenId(id_)) {\\n      revert InvalidTokenId();\\n    }\\n\\n    transferFrom(from_, to_, id_);\\n\\n    if (\\n      to_.code.length != 0 &&\\n      IERC721Receiver(to_).onERC721Received(msg.sender, from_, id_, data_) !=\\n      IERC721Receiver.onERC721Received.selector\\n    ) {\\n      revert UnsafeRecipient();\\n    }\\n  }\\n\\n  /// @notice Function for EIP-2612 permits (ERC-20 only).\\n  /// @dev Providing type(uint256).max for permit value results in an\\n  ///      unlimited approval that is not deducted from on transfers.\\n  function permit(\\n    address owner_,\\n    address spender_,\\n    uint256 value_,\\n    uint256 deadline_,\\n    uint8 v_,\\n    bytes32 r_,\\n    bytes32 s_\\n  ) public virtual {\\n    if (deadline_ < block.timestamp) {\\n      revert PermitDeadlineExpired();\\n    }\\n\\n    // permit cannot be used for ERC-721 token approvals, so ensure\\n    // the value does not fall within the valid range of ERC-721 token ids.\\n    if (_isValidTokenId(value_)) {\\n      revert InvalidApproval();\\n    }\\n\\n    if (spender_ == address(0)) {\\n      revert InvalidSpender();\\n    }\\n\\n    unchecked {\\n      address recoveredAddress = ecrecover(\\n        keccak256(\\n          abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            DOMAIN_SEPARATOR(),\\n            keccak256(\\n              abi.encode(\\n                keccak256(\\n                  \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                ),\\n                owner_,\\n                spender_,\\n                value_,\\n                nonces[owner_]++,\\n                deadline_\\n              )\\n            )\\n          )\\n        ),\\n        v_,\\n        r_,\\n        s_\\n      );\\n\\n      if (recoveredAddress == address(0) || recoveredAddress != owner_) {\\n        revert InvalidSigner();\\n      }\\n\\n      allowance[recoveredAddress][spender_] = value_;\\n    }\\n\\n    emit ERC20Events.Approval(owner_, spender_, value_);\\n  }\\n\\n  /// @notice Returns domain initial domain separator, or recomputes if chain id is not equal to initial chain id\\n  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n    return\\n      block.chainid == _INITIAL_CHAIN_ID\\n        ? _INITIAL_DOMAIN_SEPARATOR\\n        : _computeDomainSeparator();\\n  }\\n\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual returns (bool) {\\n    return\\n      interfaceId == type(IERC404).interfaceId ||\\n      interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @notice Function for self-exemption\\n  function setSelfERC721TransferExempt(bool state_) public virtual {\\n    _setERC721TransferExempt(msg.sender, state_);\\n  }\\n\\n  /// @notice Function to check if address is transfer exempt\\n  function erc721TransferExempt(\\n    address target_\\n  ) public view virtual returns (bool) {\\n    return target_ == address(0) || _erc721TransferExempt[target_];\\n  }\\n\\n  /// @notice For a token token id to be considered valid, it just needs\\n  ///         to fall within the range of possible token ids, it does not\\n  ///         necessarily have to be minted yet.\\n  function _isValidTokenId(uint256 id_) internal pure returns (bool) {\\n    return id_ > ID_ENCODING_PREFIX && id_ != type(uint256).max;\\n  }\\n\\n  /// @notice Internal function to compute domain separator for EIP-2612 permits\\n  function _computeDomainSeparator() internal view virtual returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n          ),\\n          keccak256(bytes(name)),\\n          keccak256(\\\"1\\\"),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  /// @notice This is the lowest level ERC-20 transfer function, which\\n  ///         should be used for both normal ERC-20 transfers as well as minting.\\n  /// Note that this function allows transfers to and from 0x0.\\n  function _transferERC20(\\n    address from_,\\n    address to_,\\n    uint256 value_\\n  ) internal virtual {\\n    // Minting is a special case for which we should not check the balance of\\n    // the sender, and we should increase the total supply.\\n    if (from_ == address(0)) {\\n      totalSupply += value_;\\n    } else {\\n      // Deduct value from sender's balance.\\n      balanceOf[from_] -= value_;\\n    }\\n\\n    // Update the recipient's balance.\\n    // Can be unchecked because on mint, adding to totalSupply is checked, and on transfer balance deduction is checked.\\n    unchecked {\\n      balanceOf[to_] += value_;\\n    }\\n\\n    emit ERC20Events.Transfer(from_, to_, value_);\\n  }\\n\\n  /// @notice Consolidated record keeping function for transferring ERC-721s.\\n  /// @dev Assign the token to the new owner, and remove from the old owner.\\n  /// Note that this function allows transfers to and from 0x0.\\n  /// Does not handle ERC-721 exemptions.\\n  function _transferERC721(\\n    address from_,\\n    address to_,\\n    uint256 id_\\n  ) internal virtual {\\n    // If this is not a mint, handle record keeping for transfer from previous owner.\\n    if (from_ != address(0)) {\\n      // On transfer of an NFT, any previous approval is reset.\\n      delete getApproved[id_];\\n\\n      uint256 updatedId = _owned[from_][_owned[from_].length - 1];\\n      if (updatedId != id_) {\\n        uint256 updatedIndex = _getOwnedIndex(id_);\\n        // update _owned for sender\\n        _owned[from_][updatedIndex] = updatedId;\\n        // update index for the moved id\\n        _setOwnedIndex(updatedId, updatedIndex);\\n      }\\n\\n      // pop\\n      _owned[from_].pop();\\n    }\\n\\n    // Check if this is a burn.\\n    if (to_ != address(0)) {\\n      // If not a burn, update the owner of the token to the new owner.\\n      // Update owner of the token to the new owner.\\n      _setOwnerOf(id_, to_);\\n      // Push token onto the new owner's stack.\\n      _owned[to_].push(id_);\\n      // Update index for new owner's stack.\\n      _setOwnedIndex(id_, _owned[to_].length - 1);\\n    } else {\\n      // If this is a burn, reset the owner of the token to 0x0 by deleting the token from _ownedData.\\n      delete _ownedData[id_];\\n    }\\n\\n    emit ERC721Events.Transfer(from_, to_, id_);\\n  }\\n\\n  /// @notice Internal function for ERC-20 transfers. Also handles any ERC-721 transfers that may be required.\\n  // Handles ERC-721 exemptions.\\n  function _transferERC20WithERC721(\\n    address from_,\\n    address to_,\\n    uint256 value_\\n  ) internal virtual returns (bool) {\\n    uint256 erc20BalanceOfSenderBefore = erc20BalanceOf(from_);\\n    uint256 erc20BalanceOfReceiverBefore = erc20BalanceOf(to_);\\n\\n    _transferERC20(from_, to_, value_);\\n\\n    // Preload for gas savings on branches\\n    bool isFromERC721TransferExempt = erc721TransferExempt(from_);\\n    bool isToERC721TransferExempt = erc721TransferExempt(to_);\\n\\n    // Skip _withdrawAndStoreERC721 and/or _retrieveOrMintERC721 for ERC-721 transfer exempt addresses\\n    // 1) to save gas\\n    // 2) because ERC-721 transfer exempt addresses won't always have/need ERC-721s corresponding to their ERC20s.\\n    if (isFromERC721TransferExempt && isToERC721TransferExempt) {\\n      // Case 1) Both sender and recipient are ERC-721 transfer exempt. No ERC-721s need to be transferred.\\n      // NOOP.\\n    } else if (isFromERC721TransferExempt) {\\n      // Case 2) The sender is ERC-721 transfer exempt, but the recipient is not. Contract should not attempt\\n      //         to transfer ERC-721s from the sender, but the recipient should receive ERC-721s\\n      //         from the bank/minted for any whole number increase in their balance.\\n      // Only cares about whole number increments.\\n      uint256 tokensToRetrieveOrMint = (balanceOf[to_] / units) -\\n        (erc20BalanceOfReceiverBefore / units);\\n      for (uint256 i = 0; i < tokensToRetrieveOrMint; ) {\\n        _retrieveOrMintERC721(to_);\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n    } else if (isToERC721TransferExempt) {\\n      // Case 3) The sender is not ERC-721 transfer exempt, but the recipient is. Contract should attempt\\n      //         to withdraw and store ERC-721s from the sender, but the recipient should not\\n      //         receive ERC-721s from the bank/minted.\\n      // Only cares about whole number increments.\\n      uint256 tokensToWithdrawAndStore = (erc20BalanceOfSenderBefore / units) -\\n        (balanceOf[from_] / units);\\n      for (uint256 i = 0; i < tokensToWithdrawAndStore; ) {\\n        _withdrawAndStoreERC721(from_);\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n    } else {\\n      // Case 4) Neither the sender nor the recipient are ERC-721 transfer exempt.\\n      // Strategy:\\n      // 1. First deal with the whole tokens. These are easy and will just be transferred.\\n      // 2. Look at the fractional part of the value:\\n      //   a) If it causes the sender to lose a whole token that was represented by an NFT due to a\\n      //      fractional part being transferred, withdraw and store an additional NFT from the sender.\\n      //   b) If it causes the receiver to gain a whole new token that should be represented by an NFT\\n      //      due to receiving a fractional part that completes a whole token, retrieve or mint an NFT to the recevier.\\n\\n      // Whole tokens worth of ERC-20s get transferred as ERC-721s without any burning/minting.\\n      uint256 nftsToTransfer = value_ / units;\\n      for (uint256 i = 0; i < nftsToTransfer; ) {\\n        // Pop from sender's ERC-721 stack and transfer them (LIFO)\\n        uint256 indexOfLastToken = _owned[from_].length - 1;\\n        uint256 tokenId = _owned[from_][indexOfLastToken];\\n        _transferERC721(from_, to_, tokenId);\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n\\n      // If the transfer changes either the sender or the recipient's holdings from a fractional to a non-fractional\\n      // amount (or vice versa), adjust ERC-721s.\\n\\n      // First check if the send causes the sender to lose a whole token that was represented by an ERC-721\\n      // due to a fractional part being transferred.\\n      //\\n      // Process:\\n      // Take the difference between the whole number of tokens before and after the transfer for the sender.\\n      // If that difference is greater than the number of ERC-721s transferred (whole units), then there was\\n      // an additional ERC-721 lost due to the fractional portion of the transfer.\\n      // If this is a self-send and the before and after balances are equal (not always the case but often),\\n      // then no ERC-721s will be lost here.\\n      if (\\n        erc20BalanceOfSenderBefore / units - erc20BalanceOf(from_) / units >\\n        nftsToTransfer\\n      ) {\\n        _withdrawAndStoreERC721(from_);\\n      }\\n\\n      // Then, check if the transfer causes the receiver to gain a whole new token which requires gaining\\n      // an additional ERC-721.\\n      //\\n      // Process:\\n      // Take the difference between the whole number of tokens before and after the transfer for the recipient.\\n      // If that difference is greater than the number of ERC-721s transferred (whole units), then there was\\n      // an additional ERC-721 gained due to the fractional portion of the transfer.\\n      // Again, for self-sends where the before and after balances are equal, no ERC-721s will be gained here.\\n      if (\\n        erc20BalanceOf(to_) / units - erc20BalanceOfReceiverBefore / units >\\n        nftsToTransfer\\n      ) {\\n        _retrieveOrMintERC721(to_);\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  /// @notice Internal function for ERC20 minting\\n  /// @dev This function will allow minting of new ERC20s.\\n  ///      If mintCorrespondingERC721s_ is true, and the recipient is not ERC-721 exempt, it will\\n  ///      also mint the corresponding ERC721s.\\n  /// Handles ERC-721 exemptions.\\n  function _mintERC20(address to_, uint256 value_) internal virtual {\\n    /// You cannot mint to the zero address (you can't mint and immediately burn in the same transfer).\\n    if (to_ == address(0)) {\\n      revert InvalidRecipient();\\n    }\\n\\n    if (totalSupply + value_ > ID_ENCODING_PREFIX) {\\n      revert MintLimitReached();\\n    }\\n\\n    _transferERC20WithERC721(address(0), to_, value_);\\n  }\\n\\n  /// @notice Internal function for ERC-721 minting and retrieval from the bank.\\n  /// @dev This function will allow minting of new ERC-721s up to the total fractional supply. It will\\n  ///      first try to pull from the bank, and if the bank is empty, it will mint a new token.\\n  /// Does not handle ERC-721 exemptions.\\n  function _retrieveOrMintERC721(address to_) internal virtual {\\n    if (to_ == address(0)) {\\n      revert InvalidRecipient();\\n    }\\n\\n    uint256 id;\\n\\n    if (!_storedERC721Ids.empty()) {\\n      // If there are any tokens in the bank, use those first.\\n      // Pop off the end of the queue (FIFO).\\n      id = _storedERC721Ids.popBack();\\n    } else {\\n      // Otherwise, mint a new token, should not be able to go over the total fractional supply.\\n      ++minted;\\n\\n      // Reserve max uint256 for approvals\\n      if (minted == type(uint256).max) {\\n        revert MintLimitReached();\\n      }\\n\\n      id = ID_ENCODING_PREFIX + minted;\\n    }\\n\\n    address erc721Owner = _getOwnerOf(id);\\n\\n    // The token should not already belong to anyone besides 0x0 or this contract.\\n    // If it does, something is wrong, as this should never happen.\\n    if (erc721Owner != address(0)) {\\n      revert AlreadyExists();\\n    }\\n\\n    // Transfer the token to the recipient, either transferring from the contract's bank or minting.\\n    // Does not handle ERC-721 exemptions.\\n    _transferERC721(erc721Owner, to_, id);\\n  }\\n\\n  /// @notice Internal function for ERC-721 deposits to bank (this contract).\\n  /// @dev This function will allow depositing of ERC-721s to the bank, which can be retrieved by future minters.\\n  // Does not handle ERC-721 exemptions.\\n  function _withdrawAndStoreERC721(address from_) internal virtual {\\n    if (from_ == address(0)) {\\n      revert InvalidSender();\\n    }\\n\\n    // Retrieve the latest token added to the owner's stack (LIFO).\\n    uint256 id = _owned[from_][_owned[from_].length - 1];\\n\\n    // Transfer to 0x0.\\n    // Does not handle ERC-721 exemptions.\\n    _transferERC721(from_, address(0), id);\\n\\n    // Record the token in the contract's bank queue.\\n    _storedERC721Ids.pushFront(id);\\n  }\\n\\n  /// @notice Initialization function to set pairs / etc, saving gas by avoiding mint / burn on unnecessary targets\\n  function _setERC721TransferExempt(\\n    address target_,\\n    bool state_\\n  ) internal virtual {\\n    if (target_ == address(0)) {\\n      revert InvalidExemption();\\n    }\\n\\n    // Adjust the ERC721 balances of the target to respect exemption rules.\\n    // Despite this logic, it is still recommended practice to exempt prior to the target\\n    // having an active balance.\\n    if (state_) {\\n      _clearERC721Balance(target_);\\n    } else {\\n      _reinstateERC721Balance(target_);\\n    }\\n\\n    _erc721TransferExempt[target_] = state_;\\n  }\\n\\n  /// @notice Function to reinstate balance on exemption removal\\n  function _reinstateERC721Balance(address target_) private {\\n    uint256 expectedERC721Balance = erc20BalanceOf(target_) / units;\\n    uint256 actualERC721Balance = erc721BalanceOf(target_);\\n\\n    for (uint256 i = 0; i < expectedERC721Balance - actualERC721Balance; ) {\\n      // Transfer ERC721 balance in from pool\\n      _retrieveOrMintERC721(target_);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /// @notice Function to clear balance on exemption inclusion\\n  function _clearERC721Balance(address target_) private {\\n    uint256 erc721Balance = erc721BalanceOf(target_);\\n\\n    for (uint256 i = 0; i < erc721Balance; ) {\\n      // Transfer out ERC721 balance\\n      _withdrawAndStoreERC721(target_);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function _getOwnerOf(\\n    uint256 id_\\n  ) internal view virtual returns (address ownerOf_) {\\n    uint256 data = _ownedData[id_];\\n\\n    assembly {\\n      ownerOf_ := and(data, _BITMASK_ADDRESS)\\n    }\\n  }\\n\\n  function _setOwnerOf(uint256 id_, address owner_) internal virtual {\\n    uint256 data = _ownedData[id_];\\n\\n    assembly {\\n      data := add(\\n        and(data, _BITMASK_OWNED_INDEX),\\n        and(owner_, _BITMASK_ADDRESS)\\n      )\\n    }\\n\\n    _ownedData[id_] = data;\\n  }\\n\\n  function _getOwnedIndex(\\n    uint256 id_\\n  ) internal view virtual returns (uint256 ownedIndex_) {\\n    uint256 data = _ownedData[id_];\\n\\n    assembly {\\n      ownedIndex_ := shr(160, data)\\n    }\\n  }\\n\\n  function _setOwnedIndex(uint256 id_, uint256 index_) internal virtual {\\n    uint256 data = _ownedData[id_];\\n\\n    if (index_ > _BITMASK_OWNED_INDEX >> 160) {\\n      revert OwnedIndexOverflow();\\n    }\\n\\n    assembly {\\n      data := add(\\n        and(data, _BITMASK_ADDRESS),\\n        and(shl(160, index_), _BITMASK_OWNED_INDEX)\\n      )\\n    }\\n\\n    _ownedData[id_] = data;\\n  }\\n}\"\r\n    },\r\n    \"contract/404/lib/ERC20Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary ERC20Events {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contract/404/lib/ERC721Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary ERC721Events {\\n  event ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n  );\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 indexed id\\n  );\\n  event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n}\\n\"\r\n    },\r\n    \"contract/404/lib/DoubleEndedQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/DoubleEndedQueue.sol)\\n// Modified by Pandora Labs to support native uint256 operations\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Uint256Deque`. This data structure can only be used in storage, and not in memory.\\n *\\n * ```solidity\\n * DoubleEndedQueue.Uint256Deque queue;\\n * ```\\n */\\nlibrary DoubleEndedQueue {\\n  /**\\n   * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n   */\\n  error QueueEmpty();\\n\\n  /**\\n   * @dev A push operation couldn't be completed due to the queue being full.\\n   */\\n  error QueueFull();\\n\\n  /**\\n   * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n   */\\n  error QueueOutOfBounds();\\n\\n  /**\\n   * @dev Indices are 128 bits so begin and end are packed in a single storage slot for efficient access.\\n   *\\n   * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n   * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n   * lead to unexpected behavior.\\n   *\\n   * The first item is at data[begin] and the last item is at data[end - 1]. This range can wrap around.\\n   */\\n  struct Uint256Deque {\\n    uint128 _begin;\\n    uint128 _end;\\n    mapping(uint128 index => uint256) _data;\\n  }\\n\\n  /**\\n   * @dev Inserts an item at the end of the queue.\\n   *\\n   * Reverts with {QueueFull} if the queue is full.\\n   */\\n  function pushBack(Uint256Deque storage deque, uint256 value) internal {\\n    unchecked {\\n      uint128 backIndex = deque._end;\\n      if (backIndex + 1 == deque._begin) revert QueueFull();\\n      deque._data[backIndex] = value;\\n      deque._end = backIndex + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes the item at the end of the queue and returns it.\\n   *\\n   * Reverts with {QueueEmpty} if the queue is empty.\\n   */\\n  function popBack(\\n    Uint256Deque storage deque\\n  ) internal returns (uint256 value) {\\n    unchecked {\\n      uint128 backIndex = deque._end;\\n      if (backIndex == deque._begin) revert QueueEmpty();\\n      --backIndex;\\n      value = deque._data[backIndex];\\n      delete deque._data[backIndex];\\n      deque._end = backIndex;\\n    }\\n  }\\n\\n  /**\\n   * @dev Inserts an item at the beginning of the queue.\\n   *\\n   * Reverts with {QueueFull} if the queue is full.\\n   */\\n  function pushFront(Uint256Deque storage deque, uint256 value) internal {\\n    unchecked {\\n      uint128 frontIndex = deque._begin - 1;\\n      if (frontIndex == deque._end) revert QueueFull();\\n      deque._data[frontIndex] = value;\\n      deque._begin = frontIndex;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes the item at the beginning of the queue and returns it.\\n   *\\n   * Reverts with `QueueEmpty` if the queue is empty.\\n   */\\n  function popFront(\\n    Uint256Deque storage deque\\n  ) internal returns (uint256 value) {\\n    unchecked {\\n      uint128 frontIndex = deque._begin;\\n      if (frontIndex == deque._end) revert QueueEmpty();\\n      value = deque._data[frontIndex];\\n      delete deque._data[frontIndex];\\n      deque._begin = frontIndex + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the item at the beginning of the queue.\\n   *\\n   * Reverts with `QueueEmpty` if the queue is empty.\\n   */\\n  function front(\\n    Uint256Deque storage deque\\n  ) internal view returns (uint256 value) {\\n    if (empty(deque)) revert QueueEmpty();\\n    return deque._data[deque._begin];\\n  }\\n\\n  /**\\n   * @dev Returns the item at the end of the queue.\\n   *\\n   * Reverts with `QueueEmpty` if the queue is empty.\\n   */\\n  function back(\\n    Uint256Deque storage deque\\n  ) internal view returns (uint256 value) {\\n    if (empty(deque)) revert QueueEmpty();\\n    unchecked {\\n      return deque._data[deque._end - 1];\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n   * `length(deque) - 1`.\\n   *\\n   * Reverts with `QueueOutOfBounds` if the index is out of bounds.\\n   */\\n  function at(\\n    Uint256Deque storage deque,\\n    uint256 index\\n  ) internal view returns (uint256 value) {\\n    if (index >= length(deque)) revert QueueOutOfBounds();\\n    // By construction, length is a uint128, so the check above ensures that index can be safely downcast to uint128\\n    unchecked {\\n      return deque._data[deque._begin + uint128(index)];\\n    }\\n  }\\n\\n  /**\\n   * @dev Resets the queue back to being empty.\\n   *\\n   * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n   * out on potential gas refunds.\\n   */\\n  function clear(Uint256Deque storage deque) internal {\\n    deque._begin = 0;\\n    deque._end = 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of items in the queue.\\n   */\\n  function length(Uint256Deque storage deque) internal view returns (uint256) {\\n    unchecked {\\n      return uint256(deque._end - deque._begin);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the queue is empty.\\n   */\\n  function empty(Uint256Deque storage deque) internal view returns (bool) {\\n    return deque._end == deque._begin;\\n  }\\n}\\n\"\r\n    },\r\n    \"contract/404/interfaces/IERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\ninterface IERC404 is IERC165 {\\n  error NotFound();\\n  error InvalidTokenId();\\n  error AlreadyExists();\\n  error InvalidRecipient();\\n  error InvalidSender();\\n  error InvalidSpender();\\n  error InvalidOperator();\\n  error UnsafeRecipient();\\n  error RecipientIsERC721TransferExempt();\\n  error Unauthorized();\\n  error InsufficientAllowance();\\n  error DecimalsTooLow();\\n  error PermitDeadlineExpired();\\n  error InvalidSigner();\\n  error InvalidApproval();\\n  error OwnedIndexOverflow();\\n  error MintLimitReached();\\n  error InvalidExemption();\\n\\n  function name() external view returns (string memory);\\n  function symbol() external view returns (string memory);\\n  function decimals() external view returns (uint8);\\n  function totalSupply() external view returns (uint256);\\n  function erc20TotalSupply() external view returns (uint256);\\n  function erc721TotalSupply() external view returns (uint256);\\n  function balanceOf(address owner_) external view returns (uint256);\\n  function erc721BalanceOf(address owner_) external view returns (uint256);\\n  function erc20BalanceOf(address owner_) external view returns (uint256);\\n  function erc721TransferExempt(address account_) external view returns (bool);\\n  function isApprovedForAll(\\n    address owner_,\\n    address operator_\\n  ) external view returns (bool);\\n  function allowance(\\n    address owner_,\\n    address spender_\\n  ) external view returns (uint256);\\n  function owned(address owner_) external view returns (uint256[] memory);\\n  function ownerOf(uint256 id_) external view returns (address erc721Owner);\\n  function tokenURI(uint256 id_) external view returns (string memory);\\n  function approve(\\n    address spender_,\\n    uint256 valueOrId_\\n  ) external returns (bool);\\n  function erc20Approve(\\n    address spender_,\\n    uint256 value_\\n  ) external returns (bool);\\n  function erc721Approve(address spender_, uint256 id_) external;\\n  function setApprovalForAll(address operator_, bool approved_) external;\\n  function transferFrom(\\n    address from_,\\n    address to_,\\n    uint256 valueOrId_\\n  ) external returns (bool);\\n  function erc20TransferFrom(\\n    address from_,\\n    address to_,\\n    uint256 value_\\n  ) external returns (bool);\\n  function erc721TransferFrom(address from_, address to_, uint256 id_) external;\\n  function transfer(address to_, uint256 amount_) external returns (bool);\\n  function getERC721QueueLength() external view returns (uint256);\\n  function getERC721TokensInQueue(\\n    uint256 start_,\\n    uint256 count_\\n  ) external view returns (uint256[] memory);\\n  function setSelfERC721TransferExempt(bool state_) external;\\n  function safeTransferFrom(address from_, address to_, uint256 id_) external;\\n  function safeTransferFrom(\\n    address from_,\\n    address to_,\\n    uint256 id_,\\n    bytes calldata data_\\n  ) external;\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n  function permit(\\n    address owner_,\\n    address spender_,\\n    uint256 value_,\\n    uint256 deadline_,\\n    uint8 v_,\\n    bytes32 r_,\\n    bytes32 s_\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"$owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"$baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"$name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"$symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"$decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"$maxTotalSupplyERC721\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$wholeTokensToOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$mintPriceinWEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$mintWalletLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExemption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnedIndexOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientIsERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenLoading\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ID_ENCODING_PREFIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"erc20Approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc20BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"erc20TransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"erc721Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc721BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"}],\"name\":\"erc721TransferExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"erc721TransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC721QueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"getERC721TokensInQueue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"mintSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"owned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"$recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"$amounts\",\"type\":\"uint256[]\"}],\"name\":\"ownerAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"$uri\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"$account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"$value\",\"type\":\"bool\"}],\"name\":\"setERC721TransferExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"$locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"$accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"$value\",\"type\":\"bool\"}],\"name\":\"setMultiERC721TransferExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"setSelfERC721TransferExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"$trading\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"$id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"units\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Clussy", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000094f7719c82828573344fbf9c803a5f5535f96aba000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000001134000000000000000000000000000000000000000000000000000000000000025c000000000000000000000000000000000000000000000000008f879600ed0000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000043697066733a2f2f62616679626569646d6168356e6737377864326f617a78336b72666b347a65666b766e6c36643678686770616b376471756d6632696c75356132342f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006436c7573737900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006434c555353590000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}