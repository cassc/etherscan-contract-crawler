{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/nicklatkovich/pixelplex/mantra-dao/fixed-swap/contracts/FixedSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"solowei/contracts/AttoDecimal.sol\\\";\\nimport \\\"solowei/contracts/TwoStageOwnable.sol\\\";\\n\\ncontract FixedSwap is ReentrancyGuard, TwoStageOwnable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using AttoDecimal for AttoDecimal.Instance;\\n\\n    enum Type {SIMPLE, INTERVAL, LINEAR}\\n\\n    struct Props {\\n        uint256 issuanceLimit;\\n        uint256 startsAt;\\n        uint256 endsAt;\\n        IERC20 paymentToken;\\n        IERC20 issuanceToken;\\n        AttoDecimal.Instance fee;\\n        AttoDecimal.Instance rate;\\n    }\\n\\n    struct AccountState {\\n        uint256 limitIndex;\\n        uint256 paymentSum;\\n    }\\n\\n    struct ComplexAccountState {\\n        uint256 issuanceAmount;\\n        uint256 withdrawnIssuanceAmount;\\n    }\\n\\n    struct Account {\\n        AccountState state;\\n        ComplexAccountState complex;\\n        uint256 immediatelyUnlockedAmount; // linear\\n        uint256 unlockedIntervalsCount; // interval\\n    }\\n\\n    struct State {\\n        uint256 available;\\n        uint256 issuance;\\n        uint256 lockedPayments;\\n        uint256 unlockedPayments;\\n        address nominatedOwner;\\n        address owner;\\n        uint256[] paymentLimits;\\n    }\\n\\n    struct Interval {\\n        uint256 startsAt;\\n        AttoDecimal.Instance unlockingPart;\\n    }\\n\\n    struct LinearProps {\\n        uint256 endsAt;\\n        uint256 duration;\\n    }\\n\\n    struct Pool {\\n        Type type_;\\n        uint256 index;\\n        AttoDecimal.Instance immediatelyUnlockingPart;\\n        Props props;\\n        LinearProps linear;\\n        State state;\\n        Interval[] intervals;\\n        mapping(address => Account) accounts;\\n    }\\n\\n    Pool[] private _pools;\\n    mapping(IERC20 => uint256) private _collectedFees;\\n\\n    function getTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function poolsCount() public view returns (uint256) {\\n        return _pools.length;\\n    }\\n\\n    function poolProps(uint256 poolIndex) public view returns (Type type_, Props memory props) {\\n        Pool storage pool = _getPool(poolIndex);\\n        return (pool.type_, pool.props);\\n    }\\n\\n    function intervalPoolProps(uint256 poolIndex)\\n        public\\n        view\\n        returns (\\n            Props memory props,\\n            AttoDecimal.Instance memory immediatelyUnlockingPart,\\n            Interval[] memory intervals\\n        )\\n    {\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolIsInterval(pool);\\n        return (pool.props, pool.immediatelyUnlockingPart, pool.intervals);\\n    }\\n\\n    function linearPoolProps(uint256 poolIndex)\\n        public\\n        view\\n        returns (\\n            Props memory props,\\n            AttoDecimal.Instance memory immediatelyUnlockingPart,\\n            LinearProps memory linear\\n        )\\n    {\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolIsLinear(pool);\\n        return (pool.props, pool.immediatelyUnlockingPart, pool.linear);\\n    }\\n\\n    function poolState(uint256 poolIndex) public view returns (State memory state) {\\n        return _getPool(poolIndex).state;\\n    }\\n\\n    function poolAccount(uint256 poolIndex, address address_)\\n        public\\n        view\\n        returns (Type type_, AccountState memory state)\\n    {\\n        Pool storage pool = _getPool(poolIndex);\\n        return (pool.type_, pool.accounts[address_].state);\\n    }\\n\\n    function intervalPoolAccount(uint256 poolIndex, address address_)\\n        public\\n        view\\n        returns (\\n            AccountState memory state,\\n            ComplexAccountState memory complex,\\n            uint256 unlockedIntervalsCount\\n        )\\n    {\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolIsInterval(pool);\\n        Account storage account = pool.accounts[address_];\\n        return (account.state, account.complex, account.unlockedIntervalsCount);\\n    }\\n\\n    function linearPoolAccount(uint256 poolIndex, address address_)\\n        public\\n        view\\n        returns (\\n            AccountState memory state,\\n            ComplexAccountState memory complex,\\n            uint256 immediatelyUnlockedAmount\\n        )\\n    {\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolIsLinear(pool);\\n        Account storage account = pool.accounts[address_];\\n        return (account.state, account.complex, account.immediatelyUnlockedAmount);\\n    }\\n\\n    function collectedFees(IERC20 token) public view returns (uint256) {\\n        return _collectedFees[token];\\n    }\\n\\n    event AccountLimitChanged(uint256 indexed poolIndex, address indexed address_, uint256 indexed limitIndex);\\n    event FeeWithdrawn(address indexed token, uint256 amount);\\n    event ImmediatelyUnlockingPartUpdated(uint256 indexed poolIndex, uint256 mantissa);\\n    event IntervalCreated(uint256 indexed poolIndex, uint256 startsAt, uint256 unlockingPart);\\n    event IssuanceIncreased(uint256 indexed poolIndex, uint256 amount);\\n    event LinearUnlockingEndingTimestampUpdated(uint256 indexed poolIndex, uint256 timestamp);\\n    event LinearPoolUnlocking(uint256 indexed poolIndex, address indexed account, uint256 amount);\\n    event PaymentLimitCreated(uint256 indexed poolIndex, uint256 indexed limitIndex, uint256 limit);\\n    event PaymentLimitChanged(uint256 indexed poolIndex, uint256 indexed limitIndex, uint256 newLimit);\\n    event PaymentUnlocked(uint256 indexed poolIndex, uint256 unlockedAmount, uint256 collectedFee);\\n    event PaymentsWithdrawn(uint256 indexed poolIndex, uint256 amount);\\n    event PoolOwnerChanged(uint256 indexed poolIndex, address indexed newOwner);\\n    event PoolOwnerNominated(uint256 indexed poolIndex, address indexed nominatedOwner);\\n    event UnsoldWithdrawn(uint256 indexed poolIndex, uint256 amount);\\n\\n    event PoolCreated(\\n        Type type_,\\n        IERC20 indexed paymentToken,\\n        IERC20 indexed issuanceToken,\\n        uint256 poolIndex,\\n        uint256 issuanceLimit,\\n        uint256 startsAt,\\n        uint256 endsAt,\\n        uint256 fee,\\n        uint256 rate,\\n        uint256 paymentLimit\\n    );\\n\\n    event Swap(\\n        uint256 indexed poolIndex,\\n        address indexed caller,\\n        uint256 requestedPaymentAmount,\\n        uint256 paymentAmount,\\n        uint256 issuanceAmount\\n    );\\n\\n    constructor(address owner_) public TwoStageOwnable(owner_) {\\n        return;\\n    }\\n\\n    function createSimplePool(\\n        Props memory props,\\n        uint256 paymentLimit,\\n        address owner_\\n    ) external onlyOwner returns (bool success, uint256 poolIndex) {\\n        return (true, _createSimplePool(props, paymentLimit, owner_, Type.SIMPLE).index);\\n    }\\n\\n    function createIntervalPool(\\n        Props memory props,\\n        uint256 paymentLimit,\\n        address owner_,\\n        AttoDecimal.Instance memory immediatelyUnlockingPart,\\n        Interval[] memory intervals\\n    ) external onlyOwner returns (bool success, uint256 poolIndex) {\\n        Pool storage pool = _createSimplePool(props, paymentLimit, owner_, Type.INTERVAL);\\n        _setImmediatelyUnlockingPart(pool, immediatelyUnlockingPart);\\n        uint256 intervalsCount = intervals.length;\\n        AttoDecimal.Instance memory lastUnlockingPart = immediatelyUnlockingPart;\\n        uint256 lastIntervalStartingTimestamp = props.endsAt - 1;\\n        for (uint256 i = 0; i < intervalsCount; i++) {\\n            Interval memory interval = intervals[i];\\n            require(interval.unlockingPart.gt(lastUnlockingPart), \\\"Invalid interval unlocking part\\\");\\n            lastUnlockingPart = interval.unlockingPart;\\n            uint256 startingTimestamp = interval.startsAt;\\n            require(startingTimestamp > lastIntervalStartingTimestamp, \\\"Invalid interval starting timestamp\\\");\\n            lastIntervalStartingTimestamp = startingTimestamp;\\n            pool.intervals.push(interval);\\n            emit IntervalCreated(poolIndex, interval.startsAt, interval.unlockingPart.mantissa);\\n        }\\n        require(lastUnlockingPart.eq(1), \\\"Unlocking part not equal to one\\\");\\n        return (true, pool.index);\\n    }\\n\\n    function createLinearPool(\\n        Props memory props,\\n        uint256 paymentLimit,\\n        address owner_,\\n        AttoDecimal.Instance memory immediatelyUnlockingPart,\\n        uint256 linearUnlockingEndsAt\\n    ) external onlyOwner returns (bool success, uint256 poolIndex) {\\n        require(linearUnlockingEndsAt > props.endsAt, \\\"Linear unlocking less than or equal to pool ending timestamp\\\");\\n        Pool storage pool = _createSimplePool(props, paymentLimit, owner_, Type.LINEAR);\\n        _setImmediatelyUnlockingPart(pool, immediatelyUnlockingPart);\\n        pool.linear.endsAt = linearUnlockingEndsAt;\\n        pool.linear.duration = linearUnlockingEndsAt - props.endsAt;\\n        emit LinearUnlockingEndingTimestampUpdated(pool.index, linearUnlockingEndsAt);\\n        return (true, pool.index);\\n    }\\n\\n    function increaseIssuance(uint256 poolIndex, uint256 amount) external returns (bool success) {\\n        require(amount > 0, \\\"Amount is zero\\\");\\n        Pool storage pool = _getPool(poolIndex);\\n        require(getTimestamp() < pool.props.endsAt, \\\"Pool ended\\\");\\n        address caller = msg.sender;\\n        _assertPoolOwnership(pool, caller);\\n        pool.state.issuance = pool.state.issuance.add(amount);\\n        require(pool.state.issuance <= pool.props.issuanceLimit, \\\"Issuance limit exceeded\\\");\\n        pool.state.available = pool.state.available.add(amount);\\n        emit IssuanceIncreased(poolIndex, amount);\\n        pool.props.issuanceToken.safeTransferFrom(caller, address(this), amount);\\n        return true;\\n    }\\n\\n    function swap(uint256 poolIndex, uint256 requestedPaymentAmount)\\n        external\\n        nonReentrant\\n        returns (uint256 paymentAmount, uint256 issuanceAmount)\\n    {\\n        require(requestedPaymentAmount > 0, \\\"Requested payment amount is zero\\\");\\n        address caller = msg.sender;\\n        Pool storage pool = _getPool(poolIndex);\\n        uint256 timestamp = getTimestamp();\\n        require(timestamp >= pool.props.startsAt, \\\"Pool not started\\\");\\n        require(timestamp < pool.props.endsAt, \\\"Pool ended\\\");\\n        require(pool.state.available > 0, \\\"No available issuance\\\");\\n        (paymentAmount, issuanceAmount) = _calculateSwapAmounts(pool, requestedPaymentAmount, caller);\\n        Account storage account = pool.accounts[caller];\\n        if (paymentAmount > 0) {\\n            pool.state.lockedPayments = pool.state.lockedPayments.add(paymentAmount);\\n            account.state.paymentSum = account.state.paymentSum.add(paymentAmount);\\n            pool.props.paymentToken.safeTransferFrom(caller, address(this), paymentAmount);\\n        }\\n        if (issuanceAmount > 0) {\\n            if (pool.type_ == Type.SIMPLE) pool.props.issuanceToken.safeTransfer(caller, issuanceAmount);\\n            else {\\n                uint256 totalIssuanceAmount = account.complex.issuanceAmount.add(issuanceAmount);\\n                account.complex.issuanceAmount = totalIssuanceAmount;\\n                uint256 newWithdrawnIssuanceAmount = pool.immediatelyUnlockingPart.mul(totalIssuanceAmount).floor();\\n                uint256 issuanceToWithdraw = newWithdrawnIssuanceAmount - account.complex.withdrawnIssuanceAmount;\\n                account.complex.withdrawnIssuanceAmount = newWithdrawnIssuanceAmount;\\n                if (pool.type_ == Type.LINEAR) account.immediatelyUnlockedAmount = newWithdrawnIssuanceAmount;\\n                if (issuanceToWithdraw > 0) pool.props.issuanceToken.safeTransfer(caller, issuanceToWithdraw);\\n            }\\n            pool.state.available = pool.state.available.sub(issuanceAmount);\\n        }\\n        emit Swap(poolIndex, caller, requestedPaymentAmount, paymentAmount, issuanceAmount);\\n    }\\n\\n    function unlockInterval(uint256 poolIndex, uint256 intervalIndex)\\n        external\\n        returns (uint256 withdrawnIssuanceAmount)\\n    {\\n        address caller = msg.sender;\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolIsInterval(pool);\\n        require(intervalIndex < pool.intervals.length, \\\"Invalid interval index\\\");\\n        Interval storage interval = pool.intervals[intervalIndex];\\n        require(interval.startsAt <= getTimestamp(), \\\"Interval not started\\\");\\n        Account storage account = pool.accounts[caller];\\n        require(intervalIndex >= account.unlockedIntervalsCount, \\\"Already unlocked\\\");\\n        uint256 newWithdrawnIssuanceAmount = interval.unlockingPart.mul(account.complex.issuanceAmount).floor();\\n        uint256 issuanceToWithdraw = newWithdrawnIssuanceAmount - account.complex.withdrawnIssuanceAmount;\\n        account.complex.withdrawnIssuanceAmount = newWithdrawnIssuanceAmount;\\n        if (issuanceToWithdraw > 0) pool.props.issuanceToken.safeTransfer(caller, issuanceToWithdraw);\\n        account.unlockedIntervalsCount = intervalIndex.add(1);\\n        return issuanceToWithdraw;\\n    }\\n\\n    function unlockLinear(uint256 poolIndex) external returns (uint256 withdrawalAmount) {\\n        address caller = msg.sender;\\n        uint256 timestamp = getTimestamp();\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolIsLinear(pool);\\n        require(pool.props.endsAt < timestamp, \\\"Pool not ended\\\");\\n        Account storage account = pool.accounts[caller];\\n        uint256 issuanceAmount = account.complex.issuanceAmount;\\n        require(account.complex.withdrawnIssuanceAmount < issuanceAmount, \\\"All funds already unlocked\\\");\\n        uint256 passedTime = timestamp - pool.props.endsAt;\\n        uint256 freezedAmount = issuanceAmount.sub(account.immediatelyUnlockedAmount);\\n        uint256 unfreezedAmount = passedTime.mul(freezedAmount).div(pool.linear.duration);\\n        uint256 newWithdrawnIssuanceAmount = timestamp >= pool.linear.endsAt\\n            ? issuanceAmount\\n            : Math.min(account.immediatelyUnlockedAmount.add(unfreezedAmount), issuanceAmount);\\n        withdrawalAmount = newWithdrawnIssuanceAmount.sub(account.complex.withdrawnIssuanceAmount);\\n        if (withdrawalAmount > 0) {\\n            account.complex.withdrawnIssuanceAmount = newWithdrawnIssuanceAmount;\\n            emit LinearPoolUnlocking(pool.index, caller, withdrawalAmount);\\n            pool.props.issuanceToken.safeTransfer(caller, withdrawalAmount);\\n        }\\n    }\\n\\n    function createPaymentLimit(uint256 poolIndex, uint256 limit) external returns (uint256 limitIndex) {\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolOwnership(pool, msg.sender);\\n        limitIndex = pool.state.paymentLimits.length;\\n        pool.state.paymentLimits.push(limit);\\n        emit PaymentLimitCreated(poolIndex, limitIndex, limit);\\n    }\\n\\n    function changeLimit(\\n        uint256 poolIndex,\\n        uint256 limitIndex,\\n        uint256 newLimit\\n    ) external returns (bool success) {\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolOwnership(pool, msg.sender);\\n        _validateLimitIndex(pool, limitIndex);\\n        pool.state.paymentLimits[limitIndex] = newLimit;\\n        emit PaymentLimitChanged(poolIndex, limitIndex, newLimit);\\n        return true;\\n    }\\n\\n    function setAccountsLimit(\\n        uint256 poolIndex,\\n        uint256 limitIndex,\\n        address[] memory accounts\\n    ) external returns (bool succcess) {\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolOwnership(pool, msg.sender);\\n        _validateLimitIndex(pool, limitIndex);\\n        uint256 accountsCount = accounts.length;\\n        require(accountsCount > 0, \\\"No accounts provided\\\");\\n        for (uint256 i = 0; i < accountsCount; i++) {\\n            address account = accounts[i];\\n            Account storage poolAccount_ = pool.accounts[account];\\n            if (poolAccount_.state.limitIndex == limitIndex) continue;\\n            poolAccount_.state.limitIndex = limitIndex;\\n            emit AccountLimitChanged(poolIndex, account, limitIndex);\\n        }\\n        return true;\\n    }\\n\\n    function withdrawPayments(uint256 poolIndex) external returns (bool success) {\\n        Pool storage pool = _getPool(poolIndex);\\n        address caller = msg.sender;\\n        _assertPoolOwnership(pool, caller);\\n        _unlockPayments(pool);\\n        uint256 collectedPayments = pool.state.unlockedPayments;\\n        require(collectedPayments > 0, \\\"No collected payments\\\");\\n        pool.state.unlockedPayments = 0;\\n        emit PaymentsWithdrawn(poolIndex, collectedPayments);\\n        pool.props.paymentToken.safeTransfer(caller, collectedPayments);\\n        return true;\\n    }\\n\\n    function withdrawUnsold(uint256 poolIndex) external returns (bool success) {\\n        Pool storage pool = _getPool(poolIndex);\\n        address caller = msg.sender;\\n        _assertPoolOwnership(pool, caller);\\n        require(getTimestamp() >= pool.props.endsAt, \\\"Not ended\\\");\\n        uint256 amount = pool.state.available;\\n        require(amount > 0, \\\"No unsold\\\");\\n        pool.state.available = 0;\\n        emit UnsoldWithdrawn(poolIndex, amount);\\n        pool.props.issuanceToken.safeTransfer(caller, amount);\\n        return true;\\n    }\\n\\n    function collectFee(uint256 poolIndex) external onlyOwner returns (bool success) {\\n        _unlockPayments(_getPool(poolIndex));\\n        return true;\\n    }\\n\\n    function withdrawFee(IERC20 token) external onlyOwner returns (bool success) {\\n        uint256 collectedFee = _collectedFees[token];\\n        require(collectedFee > 0, \\\"No collected fees\\\");\\n        _collectedFees[token] = 0;\\n        emit FeeWithdrawn(address(token), collectedFee);\\n        token.safeTransfer(owner(), collectedFee);\\n        return true;\\n    }\\n\\n    function nominateNewPoolOwner(uint256 poolIndex, address nominatedOwner_) external returns (bool success) {\\n        Pool storage pool = _getPool(poolIndex);\\n        _assertPoolOwnership(pool, msg.sender);\\n        require(nominatedOwner_ != pool.state.owner, \\\"Already owner\\\");\\n        if (pool.state.nominatedOwner == nominatedOwner_) return true;\\n        pool.state.nominatedOwner = nominatedOwner_;\\n        emit PoolOwnerNominated(poolIndex, nominatedOwner_);\\n        return true;\\n    }\\n\\n    function acceptPoolOwnership(uint256 poolIndex) external returns (bool success) {\\n        Pool storage pool = _getPool(poolIndex);\\n        address caller = msg.sender;\\n        require(pool.state.nominatedOwner == caller, \\\"Not nominated to pool ownership\\\");\\n        pool.state.owner = caller;\\n        pool.state.nominatedOwner = address(0);\\n        emit PoolOwnerChanged(poolIndex, caller);\\n        return true;\\n    }\\n\\n    function _assertPoolIsInterval(Pool storage pool) private view {\\n        require(pool.type_ == Type.INTERVAL, \\\"Not interval pool\\\");\\n    }\\n\\n    function _assertPoolIsLinear(Pool storage pool) private view {\\n        require(pool.type_ == Type.LINEAR, \\\"Not linear pool\\\");\\n    }\\n\\n    function _assertPoolOwnership(Pool storage pool, address account) private view {\\n        require(account == pool.state.owner, \\\"Permission denied\\\");\\n    }\\n\\n    function _calculateSwapAmounts(\\n        Pool storage pool,\\n        uint256 requestedPaymentAmount,\\n        address account\\n    ) private view returns (uint256 paymentAmount, uint256 issuanceAmount) {\\n        paymentAmount = requestedPaymentAmount;\\n        Account storage poolAccount_ = pool.accounts[account];\\n        uint256 paymentLimit = pool.state.paymentLimits[poolAccount_.state.limitIndex];\\n        require(poolAccount_.state.paymentSum < paymentLimit, \\\"Account payment limit exceeded\\\");\\n        if (poolAccount_.state.paymentSum.add(paymentAmount) > paymentLimit) {\\n            paymentAmount = paymentLimit.sub(poolAccount_.state.paymentSum);\\n        }\\n        issuanceAmount = pool.props.rate.mul(paymentAmount).floor();\\n        if (issuanceAmount > pool.state.available) {\\n            issuanceAmount = pool.state.available;\\n            paymentAmount = AttoDecimal.div(issuanceAmount, pool.props.rate).ceil();\\n        }\\n    }\\n\\n    function _getPool(uint256 index) private view returns (Pool storage) {\\n        require(index < _pools.length, \\\"Pool not found\\\");\\n        return _pools[index];\\n    }\\n\\n    function _validateLimitIndex(Pool storage pool, uint256 limitIndex) private view {\\n        require(limitIndex < pool.state.paymentLimits.length, \\\"Limit not found\\\");\\n    }\\n\\n    function _createSimplePool(\\n        Props memory props,\\n        uint256 paymentLimit,\\n        address owner_,\\n        Type type_\\n    ) private returns (Pool storage) {\\n        {\\n            uint256 timestamp = getTimestamp();\\n            if (props.startsAt < timestamp) props.startsAt = timestamp;\\n            require(props.fee.lt(100), \\\"Fee gte 100%\\\");\\n            require(props.startsAt < props.endsAt, \\\"Invalid ending timestamp\\\");\\n        }\\n        uint256 poolIndex = _pools.length;\\n        _pools.push();\\n        Pool storage pool = _pools[poolIndex];\\n        pool.index = poolIndex;\\n        pool.type_ = type_;\\n        pool.props = props;\\n        pool.state.paymentLimits = new uint256[](1);\\n        pool.state.paymentLimits[0] = paymentLimit;\\n        pool.state.owner = owner_;\\n        emit PoolCreated(\\n            type_,\\n            props.paymentToken,\\n            props.issuanceToken,\\n            poolIndex,\\n            props.issuanceLimit,\\n            props.startsAt,\\n            props.endsAt,\\n            props.fee.mantissa,\\n            props.rate.mantissa,\\n            paymentLimit\\n        );\\n        emit PoolOwnerChanged(poolIndex, owner_);\\n        return pool;\\n    }\\n\\n    function _setImmediatelyUnlockingPart(Pool storage pool, AttoDecimal.Instance memory immediatelyUnlockingPart)\\n        private\\n    {\\n        require(immediatelyUnlockingPart.lt(1), \\\"Invalid immediately unlocking part value\\\");\\n        pool.immediatelyUnlockingPart = immediatelyUnlockingPart;\\n        emit ImmediatelyUnlockingPartUpdated(pool.index, immediatelyUnlockingPart.mantissa);\\n    }\\n\\n    function _unlockPayments(Pool storage pool) private {\\n        if (pool.state.lockedPayments == 0) return;\\n        uint256 fee = pool.props.fee.mul(pool.state.lockedPayments).ceil();\\n        _collectedFees[pool.props.paymentToken] = _collectedFees[pool.props.paymentToken].add(fee);\\n        uint256 unlockedAmount = pool.state.lockedPayments.sub(fee);\\n        pool.state.unlockedPayments = pool.state.unlockedPayments.add(unlockedAmount);\\n        pool.state.lockedPayments = 0;\\n        emit PaymentUnlocked(pool.index, unlockedAmount, fee);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"solowei/contracts/AttoDecimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nlibrary AttoDecimal {\\n    using SafeMath for uint256;\\n\\n    struct Instance {\\n        uint256 mantissa;\\n    }\\n\\n    uint256 internal constant BASE = 10;\\n    uint256 internal constant EXPONENTIATION = 18;\\n    uint256 internal constant ONE_MANTISSA = BASE**EXPONENTIATION;\\n    uint256 internal constant ONE_TENTH_MANTISSA = ONE_MANTISSA / 10;\\n    uint256 internal constant HALF_MANTISSA = ONE_MANTISSA / 2;\\n    uint256 internal constant SQUARED_ONE_MANTISSA = ONE_MANTISSA * ONE_MANTISSA;\\n    uint256 internal constant MAX_INTEGER = uint256(-1) / ONE_MANTISSA;\\n\\n    function maximum() internal pure returns (Instance memory) {\\n        return Instance({mantissa: uint256(-1)});\\n    }\\n\\n    function zero() internal pure returns (Instance memory) {\\n        return Instance({mantissa: 0});\\n    }\\n\\n    function one() internal pure returns (Instance memory) {\\n        return Instance({mantissa: ONE_MANTISSA});\\n    }\\n\\n    function convert(uint256 integer) internal pure returns (Instance memory) {\\n        return Instance({mantissa: integer.mul(ONE_MANTISSA)});\\n    }\\n\\n    function compare(Instance memory a, Instance memory b) internal pure returns (int8) {\\n        if (a.mantissa < b.mantissa) return -1;\\n        return int8(a.mantissa > b.mantissa ? 1 : 0);\\n    }\\n\\n    function compare(Instance memory a, uint256 b) internal pure returns (int8) {\\n        return compare(a, convert(b));\\n    }\\n\\n    function add(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.add(b.mantissa)});\\n    }\\n\\n    function add(Instance memory a, uint256 b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.add(b.mul(ONE_MANTISSA))});\\n    }\\n\\n    function sub(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.sub(b.mantissa)});\\n    }\\n\\n    function sub(Instance memory a, uint256 b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.sub(b.mul(ONE_MANTISSA))});\\n    }\\n\\n    function sub(uint256 a, Instance memory b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mul(ONE_MANTISSA).sub(b.mantissa)});\\n    }\\n\\n    function mul(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.mul(b.mantissa) / ONE_MANTISSA});\\n    }\\n\\n    function mul(Instance memory a, uint256 b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.mul(b)});\\n    }\\n\\n    function div(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.mul(ONE_MANTISSA).div(b.mantissa)});\\n    }\\n\\n    function div(Instance memory a, uint256 b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.mul(ONE_MANTISSA).div(b)});\\n    }\\n\\n    function div(uint256 a, Instance memory b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mul(SQUARED_ONE_MANTISSA).div(b.mantissa)});\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mul(ONE_MANTISSA).div(b)});\\n    }\\n\\n    function idiv(Instance memory a, Instance memory b) internal pure returns (uint256) {\\n        return a.mantissa.div(b.mantissa);\\n    }\\n\\n    function idiv(Instance memory a, uint256 b) internal pure returns (uint256) {\\n        return a.mantissa.div(b.mul(ONE_MANTISSA));\\n    }\\n\\n    function idiv(uint256 a, Instance memory b) internal pure returns (uint256) {\\n        return a.mul(ONE_MANTISSA).div(b.mantissa);\\n    }\\n\\n    function mod(Instance memory a, Instance memory b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.mod(b.mantissa)});\\n    }\\n\\n    function mod(Instance memory a, uint256 b) internal pure returns (Instance memory) {\\n        return Instance({mantissa: a.mantissa.mod(b.mul(ONE_MANTISSA))});\\n    }\\n\\n    function mod(uint256 a, Instance memory b) internal pure returns (Instance memory) {\\n        if (a > MAX_INTEGER) return Instance({mantissa: a.mod(b.mantissa).mul(ONE_MANTISSA) % b.mantissa});\\n        return Instance({mantissa: a.mul(ONE_MANTISSA).mod(b.mantissa)});\\n    }\\n\\n    function floor(Instance memory a) internal pure returns (uint256) {\\n        return a.mantissa / ONE_MANTISSA;\\n    }\\n\\n    function ceil(Instance memory a) internal pure returns (uint256) {\\n        return (a.mantissa / ONE_MANTISSA) + (a.mantissa % ONE_MANTISSA > 0 ? 1 : 0);\\n    }\\n\\n    function round(Instance memory a) internal pure returns (uint256) {\\n        return (a.mantissa / ONE_MANTISSA) + ((a.mantissa / ONE_TENTH_MANTISSA) % 10 >= 5 ? 1 : 0);\\n    }\\n\\n    function eq(Instance memory a, Instance memory b) internal pure returns (bool) {\\n        return a.mantissa == b.mantissa;\\n    }\\n\\n    function eq(Instance memory a, uint256 b) internal pure returns (bool) {\\n        if (b > MAX_INTEGER) return false;\\n        return a.mantissa == b * ONE_MANTISSA;\\n    }\\n\\n    function gt(Instance memory a, Instance memory b) internal pure returns (bool) {\\n        return a.mantissa > b.mantissa;\\n    }\\n\\n    function gt(Instance memory a, uint256 b) internal pure returns (bool) {\\n        if (b > MAX_INTEGER) return false;\\n        return a.mantissa > b * ONE_MANTISSA;\\n    }\\n\\n    function gte(Instance memory a, Instance memory b) internal pure returns (bool) {\\n        return a.mantissa >= b.mantissa;\\n    }\\n\\n    function gte(Instance memory a, uint256 b) internal pure returns (bool) {\\n        if (b > MAX_INTEGER) return false;\\n        return a.mantissa >= b * ONE_MANTISSA;\\n    }\\n\\n    function lt(Instance memory a, Instance memory b) internal pure returns (bool) {\\n        return a.mantissa < b.mantissa;\\n    }\\n\\n    function lt(Instance memory a, uint256 b) internal pure returns (bool) {\\n        if (b > MAX_INTEGER) return true;\\n        return a.mantissa < b * ONE_MANTISSA;\\n    }\\n\\n    function lte(Instance memory a, Instance memory b) internal pure returns (bool) {\\n        return a.mantissa <= b.mantissa;\\n    }\\n\\n    function lte(Instance memory a, uint256 b) internal pure returns (bool) {\\n        if (b > MAX_INTEGER) return true;\\n        return a.mantissa <= b * ONE_MANTISSA;\\n    }\\n\\n    function isInteger(Instance memory a) internal pure returns (bool) {\\n        return a.mantissa % ONE_MANTISSA == 0;\\n    }\\n\\n    function isPositive(Instance memory a) internal pure returns (bool) {\\n        return a.mantissa > 0;\\n    }\\n\\n    function isZero(Instance memory a) internal pure returns (bool) {\\n        return a.mantissa == 0;\\n    }\\n\\n    function sum(Instance[] memory array) internal pure returns (Instance memory result) {\\n        uint256 length = array.length;\\n        for (uint256 index = 0; index < length; index++) result = add(result, array[index]);\\n    }\\n\\n    function toTuple(Instance memory a)\\n        internal\\n        pure\\n        returns (\\n            uint256 mantissa,\\n            uint256 base,\\n            uint256 exponentiation\\n        )\\n    {\\n        return (a.mantissa, BASE, EXPONENTIATION);\\n    }\\n}\\n\"\r\n    },\r\n    \"solowei/contracts/TwoStageOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract TwoStageOwnable {\\n    address private _nominatedOwner;\\n    address private _owner;\\n\\n    function nominatedOwner() public view returns (address) {\\n        return _nominatedOwner;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    event OwnerChanged(address indexed newOwner);\\n    event OwnerNominated(address indexed nominatedOwner);\\n\\n    constructor(address owner_) internal {\\n        require(owner_ != address(0), \\\"Owner is zero\\\");\\n        _setOwner(owner_);\\n    }\\n\\n    function acceptOwnership() external returns (bool success) {\\n        require(msg.sender == _nominatedOwner, \\\"Not nominated to ownership\\\");\\n        _setOwner(_nominatedOwner);\\n        return true;\\n    }\\n\\n    function nominateNewOwner(address owner_) external onlyOwner returns (bool success) {\\n        _nominateNewOwner(owner_);\\n        return true;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == _owner, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    function _nominateNewOwner(address owner_) internal {\\n        if (_nominatedOwner == owner_) return;\\n        require(_owner != owner_, \\\"Already owner\\\");\\n        _nominatedOwner = owner_;\\n        emit OwnerNominated(owner_);\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        if (_owner == newOwner) return;\\n        _owner = newOwner;\\n        _nominatedOwner = address(0);\\n        emit OwnerChanged(newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"}],\"name\":\"AccountLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"name\":\"ImmediatelyUnlockingPartUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockingPart\",\"type\":\"uint256\"}],\"name\":\"IntervalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IssuanceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LinearPoolUnlocking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LinearUnlockingEndingTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"PaymentLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"PaymentLimitCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedFee\",\"type\":\"uint256\"}],\"name\":\"PaymentUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum FixedSwap.Type\",\"name\":\"type_\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"issuanceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuanceLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentLimit\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"PoolOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"}],\"name\":\"PoolOwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedPaymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuanceAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnsoldWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"acceptPoolOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"collectFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"issuanceToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"fee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"rate\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedSwap.Props\",\"name\":\"props\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"paymentLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"immediatelyUnlockingPart\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"unlockingPart\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedSwap.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"}],\"name\":\"createIntervalPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"issuanceToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"fee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"rate\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedSwap.Props\",\"name\":\"props\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"paymentLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"immediatelyUnlockingPart\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"linearUnlockingEndsAt\",\"type\":\"uint256\"}],\"name\":\"createLinearPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"createPaymentLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"issuanceToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"fee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"rate\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedSwap.Props\",\"name\":\"props\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"paymentLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"createSimplePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseIssuance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"intervalPoolAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentSum\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedSwap.AccountState\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnIssuanceAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedSwap.ComplexAccountState\",\"name\":\"complex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"unlockedIntervalsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"intervalPoolProps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"issuanceToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"fee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"rate\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedSwap.Props\",\"name\":\"props\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"immediatelyUnlockingPart\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"unlockingPart\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedSwap.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"linearPoolAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentSum\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedSwap.AccountState\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnIssuanceAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedSwap.ComplexAccountState\",\"name\":\"complex\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"immediatelyUnlockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"linearPoolProps\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"issuanceToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"fee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"rate\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedSwap.Props\",\"name\":\"props\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"immediatelyUnlockingPart\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedSwap.LinearProps\",\"name\":\"linear\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nominatedOwner_\",\"type\":\"address\"}],\"name\":\"nominateNewPoolOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"poolAccount\",\"outputs\":[{\"internalType\":\"enum FixedSwap.Type\",\"name\":\"type_\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentSum\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedSwap.AccountState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"poolProps\",\"outputs\":[{\"internalType\":\"enum FixedSwap.Type\",\"name\":\"type_\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"issuanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"issuanceToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"fee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AttoDecimal.Instance\",\"name\":\"rate\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedSwap.Props\",\"name\":\"props\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"poolState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedPayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedPayments\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentLimits\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FixedSwap.State\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"setAccountsLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succcess\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedPaymentAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuanceAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intervalIndex\",\"type\":\"uint256\"}],\"name\":\"unlockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnIssuanceAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"unlockLinear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawPayments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawUnsold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FixedSwap", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000021ddf70bfb842e9eed59df7af411fc602d7eed4b", "EVMVersion": "constantinople", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}