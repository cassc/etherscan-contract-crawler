{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/Allo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// External Libraries\\nimport \\\"solady/src/auth/Ownable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\n// Interfaces\\nimport \\\"./interfaces/IAllo.sol\\\";\\n\\n// Internal Libraries\\nimport {Clone} from \\\"./libraries/Clone.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/Native.sol\\\";\\nimport {Transfer} from \\\"./libraries/Transfer.sol\\\";\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Allo\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice This contract is used to create & manage pools as well as manage the protocol.\\n/// @dev The contract must be initialized with the 'initialize()' function.\\ncontract Allo is\\n    IAllo,\\n    Native,\\n    Transfer,\\n    Initializable,\\n    Ownable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    Errors\\n{\\n    // ==========================\\n    // === Storage Variables ====\\n    // ==========================\\n\\n    /// @notice Percentage that is used to calculate the fee Allo takes from each pool when funded\\n    ///         and is deducted when a pool is funded. So if you want to fund a round with 1000 DAI and the fee\\n    ///         percentage is 1e17 (10%), then 100 DAI will be deducted from the 1000 DAI and the pool will be\\n    ///         funded with 900 DAI. The fee is then sent to the treasury address.\\n    /// @dev How the percentage is represented in our contracts: 1e18 = 100%, 1e17 = 10%, 1e16 = 1%, 1e15 = 0.1%\\n    uint256 private percentFee;\\n\\n    /// @notice Fee Allo charges for all pools on creation\\n    /// @dev This is different from the 'percentFee' in that this is a flat fee and not a percentage. So if you want to create a pool\\n    ///      with a base fee of 100 DAI, then you would pass 100 DAI to the 'createPool()' function and the pool would be created\\n    ///      with 100 DAI less than the amount you passed to the function. The base fee is sent to the treasury address.\\n    uint256 internal baseFee;\\n\\n    /// @notice Incremental index to track the pools created\\n    uint256 private _poolIndex;\\n\\n    /// @notice Allo treasury\\n    address payable private treasury;\\n\\n    /// @notice Registry contract\\n    IRegistry private registry;\\n\\n    /// @notice Maps the `msg.sender` to a `nonce` to prevent duplicates\\n    /// @dev 'msg.sender' -> 'nonce' for cloning strategies\\n    mapping(address => uint256) private _nonces;\\n\\n    /// @notice Maps the pool ID to the pool details\\n    /// @dev 'Pool.id' -> 'Pool'\\n    mapping(uint256 => Pool) private pools;\\n\\n    /// @notice Returns a bool for whether a strategy is cloneable or not using the strategy address as the key\\n    /// @dev Strategy.address -> bool\\n    mapping(address => bool) private cloneableStrategies;\\n\\n    // ====================================\\n    // =========== Initializer =============\\n    // ====================================\\n\\n    /// @notice Initializes the contract after an upgrade\\n    /// @dev During upgrade -> a higher version should be passed to reinitializer\\n    /// @param _owner The owner of allo\\n    /// @param _registry The address of the registry\\n    /// @param _treasury The address of the treasury\\n    /// @param _percentFee The percentage fee\\n    /// @param _baseFee The base fee\\n    function initialize(\\n        address _owner,\\n        address _registry,\\n        address payable _treasury,\\n        uint256 _percentFee,\\n        uint256 _baseFee\\n    ) external reinitializer(1) {\\n        // Initialize the owner using Solady ownable library\\n        _initializeOwner(_owner);\\n\\n        // Set the address of the registry\\n        _updateRegistry(_registry);\\n\\n        // Set the address of the treasury\\n        _updateTreasury(_treasury);\\n\\n        // Set the fee percentage\\n        _updatePercentFee(_percentFee);\\n\\n        // Set the base fee\\n        _updateBaseFee(_baseFee);\\n    }\\n\\n    // ====================================\\n    // =========== Modifier ===============\\n    // ====================================\\n\\n    // Both modifiers below are using OpenZeppelin's AccessControl.sol with custom roles under the hood\\n\\n    /// @notice Reverts UNAUTHORIZED() if the caller is not a pool manager\\n    /// @param _poolId The pool id\\n    modifier onlyPoolManager(uint256 _poolId) {\\n        _checkOnlyPoolManager(_poolId);\\n        _;\\n    }\\n\\n    /// @notice Reverts UNAUTHORIZED() if the caller is not a pool admin\\n    /// @param _poolId The pool id\\n    modifier onlyPoolAdmin(uint256 _poolId) {\\n        _checkOnlyPoolAdmin(_poolId);\\n        _;\\n    }\\n\\n    //  ====================================\\n    //  ==== External/Public Functions =====\\n    //  ====================================\\n\\n    /// @notice Creates a new pool (with a custom strategy)\\n    /// @dev 'msg.sender' must be a member or owner of a profile to create a pool with or without a custom strategy, The encoded data\\n    ///      will be specific to a given strategy requirements, reference the strategy implementation of 'initialize()'. The strategy\\n    ///      address passed must not be a cloneable strategy. The strategy address passed must not be the zero address. 'msg.sender' must\\n    ///      be a member or owner of the profile id passed as '_profileId'.\\n    /// @param _profileId The 'profileId' of the registry profile, used to check if 'msg.sender' is a member or owner of the profile\\n    /// @param _strategy The address of the deployed custom strategy\\n    /// @param _initStrategyData The data to initialize the strategy\\n    /// @param _token The address of the token you want to use in your pool\\n    /// @param _amount The amount of the token you want to deposit into the pool on initialization\\n    /// @param _metadata The 'Metadata' of the pool, this uses our 'Meatdata.sol' struct (consistent throughout the protocol)\\n    /// @param _managers The managers of the pool, and can be added/removed later by the pool admin\\n    /// @return poolId The ID of the pool\\n    function createPoolWithCustomStrategy(\\n        bytes32 _profileId,\\n        address _strategy,\\n        bytes memory _initStrategyData,\\n        address _token,\\n        uint256 _amount,\\n        Metadata memory _metadata,\\n        address[] memory _managers\\n    ) external payable returns (uint256 poolId) {\\n        // Revert if the strategy address passed is the zero address with 'ZERO_ADDRESS()'\\n        if (_strategy == address(0)) revert ZERO_ADDRESS();\\n\\n        // Revert if we already have this strategy in our cloneable mapping with 'IS_APPROVED_STRATEGY()' (only non-cloneable strategies can be used)\\n        if (_isCloneableStrategy(_strategy)) revert IS_APPROVED_STRATEGY();\\n\\n        // Call the internal '_createPool()' function and return the pool ID\\n        return _createPool(_profileId, IStrategy(_strategy), _initStrategyData, _token, _amount, _metadata, _managers);\\n    }\\n\\n    /// @notice Creates a new pool (by cloning a cloneable strategies).\\n    /// @dev 'msg.sender' must be owner or member of the profile id passed as '_profileId'.\\n    /// @param _profileId The ID of the registry profile, used to check if 'msg.sender' is a member or owner of the profile\\n    /// @param _strategy The address of the strategy contract the pool will use.\\n    /// @param _initStrategyData The data to initialize the strategy\\n    /// @param _token The address of the token\\n    /// @param _amount The amount of the token\\n    /// @param _metadata The metadata of the pool\\n    /// @param _managers The managers of the pool\\n    /// @custom:initstrategydata The encoded data will be specific to a given strategy requirements,\\n    ///    reference the strategy implementation of 'initialize()'\\n    function createPool(\\n        bytes32 _profileId,\\n        address _strategy,\\n        bytes memory _initStrategyData,\\n        address _token,\\n        uint256 _amount,\\n        Metadata memory _metadata,\\n        address[] memory _managers\\n    ) external payable nonReentrant returns (uint256 poolId) {\\n        if (!_isCloneableStrategy(_strategy)) {\\n            revert NOT_APPROVED_STRATEGY();\\n        }\\n\\n        // Returns the created pool ID\\n        return _createPool(\\n            _profileId,\\n            IStrategy(Clone.createClone(_strategy, _nonces[msg.sender]++)),\\n            _initStrategyData,\\n            _token,\\n            _amount,\\n            _metadata,\\n            _managers\\n        );\\n    }\\n\\n    /// @notice Update pool metadata\\n    /// @dev 'msg.sender' must be a pool manager. Emits 'PoolMetadataUpdated()' event.\\n    /// @param _poolId ID of the pool\\n    /// @param _metadata The new metadata of the pool\\n    function updatePoolMetadata(uint256 _poolId, Metadata memory _metadata) external onlyPoolManager(_poolId) {\\n        Pool storage pool = pools[_poolId];\\n        pool.metadata = _metadata;\\n\\n        emit PoolMetadataUpdated(_poolId, _metadata);\\n    }\\n\\n    /// @notice Updates the registry address.\\n    /// @dev Use this to update the registry address. 'msg.sender' must be Allo owner.\\n    /// @param _registry The new registry address\\n    function updateRegistry(address _registry) external onlyOwner {\\n        _updateRegistry(_registry);\\n    }\\n\\n    /// @notice Updates the treasury address.\\n    /// @dev Use this to update the treasury address. 'msg.sender' must be Allo owner.\\n    /// @param _treasury The new treasury address\\n    function updateTreasury(address payable _treasury) external onlyOwner {\\n        _updateTreasury(_treasury);\\n    }\\n\\n    /// @notice Updates the fee percentage.\\n    /// @dev Use this to update the fee percentage. 'msg.sender' must be Allo owner.\\n    /// @param _percentFee The new fee\\n    function updatePercentFee(uint256 _percentFee) external onlyOwner {\\n        _updatePercentFee(_percentFee);\\n    }\\n\\n    /// @notice Updates the base fee.\\n    /// @dev Use this to update the base fee. 'msg.sender' must be Allo owner.\\n    /// @param _baseFee The new base fee\\n    function updateBaseFee(uint256 _baseFee) external onlyOwner {\\n        _updateBaseFee(_baseFee);\\n    }\\n\\n    /// @notice Add a strategy to the allowlist.\\n    /// @dev Emits the 'StrategyApproved()' event. 'msg.sender' must be Allo owner.\\n    /// @param _strategy The address of the strategy\\n    function addToCloneableStrategies(address _strategy) external onlyOwner {\\n        if (_strategy == address(0)) revert ZERO_ADDRESS();\\n\\n        cloneableStrategies[_strategy] = true;\\n        emit StrategyApproved(_strategy);\\n    }\\n\\n    /// @notice Remove a strategy from the allowlist\\n    /// @dev Emits 'StrategyRemoved()' event. 'msg.sender must be Allo owner.\\n    /// @param _strategy The address of the strategy\\n    function removeFromCloneableStrategies(address _strategy) external onlyOwner {\\n        // Set the strategy to false in the cloneableStrategies mapping\\n        cloneableStrategies[_strategy] = false;\\n\\n        // Emit the StrategyRemoved event\\n        emit StrategyRemoved(_strategy);\\n    }\\n\\n    /// @notice Add a pool manager\\n    /// @dev Emits 'RoleGranted()' event. 'msg.sender' must be a pool admin.\\n    /// @param _poolId ID of the pool\\n    /// @param _manager The address to add\\n    function addPoolManager(uint256 _poolId, address _manager) external onlyPoolAdmin(_poolId) {\\n        // Reverts if the address is the zero address with 'ZERO_ADDRESS()'\\n        if (_manager == address(0)) revert ZERO_ADDRESS();\\n\\n        // Grants the pool manager role to the '_manager' address\\n        _grantRole(pools[_poolId].managerRole, _manager);\\n    }\\n\\n    /// @notice Remove a pool manager\\n    /// @dev Emits 'RoleRevoked()' event. 'msg.sender' must be a pool admin.\\n    /// @param _poolId ID of the pool\\n    /// @param _manager The address to remove\\n    function removePoolManager(uint256 _poolId, address _manager) external onlyPoolAdmin(_poolId) {\\n        _revokeRole(pools[_poolId].managerRole, _manager);\\n    }\\n\\n    /// @notice Transfer the funds recovered  to the recipient\\n    /// @dev 'msg.sender' must be Allo owner\\n    /// @param _token The token to transfer\\n    /// @param _recipient The recipient\\n    function recoverFunds(address _token, address _recipient) external onlyOwner {\\n        // Get the amount of the token to transfer, which is always the entire balance of the contract address\\n        uint256 amount = _token == NATIVE ? address(this).balance : IERC20Upgradeable(_token).balanceOf(address(this));\\n\\n        // Transfer the amount to the recipient (pool owner)\\n        _transferAmount(_token, _recipient, amount);\\n    }\\n\\n    // ====================================\\n    // ======= Strategy Functions =========\\n    // ====================================\\n\\n    /// @notice Passes _data through to the strategy for that pool.\\n    /// @dev The encoded data will be specific to a given strategy requirements, reference the strategy\\n    ///      implementation of registerRecipient().\\n    /// @param _poolId ID of the pool\\n    /// @param _data Encoded data unique to a strategy that registerRecipient() requires\\n    /// @return recipientId The recipient ID that has been registered\\n    function registerRecipient(uint256 _poolId, bytes memory _data) external payable nonReentrant returns (address) {\\n        // Return the recipientId (address) from the strategy\\n        return pools[_poolId].strategy.registerRecipient{value: msg.value}(_data, msg.sender);\\n    }\\n\\n    /// @notice Register multiple recipients to multiple pools.\\n    /// @dev Returns the 'recipientIds' from the strategy that have been registered from calling this function.\\n    ///      Encoded data unique to a strategy that registerRecipient() requires. Encoded '_data' length must match\\n    ///      '_poolIds' length or this will revert with MISMATCH(). Other requirements will be determined by the strategy.\\n    /// @param _poolIds ID's of the pools\\n    /// @param _data An array of encoded data unique to a strategy that registerRecipient() requires.\\n    /// @return recipientIds The recipient IDs that have been registered\\n    function batchRegisterRecipient(uint256[] memory _poolIds, bytes[] memory _data)\\n        external\\n        nonReentrant\\n        returns (address[] memory recipientIds)\\n    {\\n        uint256 poolIdLength = _poolIds.length;\\n        recipientIds = new address[](poolIdLength);\\n\\n        if (poolIdLength != _data.length) revert MISMATCH();\\n\\n        // Loop through the '_poolIds' & '_data' and call the 'strategy.registerRecipient()' function\\n        for (uint256 i; i < poolIdLength;) {\\n            recipientIds[i] = pools[_poolIds[i]].strategy.registerRecipient(_data[i], msg.sender);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Return the recipientIds that have been registered\\n        return recipientIds;\\n    }\\n\\n    /// @notice Fund a pool.\\n    /// @dev Anyone can fund a pool and call this function.\\n    /// @param _poolId ID of the pool\\n    /// @param _amount The amount to be deposited into the pool\\n    function fundPool(uint256 _poolId, uint256 _amount) external payable nonReentrant {\\n        // if amount is 0, revert with 'NOT_ENOUGH_FUNDS()' error\\n        if (_amount == 0) revert NOT_ENOUGH_FUNDS();\\n\\n        Pool memory pool = pools[_poolId];\\n        if (pool.token == NATIVE && _amount != msg.value) revert NOT_ENOUGH_FUNDS();\\n\\n        // Call the internal fundPool() function\\n        _fundPool(_amount, _poolId, pool.strategy);\\n    }\\n\\n    /// @notice Allocate to a recipient or multiple recipients.\\n    /// @dev The encoded data will be specific to a given strategy requirements, reference the strategy\\n    ///      implementation of allocate().\\n    /// @param _poolId ID of the pool\\n    /// @param _data Encoded data unique to the strategy for that pool\\n    function allocate(uint256 _poolId, bytes memory _data) external payable nonReentrant {\\n        _allocate(_poolId, _data);\\n    }\\n\\n    /// @notice Allocate to multiple pools\\n    /// @dev The encoded data will be specific to a given strategy requirements, reference the strategy\\n    ///      implementation of allocate(). Please note that this is not a 'payable' function, so if you\\n    ///      want to send funds to the strategy, you must send the funds using 'fundPool()'.\\n    /// @param _poolIds IDs of the pools\\n    /// @param _datas encoded data unique to the strategy for that pool\\n    function batchAllocate(uint256[] calldata _poolIds, bytes[] memory _datas) external nonReentrant {\\n        uint256 numPools = _poolIds.length;\\n\\n        // Reverts if the length of _poolIds does not match the length of _datas with 'MISMATCH()' error\\n        if (numPools != _datas.length) revert MISMATCH();\\n\\n        // Loop through the _poolIds & _datas and call the internal _allocate() function\\n        for (uint256 i; i < numPools;) {\\n            _allocate(_poolIds[i], _datas[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Distribute to a recipient or multiple recipients.\\n    /// @dev The encoded data will be specific to a given strategy requirements, reference the strategy\\n    ///      implementation of 'strategy.distribute()'.\\n    /// @param _poolId ID of the pool\\n    /// @param _recipientIds Ids of the recipients of the distribution\\n    /// @param _data Encoded data unique to the strategy\\n    function distribute(uint256 _poolId, address[] memory _recipientIds, bytes memory _data) external nonReentrant {\\n        pools[_poolId].strategy.distribute(_recipientIds, _data, msg.sender);\\n    }\\n\\n    /// ====================================\\n    /// ======= Internal Functions =========\\n    /// ====================================\\n\\n    /// @notice Internal function to check is caller is pool manager\\n    /// @param _poolId The pool id\\n    function _checkOnlyPoolManager(uint256 _poolId) internal view {\\n        if (!_isPoolManager(_poolId, msg.sender)) revert UNAUTHORIZED();\\n    }\\n\\n    /// @notice Internal function to check is caller is pool admin\\n    /// @param _poolId The pool id\\n    function _checkOnlyPoolAdmin(uint256 _poolId) internal view {\\n        if (!_isPoolAdmin(_poolId, msg.sender)) revert UNAUTHORIZED();\\n    }\\n\\n    /// @notice Creates a new pool.\\n    /// @dev This is an internal function that is called by the 'createPool()' & 'createPoolWithCustomStrategy()' functions\\n    ///      It is used to create a new pool and is called by both functions. The 'msg.sender' must be a member or owner of\\n    ///      a profile to create a pool.\\n    /// @param _profileId The ID of the profile of for pool creator in the registry\\n    /// @param _strategy The address of strategy\\n    /// @param _initStrategyData The data to initialize the strategy\\n    /// @param _token The address of the token that the pool is denominated in\\n    /// @param _amount The amount of the token to be deposited into the pool\\n    /// @param _metadata The 'Metadata' of the pool\\n    /// @param _managers The managers of the pool\\n    /// @return poolId The ID of the pool\\n    function _createPool(\\n        bytes32 _profileId,\\n        IStrategy _strategy,\\n        bytes memory _initStrategyData,\\n        address _token,\\n        uint256 _amount,\\n        Metadata memory _metadata,\\n        address[] memory _managers\\n    ) internal returns (uint256 poolId) {\\n        if (!registry.isOwnerOrMemberOfProfile(_profileId, msg.sender)) revert UNAUTHORIZED();\\n\\n        poolId = ++_poolIndex;\\n\\n        // Generate the manager & admin roles for the pool (this is the way we do this throughout the protocol for consistency)\\n        bytes32 POOL_MANAGER_ROLE = bytes32(poolId);\\n        bytes32 POOL_ADMIN_ROLE = keccak256(abi.encodePacked(poolId, \\\"admin\\\"));\\n\\n        // Create the Pool instance\\n        Pool memory pool = Pool({\\n            profileId: _profileId,\\n            strategy: _strategy,\\n            metadata: _metadata,\\n            token: _token,\\n            managerRole: POOL_MANAGER_ROLE,\\n            adminRole: POOL_ADMIN_ROLE\\n        });\\n\\n        // Add the pool to the mapping of created pools\\n        pools[poolId] = pool;\\n\\n        // Grant admin roles to the pool creator\\n        _grantRole(POOL_ADMIN_ROLE, msg.sender);\\n\\n        // Set admin role for POOL_MANAGER_ROLE\\n        _setRoleAdmin(POOL_MANAGER_ROLE, POOL_ADMIN_ROLE);\\n\\n        // initialize strategies\\n        // Initialization is expected to revert when invoked more than once with 'ALREADY_INITIALIZED()' error\\n        _strategy.initialize(poolId, _initStrategyData);\\n\\n        if (_strategy.getPoolId() != poolId || address(_strategy.getAllo()) != address(this)) revert MISMATCH();\\n\\n        // grant pool managers roles\\n        uint256 managersLength = _managers.length;\\n        for (uint256 i; i < managersLength;) {\\n            address manager = _managers[i];\\n            if (manager == address(0)) revert ZERO_ADDRESS();\\n\\n            _grantRole(POOL_MANAGER_ROLE, manager);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (baseFee > 0) {\\n            // To prevent paying the baseFee from the Allo contract's balance\\n            // If _token is NATIVE, then baseFee + _amount should be > than msg.value.\\n            // If _token is not NATIVE, then baseFee should be > than msg.value.\\n            if ((_token == NATIVE && (baseFee + _amount != msg.value)) || (_token != NATIVE && baseFee != msg.value)) {\\n                revert NOT_ENOUGH_FUNDS();\\n            }\\n            _transferAmount(NATIVE, treasury, baseFee);\\n            emit BaseFeePaid(poolId, baseFee);\\n        }\\n\\n        if (_amount > 0) {\\n            _fundPool(_amount, poolId, _strategy);\\n        }\\n\\n        emit PoolCreated(poolId, _profileId, _strategy, _token, _amount, _metadata);\\n    }\\n\\n    /// @notice Allocate to recipient(s).\\n    /// @dev Passes '_data' & 'msg.sender' through to the strategy for that pool.\\n    ///      This is an internal function that is called by the 'allocate()' & 'batchAllocate()' functions.\\n    /// @param _poolId ID of the pool\\n    /// @param _data Encoded data unique to the strategy for that pool\\n    function _allocate(uint256 _poolId, bytes memory _data) internal {\\n        pools[_poolId].strategy.allocate{value: msg.value}(_data, msg.sender);\\n    }\\n\\n    /// @notice Fund a pool.\\n    /// @dev Deducts the fee and transfers the amount to the distribution strategy.\\n    ///      Emits a 'PoolFunded' event.\\n    /// @param _amount The amount to transfer\\n    /// @param _poolId The 'poolId' for the pool you are funding\\n    /// @param _strategy The address of the strategy\\n    function _fundPool(uint256 _amount, uint256 _poolId, IStrategy _strategy) internal {\\n        uint256 feeAmount;\\n        uint256 amountAfterFee = _amount;\\n\\n        Pool storage pool = pools[_poolId];\\n        address _token = pool.token;\\n\\n        if (percentFee > 0) {\\n            feeAmount = (_amount * percentFee) / getFeeDenominator();\\n            amountAfterFee -= feeAmount;\\n\\n            if (feeAmount + amountAfterFee != _amount) revert INVALID();\\n\\n            if (_token == NATIVE) {\\n                _transferAmountFrom(_token, TransferData({from: msg.sender, to: treasury, amount: feeAmount}));\\n            } else {\\n                uint256 balanceBeforeFee = _getBalance(_token, treasury);\\n                _transferAmountFrom(_token, TransferData({from: msg.sender, to: treasury, amount: feeAmount}));\\n                uint256 balanceAfterFee = _getBalance(_token, treasury);\\n                // Track actual fee paid to account for fee on ERC20 token transfers\\n                feeAmount = balanceAfterFee - balanceBeforeFee;\\n            }\\n        }\\n\\n        if (_token == NATIVE) {\\n            _transferAmountFrom(\\n                _token, TransferData({from: msg.sender, to: address(_strategy), amount: amountAfterFee})\\n            );\\n        } else {\\n            uint256 balanceBeforeFundingPool = _getBalance(_token, address(_strategy));\\n            _transferAmountFrom(\\n                _token, TransferData({from: msg.sender, to: address(_strategy), amount: amountAfterFee})\\n            );\\n            uint256 balanceAfterFundingPool = _getBalance(_token, address(_strategy));\\n            // Track actual fee paid to account for fee on ERC20 token transfers\\n            amountAfterFee = balanceAfterFundingPool - balanceBeforeFundingPool;\\n        }\\n\\n        _strategy.increasePoolAmount(amountAfterFee);\\n\\n        emit PoolFunded(_poolId, amountAfterFee, feeAmount);\\n    }\\n\\n    /// @notice Checks if the strategy is an approved cloneable strategy.\\n    /// @dev Internal function used by createPoolwithCustomStrategy and createPool to\\n    ///      determine if a strategy is in the cloneable strategy allow list.\\n    /// @param _strategy The address of the strategy\\n    /// @return This will return 'true' if the strategy is cloneable, otherwise 'false'\\n    function _isCloneableStrategy(address _strategy) internal view returns (bool) {\\n        return cloneableStrategies[_strategy];\\n    }\\n\\n    /// @notice Checks if the address is a pool admin\\n    /// @dev Internal function used to determine if an address is a pool admin\\n    /// @param _poolId The ID of the pool\\n    /// @param _address The address to check\\n    /// @return This will return 'true' if the address is a pool admin, otherwise 'false'\\n    function _isPoolAdmin(uint256 _poolId, address _address) internal view returns (bool) {\\n        return hasRole(pools[_poolId].adminRole, _address);\\n    }\\n\\n    /// @notice Checks if the address is a pool manager\\n    /// @dev Internal function used to determine if an address is a pool manager\\n    /// @param _poolId The ID of the pool\\n    /// @param _address The address to check\\n    /// @return This will return 'true' if the address is a pool manager, otherwise 'false'\\n    function _isPoolManager(uint256 _poolId, address _address) internal view returns (bool) {\\n        return hasRole(pools[_poolId].managerRole, _address) || _isPoolAdmin(_poolId, _address);\\n    }\\n\\n    /// @notice Updates the registry address\\n    /// @dev Internal function used to update the registry address.\\n    ///      Emits a RegistryUpdated event.\\n    /// @param _registry The new registry address\\n    function _updateRegistry(address _registry) internal {\\n        if (_registry == address(0)) revert ZERO_ADDRESS();\\n\\n        registry = IRegistry(_registry);\\n        emit RegistryUpdated(_registry);\\n    }\\n\\n    /// @notice Updates the treasury address\\n    /// @dev Internal function used to update the treasury address.\\n    ///      Emits a TreasuryUpdated event.\\n    /// @param _treasury The new treasury address\\n    function _updateTreasury(address payable _treasury) internal {\\n        if (_treasury == address(0)) revert ZERO_ADDRESS();\\n\\n        treasury = _treasury;\\n        emit TreasuryUpdated(treasury);\\n    }\\n\\n    /// @notice Updates the fee percentage\\n    /// @dev Internal function used to update the percentage fee.\\n    ///      Emits a PercentFeeUpdated event.\\n    /// @param _percentFee The new fee\\n    function _updatePercentFee(uint256 _percentFee) internal {\\n        if (_percentFee > 1e18) revert INVALID_FEE();\\n\\n        percentFee = _percentFee;\\n\\n        emit PercentFeeUpdated(percentFee);\\n    }\\n\\n    /// @notice Updates the base fee\\n    /// @dev Internal function used to update the base fee.\\n    ///      Emits a BaseFeeUpdated event.\\n    /// @param _baseFee The new base fee\\n    function _updateBaseFee(uint256 _baseFee) internal {\\n        baseFee = _baseFee;\\n\\n        emit BaseFeeUpdated(baseFee);\\n    }\\n\\n    // =========================\\n    // ==== View Functions =====\\n    // =========================\\n\\n    /// @notice Getter for the fee denominator\\n    /// @return FEE_DENOMINATOR The fee denominator is (1e18) which represents 100%\\n    function getFeeDenominator() public pure returns (uint256 FEE_DENOMINATOR) {\\n        return 1e18;\\n    }\\n\\n    /// @notice Checks if the address is a pool admin.\\n    /// @param _poolId The ID of the pool\\n    /// @param _address The address to check\\n    /// @return 'true' if the address is a pool admin, otherwise 'false'\\n    function isPoolAdmin(uint256 _poolId, address _address) external view returns (bool) {\\n        return _isPoolAdmin(_poolId, _address);\\n    }\\n\\n    /// @notice Checks if the address is a pool manager\\n    /// @param _poolId The ID of the pool\\n    /// @param _address The address to check\\n    /// @return 'true' if the address is a pool manager, otherwise 'false'\\n    function isPoolManager(uint256 _poolId, address _address) external view returns (bool) {\\n        return _isPoolManager(_poolId, _address);\\n    }\\n\\n    /// @notice Getter for the strategy.\\n    /// @param _poolId The ID of the pool\\n    /// @return The address of the strategy\\n    function getStrategy(uint256 _poolId) external view returns (address) {\\n        return address(pools[_poolId].strategy);\\n    }\\n\\n    /// @notice Getter for fee percentage.\\n    /// @return The fee percentage (1e18 = 100%)\\n    function getPercentFee() external view returns (uint256) {\\n        return percentFee;\\n    }\\n\\n    /// @notice Getter for base fee.\\n    /// @return The base fee\\n    function getBaseFee() external view returns (uint256) {\\n        return baseFee;\\n    }\\n\\n    /// @notice Getter for treasury address.\\n    /// @return The treasury address\\n    function getTreasury() external view returns (address payable) {\\n        return treasury;\\n    }\\n\\n    /// @notice Getter for registry.\\n    /// @return The registry address\\n    function getRegistry() external view returns (IRegistry) {\\n        return registry;\\n    }\\n\\n    /// @notice Getter for if strategy is cloneable.\\n    /// @param _strategy The address of the strategy\\n    /// @return 'true' if the strategy is cloneable, otherwise 'false'\\n    function isCloneableStrategy(address _strategy) external view returns (bool) {\\n        return _isCloneableStrategy(_strategy);\\n    }\\n\\n    /// @notice Getter for the 'Pool'.\\n    /// @param _poolId The ID of the pool\\n    /// @return The 'Pool' struct\\n    function getPool(uint256 _poolId) external view returns (Pool memory) {\\n        return pools[_poolId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IAllo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n// Interfaces\\nimport {IRegistry} from \\\"./IRegistry.sol\\\";\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\n// Internal Libraries\\nimport {Metadata} from \\\"../libraries/Metadata.sol\\\";\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Allo Interface\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice Interface for the Allo contract. It exposes all functions needed to use the Allo protocol.\\ninterface IAllo {\\n    /// ======================\\n    /// ======= Structs ======\\n    /// ======================\\n\\n    /// @notice the Pool struct that all strategy pools are based from\\n    struct Pool {\\n        bytes32 profileId;\\n        IStrategy strategy;\\n        address token;\\n        Metadata metadata;\\n        bytes32 managerRole;\\n        bytes32 adminRole;\\n    }\\n\\n    /// ======================\\n    /// ======= Events =======\\n    /// ======================\\n\\n    /// @notice Event emitted when a new pool is created\\n    /// @param poolId ID of the pool created\\n    /// @param profileId ID of the profile the pool is associated with\\n    /// @param strategy Address of the strategy contract\\n    /// @param token Address of the token pool was funded with when created\\n    /// @param amount Amount pool was funded with when created\\n    /// @param metadata Pool metadata\\n    event PoolCreated(\\n        uint256 indexed poolId,\\n        bytes32 indexed profileId,\\n        IStrategy strategy,\\n        address token,\\n        uint256 amount,\\n        Metadata metadata\\n    );\\n\\n    /// @notice Emitted when a pools metadata is updated\\n    /// @param poolId ID of the pool updated\\n    /// @param metadata Pool metadata that was updated\\n    event PoolMetadataUpdated(uint256 indexed poolId, Metadata metadata);\\n\\n    /// @notice Emitted when a pool is funded\\n    /// @param poolId ID of the pool funded\\n    /// @param amount Amount funded to the pool\\n    /// @param fee Amount of the fee paid to the treasury\\n    event PoolFunded(uint256 indexed poolId, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when the base fee is paid\\n    /// @param poolId ID of the pool the base fee was paid for\\n    /// @param amount Amount of the base fee paid\\n    event BaseFeePaid(uint256 indexed poolId, uint256 amount);\\n\\n    /// @notice Emitted when the treasury address is updated\\n    /// @param treasury Address of the new treasury\\n    event TreasuryUpdated(address treasury);\\n\\n    /// @notice Emitted when the percent fee is updated\\n    /// @param percentFee New percentage for the fee\\n    event PercentFeeUpdated(uint256 percentFee);\\n\\n    /// @notice Emitted when the base fee is updated\\n    /// @param baseFee New base fee amount\\n    event BaseFeeUpdated(uint256 baseFee);\\n\\n    /// @notice Emitted when the registry address is updated\\n    /// @param registry Address of the new registry\\n    event RegistryUpdated(address registry);\\n\\n    /// @notice Emitted when a strategy is approved and added to the cloneable strategies\\n    /// @param strategy Address of the strategy approved\\n    event StrategyApproved(address strategy);\\n\\n    /// @notice Emitted when a strategy is removed from the cloneable strategies\\n    /// @param strategy Address of the strategy removed\\n    event StrategyRemoved(address strategy);\\n\\n    /// ====================================\\n    /// ==== External/Public Functions =====\\n    /// ====================================\\n\\n    /// @notice Initialize the Allo contract\\n    /// @param _owner Address of the owner\\n    /// @param _registry Address of the registry contract\\n    /// @param _treasury Address of the treasury\\n    /// @param _percentFee Percentage for the fee\\n    /// @param _baseFee Base fee amount\\n    function initialize(\\n        address _owner,\\n        address _registry,\\n        address payable _treasury,\\n        uint256 _percentFee,\\n        uint256 _baseFee\\n    ) external;\\n\\n    /// @notice Updates a pools metadata.\\n    /// @dev 'msg.sender' must be a pool admin.\\n    /// @param _poolId The ID of the pool to update\\n    /// @param _metadata The new metadata to set\\n    function updatePoolMetadata(uint256 _poolId, Metadata memory _metadata) external;\\n\\n    /// @notice Update the registry address.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _registry The new registry address\\n    function updateRegistry(address _registry) external;\\n\\n    /// @notice Updates the treasury address.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _treasury The new treasury address\\n    function updateTreasury(address payable _treasury) external;\\n\\n    /// @notice Updates the percentage for the fee.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _percentFee The new percentage for the fee\\n    function updatePercentFee(uint256 _percentFee) external;\\n\\n    /// @notice Updates the base fee.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _baseFee The new base fee\\n    function updateBaseFee(uint256 _baseFee) external;\\n\\n    /// @notice Adds a strategy to the cloneable strategies.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _strategy The address of the strategy to add\\n    function addToCloneableStrategies(address _strategy) external;\\n\\n    /// @notice Removes a strategy from the cloneable strategies.\\n    /// @dev 'msg.sender' must be the Allo contract owner.\\n    /// @param _strategy The address of the strategy to remove\\n    function removeFromCloneableStrategies(address _strategy) external;\\n\\n    /// @notice Adds a pool manager to the pool.\\n    /// @dev 'msg.sender' must be a pool admin.\\n    /// @param _poolId The ID of the pool to add the manager to\\n    /// @param _manager The address of the manager to add\\n    function addPoolManager(uint256 _poolId, address _manager) external;\\n\\n    /// @notice Removes a pool manager from the pool.\\n    /// @dev 'msg.sender' must be a pool admin.\\n    /// @param _poolId The ID of the pool to remove the manager from\\n    /// @param _manager The address of the manager to remove\\n    function removePoolManager(uint256 _poolId, address _manager) external;\\n\\n    /// @notice Recovers funds from a pool.\\n    /// @dev 'msg.sender' must be a pool admin.\\n    /// @param _token The token to recover\\n    /// @param _recipient The address to send the recovered funds to\\n    function recoverFunds(address _token, address _recipient) external;\\n\\n    /// @notice Registers a recipient and emits {Registered} event if successful and may be handled differently by each strategy.\\n    /// @param _poolId The ID of the pool to register the recipient for\\n    function registerRecipient(uint256 _poolId, bytes memory _data) external payable returns (address);\\n\\n    /// @notice Registers a batch of recipients.\\n    /// @param _poolIds The pool ID's to register the recipients for\\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy\\n    function batchRegisterRecipient(uint256[] memory _poolIds, bytes[] memory _data)\\n        external\\n        returns (address[] memory);\\n\\n    /// @notice Funds a pool.\\n    /// @dev 'msg.value' must be greater than 0 if the token is the native token\\n    ///       or '_amount' must be greater than 0 if the token is not the native token.\\n    /// @param _poolId The ID of the pool to fund\\n    /// @param _amount The amount to fund the pool with\\n    function fundPool(uint256 _poolId, uint256 _amount) external payable;\\n\\n    /// @notice Allocates funds to a recipient.\\n    /// @dev Each strategy will handle the allocation of funds differently.\\n    /// @param _poolId The ID of the pool to allocate funds from\\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy.\\n    function allocate(uint256 _poolId, bytes memory _data) external payable;\\n\\n    /// @notice Allocates funds to multiple recipients.\\n    /// @dev Each strategy will handle the allocation of funds differently\\n    function batchAllocate(uint256[] calldata _poolIds, bytes[] memory _datas) external;\\n\\n    /// @notice Distributes funds to recipients and emits {Distributed} event if successful\\n    /// @dev Each strategy will handle the distribution of funds differently\\n    /// @param _poolId The ID of the pool to distribute from\\n    /// @param _recipientIds The recipient ids to distribute to\\n    /// @param _data The data to pass to the strategy and may be handled differently by each strategy\\n    function distribute(uint256 _poolId, address[] memory _recipientIds, bytes memory _data) external;\\n\\n    /// =========================\\n    /// ==== View Functions =====\\n    /// =========================\\n\\n    /// @notice Checks if an address is a pool admin.\\n    /// @param _poolId The ID of the pool to check\\n    /// @param _address The address to check\\n    /// @return 'true' if the '_address' is a pool admin, otherwise 'false'\\n    function isPoolAdmin(uint256 _poolId, address _address) external view returns (bool);\\n\\n    /// @notice Checks if an address is a pool manager.\\n    /// @param _poolId The ID of the pool to check\\n    /// @param _address The address to check\\n    /// @return 'true' if the '_address' is a pool manager, otherwise 'false'\\n    function isPoolManager(uint256 _poolId, address _address) external view returns (bool);\\n\\n    /// @notice Checks if a strategy is cloneable (is in the cloneableStrategies mapping).\\n    /// @param _strategy The address of the strategy to check\\n    /// @return 'true' if the '_strategy' is cloneable, otherwise 'false'\\n    function isCloneableStrategy(address _strategy) external view returns (bool);\\n\\n    /// @notice Returns the address of the strategy for a given 'poolId'\\n    /// @param _poolId The ID of the pool to check\\n    /// @return strategy The address of the strategy for the ID of the pool passed in\\n    function getStrategy(uint256 _poolId) external view returns (address);\\n\\n    /// @notice Returns the current percent fee\\n    /// @return percentFee The current percentage for the fee\\n    function getPercentFee() external view returns (uint256);\\n\\n    /// @notice Returns the current base fee\\n    /// @return baseFee The current base fee\\n    function getBaseFee() external view returns (uint256);\\n\\n    /// @notice Returns the current treasury address\\n    /// @return treasury The current treasury address\\n    function getTreasury() external view returns (address payable);\\n\\n    /// @notice Returns the current registry address\\n    /// @return registry The current registry address\\n    function getRegistry() external view returns (IRegistry);\\n\\n    /// @notice Returns the 'Pool' struct for a given 'poolId'\\n    /// @param _poolId The ID of the pool to check\\n    /// @return pool The 'Pool' struct for the ID of the pool passed in\\n    function getPool(uint256 _poolId) external view returns (Pool memory);\\n\\n    /// @notice Returns the current fee denominator\\n    /// @dev 1e18 represents 100%\\n    /// @return feeDenominator The current fee denominator\\n    function getFeeDenominator() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Internal Libraries\\nimport {Metadata} from \\\"../libraries/Metadata.sol\\\";\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title IRegistry Interface\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice Interface for the Registry contract and exposes all functions needed to use the Registry\\n///         within the Allo protocol.\\n/// @dev The Registry Interface is used to interact with the Allo protocol and create profiles\\n///      that can be used to interact with the Allo protocol. The Registry is the main contract\\n///      that all other contracts interact with to get the 'Profile' information needed to\\n///      interact with the Allo protocol. The Registry is also used to create new profiles\\n///      and update existing profiles. The Registry is also used to add and remove members\\n///      from a profile. The Registry will not always be used in a strategy and will depend on\\n///      the strategy being used.\\ninterface IRegistry {\\n    /// ======================\\n    /// ======= Structs ======\\n    /// ======================\\n\\n    /// @dev The Profile struct that all profiles are based from\\n    struct Profile {\\n        bytes32 id;\\n        uint256 nonce;\\n        string name;\\n        Metadata metadata;\\n        address owner;\\n        address anchor;\\n    }\\n\\n    /// ======================\\n    /// ======= Events =======\\n    /// ======================\\n\\n    /// @dev Emitted when a profile is created. This will return your anchor address.\\n    event ProfileCreated(\\n        bytes32 indexed profileId, uint256 nonce, string name, Metadata metadata, address owner, address anchor\\n    );\\n\\n    /// @dev Emitted when a profile name is updated. This will update the anchor when the name is updated and return it.\\n    event ProfileNameUpdated(bytes32 indexed profileId, string name, address anchor);\\n\\n    /// @dev Emitted when a profile's metadata is updated.\\n    event ProfileMetadataUpdated(bytes32 indexed profileId, Metadata metadata);\\n\\n    /// @dev Emitted when a profile owner is updated.\\n    event ProfileOwnerUpdated(bytes32 indexed profileId, address owner);\\n\\n    /// @dev Emitted when a profile pending owner is updated.\\n    event ProfilePendingOwnerUpdated(bytes32 indexed profileId, address pendingOwner);\\n\\n    /// =========================\\n    /// ==== View Functions =====\\n    /// =========================\\n\\n    /// @dev Returns the 'Profile' for a '_profileId' passed\\n    /// @param _profileId The 'profileId' to return the 'Profile' for\\n    /// @return profile The 'Profile' for the '_profileId' passed\\n    function getProfileById(bytes32 _profileId) external view returns (Profile memory profile);\\n\\n    /// @dev Returns the 'Profile' for an '_anchor' passed\\n    /// @param _anchor The 'anchor' to return the 'Profile' for\\n    /// @return profile The 'Profile' for the '_anchor' passed\\n    function getProfileByAnchor(address _anchor) external view returns (Profile memory profile);\\n\\n    /// @dev Returns a boolean if the '_account' is a member or owner of the '_profileId' passed in\\n    /// @param _profileId The 'profileId' to check if the '_account' is a member or owner of\\n    /// @param _account The 'account' to check if they are a member or owner of the '_profileId' passed in\\n    /// @return isOwnerOrMemberOfProfile A boolean if the '_account' is a member or owner of the '_profileId' passed in\\n    function isOwnerOrMemberOfProfile(bytes32 _profileId, address _account)\\n        external\\n        view\\n        returns (bool isOwnerOrMemberOfProfile);\\n\\n    /// @dev Returns a boolean if the '_account' is an owner of the '_profileId' passed in\\n    /// @param _profileId The 'profileId' to check if the '_account' is an owner of\\n    /// @param _owner The 'owner' to check if they are an owner of the '_profileId' passed in\\n    /// @return isOwnerOfProfile A boolean if the '_account' is an owner of the '_profileId' passed in\\n    function isOwnerOfProfile(bytes32 _profileId, address _owner) external view returns (bool isOwnerOfProfile);\\n\\n    /// @dev Returns a boolean if the '_account' is a member of the '_profileId' passed in\\n    /// @param _profileId The 'profileId' to check if the '_account' is a member of\\n    /// @param _member The 'member' to check if they are a member of the '_profileId' passed in\\n    /// @return isMemberOfProfile A boolean if the '_account' is a member of the '_profileId' passed in\\n    function isMemberOfProfile(bytes32 _profileId, address _member) external view returns (bool isMemberOfProfile);\\n\\n    /// ====================================\\n    /// ==== External/Public Functions =====\\n    /// ====================================\\n\\n    /// @dev Creates a new 'Profile' and returns the 'profileId' of the new profile\\n    ///\\n    /// Note: The 'name' and 'nonce' are used to generate the 'anchor' address\\n    ///\\n    /// Requirements: None, anyone can create a new profile\\n    ///\\n    /// @param _nonce The nonce to use to generate the 'anchor' address\\n    /// @param _name The name to use to generate the 'anchor' address\\n    /// @param _metadata The 'Metadata' to use to generate the 'anchor' address\\n    /// @param _owner The 'owner' to use to generate the 'anchor' address\\n    /// @param _members The 'members' to use to generate the 'anchor' address\\n    /// @return profileId The 'profileId' of the new profile\\n    function createProfile(\\n        uint256 _nonce,\\n        string memory _name,\\n        Metadata memory _metadata,\\n        address _owner,\\n        address[] memory _members\\n    ) external returns (bytes32 profileId);\\n\\n    /// @dev Updates the 'name' of the '_profileId' passed in and returns the new 'anchor' address\\n    ///\\n    /// Requirements: Only the 'Profile' owner can update the name\\n    ///\\n    /// Note: The 'name' and 'nonce' are used to generate the 'anchor' address and this will update the 'anchor'\\n    ///       so please use caution. You can always recreate your 'anchor' address by updating the name back\\n    ///       to the original name used to create the profile.\\n    ///\\n    /// @param _profileId The 'profileId' to update the name for\\n    /// @param _name The new 'name' value\\n    /// @return anchor The new 'anchor' address\\n    function updateProfileName(bytes32 _profileId, string memory _name) external returns (address anchor);\\n\\n    /// @dev Updates the 'Metadata' of the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the 'Profile' owner can update the metadata\\n    ///\\n    /// @param _profileId The 'profileId' to update the metadata for\\n    /// @param _metadata The new 'Metadata' value\\n    function updateProfileMetadata(bytes32 _profileId, Metadata memory _metadata) external;\\n\\n    /// @dev Updates the pending 'owner' of the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the 'Profile' owner can update the pending owner\\n    ///\\n    /// @param _profileId The 'profileId' to update the pending owner for\\n    /// @param _pendingOwner The new pending 'owner' value\\n    function updateProfilePendingOwner(bytes32 _profileId, address _pendingOwner) external;\\n\\n    /// @dev Accepts the pending 'owner' of the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the pending owner can accept the ownership\\n    ///\\n    /// @param _profileId The 'profileId' to accept the ownership for\\n    function acceptProfileOwnership(bytes32 _profileId) external;\\n\\n    /// @dev Adds members to the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the 'Profile' owner can add members\\n    ///\\n    /// @param _profileId The 'profileId' to add members to\\n    /// @param _members The members to add to the '_profileId' passed in\\n    function addMembers(bytes32 _profileId, address[] memory _members) external;\\n\\n    /// @dev Removes members from the '_profileId' passed in\\n    ///\\n    /// Requirements: Only the 'Profile' owner can remove members\\n    ///\\n    /// @param _profileId The 'profileId' to remove members from\\n    /// @param _members The members to remove from the '_profileId' passed in\\n    function removeMembers(bytes32 _profileId, address[] memory _members) external;\\n\\n    /// @dev Recovers funds from the contract\\n    ///\\n    /// Requirements: Must be the Allo owner\\n    ///\\n    /// @param _token The token you want to use to recover funds\\n    /// @param _recipient The recipient of the recovered funds\\n    function recoverFunds(address _token, address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\n// Interfaces\\nimport {IAllo} from \\\"./IAllo.sol\\\";\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title IStrategy Interface\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co> @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice BaseStrategy is the base contract that all strategies should inherit from and uses this interface.\\n\\ninterface IStrategy {\\n    /// ======================\\n    /// ======= Storage ======\\n    /// ======================\\n\\n    /// @notice The Status enum that all recipients are based from\\n    enum Status {\\n        None,\\n        Pending,\\n        Accepted,\\n        Rejected,\\n        Appealed,\\n        InReview,\\n        Canceled\\n    }\\n\\n    /// @notice Payout summary struct to hold the payout data\\n    struct PayoutSummary {\\n        address recipientAddress;\\n        uint256 amount;\\n    }\\n\\n    /// ======================\\n    /// ======= Events =======\\n    /// ======================\\n\\n    /// @notice Emitted when strategy is initialized.\\n    /// @param poolId The ID of the pool\\n    /// @param data The data passed to the 'initialize' function\\n    event Initialized(uint256 poolId, bytes data);\\n\\n    /// @notice Emitted when a recipient is registered.\\n    /// @param recipientId The ID of the recipient\\n    /// @param data The data passed to the 'registerRecipient' function\\n    /// @param sender The sender\\n    event Registered(address indexed recipientId, bytes data, address sender);\\n\\n    /// @notice Emitted when a recipient is allocated to.\\n    /// @param recipientId The ID of the recipient\\n    /// @param amount The amount allocated\\n    /// @param token The token allocated\\n    event Allocated(address indexed recipientId, uint256 amount, address token, address sender);\\n\\n    /// @notice Emitted when tokens are distributed.\\n    /// @param recipientId The ID of the recipient\\n    /// @param recipientAddress The recipient\\n    /// @param amount The amount distributed\\n    /// @param sender The sender\\n    event Distributed(address indexed recipientId, address recipientAddress, uint256 amount, address sender);\\n\\n    /// @notice Emitted when pool is set to active status.\\n    /// @param active The status of the pool\\n    event PoolActive(bool active);\\n\\n    /// ======================\\n    /// ======= Views ========\\n    /// ======================\\n\\n    /// @notice Getter for the address of the Allo contract.\\n    /// @return The 'Allo' contract\\n    function getAllo() external view returns (IAllo);\\n\\n    /// @notice Getter for the 'poolId' for this strategy.\\n    /// @return The ID of the pool\\n    function getPoolId() external view returns (uint256);\\n\\n    /// @notice Getter for the 'id' of the strategy.\\n    /// @return The ID of the strategy\\n    function getStrategyId() external view returns (bytes32);\\n\\n    /// @notice Checks whether a allocator is valid or not, will usually be true for all strategies\\n    ///      and will depend on the strategy implementation.\\n    /// @param _allocator The allocator to check\\n    /// @return Whether the allocator is valid or not\\n    function isValidAllocator(address _allocator) external view returns (bool);\\n\\n    /// @notice whether pool is active.\\n    /// @return Whether the pool is active or not\\n    function isPoolActive() external returns (bool);\\n\\n    /// @notice Checks the amount of tokens in the pool.\\n    /// @return The balance of the pool\\n    function getPoolAmount() external view returns (uint256);\\n\\n    /// @notice Increases the balance of the pool.\\n    /// @param _amount The amount to increase the pool by\\n    function increasePoolAmount(uint256 _amount) external;\\n\\n    /// @notice Checks the status of a recipient probably tracked in a mapping, but will depend on the implementation\\n    ///      for example, the OpenSelfRegistration only maps users to bool, and then assumes Accepted for those\\n    ///      since there is no need for Pending or Rejected.\\n    /// @param _recipientId The ID of the recipient\\n    /// @return The status of the recipient\\n    function getRecipientStatus(address _recipientId) external view returns (Status);\\n\\n    /// @notice Checks the amount allocated to a recipient for distribution.\\n    /// @dev Input the values you would send to distribute(), get the amounts each recipient in the array would receive.\\n    ///      The encoded '_data' will be determined by the strategy, and will be used to determine the payout.\\n    /// @param _recipientIds The IDs of the recipients\\n    /// @param _data The encoded data\\n    function getPayouts(address[] memory _recipientIds, bytes[] memory _data)\\n        external\\n        view\\n        returns (PayoutSummary[] memory);\\n\\n    /// ======================\\n    /// ===== Functions ======\\n    /// ======================\\n\\n    /// @notice\\n    /// @dev The default BaseStrategy version will not use the data  if a strategy wants to use it, they will overwrite it,\\n    ///      use it, and then call super.initialize().\\n    /// @param _poolId The ID of the pool\\n    /// @param _data The encoded data\\n    function initialize(uint256 _poolId, bytes memory _data) external;\\n\\n    /// @notice This will register a recipient, set their status (and any other strategy specific values), and\\n    ///         return the ID of the recipient.\\n    /// @dev Able to change status all the way up to 'Accepted', or to 'Pending' and if there are more steps, additional\\n    ///      functions should be added to allow the owner to check this. The owner could also check attestations directly\\n    ///      and then accept for instance. The '_data' will be determined by the strategy implementation.\\n    /// @param _data The data to use to register the recipient\\n    /// @param _sender The address of the sender\\n    /// @return The ID of the recipient\\n    function registerRecipient(bytes memory _data, address _sender) external payable returns (address);\\n\\n    /// @notice This will allocate to a recipient.\\n    /// @dev The encoded '_data' will be determined by the strategy implementation.\\n    /// @param _data The data to use to allocate to the recipient\\n    /// @param _sender The address of the sender\\n    function allocate(bytes memory _data, address _sender) external payable;\\n\\n    /// @notice This will distribute funds (tokens) to recipients.\\n    /// @dev most strategies will track a TOTAL amount per recipient, and a PAID amount, and pay the difference\\n    /// this contract will need to track the amount paid already, so that it doesn't double pay.\\n    function distribute(address[] memory _recipientIds, bytes memory _data, address _sender) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/Clone.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// External Libraries\\nimport \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol\\\";\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Clone library\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice A helper library to create deterministic clones of the strategy contracts when a pool is created\\n/// @dev Handles the creation of clones for the strategy contracts and returns the address of the clone\\nlibrary Clone {\\n    /// @dev Create a clone of the contract\\n    /// @param _contract The address of the contract to clone\\n    /// @param _nonce The nonce to use for the clone\\n    function createClone(address _contract, uint256 _nonce) internal returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, _nonce));\\n\\n        // Return the address of the contract\\n        return ClonesUpgradeable.cloneDeterministic(_contract, salt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Errors\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @KurtMerbeth <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>\\n/// @notice Library containing all custom errors the protocol may revert with.\\ncontract Errors {\\n    /// ======================\\n    /// ====== Generic =======\\n    /// ======================\\n\\n    /// @notice Thrown as a general error when input / data is invalid\\n    error INVALID();\\n\\n    /// @notice Thrown when mismatch in decoding data\\n    error MISMATCH();\\n\\n    /// @notice Thrown when not enough funds are available\\n    error NOT_ENOUGH_FUNDS();\\n\\n    /// @notice Thrown when user is not authorized\\n    error UNAUTHORIZED();\\n\\n    /// @notice Thrown when address is the zero address\\n    error ZERO_ADDRESS();\\n\\n    /// ======================\\n    /// ====== Registry ======\\n    /// ======================\\n\\n    /// @dev Thrown when the nonce passed has been used or not available\\n    error NONCE_NOT_AVAILABLE();\\n\\n    /// @dev Thrown when the 'msg.sender' is not the pending owner on ownership transfer\\n    error NOT_PENDING_OWNER();\\n\\n    /// @dev Thrown if the anchor creation fails\\n    error ANCHOR_ERROR();\\n\\n    /// ======================\\n    /// ======== Allo ========\\n    /// ======================\\n\\n    /// @notice Thrown when the strategy is not approved\\n    error NOT_APPROVED_STRATEGY();\\n\\n    /// @notice Thrown when the strategy is approved and should be cloned\\n    error IS_APPROVED_STRATEGY();\\n\\n    /// @notice Thrown when the fee is below 1e18 which is the fee percentage denominator\\n    error INVALID_FEE();\\n\\n    /// ======================\\n    /// ===== IStrategy ======\\n    /// ======================\\n\\n    /// @notice Thrown when data is already intialized\\n    error ALREADY_INITIALIZED();\\n\\n    /// @notice Thrown when data is yet to be initialized\\n    error NOT_INITIALIZED();\\n\\n    /// @notice Thrown when an invalid address is used\\n    error INVALID_ADDRESS();\\n\\n    /// @notice Thrown when a pool is inactive\\n    error POOL_INACTIVE();\\n\\n    /// @notice Thrown when a pool is already active\\n    error POOL_ACTIVE();\\n\\n    /// @notice Thrown when two arrays length are not equal\\n    error ARRAY_MISMATCH();\\n\\n    /// @notice Thrown when the registration is invalid.\\n    error INVALID_REGISTRATION();\\n\\n    /// @notice Thrown when the metadata is invalid.\\n    error INVALID_METADATA();\\n\\n    /// @notice Thrown when the recipient is not accepted.\\n    error RECIPIENT_NOT_ACCEPTED();\\n\\n    /// @notice Thrown when recipient is already accepted.\\n    error RECIPIENT_ALREADY_ACCEPTED();\\n\\n    /// @notice Thrown when registration is not active.\\n    error REGISTRATION_NOT_ACTIVE();\\n\\n    /// @notice Thrown when there is an error in recipient.\\n    error RECIPIENT_ERROR(address recipientId);\\n\\n    /// @notice Thrown when the allocation is not active.\\n    error ALLOCATION_NOT_ACTIVE();\\n\\n    /// @notice Thrown when the allocation is not ended.\\n    error ALLOCATION_NOT_ENDED();\\n\\n    /// @notice Thrown when the allocation is active.\\n    error ALLOCATION_ACTIVE();\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Metadata\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice Metadata is used to define the metadata for the protocol that is used throughout the system.\\nstruct Metadata {\\n    /// @notice Protocol ID corresponding to a specific protocol (currently using IPFS = 1)\\n    uint256 protocol;\\n    /// @notice Pointer (hash) to fetch metadata for the specified protocol\\n    string pointer;\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/Native.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Native token information\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice This is used to define the address of the native token for the protocol\\ncontract Native {\\n    /// @notice Address of the native token\\n    address public constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.19;\\n\\n// External Libraries\\nimport {SafeTransferLib} from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\n// Internal Libraries\\nimport \\\"./Native.sol\\\";\\n\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u285f\u2818\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28fe\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28f4\u28f4\u28f6\u28f6\u28f6\u28e6\u28e6\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u2840\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2800\u2800\u2808\u2818\u2839\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u2840\u2800\u2800\\n// \u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u2800\u2840\u2880\u2800\u2840\u2880\u2800\u2840\u2888\u28bf\u285f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\\n// \u2800\u2800\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28ff\u287f\u28bf\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u283f\u28bf\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2838\u28ff\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u2802\u2800\u2800\\n// \u2800\u2800\u2819\u281b\u283f\u283b\u283b\u281b\u2809\u2800\u2800\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u28bb\u28ff\u28ff\u28ff\u28f7\u28c0\u2880\u2800\u2800\u2800\u2840\u28f0\u28fe\u28ff\u28ff\u28ff\u280f\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28d7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u286f\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28fe\u28fe\u28f7\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\\n// \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u281b\u2819\u280b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u283f\u283b\u281f\u283f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u281f\u283f\u281f\u283f\u2806\u2800\u2838\u283f\u283f\u281f\u282f\u2800\u2800\u2800\u2838\u283f\u283f\u283f\u280f\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u283b\u283b\u287f\u28ff\u28bf\u287f\u287f\u283f\u281b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\\n//                    allo.gitcoin.co\\n\\n/// @title Transfer contract\\n/// @author @thelostone-mc <aditya@gitcoin.co>, @0xKurt <kurt@gitcoin.co>, @codenamejason <jason@gitcoin.co>, @0xZakk <zakk@gitcoin.co>, @nfrgosselin <nate@gitcoin.co>\\n/// @notice A helper contract to transfer tokens within Allo protocol\\n/// @dev Handles the transfer of tokens to an address\\ncontract Transfer is Native {\\n    /// @notice Thrown when the amount of tokens sent does not match the amount of tokens expected\\n    error AMOUNT_MISMATCH();\\n\\n    /// @notice This holds the details for a transfer\\n    struct TransferData {\\n        address from;\\n        address to;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Transfer an amount of a token to an array of addresses\\n    /// @param _token The address of the token\\n    /// @param _transferData TransferData[]\\n    /// @return Whether the transfer was successful or not\\n    function _transferAmountsFrom(address _token, TransferData[] memory _transferData) internal returns (bool) {\\n        uint256 msgValue = msg.value;\\n\\n        for (uint256 i; i < _transferData.length;) {\\n            TransferData memory transferData = _transferData[i];\\n\\n            if (_token == NATIVE) {\\n                msgValue -= transferData.amount;\\n                SafeTransferLib.safeTransferETH(transferData.to, transferData.amount);\\n            } else {\\n                SafeTransferLib.safeTransferFrom(_token, transferData.from, transferData.to, transferData.amount);\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        if (msgValue != 0) revert AMOUNT_MISMATCH();\\n\\n        return true;\\n    }\\n\\n    /// @notice Transfer an amount of a token to an address\\n    /// @param _token The address of the token\\n    /// @param _transferData Individual TransferData\\n    /// @return Whether the transfer was successful or not\\n    function _transferAmountFrom(address _token, TransferData memory _transferData) internal returns (bool) {\\n        uint256 amount = _transferData.amount;\\n        if (_token == NATIVE) {\\n            // Native Token\\n            if (msg.value < amount) revert AMOUNT_MISMATCH();\\n\\n            SafeTransferLib.safeTransferETH(_transferData.to, amount);\\n        } else {\\n            SafeTransferLib.safeTransferFrom(_token, _transferData.from, _transferData.to, amount);\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Transfer an amount of a token to an address\\n    /// @param _token The token to transfer\\n    /// @param _to The address to transfer to\\n    /// @param _amount The amount to transfer\\n    function _transferAmount(address _token, address _to, uint256 _amount) internal {\\n        if (_token == NATIVE) {\\n            SafeTransferLib.safeTransferETH(_to, _amount);\\n        } else {\\n            SafeTransferLib.safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n\\n    /// @notice Get the balance of a token for an account\\n    /// @param _token The token to get the balance of\\n    /// @param _account The account to get the balance for\\n    /// @return The balance of the token for the account\\n    function _getBalance(address _token, address _account) internal view returns (uint256) {\\n        if (_token == NATIVE) {\\n            return payable(_account).balance;\\n        } else {\\n            return SafeTransferLib.balanceOf(_token, _account);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ClonesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"solady/src/auth/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n/// @dev While the ownable portion follows\\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\\n    /// It is intentionally chosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ownerSlot := not(_OWNER_SLOT_NOT)\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n            // Store the new value.\\n            sstore(ownerSlot, newOwner)\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    /// Override to return a different value if needed.\\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(not(_OWNER_SLOT_NOT))\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"solady/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n///\\n/// @dev Note:\\n/// - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection.\\n/// - For ERC20s, this implementation won't check that a token has code,\\n/// responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// Note: This implementation does NOT protect against gas griefing.\\n    /// Please use `forceSafeTransferETH` for gas griefing protection.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // To coerce gas estimation to provide enough gas for the `create` above.\\n                    if iszero(gt(gas(), 1000000)) { revert(0, 0) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overridden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // To coerce gas estimation to provide enough gas for the `create` above.\\n                    if iszero(gt(gas(), 1000000)) { revert(0, 0) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have their entire balance approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x0c, 0x70a08231000000000000000000000000)\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            // The `amount` argument is already written to the memory word at 0x60.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x14, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x34.\\n            amount := mload(0x34)\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x00, 0x70a08231000000000000000000000000)\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 400\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ALLOCATION_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALLOCATION_NOT_ENDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ALREADY_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMOUNT_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ANCHOR_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ARRAY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_METADATA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_REGISTRATION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IS_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NONCE_NOT_AVAILABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_APPROVED_STRATEGY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ENOUGH_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_INITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_PENDING_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_INACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_ALREADY_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientId\",\"type\":\"address\"}],\"name\":\"RECIPIENT_ERROR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RECIPIENT_NOT_ACCEPTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REGISTRATION_NOT_ACTIVE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BaseFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"BaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentFee\",\"type\":\"uint256\"}],\"name\":\"PercentFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PoolFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"PoolMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addToCloneableStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"batchAllocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"batchRegisterRecipient\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"recipientIds\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initStrategyData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_profileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initStrategyData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"createPoolWithCustomStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_recipientIds\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"FEE_DENOMINATOR\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"profileId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"managerRole\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"internalType\":\"struct IAllo.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"isCloneableStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPoolAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPoolManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"registerRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeFromCloneableStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removePoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"updateBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentFee\",\"type\":\"uint256\"}],\"name\":\"updatePercentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"}],\"name\":\"updatePoolMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Allo", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "400", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}