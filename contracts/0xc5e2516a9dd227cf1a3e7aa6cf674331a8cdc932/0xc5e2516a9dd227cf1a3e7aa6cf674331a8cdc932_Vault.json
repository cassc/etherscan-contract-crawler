{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ERC20 {\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function balanceOf(address _owner) external returns (uint256 balance);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\\ncontract Vault {\\n    address public owner;\\n    address public nextOwner;\\n    bool public paused;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        paused = false;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the owner can perform this action\\\");\\n        _;\\n    }\\n\\n    event Withdrawal(\\n        address indexed withdrawer,\\n        uint256 amount\\n    );\\n\\n    event Pause();\\n    event Unpause();\\n\\n    function withdraw(address token, address withdrawer, uint256 amount) external onlyOwner {\\n        require(!paused, \\\"The contract is paused\\\");\\n        require(amount > 0, \\\"The amount must be greater than zero\\\");\\n        require(ERC20(token).balanceOf(address(this)) >= amount, \\\"Insufficient balance\\\");\\n\\n        ERC20(token).transfer(withdrawer, amount);\\n\\n        emit Withdrawal(withdrawer, amount);\\n    }\\n\\n    function setNextOwner(address _nextOwner) external onlyOwner {\\n        require(_nextOwner != address(0), \\\"Owner cannot be the zero address\\\");\\n        nextOwner = _nextOwner;\\n    }\\n\\n    function getOwnership() external {\\n        require(nextOwner == msg.sender, \\\"You are not the next owner\\\");\\n        owner = nextOwner;\\n        nextOwner = address(0);\\n    }\\n\\n    function pause() external onlyOwner {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"setNextOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}