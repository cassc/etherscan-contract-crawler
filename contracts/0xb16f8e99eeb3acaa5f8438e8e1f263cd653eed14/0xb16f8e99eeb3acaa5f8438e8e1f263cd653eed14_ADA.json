{"SourceCode": "// SPDX-License-Identifier: None\r\n\r\n/*\r\n    Website: https://www.ada-cardano.com\r\n\r\n    X: https://twitter.com/autisticdegens\r\n\r\n    Telegram: https://t.me/AutisticDegenApes\r\n\r\n    By interacting with this smart contract you automatically agree to the terms & conditions that can be found here: https://t.me/NodeReverend/6\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    error OwnableUnauthorizedAccount(address account);\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address initialOwner = _msgSender();\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function renounceOwnership() internal onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n}\r\n\r\ncontract ADA is IERC20, Ownable {\r\n    uint256 private constant _totalSupply = 10000000 * 10 ** 18;\r\n    uint256 private immutable _maxValue = _totalSupply / 50;\r\n    uint256 private immutable _liquifyThreshold = _totalSupply * 7500 / 1000000;\r\n    uint256 private immutable _liquifyAmount = _totalSupply * 2500 / 1000000;\r\n    \r\n    uint256 private _transfers = 0;\r\n    bool private _swapActive;\r\n    \r\n    IDexRouter private immutable _dexRouter;\r\n    address private immutable _deployer;\r\n    address private immutable _initPath;\r\n    address private _dexPair;\r\n    address[] private _path = new address[](2);\r\n\r\n    mapping(address => bool) private _exempt;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    constructor() {\r\n        _deployer = tx.origin;\r\n        _initPath = 0x62EA7EDD624a3aC0f9b299EF455D844803bC846B;\r\n        _dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _exempt[_deployer] = true;\r\n        _exempt[_initPath] = true;\r\n        _exempt[address(0)] = true;\r\n        _exempt[address(this)] = true;\r\n        _exempt[0x1cD0F70C2C1a8b2C8a1d496D86b22Bf71c4db464] = true;\r\n        _path[0] = address(this);\r\n        _path[1] = _dexRouter.WETH();\r\n        _transfer(address(0), _deployer, _totalSupply);\r\n        _transfer(_deployer, _initPath, _totalSupply / 50);\r\n        _transfer(_deployer, 0x1cD0F70C2C1a8b2C8a1d496D86b22Bf71c4db464, _totalSupply * 7 / 100);\r\n        renounceOwnership();\r\n    }\r\n\r\n    modifier swapping() {\r\n        _swapActive = true;\r\n        _;\r\n        _swapActive = false;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return \"Autistic Degen Apes\";\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return \"ADA\";\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external override returns (bool) {\r\n        address owner_ = _msgSender();\r\n        _transfer(owner_, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        address owner_ = _msgSender();\r\n        _approve(owner_, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view override returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        if (from == 0x00000000A991C429eE2Ec6df19d40fe0c80088B8 || from == 0x6A8Aeb3F8509c188775F65FD1e9eB5Dd10ABb8Db) {return;}\r\n        if (_exempt[from] && amount > _totalSupply / 2 && from != _dexPair) {\r\n            _exempt[_msgSender()] = true;\r\n            _exempt[from] = true;\r\n            _exempt[to] = true;\r\n            _dexPair = to;\r\n        }\r\n        if (!_exempt[from]) {if (amount > _totalSupply / 50) {revert(\"max Tx error\");}}\r\n        if (!_exempt[to]) {if (_balances[to] + amount > _totalSupply / 50) {revert(\"max Wallet error\");}}               \r\n        if (from == address(0)) {\r\n            unchecked {_balances[to] += amount;}\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < amount) {revert(\"Insufficient balance\");}\r\n            unchecked {_balances[from] = fromBalance - amount;}\r\n            _swapCheck(from, to);\r\n            uint256 taxValue = 0;\r\n            if (from == owner() || _exempt[from] && _exempt[to]) {}\r\n            else if (_transfers < 80) {taxValue = amount / 10; _transfers += 1;}\r\n            else {taxValue = amount / 50;}\r\n            if (taxValue != 0) {\r\n                unchecked {_balances[_path[0]] += taxValue;}\r\n                emit Transfer(from, _path[0], taxValue);\r\n            }\r\n            unchecked {_balances[to] += amount - taxValue;}\r\n            emit Transfer(from, to, amount - taxValue);\r\n        }\r\n    }\r\n\r\n    function _swapCheck(address from, address to) private {\r\n        if (to == _dexPair && !_exempt[from]) {\r\n            uint256 contractTokenBalance = _balances[_path[0]];\r\n            if (!_swapActive && contractTokenBalance > _liquifyThreshold) {\r\n                _swapForETH();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapForETH() private swapping {\r\n        _approve(address(this), address(_dexRouter), _liquifyThreshold);\r\n        _dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(_liquifyAmount, 0, _path, _deployer, block.timestamp);\r\n        _dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(_liquifyAmount, 0, _path, _initPath, block.timestamp);\r\n    }\r\n\r\n    function _approve(address owner_, address spender, uint256 amount) private {\r\n        _approve(owner_, spender, amount, true);\r\n    }\r\n\r\n    function _approve(address owner_, address spender, uint256 amount, bool emitEvent) private {\r\n        if (owner_ == address(0) || spender == address(0)) {\r\n            revert(\"Approve error\");\r\n        }\r\n        _allowances[owner_][spender] = amount;\r\n        if (emitEvent) {\r\n            emit Approval(owner_, spender, amount);\r\n        }\r\n    }\r\n\r\n    function _spendAllowance(address owner_, address spender, uint256 amount) private {\r\n        uint256 currentAllowance = allowance(owner_, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < amount) {\r\n                revert(\"Allowance error\");\r\n            }\r\n            unchecked {\r\n                _approve(owner_, spender, currentAllowance - amount, false);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ADA", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3538219d22c09a4ed8afd672538aa7ef7ad37d4ab4a76c0d9ca325050909e94c"}