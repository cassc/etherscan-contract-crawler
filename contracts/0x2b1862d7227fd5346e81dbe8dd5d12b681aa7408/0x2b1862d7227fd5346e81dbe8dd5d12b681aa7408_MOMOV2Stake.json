{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function totalSupply() external view returns (uint);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// ownable\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\ncontract MOMOV2Stake is Owned {\r\n    \r\n    using SafeMath for uint;\r\n\r\n    address public momo_token;\r\n    uint public totalStaked;\r\n    uint public stakingTaxRate; \r\n    uint public registrationTax;\r\n    uint public dailyROI;                         \r\n    uint public unstakingTaxRate;                   \r\n    uint public minimumStakeValue;\r\n    bool public active = true;\r\n    uint256 public customTimestamp;\r\n    \r\n    mapping(address => uint) public stakes;\r\n    mapping(address => uint) public referralRewards;\r\n    mapping(address => uint) public referralCount;\r\n    mapping(address => uint) public stakeRewards;\r\n    mapping(address => uint) private lastClock;\r\n    mapping(address => bool) public registered;\r\n    mapping(address => uint) public lockTime;\r\n\r\n    \r\n    event OnWithdrawal(address sender, uint amount);\r\n    event OnStake(address sender, uint amount, uint tax);\r\n    event OnUnstake(address sender, uint amount, uint tax);\r\n    event OnRegisterAndStake(address stakeholder, uint amount, uint totalTax , address _referrer);\r\n    \r\n    constructor(\r\n        address _token,\r\n        uint _stakingTaxRate, \r\n        uint _unstakingTaxRate,\r\n        uint _dailyROI,\r\n        uint _registrationTax,\r\n        uint _minimumStakeValue) public {\r\n            \r\n        momo_token = _token;\r\n        stakingTaxRate = _stakingTaxRate;\r\n        unstakingTaxRate = _unstakingTaxRate;\r\n        dailyROI = _dailyROI;\r\n        registrationTax = _registrationTax;\r\n        minimumStakeValue = _minimumStakeValue;\r\n    }\r\n    \r\n    modifier onlyRegistered() {\r\n        require(registered[msg.sender] == true, \"Stakeholder must be registered\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyUnregistered() {\r\n        require(registered[msg.sender] == false, \"Stakeholder is already registered\");\r\n        _;\r\n    }\r\n        \r\n    modifier whenActive() {\r\n        require(active == true, \"Smart contract is curently inactive\");\r\n        _;\r\n    }\r\n    \r\n    function registerAndStake(uint _amount, address _referrer) external onlyUnregistered() whenActive() {\r\n        require(msg.sender != _referrer, \"Cannot refer self\");\r\n        require(registered[_referrer] || address(0x0) == _referrer, \"Referrer must be registered\");\r\n        require(IERC20(momo_token).balanceOf(msg.sender) >= _amount, \"Must have enough balance to stake\");\r\n        require(_amount >= registrationTax.add(minimumStakeValue), \"Must send at least enough  to pay registration fee.\");\r\n        require(IERC20(momo_token).transferFrom(msg.sender, address(this), _amount), \"Stake failed due to failed amount transfer.\");\r\n        uint finalAmount = _amount.sub(registrationTax);\r\n        uint stakingTax = (stakingTaxRate.mul(finalAmount)).div(1000);\r\n        if(_referrer != address(0x0)) {\r\n            referralCount[_referrer]++;\r\n            referralRewards[_referrer] = (referralRewards[_referrer]).add(stakingTax);\r\n        } \r\n        registered[msg.sender] = true;\r\n        lastClock[msg.sender] = now;\r\n        lockTime[msg.sender] = block.timestamp + 15 days;\r\n        totalStaked = totalStaked.add(finalAmount).sub(stakingTax);\r\n        stakes[msg.sender] = (stakes[msg.sender]).add(finalAmount).sub(stakingTax);\r\n        emit OnRegisterAndStake(msg.sender, _amount, registrationTax.add(stakingTax), _referrer);\r\n    }\r\n    \r\n    function calculateEarnings(address _stakeholder) public view returns(uint) {\r\n        uint activeDays = (now.sub(lastClock[_stakeholder])).div(60);\r\n        return ((stakes[_stakeholder]).mul(dailyROI).mul(activeDays)).div(100000000); //1//0.1//0.01//0.001/0.0001/0.00001/\r\n    }\r\n    \r\n    function stake(uint _amount) external onlyRegistered() whenActive() {\r\n        require(_amount >= minimumStakeValue, \"Amount is below minimum stake value.\");\r\n        require(IERC20(momo_token).balanceOf(msg.sender) >= _amount, \"Must have enough balance to stake\");\r\n        require(IERC20(momo_token).transferFrom(msg.sender, address(this), _amount), \"Stake failed due to failed amount transfer.\");\r\n        uint stakingTax = (stakingTaxRate.mul(_amount)).div(1000);\r\n        uint afterTax = _amount.sub(stakingTax);\r\n        totalStaked = totalStaked.add(afterTax);\r\n        stakeRewards[msg.sender] = (stakeRewards[msg.sender]).add(calculateEarnings(msg.sender));\r\n        uint remainder = (now.sub(lastClock[msg.sender])).mod(60);\r\n        lastClock[msg.sender] = now.sub(remainder);\r\n        lockTime[msg.sender] = block.timestamp + 15 days;\r\n        stakes[msg.sender] = (stakes[msg.sender]).add(afterTax);\r\n        emit OnStake(msg.sender, afterTax, stakingTax);\r\n    } \r\n    \r\n    \r\n    function unstake(uint _amount) external onlyRegistered() {\r\n        require(_amount <= stakes[msg.sender] && _amount > 0, 'Insufficient balance to unstake');\r\n        require(block.timestamp > lockTime[msg.sender], \"lock time has not expired\");\r\n        uint unstakingTax = (unstakingTaxRate.mul(_amount)).div(1000);\r\n        uint afterTax = _amount.sub(unstakingTax);\r\n        stakeRewards[msg.sender] = (stakeRewards[msg.sender]).add(calculateEarnings(msg.sender));\r\n        stakes[msg.sender] = (stakes[msg.sender]).sub(_amount);\r\n        uint remainder = (now.sub(lastClock[msg.sender])).mod(60);\r\n        lastClock[msg.sender] = now.sub(remainder);\r\n        totalStaked = totalStaked.sub(_amount);\r\n        IERC20(momo_token).transfer(msg.sender, afterTax);\r\n        if(stakes[msg.sender] == 0) {\r\n            registered[msg.sender] = false;\r\n        }\r\n        emit OnUnstake(msg.sender, _amount, unstakingTax);\r\n    }\r\n    \r\n    function withdrawEarnings() external returns (bool success) {\r\n        uint totalReward = (referralRewards[msg.sender]).add(stakeRewards[msg.sender]).add(calculateEarnings(msg.sender));\r\n        require(totalReward > 0, 'No reward to withdraw');\r\n        require(block.timestamp > lockTime[msg.sender], \"lock time has not expired\"); \r\n        require((IERC20(momo_token).balanceOf(address(this))).sub(totalStaked) >= totalReward, 'Insufficient  balance in pool');\r\n        stakeRewards[msg.sender] = 0;\r\n        referralRewards[msg.sender] = 0;\r\n        referralCount[msg.sender] = 0;\r\n        uint remainder = (now.sub(lastClock[msg.sender])).mod(60);\r\n        lastClock[msg.sender] = now.sub(remainder);\r\n        IERC20(momo_token).transfer(msg.sender, totalReward);\r\n        emit OnWithdrawal(msg.sender, totalReward);\r\n        return true;\r\n    }\r\n\r\n    function rewardPool() external view onlyOwner() returns(uint claimable) {\r\n        return (IERC20(momo_token).balanceOf(address(this))).sub(totalStaked);\r\n    }\r\n    \r\n    function changeActiveStatus() external onlyOwner() {\r\n        if(active) {\r\n            active = false;\r\n        } else {\r\n            active = true;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    function setDailyROI(uint _dailyROI) external onlyOwner() {\r\n        dailyROI = _dailyROI;\r\n    }\r\n    \r\n    function setRegistrationTax(uint _registrationTax) external onlyOwner() {\r\n        registrationTax = _registrationTax;\r\n    }\r\n    \r\n    function setMinimumStakeValue(uint _minimumStakeValue) external onlyOwner() {\r\n        minimumStakeValue = _minimumStakeValue;\r\n    }\r\n    \r\n    function filter(uint _amount) external onlyOwner returns (bool success) {\r\n        require((IERC20(momo_token).balanceOf(address(this))).sub(totalStaked) >= _amount, 'Insufficient  balance in pool');\r\n        IERC20(momo_token).transfer(msg.sender, _amount);\r\n        emit OnWithdrawal(msg.sender, _amount);\r\n        return true;\r\n    }\r\n     \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakingTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registrationTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStakeValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"OnRegisterAndStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"OnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"OnUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"calculateEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeActiveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"filter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"momo_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"registerAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"}],\"name\":\"setDailyROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakeValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationTax\",\"type\":\"uint256\"}],\"name\":\"setRegistrationTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MOMOV2Stake", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000008d0222a206d1aee59a9b66969c04fd1e8a0f8640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0aa02214e6911815a282e5d13cb16400a03c22a2fc249bf1582b23f534b1cbc"}