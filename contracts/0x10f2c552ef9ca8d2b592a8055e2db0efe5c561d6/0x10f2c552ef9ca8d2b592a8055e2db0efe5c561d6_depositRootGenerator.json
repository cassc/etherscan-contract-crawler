{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/libraries/DepositRootGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../MembershipManager.sol\\\";\\nimport \\\"../LiquidityPool.sol\\\";\\n\\nlibrary depositRootGenerator {\\n    uint constant GWEI = 1e9;\\n\\n    function generateDepositRoot(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes calldata withdrawal_credentials,\\n        uint256 _amountIn\\n    ) public pure returns (bytes32) {\\n\\n        uint deposit_amount = _amountIn / GWEI;\\n        bytes memory amount = to_little_endian_64(uint64(deposit_amount));\\n\\n        bytes32 pubkey_root = sha256(abi.encodePacked(pubkey, bytes16(0)));\\n        bytes32 signature_root = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(signature[:64])),\\n                sha256(abi.encodePacked(signature[64:], bytes32(0)))\\n            )\\n        );\\n        return\\n            sha256(\\n                abi.encodePacked(\\n                    sha256(\\n                        abi.encodePacked(pubkey_root, withdrawal_credentials)\\n                    ),\\n                    sha256(abi.encodePacked(amount, bytes24(0), signature_root))\\n                )\\n            );\\n    }\\n\\n    function to_little_endian_64(\\n        uint64 value\\n    ) internal pure returns (bytes memory ret) {\\n        ret = new bytes(8);\\n        bytes8 bytesValue = bytes8(value);\\n        // Byteswapping during copying to bytes.\\n        ret[0] = bytesValue[7];\\n        ret[1] = bytesValue[6];\\n        ret[2] = bytesValue[5];\\n        ret[3] = bytesValue[4];\\n        ret[4] = bytesValue[3];\\n        ret[5] = bytesValue[2];\\n        ret[6] = bytesValue[1];\\n        ret[7] = bytesValue[0];\\n    }\\n}\"\r\n    },\r\n    \"src/MembershipManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin-upgradeable/contracts/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IeETH.sol\\\";\\nimport \\\"./interfaces/IMembershipManager.sol\\\";\\nimport \\\"./interfaces/IMembershipNFT.sol\\\";\\nimport \\\"./interfaces/ILiquidityPool.sol\\\";\\nimport \\\"./interfaces/IEtherFiAdmin.sol\\\";\\n\\nimport \\\"./libraries/GlobalIndexLibrary.sol\\\";\\n\\nimport \\\"forge-std/console.sol\\\";\\n\\ncontract MembershipManager is Initializable, OwnableUpgradeable, PausableUpgradeable, UUPSUpgradeable, IMembershipManager {\\n\\n    //--------------------------------------------------------------------------------------\\n    //---------------------------------  STATE-VARIABLES  ----------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    IeETH public eETH;\\n    ILiquidityPool public liquidityPool;\\n    IMembershipNFT public membershipNFT;\\n    address public treasury;\\n    address public DEPRECATED_protocolRevenueManager;\\n\\n    mapping (uint256 => uint256) public allTimeHighDepositAmount;\\n    mapping (uint256 => TokenDeposit) public tokenDeposits;\\n    mapping (uint256 => TokenData) public tokenData;\\n    TierDeposit[] public tierDeposits;\\n    TierData[] public tierData;\\n\\n    // [BEGIN] SLOT 261\\n\\n    uint16 public pointsBoostFactor; // + (X / 10000) more points, if staking rewards are sacrificed\\n    uint16 public pointsGrowthRate; // + (X / 10000) kwei points are earned per ETH per day\\n    uint56 public minDepositGwei;\\n    uint8  public maxDepositTopUpPercent;\\n\\n    uint16 private mintFee; // fee = 0.001 ETH * 'mintFee'\\n    uint16 private burnFee; // fee = 0.001 ETH * 'burnFee'\\n    uint16 private upgradeFee; // fee = 0.001 ETH * 'upgradeFee'\\n    uint8 public DEPRECATED_treasuryFeeSplitPercent;\\n    uint8 public DEPRECATED_protocolRevenueFeeSplitPercent;\\n\\n    uint32 public topUpCooltimePeriod;\\n    uint32 public withdrawalLockBlocks;\\n\\n    uint16 private fanBoostThreshold; // = 0.001 ETH * fanBoostThreshold\\n    uint16 private burnFeeWaiverPeriodInDays;\\n\\n    // [END] SLOT 261 END\\n\\n    uint128 public DEPRECATED_sharesReservedForRewards;\\n\\n    address public DEPRECATED_admin;\\n    mapping(address => bool) public admins;\\n\\n    // Phase 2\\n    TierVault[] public tierVaults;\\n\\n    IEtherFiAdmin public etherFiAdmin;\\n\\n    //--------------------------------------------------------------------------------------\\n    //-------------------------------------  EVENTS  ---------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    event FundsMigrated(address indexed user, uint256 _tokenId, uint256 _amount, uint256 _eapPoints, uint40 _loyaltyPoints, uint40 _tierPoints);\\n    event NftUpdated(uint256 _tokenId, uint128 _amount, uint128 _amountSacrificedForBoostingPoints, uint40 _loyaltyPoints, uint40 _tierPoints, uint8 _tier, uint32 _prevTopUpTimestamp, uint96 _share);\\n    event NftUnwrappedForEEth(address indexed _user, uint256 indexed _tokenId, uint256 _amountOfEEth, uint40 _loyaltyPoints, uint256 _feeAmount);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    receive() external payable {}\\n\\n    //--------------------------------------------------------------------------------------\\n    //----------------------------  STATE-CHANGING FUNCTIONS  ------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    error Deprecated();\\n    error DisallowZeroAddress();\\n    error WrongVersion();\\n\\n    // To be called for Phase 2 contract upgrade\\n    function initializeOnUpgrade(address _etherFiAdminAddress, uint256 _fanBoostThresholdAmount, uint16 _burnFeeWaiverPeriodInDays) external onlyOwner {\\n        etherFiAdmin = IEtherFiAdmin(_etherFiAdminAddress);\\n        fanBoostThreshold = uint16(_fanBoostThresholdAmount / 0.001 ether);\\n        burnFeeWaiverPeriodInDays = _burnFeeWaiverPeriodInDays;\\n        while (tierVaults.length < tierData.length) {\\n            tierVaults.push(TierVault(0, 0));\\n        }\\n        admins[_etherFiAdminAddress] = true;\\n    }\\n\\n    error InvalidEAPRollover();\\n\\n    /// @notice EarlyAdopterPool users can re-deposit and mint a membership NFT claiming their points & tiers\\n    /// @dev The deposit amount must be greater than or equal to what they deposited into the EAP\\n    /// @param _amount amount of ETH to earn staking rewards.\\n    /// @param _amountForPoints amount of ETH to boost earnings of {loyalty, tier} points\\n    /// @param _eapDepositBlockNumber the block number at which the user deposited into the EAP\\n    /// @param _snapshotEthAmount exact balance that the user has in the merkle snapshot\\n    /// @param _points EAP points that the user has in the merkle snapshot\\n    /// @param _merkleProof array of hashes forming the merkle proof for the user\\n    function wrapEthForEap(\\n        uint256 _amount,\\n        uint256 _amountForPoints,\\n        uint32  _eapDepositBlockNumber,\\n        uint256 _snapshotEthAmount,\\n        uint256 _points,\\n        bytes32[] calldata _merkleProof\\n    ) external payable whenNotPaused returns (uint256) {\\n        if (_points == 0 || msg.value < _snapshotEthAmount || msg.value > _snapshotEthAmount * 2 || msg.value != _amount + _amountForPoints) revert InvalidEAPRollover();\\n\\n        membershipNFT.processDepositFromEapUser(msg.sender, _eapDepositBlockNumber, _snapshotEthAmount, _points, _merkleProof);\\n        uint40 loyaltyPoints = uint40(_min(_points, type(uint40).max));\\n        uint40 tierPoints = membershipNFT.computeTierPointsForEap(_eapDepositBlockNumber);\\n\\n        liquidityPool.deposit{value: msg.value}(msg.sender, address(0));\\n\\n        uint256 tokenId = _mintMembershipNFT(msg.sender, msg.value - _amountForPoints, _amountForPoints, loyaltyPoints, tierPoints);\\n\\n        _emitNftUpdateEvent(tokenId);\\n        emit FundsMigrated(msg.sender, tokenId, msg.value, _points, loyaltyPoints, tierPoints);\\n        return tokenId;\\n    }\\n\\n    error InvalidDeposit();\\n    error InvalidAllocation();\\n    error InvalidAmount();\\n    error InsufficientBalance();\\n\\n    /// @notice Wraps ETH into a membership NFT.\\n    /// @dev This function allows users to wrap their ETH into membership NFT.\\n    /// @param _amount amount of ETH to earn staking rewards.\\n    /// @param _amountForPoints amount of ETH to boost earnings of {loyalty, tier} points\\n    /// @return tokenId The ID of the minted membership NFT.\\n    function wrapEth(uint256 _amount, uint256 _amountForPoints, address _referral) public payable whenNotPaused returns (uint256) {\\n        uint256 feeAmount = uint256(mintFee) * 0.001 ether;\\n        uint256 depositPerNFT = _amount + _amountForPoints;\\n        uint256 ethNeededPerNFT = depositPerNFT + feeAmount;\\n\\n        if (depositPerNFT / 1 gwei < minDepositGwei || msg.value != ethNeededPerNFT) revert InvalidDeposit();\\n\\n        return _wrapEth(_amount, _amountForPoints, _referral);\\n    }\\n\\n    function wrapEth(uint256 _amount, uint256 _amountForPoints) external payable whenNotPaused returns (uint256) {\\n        return wrapEth(_amount, _amountForPoints, address(0));\\n    }\\n\\n    function unwrapForEEthAndBurn(uint256 _tokenId) external whenNotPaused {\\n        _requireTokenOwner(_tokenId);\\n\\n        // Claim all staking rewards before burn\\n        _claimStakingRewards(_tokenId);\\n        _migrateFromV0ToV1(_tokenId);\\n\\n        uint40 loyaltyPoints = membershipNFT.loyaltyPointsOf(_tokenId);\\n        (uint256 totalBalance, uint256 feeAmount) = _withdrawAndBurn(_tokenId);\\n\\n        // transfer 'eEthShares' of eETH to the owner\\n        eETH.transfer(msg.sender, totalBalance - feeAmount);\\n\\n        if (feeAmount > 0) {\\n            liquidityPool.withdraw(address(this), feeAmount);\\n        }\\n\\n        emit NftUnwrappedForEEth(msg.sender, _tokenId, totalBalance - feeAmount, loyaltyPoints, feeAmount);\\n    }\\n\\n    /// @notice Increase your deposit tied to this NFT within the configured percentage limit.\\n    /// @dev Can only be done once per month\\n    /// @param _tokenId ID of NFT token\\n    /// @param _amount amount of ETH to earn staking rewards.\\n    /// @param _amountForPoints amount of ETH to boost earnings of {loyalty, tier} points\\n    function topUpDepositWithEth(uint256 _tokenId, uint128 _amount, uint128 _amountForPoints) public payable whenNotPaused {\\n        _requireTokenOwner(_tokenId);\\n\\n        claim(_tokenId);\\n\\n        uint256 additionalDeposit = _topUpDeposit(_tokenId, _amount, _amountForPoints);\\n        liquidityPool.deposit{value: additionalDeposit}(msg.sender, address(0));\\n        _emitNftUpdateEvent(_tokenId);\\n    }\\n\\n    error ExceededMaxWithdrawal();\\n    error InsufficientLiquidity();\\n    error RequireTokenUnlocked();\\n\\n    /// @notice Requests exchange of membership points tokens for ETH.\\n    /// @dev decrements the amount of eETH backing the membership NFT and calls requestWithdraw on the liquidity pool\\n    /// @param _tokenId The ID of the membership NFT.\\n    /// @param _amount The amount of membership tokens to exchange.\\n    /// @return uint256 ID of the withdraw request NFT\\n    function requestWithdraw(uint256 _tokenId, uint256 _amount) external whenNotPaused returns (uint256) {\\n        _requireTokenOwner(_tokenId);\\n\\n        // prevent transfers for several blocks after a withdrawal to prevent frontrunning\\n        membershipNFT.incrementLock(_tokenId, withdrawalLockBlocks);\\n\\n        claim(_tokenId);\\n        if (!membershipNFT.isWithdrawable(_tokenId, _amount)) revert ExceededMaxWithdrawal();\\n\\n        uint256 prevAmount = ethAmountForVaultShare(tokenData[_tokenId].tier, tokenData[_tokenId].vaultShare);\\n        _updateAllTimeHighDepositOf(_tokenId);\\n        _withdraw(_tokenId, _amount);\\n        _applyUnwrapPenalty(_tokenId, prevAmount, _amount);\\n\\n        // send EETH to recipient before requesting withdraw?\\n        eETH.approve(address(liquidityPool), _amount);\\n        uint256 withdrawTokenId = liquidityPool.requestMembershipNFTWithdraw(address(msg.sender), _amount, uint64(0));\\n\\n        _emitNftUpdateEvent(_tokenId);\\n        return withdrawTokenId;\\n    }\\n\\n    /// @notice request to withdraw the entire balance of this NFT and burn it\\n    /// @dev burns the NFT and calls requestWithdraw on the liquidity pool\\n    /// @param _tokenId ID of the membership NFT to liquidate\\n    /// @return uint256 ID of the withdraw request NFT\\n    function requestWithdrawAndBurn(uint256 _tokenId) external whenNotPaused returns (uint256) {\\n        _requireTokenOwner(_tokenId);\\n\\n        // Claim all staking rewards before burn\\n        _claimStakingRewards(_tokenId);\\n        _migrateFromV0ToV1(_tokenId);\\n\\n        (uint256 totalBalance, uint256 feeAmount) = _withdrawAndBurn(_tokenId);\\n\\n        eETH.approve(address(liquidityPool), totalBalance);\\n        uint256 withdrawTokenId = liquidityPool.requestMembershipNFTWithdraw(msg.sender, totalBalance, feeAmount);\\n        \\n        return withdrawTokenId;\\n    }\\n\\n    /// @notice Claims {points, staking rewards} and update the tier, if needed.\\n    /// @param _tokenId The ID of the membership NFT.\\n    /// @dev This function allows users to claim the rewards + a new tier, if eligible.\\n    function claim(uint256 _tokenId) public whenNotPaused {\\n        _claimPoints(_tokenId);\\n        _claimStakingRewards(_tokenId);\\n        _migrateFromV0ToV1(_tokenId);\\n\\n        uint8 oldTier = tokenData[_tokenId].tier;\\n        uint8 newTier = membershipNFT.claimableTier(_tokenId);\\n        if (oldTier != newTier) {\\n            _claimTier(_tokenId, oldTier, newTier);\\n        }\\n        _emitNftUpdateEvent(_tokenId);\\n    }\\n\\n    error InvalidCaller();\\n    function rebase(int128 _accruedRewards) external {\\n        if (msg.sender != address(etherFiAdmin)) revert InvalidCaller();\\n        uint256 ethRewardsPerEEthShareBeforeRebase = liquidityPool.amountForShare(1 ether);\\n        liquidityPool.rebase(_accruedRewards);\\n        uint256 ethRewardsPerEEthShareAfterRebase = liquidityPool.amountForShare(1 ether);\\n\\n        // The balance of MembershipManager contract is used to reward ether.fan stakers (not eETH stakers)\\n        // Eth Rewards Amount per NFT = (eETH share amount of the NFT) * (total rewards ETH amount) / (total eETH share amount in ether.fan)\\n        uint256 etherFanEEthShares = eETH.shares(address(this));\\n        uint256 thresholdAmount = fanBoostThresholdEthAmount();\\n        if (address(this).balance >= thresholdAmount) {\\n            uint256 mintedShare = liquidityPool.deposit{value: thresholdAmount}(address(this), address(0));\\n            ethRewardsPerEEthShareAfterRebase += 1 ether * thresholdAmount / etherFanEEthShares;\\n        }\\n\\n        _distributeStakingRewardsV0(ethRewardsPerEEthShareBeforeRebase, ethRewardsPerEEthShareAfterRebase);\\n        _distributeStakingRewardsV1(ethRewardsPerEEthShareBeforeRebase, ethRewardsPerEEthShareAfterRebase);\\n    }\\n\\n    function claimBatch(uint256[] calldata _tokenIds) public whenNotPaused {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            claim(_tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Distributes staking rewards to eligible stakers.\\n    /// @dev This function distributes staking rewards to eligible NFTs based on their staked tokens and membership tiers.\\n    function _distributeStakingRewardsV0(uint256 _ethRewardsPerEEthShareBeforeRebase, uint256 _ethRewardsPerEEthShareAfterRebase) internal {\\n        uint96[] memory globalIndex = globalIndexLibrary.calculateGlobalIndex(address(this), address(liquidityPool), _ethRewardsPerEEthShareBeforeRebase, _ethRewardsPerEEthShareAfterRebase);\\n        for (uint256 i = 0; i < tierDeposits.length; i++) {\\n            tierDeposits[i].shares = uint128(liquidityPool.sharesForAmount(tierDeposits[i].amounts));\\n            tierData[i].rewardsGlobalIndex = globalIndex[i];\\n        }\\n    }\\n\\n    function _distributeStakingRewardsV1(uint256 _ethRewardsPerEEthShareBeforeRebase, uint256 _ethRewardsPerEEthShareAfterRebase) internal {\\n        uint128[] memory vaultTotalPooledEEthShares = globalIndexLibrary.calculateVaultEEthShares(address(this), address(liquidityPool), _ethRewardsPerEEthShareBeforeRebase, _ethRewardsPerEEthShareAfterRebase);\\n        for (uint256 i = 0; i < tierDeposits.length; i++) {\\n            tierVaults[i].totalPooledEEthShares = vaultTotalPooledEEthShares[i];\\n        }\\n    }\\n\\n    error TierLimitExceeded();\\n    function addNewTier(uint40 _requiredTierPoints, uint24 _weight) external {\\n        _requireAdmin();\\n        if (tierData.length >= type(uint8).max) revert TierLimitExceeded();\\n        tierData.push(TierData(0, _requiredTierPoints, _weight, 0));\\n        tierVaults.push(TierVault(0, 0));\\n    }\\n\\n    error OutOfBound();\\n    function updateTier(uint8 _tier, uint40 _requiredTierPoints, uint24 _weight) external {\\n        _requireAdmin();\\n        if (_tier >= tierData.length) revert OutOfBound();\\n        tierData[_tier].requiredTierPoints = _requiredTierPoints;\\n        tierData[_tier].weight = _weight;\\n    }\\n\\n    /// @notice Sets the points for a given Ethereum address.\\n    /// @dev This function allows the contract owner to set the points for a specific Ethereum address.\\n    /// @param _tokenId The ID of the membership NFT.\\n    /// @param _loyaltyPoints The number of loyalty points to set for the specified NFT.\\n    /// @param _tierPoints The number of tier points to set for the specified NFT.\\n    function setPoints(uint256 _tokenId, uint40 _loyaltyPoints, uint40 _tierPoints) public {\\n        _requireAdmin();\\n        _claimStakingRewards(_tokenId);\\n        _setPoints(_tokenId, _loyaltyPoints, _tierPoints);\\n        _claimTier(_tokenId);\\n        _emitNftUpdateEvent(_tokenId);\\n    }\\n\\n    function updatePointsParams(uint16 _newPointsBoostFactor, uint16 _newPointsGrowthRate) external {\\n        _requireAdmin();\\n        pointsBoostFactor = _newPointsBoostFactor;\\n        pointsGrowthRate = _newPointsGrowthRate;\\n    }\\n\\n    /// @dev set how many blocks a token is locked from trading for after withdrawing\\n    function setWithdrawalLockBlocks(uint32 _blocks) external {\\n        _requireAdmin();\\n        withdrawalLockBlocks = _blocks;\\n    }\\n\\n    /// @notice Updates minimum valid deposit\\n    /// @param _minDepositGwei minimum deposit in wei\\n    /// @param _maxDepositTopUpPercent integer percentage value\\n    function setDepositAmountParams(uint56 _minDepositGwei, uint8 _maxDepositTopUpPercent) external {\\n        _requireAdmin();\\n        minDepositGwei = _minDepositGwei;\\n        maxDepositTopUpPercent = _maxDepositTopUpPercent;\\n    }\\n\\n    /// @notice Updates the time a user must wait between top ups\\n    /// @param _newWaitTime the new time to wait between top ups\\n    function setTopUpCooltimePeriod(uint32 _newWaitTime) external {\\n        _requireAdmin();\\n        topUpCooltimePeriod = _newWaitTime;\\n    }\\n\\n    function setFeeAmounts(uint256 _mintFeeAmount, uint256 _burnFeeAmount, uint256 _upgradeFeeAmount, uint16 _burnFeeWaiverPeriodInDays) external {\\n        _requireAdmin();\\n        _feeAmountSanityCheck(_mintFeeAmount);\\n        _feeAmountSanityCheck(_burnFeeAmount);\\n        _feeAmountSanityCheck(_upgradeFeeAmount);\\n        mintFee = uint16(_mintFeeAmount / 0.001 ether);\\n        burnFee = uint16(_burnFeeAmount / 0.001 ether);\\n        upgradeFee = uint16(_upgradeFeeAmount / 0.001 ether);\\n        burnFeeWaiverPeriodInDays = _burnFeeWaiverPeriodInDays;\\n    }\\n\\n    function setFanBoostThresholdEthAmount(uint256 _fanBoostThresholdEthAmount) external {\\n        _requireAdmin();\\n        fanBoostThreshold = uint16(_fanBoostThresholdEthAmount / 0.001 ether);\\n    }\\n\\n    /// @notice Updates the address of the admin\\n    /// @param _address the new address to set as admin\\n    function updateAdmin(address _address, bool _isAdmin) external onlyOwner {\\n        admins[_address] = _isAdmin;\\n    }\\n\\n    //Pauses the contract\\n    function pauseContract() external {\\n        _requireAdmin();\\n        _pause();\\n    }\\n\\n    //Unpauses the contract\\n    function unPauseContract() external {\\n        _requireAdmin();\\n        _unpause();\\n    }\\n\\n    //--------------------------------------------------------------------------------------\\n    //-------------------------------  INTERNAL FUNCTIONS   --------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    error WrongTokenMinted();\\n\\n    /**\\n    * @dev Internal function to mint a new membership NFT.\\n    * @param _to The address of the recipient of the NFT.\\n    * @param _amount The amount of ETH to earn the staking rewards.\\n    * @param _amountForPoints The amount of ETH to boost the points earnings.\\n    * @param _loyaltyPoints The initial loyalty points for the NFT.\\n    * @param _tierPoints The initial tier points for the NFT.\\n    * @return tokenId The unique ID of the newly minted NFT.\\n    */\\n    function _mintMembershipNFT(address _to, uint256 _amount, uint256 _amountForPoints, uint40 _loyaltyPoints, uint40 _tierPoints) internal returns (uint256) {\\n        uint256 tokenId = membershipNFT.nextMintTokenId();\\n        uint8 tier = tierForPoints(_tierPoints);\\n\\n        uint8 version = 1;\\n        tokenData[tokenId] = TokenData(0, _loyaltyPoints, _tierPoints, uint32(block.timestamp), 0, tier, version);\\n\\n        _deposit(tokenId, _amount, _amountForPoints);\\n\\n        // Finally, we mint the token!\\n        if (tokenId != membershipNFT.mint(_to, 1)) revert WrongTokenMinted();\\n\\n        return tokenId;\\n    }\\n\\n    function _deposit(uint256 _tokenId, uint256 _amount, uint256 _amountForPoints) internal {\\n        if (_amountForPoints != 0) revert Deprecated();\\n        uint8 tier = tokenData[_tokenId].tier;\\n        uint256 eEthShare = liquidityPool.sharesForAmount(_amount + _amountForPoints);\\n        uint96 vaultShare = uint96(vaultShareForEEthShare(tier, eEthShare));\\n\\n        _incrementTokenVaultShareV1(_tokenId, vaultShare);\\n        _incrementTierVaultV1(tier, eEthShare, vaultShare);\\n    }\\n\\n    function _topUpDeposit(uint256 _tokenId, uint128 _amount, uint128 _amountForPoints) internal returns (uint256) {\\n        if (tokenData[_tokenId].version != 1) revert WrongVersion();\\n\\n        // subtract fee from provided ether. Will revert if not enough eth provided\\n        uint256 upgradeFeeAmount = uint256(upgradeFee) * 0.001 ether;\\n        uint256 additionalDeposit = msg.value - upgradeFeeAmount;\\n        if (!canTopUp(_tokenId, additionalDeposit, _amount, _amountForPoints)) revert InvalidDeposit();\\n\\n        TokenData storage token = tokenData[_tokenId];\\n        uint256 totalDeposit = ethAmountForVaultShare(token.tier, token.vaultShare);\\n        uint256 maxDepositWithoutPenalty = (totalDeposit * maxDepositTopUpPercent) / 100;\\n\\n        _deposit(_tokenId, _amount, _amountForPoints);\\n        token.prevTopUpTimestamp = uint32(block.timestamp);\\n\\n        // proportionally dilute tier points if over deposit threshold & update the tier\\n        if (additionalDeposit > maxDepositWithoutPenalty) {\\n            uint256 dilutedPoints = (totalDeposit * token.baseTierPoints) / (additionalDeposit + totalDeposit);\\n            token.baseTierPoints = uint40(dilutedPoints);\\n            _claimTier(_tokenId);\\n        }\\n\\n        return additionalDeposit;\\n    }\\n\\n    function _wrapEth(uint256 _amount, uint256 _amountForPoints, address _referral) internal returns (uint256) {\\n        liquidityPool.deposit{value: _amount + _amountForPoints}(msg.sender, _referral);\\n        uint256 tokenId = _mintMembershipNFT(msg.sender, _amount, _amountForPoints, 0, 0);\\n        _emitNftUpdateEvent(tokenId);\\n        return tokenId;\\n    }\\n\\n    function _withdrawAndBurn(uint256 _tokenId) internal returns (uint256, uint256) {\\n        if (tokenData[_tokenId].version != 1) revert WrongVersion();\\n\\n        uint8 tier = tokenData[_tokenId].tier;\\n        uint256 vaultShare = tokenData[_tokenId].vaultShare;\\n        uint256 ethAmount = ethAmountForVaultShare(tier, vaultShare);\\n        uint256 feeAmount = hasMetBurnFeeWaiverPeriod(_tokenId) ? 0 : uint256(burnFee) * 0.001 ether;\\n        if (ethAmount < feeAmount) revert InsufficientBalance();\\n\\n        _withdraw(_tokenId, ethAmount);\\n        delete tokenData[_tokenId];\\n\\n        membershipNFT.burn(msg.sender, _tokenId, 1);\\n\\n        _emitNftUpdateEvent(_tokenId);\\n\\n        return (ethAmount, feeAmount);\\n    }\\n\\n    function _withdraw(uint256 _tokenId, uint256 _amount) internal {\\n        if (membershipNFT.valueOf(_tokenId) < _amount) revert InsufficientBalance();\\n        if (tokenData[_tokenId].version != 1) revert WrongVersion();\\n\\n        uint8 tier = tokenData[_tokenId].tier;\\n        uint256 vaultShare = vaultShareForEthAmount(tier, _amount);\\n        uint256 eEthShare = liquidityPool.sharesForAmount(_amount);\\n\\n        _decrementTierVaultV1(tier, eEthShare, vaultShare);\\n        _decrementTokenVaultShareV1(_tokenId, vaultShare);        \\n    }\\n\\n    // V0\\n    function _incrementTokenDeposit(uint256 _tokenId, uint256 _amount) internal {\\n        TokenDeposit memory deposit = tokenDeposits[_tokenId];\\n        uint128 newAmount = deposit.amounts + uint128(_amount);\\n        uint128 newShare = uint128(liquidityPool.sharesForAmount(newAmount));\\n        tokenDeposits[_tokenId] = TokenDeposit(\\n            newAmount,\\n            newShare\\n        );\\n    }\\n\\n    function _decrementTokenDeposit(uint256 _tokenId, uint256 _amount) internal {\\n        TokenDeposit memory deposit = tokenDeposits[_tokenId];\\n        uint128 newAmount = deposit.amounts - uint128(_amount);\\n        uint128 newShare = uint128(liquidityPool.sharesForAmount(newAmount));\\n        tokenDeposits[_tokenId] = TokenDeposit(\\n            newAmount,\\n            newShare\\n        );\\n    }\\n\\n    function _incrementTierDeposit(uint256 _tier, uint256 _amount) internal {\\n        TierDeposit memory deposit = tierDeposits[_tier];\\n        uint128 newAmount = deposit.amounts + uint128(_amount);\\n        uint128 newShare = uint128(liquidityPool.sharesForAmount(newAmount));\\n        tierDeposits[_tier] = TierDeposit(\\n            newAmount,\\n            newShare\\n        );\\n    }\\n\\n    function _decrementTierDeposit(uint256 _tier, uint256 _amount) internal {\\n        TierDeposit memory deposit = tierDeposits[_tier];\\n        uint128 newAmount = deposit.amounts - uint128(_amount);\\n        uint128 newShare = uint128(liquidityPool.sharesForAmount(newAmount));\\n        tierDeposits[_tier] = TierDeposit(\\n            newAmount,\\n            newShare\\n        );\\n    }\\n\\n    // V1\\n    function _incrementTokenVaultShareV1(uint256 _tokenId, uint256 _share) internal {\\n        tokenData[_tokenId].vaultShare += uint96(_share);\\n    }\\n\\n    function _decrementTokenVaultShareV1(uint256 _tokenId, uint256 _share) internal {\\n        tokenData[_tokenId].vaultShare -= uint96(_share);\\n    }\\n\\n    function _incrementTierVaultV1(uint8 _tier, uint256 _eEthShare, uint256 _vaultShare) internal {\\n        tierVaults[_tier].totalVaultShares += uint128(_vaultShare);\\n        tierVaults[_tier].totalPooledEEthShares += uint128(_eEthShare);\\n    }\\n\\n    function _decrementTierVaultV1(uint8 _tier, uint256 _eEthShare, uint256 _vaultShare) internal {\\n        tierVaults[_tier].totalVaultShares -= uint128(_vaultShare);\\n        tierVaults[_tier].totalPooledEEthShares -= uint128(_eEthShare);\\n    }\\n\\n    function _claimTier(uint256 _tokenId) internal {\\n        uint8 oldTier = tokenData[_tokenId].tier;\\n        uint8 newTier = membershipNFT.claimableTier(_tokenId);\\n        _claimTier(_tokenId, oldTier, newTier);\\n    }\\n\\n    error UnexpectedTier();\\n\\n    function _claimTier(uint256 _tokenId, uint8 _curTier, uint8 _newTier) internal {\\n        if (tokenData[_tokenId].tier != _curTier) revert UnexpectedTier();\\n        if (_curTier == _newTier) {\\n            return;\\n        }\\n        \\n        uint256 prevVaultShare = tokenData[_tokenId].vaultShare;\\n        uint256 eEthShare = eEthShareForVaultShare(_curTier, prevVaultShare);\\n        uint256 newVaultShare = vaultShareForEEthShare(_newTier, eEthShare);\\n\\n        _decrementTierVaultV1(_curTier, eEthShare, prevVaultShare);\\n        _incrementTierVaultV1(_newTier, eEthShare, newVaultShare);\\n        tokenData[_tokenId].vaultShare = uint96(newVaultShare);\\n        tokenData[_tokenId].tier = _newTier;\\n    }\\n\\n    /// @notice Claims the accrued membership {loyalty, tier} points.\\n    /// @param _tokenId The ID of the membership NFT.\\n    function _claimPoints(uint256 _tokenId) internal {\\n        TokenData storage token = tokenData[_tokenId];\\n        token.baseLoyaltyPoints = membershipNFT.loyaltyPointsOf(_tokenId);\\n        token.baseTierPoints = membershipNFT.tierPointsOf(_tokenId);\\n        token.prevPointsAccrualTimestamp = uint32(block.timestamp);\\n    }\\n\\n    error NotEnoughReservedRewards();\\n\\n    /// @notice Claims the staking rewards for a specific membership NFT.\\n    /// @dev This function allows users to claim the staking rewards earned by a specific membership NFT.\\n    /// @param _tokenId The ID of the membership NFT.\\n    function _claimStakingRewards(uint256 _tokenId) internal {\\n        if (tokenData[_tokenId].version != 0) return;\\n\\n        TokenData storage token = tokenData[_tokenId];\\n        uint256 tier = token.tier;\\n        uint256 amount = membershipNFT.accruedStakingRewardsOf(_tokenId);\\n        _incrementTokenDeposit(_tokenId, amount);\\n        _incrementTierDeposit(tier, amount);\\n        \\n        token.vaultShare = tierData[tier].rewardsGlobalIndex;\\n    }\\n\\n\\n    error NotInV0();\\n    function migrateFromV0ToV1(uint256 _tokenId) public {\\n        claim(_tokenId);\\n        _migrateFromV0ToV1(_tokenId);\\n    }\\n\\n    function _migrateFromV0ToV1(uint256 _tokenId) internal {\\n        if (tokenData[_tokenId].version != 0) return;\\n        uint8 tier = tokenData[_tokenId].tier;\\n        uint128 amount = tokenDeposits[_tokenId].amounts;\\n\\n        // Remove from V0\\n        _decrementTokenDeposit(_tokenId, amount);\\n        _decrementTierDeposit(tier, amount);\\n\\n        // Insert Into the Vault\\n        uint256 eEthShare = liquidityPool.sharesForAmount(amount);\\n        uint96 vaultShare = uint96(vaultShareForEEthShare(tier, eEthShare));\\n        _incrementTierVaultV1(tier, eEthShare, vaultShare);\\n\\n        tokenData[_tokenId].vaultShare = vaultShare;\\n        tokenData[_tokenId].version = 1;\\n\\n        delete tokenDeposits[_tokenId];\\n    }\\n\\n    function eEthShareForVaultShare(uint8 _tier, uint256 _vaultShare) public view returns (uint256) {\\n        uint256 amount;\\n        if (tierVaults[_tier].totalVaultShares == 0) {\\n            amount = 0;\\n        } else {\\n            amount = (_vaultShare * tierVaults[_tier].totalPooledEEthShares) / tierVaults[_tier].totalVaultShares;\\n        }\\n        return amount;\\n    }\\n\\n    function vaultShareForEEthShare(uint8 _tier, uint256 _eEthShare) public view returns (uint256) {\\n        uint256 vaultShare;\\n        if (tierVaults[_tier].totalPooledEEthShares == 0) {\\n            vaultShare = _eEthShare;\\n        } else {\\n            vaultShare = (_eEthShare * tierVaults[_tier].totalVaultShares) / tierVaults[_tier].totalPooledEEthShares;\\n        }\\n        return vaultShare;\\n    }\\n\\n    function ethAmountForVaultShare(uint8 _tier, uint256 _vaultShare) public view returns (uint256) {\\n        uint256 eEthShare = eEthShareForVaultShare(_tier, _vaultShare);\\n        return liquidityPool.amountForShare(eEthShare);\\n    }\\n\\n    function vaultShareForEthAmount(uint8 _tier, uint256 _ethAmount) public view returns (uint256) {\\n        uint256 eEthshare = liquidityPool.sharesForAmount(_ethAmount);\\n        return vaultShareForEEthShare(_tier, eEthshare);\\n    }\\n\\n    function fanBoostThresholdEthAmount() public view returns (uint256) {\\n        return uint256(fanBoostThreshold) * 0.001 ether;\\n    }\\n\\n    function hasMetBurnFeeWaiverPeriod(uint256 _tokenId) public view returns (bool) {\\n        uint256 stakingPeriod = membershipNFT.tierPointsOf(_tokenId) / 24;\\n        return stakingPeriod >= burnFeeWaiverPeriodInDays;\\n    }\\n\\n    function _updateAllTimeHighDepositOf(uint256 _tokenId) internal {\\n        allTimeHighDepositAmount[_tokenId] = membershipNFT.allTimeHighDepositOf(_tokenId);\\n    }\\n\\n    error OnlyTokenOwner();\\n    function _requireTokenOwner(uint256 _tokenId) internal view {\\n        if (membershipNFT.balanceOfUser(msg.sender, _tokenId) != 1) revert OnlyTokenOwner();\\n    }\\n\\n    error OnlyAdmin();\\n    function _requireAdmin() internal view {\\n        if (!admins[msg.sender]) revert OnlyAdmin();\\n    }\\n\\n    function _feeAmountSanityCheck(uint256 _feeAmount) internal pure {\\n        if (_feeAmount % 0.001 ether != 0 || _feeAmount / 0.001 ether > type(uint16).max) revert InvalidAmount();\\n    }\\n\\n    error IntegerOverflow();\\n\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b) ? _b : _a;\\n    }\\n\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b) ? _a : _b;\\n    }\\n\\n    /// @notice Applies the unwrap penalty.\\n    /// @dev Always lose at least a tier, possibly more depending on percentage of deposit withdrawn\\n    /// @param _tokenId The ID of the membership NFT.\\n    /// @param _prevAmount The amount of ETH that the NFT was holding\\n    /// @param _withdrawalAmount The amount of ETH that is being withdrawn\\n    function _applyUnwrapPenalty(uint256 _tokenId, uint256 _prevAmount, uint256 _withdrawalAmount) internal {\\n        TokenData storage token = tokenData[_tokenId];\\n        uint8 prevTier = token.tier > 0 ? token.tier - 1 : 0;\\n        uint40 curTierPoints = token.baseTierPoints;\\n\\n        // point deduction if we kick back to start of previous tier\\n        uint40 degradeTierPenalty = curTierPoints - tierData[prevTier].requiredTierPoints;\\n\\n        // point deduction if scaled proportional to withdrawal amount\\n        uint256 ratio = (10000 * _withdrawalAmount) / _prevAmount;\\n        uint40 scaledTierPointsPenalty = uint40((ratio * curTierPoints) / 10000);\\n\\n        uint40 penalty = uint40(_max(degradeTierPenalty, scaledTierPointsPenalty));\\n\\n        token.baseTierPoints -= penalty;\\n        _claimTier(_tokenId);\\n    }\\n\\n    function _setPoints(uint256 _tokenId, uint40 _loyaltyPoints, uint40 _tierPoints) internal {\\n        TokenData storage token = tokenData[_tokenId];\\n        token.baseLoyaltyPoints = _loyaltyPoints;\\n        token.baseTierPoints = _tierPoints;\\n        token.prevPointsAccrualTimestamp = uint32(block.timestamp);\\n    }\\n\\n    function _emitNftUpdateEvent(uint256 _tokenId) internal {\\n        uint128 amount = uint128(membershipNFT.valueOf(_tokenId));\\n        TokenData memory token = tokenData[_tokenId];\\n        emit NftUpdated(_tokenId, amount, 0,\\n                        token.baseLoyaltyPoints, token.baseTierPoints, token.tier,\\n                        token.prevTopUpTimestamp, token.vaultShare);\\n    }\\n\\n    // Finds the corresponding for the tier points\\n    function tierForPoints(uint40 _tierPoints) public view returns (uint8) {\\n        uint8 tierId = 0;\\n\\n        while (tierId < tierData.length && _tierPoints >= tierData[tierId].requiredTierPoints) {\\n            tierId++;\\n        }\\n\\n        return tierId - 1;\\n    }\\n\\n    function canTopUp(uint256 _tokenId, uint256 _totalAmount, uint128 _amount, uint128 _amountForPoints) public view returns (bool) {\\n        uint32 prevTopUpTimestamp = tokenData[_tokenId].prevTopUpTimestamp;\\n        if (block.timestamp - uint256(prevTopUpTimestamp) < topUpCooltimePeriod) return false;\\n        if (_totalAmount != _amount + _amountForPoints) return false;\\n        return true;\\n    }\\n\\n    function numberOfTiers() external view returns (uint8) {\\n        return uint8(tierData.length);\\n    }\\n\\n    function minimumAmountForMint() external view returns (uint256) {\\n        return uint256(1 gwei) * minDepositGwei;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    //--------------------------------------------------------------------------------------\\n    //--------------------------------------  GETTER  --------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    // returns (mintFeeAmount, burnFeeAmount, upgradeFeeAmount)\\n    function getFees() external view returns (uint256 mintFeeAmount, uint256 burnFeeAmount, uint256 upgradeFeeAmount) {\\n        return (uint256(mintFee) * 0.001 ether, uint256(burnFee) * 0.001 ether, uint256(upgradeFee) * 0.001 ether);\\n    }\\n\\n    function rewardsGlobalIndex(uint8 _tier) external view returns (uint256) {\\n        return tierData[_tier].rewardsGlobalIndex;\\n    }\\n\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    //--------------------------------------------------------------------------------------\\n    //------------------------------------  MODIFIER  --------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n}\\n\"\r\n    },\r\n    \"src/LiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IRegulationsManager.sol\\\";\\nimport \\\"./interfaces/IStakingManager.sol\\\";\\nimport \\\"./interfaces/IEtherFiNodesManager.sol\\\";\\nimport \\\"./interfaces/IeETH.sol\\\";\\nimport \\\"./interfaces/IStakingManager.sol\\\";\\nimport \\\"./interfaces/IMembershipManager.sol\\\";\\nimport \\\"./interfaces/ITNFT.sol\\\";\\nimport \\\"./interfaces/IWithdrawRequestNFT.sol\\\";\\nimport \\\"./interfaces/ILiquidityPool.sol\\\";\\nimport \\\"./interfaces/IEtherFiAdmin.sol\\\";\\n\\ncontract LiquidityPool is Initializable, OwnableUpgradeable, UUPSUpgradeable, ILiquidityPool {\\n    //--------------------------------------------------------------------------------------\\n    //---------------------------------  STATE-VARIABLES  ----------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    IStakingManager public stakingManager;\\n    IEtherFiNodesManager public nodesManager;\\n    IRegulationsManager public DEPRECATED_regulationsManager;\\n    IMembershipManager public membershipManager;\\n    ITNFT public tNft;\\n    IeETH public eETH; \\n\\n    bool public DEPRECATED_eEthliquidStakingOpened;\\n\\n    uint128 public totalValueOutOfLp;\\n    uint128 public totalValueInLp;\\n\\n    address public DEPRECATED_admin;\\n\\n    uint32 public numPendingDeposits; // number of deposits to the staking manager, which needs 'registerValidator'\\n\\n    address public DEPRECATED_bNftTreasury;\\n    IWithdrawRequestNFT public withdrawRequestNFT;\\n\\n    BnftHolder[] public bnftHolders;\\n    uint128 public maxValidatorsPerOwner;\\n    uint128 public schedulingPeriodInSeconds;\\n\\n    HoldersUpdate public holdersUpdate;\\n\\n    mapping(address => bool) public admins;\\n    mapping(SourceOfFunds => FundStatistics) public fundStatistics;\\n    mapping(uint256 => bytes32) public depositDataRootForApprovalDeposits;\\n    address public etherFiAdminContract;\\n    bool public whitelistEnabled;\\n    mapping(address => bool) public whitelisted;\\n    mapping(address => BnftHoldersIndex) public bnftHoldersIndexes;\\n\\n    // TODO(Dave): Before we go to mainnet consider packing this with other variables\\n    bool public restakeBnftDeposits;\\n    uint128 public ethAmountLockedForWithdrawal;\\n    bool public paused;\\n\\n    //--------------------------------------------------------------------------------------\\n    //-------------------------------------  EVENTS  ---------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    event Deposit(address indexed sender, uint256 amount, SourceOfFunds source, address referral);\\n    event Withdraw(address indexed sender, address recipient, uint256 amount, SourceOfFunds source);\\n    event UpdatedWhitelist(address userAddress, bool value);\\n    event BnftHolderDeregistered(address user, uint256 index);\\n    event BnftHolderRegistered(address user, uint256 index);\\n    event UpdatedSchedulingPeriod(uint128 newPeriodInSeconds);\\n    event ValidatorRegistered(uint256 indexed validatorId, bytes signature, bytes pubKey, bytes32 depositRoot);\\n    event ValidatorApproved(uint256 indexed validatorId);\\n    event ValidatorRegistrationCanceled(uint256 indexed validatorId);\\n    event Rebase(uint256 totalEthLocked, uint256 totalEEthShares);\\n    event WhitelistStatusUpdated(bool value);\\n\\n    error IncorrectCaller();\\n    error InvalidAmount();\\n    error InvalidParams();\\n    error DataNotSet();\\n    error InsufficientLiquidity();\\n    error SendFail();\\n\\n    //--------------------------------------------------------------------------------------\\n    //----------------------------  STATE-CHANGING FUNCTIONS  ------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    receive() external payable {\\n        if (msg.value > type(uint128).max) revert InvalidAmount();\\n        totalValueOutOfLp -= uint128(msg.value);\\n        totalValueInLp += uint128(msg.value);\\n    }\\n\\n    function initialize(address _eEthAddress, address _stakingManagerAddress, address _nodesManagerAddress, address _membershipManagerAddress, address _tNftAddress) external initializer {\\n        if (_eEthAddress == address(0) || _stakingManagerAddress == address(0) || _nodesManagerAddress == address(0) || _membershipManagerAddress == address(0) || _tNftAddress == address(0)) revert DataNotSet();\\n        \\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        eETH = IeETH(_eEthAddress);\\n        stakingManager = IStakingManager(_stakingManagerAddress);\\n        nodesManager = IEtherFiNodesManager(_nodesManagerAddress);\\n        membershipManager = IMembershipManager(_membershipManagerAddress);\\n        tNft = ITNFT(_tNftAddress);\\n    }\\n\\n    /// @notice Allows us to set needed variable state in phase 2\\n    /// @dev This data and functions are used to help with our staking router process. This helps us balance the use of funds\\n    ///         being allocated to deposits. It also means we are able to give permissions to certain operators to run deposits only\\n    ///         only from specific deposits\\n    /// @param _schedulingPeriod the time we want between scheduling periods\\n    /// @param _eEthNumVal the number of validators to set for eEth\\n    /// @param _etherFanNumVal the number of validators to set for ether fan\\n    function initializeOnUpgrade(uint128 _schedulingPeriod, uint32 _eEthNumVal, uint32 _etherFanNumVal, address _etherFiAdminContract, address _withdrawRequestNFT) external onlyOwner { \\n        require(_etherFiAdminContract != address(0) && _withdrawRequestNFT != address(0), \\\"No zero addresses\\\");\\n\\n        paused = true;\\n        whitelistEnabled = true;\\n        restakeBnftDeposits = false;\\n        ethAmountLockedForWithdrawal = 0;\\n        maxValidatorsPerOwner = 30;\\n        \\n        //Sets what scheduling period we will start with       \\n        schedulingPeriodInSeconds = _schedulingPeriod;\\n\\n        //Allows us to begin with a predefined number of validators\\n        fundStatistics[SourceOfFunds.EETH].numberOfValidators = _eEthNumVal;\\n        fundStatistics[SourceOfFunds.ETHER_FAN].numberOfValidators = _etherFanNumVal;\\n\\n        etherFiAdminContract = _etherFiAdminContract;\\n        withdrawRequestNFT = IWithdrawRequestNFT(_withdrawRequestNFT);\\n\\n        admins[_etherFiAdminContract] = true;\\n    }\\n\\n    // Used by eETH staking flow\\n    function deposit() external payable returns (uint256) {\\n        return deposit(address(0));\\n    }\\n\\n    function deposit(address _referral) public payable whenNotPaused returns (uint256) {\\n        require(_isWhitelisted(msg.sender), \\\"Invalid User\\\");\\n\\n        emit Deposit(msg.sender, msg.value, SourceOfFunds.EETH, _referral);\\n\\n        return _deposit();\\n    }\\n\\n    // Used by ether.fan staking flow\\n    function deposit(address _user, address _referral) external payable whenNotPaused returns (uint256) {\\n        if (msg.sender != address(membershipManager)) {\\n            revert IncorrectCaller();\\n        }\\n        require(_user == address(membershipManager) || _isWhitelisted(_user), \\\"Invalid User\\\");\\n\\n        emit Deposit(msg.sender, msg.value, SourceOfFunds.ETHER_FAN, _referral);\\n\\n        return _deposit();\\n    }\\n\\n    /// @notice withdraw from pool\\n    /// @dev Burns user balance from msg.senders account & Sends equal amount of ETH back to the recipient\\n    /// @param _recipient the recipient who will receives the ETH\\n    /// @param _amount the amount to withdraw from contract\\n    /// it returns the amount of shares burned\\n    function withdraw(address _recipient, uint256 _amount) external whenNotPaused returns (uint256) {\\n        uint256 share = sharesForWithdrawalAmount(_amount);\\n        require(msg.sender == address(withdrawRequestNFT) || msg.sender == address(membershipManager), \\\"Incorrect Caller\\\");\\n        if (totalValueInLp < _amount || (msg.sender == address(withdrawRequestNFT) && ethAmountLockedForWithdrawal < _amount) || eETH.balanceOf(msg.sender) < _amount) revert InsufficientLiquidity();\\n        if (_amount > type(uint128).max || _amount == 0 || share == 0) revert InvalidAmount();\\n\\n        totalValueInLp -= uint128(_amount);\\n        if (msg.sender == address(withdrawRequestNFT)) {\\n            ethAmountLockedForWithdrawal -= uint128(_amount);\\n        }\\n\\n        eETH.burnShares(msg.sender, share);\\n\\n        (bool sent, ) = _recipient.call{value: _amount}(\\\"\\\");\\n        if (!sent) revert SendFail();\\n\\n        return share;\\n    }\\n\\n    /// @notice request withdraw from pool and receive a WithdrawRequestNFT\\n    /// @dev Transfers the amount of eETH from msg.senders account to the WithdrawRequestNFT contract & mints an NFT to the msg.sender\\n    /// @param recipient address that will be issued the NFT\\n    /// @param amount requested amount to withdraw from contract\\n    /// @return uint256 requestId of the WithdrawRequestNFT\\n    function requestWithdraw(address recipient, uint256 amount) public whenNotPaused returns (uint256) {\\n        uint256 share = sharesForAmount(amount);\\n        if (amount > type(uint96).max || amount == 0 || share == 0) revert InvalidAmount();\\n\\n        uint256 requestId = withdrawRequestNFT.requestWithdraw(uint96(amount), uint96(share), recipient, 0);\\n        // transfer shares to WithdrawRequestNFT contract from this contract\\n        eETH.transferFrom(msg.sender, address(withdrawRequestNFT), amount);\\n\\n        emit Withdraw(msg.sender, recipient, amount, SourceOfFunds.EETH);\\n\\n        return requestId;\\n    }\\n\\n    /// @notice request withdraw from pool with signed permit data and receive a WithdrawRequestNFT\\n    /// @dev accepts PermitInput signed data to approve transfer of eETH (EIP-2612) so withdraw request can happen in 1 tx\\n    /// @param _owner address that will be issued the NFT\\n    /// @param _amount requested amount to withdraw from contract\\n    /// @param _permit signed permit data to approve transfer of eETH\\n    /// @return uint256 requestId of the WithdrawRequestNFT\\n    function requestWithdrawWithPermit(address _owner, uint256 _amount, PermitInput calldata _permit)\\n        external\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        eETH.permit(msg.sender, address(this), _permit.value, _permit.deadline, _permit.v, _permit.r, _permit.s);\\n        return requestWithdraw(_owner, _amount);\\n    }\\n\\n    /// @notice request withdraw of some or all of the eETH backing a MembershipNFT and receive a WithdrawRequestNFT\\n    /// @dev Transfers the amount of eETH from MembershipManager to the WithdrawRequestNFT contract & mints an NFT to the recipient\\n    /// @param recipient address that will be issued the NFT\\n    /// @param amount requested amount to withdraw from contract\\n    /// @param fee the burn fee to be paid by the recipient when the withdrawal is claimed (WithdrawRequestNFT.claimWithdraw)\\n    /// @return uint256 requestId of the WithdrawRequestNFT\\n    function requestMembershipNFTWithdraw(address recipient, uint256 amount, uint256 fee) public whenNotPaused returns (uint256) {\\n        if (msg.sender != address(membershipManager)) revert IncorrectCaller();\\n        uint256 share = sharesForAmount(amount);\\n        if (amount > type(uint96).max || amount == 0 || share == 0) revert InvalidAmount();\\n\\n        uint256 requestId = withdrawRequestNFT.requestWithdraw(uint96(amount), uint96(share), recipient, fee);\\n        // transfer shares to WithdrawRequestNFT contract\\n        eETH.transferFrom(msg.sender, address(withdrawRequestNFT), amount);\\n\\n        emit Withdraw(msg.sender, recipient, amount, SourceOfFunds.ETHER_FAN);\\n\\n        return requestId;\\n    } \\n\\n    error AboveMaxAllocation();\\n\\n    /// @notice Allows a BNFT player to deposit their 2 ETH and pair with 30 ETH from the LP\\n    /// @dev This function has multiple dependencies that need to be followed before this function will succeed. \\n    /// @param _candidateBidIds validator IDs that have been matched with the BNFT holder on the FE\\n    /// @param _numberOfValidators how many validators the user wants to spin up. This can be less than the candidateBidIds length. \\n    ///         we may have more Ids sent in than needed to spin up incase some ids fail.\\n    /// @return Array of bids that were successfully processed.\\n    function batchDepositAsBnftHolder(uint256[] calldata _candidateBidIds, uint256 _numberOfValidators) external payable whenNotPaused returns (uint256[] memory){\\n        //Checking which indexes form the schedule for the current scheduling period.\\n        (uint256 firstIndex, uint128 lastIndex) = dutyForWeek();\\n        uint32 index = bnftHoldersIndexes[msg.sender].index;\\n\\n        //Need to make sure the BNFT player is assigned for the current period\\n        //See function for details\\n        require(isAssigned(firstIndex, lastIndex, index), \\\"Not assigned\\\");\\n        require(bnftHolders[index].timestamp < uint32(getCurrentSchedulingStartTimestamp()), \\\"Already deposited\\\");\\n        require(msg.value == _numberOfValidators * 2 ether, \\\"Deposit 2 ETH per validator\\\");\\n        require(totalValueInLp + msg.value >= 32 ether * _numberOfValidators, \\\"Not enough balance\\\");\\n\\n        //BNFT players are eligible to spin up anything up to the max amount of validators allowed (maxValidatorsPerOwner),\\n        if(_numberOfValidators > maxValidatorsPerOwner) revert AboveMaxAllocation();\\n    \\n        //Funds in the LP can come from our membership strategy or the eEth staking strategy. We select which source of funds will\\n        //be used for spinning up these deposited ids. See the function for more detail on how we do this.\\n        SourceOfFunds _source = allocateSourceOfFunds();\\n        fundStatistics[_source].numberOfValidators += uint32(_numberOfValidators);\\n\\n        uint256 amountFromLp = 30 ether * _numberOfValidators;\\n        if (amountFromLp > type(uint128).max) revert InvalidAmount();\\n\\n        totalValueOutOfLp += uint128(amountFromLp);\\n        totalValueInLp -= uint128(amountFromLp);\\n        numPendingDeposits += uint32(_numberOfValidators);\\n\\n        bnftHolders[index].timestamp = uint32(block.timestamp);\\n\\n        //We then call the Staking Manager contract which handles the rest of the logic\\n        uint256[] memory newValidators = stakingManager.batchDepositWithBidIds{value: 32 ether * _numberOfValidators}(_candidateBidIds, msg.sender, _source, restakeBnftDeposits);\\n        \\n        //Sometimes not all the validators get deposited successfully. We need to check if there were remaining IDs that were not successful\\n        //and refund the BNFT player their 2 ETH for each ID\\n        if (_numberOfValidators > newValidators.length) {\\n            uint256 returnAmount = 2 ether * (_numberOfValidators - newValidators.length);\\n            totalValueOutOfLp += uint128(returnAmount);\\n            totalValueInLp -= uint128(returnAmount);\\n            numPendingDeposits -= uint32(_numberOfValidators - newValidators.length);\\n\\n            (bool sent, ) = msg.sender.call{value: returnAmount}(\\\"\\\");\\n            if (!sent) revert SendFail();\\n        }\\n        \\n        return newValidators;\\n    }\\n\\n    /// @notice BNFT players register validators they have deposited. This triggers a 1 ETH transaction to the beacon chain.\\n    /// @dev This function can only be called by a BNFT player on IDs that have been deposited.  \\n    /// @param _depositRoot This is the deposit root of the beacon chain. Can send in 0x00 to bypass this check in future\\n    /// @param _validatorIds The ids of the validators to register\\n    /// @param _registerValidatorDepositData As in the solo staking flow, the BNFT player must send in a deposit data object (see ILiquidityPool for struct data)\\n    ///         to register the validators. However, the signature and deposit data root must be for a 1 ETH deposit\\n    /// @param _depositDataRootApproval The deposit data roots for each validator for the 31 ETH transaction which will happen in the approval\\n    ///         step. See the Staking Manager for details.\\n    /// @param _signaturesForApprovalDeposit Much like the deposit data root. This is the signature for each validator for the 31 ETH \\n    ///         transaction which will happen in the approval step.\\n    function batchRegisterAsBnftHolder(\\n        bytes32 _depositRoot,\\n        uint256[] calldata _validatorIds,\\n        IStakingManager.DepositData[] calldata _registerValidatorDepositData,\\n        bytes32[] calldata _depositDataRootApproval,\\n        bytes[] calldata _signaturesForApprovalDeposit\\n    ) external whenNotPaused {\\n        require(_validatorIds.length == _registerValidatorDepositData.length && _validatorIds.length == _depositDataRootApproval.length && _validatorIds.length == _signaturesForApprovalDeposit.length, \\\"lengths differ\\\");\\n\\n        stakingManager.batchRegisterValidators(_depositRoot, _validatorIds, msg.sender, address(this), _registerValidatorDepositData, msg.sender);\\n        \\n        //For each validator, we need to store the deposit data root of the 31 ETH transaction so it is accessible in the approve function\\n        for(uint256 i; i < _validatorIds.length; i++) {\\n            depositDataRootForApprovalDeposits[_validatorIds[i]] = _depositDataRootApproval[i];\\n            emit ValidatorRegistered(_validatorIds[i], _signaturesForApprovalDeposit[i], _registerValidatorDepositData[i].publicKey, _depositDataRootApproval[i]);\\n        }\\n    }\\n\\n    /// @notice Approves validators and triggers the 31 ETH transaction to the beacon chain (rest of the stake).\\n    /// @dev This gets called by the Oracle and only when it has confirmed the withdraw credentials of the 1 ETH deposit in the registration\\n    ///         phase match the withdraw credentials stored on the beacon chain. This prevents a front-running attack.\\n    /// @param _validatorIds The IDs of the validators to be approved\\n    /// @param _pubKey The pubKey for each validator being spun up.\\n    /// @param _signature The signatures for each validator for the 31 ETH transaction that were emitted in the register phase\\n    function batchApproveRegistration(\\n        uint256[] memory _validatorIds, \\n        bytes[] calldata _pubKey,\\n        bytes[] calldata _signature\\n    ) external onlyAdmin whenNotPaused {\\n        require(_validatorIds.length == _pubKey.length && _validatorIds.length == _signature.length, \\\"lengths differ\\\");\\n\\n        //Fetches the deposit data root of each validator and uses it in the approval call to the Staking Manager\\n        bytes32[] memory depositDataRootApproval = new bytes32[](_validatorIds.length);\\n        for(uint256 i; i < _validatorIds.length; i++) {\\n            depositDataRootApproval[i] = depositDataRootForApprovalDeposits[_validatorIds[i]];\\n            delete depositDataRootForApprovalDeposits[_validatorIds[i]];        \\n\\n            emit ValidatorApproved(_validatorIds[i]);\\n        }\\n\\n        numPendingDeposits -= uint32(_validatorIds.length);\\n        stakingManager.batchApproveRegistration(_validatorIds, _pubKey, _signature, depositDataRootApproval);\\n    }\\n\\n    /// @notice Cancels a BNFT players deposits (whether validator is registered or deposited. Just not live on beacon chain)\\n    /// @dev This is called only in the BNFT player flow\\n    /// @param _validatorIds The IDs to be cancelled\\n    function batchCancelDeposit(uint256[] calldata _validatorIds) external whenNotPaused {\\n        uint256 returnAmount;\\n\\n        //Due to the way we handle our totalValueOutOfLP calculations, we need to update the data before we call the Staking Manager\\n        //For this reason, we first need to check which phase each validator is in. Because if a bNFT cancels a validator that has \\n        //already been registered, they only receive 1 ETH back because the other 1 ETH is in the beacon chain. Those funds will be lost\\n        for (uint256 i = 0; i < _validatorIds.length; i++) {\\n            if(nodesManager.phase(_validatorIds[i]) == IEtherFiNode.VALIDATOR_PHASE.WAITING_FOR_APPROVAL) {\\n                returnAmount += 1 ether;\\n\\n                emit ValidatorRegistrationCanceled(_validatorIds[i]);\\n            } else {\\n                returnAmount += 2 ether;\\n            }\\n        }\\n\\n        totalValueOutOfLp += uint128(returnAmount);\\n        numPendingDeposits -= uint32(_validatorIds.length);\\n        stakingManager.batchCancelDepositAsBnftHolder(_validatorIds, msg.sender);\\n        totalValueInLp -= uint128(returnAmount);\\n\\n        (bool sent, ) = address(msg.sender).call{value: returnAmount}(\\\"\\\");\\n        if (!sent) revert SendFail();\\n    }\\n\\n    /// @notice The admin can register an address to become a BNFT holder. This adds them to the bnftHolders array\\n    /// @dev BNFT players reach out to Etherfi externally and then Etherfi will register them\\n    /// @param _user The address of the BNFT player to register\\n    function registerAsBnftHolder(address _user) public onlyAdmin {      \\n        require(!bnftHoldersIndexes[_user].registered, \\\"Already registered\\\");  \\n\\n        //We update the holdersUpdate data for help in calculation of the duty for the week.\\n        _checkHoldersUpdateStatus();\\n\\n        //We hold the users address and latest deposit timestamp in an object to make sure a user doesnt deposit twice in one scheduling period\\n        BnftHolder memory bnftHolder = BnftHolder({\\n            holder: _user,\\n            timestamp: 0\\n        });\\n\\n        uint256 index = bnftHolders.length;\\n\\n        bnftHolders.push(bnftHolder);\\n        bnftHoldersIndexes[_user] = BnftHoldersIndex({\\n            registered: true,\\n            index: uint32(index)\\n        });\\n\\n        emit BnftHolderRegistered(_user, index);\\n    }\\n\\n    /// @notice Removes a BNFT player from the bnftHolders array and means they are no longer eligible to be selected\\n    /// @dev We allow either the user themselves or admins to remove BNFT players\\n    /// @param _bNftHolder Address of the BNFT player to remove\\n    function deRegisterBnftHolder(address _bNftHolder) external {\\n        require(bnftHoldersIndexes[_bNftHolder].registered, \\\"Not registered\\\");\\n        uint256 index = bnftHoldersIndexes[_bNftHolder].index;\\n        require(admins[msg.sender] || msg.sender == bnftHolders[index].holder, \\\"Incorrect Caller\\\");\\n        \\n        uint256 endIndex = bnftHolders.length - 1;\\n        address endUser = bnftHolders[endIndex].holder;\\n\\n        //Swap the end BNFT player with the BNFT player being removed\\n        bnftHolders[index] = bnftHolders[endIndex];\\n        bnftHoldersIndexes[endUser].index = uint32(index);\\n        \\n        //Pop the last user as we have swapped them around\\n        bnftHolders.pop();\\n        delete bnftHoldersIndexes[_bNftHolder];\\n\\n        emit BnftHolderDeregistered(_bNftHolder, index);\\n    }\\n\\n    /// @notice Calculate which BNFT players are currently scheduled and assigned to deposit as a BNFT player.\\n    ///         We don't hold any data, just have the function return a start and finish index of the selected users in the array.\\n    ///         When a user deposits, it calls this function and checks if the user depositing fits inside the first and last index returnd\\n    ///         by this function. The indices can wrap around as well. Lets look at an example of a BNFT array with size 10.\\n    ///\\n    ///         Example:\\n    ///         [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  => firstIndex = 7\\n    ///                                         => lastIndex = 2\\n    ///         Therefore: the selected range would be users [7, 8, 9, 0, 1, 2]. We use the isAssigned function to check if the user is in the selected indices.\\n    ///\\n    /// @return The first index that has been chosen in the array of BNFT holders\\n    /// @return The last index that has been chosen in the array of BNFT holders\\n    function dutyForWeek() public view returns (uint256, uint128) {\\n        // Early termindation if there are no validators to spin up\\n        uint32 numValidatorsToSpinUp = IEtherFiAdmin(etherFiAdminContract).numValidatorsToSpinUp();\\n        if(maxValidatorsPerOwner == 0 || numValidatorsToSpinUp == 0 || numValidatorsToSpinUp / maxValidatorsPerOwner == 0) {\\n            return (0,0);\\n        }\\n\\n        // Fetches a random index in the array. We will use this as the start index.\\n        uint256 index = _getSlotIndex();\\n\\n        // Get the number of BNFT holders we need to spin up the validators\\n        uint128 size = numValidatorsToSpinUp / maxValidatorsPerOwner;\\n\\n        // We use this function to fetch what the last index in the selection will be.\\n        uint128 lastIndex = _fetchLastIndex(size, index);\\n\\n        return (index, lastIndex);\\n    }\\n\\n    /// @notice Send the exit requests as the T-NFT holder\\n    function sendExitRequests(uint256[] calldata _validatorIds) external onlyAdmin {\\n        for (uint256 i = 0; i < _validatorIds.length; i++) {\\n            uint256 validatorId = _validatorIds[i];\\n            nodesManager.sendExitRequest(validatorId);\\n        }\\n    }\\n\\n    /// @notice Rebase by ether.fi\\n    function rebase(int128 _accruedRewards) public {\\n        if (msg.sender != address(membershipManager)) revert IncorrectCaller();\\n        totalValueOutOfLp = uint128(int128(totalValueOutOfLp) + _accruedRewards);\\n\\n        emit Rebase(getTotalPooledEther(), eETH.totalShares());\\n    }\\n\\n    /// @notice Whether or not nodes created via bNFT deposits should be restaked\\n    function setRestakeBnftDeposits(bool _restake) external onlyAdmin {\\n        restakeBnftDeposits = _restake;\\n    }\\n\\n    /// @notice Updates the address of the admin\\n    /// @param _address the new address to set as admin\\n    function updateAdmin(address _address, bool _isAdmin) external onlyOwner {\\n        admins[_address] = _isAdmin;\\n    }\\n\\n    function pauseContract() external onlyAdmin {\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function unPauseContract() external onlyAdmin {\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /// @notice Sets the max number of validators a BNFT can spin up in a given scheduling period\\n    /// @param _newSize the number to set it to\\n    function setNumValidatorsToSpinUpPerSchedulePerBnftHolder(uint128 _newSize) external onlyAdmin {\\n        maxValidatorsPerOwner = _newSize;\\n    }\\n\\n    /// @notice This sets how many seconds will be in a scheduling period for BNFT players\\n    /// @dev This time period gets used in the dutyForWeek function.\\n    /// @param _schedulingPeriodInSeconds The number of seconds to set as the new time period\\n    function setSchedulingPeriodInSeconds(uint128 _schedulingPeriodInSeconds) external onlyAdmin {\\n        schedulingPeriodInSeconds = _schedulingPeriodInSeconds;\\n\\n        emit UpdatedSchedulingPeriod(_schedulingPeriodInSeconds);\\n    }\\n\\n    /// @notice View function to tell other functions how many users are currently eligible for selection\\n    /// @dev If no-one has registered in the current scheduling period then we return the length of the array otherwise,\\n    ///         we return the length of the array before the newly registered BNFT players\\n    /// @return numberOfActiveSlots The number of BNFT holders eligible for selection\\n    function numberOfActiveSlots() public view returns (uint32 numberOfActiveSlots) {\\n        numberOfActiveSlots = uint32(bnftHolders.length);\\n        if(holdersUpdate.timestamp > uint32(getCurrentSchedulingStartTimestamp())) {\\n            numberOfActiveSlots = holdersUpdate.startOfSlotNumOwners;\\n        }\\n    }\\n\\n    /// @notice Sets our targeted ratio of validators for each of the fund sources\\n    /// @dev Fund sources are different ways where the LP receives funds. Currently, there is just through EETH staking and ETHER_FAN (membership manager)\\n    /// @param _eEthWeight The target weight for eEth\\n    /// @param _etherFanWeight The target weight for EtherFan\\n    function setStakingTargetWeights(uint32 _eEthWeight, uint32 _etherFanWeight) external onlyAdmin {\\n        if (_eEthWeight + _etherFanWeight != 100) revert InvalidParams();\\n\\n        fundStatistics[SourceOfFunds.EETH].targetWeight = _eEthWeight;\\n        fundStatistics[SourceOfFunds.ETHER_FAN].targetWeight = _etherFanWeight;\\n    }\\n\\n    function updateWhitelistedAddresses(address[] calldata _users, bool _value) external onlyAdmin {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            whitelisted[_users[i]] = _value;\\n\\n            emit UpdatedWhitelist(_users[i], _value);\\n        }\\n    }\\n\\n    function updateWhitelistStatus(bool _value) external onlyAdmin {\\n        whitelistEnabled = _value;\\n\\n        emit WhitelistStatusUpdated(_value);\\n    }\\n\\n    /// @notice Decreases the number of validators for a certain source of fund\\n    /// @dev When a user deposits, we increment the number of validators in the allocated source object. However, when a BNFT player cancels \\n    ///         their deposits, we need to decrease this again.\\n    /// @param numberOfEethValidators How many eEth validators to decrease\\n    /// @param numberOfEtherFanValidators How many etherFan validators to decrease\\n    function decreaseSourceOfFundsValidators(uint32 numberOfEethValidators, uint32 numberOfEtherFanValidators) external {\\n        if (msg.sender != address(stakingManager)) revert IncorrectCaller();\\n\\n        fundStatistics[SourceOfFunds.EETH].numberOfValidators -= numberOfEethValidators;\\n        fundStatistics[SourceOfFunds.ETHER_FAN].numberOfValidators -= numberOfEtherFanValidators;\\n    }\\n\\n    function addEthAmountLockedForWithdrawal(uint128 _amount) external {\\n        if (msg.sender != address(etherFiAdminContract)) revert IncorrectCaller();\\n\\n        ethAmountLockedForWithdrawal += _amount;\\n    }\\n\\n    //--------------------------------------------------------------------------------------\\n    //------------------------------  INTERNAL FUNCTIONS  ----------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    function _deposit() internal returns (uint256) {\\n        totalValueInLp += uint128(msg.value);\\n        uint256 share = _sharesForDepositAmount(msg.value);\\n        if (msg.value > type(uint128).max || msg.value == 0 || share == 0) revert InvalidAmount();\\n\\n        eETH.mintShares(msg.sender, share);\\n\\n        return share;\\n    }\\n\\n    /// @notice We use this to update our holders struct. This stores how many BNFT players are currently eligible to be selected.\\n    ///         For example, if a BNFT holder has just registered, they are not eligible for selection until the next scheduling period starts.\\n    /// @dev This struct helps us keep dutyForWeek stateless. It keeps track of the timestamp which is used in numberOfActiveSlots.\\n    function _checkHoldersUpdateStatus() internal {\\n        if(holdersUpdate.timestamp < uint32(getCurrentSchedulingStartTimestamp())) {\\n            holdersUpdate.startOfSlotNumOwners = uint32(bnftHolders.length);\\n        }\\n        holdersUpdate.timestamp = uint32(block.timestamp);\\n    }\\n\\n    /// @notice Uses a generic random number generated to calculate a starting index in the bNFT holder array\\n    /// @dev We feel that because a user is not eligible to be selected in the period they are registered, we do not need a more secure \\n    ///         random number generator. Fetching the random number in advance wont help a user manipulate the protocol.\\n    /// @return A starting index for dutyForWeek to use.\\n    function _getSlotIndex() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(block.timestamp / schedulingPeriodInSeconds))) % numberOfActiveSlots();\\n    }\\n\\n    /// @notice Explain to an end user what this does\\n    /// @dev Explain to a developer any extra details\\n    /// @param _size how many BNFT players will be needed to fill the allotment \\n    /// @param _index The first index that we need to start from\\n    /// @return lastIndex the last index to be used in the selection for the current schedule\\n    function _fetchLastIndex(uint128 _size, uint256 _index) internal view returns (uint128 lastIndex){\\n        uint32 numSlots = numberOfActiveSlots();\\n        uint128 tempLastIndex = uint128(_index) + _size - 1;\\n        lastIndex = (tempLastIndex + uint128(numSlots)) % uint128(numSlots);\\n    }\\n\\n    function _isWhitelisted(address _user) internal view returns (bool) {\\n        return (!whitelistEnabled || whitelisted[_user]);\\n    }\\n\\n    function _sharesForDepositAmount(uint256 _depositAmount) internal view returns (uint256) {\\n        uint256 totalPooledEther = getTotalPooledEther() - _depositAmount;\\n        if (totalPooledEther == 0) {\\n            return _depositAmount;\\n        }\\n        return (_depositAmount * eETH.totalShares()) / totalPooledEther;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    //--------------------------------------------------------------------------------------\\n    //------------------------------------  GETTERS  ---------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    /// @notice Selects a source of funds to be used for the deposits\\n    /// @dev The LP has two ways of accumulating funds, through eEth staking and through the ether fan page (membership manager).\\n    ///         We want to manipulate which funds we use per deposit. Example, if someone is making 2 deposits, we want to select where the 60 ETH\\n    ///         should come from. The funds will all be held in the LP but we are storing how many validators are spun up per source on the contract.\\n    ///         We simply check which of the sources is below their target allocation and allocate the deposits to it.\\n    /// @return The chosen source of funds (EETH or ETHER_FAN)\\n    function allocateSourceOfFunds() public view returns (SourceOfFunds) {\\n        uint256 validatorRatio = (fundStatistics[SourceOfFunds.EETH].numberOfValidators * 10_000) / fundStatistics[SourceOfFunds.ETHER_FAN].numberOfValidators;\\n        uint256 weightRatio = (fundStatistics[SourceOfFunds.EETH].targetWeight * 10_000) / fundStatistics[SourceOfFunds.ETHER_FAN].targetWeight;\\n\\n        return validatorRatio > weightRatio ? SourceOfFunds.ETHER_FAN : SourceOfFunds.EETH;\\n    }\\n\\n    /// @notice Fetching the starting timestamp of the current scheduling period\\n    /// @return The timestamp of the begging of the current scheduling period\\n    function getCurrentSchedulingStartTimestamp() public view returns (uint256) {\\n        return block.timestamp - (block.timestamp % schedulingPeriodInSeconds);\\n    }\\n\\n    /// @notice Checks whether the BNFT player with _index is assigned\\n    /// @dev Because we allow a sliding window type selection, we use strict conditions to check whether the provided index is \\n    ///         inside the first and last index.\\n    /// @param _firstIndex The index of the first selected BNFT holder\\n    /// @param _lastIndex The index of the last selected BNFT holder\\n    /// @param _index The index of the BNFT we are checking\\n    /// @return Bool value if the BNFT player is assigned or not\\n    function isAssigned(uint256 _firstIndex, uint128 _lastIndex, uint256 _index) public view returns (bool) {\\n        if(_lastIndex < _firstIndex) {\\n            return (_index <= _lastIndex) || (_index >= _firstIndex && _index < numberOfActiveSlots());\\n        }else {\\n            return _index >= _firstIndex && _index <= _lastIndex;\\n        }\\n    }\\n\\n    function getTotalEtherClaimOf(address _user) external view returns (uint256) {\\n        uint256 staked;\\n        uint256 totalShares = eETH.totalShares();\\n        if (totalShares > 0) {\\n            staked = (getTotalPooledEther() * eETH.shares(_user)) / totalShares;\\n        }\\n        return staked;\\n    }\\n\\n    function getTotalPooledEther() public view returns (uint256) {\\n        return totalValueOutOfLp + totalValueInLp;\\n    }\\n\\n    function sharesForAmount(uint256 _amount) public view returns (uint256) {\\n        uint256 totalPooledEther = getTotalPooledEther();\\n        if (totalPooledEther == 0) {\\n            return 0;\\n        }\\n        return (_amount * eETH.totalShares()) / totalPooledEther;\\n    }\\n\\n    /// @dev withdrawal rounding errors favor the protocol by rounding up\\n    function sharesForWithdrawalAmount(uint256 _amount) public view returns (uint256) {\\n        uint256 totalPooledEther = getTotalPooledEther();\\n        if (totalPooledEther == 0) {\\n            return 0;\\n        }\\n\\n        // ceiling division so rounding errors favor the protocol\\n        uint256 numerator = _amount * eETH.totalShares();\\n        return (numerator + totalPooledEther - 1) / totalPooledEther;\\n    }\\n\\n    function amountForShare(uint256 _share) public view returns (uint256) {\\n        uint256 totalShares = eETH.totalShares();\\n        if (totalShares == 0) {\\n            return 0;\\n        }\\n        return (_share * getTotalPooledEther()) / totalShares;\\n    }\\n\\n    function getImplementation() external view returns (address) {return _getImplementation();}\\n\\n    function _requireAdmin() internal view virtual {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n    }\\n\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused, \\\"Pausable: paused\\\");\\n    }\\n\\n    //--------------------------------------------------------------------------------------\\n    //-----------------------------------  MODIFIERS  --------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    modifier onlyAdmin() {\\n        _requireAdmin();\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IeETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IeETH {\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalShares() external view returns (uint256);\\n\\n    function shares(address _user) external view returns (uint256);\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function initialize(address _liquidityPool) external;\\n    function mintShares(address _user, uint256 _share) external;\\n    function burnShares(address _user, uint256 _share) external;\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n    function increaseAllowance(address _spender, uint256 _increaseAmount) external returns (bool);\\n    function decreaseAllowance(address _spender, uint256 _decreaseAmount) external returns (bool);\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMembershipManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IMembershipManager {\\n\\n    struct TokenDeposit {\\n        uint128 amounts;\\n        uint128 shares;\\n    }\\n\\n    struct TokenData {\\n        uint96 vaultShare;\\n        uint40 baseLoyaltyPoints;\\n        uint40 baseTierPoints;\\n        uint32 prevPointsAccrualTimestamp;\\n        uint32 prevTopUpTimestamp;\\n        uint8  tier;\\n        uint8  version;\\n    }\\n\\n    // Used for V1\\n    struct TierVault {\\n        uint128 totalPooledEEthShares; // total share of eEth in the tier vault\\n        uint128 totalVaultShares; // total share of the tier vault\\n    }\\n\\n    // Used for V0\\n    struct TierDeposit {\\n        uint128 amounts; // total pooled eth amount\\n        uint128 shares; // total pooled eEth shares\\n    }\\n\\n    struct TierData {\\n        uint96 rewardsGlobalIndex;\\n        uint40 requiredTierPoints;\\n        uint24 weight;\\n        uint96  __gap;\\n    }\\n\\n    // State-changing functions\\n    function wrapEthForEap(uint256 _amount, uint256 _amountForPoint, uint32  _eapDepositBlockNumber, uint256 _snapshotEthAmount, uint256 _points, bytes32[] calldata _merkleProof) external payable returns (uint256);\\n    function wrapEth(uint256 _amount, uint256 _amountForPoint) external payable returns (uint256);\\n    function wrapEth(uint256 _amount, uint256 _amountForPoint, address _referral) external payable returns (uint256);\\n\\n    function topUpDepositWithEth(uint256 _tokenId, uint128 _amount, uint128 _amountForPoints) external payable;\\n\\n    function requestWithdraw(uint256 _tokenId, uint256 _amount) external returns (uint256);\\n    function requestWithdrawAndBurn(uint256 _tokenId) external returns (uint256);\\n\\n    function claim(uint256 _tokenId) external;\\n\\n    function migrateFromV0ToV1(uint256 _tokenId) external;\\n\\n    // Getter functions\\n    function tokenDeposits(uint256) external view returns (uint128, uint128);\\n    function tokenData(uint256) external view returns (uint96, uint40, uint40, uint32, uint32, uint8, uint8);\\n    function tierDeposits(uint256) external view returns (uint128, uint128);\\n    function tierData(uint256) external view returns (uint96, uint40, uint24, uint96);\\n\\n    function rewardsGlobalIndex(uint8 _tier) external view returns (uint256);\\n    function allTimeHighDepositAmount(uint256 _tokenId) external view returns (uint256);\\n    function tierForPoints(uint40 _tierPoints) external view returns (uint8);\\n    function canTopUp(uint256 _tokenId, uint256 _totalAmount, uint128 _amount, uint128 _amountForPoints) external view returns (bool);\\n    function pointsBoostFactor() external view returns (uint16);\\n    function pointsGrowthRate() external view returns (uint16);\\n    function maxDepositTopUpPercent() external view returns (uint8);\\n    function numberOfTiers() external view returns (uint8);\\n    function getImplementation() external view returns (address);\\n    function minimumAmountForMint() external view returns (uint256);\\n\\n    function eEthShareForVaultShare(uint8 _tier, uint256 _vaultShare) external view returns (uint256);\\n    function vaultShareForEEthShare(uint8 _tier, uint256 _eEthShare) external view returns (uint256);\\n    function ethAmountForVaultShare(uint8 _tier, uint256 _vaultShare) external view returns (uint256);\\n    function vaultShareForEthAmount(uint8 _tier, uint256 _ethAmount) external view returns (uint256);\\n\\n    // only Owner\\n    function initializeOnUpgrade(address _etherFiAdminAddress, uint256 _fanBoostThresholdAmount, uint16 _burnFeeWaiverPeriodInDays) external;\\n\\n    function setWithdrawalLockBlocks(uint32 _blocks) external;\\n    function updatePointsParams(uint16 _newPointsBoostFactor, uint16 _newPointsGrowthRate) external;\\n    function rebase(int128 _accruedRewards) external;\\n    function addNewTier(uint40 _requiredTierPoints, uint24 _weight) external;\\n    function updateTier(uint8 _tier, uint40 _requiredTierPoints, uint24 _weight) external;\\n    function setPoints(uint256 _tokenId, uint40 _loyaltyPoints, uint40 _tierPoints) external;\\n    function setDepositAmountParams(uint56 _minDepositGwei, uint8 _maxDepositTopUpPercent) external;\\n    function setTopUpCooltimePeriod(uint32 _newWaitTime) external;\\n    function updateAdmin(address _address, bool _isAdmin) external;\\n    function pauseContract() external;\\n    function unPauseContract() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMembershipNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IMembershipNFT is IERC1155Upgradeable {\\n\\n    struct NftData {\\n        uint32 transferLockedUntil; // in terms of blocck number\\n        uint8[28] __gap;\\n    }\\n\\n    function initialize(string calldata _metadataURI, address _membershipManagerAddress) external;\\n    function initializeOnUpgrade(address _liquidityPoolAddress) external;\\n    function computeTierPointsForEap(uint32 _eapDepositBlockNumber) external view returns (uint40);\\n    function setUpForEap(bytes32 _newMerkleRoot, uint64[] calldata _requiredEapPointsPerEapDeposit) external;\\n    function processDepositFromEapUser(address _user, uint32  _eapDepositBlockNumber, uint256 _snapshotEthAmount, uint256 _points, bytes32[] calldata _merkleProof) external;\\n    \\n    function incrementLock(uint256 _tokenId, uint32 _blocks) external;\\n    function mint(address _to, uint256 _amount) external returns (uint256);\\n    function burn(address _from, uint256 _tokenId, uint256 _amount) external;\\n\\n    function nextMintTokenId() external view returns (uint32);\\n    function valueOf(uint256 _tokenId) external view returns (uint256);\\n    function loyaltyPointsOf(uint256 _tokenId) external view returns (uint40);\\n    function tierPointsOf(uint256 _tokenId) external view returns (uint40);\\n    function tierOf(uint256 _tokenId) external view returns (uint8);\\n    function claimableTier(uint256 _tokenId) external view returns (uint8);\\n    function accruedLoyaltyPointsOf(uint256 _tokenId) external view returns (uint40);\\n    function accruedTierPointsOf(uint256 _tokenId) external view returns (uint40);\\n    function accruedStakingRewardsOf(uint256 _tokenId) external view returns (uint);\\n    function canTopUp(uint256 _tokenId, uint256 _totalAmount, uint128 _amount, uint128 _amountForPoints) external view returns (bool);\\n    function isWithdrawable(uint256 _tokenId, uint256 _withdrawalAmount) external view returns (bool);\\n    function allTimeHighDepositOf(uint256 _tokenId) external view returns (uint256);\\n    function transferLockedUntil(uint256 _tokenId) external view returns (uint32);\\n    function balanceOfUser(address _user, uint256 _id) external view returns (uint256);\\n\\n    function contractURI() external view returns (string memory);\\n    function setContractMetadataURI(string calldata _newURI) external;\\n    function setMetadataURI(string calldata _newURI) external;\\n    function setMaxTokenId(uint32 _maxTokenId) external;\\n\\n    function alertMetadataUpdate(uint256 id) external;\\n    function alertBatchMetadataUpdate(uint256 startID, uint256 endID) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IStakingManager.sol\\\";\\n\\ninterface ILiquidityPool {\\n\\n    struct PermitInput {\\n        uint256 value;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    } \\n\\n    enum SourceOfFunds {\\n        UNDEFINED,\\n        EETH,\\n        ETHER_FAN,\\n        DELEGATED_STAKING\\n    }\\n\\n    struct FundStatistics {\\n        uint32 numberOfValidators;\\n        uint32 targetWeight;\\n    }\\n\\n    // Necessary to preserve \\\"statelessness\\\" of dutyForWeek().\\n    // Handles case where new users join/leave holder list during an active slot\\n    struct HoldersUpdate {\\n        uint32 timestamp;\\n        uint32 startOfSlotNumOwners;\\n    }\\n\\n    struct BnftHolder {\\n        address holder;\\n        uint32 timestamp;\\n    }\\n\\n    struct BnftHoldersIndex {\\n        bool registered;\\n        uint32 index;\\n    }\\n\\n    function initialize(address _eEthAddress, address _stakingManagerAddress, address _nodesManagerAddress, address _membershipManagerAddress, address _tNftAddress) external;\\n\\n    function numPendingDeposits() external view returns (uint32);\\n    function totalValueOutOfLp() external view returns (uint128);\\n    function totalValueInLp() external view returns (uint128);\\n    function getTotalEtherClaimOf(address _user) external view returns (uint256);\\n    function getTotalPooledEther() external view returns (uint256);\\n    function sharesForAmount(uint256 _amount) external view returns (uint256);\\n    function sharesForWithdrawalAmount(uint256 _amount) external view returns (uint256);\\n    function amountForShare(uint256 _share) external view returns (uint256);\\n\\n    function deposit() external payable returns (uint256);\\n    function deposit(address _referral) external payable returns (uint256);\\n    function deposit(address _user, address _referral) external payable returns (uint256);\\n    function withdraw(address _recipient, uint256 _amount) external returns (uint256);\\n    function requestWithdraw(address recipient, uint256 amount) external returns (uint256);\\n    function requestWithdrawWithPermit(address _owner, uint256 _amount, PermitInput calldata _permit) external returns (uint256);\\n    function requestMembershipNFTWithdraw(address recipient, uint256 amount, uint256 fee) external returns (uint256);\\n\\n    function batchDepositAsBnftHolder(uint256[] calldata _candidateBidIds, uint256 _numberOfValidators) external payable returns (uint256[] memory);\\n    function batchRegisterAsBnftHolder(bytes32 _depositRoot, uint256[] calldata _validatorIds, IStakingManager.DepositData[] calldata _registerValidatorDepositData, bytes32[] calldata _depositDataRootApproval, bytes[] calldata _signaturesForApprovalDeposit) external;\\n    function batchApproveRegistration(uint256[] memory _validatorIds, bytes[] calldata _pubKey, bytes[] calldata _signature) external;\\n    function batchCancelDeposit(uint256[] calldata _validatorIds) external;\\n    function sendExitRequests(uint256[] calldata _validatorIds) external;\\n\\n    function rebase(int128 _accruedRewards) external;\\n    function addEthAmountLockedForWithdrawal(uint128 _amount) external;\\n    \\n    function setStakingTargetWeights(uint32 _eEthWeight, uint32 _etherFanWeight) external;\\n    function updateAdmin(address _newAdmin, bool _isAdmin) external;\\n    function pauseContract() external;\\n    function unPauseContract() external;\\n    \\n    function decreaseSourceOfFundsValidators(uint32 numberOfEethValidators, uint32 numberOfEtherFanValidators) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IEtherFiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IEtherFiAdmin {\\n    function lastHandledReportRefSlot() external view returns (uint32);\\n    function lastHandledReportRefBlock() external view returns (uint32);\\n    function numValidatorsToSpinUp() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"src/libraries/GlobalIndexLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../MembershipManager.sol\\\";\\nimport \\\"../LiquidityPool.sol\\\";\\nimport \\\"forge-std/console.sol\\\";\\n\\nlibrary globalIndexLibrary {\\n    \\n    error IntegerOverflow();\\n\\n    /**\\n    * @dev This function calculates the global index and adjusted shares for each tier used for reward distribution.\\n    *\\n    * The function performs the following steps:\\n    * 1. Iterates over each tier, computing rebased amounts, tier rewards, weighted tier rewards.\\n    * 2. Sums all the tier rewards and the weighted tier rewards.\\n    * 3. If there are any weighted tier rewards, it iterates over each tier to perform the following actions:\\n    *    a. Computes the amounts eligible for rewards.\\n    *    b. If there are amounts eligible for rewards, \\n    *       it calculates rescaled tier rewards and updates the global index and adjusted shares for the tier.\\n    *\\n    * The rescaling of tier rewards is done based on the weight of each tier. \\n    *\\n    * @notice This function essentially pools all the staking rewards across tiers and redistributes them proportional to the tier weights\\n    * @param _membershipManager the address of the membership manager\\n    * @param _liquidityPool the address of the liquidity pool\\n    * @return globalIndex A uint96 array containing the updated global index for each tier.\\n    */\\n    function calculateGlobalIndex(address _membershipManager, address _liquidityPool, uint256 _ethRewardsPerEEthShareBeforeRebase, uint256 _ethRewardsPerEEthShareAfterRebase) public view returns (uint96[] memory) {\\n        MembershipManager membershipManager = MembershipManager(payable(_membershipManager));\\n        LiquidityPool liquidityPool = LiquidityPool(payable(_liquidityPool));\\n\\n        bool isLoss = _ethRewardsPerEEthShareAfterRebase < _ethRewardsPerEEthShareBeforeRebase;\\n\\n        uint256 ethRewardsAmountPerEEthShare = isLoss ? (_ethRewardsPerEEthShareBeforeRebase - _ethRewardsPerEEthShareAfterRebase) : (_ethRewardsPerEEthShareAfterRebase - _ethRewardsPerEEthShareBeforeRebase);\\n        (uint256[] memory tierRewards, uint24[] memory tierWeights) = calculateRewardsPerTierV0(_membershipManager, _liquidityPool, ethRewardsAmountPerEEthShare);\\n        uint256[] memory rescaledTierRewards = calculateRescaledTierRewards(tierRewards, tierWeights);\\n\\n        uint96[] memory globalIndex = new uint96[](rescaledTierRewards.length);\\n\\n        for (uint256 i = 0; i < rescaledTierRewards.length; i++) {\\n            (uint128 amounts, uint128 shares) = membershipManager.tierDeposits(i);\\n            (uint96 rewardsGlobalIndex, uint40 requiredTierPoints, uint24 weight,) = membershipManager.tierData(i);\\n            globalIndex[i] = rewardsGlobalIndex;\\n            if (shares > 0) {\\n                uint256 delta = 1 ether * rescaledTierRewards[i] / shares;\\n                if (uint256(rewardsGlobalIndex) + uint256(delta) > type(uint96).max) revert IntegerOverflow();\\n                \\n                if (isLoss) {\\n                    globalIndex[i] -= uint96(delta);\\n                } else {\\n                    globalIndex[i] += uint96(delta);\\n                }\\n            }\\n        }\\n\\n        return (globalIndex);\\n    }\\n\\n    function calculateRewardsPerTierV0(address _membershipManager, address _liquidityPool, uint256 _ethRewardsAmountPerEEthShare) public view returns (uint256[] memory, uint24[] memory) {\\n        MembershipManager membershipManager = MembershipManager(payable(_membershipManager));\\n        LiquidityPool liquidityPool = LiquidityPool(payable(_liquidityPool));\\n\\n        uint256 numberOfTiers = membershipManager.numberOfTiers();\\n        uint256[] memory tierRewards = new uint256[](numberOfTiers);\\n        uint24[] memory tierWeights = new uint24[](numberOfTiers);\\n\\n        for (uint256 i = 0; i < numberOfTiers; i++) {\\n            (uint128 amounts, uint128 shares) = membershipManager.tierDeposits(i);\\n            (uint96 rewardsGlobalIndex, uint40 requiredTierPoints, uint24 weight,) = membershipManager.tierData(i);\\n\\n            tierRewards[i] = _ethRewardsAmountPerEEthShare * shares / 1 ether;\\n            tierWeights[i] = weight;\\n        }\\n\\n        return (tierRewards, tierWeights);\\n    }\\n    \\n    // Compute `rescaledTierRewards` for each tier from `tierRewards` and `weight`\\n    function calculateRescaledTierRewards(uint256[] memory tierRewards, uint24[] memory tierWeights) public pure returns (uint256[] memory) {\\n        uint256[] memory weightedTierRewards = new uint256[](tierRewards.length);\\n        uint256[] memory rescaledTierRewards = new uint256[](tierRewards.length);\\n        uint256 sumTierRewards = 0;\\n        uint256 sumWeightedTierRewards = 0;\\n\\n        for (uint256 i = 0; i < tierRewards.length; i++) {\\n            weightedTierRewards[i] = tierWeights[i] * tierRewards[i];\\n\\n            sumTierRewards += tierRewards[i];\\n            sumWeightedTierRewards += weightedTierRewards[i];\\n        }\\n\\n        if (sumWeightedTierRewards > 0) {\\n            for (uint256 i = 0; i < tierRewards.length; i++) {\\n                rescaledTierRewards[i] = weightedTierRewards[i] * sumTierRewards / sumWeightedTierRewards;\\n            }\\n        }\\n\\n        return rescaledTierRewards;\\n    }\\n\\n    function calculateRewardsPerTierV1(address _membershipManager, address _liquidityPool, uint256 _ethRewardsAmountPerEEthShare) public view returns (uint256[] memory, uint24[] memory) {\\n        MembershipManager membershipManager = MembershipManager(payable(_membershipManager));\\n        LiquidityPool liquidityPool = LiquidityPool(payable(_liquidityPool));\\n\\n        uint256 numberOfTiers = membershipManager.numberOfTiers();\\n        uint256[] memory tierRewards = new uint256[](numberOfTiers);\\n        uint24[] memory tierWeights = new uint24[](numberOfTiers);\\n\\n        for (uint256 i = 0; i < numberOfTiers; i++) {\\n            (uint128 totalPooledEEthShares, uint128 totalVaultShares) = membershipManager.tierVaults(i);\\n            (,, uint24 weight,) = membershipManager.tierData(i);\\n\\n            tierRewards[i] = _ethRewardsAmountPerEEthShare * totalPooledEEthShares / 1 ether;\\n            tierWeights[i] = weight;\\n        }\\n\\n        return (tierRewards, tierWeights);\\n    }\\n\\n    // TODO - rewrite it later more efficiently\\n    function calculateVaultEEthShares(address _membershipManager, address _liquidityPool, uint256 _ethRewardsPerEEthShareBeforeRebase, uint256 _ethRewardsPerEEthShareAfterRebase) public view returns (uint128[] memory) {\\n        MembershipManager membershipManager = MembershipManager(payable(_membershipManager));\\n        LiquidityPool liquidityPool = LiquidityPool(payable(_liquidityPool));\\n\\n        bool isLoss = _ethRewardsPerEEthShareAfterRebase < _ethRewardsPerEEthShareBeforeRebase;\\n        uint256 ethRewardsAmountPerEEthShare = isLoss ? (_ethRewardsPerEEthShareBeforeRebase - _ethRewardsPerEEthShareAfterRebase) : (_ethRewardsPerEEthShareAfterRebase - _ethRewardsPerEEthShareBeforeRebase);\\n        (uint256[] memory tierRewards, uint24[] memory tierWeights) = calculateRewardsPerTierV1(_membershipManager, _liquidityPool, ethRewardsAmountPerEEthShare);\\n        uint256[] memory rescaledTierRewards = calculateRescaledTierRewards(tierRewards, tierWeights);\\n\\n        uint128[] memory vaultTotalPooledEEthShares = new uint128[](membershipManager.numberOfTiers());\\n        for (uint256 i = 0; i < vaultTotalPooledEEthShares.length; i++) {\\n            (uint128 totalPooledEEthShares, ) = membershipManager.tierVaults(i);\\n            uint256 prevEthAmount = _ethRewardsPerEEthShareBeforeRebase * totalPooledEEthShares / 1 ether;\\n            uint256 newEthAmount = prevEthAmount;\\n            if (isLoss) {\\n                newEthAmount -= rescaledTierRewards[i];\\n            } else {            \\n                newEthAmount += rescaledTierRewards[i];\\n            }\\n            vaultTotalPooledEEthShares[i] = uint128(liquidityPool.sharesForAmount(newEthAmount));\\n        }\\n        return vaultTotalPooledEEthShares;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/forge-std/src/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRegulationsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IRegulationsManager {\\n    function initialize() external;\\n\\n    function confirmEligibility(bytes32 hash) external;\\n\\n    function removeFromWhitelist(address _user) external;\\n\\n    function initializeNewWhitelist(bytes32 _newVersionHash) external;\\n\\n    function isEligible(uint32 _whitelistVersion, address _user) external view returns (bool);\\n\\n    function whitelistVersion() external view returns (uint32);\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStakingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./ILiquidityPool.sol\\\";\\n\\ninterface IStakingManager {\\n    struct DepositData {\\n        bytes publicKey;\\n        bytes signature;\\n        bytes32 depositDataRoot;\\n        string ipfsHashForEncryptedValidatorKey;\\n    }\\n\\n    struct StakerInfo {\\n        address staker;\\n        ILiquidityPool.SourceOfFunds sourceOfFund;\\n    }\\n\\n    function bidIdToStaker(uint256 id) external view returns (address);\\n\\n    function getEtherFiNodeBeacon() external view returns (address);\\n\\n    function initialize(address _auctionAddress, address _depositContractAddress) external;\\n    function setEtherFiNodesManagerAddress(address _managerAddress) external;\\n    function setLiquidityPoolAddress(address _liquidityPoolAddress) external;\\n    function batchDepositWithBidIds(uint256[] calldata _candidateBidIds, address _staker, ILiquidityPool.SourceOfFunds source, bool _enableRestaking) external payable returns (uint256[] memory);\\n    function batchDepositWithBidIds(uint256[] calldata _candidateBidIds, bool _enableRestaking) external payable returns (uint256[] memory);\\n\\n    function batchRegisterValidators(bytes32 _depositRoot, uint256[] calldata _validatorId, DepositData[] calldata _depositData) external;\\n\\n    function batchRegisterValidators(bytes32 _depositRoot, uint256[] calldata _validatorId, address _bNftRecipient, address _tNftRecipient, DepositData[] calldata _depositData, address _user) external;\\n\\n    function batchApproveRegistration(uint256[] memory _validatorId, bytes[] calldata _pubKey, bytes[] calldata _signature, bytes32[] calldata _depositDataRootApproval) external;\\n\\n    function batchCancelDeposit(uint256[] calldata _validatorIds) external;\\n\\n    function batchCancelDepositAsBnftHolder(uint256[] calldata _validatorIds, address _caller) external;\\n\\n    function updateAdmin(address _address, bool _isAdmin) external;\\n    function pauseContract() external;\\n    function unPauseContract() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IEtherFiNodesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IEtherFiNode.sol\\\";\\nimport \\\"@eigenlayer/contracts/interfaces/IEigenPodManager.sol\\\";\\nimport \\\"@eigenlayer/contracts/interfaces/IDelayedWithdrawalRouter.sol\\\";\\n\\ninterface IEtherFiNodesManager {\\n\\n    struct RewardsSplit {\\n        uint64 treasury;\\n        uint64 nodeOperator;\\n        uint64 tnft;\\n        uint64 bnft;\\n    }\\n\\n    enum ValidatorRecipientType {\\n        TNFTHOLDER,\\n        BNFTHOLDER,\\n        TREASURY,\\n        OPERATOR\\n    }\\n\\n    // VIEW functions\\n    function calculateTVL(uint256 _validatorId, uint256 _beaconBalance) external view returns (uint256, uint256, uint256, uint256);\\n    function calculateWithdrawableTVL(uint256 _validatorId, uint256 _beaconBalance) external view returns (uint256, uint256, uint256, uint256);\\n    function delayedWithdrawalRouter() external view returns (IDelayedWithdrawalRouter);\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n    function generateWithdrawalCredentials(address _address) external view returns (bytes memory);\\n    function getFullWithdrawalPayouts(uint256 _validatorId) external view returns (uint256, uint256, uint256, uint256);\\n    function getNonExitPenalty(uint256 _validatorId) external view returns (uint256);\\n    function getRewardsPayouts(uint256 _validatorId, uint256 _beaconBalance) external view returns (uint256, uint256, uint256, uint256);\\n    function getWithdrawalCredentials(uint256 _validatorId) external view returns (bytes memory);\\n    function ipfsHashForEncryptedValidatorKey(uint256 _validatorId) external view returns (string memory);\\n    function isEvicted(uint256 _validatorId) external view returns (bool);\\n    function isExited(uint256 _validatorId) external view returns (bool);\\n    function isExitRequested(uint256 _validatorId) external view returns (bool);\\n    function isFullyWithdrawn(uint256 _validatorId) external view returns (bool);\\n    function nonExitPenaltyDailyRate() external view returns (uint64);\\n    function nonExitPenaltyPrincipal() external view returns (uint64);\\n    function numberOfValidators() external view returns (uint64);\\n    function phase(uint256 _validatorId) external view returns (IEtherFiNode.VALIDATOR_PHASE phase);\\n\\n    // Non-VIEW functions\\n    function initialize(\\n        address _treasuryContract,\\n        address _auctionContract,\\n        address _stakingManagerContract,\\n        address _tnftContract,\\n        address _bnftContract\\n    ) external;\\n\\n    function batchQueueRestakedWithdrawal(uint256[] calldata _validatorIds) external;\\n    function batchSendExitRequest(uint256[] calldata _validatorIds) external;\\n    function fullWithdrawBatch(uint256[] calldata _validatorIds) external;\\n    function fullWithdraw(uint256 _validatorId) external;\\n    function getUnusedWithdrawalSafesLength() external view returns (uint256);\\n    function incrementNumberOfValidators(uint64 _count) external;\\n    function markBeingSlashed(uint256[] calldata _validatorIds) external;\\n    function partialWithdrawBatch(uint256[] calldata _validatorIds) external;\\n    function partialWithdraw(uint256 _validatorId) external;\\n    function processNodeExit(uint256[] calldata _validatorIds, uint32[] calldata _exitTimestamp) external;\\n    function registerEtherFiNode(uint256 _validatorId, bool _enableRestaking) external returns (address);\\n    function sendExitRequest(uint256 _validatorId) external;\\n    function setEtherFiNodeIpfsHashForEncryptedValidatorKey(uint256 _validatorId, string calldata _ipfs) external;\\n    function setEtherFiNodePhase(uint256 _validatorId, IEtherFiNode.VALIDATOR_PHASE _phase) external;\\n    function setNonExitPenaltyDailyRate(uint64 _nonExitPenaltyDailyRate) external;\\n    function setNonExitPenaltyPrincipal(uint64 _nonExitPenaltyPrincipal) external;\\n    function setStakingRewardsSplit(uint64 _treasury, uint64 _nodeOperator, uint64 _tnft, uint64 _bnf) external;\\n    function unregisterEtherFiNode(uint256 _validatorId) external;\\n    function updateAdmin(address _address, bool _isAdmin) external;\\n    function admins(address _address) external view returns (bool);\\n    function pauseContract() external;\\n    function unPauseContract() external;\\n\\n    function treasuryContract() external view returns (address);\\n    function maxEigenlayerWithdrawals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface ITNFT is IERC721Upgradeable {\\n\\n    function burnFromWithdrawal(uint256 _validatorId) external;\\n    function initialize() external;\\n    function initializeOnUpgrade(address _etherFiNodesManagerAddress) external;\\n    function mint(address _receiver, uint256 _validatorId) external;\\n    function burnFromCancelBNftFlow(uint256 _validatorId) external;\\n    function upgradeTo(address _newImplementation) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWithdrawRequestNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWithdrawRequestNFT {\\n    struct WithdrawRequest {\\n        uint96  amountOfEEth;\\n        uint96  shareOfEEth;\\n        bool    isValid;\\n        uint32  feeGwei;\\n    }\\n\\n    function initialize(address _liquidityPoolAddress, address _eEthAddress, address _membershipManager) external;\\n    function requestWithdraw(uint96 amountOfEEth, uint96 shareOfEEth, address requester, uint256 fee) external payable returns (uint256);\\n    function claimWithdraw(uint256 requestId) external;\\n\\n    function getRequest(uint256 requestId) external view returns (WithdrawRequest memory);\\n    function isFinalized(uint256 requestId) external view returns (bool);\\n\\n    function invalidateRequest(uint256 requestId) external;\\n    function finalizeRequests(uint256 upperBound) external;\\n    function updateAdmin(address _address, bool _isAdmin) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IEtherFiNode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IEtherFiNodesManager.sol\\\";\\n\\ninterface IEtherFiNode {\\n    // State Transition Diagram for StateMachine contract:\\n    //\\n    //      NOT_INITIALIZED\\n    //              |\\n    //      READY_FOR_DEPOSIT\\n    //              \u2193\\n    //      STAKE_DEPOSITED\\n    //           /      \\\\\\n    //          /        \\\\\\n    //         \u2193          \u2193\\n    //         LIVE    CANCELLED\\n    //         |  \\\\ \\\\ \\n    //         |   \\\\ \\\\\\n    //         |   \u2193  --> EVICTED\\n    //         |  BEING_SLASHED\\n    //         |    /\\n    //         |   /\\n    //         \u2193  \u2193\\n    //         EXITED\\n    //           |\\n    //           \u2193\\n    //      FULLY_WITHDRAWN\\n    // Transitions are only allowed as directed above.\\n    // For instance, a transition from STAKE_DEPOSITED to either LIVE or CANCELLED is allowed,\\n    // but a transition from STAKE_DEPOSITED to NOT_INITIALIZED, BEING_SLASHED, or EXITED is not.\\n    //\\n    // All phase transitions should be made through the setPhase function,\\n    // which validates transitions based on these rules.\\n    //\\n    // Fully_WITHDRAWN or CANCELLED nodes can be recycled via resetWithdrawalSafe()\\n    enum VALIDATOR_PHASE {\\n        NOT_INITIALIZED,\\n        STAKE_DEPOSITED,\\n        LIVE,\\n        EXITED,\\n        FULLY_WITHDRAWN,\\n        CANCELLED,\\n        BEING_SLASHED,\\n        EVICTED,\\n        WAITING_FOR_APPROVAL,\\n        READY_FOR_DEPOSIT\\n    }\\n\\n    // VIEW functions\\n    function calculateTVL(uint256 _beaconBalance, uint256 _executionBalance, IEtherFiNodesManager.RewardsSplit memory _SRsplits, uint256 _scale) external view returns (uint256, uint256, uint256, uint256);\\n    function eigenPod() external view returns (address);\\n    function exitRequestTimestamp() external view returns (uint32);\\n    function exitTimestamp() external view returns (uint32);\\n    function getNonExitPenalty(uint32 _tNftExitRequestTimestamp, uint32 _bNftExitRequestTimestamp) external view returns (uint256);\\n    function getStakingRewardsPayouts(uint256 _beaconBalance, IEtherFiNodesManager.RewardsSplit memory _splits, uint256 _scale) external view returns (uint256, uint256, uint256, uint256);\\n    function ipfsHashForEncryptedValidatorKey() external view returns (string memory);\\n    function phase() external view returns (VALIDATOR_PHASE);\\n    function stakingStartTimestamp() external view returns (uint32);\\n\\n    // Non-VIEW functions\\n    function claimQueuedWithdrawals(uint256 maxNumWithdrawals) external;\\n    function createEigenPod() external;\\n    function hasOutstandingEigenLayerWithdrawals() external view returns (bool);\\n    function isRestakingEnabled() external view returns (bool);\\n    function markExited(uint32 _exitTimestamp) external;\\n    function markBeingSlashed() external;\\n    function moveRewardsToManager(uint256 _amount) external;\\n    function queueRestakedWithdrawal() external;\\n    function recordStakingStart(bool _enableRestaking) external;\\n    function resetWithdrawalSafe() external;\\n    function setExitRequestTimestamp(uint32 _timestamp) external;\\n    function setIpfsHashForEncryptedValidatorKey(string calldata _ipfs) external;\\n    function setIsRestakingEnabled(bool _enabled) external;\\n    function setPhase(VALIDATOR_PHASE _phase) external;\\n    function splitBalanceInExecutionLayer() external view returns (uint256 _withdrawalSafe, uint256 _eigenPod, uint256 _delayedWithdrawalRouter);\\n    function totalBalanceInExecutionLayer() external view returns (uint256);\\n    function withdrawableBalanceInExecutionLayer() external view returns (uint256);\\n\\n    function withdrawFunds(\\n        address _treasury,\\n        uint256 _treasuryAmount,\\n        address _operator,\\n        uint256 _operatorAmount,\\n        address _tnftHolder,\\n        uint256 _tnftAmount,\\n        address _bnftHolder,\\n        uint256 _bnftAmount\\n    ) external;\\n\\n\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./IETHPOSDeposit.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IEigenPod.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\n/**\\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\n\\ninterface IEigenPodManager is IPausable {\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct BeaconChainQueuedWithdrawal {\\n        // @notice Number of \\\"beacon chain ETH\\\" virtual shares in the withdrawal.\\n        uint256 shares;\\n        // @notice Owner of the EigenPod who initiated the withdrawal.\\n        address podOwner;\\n        // @notice Nonce of the podOwner when the withdrawal was queued. Used to help ensure uniqueness of the hash of the withdrawal.\\n        uint96 nonce;\\n        // @notice Block number at which the withdrawal was initiated.\\n        uint32 withdrawalStartBlock;\\n        // @notice The operator to which the podOwner was delegated in EigenLayer when the withdrawal was created.\\n        address delegatedAddress;\\n        // @notice The address that can complete the withdrawal and receive the withdrawn funds.\\n        address withdrawer;\\n    }\\n\\n    /**\\n     * @notice Struct used to track a pod owner's \\\"undelegation limbo\\\" status and associated variables.\\n     * @dev Undelegation limbo is a mode which a staker can enter into, in which they remove their virtual \\\"beacon chain ETH shares\\\" from EigenLayer's delegation\\n     * system but do not necessarily withdraw the associated ETH from EigenLayer itself. This mode allows users who have restaked native ETH a route via\\n     * which they can undelegate from an operator without needing to exit any of their validators from the Consensus Layer.\\n     */\\n    struct UndelegationLimboStatus {\\n        // @notice Whether or not the pod owner is in the \\\"undelegation limbo\\\" mode.\\n        bool active;\\n        // @notice The block at which the pod owner entered \\\"undelegation limbo\\\". Should be zero if `podOwnerIsInUndelegationLimbo` is marked as 'false'\\n        uint32 startBlock;\\n        // @notice The address which the pod owner was delegated to at the time that they entered \\\"undelegation limbo\\\".\\n        address delegatedAddress;\\n    }\\n\\n    /// @notice Emitted to notify the update of the beaconChainOracle address\\n    event BeaconOracleUpdated(address indexed newOracleAddress);\\n\\n    /// @notice Emitted to notify the deployment of an EigenPod\\n    event PodDeployed(address indexed eigenPod, address indexed podOwner);\\n\\n    /// @notice Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\\n    event BeaconChainETHDeposited(address indexed podOwner, uint256 amount);\\n\\n    /// @notice Emitted when `maxPods` value is updated from `previousValue` to `newValue`\\n    event MaxPodsUpdated(uint256 previousValue, uint256 newValue);\\n\\n    /// @notice Emitted when a withdrawal of beacon chain ETH is queued\\n    event BeaconChainETHWithdrawalQueued(\\n        address indexed podOwner,\\n        uint256 shares,\\n        uint96 nonce,\\n        address delegatedAddress,\\n        address withdrawer,\\n        bytes32 withdrawalRoot\\n    );\\n\\n    /// @notice Emitted when a withdrawal of beacon chain ETH is completed\\n    event BeaconChainETHWithdrawalCompleted(\\n        address indexed podOwner,\\n        uint256 shares,\\n        uint96 nonce,\\n        address delegatedAddress,\\n        address withdrawer,\\n        bytes32 withdrawalRoot\\n    );\\n\\n    // @notice Emitted when `podOwner` enters the \\\"undelegation limbo\\\" mode\\n    event UndelegationLimboEntered(address indexed podOwner);\\n\\n    // @notice Emitted when `podOwner` exits the \\\"undelegation limbo\\\" mode\\n    event UndelegationLimboExited(address indexed podOwner);\\n\\n    /**\\n     * @notice Creates an EigenPod for the sender.\\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\\n     */\\n    function createPod() external;\\n\\n    /**\\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\\n     * Also creates an EigenPod for the sender if they don't have one already.\\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\\n     * @param signature The validator's signature of the deposit data.\\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\\n     */\\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n\\n    /**\\n     * @notice Deposits/Restakes beacon chain ETH in EigenLayer on behalf of the owner of an EigenPod.\\n     * @param podOwner The owner of the pod whose balance must be deposited.\\n     * @param amount The amount of ETH to 'deposit' (i.e. be credited to the podOwner).\\n     * @dev Callable only by the podOwner's EigenPod contract.\\n     */\\n    function restakeBeaconChainETH(address podOwner, uint256 amount) external;\\n\\n    /**\\n     * @notice Records an update in beacon chain strategy shares in the strategy manager\\n     * @param podOwner is the pod owner whose shares are to be updated,\\n     * @param sharesDelta is the change in podOwner's beaconChainETHStrategy shares\\n     * @dev Callable only by the podOwner's EigenPod contract.\\n     */\\n    function recordBeaconChainETHBalanceUpdate(address podOwner, int256 sharesDelta) external;\\n\\n    /**\\n     * @notice Called by a podOwner to queue a withdrawal of some (or all) of their virtual beacon chain ETH shares.\\n     * @param amountWei The amount of ETH to withdraw.\\n     * @param withdrawer The address that can complete the withdrawal and receive the withdrawn funds.\\n     */\\n    function queueWithdrawal(uint256 amountWei, address withdrawer) external returns (bytes32);\\n\\n    /**\\n     * @notice Completes an existing BeaconChainQueuedWithdrawal by sending the ETH to the 'withdrawer'\\n     * @param queuedWithdrawal is the queued withdrawal to be completed\\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n     */\\n    function completeQueuedWithdrawal(\\n        BeaconChainQueuedWithdrawal memory queuedWithdrawal,\\n        uint256 middlewareTimesIndex\\n    ) external;\\n\\n    /**\\n     * @notice forces the podOwner into the \\\"undelegation limbo\\\" mode, and returns the number of virtual 'beacon chain ETH shares'\\n     * that the podOwner has, which were entered into undelegation limbo.\\n     * @param podOwner is the staker to be forced into undelegation limbo\\n     * @param delegatedTo is the operator the staker is currently delegated to\\n     * @dev This function can only be called by the DelegationManager contract\\n     */\\n    function forceIntoUndelegationLimbo(\\n        address podOwner,\\n        address delegatedTo\\n    ) external returns (uint256 sharesRemovedFromDelegation);\\n\\n    /**\\n     * @notice Updates the oracle contract that provides the beacon chain state root\\n     * @param newBeaconChainOracle is the new oracle contract being pointed to\\n     * @dev Callable only by the owner of this contract (i.e. governance)\\n     */\\n    function updateBeaconChainOracle(IBeaconChainOracle newBeaconChainOracle) external;\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\\n    function ownerToPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\\n    function getPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice The ETH2 Deposit Contract\\n    function ethPOS() external view returns (IETHPOSDeposit);\\n\\n    /// @notice Beacon proxy to which the EigenPods point\\n    function eigenPodBeacon() external view returns (IBeacon);\\n\\n    /// @notice Oracle contract that provides updates to the beacon chain's state\\n    function beaconChainOracle() external view returns (IBeaconChainOracle);\\n\\n    /// @notice Returns the beacon block root at `timestamp`. Reverts if the Beacon block root at `timestamp` has not yet been finalized.\\n    function getBlockRootAtTimestamp(uint64 timestamp) external view returns (bytes32);\\n\\n    /// @notice EigenLayer's StrategyManager contract\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice EigenLayer's Slasher contract\\n    function slasher() external view returns (ISlasher);\\n\\n    function hasPod(address podOwner) external view returns (bool);\\n\\n    /// @notice returns shares of provided podOwner\\n    function podOwnerShares(address podOwner) external returns (uint256);\\n\\n    /// @notice returns canonical, virtual beaconChainETH strategy\\n    function beaconChainETHStrategy() external view returns (IStrategy);\\n\\n    /// @notice Returns the keccak256 hash of `queuedWithdrawal`.\\n    function calculateWithdrawalRoot(\\n        BeaconChainQueuedWithdrawal memory queuedWithdrawal\\n    ) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns 'false' if `staker` has removed all of their beacon chain ETH \\\"shares\\\" from delegation, either by queuing a\\n     * withdrawal for them OR by going into \\\"undelegation limbo\\\", and 'true' otherwise\\n     */\\n    function podOwnerHasActiveShares(address staker) external view returns (bool);\\n\\n    // @notice Getter function for the internal `_podOwnerUndelegationLimboStatus` mapping.\\n    function podOwnerUndelegationLimboStatus(address podOwner) external view returns (UndelegationLimboStatus memory);\\n\\n    // @notice Getter function for `_podOwnerUndelegationLimboStatus.undelegationLimboActive`.\\n    function isInUndelegationLimbo(address podOwner) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IDelayedWithdrawalRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\ninterface IDelayedWithdrawalRouter {\\n    // struct used to pack data into a single storage slot\\n    struct DelayedWithdrawal {\\n        uint224 amount;\\n        uint32 blockCreated;\\n    }\\n\\n    // struct used to store a single users delayedWithdrawal data\\n    struct UserDelayedWithdrawals {\\n        uint256 delayedWithdrawalsCompleted;\\n        DelayedWithdrawal[] delayedWithdrawals;\\n    }\\n\\n     /// @notice event for delayedWithdrawal creation\\n    event DelayedWithdrawalCreated(address podOwner, address recipient, uint256 amount, uint256 index);\\n\\n    /// @notice event for the claiming of delayedWithdrawals\\n    event DelayedWithdrawalsClaimed(address recipient, uint256 amountClaimed, uint256 delayedWithdrawalsCompleted);\\n\\n    /// @notice Emitted when the `withdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event WithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\\n\\n    /**\\n     * @notice Creates an delayed withdrawal for `msg.value` to the `recipient`.\\n     * @dev Only callable by the `podOwner`'s EigenPod contract.\\n     */\\n    function createDelayedWithdrawal(address podOwner, address recipient) external payable;\\n\\n    /**\\n     * @notice Called in order to withdraw delayed withdrawals made to the `recipient` that have passed the `withdrawalDelayBlocks` period.\\n     * @param recipient The address to claim delayedWithdrawals for.\\n     * @param maxNumberOfWithdrawalsToClaim Used to limit the maximum number of withdrawals to loop through claiming.\\n     */\\n    function claimDelayedWithdrawals(address recipient, uint256 maxNumberOfWithdrawalsToClaim) external;\\n\\n    /**\\n     * @notice Called in order to withdraw delayed withdrawals made to the caller that have passed the `withdrawalDelayBlocks` period.\\n     * @param maxNumberOfWithdrawalsToClaim Used to limit the maximum number of withdrawals to loop through claiming.\\n     */\\n    function claimDelayedWithdrawals(uint256 maxNumberOfWithdrawalsToClaim) external;\\n\\n    /// @notice Owner-only function for modifying the value of the `withdrawalDelayBlocks` variable.\\n    function setWithdrawalDelayBlocks(uint256 newValue) external;\\n\\n    /// @notice Getter function for the mapping `_userWithdrawals`\\n    function userWithdrawals(address user) external view returns (UserDelayedWithdrawals memory);\\n\\n    /// @notice Getter function to get all delayedWithdrawals of the `user`\\n    function getUserDelayedWithdrawals(address user) external view returns (DelayedWithdrawal[] memory);\\n\\n    /// @notice Getter function to get all delayedWithdrawals that are currently claimable by the `user`\\n    function getClaimableUserDelayedWithdrawals(address user) external view returns (DelayedWithdrawal[] memory);\\n\\n    /// @notice Getter function for fetching the delayedWithdrawal at the `index`th entry from the `_userWithdrawals[user].delayedWithdrawals` array\\n    function userDelayedWithdrawalByIndex(address user, uint256 index) external view returns (DelayedWithdrawal memory);\\n\\n    /// @notice Getter function for fetching the length of the delayedWithdrawals array of a specific user\\n    function userWithdrawalsLength(address user) external view returns (uint256);\\n\\n    /// @notice Convenience function for checking whether or not the delayedWithdrawal at the `index`th entry from the `_userWithdrawals[user].delayedWithdrawals` array is currently claimable\\n    function canClaimDelayedWithdrawal(address user, uint256 index) external view returns (bool);\\n\\n    /**\\n     * @notice Delay enforced by this contract for completing any delayedWithdrawal. Measured in blocks, and adjustable by this contract's owner,\\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\\n     */\\n    function withdrawalDelayBlocks() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IETHPOSDeposit.sol\": {\r\n      \"content\": \"// \u250f\u2501\u2501\u2501\u2513\u2501\u250f\u2513\u2501\u250f\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\\n// \u2503\u250f\u2501\u2501\u251b\u250f\u251b\u2517\u2513\u2503\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2517\u2513\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\\n// \u2503\u2517\u2501\u2501\u2513\u2517\u2513\u250f\u251b\u2503\u2517\u2501\u2513\u2517\u251b\u250f\u251b\u2503\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2513\u2517\u2513\u250f\u251b\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2517\u251b\u250f\u2501\u2501\u2513\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2513\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2517\u2513\u250f\u251b\\n// \u2503\u250f\u2501\u2501\u251b\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u250f\u2501\u251b\u250f\u251b\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u2501\u2501\u252b\u2523\u252b\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u250f\u2513\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u251b\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2501\u251b\u2501\u2503\u2503\u2501\\n// \u2503\u2517\u2501\u2501\u2513\u2501\u2503\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u250f\u2513\u2503\u2517\u2501\u251b\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u251b\u2503\u2503\u2503\u2501\u252b\u2503\u2517\u251b\u2503\u2503\u2517\u251b\u2503\u2523\u2501\u2501\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u251b\u2503\u2503\u2517\u251b\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u2503\u2517\u251b\u2517\u2513\u2503\u2517\u2501\u2513\u2501\u2503\u2517\u2513\\n// \u2517\u2501\u2501\u2501\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2503\u250f\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2517\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\n// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity >=0.5.0;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IETHPOSDeposit {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManager {\\n    // packed struct for queued withdrawals; helps deal with stack-too-deep errors\\n    struct WithdrawerAndNonce {\\n        address withdrawer;\\n        uint96 nonce;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct QueuedWithdrawal {\\n        IStrategy[] strategies;\\n        uint256[] shares;\\n        address depositor;\\n        WithdrawerAndNonce withdrawerAndNonce;\\n        uint32 withdrawalStartBlock;\\n        address delegatedAddress;\\n    }\\n\\n    /**\\n     * @notice Emitted when a new deposit occurs on behalf of `depositor`.\\n     * @param depositor Is the staker who is depositing funds into EigenLayer.\\n     * @param strategy Is the strategy that `depositor` has deposited into.\\n     * @param token Is the token that `depositor` deposited.\\n     * @param shares Is the number of new shares `depositor` has been granted in `strategy`.\\n     */\\n    event Deposit(address depositor, IERC20 token, IStrategy strategy, uint256 shares);\\n\\n    /**\\n     * @notice Emitted when a new withdrawal occurs on behalf of `depositor`.\\n     * @param depositor Is the staker who is queuing a withdrawal from EigenLayer.\\n     * @param nonce Is the withdrawal's unique identifier (to the depositor).\\n     * @param strategy Is the strategy that `depositor` has queued to withdraw from.\\n     * @param shares Is the number of shares `depositor` has queued to withdraw.\\n     */\\n    event ShareWithdrawalQueued(address depositor, uint96 nonce, IStrategy strategy, uint256 shares);\\n\\n    /**\\n     * @notice Emitted when a new withdrawal is queued by `depositor`.\\n     * @param depositor Is the staker who is withdrawing funds from EigenLayer.\\n     * @param nonce Is the withdrawal's unique identifier (to the depositor).\\n     * @param withdrawer Is the party specified by `staker` who will be able to complete the queued withdrawal and receive the withdrawn funds.\\n     * @param delegatedAddress Is the party who the `staker` was delegated to at the time of creating the queued withdrawal\\n     * @param withdrawalRoot Is a hash of the input data for the withdrawal.\\n     */\\n    event WithdrawalQueued(\\n        address depositor,\\n        uint96 nonce,\\n        address withdrawer,\\n        address delegatedAddress,\\n        bytes32 withdrawalRoot\\n    );\\n\\n    /// @notice Emitted when a queued withdrawal is completed\\n    event WithdrawalCompleted(\\n        address indexed depositor,\\n        uint96 nonce,\\n        address indexed withdrawer,\\n        bytes32 withdrawalRoot\\n    );\\n\\n    /// @notice Emitted when the `strategyWhitelister` is changed\\n    event StrategyWhitelisterChanged(address previousAddress, address newAddress);\\n\\n    /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\\n    event StrategyAddedToDepositWhitelist(IStrategy strategy);\\n\\n    /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\\n    event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\\n\\n    /// @notice Emitted when the `withdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event WithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the depositor\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n     *\\n     * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n     */\\n    function depositIntoStrategy(IStrategy strategy, IERC20 token, uint256 amount) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\\n     * who must sign off on the action.\\n     * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n     * purely to help one address deposit 'for' another.\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the depositor\\n     * @param staker the staker that the deposited assets will be credited to\\n     * @param expiry the timestamp at which the signature expires\\n     * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n     * following EIP-1271 if the `staker` is a contract\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n     * targeting stakers who may be attempting to undelegate.\\n     * @dev Cannot be called on behalf of a staker that is 'frozen' (this function will revert if the `staker` is frozen).\\n     *\\n     *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\\n     */\\n    function depositIntoStrategyWithSignature(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount,\\n        address staker,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external returns (uint256 shares);\\n\\n    /// @notice Returns the current shares of `user` in `strategy`\\n    function stakerStrategyShares(address user, IStrategy strategy) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the depositor's deposits and corresponding shares\\n     * @return (depositor's strategies, shares in these strategies)\\n     */\\n    function getDeposits(address depositor) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\\n    function stakerStrategyListLength(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Called by a staker to queue a withdrawal of the given amount of `shares` from each of the respective given `strategies`.\\n     * @dev Stakers will complete their withdrawal by calling the 'completeQueuedWithdrawal' function.\\n     * User shares are decreased in this function, but the total number of shares in each strategy remains the same.\\n     * The total number of shares is decremented in the 'completeQueuedWithdrawal' function instead, which is where\\n     * the funds are actually sent to the user through use of the strategies' 'withdrawal' function. This ensures\\n     * that the value per share reported by each strategy will remain consistent, and that the shares will continue\\n     * to accrue gains during the enforced withdrawal waiting period.\\n     * @param strategyIndexes is a list of the indices in `stakerStrategyList[msg.sender]` that correspond to the strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @param strategies The Strategies to withdraw from\\n     * @param shares The amount of shares to withdraw from each of the respective Strategies in the `strategies` array\\n     * @param withdrawer The address that can complete the withdrawal and will receive any withdrawn funds or shares upon completing the withdrawal\\n     * @return The 'withdrawalRoot' of the newly created Queued Withdrawal\\n     * @dev Strategies are removed from `stakerStrategyList` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `stakerStrategyList`. The simplest way to calculate the correct `strategyIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `stakerStrategyList` to lowest index\\n     */\\n    function queueWithdrawal(\\n        uint256[] calldata strategyIndexes,\\n        IStrategy[] calldata strategies,\\n        uint256[] calldata shares,\\n        address withdrawer\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Used to complete the specified `queuedWithdrawal`. The function caller must match `queuedWithdrawal.withdrawer`\\n     * @param queuedWithdrawal The QueuedWithdrawal to complete.\\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `strategies` array\\n     * of the `queuedWithdrawal`. This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n     * @param receiveAsTokens If true, the shares specified in the queued withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `queuedWithdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n     */\\n    function completeQueuedWithdrawal(\\n        QueuedWithdrawal calldata queuedWithdrawal,\\n        IERC20[] calldata tokens,\\n        uint256 middlewareTimesIndex,\\n        bool receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Used to complete the specified `queuedWithdrawals`. The function caller must match `queuedWithdrawals[...].withdrawer`\\n     * @param queuedWithdrawals The QueuedWithdrawals to complete.\\n     * @param tokens Array of tokens for each QueuedWithdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\\n     * @param middlewareTimesIndexes One index to reference per QueuedWithdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\\n     * @param receiveAsTokens If true, the shares specified in the queued withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `queuedWithdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     * @dev Array-ified version of `completeQueuedWithdrawal`\\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n     */\\n    function completeQueuedWithdrawals(\\n        QueuedWithdrawal[] calldata queuedWithdrawals,\\n        IERC20[][] calldata tokens,\\n        uint256[] calldata middlewareTimesIndexes,\\n        bool[] calldata receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Called by the DelegationManager as part of the forced undelegation of the @param staker from their delegated operator.\\n     * This function queues a withdrawal of all of the `staker`'s shares in EigenLayer to the staker themself, and then undelegates the staker.\\n     * The staker will consequently be able to complete this withdrawal by calling the `completeQueuedWithdrawal` function.\\n     * @param staker The staker to force-undelegate.\\n     * @dev Returns: an array of strategies withdrawn from, the shares withdrawn from each strategy, and the root of the newly queued withdrawal.\\n     */\\n    function forceTotalWithdrawal(address staker) external returns (IStrategy[] memory, uint256[] memory, bytes32);\\n\\n    /**\\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n     */\\n    function addStrategiesToDepositWhitelist(IStrategy[] calldata strategiesToWhitelist) external;\\n\\n    /**\\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\\n     */\\n    function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external;\\n\\n    /// @notice Returns the keccak256 hash of `queuedWithdrawal`.\\n    function calculateWithdrawalRoot(QueuedWithdrawal memory queuedWithdrawal) external pure returns (bytes32);\\n\\n    /// @notice Returns the single, central Delegation contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /// @notice Returns the single, central Slasher contract of EigenLayer\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns the EigenPodManager contract of EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice Returns the number of blocks that must pass between the time a withdrawal is queued and the time it can be completed\\n    function withdrawalDelayBlocks() external view returns (uint256);\\n\\n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated. only increments (doesn't decrement)\\n    function numWithdrawalsQueued(address staker) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPod.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/BeaconChainProofs.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice The main functionalities are:\\n * - creating new ETH validators with their withdrawal credentials pointed to this contract\\n * - proving from beacon chain state roots that withdrawal credentials are pointed to this contract\\n * - proving from beacon chain state roots the balances of ETH validators with their withdrawal credentials\\n *   pointed to this contract\\n * - updating aggregate balances in the EigenPodManager\\n * - withdrawing eth when withdrawals are initiated\\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\\n */\\ninterface IEigenPod {\\n    enum VALIDATOR_STATUS {\\n        INACTIVE, // doesnt exist\\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\\n        WITHDRAWN // withdrawn from the Beacon Chain\\n    }\\n\\n    struct ValidatorInfo {\\n        // index of the validator in the beacon chain\\n        uint64 validatorIndex;\\n        // amount of beacon chain ETH restaked on EigenLayer in gwei\\n        uint64 restakedBalanceGwei;\\n        //timestamp of the validator's most recent balance update\\n        uint64 mostRecentBalanceUpdateTimestamp;\\n        // status of the validator\\n        VALIDATOR_STATUS status;\\n    }\\n\\n    /**\\n     * @notice struct used to store amounts related to proven withdrawals in memory. Used to help\\n     * manage stack depth and optimize the number of external calls, when batching withdrawal operations.\\n     */\\n    struct VerifiedWithdrawal {\\n        // amount to send to a podOwner from a proven withdrawal\\n        uint256 amountToSend;\\n        // difference in shares to be recorded in the eigenPodManager, as a result of the withdrawal\\n        int256 sharesDelta;\\n    }\\n\\n\\n    enum PARTIAL_WITHDRAWAL_CLAIM_STATUS {\\n        REDEEMED,\\n        PENDING,\\n        FAILED\\n    }\\n\\n    /// @notice Emitted when an ETH validator stakes via this eigenPod\\n    event EigenPodStaked(bytes pubkey);\\n\\n    /// @notice Emitted when an ETH validator's withdrawal credentials are successfully verified to be pointed to this eigenPod\\n    event ValidatorRestaked(uint40 validatorIndex);\\n\\n    /// @notice Emitted when an ETH validator's  balance is proven to be updated.  Here newValidatorBalanceGwei\\n    //  is the validator's balance that is credited on EigenLayer.\\n    event ValidatorBalanceUpdated(uint40 validatorIndex, uint64 balanceTimestamp, uint64 newValidatorBalanceGwei);\\n\\n    /// @notice Emitted when an ETH validator is prove to have withdrawn from the beacon chain\\n    event FullWithdrawalRedeemed(\\n        uint40 validatorIndex,\\n        uint64 withdrawalTimestamp,\\n        address indexed recipient,\\n        uint64 withdrawalAmountGwei\\n    );\\n\\n    /// @notice Emitted when a partial withdrawal claim is successfully redeemed\\n    event PartialWithdrawalRedeemed(\\n        uint40 validatorIndex,\\n        uint64 withdrawalTimestamp,\\n        address indexed recipient,\\n        uint64 partialWithdrawalAmountGwei\\n    );\\n\\n    /// @notice Emitted when restaked beacon chain ETH is withdrawn from the eigenPod.\\n    event RestakedBeaconChainETHWithdrawn(address indexed recipient, uint256 amount);\\n\\n    /// @notice Emitted when podOwner enables restaking\\n    event RestakingActivated(address indexed podOwner);\\n\\n    /// @notice Emitted when ETH is received via the `receive` fallback\\n    event NonBeaconChainETHReceived(uint256 amountReceived);\\n\\n    /// @notice Emitted when ETH that was previously received via the `receive` fallback is withdrawn\\n    event NonBeaconChainETHWithdrawn(address indexed recipient, uint256 amountWithdrawn);\\n\\n\\n    /// @notice The max amount of eth, in gwei, that can be restaked per validator\\n    function MAX_VALIDATOR_BALANCE_GWEI() external view returns (uint64);\\n\\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer),\\n    function withdrawableRestakedExecutionLayerGwei() external view returns (uint64);\\n\\n    /// @notice Used to initialize the pointers to contracts crucial to the pod's functionality, in beacon proxy construction from EigenPodManager\\n    function initialize(address owner) external;\\n\\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n\\n    /**\\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\\n     * @dev Called during withdrawal or slashing.\\n     * @dev Note that this function is marked as non-reentrant to prevent the recipient calling back into it\\n     */\\n    function withdrawRestakedBeaconChainETH(address recipient, uint256 amount) external;\\n\\n    /// @notice The single EigenPodManager for EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice The owner of this EigenPod\\n    function podOwner() external view returns (address);\\n\\n    /// @notice an indicator of whether or not the podOwner has ever \\\"fully restaked\\\" by successfully calling `verifyCorrectWithdrawalCredentials`.\\n    function hasRestaked() external view returns (bool);\\n\\n    /**\\n     * @notice The latest timestamp at which the pod owner withdrew the balance of the pod, via calling `withdrawBeforeRestaking`.\\n     * @dev This variable is only updated when the `withdrawBeforeRestaking` function is called, which can only occur before `hasRestaked` is set to true for this pod.\\n     * Proofs for this pod are only valid against Beacon Chain state roots corresponding to timestamps after the stored `mostRecentWithdrawalTimestamp`.\\n     */\\n    function mostRecentWithdrawalTimestamp() external view returns (uint64);\\n\\n    /// @notice Returns the validatorInfo struct for the provided pubkeyHash\\n    function validatorPubkeyHashToInfo(bytes32 validatorPubkeyHash) external view returns (ValidatorInfo memory);\\n\\n    ///@notice mapping that tracks proven withdrawals\\n    function provenWithdrawal(bytes32 validatorPubkeyHash, uint64 slot) external view returns (bool);\\n\\n    /// @notice This returns the status of a given validator\\n    function validatorStatus(bytes32 pubkeyHash) external view returns (VALIDATOR_STATUS);\\n\\n    /**\\n     * @notice This function verifies that the withdrawal credentials of validator(s) owned by the podOwner are pointed to\\n     * this contract. It also verifies the effective balance  of the validator.  It verifies the provided proof of the ETH validator against the beacon chain state\\n     * root, marks the validator as 'active' in EigenLayer, and credits the restaked ETH in Eigenlayer.\\n     * @param oracleTimestamp is the Beacon Chain timestamp whose state root the `proof` will be proven against.\\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs\\n     * @param withdrawalCredentialProofs is an array of proofs, where each proof proves each ETH validator's balance and withdrawal credentials\\n     * against a beacon chain state root\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * for details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyWithdrawalCredentials(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        uint40[] calldata validatorIndices,\\n        bytes[] calldata withdrawalCredentialProofs,\\n        bytes32[][] calldata validatorFields\\n    )\\n        external;\\n\\n    /**\\n     * @notice This function records an update (either increase or decrease) in the pod's balance in the StrategyManager.  \\n               It also verifies a merkle proof of the validator's current beacon chain balance.  \\n     * @param oracleTimestamp The oracleTimestamp whose state root the `proof` will be proven against.\\n     *        Must be within `VERIFY_BALANCE_UPDATE_WINDOW_SECONDS` of the current block.\\n     * @param validatorIndex is the index of the validator being proven, refer to consensus specs \\n     * @param balanceUpdateProof is the proof of the validator's balance and validatorFields in the balance tree and the balanceRoot to prove for\\n     *                                    the StrategyManager in case it must be removed from the list of the podOwner's strategies\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * @dev For more details on the Beacon Chain spec, see: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyBalanceUpdate(\\n        uint64 oracleTimestamp,\\n        uint40 validatorIndex,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        BeaconChainProofs.BalanceUpdateProof calldata balanceUpdateProof,\\n        bytes32[] calldata validatorFields\\n    ) external;\\n\\n    /**\\n     * @notice This function records full and partial withdrawals on behalf of one of the Ethereum validators for this EigenPod\\n     * @param oracleTimestamp is the timestamp of the oracle slot that the withdrawal is being proven against\\n     * @param withdrawalProofs is the information needed to check the veracity of the block numbers and withdrawals being proven\\n     * @param validatorFieldsProofs is the proof of the validator's fields' in the validator tree\\n     * @param withdrawalFields are the fields of the withdrawals being proven\\n     * @param validatorFields are the fields of the validators being proven\\n     */\\n    function verifyAndProcessWithdrawals(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        BeaconChainProofs.WithdrawalProof[] calldata withdrawalProofs,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields,\\n        bytes32[][] calldata withdrawalFields\\n    ) external;\\n\\n    /**\\n     * @notice Called by the pod owner to activate restaking by withdrawing\\n     * all existing ETH from the pod and preventing further withdrawals via\\n     * \\\"withdrawBeforeRestaking()\\\"\\n     */\\n    function activateRestaking() external;\\n\\n    /// @notice Called by the pod owner to withdraw the balance of the pod when `hasRestaked` is set to false\\n    function withdrawBeforeRestaking() external;\\n\\n    /// @notice called by the eigenPodManager to decrement the withdrawableRestakedExecutionLayerGwei\\n    /// in the pod, to reflect a queued withdrawal from the beacon chain strategy\\n    function decrementWithdrawableRestakedExecutionLayerGwei(uint256 amountWei) external;\\n\\n    /// @notice called by the eigenPodManager to increment the withdrawableRestakedExecutionLayerGwei\\n    /// in the pod, to reflect a completion of a queued withdrawal as shares\\n    function incrementWithdrawableRestakedExecutionLayerGwei(uint256 amountWei) external;\\n\\n    /// @notice Called by the pod owner to withdraw the nonBeaconChainETHBalanceWei\\n    function withdrawNonBeaconChainETHBalanceWei(address recipient, uint256 amountToWithdraw) external;\\n\\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\\n    function recoverTokens(IERC20[] memory tokenList, uint256[] memory amountsToWithdraw, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IBeaconChainOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Interface for the BeaconStateOracle contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IBeaconChainOracle {\\n    /// @notice The block number to state root mapping.\\n    function timestampToBlockRoot(uint256 timestamp) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IPauserRegistry.sol\\\";\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\n\\ninterface IPausable {\\n    /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\\n    event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\\n\\n    /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\\n    event Paused(address indexed account, uint256 newPausedStatus);\\n\\n    /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\\n    event Unpaused(address indexed account, uint256 newPausedStatus);\\n    \\n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n    function pauserRegistry() external view returns (IPauserRegistry);\\n\\n    /**\\n     * @notice This function is used to pause an EigenLayer contract's functionality.\\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n     */\\n    function pause(uint256 newPausedStatus) external;\\n\\n    /**\\n     * @notice Alias for `pause(type(uint256).max)`.\\n     */\\n    function pauseAll() external;\\n\\n    /**\\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n     */\\n    function unpause(uint256 newPausedStatus) external;\\n\\n    /// @notice Returns the current paused status as a uint256.\\n    function paused() external view returns (uint256);\\n\\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n    function paused(uint8 index) external view returns (bool);\\n\\n    /// @notice Allows the unpauser to set a new pauser registry\\n    function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/ISlasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n    // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n    struct MiddlewareTimes {\\n        // The update block for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n        uint32 stalestUpdateBlock;\\n        // The latest 'serveUntilBlock' from all of the middleware that the operator is serving\\n        uint32 latestServeUntilBlock;\\n    }\\n\\n    // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n    struct MiddlewareDetails {\\n        // the block at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n        uint32 registrationMayBeginAtBlock;\\n        // the block before which the contract is allowed to slash the user\\n        uint32 contractCanSlashOperatorUntilBlock;\\n        // the block at which the middleware's view of the operator's stake was most recently updated\\n        uint32 latestUpdateBlock;\\n    }\\n\\n    /// @notice Emitted when a middleware times is added to `operator`'s array.\\n    event MiddlewareTimesAdded(\\n        address operator,\\n        uint256 index,\\n        uint32 stalestUpdateBlock,\\n        uint32 latestServeUntilBlock\\n    );\\n\\n    /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n    event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n\\n    /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilBlock`.\\n    event SlashingAbilityRevoked(\\n        address indexed operator,\\n        address indexed contractAddress,\\n        uint32 contractCanSlashOperatorUntilBlock\\n    );\\n\\n    /**\\n     * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n     * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n     */\\n    event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\\n\\n    /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within EigenLayer.\\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function optIntoSlashing(address contractAddress) external;\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n     */\\n    function freezeOperator(address toBeFrozen) external;\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev adds the middleware's slashing contract to the operator's linked list\\n     */\\n    function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n     *         to make sure the operator's stake at updateBlock is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param updateBlock the block for which the stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at updateBlock is slashable\\n     * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n     * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n     *      but it is anticipated to be rare and not detrimental.\\n     */\\n    function recordStakeUpdate(\\n        address operator,\\n        uint32 updateBlock,\\n        uint32 serveUntilBlock,\\n        uint256 insertAfter\\n    ) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n     * slash `operator` once `serveUntil` is reached\\n     */\\n    function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilBlock) external;\\n\\n    /// @notice The StrategyManager contract of EigenLayer\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice The DelegationManager contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @param staker The staker of interest.\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool);\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n    /// @notice Returns the block until which `serviceContract` is allowed to slash the `operator`.\\n    function contractCanSlashOperatorUntilBlock(\\n        address operator,\\n        address serviceContract\\n    ) external view returns (uint32);\\n\\n    /// @notice Returns the block at which the `serviceContract` last updated its view of the `operator`'s stake\\n    function latestUpdateBlock(address operator, address serviceContract) external view returns (uint32);\\n\\n    /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n    function getCorrectValueForInsertAfter(address operator, uint32 updateBlock) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartBlock`, with `middlewareTimesIndex` used\\n     * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n     * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n     * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartBlock`, *or* in the event\\n     * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n     * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n     * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartBlock`.\\n     * @param withdrawalStartBlock The block number at which the withdrawal was initiated.\\n     * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n     * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n     */\\n    function canWithdraw(\\n        address operator,\\n        uint32 withdrawalStartBlock,\\n        uint256 middlewareTimesIndex\\n    ) external returns (bool);\\n\\n    /**\\n     * operator =>\\n     *  [\\n     *      (\\n     *          the least recent update block of all of the middlewares it's serving/served,\\n     *          latest time that the stake bonded at that update needed to serve until\\n     *      )\\n     *  ]\\n     */\\n    function operatorToMiddlewareTimes(\\n        address operator,\\n        uint256 arrayIndex\\n    ) external view returns (MiddlewareTimes memory);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n    function middlewareTimesLength(address operator) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateBlock`.\\n    function getMiddlewareTimesIndexStalestUpdateBlock(address operator, uint32 index) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n    function getMiddlewareTimesIndexServeUntilBlock(address operator, uint32 index) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n    function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n    function operatorWhitelistedContractsLinkedListEntry(\\n        address operator,\\n        address node\\n    ) external view returns (bool, uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `Strategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\\n */\\ninterface IStrategy {\\n    /**\\n     * @notice Used to deposit tokens into this Strategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this Strategy, to the `depositor`'s address\\n     * @param depositor is the address to receive the withdrawn funds\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * other functions, and individual share balances are recorded in the strategyManager as well.\\n     */\\n    function withdraw(address depositor, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\\n     * querying the `strategyManager` contract\\n     */\\n    function shares(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underlying token for shares in this Strategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in this Strategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\n/**\\n * @title DelegationManager\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in EigenLayer\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\\n */\\ninterface IDelegationManager {\\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\\n    struct OperatorDetails {\\n        // @notice address to receive the rewards that the operator earns via serving applications built on EigenLayer.\\n        address earningsReceiver;\\n        /**\\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n         * @dev Signature verification follows these rules:\\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n         */\\n        address delegationApprover;\\n        /**\\n         * @notice A minimum delay -- measured in blocks -- enforced between:\\n         * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n         * and\\n         * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n         * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n         * then they are only allowed to either increase this value or keep it the same.\\n         */\\n        uint32 stakerOptOutWindowBlocks;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n     * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n     */\\n    struct StakerDelegation {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the staker's nonce\\n        uint256 nonce;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n     */\\n    struct DelegationApproval {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the operator's provided salt\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    // @notice Emitted when a new operator registers in EigenLayer and provides their OperatorDetails.\\n    event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\\n\\n    // @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n    event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\\n\\n    /**\\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n     */\\n    event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\\n\\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\\n\\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\\n\\n    /// @notice Emitted when @param staker delegates to @param operator.\\n    event StakerDelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker undelegates from @param operator.\\n    event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n    // @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n    event StakerForceUndelegated(address indexed staker, address indexed operator);\\n\\n    /**\\n     * @notice Registers the caller as an operator in EigenLayer.\\n     * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n     *\\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n     * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n     */\\n    function registerAsOperator(\\n        OperatorDetails calldata registeringOperatorDetails,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /**\\n     * @notice Updates an operator's stored `OperatorDetails`.\\n     * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n     *\\n     * @dev The caller must have previously registered as an operator in EigenLayer.\\n     * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n     */\\n    function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\\n\\n    /**\\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n     * @param metadataURI The URI for metadata associated with an operator\\n     */\\n    function updateOperatorMetadataURI(string calldata metadataURI) external;\\n\\n    /**\\n     * @notice Caller delegates their stake to an operator.\\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n     * @param approverSalt A unique single use value tied to an individual signature.\\n     * @dev The approverSignatureAndExpiry is used in the event that:\\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n     *                  AND\\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateTo(\\n        address operator,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n     * @param staker The account delegating stake to an `operator` account\\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n     *\\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n     * is the `msg.sender`, then approval is assumed.\\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateToBySignature(\\n        address staker,\\n        address operator,\\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \\\"undelegation limbo\\\" mode of the EigenPodManager\\n     * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\\n     * @param staker The account to be undelegated.\\n     * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n     *\\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n     * @dev Reverts if the `staker` is already undelegated.\\n     */\\n    function undelegate(address staker) external returns (bytes32 withdrawalRoot);\\n\\n    /**\\n     * @notice Increases a staker's delegated share balance in a strategy.\\n     * @param staker The address to increase the delegated shares for their operator.\\n     * @param strategy The strategy in which to increase the delegated shares.\\n     * @param shares The number of shares to increase.\\n     *\\n     * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n     * @dev Callable only by the StrategyManager.\\n     */\\n    function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases a staker's delegated share balance in a strategy.\\n     * @param staker The address to decrease the delegated shares for their operator.\\n     * @param strategies An array of strategies to crease the delegated shares.\\n     * @param shares An array of the number of shares to decrease for a operator and strategy.\\n     *\\n     * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in each entry of `strategies` by its respective `shares[i]`. Otherwise does nothing.\\n     * @dev Callable only by the StrategyManager or EigenPodManager.\\n     */\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IStrategy[] calldata strategies,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    /**\\n     * @notice returns the address of the operator that `staker` is delegated to.\\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n     */\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /**\\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\\n     */\\n    function operatorDetails(address operator) external view returns (OperatorDetails memory);\\n\\n    /*\\n     * @notice Returns the earnings receiver address for an operator\\n     */\\n    function earningsReceiver(address operator) external view returns (address);\\n\\n    /**\\n     * @notice Returns the delegationApprover account for an operator\\n     */\\n    function delegationApprover(address operator) external view returns (address);\\n\\n    /**\\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\\n     */\\n    function stakerOptOutWindowBlocks(address operator) external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n     * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\\n     */\\n    function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n     */\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true is an operator has previously registered for delegation.\\n     */\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n    function stakerNonce(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n     */\\n    function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\\n\\n    /**\\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n     * @param staker The signing staker\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateCurrentStakerDelegationDigestHash(\\n        address staker,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n     * @param staker The signing staker\\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateStakerDelegationDigestHash(\\n        address staker,\\n        uint256 _stakerNonce,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n     * @param staker The account delegating their stake\\n     * @param operator The account receiving delegated stake\\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n     * @param approverSalt A unique and single use value associated with the approver signature.\\n     * @param expiry Time after which the approver's signature becomes invalid\\n     */\\n    function calculateDelegationApprovalDigestHash(\\n        address staker,\\n        address operator,\\n        address _delegationApprover,\\n        bytes32 approverSalt,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n    function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n    /**\\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\\n     *\\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n     * for more detailed information please read EIP-712.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/libraries/BeaconChainProofs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Merkle.sol\\\";\\nimport \\\"../libraries/Endian.sol\\\";\\n\\n//Utility library for parsing and PHASE0 beacon chain block headers\\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\\nlibrary BeaconChainProofs {\\n    // constants are the number of fields and the heights of the different merkle trees used in merkleizing beacon chain containers\\n    uint256 internal constant NUM_BEACON_BLOCK_HEADER_FIELDS = 5;\\n    uint256 internal constant BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant NUM_BEACON_BLOCK_BODY_FIELDS = 11;\\n    uint256 internal constant BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT = 4;\\n\\n    uint256 internal constant NUM_BEACON_STATE_FIELDS = 21;\\n    uint256 internal constant BEACON_STATE_FIELD_TREE_HEIGHT = 5;\\n\\n    uint256 internal constant NUM_ETH1_DATA_FIELDS = 3;\\n    uint256 internal constant ETH1_DATA_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant NUM_VALIDATOR_FIELDS = 8;\\n    uint256 internal constant VALIDATOR_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant NUM_EXECUTION_PAYLOAD_HEADER_FIELDS = 15;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT = 4;\\n\\n    uint256 internal constant NUM_EXECUTION_PAYLOAD_FIELDS = 15;\\n    uint256 internal constant EXECUTION_PAYLOAD_FIELD_TREE_HEIGHT = 4;\\n\\n    // HISTORICAL_ROOTS_LIMIT\\t = 2**24, so tree height is 24\\n    uint256 internal constant HISTORICAL_ROOTS_TREE_HEIGHT = 24;\\n\\n    // HISTORICAL_BATCH is root of state_roots and block_root, so number of leaves =  2^1\\n    uint256 internal constant HISTORICAL_BATCH_TREE_HEIGHT = 1;\\n\\n    // SLOTS_PER_HISTORICAL_ROOT = 2**13, so tree height is 13\\n    uint256 internal constant STATE_ROOTS_TREE_HEIGHT = 13;\\n    uint256 internal constant BLOCK_ROOTS_TREE_HEIGHT = 13;\\n\\n    //HISTORICAL_ROOTS_LIMIT = 2**24, so tree height is 24\\n    uint256 internal constant HISTORICAL_SUMMARIES_TREE_HEIGHT = 24;\\n\\n    //Index of block_summary_root in historical_summary container\\n    uint256 internal constant BLOCK_SUMMARY_ROOT_INDEX = 0;\\n\\n    uint256 internal constant NUM_WITHDRAWAL_FIELDS = 4;\\n    // tree height for hash tree of an individual withdrawal container\\n    uint256 internal constant WITHDRAWAL_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\\n    //refer to the eigenlayer-cli proof library.  Despite being the same dimensions as the validator tree, the balance tree is merkleized differently\\n    uint256 internal constant BALANCE_TREE_HEIGHT = 38;\\n\\n    // MAX_WITHDRAWALS_PER_PAYLOAD = 2**4, making tree height = 4\\n    uint256 internal constant WITHDRAWALS_TREE_HEIGHT = 4;\\n\\n    //in beacon block body\\n    uint256 internal constant EXECUTION_PAYLOAD_INDEX = 9;\\n\\n    // in beacon block header\\n    uint256 internal constant STATE_ROOT_INDEX = 3;\\n    uint256 internal constant PROPOSER_INDEX_INDEX = 1;\\n    uint256 internal constant SLOT_INDEX = 0;\\n    uint256 internal constant BODY_ROOT_INDEX = 4;\\n    // in beacon state\\n    uint256 internal constant STATE_ROOTS_INDEX = 6;\\n    uint256 internal constant BLOCK_ROOTS_INDEX = 5;\\n    uint256 internal constant HISTORICAL_ROOTS_INDEX = 7;\\n    uint256 internal constant ETH_1_ROOT_INDEX = 8;\\n    uint256 internal constant VALIDATOR_TREE_ROOT_INDEX = 11;\\n    uint256 internal constant BALANCE_INDEX = 12;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_INDEX = 24;\\n    uint256 internal constant HISTORICAL_SUMMARIES_INDEX = 27;\\n    uint256 internal constant HISTORICAL_BATCH_STATE_ROOT_INDEX = 1;\\n    uint256 internal constant BEACON_STATE_SLOT_INDEX = 2;\\n    uint256 internal constant LATEST_BLOCK_HEADER_ROOT_INDEX = 4;\\n\\n    // in validator\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\\n    uint256 internal constant VALIDATOR_SLASHED_INDEX = 3;\\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\\n\\n    // in execution payload header\\n    uint256 internal constant TIMESTAMP_INDEX = 9;\\n    uint256 internal constant WITHDRAWALS_ROOT_INDEX = 14;\\n\\n    //in execution payload\\n    uint256 internal constant WITHDRAWALS_INDEX = 14;\\n\\n    // in withdrawal\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_INDEX_INDEX = 1;\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_AMOUNT_INDEX = 3;\\n\\n    //In historicalBatch\\n    uint256 internal constant HISTORICALBATCH_STATEROOTS_INDEX = 1;\\n\\n    //Misc Constants\\n    uint256 internal constant SLOTS_PER_EPOCH = 32;\\n\\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\\n\\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a partial/full withdrawal\\n    struct WithdrawalProof {\\n        bytes withdrawalProof;\\n        bytes slotProof;\\n        bytes executionPayloadProof;\\n        bytes timestampProof;\\n        bytes historicalSummaryBlockRootProof;\\n        uint64 blockRootIndex;\\n        uint64 historicalSummaryIndex;\\n        uint64 withdrawalIndex;\\n        bytes32 blockRoot;\\n        bytes32 slotRoot;\\n        bytes32 timestampRoot;\\n        bytes32 executionPayloadRoot;\\n    }\\n\\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a balance update\\n    struct BalanceUpdateProof {\\n        bytes validatorBalanceProof;\\n        bytes validatorFieldsProof;\\n        bytes32 balanceRoot;\\n    }\\n\\n    /// @notice This struct contains the root and proof for verifying the state root against the oracle block root\\n    struct StateRootProof {\\n        bytes32 beaconStateRoot;\\n        bytes proof;\\n    }\\n\\n    /**\\n     *\\n     * @notice This function is parses the balanceRoot to get the uint64 balance of a validator.  During merkleization of the\\n     * beacon state balance tree, four uint64 values (making 32 bytes) are grouped together and treated as a single leaf in the merkle tree. Thus the\\n     * validatorIndex mod 4 is used to determine which of the four uint64 values to extract from the balanceRoot.\\n     * @param validatorIndex is the index of the validator being proven for.\\n     * @param balanceRoot is the combination of 4 validator balances being proven for.\\n     * @return The validator's balance, in Gwei\\n     */\\n    function getBalanceFromBalanceRoot(uint40 validatorIndex, bytes32 balanceRoot) internal pure returns (uint64) {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        bytes32 validatorBalanceLittleEndian = bytes32((uint256(balanceRoot) << bitShiftAmount));\\n        uint64 validatorBalance = Endian.fromLittleEndianUint64(validatorBalanceLittleEndian);\\n        return validatorBalance;\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the fields of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param validatorFieldsProof is the data used in proving the validator's fields\\n     * @param validatorFields the claimed fields of the validator\\n     */\\n    function verifyValidatorFields(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata validatorFields,\\n        bytes calldata validatorFieldsProof,\\n        uint40 validatorIndex\\n    ) internal view {\\n        require(\\n            validatorFields.length == 2 ** VALIDATOR_FIELD_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length\\\"\\n        );\\n\\n        /**\\n         * Note: the length of the validator merkle proof is BeaconChainProofs.VALIDATOR_TREE_HEIGHT + 1.\\n         * There is an additional layer added by hashing the root with the length of the validator list\\n         */\\n        require(\\n            validatorFieldsProof.length == 32 * ((VALIDATOR_TREE_HEIGHT + 1) + BEACON_STATE_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Proof has incorrect length\\\"\\n        );\\n        uint256 index = (VALIDATOR_TREE_ROOT_INDEX << (VALIDATOR_TREE_HEIGHT + 1)) | uint256(validatorIndex);\\n        // merkleize the validatorFields to get the leaf to prove\\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\\n\\n        // verify the proof of the validatorRoot against the beaconStateRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorFieldsProof,\\n                root: beaconStateRoot,\\n                leaf: validatorRoot,\\n                index: index\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Invalid merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the balance of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param validatorBalanceProof is the proof of the balance against the beacon chain state root\\n     * @param balanceRoot is the serialized balance used to prove the balance of the validator (refer to `getBalanceFromBalanceRoot` above for detailed explanation)\\n     */\\n    function verifyValidatorBalance(\\n        bytes32 beaconStateRoot,\\n        bytes32 balanceRoot,\\n        bytes calldata validatorBalanceProof,\\n        uint40 validatorIndex\\n    ) internal view {\\n        require(\\n            validatorBalanceProof.length == 32 * ((BALANCE_TREE_HEIGHT + 1) + BEACON_STATE_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyValidatorBalance: Proof has incorrect length\\\"\\n        );\\n\\n        /**\\n         * the beacon state's balance list is a list of uint64 values, and these are grouped together in 4s when merkleized.\\n         * Therefore, the index of the balance of a validator is validatorIndex/4\\n         */\\n        uint256 balanceIndex = uint256(validatorIndex / 4);\\n        /**\\n         * Note: Merkleization of the balance root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\\n         * the array.  Thus we shift the BALANCE_INDEX over by BALANCE_TREE_HEIGHT + 1 and not just BALANCE_TREE_HEIGHT.\\n         */\\n        balanceIndex = (BALANCE_INDEX << (BALANCE_TREE_HEIGHT + 1)) | balanceIndex;\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorBalanceProof,\\n                root: beaconStateRoot,\\n                leaf: balanceRoot,\\n                index: balanceIndex\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorBalance: Invalid merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies the latestBlockHeader against the state root. the latestBlockHeader is\\n     * a tracked in the beacon state.\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param stateRootProof is the provided merkle proof\\n     * @param latestBlockRoot is hashtree root of the latest block header in the beacon state\\n     */\\n    function verifyStateRootAgainstLatestBlockRoot(\\n        bytes32 latestBlockRoot,\\n        bytes32 beaconStateRoot,\\n        bytes calldata stateRootProof\\n    ) internal view {\\n        require(\\n            stateRootProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Proof has incorrect length\\\"\\n        );\\n        //Next we verify the slot against the blockRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: stateRootProof,\\n                root: latestBlockRoot,\\n                leaf: beaconStateRoot,\\n                index: STATE_ROOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Invalid latest block header root merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies the slot and the withdrawal fields for a given withdrawal\\n     * @param withdrawalProof is the provided set of merkle proofs\\n     * @param withdrawalFields is the serialized withdrawal container to be proven\\n     */\\n    function verifyWithdrawal(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata withdrawalFields,\\n        WithdrawalProof calldata withdrawalProof\\n    ) internal view {\\n        require(\\n            withdrawalFields.length == 2 ** WITHDRAWAL_FIELD_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalFields has incorrect length\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.blockRootIndex < 2 ** BLOCK_ROOTS_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: blockRootIndex is too large\\\"\\n        );\\n        require(\\n            withdrawalProof.withdrawalIndex < 2 ** WITHDRAWALS_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalIndex is too large\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.withdrawalProof.length ==\\n                32 * (EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT + WITHDRAWALS_TREE_HEIGHT + 1),\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.executionPayloadProof.length ==\\n                32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT + BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: executionPayloadProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.slotProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: slotProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.timestampProof.length == 32 * (EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: timestampProof has incorrect length\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.historicalSummaryBlockRootProof.length ==\\n                32 *\\n                    (BEACON_STATE_FIELD_TREE_HEIGHT +\\n                        (HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) +\\n                        1 +\\n                        (BLOCK_ROOTS_TREE_HEIGHT)),\\n            \\\"BeaconChainProofs.verifyWithdrawal: historicalSummaryBlockRootProof has incorrect length\\\"\\n        );\\n        /**\\n         * Note: Here, the \\\"1\\\" in \\\"1 + (BLOCK_ROOTS_TREE_HEIGHT)\\\" signifies that extra step of choosing the \\\"block_root_summary\\\" within the individual\\n         * \\\"historical_summary\\\". Everywhere else it signifies merkelize_with_mixin, where the length of an array is hashed with the root of the array,\\n         * but not here.\\n         */\\n        uint256 historicalBlockHeaderIndex = (HISTORICAL_SUMMARIES_INDEX <<\\n            ((HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) + 1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\\n            (uint256(withdrawalProof.historicalSummaryIndex) << (1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\\n            (BLOCK_SUMMARY_ROOT_INDEX << (BLOCK_ROOTS_TREE_HEIGHT)) |\\n            uint256(withdrawalProof.blockRootIndex);\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.historicalSummaryBlockRootProof,\\n                root: beaconStateRoot,\\n                leaf: withdrawalProof.blockRoot,\\n                index: historicalBlockHeaderIndex\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid historicalsummary merkle proof\\\"\\n        );\\n\\n        //Next we verify the slot against the blockRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.slotProof,\\n                root: withdrawalProof.blockRoot,\\n                leaf: withdrawalProof.slotRoot,\\n                index: SLOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid slot merkle proof\\\"\\n        );\\n\\n        {\\n            // Next we verify the executionPayloadRoot against the blockRoot\\n            uint256 executionPayloadIndex = (BODY_ROOT_INDEX << (BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT)) |\\n                EXECUTION_PAYLOAD_INDEX;\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: withdrawalProof.executionPayloadProof,\\n                    root: withdrawalProof.blockRoot,\\n                    leaf: withdrawalProof.executionPayloadRoot,\\n                    index: executionPayloadIndex\\n                }),\\n                \\\"BeaconChainProofs.verifyWithdrawal: Invalid executionPayload merkle proof\\\"\\n            );\\n        }\\n\\n        // Next we verify the timestampRoot against the executionPayload root\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.timestampProof,\\n                root: withdrawalProof.executionPayloadRoot,\\n                leaf: withdrawalProof.timestampRoot,\\n                index: TIMESTAMP_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid blockNumber merkle proof\\\"\\n        );\\n\\n        {\\n            /**\\n             * Next we verify the withdrawal fields against the blockRoot:\\n             * First we compute the withdrawal_index relative to the blockRoot by concatenating the indexes of all the\\n             * intermediate root indexes from the bottom of the sub trees (the withdrawal container) to the top, the blockRoot.\\n             * Then we calculate merkleize the withdrawalFields container to calculate the the withdrawalRoot.\\n             * Finally we verify the withdrawalRoot against the executionPayloadRoot.\\n             *\\n             *\\n             * Note: Merkleization of the withdrawals root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\\n             * the array.  Thus we shift the WITHDRAWALS_INDEX over by WITHDRAWALS_TREE_HEIGHT + 1 and not just WITHDRAWALS_TREE_HEIGHT.\\n             */\\n            uint256 withdrawalIndex = (WITHDRAWALS_INDEX << (WITHDRAWALS_TREE_HEIGHT + 1)) |\\n                uint256(withdrawalProof.withdrawalIndex);\\n            bytes32 withdrawalRoot = Merkle.merkleizeSha256(withdrawalFields);\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: withdrawalProof.withdrawalProof,\\n                    root: withdrawalProof.executionPayloadRoot,\\n                    leaf: withdrawalRoot,\\n                    index: withdrawalIndex\\n                }),\\n                \\\"BeaconChainProofs.verifyWithdrawal: Invalid withdrawal merkle proof\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function replicates the ssz hashing of a validator's pubkey, outlined below:\\n     *  hh := ssz.NewHasher()\\n     *  hh.PutBytes(validatorPubkey[:])\\n     *  validatorPubkeyHash := hh.Hash()\\n     *  hh.Reset()\\n     */\\n    function hashValidatorBLSPubkey(bytes memory validatorPubkey) internal pure returns (bytes32 pubkeyHash) {\\n        require(validatorPubkey.length == 48, \\\"Input should be 48 bytes in length\\\");\\n        return sha256(abi.encodePacked(validatorPubkey, bytes16(0)));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Interface for the `PauserRegistry` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IPauserRegistry {\\n    event PauserStatusChanged(address pauser, bool canPause);\\n\\n    event UnpauserChanged(address previousUnpauser, address newUnpauser);\\n    \\n    /// @notice Mapping of addresses to whether they hold the pauser role.\\n    function isPauser(address pauser) external view returns (bool);\\n\\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n    function unpauser() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/libraries/Merkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function verifyInclusionKeccak(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        return processInclusionProofKeccak(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function processInclusionProofKeccak(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, computedHash)\\n                    mstore(0x20, mload(add(proof, i)))\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, computedHash)\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash[0];\\n    }\\n\\n    /**\\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\\n     @param leaves the leaves of the merkle tree\\n     @return The computed Merkle root of the tree.\\n     @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\\n     */\\n    function merkleizeSha256(bytes32[] memory leaves) internal pure returns (bytes32) {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint i = 0; i < numNodesInLayer; i++) {\\n            layer[i] = sha256(abi.encodePacked(leaves[2 * i], leaves[2 * i + 1]));\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint i = 0; i < numNodesInLayer; i++) {\\n                layer[i] = sha256(abi.encodePacked(layer[2 * i], layer[2 * i + 1]));\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-contracts/src/contracts/libraries/Endian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(bytes32 lenum) internal pure returns (uint64 n) {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@uniswap/=lib/\",\r\n      \"@eigenlayer/=lib/eigenlayer-contracts/src/\",\r\n      \"@openzeppelin-upgrades/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/\",\r\n      \"eigenlayer-contracts/=lib/eigenlayer-contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"generateDepositRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "depositRootGenerator", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}