{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n  using SafeMath for uint256;\r\n    \r\n  mapping (address => bool) public staff;\r\n  mapping (address => uint256) balances;\r\n  uint256 totalSupply_;\r\n  mapping (address => uint256) public uniqueTokens;\r\n  mapping (address => uint256) public preSaleTokens;\r\n  mapping (address => uint256) public crowdSaleTokens;\r\n  mapping (address => uint256) public freezeTokens;\r\n  mapping (address => uint256) public freezeTimeBlock;\r\n  uint256 public launchTime = 999999999999999999999999999999;\r\n  uint256 public totalFreezeTokens = 0;\r\n  bool public listing = false;\r\n  bool public freezing = true;\r\n  address public agentAddress;\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  \r\n  modifier afterListing() {\r\n    require(listing == true || owner == msg.sender || agentAddress == msg.sender);\r\n    _;\r\n  }\r\n  \r\n  function checkVesting(address sender) public view returns (uint256) {\r\n    if (now >= launchTime.add(270 days)) {\r\n        return balances[sender];\r\n    } else if (now >= launchTime.add(180 days)) {\r\n        return balances[sender].sub(uniqueTokens[sender].mul(35).div(100));\r\n    } else if (now >= launchTime.add(120 days)) {\r\n        return balances[sender].sub(uniqueTokens[sender].mul(7).div(10));\r\n    } else if (now >= launchTime.add(90 days)) {\r\n        return balances[sender].sub((uniqueTokens[sender].mul(7).div(10)).add(crowdSaleTokens[sender].mul(2).div(10)));\r\n    } else if (now >= launchTime.add(60 days)) {\r\n        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(3).div(10)).add(crowdSaleTokens[sender].mul(4).div(10)));\r\n    } else if (now >= launchTime.add(30 days)) {\r\n        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(6).div(10)).add(crowdSaleTokens[sender].mul(6).div(10)));\r\n    } else {\r\n        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(9).div(10)).add(crowdSaleTokens[sender].mul(8).div(10)));\r\n    }\r\n  }\r\n  \r\n  function checkVestingWithFrozen(address sender) public view returns (uint256) {\r\n    if (freezing) {\r\n        \r\n      if (freezeTimeBlock[sender] <= now) {\r\n          return checkVesting(sender);\r\n      } else {\r\n          return checkVesting(sender).sub(freezeTokens[sender]);\r\n      }\r\n    \r\n    } else {\r\n        return checkVesting(sender);\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) afterListing public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    if (!staff[msg.sender]) {\r\n        require(_value <= checkVestingWithFrozen(msg.sender));\r\n    }\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    if (!staff[_owner]) {\r\n        return checkVestingWithFrozen(_owner);\r\n    }\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) afterListing public {\r\n    require(_value <= balances[msg.sender]);\r\n    if (!staff[msg.sender]) {\r\n        require(_value <= checkVestingWithFrozen(msg.sender));\r\n    }\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n    emit Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BurnableToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) afterListing public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    if (!staff[_from]) {\r\n        require(_value <= checkVestingWithFrozen(_from));\r\n    }\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n}\r\n\r\ncontract AlbosWallet is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public withdrawFoundersTokens;\r\n  uint256 public withdrawReservedTokens;\r\n\r\n  address public foundersAddress;\r\n  address public reservedAddress;\r\n\r\n  AlbosToken public albosAddress;\r\n  \r\n  constructor(address _albosAddress, address _foundersAddress, address _reservedAddress) public {\r\n    albosAddress = AlbosToken(_albosAddress);\r\n    owner = albosAddress;\r\n\r\n    foundersAddress = _foundersAddress;\r\n    reservedAddress = _reservedAddress;\r\n  }\r\n\r\n  modifier onlyFounders() {\r\n    require(msg.sender == foundersAddress);\r\n    _;\r\n  }\r\n\r\n  modifier onlyReserved() {\r\n    require(msg.sender == reservedAddress);\r\n    _;\r\n  }\r\n\r\n  function viewFoundersTokens() public view returns (uint256) {\r\n    if (now >= albosAddress.launchTime().add(270 days)) {\r\n      return albosAddress.foundersSupply();\r\n    } else if (now >= albosAddress.launchTime().add(180 days)) {\r\n      return albosAddress.foundersSupply().mul(65).div(100);\r\n    } else if (now >= albosAddress.launchTime().add(90 days)) {\r\n      return albosAddress.foundersSupply().mul(3).div(10);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function viewReservedTokens() public view returns (uint256) {\r\n    if (now >= albosAddress.launchTime().add(270 days)) {\r\n      return albosAddress.reservedSupply();\r\n    } else if (now >= albosAddress.launchTime().add(180 days)) {\r\n      return albosAddress.reservedSupply().mul(65).div(100);\r\n    } else if (now >= albosAddress.launchTime().add(90 days)) {\r\n      return albosAddress.reservedSupply().mul(3).div(10);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function getFoundersTokens(uint256 _tokens) public onlyFounders {\r\n    uint256 tokens = _tokens.mul(10 ** 18);\r\n    require(withdrawFoundersTokens.add(tokens) <= viewFoundersTokens());\r\n    albosAddress.transfer(foundersAddress, tokens);\r\n    withdrawFoundersTokens = withdrawFoundersTokens.add(tokens);\r\n  }\r\n\r\n  function getReservedTokens(uint256 _tokens) public onlyReserved {\r\n    uint256 tokens = _tokens.mul(10 ** 18);\r\n    require(withdrawReservedTokens.add(tokens) <= viewReservedTokens());\r\n    albosAddress.transfer(reservedAddress, tokens);\r\n    withdrawReservedTokens = withdrawReservedTokens.add(tokens);\r\n  }\r\n}\r\n\r\ncontract AlbosToken is StandardToken {\r\n  string constant public name = \"ALBOS Token\";\r\n  string constant public symbol = \"ALB\";\r\n  uint256 public decimals = 18;\r\n  \r\n  uint256 public INITIAL_SUPPLY = uint256(28710000000).mul(10 ** decimals); // 28,710,000,000 tokens\r\n  uint256 public foundersSupply = uint256(4306500000).mul(10 ** decimals); // 4,306,500,000 tokens\r\n  uint256 public reservedSupply = uint256(2871000000).mul(10 ** decimals); // 2,871,000,000 tokens\r\n  AlbosWallet public albosWallet;\r\n  \r\n  constructor() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[address(this)] = totalSupply_;\r\n    emit Transfer(0x0, address(this), totalSupply_);\r\n\r\n    agentAddress = msg.sender;\r\n    staff[owner] = true;\r\n    staff[agentAddress] = true;\r\n  }\r\n  \r\n  modifier onlyAgent() {\r\n    require(msg.sender == agentAddress || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function startListing() public onlyOwner {\r\n    require(!listing);\r\n    launchTime = now;\r\n    listing = true;\r\n  }\r\n\r\n  function setTeamContract(address _albosWallet) external onlyOwner {\r\n\r\n    albosWallet = AlbosWallet(_albosWallet);\r\n\r\n    balances[address(albosWallet)] = balances[address(albosWallet)].add(foundersSupply).add(reservedSupply);\r\n    balances[address(this)] = balances[address(this)].sub(foundersSupply).sub(reservedSupply);\r\n     emit Transfer(address(this), address(albosWallet), balances[address(albosWallet)]);\r\n  }\r\n\r\n  function addUniqueSaleTokens(address sender, uint256 amount) external onlyAgent {\r\n    uniqueTokens[sender] = uniqueTokens[sender].add(amount);\r\n    \r\n    balances[address(this)] = balances[address(this)].sub(amount);\r\n    balances[sender] = balances[sender].add(amount);\r\n    emit Transfer(address(this), sender, amount);\r\n  }\r\n  \r\n  function addUniqueSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\r\n    require(sender.length > 0 && sender.length == amount.length);\r\n    \r\n    for(uint i = 0; i < sender.length; i++) {\r\n      uniqueTokens[sender[i]] = uniqueTokens[sender[i]].add(amount[i]);\r\n      balances[address(this)] = balances[address(this)].sub(amount[i]);\r\n      balances[sender[i]] = balances[sender[i]].add(amount[i]);\r\n      emit Transfer(address(this), sender[i], amount[i]);\r\n    }\r\n  }\r\n  \r\n  function addPrivateSaleTokens(address sender, uint256 amount) external onlyAgent {\r\n    balances[address(this)] = balances[address(this)].sub(amount);\r\n    balances[sender] = balances[sender].add(amount);\r\n    emit Transfer(address(this), sender, amount);\r\n  }\r\n  \r\n  function addPrivateSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\r\n    require(sender.length > 0 && sender.length == amount.length);\r\n    \r\n    for(uint i = 0; i < sender.length; i++) {\r\n      balances[address(this)] = balances[address(this)].sub(amount[i]);\r\n      balances[sender[i]] = balances[sender[i]].add(amount[i]);\r\n      emit Transfer(address(this), sender[i], amount[i]);\r\n    }\r\n  }\r\n  \r\n  function addPreSaleTokens(address sender, uint256 amount) external onlyAgent {\r\n    preSaleTokens[sender] = preSaleTokens[sender].add(amount);\r\n    \r\n    balances[address(this)] = balances[address(this)].sub(amount);\r\n    balances[sender] = balances[sender].add(amount);\r\n    emit Transfer(address(this), sender, amount);\r\n  }\r\n  \r\n  function addPreSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\r\n    require(sender.length > 0 && sender.length == amount.length);\r\n    \r\n    for(uint i = 0; i < sender.length; i++) {\r\n      preSaleTokens[sender[i]] = preSaleTokens[sender[i]].add(amount[i]);\r\n      balances[address(this)] = balances[address(this)].sub(amount[i]);\r\n      balances[sender[i]] = balances[sender[i]].add(amount[i]);\r\n      emit Transfer(address(this), sender[i], amount[i]);\r\n    }\r\n  }\r\n  \r\n  function addCrowdSaleTokens(address sender, uint256 amount) external onlyAgent {\r\n    crowdSaleTokens[sender] = crowdSaleTokens[sender].add(amount);\r\n    \r\n    balances[address(this)] = balances[address(this)].sub(amount);\r\n    balances[sender] = balances[sender].add(amount);\r\n    emit Transfer(address(this), sender, amount);\r\n  }\r\n\r\n  function addCrowdSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\r\n    require(sender.length > 0 && sender.length == amount.length);\r\n    \r\n    for(uint i = 0; i < sender.length; i++) {\r\n      crowdSaleTokens[sender[i]] = crowdSaleTokens[sender[i]].add(amount[i]);\r\n      balances[address(this)] = balances[address(this)].sub(amount[i]);\r\n      balances[sender[i]] = balances[sender[i]].add(amount[i]);\r\n      emit Transfer(address(this), sender[i], amount[i]);\r\n    }\r\n  }\r\n  \r\n  function addFrostTokens(address sender, uint256 amount, uint256 blockTime) public onlyAgent {\r\n\r\n    totalFreezeTokens = totalFreezeTokens.add(amount);\r\n    require(totalFreezeTokens <= totalSupply_.mul(2).div(10));\r\n\r\n    freezeTokens[sender] = amount;\r\n    freezeTimeBlock[sender] = blockTime;\r\n  }\r\n  \r\n  function transferAndFrostTokens(address sender, uint256 amount, uint256 blockTime) external onlyAgent {\r\n    balances[address(this)] = balances[address(this)].sub(amount);\r\n    balances[sender] = balances[sender].add(amount);\r\n    emit Transfer(address(this), sender, amount);\r\n    addFrostTokens(sender, amount, blockTime);\r\n  }\r\n  \r\n  function addFrostTokensMulti(address[] sender, uint256[] amount, uint256[] blockTime) external onlyAgent {\r\n    require(sender.length > 0 && sender.length == amount.length && amount.length == blockTime.length);\r\n\r\n    for(uint i = 0; i < sender.length; i++) {\r\n      totalFreezeTokens = totalFreezeTokens.add(amount[i]);\r\n      freezeTokens[sender[i]] = amount[i];\r\n      freezeTimeBlock[sender[i]] = blockTime[i];\r\n    }\r\n    require(totalFreezeTokens <= totalSupply_.mul(2).div(10));\r\n  }\r\n  \r\n  function transferAgent(address _agent) external onlyOwner {\r\n    agentAddress = _agent;\r\n  }\r\n\r\n  function addStaff(address _staff) external onlyOwner {\r\n    staff[_staff] = true;\r\n  }\r\n\r\n  function killFrost() external onlyOwner {\r\n    freezing = false;\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addUniqueSaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"addFrostTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"transferAndFrostTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFreezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"albosWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addPreSaleTokensMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"agentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addPrivateSaleTokensMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addCrowdSaleTokensMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"addUniqueSaleTokensMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"},{\"name\":\"blockTime\",\"type\":\"uint256[]\"}],\"name\":\"addFrostTokensMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"staff\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_staff\",\"type\":\"address\"}],\"name\":\"addStaff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"checkVestingWithFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"transferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_albosWallet\",\"type\":\"address\"}],\"name\":\"setTeamContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCrowdSaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killFrost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"crowdSaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeTimeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"checkVesting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preSaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addPrivateSaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addPreSaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "AlbosToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://857e7b05214e31c4da210aed1740985ef46201507d6040abe52cc6f00cb0dbe6"}