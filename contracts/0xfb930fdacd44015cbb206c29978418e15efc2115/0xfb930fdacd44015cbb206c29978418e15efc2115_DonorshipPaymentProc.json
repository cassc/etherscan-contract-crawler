{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/donorship.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IV3Router.sol\\\";\\r\\nimport \\\"./IWETH.sol\\\";\\r\\n\\r\\n\\r\\ncontract DonorshipPaymentProcessor is Ownable, Pausable, ReentrancyGuard {\\r\\n    //receiver of primary fee\\r\\n    address public primaryBeneficiary;\\r\\n    //primary fee applied to donations (base 10_000)(500 = 5%\\r\\n    uint256 public primaryFee;\\r\\n    IV3SwapRouter public swapRouter;\\r\\n    WETH public weth;\\r\\n\\r\\n    /* MULTI_SIG_CONFIG */\\r\\n    address public signer1;\\r\\n    address public signer2;\\r\\n    address immutable public signerRecovery;\\r\\n    mapping(address => bool) public signerRecoveryVotes;\\r\\n\\r\\n    enum RequestType {\\r\\n        PrimaryFeeChange,\\r\\n        PrimaryBeneficiaryChange,\\r\\n        AffiliateFeeChange,\\r\\n        AffiliateRemoval,\\r\\n        AffiliateGlobalFeeToggle,\\r\\n        IndividualAffiliateFeeToggle,\\r\\n        AffiliateWalletAddressChange\\r\\n    }\\r\\n    struct MultiSigRequest {\\r\\n        address initiator;\\r\\n        address newAddress;\\r\\n        uint256 newFee;\\r\\n        bytes32 affiliateID;\\r\\n        bool requestActive;\\r\\n        RequestType requestType;\\r\\n    }\\r\\n\\r\\n    MultiSigRequest public currentRequest;\\r\\n\\r\\n    /* AFFILIATE_CONFIG */\\r\\n    struct Affiliate{\\r\\n        address receiver;\\r\\n        uint256 feeAmount;\\r\\n        bool feeEnabledInvidually;\\r\\n        bytes32 affiliateID;\\r\\n    }\\r\\n    Affiliate[] affiliates;\\r\\n    mapping(bytes32 => uint256) public affiliateIDtoIndex;\\r\\n    mapping(bytes32 => bool) public affiliateIDexists;\\r\\n    bool public isAffiliateFeeEnabled;\\r\\n    /* */\\r\\n\\r\\n    constructor(\\r\\n        address payable _irouter,\\r\\n        address _signer1,\\r\\n        address _signer2,\\r\\n        address _primaryBeneficiary,\\r\\n        uint256 _primaryFee,\\r\\n        address _weth\\r\\n    ){\\r\\n        swapRouter = IV3SwapRouter(_irouter);\\r\\n        isAffiliateFeeEnabled = false;\\r\\n        signer1 = _signer1;\\r\\n        signer2 = _signer2;\\r\\n        signerRecovery = msg.sender;\\r\\n        primaryBeneficiary = _primaryBeneficiary;\\r\\n        primaryFee = _primaryFee;\\r\\n        weth = WETH(_weth);\\r\\n    }\\r\\n\\r\\n    function enactPrimaryFee(uint256 _amountIn) public view returns(uint256 _amountDeducted, uint256 _totalOutAfterFee)\\r\\n    {\\r\\n        require(_amountIn > 0, \\\"Amount must be greater than 0\\\");\\r\\n        uint256 divisor = 10_000;\\r\\n        uint256 amountOutAfterFee = (_amountIn * (divisor - primaryFee)) / divisor;\\r\\n        uint256 totalDeduction = (_amountIn - amountOutAfterFee);\\r\\n\\r\\n        return (totalDeduction, amountOutAfterFee);\\r\\n    }\\r\\n    function enactSecondaryFee(uint256 _amountIn, bytes32 _affiliateID) public view returns(uint256 _amountDeducted, uint256 _totalOutAfterFee)\\r\\n    {\\r\\n        require(_amountIn > 0, \\\"Amount must be greater than 0\\\");\\r\\n        uint256 divisor = 10_000;\\r\\n        uint256 secondaryFee = affiliates[affiliateIDtoIndex[_affiliateID]].feeAmount;\\r\\n\\r\\n        uint256 amountOutAfterFee = (_amountIn * (divisor - secondaryFee)) / divisor;\\r\\n        uint256 totalDeduction = (_amountIn - amountOutAfterFee);\\r\\n\\r\\n        return (totalDeduction , amountOutAfterFee);\\r\\n    }\\r\\n\\r\\n    function processTokenDonation(\\r\\n        bytes32 _affiliateID,\\r\\n        address _charity,\\r\\n        uint256 _tokenAmount,\\r\\n        address tokenAddress,\\r\\n        uint24 _fee\\r\\n        ) public payable nonReentrant whenNotPaused {\\r\\n        require(_tokenAmount > 0, \\\"Token amount must be greater than 0\\\");\\r\\n        require(_charity != address(0), \\\"Invalid charity address\\\");\\r\\n        require(affiliateIDexists[_affiliateID], \\\"Affiliate ID does not exist\\\");\\r\\n\\r\\n        bool transfer = IERC20(tokenAddress).transferFrom(msg.sender, address(this), _tokenAmount); //tested\\r\\n        require(transfer, \\\"Failed to transfer tokens\\\");\\r\\n\\r\\n        uint256 amountWETH = swapTokensForEth(tokenAddress, _tokenAmount, address(this), _fee); //tested\\r\\n        //get fee status for individual affiliate\\r\\n        bool feeEnabledInvidually = affiliates[affiliateIDtoIndex[_affiliateID]].feeEnabledInvidually;\\r\\n        //always apply primary fee\\r\\n        (uint256 primaryDeductionAmount, ) = enactPrimaryFee(amountWETH);\\r\\n        //enum aff receiver\\r\\n        address affReceiver = affiliates[affiliateIDtoIndex[_affiliateID]].receiver;\\r\\n        //init the deduction amount to 0 for readibility\\r\\n        uint256 secondaryDeductionAmount = 0;\\r\\n        //if affiliate fees enabled, enact second fee from the original msg.value\\r\\n        if (isAffiliateFeeEnabled && feeEnabledInvidually) {\\r\\n            (secondaryDeductionAmount, ) = enactSecondaryFee(amountWETH, _affiliateID);\\r\\n        }\\r\\n        //get total donation amount\\r\\n        uint256 totalDonationToCharity = amountWETH - primaryDeductionAmount - secondaryDeductionAmount;\\r\\n        //aprove WETH to deposit to unwrap WETH\\r\\n        bool approveUnwrap = weth.approve(address(this), amountWETH);\\r\\n        require(approveUnwrap, \\\"Failed to approve WETH for unwrap\\\");\\r\\n        //unwrap WETH\\r\\n        weth.withdraw(amountWETH);\\r\\n        //transfer eth to their locations\\r\\n        payable(_charity).transfer(totalDonationToCharity);\\r\\n        payable(primaryBeneficiary).transfer(primaryDeductionAmount);\\r\\n        //if secondaryDeductionAmount > 0, transfer to affiliate\\r\\n        if (isAffiliateFeeEnabled && feeEnabledInvidually) {\\r\\n            payable(affReceiver).transfer(secondaryDeductionAmount);\\r\\n        }\\r\\n        //emit event\\r\\n        emit DonationProcessed(secondaryDeductionAmount, primaryDeductionAmount, totalDonationToCharity, msg.sender);\\r\\n    }\\r\\n    function swapTokensForEth(address _tokenAddress, uint256 _tokenAmountIn, address _recipient, uint24 _fee) internal returns(uint256 amountETH) {\\r\\n        bool approval = IERC20(_tokenAddress).approve(address(swapRouter), _tokenAmountIn);\\r\\n        require(approval, \\\"Failed to approve tokens for swap\\\");\\r\\n        \\r\\n        uint256 allowance = IERC20(_tokenAddress).allowance(address(this), address(swapRouter));\\r\\n        require(allowance >= _tokenAmountIn, \\\"Failed to approve tokens for swap\\\");\\r\\n\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter.ExactInputSingleParams({\\r\\n            tokenIn: _tokenAddress,\\r\\n            tokenOut: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\\r\\n            fee: _fee,\\r\\n            recipient: _recipient,\\r\\n            amountIn: _tokenAmountIn,\\r\\n            amountOutMinimum: 0,\\r\\n            sqrtPriceLimitX96: 0\\r\\n        });\\r\\n\\r\\n        amountETH = swapRouter.exactInputSingle(params);\\r\\n        return amountETH;\\r\\n    }\\r\\n\\r\\n    function processDonation(bytes32 _affiliateID, address _charity) public payable nonReentrant whenNotPaused{\\r\\n        require(msg.value > 0, \\\"value must be greater than 0 for msg.value\\\");\\r\\n        require(_charity != address(0), \\\"invalid address\\\");\\r\\n\\r\\n        // Check if the affiliate ID exists\\r\\n        require(affiliateIDexists[_affiliateID], \\\"Affiliate ID does not exist\\\");\\r\\n        // Fee always active for primary\\r\\n        (uint256 primaryDeductionAmount, ) = enactPrimaryFee(msg.value);\\r\\n        //init the deduction amount to 0 for readibility\\r\\n        uint256 secondaryDeductionAmount = 0;\\r\\n        //get fee status for individual affiliate\\r\\n        bool feeEnabledInvidually = affiliates[affiliateIDtoIndex[_affiliateID]].feeEnabledInvidually;\\r\\n        // if affiliate fees enabled, enact second fee from the original msg.value\\r\\n        if (isAffiliateFeeEnabled && feeEnabledInvidually) {\\r\\n            (secondaryDeductionAmount, ) = enactSecondaryFee(msg.value, _affiliateID);\\r\\n        }\\r\\n        //get total donation amount\\r\\n        uint256 totalDonation = msg.value - primaryDeductionAmount - secondaryDeductionAmount;\\r\\n        uint256 remainingEthFromPrimaryAndSecondary = msg.value - totalDonation;\\r\\n        //transfer eth to their locations\\r\\n        payable(_charity).transfer(totalDonation);\\r\\n        payable(primaryBeneficiary).transfer(primaryDeductionAmount);\\r\\n        //if affiliate fees enabled, enact second fee from the original msg.value\\r\\n        if (isAffiliateFeeEnabled && feeEnabledInvidually) {\\r\\n            address affReceiver = affiliates[affiliateIDtoIndex[_affiliateID]].receiver;\\r\\n            payable(affReceiver).transfer(secondaryDeductionAmount);\\r\\n        }\\r\\n        // Check if there are any remaining funds (due to rounding or other issues)\\r\\n        uint256 remainingFunds = remainingEthFromPrimaryAndSecondary - primaryDeductionAmount - secondaryDeductionAmount;\\r\\n        if (remainingFunds > 0) {\\r\\n            payable(owner()).transfer(remainingFunds);\\r\\n        }\\r\\n        //emit event\\r\\n        emit DonationProcessed(secondaryDeductionAmount, primaryDeductionAmount, totalDonation, msg.sender);\\r\\n    }\\r\\n    function addAffiliate(bytes32 _affiliateID, address _receiver, uint256 _feeAmount) internal {\\r\\n        require(_affiliateID > 0, \\\"Affiliate ID must be greater than 0\\\");\\r\\n        require(_receiver != address(0), \\\"Receiver must be a valid address\\\");\\r\\n        require(_feeAmount <= 500, \\\"Fee amount must be <= 500\\\");\\r\\n        \\r\\n        uint256 newIndex = affiliates.length; // Get current length as the new index\\r\\n        affiliates.push(Affiliate(_receiver, _feeAmount, true, _affiliateID));\\r\\n        affiliateIDtoIndex[_affiliateID] = newIndex; // Set mapping to use newIndex\\r\\n\\r\\n        emit AffiliateAdded(_receiver, _feeAmount);\\r\\n    }\\r\\n\\r\\n    function addManyAffiliates(\\r\\n    bytes32[] memory _affiliateIDs,\\r\\n    address[] memory _receivers,\\r\\n    uint256[] memory _feeAmounts\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _affiliateIDs.length == _receivers.length && _receivers.length == _feeAmounts.length,\\r\\n            \\\"Data mis-matching\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _affiliateIDs.length; i++) {\\r\\n            require(affiliateIDtoIndex[_affiliateIDs[i]] == 0, \\\"Affiliate ID already exists\\\");\\r\\n            require(_receivers[i] != address(0), \\\"Receiver must be a valid address\\\");\\r\\n            require(_feeAmounts[i] <= 500, \\\"Fee amount must be <= 500\\\");\\r\\n\\r\\n            uint256 newIndex = affiliates.length; // Get current length as the new index\\r\\n            affiliates.push(Affiliate(_receivers[i], _feeAmounts[i], true, _affiliateIDs[i])); // Push new affiliate\\r\\n            affiliateIDtoIndex[_affiliateIDs[i]] = newIndex; // Set mapping to use newIndex\\r\\n            affiliateIDexists[_affiliateIDs[i]] = true;\\r\\n\\r\\n            emit AffiliateAdded(_receivers[i], _feeAmounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAffiliateFee(bytes32 _affiliateID) public view returns (uint256 _feeAmount) {\\r\\n        require(affiliateIDexists[_affiliateID], \\\"Affiliate ID does not exist\\\");\\r\\n        uint256 index = affiliateIDtoIndex[_affiliateID];\\r\\n        return affiliates[index].feeAmount;\\r\\n    }\\r\\n    function getAffiliateAddress(bytes32 _affiliateID) public view returns (address _affiliateAddress) {\\r\\n        require(affiliateIDexists[_affiliateID], \\\"Affiliate ID does not exist\\\");\\r\\n        uint256 index = affiliateIDtoIndex[_affiliateID];\\r\\n        return affiliates[index].receiver;\\r\\n    }\\r\\n    function listAllAffiliates() public view returns (Affiliate[] memory) {\\r\\n        return affiliates;\\r\\n    }\\r\\n    function getAffiliateCount() public view returns (uint256 _affiliateCount) {\\r\\n        return affiliates.length;\\r\\n    }\\r\\n    modifier onlySigner {\\r\\n        require(msg.sender == signer1 || msg.sender == signer2, \\\"Must be a signer\\\");\\r\\n        _;\\r\\n    }\\r\\n    function updateRouterAddress(address _newRouter) public onlyOwner {\\r\\n        swapRouter = IV3SwapRouter(_newRouter);\\r\\n    }\\r\\n    function updateWETHAddress(address _newWETH) public onlyOwner {\\r\\n        weth = WETH(_newWETH);\\r\\n    }\\r\\n    /*CHANGE_PRIMARY_BENEFICIARY_CONFIG */\\r\\n    event PrimaryBeneficiaryChangeRequested\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        address indexed newBeneficiary\\r\\n    );\\r\\n    event PrimaryBeneficiaryChangeApproved\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        address indexed newBeneficiary\\r\\n    );\\r\\n    function requestSetPrimaryBeneficiaryChange(address _newPrimary) public onlySigner requireInactiveRequest{\\r\\n        currentRequest = MultiSigRequest({\\r\\n            initiator: msg.sender,\\r\\n            newAddress: _newPrimary,\\r\\n            newFee: 0,\\r\\n            affiliateID: 0,\\r\\n            requestActive: true,\\r\\n            requestType: RequestType.PrimaryBeneficiaryChange\\r\\n        });\\r\\n        emit PrimaryBeneficiaryChangeRequested(msg.sender, _newPrimary);\\r\\n    }\\r\\n    /* END_CHANGE_PRIMARY_BENEFICIARY_CONFIG */\\r\\n\\r\\n    /* CHANGE_PRIMARY_FEE_CONFIG */\\r\\n    event PrimaryFeeChangeRequested\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        uint256 indexed newFee\\r\\n    );\\r\\n    event PrimaryFeeChangeApproved\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        uint256 indexed newFee\\r\\n    );\\r\\n    function requestSetPrimaryFeeChange(uint256 _newFee) public onlySigner requireInactiveRequest {\\r\\n        require(_newFee <= 3000 && _newFee > 100,\\\"cant raise fee over 30% or set below 1%\\\");\\r\\n\\r\\n        currentRequest = MultiSigRequest({\\r\\n            initiator: msg.sender,\\r\\n            newAddress: address(0),\\r\\n            newFee: _newFee,\\r\\n            affiliateID: 0,\\r\\n            requestActive: true,\\r\\n            requestType: RequestType.PrimaryFeeChange\\r\\n        });\\r\\n        emit PrimaryFeeChangeRequested(msg.sender, _newFee);\\r\\n    }\\r\\n    /* END_CHANGE_PRIMARY_FEE_CONFIG */\\r\\n\\r\\n    /* CHANGE_AFFILIATE_FEE_CONFIG */\\r\\n    event AffiliateFeeChangeRequested\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        uint256 indexed newFee,\\r\\n        bytes32 indexed affiliateID\\r\\n    );\\r\\n    event AffiliateFeeChangeApproved\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        uint256 indexed newFee,\\r\\n        bytes32 indexed affiliateID\\r\\n    );\\r\\n    function requestSetAffiliateFeeChange(uint256 _newFee, bytes32 _affiliateID) public onlySigner requireInactiveRequest {\\r\\n        require(_newFee <= 500 && _newFee > 100,\\\"cant raise fee over 5% or set below 1%\\\");\\r\\n        require(affiliateIDexists[_affiliateID], \\\"Affiliate ID does not exist\\\");\\r\\n       \\r\\n        currentRequest = MultiSigRequest({\\r\\n            initiator: msg.sender,\\r\\n            newAddress: address(0),\\r\\n            newFee: _newFee,\\r\\n            affiliateID: _affiliateID,\\r\\n            requestActive: true,\\r\\n            requestType: RequestType.AffiliateFeeChange\\r\\n        });\\r\\n        emit AffiliateFeeChangeRequested(msg.sender, _newFee, _affiliateID);\\r\\n    }\\r\\n    /* END_CHANGE_AFFILIATE_FEE_CONFIG */\\r\\n\\r\\n    /* AFFILIATE_REMOVAL_CONFIG */\\r\\n    event AffiliateRemovalRequested\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        bytes32 indexed affiliateID\\r\\n    );\\r\\n    event AffiliateRemovalApproved\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        bytes32 indexed affiliateID\\r\\n    );\\r\\n    function requestAffiliateRemoval(bytes32 _affiliateID) public onlySigner requireInactiveRequest {\\r\\n        require(affiliateIDexists[_affiliateID], \\\"Affiliate ID does not exist\\\");\\r\\n    \\r\\n        currentRequest = MultiSigRequest({\\r\\n            initiator: msg.sender,\\r\\n            newAddress: address(0),\\r\\n            newFee: 0,\\r\\n            affiliateID: _affiliateID,\\r\\n            requestActive: true,\\r\\n            requestType: RequestType.AffiliateRemoval\\r\\n        });\\r\\n        emit AffiliateRemovalRequested(msg.sender, _affiliateID);\\r\\n    }\\r\\n    /* END_AFFILIATE_REMOVAL_CONFIG */\\r\\n\\r\\n    /* AFFILIATE_GLOBAL_FEE_TOGGLE_CONFIG */\\r\\n    event AffiliateGlobalFeeToggleRequested\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        bool indexed isEnabled\\r\\n    );\\r\\n    event AffiliateGlobalFeeToggleApproved\\r\\n    (\\r\\n        address indexed initiator,\\r\\n        bool indexed isEnabled\\r\\n    );\\r\\n    function requestAffiliateGlobalFeeToggle() public onlySigner requireInactiveRequest{\\r\\n        \\r\\n        currentRequest = MultiSigRequest({\\r\\n            initiator: msg.sender,\\r\\n            newAddress: address(0),\\r\\n            newFee: 0,\\r\\n            affiliateID: 0,\\r\\n            requestActive: true,\\r\\n            requestType: RequestType.AffiliateGlobalFeeToggle\\r\\n        });\\r\\n        emit AffiliateGlobalFeeToggleRequested(msg.sender, isAffiliateFeeEnabled);\\r\\n    }\\r\\n    /* TOGGLE_INDIVIDUAL_AFFILIATE_FEE_CONFIG */\\r\\n    event IndividualAffiliateFeeToggleRequested(\\r\\n        address indexed initiator,\\r\\n        bool indexed isEnabled\\r\\n    );\\r\\n    event IndividualAffiliateFeeToggleApproved(\\r\\n        address indexed initiator,\\r\\n        bool indexed isEnabled\\r\\n    );\\r\\n    function requestIndividualAffiliateFeeToggle(bytes32 _affiliateID) public onlySigner requireInactiveRequest {\\r\\n        currentRequest = MultiSigRequest({\\r\\n            initiator: msg.sender,\\r\\n            newAddress: address(0),\\r\\n            newFee: 0,\\r\\n            affiliateID: _affiliateID,\\r\\n            requestActive: true,\\r\\n            requestType: RequestType.IndividualAffiliateFeeToggle\\r\\n        });\\r\\n        emit IndividualAffiliateFeeToggleRequested(msg.sender, affiliates[affiliateIDtoIndex[_affiliateID]].feeEnabledInvidually);\\r\\n    }\\r\\n    event AffiliateWalletAddressChangeRequested(\\r\\n        address indexed initiator,\\r\\n        address indexed newAddress,\\r\\n        bytes32 indexed affiliateID\\r\\n    );\\r\\n    event AffiliateWalletAddressChangeApproved(\\r\\n        address indexed initiator,\\r\\n        address indexed newAddress,\\r\\n        bytes32 indexed affiliateID\\r\\n    );\\r\\n    function requestAffiliateWalletAddressChange(address _newAddress, bytes32 _affiliateID) public onlySigner requireInactiveRequest {\\r\\n        require(affiliateIDexists[_affiliateID], \\\"Affiliate ID does not exist\\\");\\r\\n        currentRequest = MultiSigRequest({\\r\\n            initiator: msg.sender,\\r\\n            newAddress: _newAddress,\\r\\n            newFee: 0,\\r\\n            affiliateID: _affiliateID,\\r\\n            requestActive: true,\\r\\n            requestType: RequestType.AffiliateWalletAddressChange\\r\\n        });\\r\\n        emit AffiliateWalletAddressChangeRequested(msg.sender, _newAddress, _affiliateID);\\r\\n    }\\r\\n    /* END_AFFILIATE_GLOBAL_FEE_TOGGLE_CONFIG */\\r\\n    error InvalidRequestType(RequestType requestType);\\r\\n    function _approveRequest() public onlySigner {\\r\\n        require(currentRequest.requestActive, \\\"No active request\\\");\\r\\n        require(msg.sender != currentRequest.initiator, \\\"the other signer must complete the transaction\\\");\\r\\n\\r\\n        if (currentRequest.requestType == RequestType.PrimaryBeneficiaryChange) {\\r\\n            primaryBeneficiary = currentRequest.newAddress;\\r\\n            emit PrimaryBeneficiaryChangeApproved(currentRequest.initiator, currentRequest.newAddress);\\r\\n        } \\r\\n        else if (currentRequest.requestType == RequestType.PrimaryFeeChange) {\\r\\n            primaryFee = currentRequest.newFee;\\r\\n            emit PrimaryFeeChangeApproved(currentRequest.initiator, currentRequest.newFee);\\r\\n        } \\r\\n        else if (currentRequest.requestType == RequestType.AffiliateFeeChange) {\\r\\n            bytes32 _affiliateID = currentRequest.affiliateID;\\r\\n            //get the index of the affiliate struct from the affiliateID\\r\\n            uint256 indexToChange = affiliateIDtoIndex[_affiliateID];\\r\\n            //set the new fee\\r\\n            affiliates[indexToChange].feeAmount = currentRequest.newFee;\\r\\n            emit AffiliateFeeChangeApproved(currentRequest.initiator, currentRequest.newFee, currentRequest.affiliateID);\\r\\n        } \\r\\n        else if (currentRequest.requestType == RequestType.AffiliateRemoval) {\\r\\n            //enum the affiliateID\\r\\n            bytes32 _affiliateID = currentRequest.affiliateID;\\r\\n            //get the index of the affiliate struct from the affiliateID\\r\\n            uint256 indexToRemove = affiliateIDtoIndex[_affiliateID];\\r\\n            //enumerate the last affiliate in the array\\r\\n            uint256 lastIndex = affiliates.length - 1;\\r\\n            //get the affiliateID of the last affiliate in the array\\r\\n            bytes32 lastAffiliateID = getAffiliateID(affiliates[lastIndex]);\\r\\n            // Move the last element to the spot of the one to remove\\r\\n            affiliates[indexToRemove] = affiliates[lastIndex];\\r\\n            // Update the mapping to point to the new indexA\\r\\n            affiliateIDtoIndex[lastAffiliateID] = indexToRemove;\\r\\n            // Delete the last element and reduce the array size\\r\\n            affiliates.pop();\\r\\n            // Remove the affiliate ID from the mapping\\r\\n            delete affiliateIDtoIndex[_affiliateID];\\r\\n            // set existence to false\\r\\n            affiliateIDexists[_affiliateID] = false;\\r\\n            emit AffiliateRemovalApproved(currentRequest.initiator, currentRequest.affiliateID);\\r\\n        } \\r\\n        else if (currentRequest.requestType == RequestType.AffiliateGlobalFeeToggle) {\\r\\n            isAffiliateFeeEnabled = !isAffiliateFeeEnabled;\\r\\n            emit AffiliateGlobalFeeToggleApproved(currentRequest.initiator, isAffiliateFeeEnabled);\\r\\n        }\\r\\n        else if (currentRequest.requestType == RequestType.IndividualAffiliateFeeToggle) {\\r\\n            bytes32 _affiliateID = currentRequest.affiliateID;\\r\\n            //get the index of the affiliate struct from the affiliateID\\r\\n            uint256 indexToChange = affiliateIDtoIndex[_affiliateID];\\r\\n            //set the new fee\\r\\n            affiliates[indexToChange].feeEnabledInvidually = !affiliates[indexToChange].feeEnabledInvidually;\\r\\n            emit IndividualAffiliateFeeToggleApproved(currentRequest.initiator, affiliates[indexToChange].feeEnabledInvidually);\\r\\n        }\\r\\n        else if(currentRequest.requestType == RequestType.AffiliateWalletAddressChange){\\r\\n            bytes32 _affiliateID = currentRequest.affiliateID;\\r\\n            //get the index of the affiliate struct from the affiliateID\\r\\n            uint256 indexToChange = affiliateIDtoIndex[_affiliateID];\\r\\n            //set the new fee\\r\\n            affiliates[indexToChange].receiver = currentRequest.newAddress;\\r\\n            emit AffiliateWalletAddressChangeApproved(currentRequest.initiator, currentRequest.newAddress, currentRequest.affiliateID);\\r\\n        }\\r\\n        else {\\r\\n            revert InvalidRequestType(currentRequest.requestType);\\r\\n        }\\r\\n        // Reset the request to indicate that it has been processed\\r\\n        delete currentRequest;\\r\\n    }\\r\\n    /*AFFILIATE_HELPER_FUNCTIONS */\\r\\n    function getAffiliateID(Affiliate memory affiliate) internal pure returns (bytes32){\\r\\n        return affiliate.affiliateID;\\r\\n    }\\r\\n    function getCurrentRequest() public view returns (MultiSigRequest memory){\\r\\n        return currentRequest;\\r\\n    }\\r\\n    function getCurrentRequestType() public view returns (RequestType){\\r\\n        return currentRequest.requestType;\\r\\n    }\\r\\n    function getCurrentRequestInitiator() public view returns (address){\\r\\n        return currentRequest.initiator;\\r\\n    }\\r\\n    function getIndividualAffiliateFeeStatus(bytes32 _affiliateID) public view returns (bool){\\r\\n        return affiliates[affiliateIDtoIndex[_affiliateID]].feeEnabledInvidually;\\r\\n    }\\r\\n    function pause() public onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n    function unpause() public onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n    address private ownerRequest;\\r\\n    //override transferOwnership from ownable to allow for multi sig recovery\\r\\n    function transferOwnership(address newOwner) public override onlySigner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner cannot be the zero address\\\");\\r\\n\\r\\n        // Only update if no votes have been cast yet\\r\\n        if(!ownerRecoveryVotes[signer1] && !ownerRecoveryVotes[signer2]) {\\r\\n            ownerRequest = newOwner;\\r\\n        }\\r\\n\\r\\n        require(ownerRequest == newOwner, \\\"Address not matching request. Signers must agree to new owner address\\\");\\r\\n\\r\\n        ownerRecoveryVotes[msg.sender] = true;\\r\\n\\r\\n        // Check if both signers have agreed\\r\\n        if(ownerRecoveryVotes[signer1] && ownerRecoveryVotes[signer2]) {\\r\\n            _transferOwnership(newOwner);\\r\\n\\r\\n            // Reset the state\\r\\n            ownerRecoveryVotes[signer1] = false;\\r\\n            ownerRecoveryVotes[signer2] = false;\\r\\n            ownerRequest = address(0);\\r\\n        }\\r\\n    }\\r\\n    /* END_AFFILIATE_HELPER_FUNCTIONS */\\r\\n    mapping(address => bool) ownerRecoveryVotes;\\r\\n\\r\\n    modifier onlyRecoveryAndSigners {\\r\\n        require(msg.sender == signerRecovery || msg.sender == signer1 || msg.sender == signer2, \\\"Must be a signer or recovery\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier requireInactiveRequest {\\r\\n        require(currentRequest.requestActive == false, \\\"request already exists\\\");\\r\\n        _;\\r\\n    }\\r\\n    /* RECOVER_FROM_COMPROMISED_SIGNER */\\r\\n    event SingerRecovered(\\r\\n        address indexed newSigner,\\r\\n        address indexed lostSigner\\r\\n    );\\r\\n    function recoverLostDelegate(address _newSigner) public onlyRecoveryAndSigners{\\r\\n        //for each call map address to true\\r\\n        signerRecoveryVotes[msg.sender] = true;\\r\\n        //if any 2 of 3 votes are true, reset signers\\r\\n        if(\\r\\n            signerRecoveryVotes[signer1] && signerRecoveryVotes[signer2] ||\\r\\n            signerRecoveryVotes[signer1] && signerRecoveryVotes[signerRecovery] ||\\r\\n            signerRecoveryVotes[signer2] && signerRecoveryVotes[signerRecovery]\\r\\n        ){\\r\\n            //determine which signer has not voted\\r\\n            // if signer1 has not voted we will assume they are the lost delegate\\r\\n            if(!signerRecoveryVotes[signer1]){\\r\\n                signer1 = _newSigner;\\r\\n                emit SingerRecovered(_newSigner, signer1);\\r\\n            }\\r\\n            //else if signer2 has not voted we will assume they are the lost delegate\\r\\n            else if(!signerRecoveryVotes[signer2]){\\r\\n                signer2 = _newSigner;\\r\\n                emit SingerRecovered(_newSigner, signer2);\\r\\n            }\\r\\n\\r\\n            //reset votes\\r\\n            signerRecoveryVotes[signer1] = false;\\r\\n            signerRecoveryVotes[signer2] = false;\\r\\n            signerRecoveryVotes[signerRecovery] = false;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    /* END_RECOVER_FROM_COMPROMISED_SIGNER */\\r\\n\\r\\n    receive() payable external {\\r\\n        // Ensure that only the contract itself can send ETH (if that's the intended behavior)\\r\\n        require(msg.sender == address(this) || msg.sender == address(weth), \\\"Unauthorized sender\\\");\\r\\n        // Emit an event to log that ETH was received\\r\\n        emit EthReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    //by logic in contract this should never be able to be used. but in case of emergency and ETH is stuck in contract. this will allow the owner to withdraw it safely and transparently.\\r\\n    function rescueETHFromContract() public onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n    //by logic in contract this should never be able to be used. but in case of emergency and ERC20 is stuck in contract. this will allow the owner to withdraw it safely and transparently.\\r\\n    function rescueERC20TokenFromContract(address _tokenAddress) public onlyOwner {\\r\\n        bool transfer = IERC20(_tokenAddress).transfer(owner(), IERC20(_tokenAddress).balanceOf(address(this)));\\r\\n        require(transfer, \\\"Failed to transfer tokens\\\");\\r\\n    }\\r\\n    event EthReceived(address indexed sender, uint256 amount);\\r\\n    event DonationProcessed\\r\\n    (\\r\\n        uint256 affiliateTake,\\r\\n        uint256 primaryTake,\\r\\n        uint256 totalDonation,\\r\\n        address sender\\r\\n    );\\r\\n    event AffiliateAdded\\r\\n    (\\r\\n        address receiver,\\r\\n        uint256 feeAmount\\r\\n    );\\r\\n    event AffiliateFeeToggled\\r\\n    (\\r\\n        bool isEnabled\\r\\n    );\\r\\n    event AffiliateFeeChanged\\r\\n    (\\r\\n        uint256 affiliateID,\\r\\n        uint256 newFee\\r\\n    ); \\r\\n    event PrimaryFeeChanged\\r\\n    (\\r\\n        uint256 newFee\\r\\n    ); \\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/IV3Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IV3SwapRouter {\\r\\n   \\r\\n    function exactInputSingle(\\r\\n        IV3SwapRouter.ExactInputSingleParams memory params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface WETH {\\r\\n\\r\\n    function approve(address guy, uint256 wad) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n\\r\\n    function transfer(address dst, uint256 wad) external returns (bool);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n\\r\\n\\r\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\r\\n    event Deposit(address indexed dst, uint256 wad);\\r\\n    event Withdrawal(address indexed src, uint256 wad);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_irouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primaryBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_primaryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum DonorshipPaymentProcessor.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"}],\"name\":\"InvalidRequestType\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"AffiliateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"}],\"name\":\"AffiliateFeeChangeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"}],\"name\":\"AffiliateFeeChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"AffiliateFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"AffiliateFeeToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"AffiliateGlobalFeeToggleApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"AffiliateGlobalFeeToggleRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"}],\"name\":\"AffiliateRemovalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"}],\"name\":\"AffiliateRemovalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"}],\"name\":\"AffiliateWalletAddressChangeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"}],\"name\":\"AffiliateWalletAddressChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"affiliateTake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"primaryTake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDonation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DonationProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"IndividualAffiliateFeeToggleApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"IndividualAffiliateFeeToggleRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"PrimaryBeneficiaryChangeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"PrimaryBeneficiaryChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"PrimaryFeeChangeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"PrimaryFeeChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"PrimaryFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lostSigner\",\"type\":\"address\"}],\"name\":\"SingerRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_approveRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_affiliateIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addManyAffiliates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"affiliateIDexists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"affiliateIDtoIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"requestActive\",\"type\":\"bool\"},{\"internalType\":\"enum DonorshipPaymentProcessor.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"enactPrimaryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountDeducted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalOutAfterFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"}],\"name\":\"enactSecondaryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountDeducted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalOutAfterFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"}],\"name\":\"getAffiliateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_affiliateAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAffiliateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_affiliateCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"}],\"name\":\"getAffiliateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"requestActive\",\"type\":\"bool\"},{\"internalType\":\"enum DonorshipPaymentProcessor.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"}],\"internalType\":\"struct DonorshipPaymentProcessor.MultiSigRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRequestInitiator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRequestType\",\"outputs\":[{\"internalType\":\"enum DonorshipPaymentProcessor.RequestType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"}],\"name\":\"getIndividualAffiliateFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAffiliateFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllAffiliates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeEnabledInvidually\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateID\",\"type\":\"bytes32\"}],\"internalType\":\"struct DonorshipPaymentProcessor.Affiliate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"processDonation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"processTokenDonation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"recoverLostDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestAffiliateGlobalFeeToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"}],\"name\":\"requestAffiliateRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"}],\"name\":\"requestAffiliateWalletAddressChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"}],\"name\":\"requestIndividualAffiliateFeeToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_affiliateID\",\"type\":\"bytes32\"}],\"name\":\"requestSetAffiliateFeeChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPrimary\",\"type\":\"address\"}],\"name\":\"requestSetPrimaryBeneficiaryChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"requestSetPrimaryFeeChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueERC20TokenFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETHFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerRecovery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerRecoveryVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IV3SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"updateRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWETH\",\"type\":\"address\"}],\"name\":\"updateWETHAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract WETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DonorshipPaymentProcessor", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc450000000000000000000000003fc2dbdbf7708e8075c3a7ea1073ea05ff254e3600000000000000000000000081fb552ccbd65daa73f054dabd2d282fa07279b500000000000000000000000017863c66490007eaa8b1b2b720f6cdc8107d8db300000000000000000000000000000000000000000000000000000000000002ee000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}