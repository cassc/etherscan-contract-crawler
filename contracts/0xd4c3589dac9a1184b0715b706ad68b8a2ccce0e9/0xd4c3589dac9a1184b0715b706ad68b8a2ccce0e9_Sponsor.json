{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Sponsor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./TimeExchange.sol\\\";\\n\\n/// @title Sponsor: a TIME Token Finance smart contract to relay and monitor transactions that generate value on the platform; it rewards users accordingly, which means users' transactions are being sponsored\\n/// @author https://timetoken.finance\\n/// @notice Reward is given in the network's native token, as recurrent prizes, which are granted according to users' activity frequency and their transacted amount.\\n/// Please refer that interacting with this contract is solely at your own risk!\\n/// Also, the administrator reserves the right to claim all funds from this contract at any time at their own discretion, once they deposit their own funds here...\\n/// There are other ways of interacting and trading with the TIME Token Finance platform, either through the TimeExchange contract or directly through the TimeToken and TimeIsUp contracts.\\n/// We encourage everyone who wishes to do so if they feel uncomfortable with the functions of this contract.\\ncontract Sponsor {\\n    using Math for uint256;\\n\\n    enum OperationType {\\n        MINT,\\n        SWAP_TIME,\\n        SWAP_TUP\\n    }\\n\\n    struct Participant {\\n        bool isParticipating;\\n        bool wasSelected;\\n        address previousParticipant;\\n        address nextParticipant;\\n        mapping(uint256 => uint256) interactionPoints;\\n        mapping(uint256 => uint256) valuePoints;\\n    }\\n\\n    struct Winners {\\n        address first;\\n        address second;\\n        address third;\\n        address fourth;\\n    }\\n\\n    event ParticipantAdded(address participant);\\n    event ParticipantRemoved(address participant);\\n    event ParticipantsListCleaned();\\n    event RoundWinner(uint256 round, address participant, uint256 earnedPrize);\\n\\n    bool private _canReceiveAdditionalFunds = true;\\n    bool private _isOperationLocked;\\n\\n    bool public isOperationTypeFlipped;\\n\\n    TimeExchange public immutable timeExchange;\\n    ITimeToken public immutable timeToken;\\n    ITimeIsUp public immutable tupToken;\\n\\n    address public administrator;\\n    address public currentLeader;\\n    address public firstParticipant;\\n    address public lastParticipant;\\n\\n    uint256 private constant D = 10 ** 18;\\n    uint256 public constant TIME_BURNING_RATE = 5_000;\\n    uint256 public constant MININUM_NUMBER_OF_PARTICIPANTS = 5;\\n    uint256 public constant NUMBER_OF_SELECTED_WINNERS = 4;\\n\\n    uint256 private CURRENT_FEES_PERCENTAGE;\\n    uint256 private PERCENTAGE_PROFIT_TARGET = 11_000;\\n    uint256 private REBATE_PERCENTAGE = 100;\\n\\n    uint256 public accumulatedPrize;\\n    uint256 public currentAdditionalPrize;\\n    uint256 public currentPrize;\\n    uint256 public currentRebate;\\n    uint256 public currentTarget;\\n    uint256 public currentValueMoved;\\n    uint256 public maxInteractionPoints;\\n    uint256 public minAmountToEarnPoints;\\n    uint256 public numberOfParticipants;\\n    uint256 public round;\\n\\n    mapping(address => uint256) private _currentBlock;\\n\\n    mapping(address => uint256) public lastBlock;\\n    mapping(address => uint256) public prizeToClaim;\\n    mapping(address => uint256) public remainingTime;\\n\\n    mapping(uint256 => Winners winners) public roundWinners;\\n\\n    mapping(address => Participant participant) public participants;\\n\\n    constructor(address timeTokenAddress, address tupTokenAddress, address timeExchangeAddress) {\\n        administrator = msg.sender;\\n        timeToken = ITimeToken(payable(timeTokenAddress));\\n        tupToken = ITimeIsUp(payable(tupTokenAddress));\\n        timeExchange = TimeExchange(payable(timeExchangeAddress));\\n        setCurrentFeesPercentage(timeExchange.FEE());\\n        setMinAmountToEarnPoints(0.1 ether);\\n        round = 1;\\n    }\\n\\n    receive() external payable {\\n        _depositPrize(0, msg.value);\\n    }\\n\\n    fallback() external payable {\\n        require(msg.data.length == 0);\\n        _depositPrize(0, msg.value);\\n    }\\n\\n    /// @notice Modifier to allow only administrator access\\n    modifier admin() {\\n        require(msg.sender == administrator, \\\"Sponsor: only admin allowed\\\");\\n        _;\\n    }\\n\\n    /// @notice Modifier to allow registering additional funds to prize when receiveing native token of the network\\n    modifier canReceiveAdditional() {\\n        _canReceiveAdditionalFunds = true;\\n        _;\\n        _canReceiveAdditionalFunds = false;\\n    }\\n\\n    /// @notice Modifier to disallow registering additional funds to prize when receiveing native token of the network\\n    modifier cannotReceiveAdditional() {\\n        _canReceiveAdditionalFunds = false;\\n        _;\\n        _canReceiveAdditionalFunds = true;\\n    }\\n\\n    /// @notice Verifies if the current round can be finished\\n    modifier checkEndOfRound() {\\n        _;\\n        if (queryAmountRemainingForPrize() == 0 && currentPrize > 0 && numberOfParticipants >= MININUM_NUMBER_OF_PARTICIPANTS) {\\n            _rewardWinnersAndCloseRound();\\n        }\\n    }\\n\\n    /// @notice Modifier to make a function runs only once per block\\n    modifier onlyOncePerBlock() {\\n        require(block.number != _currentBlock[tx.origin], \\\"Sponsor: you cannot perform this operation again in this block\\\");\\n        _currentBlock[tx.origin] = block.number;\\n        _;\\n    }\\n\\n    /// @notice Implement security to avoid reentrancy attacks\\n    modifier nonReentrant() {\\n        require(!_isOperationLocked, \\\"Sponsor: this operation is locked\\\");\\n        _isOperationLocked = true;\\n        _;\\n        _isOperationLocked = false;\\n    }\\n\\n    /// @notice Modifier used when the status of the current participant should be checked and updated\\n    /// @dev Called together with mint(), swap(), and extendParticipationPeriod() functions\\n    modifier update() {\\n        if ((lastBlock[msg.sender] == 0 && block.number != 0) || remainingTime[msg.sender] == 0) {\\n            lastBlock[msg.sender] = block.number;\\n        }\\n        uint256 elapsedTime = block.number - lastBlock[msg.sender];\\n        if (elapsedTime > remainingTime[msg.sender] && participants[msg.sender].isParticipating) {\\n            _removeParticipant(msg.sender);\\n        }\\n        _;\\n        remainingTime[msg.sender] = (elapsedTime > remainingTime[msg.sender]) ? 0 : remainingTime[msg.sender] - elapsedTime;\\n        lastBlock[msg.sender] = block.number;\\n        if (remainingTime[msg.sender] >= elapsedTime && remainingTime[msg.sender] > 0 && !participants[msg.sender].isParticipating) {\\n            _addParticipant(msg.sender);\\n        }\\n    }\\n\\n    //\\n    /// @notice Add a participant and adjusts the participants chained list\\n    /// @dev The current participant added is sent to the end of the list\\n    /// @param participant The address of the participant\\n    function _addParticipant(address participant) private {\\n        if (participant != address(0) && !participants[participant].isParticipating) {\\n            participants[participant].previousParticipant = lastParticipant;\\n            participants[participant].nextParticipant = address(0);\\n            if (firstParticipant == address(0)) {\\n                firstParticipant = participant;\\n            }\\n            if (lastParticipant != address(0)) {\\n                participants[lastParticipant].nextParticipant = participant;\\n            }\\n            lastParticipant = participant;\\n            participants[participant].isParticipating = true;\\n            numberOfParticipants++;\\n            emit ParticipantAdded(participant);\\n        }\\n    }\\n\\n    /// @notice Burn some TIME tokens in order to regulate the market inflation\\n    /// @dev It runs with try { } catch to not revert in case of being unsuccessful\\n    function _burnTime() private {\\n        uint256 balanceInTime = timeToken.balanceOf(address(this));\\n        if (balanceInTime > 0) {\\n            try timeToken.burn(balanceInTime.mulDiv(TIME_BURNING_RATE, 10_000)) { } catch { }\\n        }\\n    }\\n\\n    /// @notice Resets the entire list of participants in the contract\\n    /// @dev It also should clean the participants' score/pontuation, if the case\\n    function _cleanParticipantsList() private {\\n        address currentParticipant = firstParticipant;\\n        address nextParticipant;\\n        while (currentParticipant != address(0)) {\\n            nextParticipant = participants[currentParticipant].nextParticipant;\\n            participants[currentParticipant].previousParticipant = address(0);\\n            participants[currentParticipant].nextParticipant = address(0);\\n            participants[currentParticipant].isParticipating = false;\\n            participants[currentParticipant].wasSelected = false;\\n            participants[currentParticipant].interactionPoints[round] = 0;\\n            participants[currentParticipant].valuePoints[round] = 0;\\n            remainingTime[currentParticipant] = 0;\\n            lastBlock[currentParticipant] = block.number;\\n            currentParticipant = nextParticipant;\\n        }\\n        firstParticipant = address(0);\\n        lastParticipant = address(0);\\n        numberOfParticipants = 0;\\n        emit ParticipantsListCleaned();\\n    }\\n\\n    /// @notice Deposits the resources used as prizes (main and additional)\\n    /// @dev Indirectly called by admins and third parties (as additional deposit)\\n    /// @param amount The main deposit amount\\n    /// @param additionalAmount The additional deposit amount\\n    function _depositPrize(uint256 amount, uint256 additionalAmount) private {\\n        require(msg.value > 0, \\\"Sponsor: please deposit some amount\\\");\\n        if (_canReceiveAdditionalFunds) {\\n            if (amount > 0) {\\n                accumulatedPrize += amount;\\n                if (currentPrize == 0) {\\n                    currentPrize = accumulatedPrize / 2;\\n                    currentTarget = (currentPrize + currentPrize.mulDiv(PERCENTAGE_PROFIT_TARGET, 10_000)).mulDiv(10_000, CURRENT_FEES_PERCENTAGE);\\n                }\\n            }\\n            if (additionalAmount > 0) {\\n                uint256 halfAdditionalAmount = (additionalAmount / 2);\\n                accumulatedPrize += additionalAmount;\\n                currentAdditionalPrize += halfAdditionalAmount;\\n                currentRebate += halfAdditionalAmount.mulDiv(REBATE_PERCENTAGE, 10_000);\\n            }\\n        }\\n    }\\n\\n    /// @notice Receives additional resources from the TIME and TUP contracts\\n    /// @dev It calls the TUP contract indirectly, using Claimer\\n    function _earnAdditionalResources() private canReceiveAdditional {\\n        if (timeToken.withdrawableShareBalance(address(this)) > 0) {\\n            try timeToken.withdrawShare() { } catch { }\\n        }\\n        if (tupToken.queryPublicReward() > 0) {\\n            try tupToken.splitSharesWithReward() { } catch { }\\n        }\\n    }\\n\\n    /// @notice Calculates and storage the received points of a participant, but only if the negotiated amount is above the minimum established\\n    /// @dev It classifies operations according to its relevance for the protocol\\n    /// @param participant The address of participant to register points\\n    /// @param operation Type of the operation called by a participant and relayed to the TimeExchange contract\\n    /// @param amount The amount of native tokens moved by the participant\\n    function _registerPoints(address participant, OperationType operation, uint256 amount) private {\\n        if (amount >= minAmountToEarnPoints && participant != address(0)) {\\n            uint256 weight = isOperationTypeFlipped ? (uint256(type(OperationType).max) - uint256(operation)) + 1 : uint256(operation) + 1;\\n            participants[participant].interactionPoints[round] += weight;\\n            participants[participant].valuePoints[round] += (amount * weight);\\n            if (participants[participant].interactionPoints[round] > maxInteractionPoints) {\\n                maxInteractionPoints = participants[participant].interactionPoints[round];\\n                currentLeader = participant;\\n            }\\n        }\\n    }\\n\\n    /// @notice Remove a participant and adjusts the participants chained list of the contract\\n    /// @dev It concatenates the right next participant of the current participant with the previous one\\n    /// @param participant The address of a participant which will be removed of the chained list\\n    function _removeParticipant(address participant) private {\\n        if (participant != address(0) && participants[participant].isParticipating) {\\n            address previousParticipant = participants[participant].previousParticipant;\\n            address nextParticipant = participants[participant].nextParticipant;\\n            if (lastParticipant == participant) {\\n                lastParticipant = previousParticipant;\\n            }\\n            if (firstParticipant == participant) {\\n                firstParticipant = nextParticipant;\\n            }\\n            if (previousParticipant != address(0)) {\\n                participants[previousParticipant].nextParticipant = nextParticipant;\\n            }\\n            if (nextParticipant != address(0)) {\\n                participants[nextParticipant].previousParticipant = previousParticipant;\\n            }\\n            if (participant == currentLeader) {\\n                currentLeader = address(0);\\n                maxInteractionPoints = 0;\\n            }\\n            participants[participant].previousParticipant = address(0);\\n            participants[participant].nextParticipant = address(0);\\n            participants[participant].isParticipating = false;\\n            participants[participant].wasSelected = false;\\n            participants[participant].interactionPoints[round] = 0;\\n            participants[participant].valuePoints[round] = 0;\\n            numberOfParticipants--;\\n            emit ParticipantRemoved(participant);\\n        }\\n    }\\n\\n    /// @notice Performs the reward and close the current round\\n    /// @dev Another round is automatically initiated\\n    function _rewardWinnersAndCloseRound() private nonReentrant {\\n        uint256 totalPrize = queryCurrentTotalPrize();\\n        if (totalPrize <= address(this).balance) {\\n            uint256 prizeShares = totalPrize / 10;\\n            if (!checkParticipation(currentLeader)) {\\n                _removeParticipant(currentLeader);\\n                if (numberOfParticipants < MININUM_NUMBER_OF_PARTICIPANTS) {\\n                    return;\\n                }\\n                currentLeader = _selectRandomWinner();\\n            } else {\\n                participants[currentLeader].wasSelected = true;\\n            }\\n            uint256 earnedPrize = (NUMBER_OF_SELECTED_WINNERS * prizeShares);\\n            prizeToClaim[currentLeader] += earnedPrize;\\n            emit RoundWinner(round, currentLeader, earnedPrize);\\n            address[] memory winners = _selectRoundWinners();\\n            for (uint256 i = 0; i < winners.length; i++) {\\n                earnedPrize = (winners.length - i) * prizeShares;\\n                prizeToClaim[winners[i]] += earnedPrize;\\n                emit RoundWinner(round, winners[i], earnedPrize);\\n            }\\n            roundWinners[round].first = currentLeader;\\n            roundWinners[round].second = winners[0];\\n            roundWinners[round].third = winners[1];\\n            roundWinners[round].fourth = winners[2];\\n            accumulatedPrize -= totalPrize;\\n            currentPrize = accumulatedPrize / 2;\\n            currentTarget = currentPrize > 0 ? (currentPrize + currentPrize.mulDiv(PERCENTAGE_PROFIT_TARGET, 10_000)).mulDiv(10_000, CURRENT_FEES_PERCENTAGE) : 0;\\n            currentAdditionalPrize = 0;\\n            currentRebate = 0;\\n            currentValueMoved = 0;\\n            _burnTime();\\n            _cleanParticipantsList();\\n            maxInteractionPoints = 0;\\n            currentLeader = address(0);\\n            round++;\\n        }\\n    }\\n\\n    /// @notice Picks a randomly selected winner\\n    /// @dev It traverses the whole chained list of participants to pick those who match with a random index number. It marks the winner from that list right after the selection\\n    /// @return randomWinner The address of the picked random winner\\n    function _selectRandomWinner() private returns (address randomWinner) {\\n        uint256 nonce = 1;\\n        while (randomWinner == address(0)) {\\n            address currentParticipant = firstParticipant;\\n            uint256 randomWinnerIndex = uint256(\\n                keccak256(\\n                    abi.encode(\\n                        nonce++, block.number, block.timestamp, block.prevrandao, address(this), currentPrize, currentValueMoved, currentTarget\\n                    )\\n                )\\n            ) % numberOfParticipants;\\n            uint256 currentIndex;\\n            while (currentParticipant != address(0)) {\\n                if (currentIndex == randomWinnerIndex && checkParticipation(currentParticipant)) {\\n                    if (participants[currentParticipant].wasSelected) {\\n                        if (randomWinnerIndex == numberOfParticipants - 1) {\\n                            currentIndex = 0;\\n                            randomWinnerIndex = 0;\\n                            currentParticipant = firstParticipant;\\n                        } else {\\n                            randomWinnerIndex++;\\n                        }\\n                        continue;\\n                    }\\n                    participants[currentParticipant].wasSelected = true;\\n                    randomWinner = currentParticipant;\\n                    break;\\n                }\\n                currentIndex++;\\n                currentParticipant = participants[currentParticipant].nextParticipant;\\n            }\\n        }\\n    }\\n\\n    /// @notice Select the round winners with the highest value points earned. The last winner is randomly selected\\n    /// @dev It traverses the whole chained list of participants to pick those with the highest earned points. It marks the winners from that list right after the selection\\n    /// @return winners Array containing addresses of the round winners\\n    function _selectRoundWinners() private returns (address[] memory winners) {\\n        winners = new address[](NUMBER_OF_SELECTED_WINNERS - 1);\\n        uint256[] memory maxPoint = new uint256[](winners.length);\\n        address currentParticipant;\\n        address nextParticipant;\\n        for (uint256 i = 0; i < winners.length - 1; i++) {\\n            currentParticipant = firstParticipant;\\n            while (currentParticipant != address(0)) {\\n                nextParticipant = participants[currentParticipant].nextParticipant;\\n                if (\\n                    participants[currentParticipant].valuePoints[round] > maxPoint[i] && checkParticipation(currentParticipant)\\n                        && !participants[currentParticipant].wasSelected\\n                ) {\\n                    maxPoint[i] = participants[currentParticipant].valuePoints[round];\\n                    winners[i] = currentParticipant;\\n                }\\n                currentParticipant = nextParticipant;\\n            }\\n            // If still has no winner, it picks randomly\\n            if (winners[i] == address(0)) {\\n                winners[i] = _selectRandomWinner();\\n            }\\n            participants[winners[i]].wasSelected = true;\\n        }\\n        // It now picks a random winner as the last winner\\n        winners[winners.length - 1] = _selectRandomWinner();\\n        return winners;\\n    }\\n\\n    /// @notice Withdraws the total prize received by the sponsors\\n    /// @dev Called by a user after receiveing a prize for his address. The prize remains in the contract for an indefinite time. Non reentrant\\n    function claimPrize() external nonReentrant {\\n        require(prizeToClaim[msg.sender] > 0, \\\"Sponsor: there is no prize to claim for the caller address\\\");\\n        require(prizeToClaim[msg.sender] <= address(this).balance, \\\"Sponsor: there is no enough amount to withdraw\\\");\\n        uint256 amount = prizeToClaim[msg.sender];\\n        prizeToClaim[msg.sender] = 0;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /// @notice Informs if a participant is active in the current sponsorship round\\n    /// @dev It must check if the participant also has enough TIME to be consumed\\n    /// @param participant The participant's address\\n    /// @return isParticipating If the informed address is participating in the sponsorship round indeed\\n    function checkParticipation(address participant) public view returns (bool) {\\n        return ((remainingTime[participant] >= (block.number - lastBlock[participant])) && participants[participant].isParticipating);\\n    }\\n\\n    /// @notice Deposit the main contract prize (Usually called by the sponsors - admins). The contract can receive additional funds directly from other sources\\n    /// @dev Only admins can call this function. It calls a private function by chaging the order of parameters, meaning that it is the main deposit\\n    function depositPrize() external payable admin {\\n        _depositPrize(msg.value, 0);\\n    }\\n\\n    /// @notice Withdraws all the funds of the contract to the administrator address and restarts the contract variables\\n    /// @dev Only admin can call this function. For emergency only!\\n    function emergencyWithdraw() external admin {\\n        _cleanParticipantsList();\\n        accumulatedPrize = 0;\\n        currentAdditionalPrize = 0;\\n        currentPrize = 0;\\n        currentRebate = 0;\\n        currentTarget = 0;\\n        currentValueMoved = 0;\\n        currentLeader = address(0);\\n        maxInteractionPoints = 0;\\n        uint256 tupBalance = tupToken.balanceOf(address(this));\\n        if (tupBalance > 0) {\\n            try tupToken.transfer(administrator, tupBalance) { } catch { }\\n        }\\n        try timeToken.transfer(administrator, timeToken.balanceOf(address(this))) { } catch { }\\n        payable(administrator).transfer(address(this).balance);\\n    }\\n\\n    /// @notice Enables participation in the sponsorship by depositing TIME\\n    /// @dev User must approve TIME to be spent before calling this function\\n    /// @param amountTime The amount of TIME the user would like to deposit in order to participate the current sponsorship round\\n    function extendParticipationPeriod(uint256 amountTime) external cannotReceiveAdditional checkEndOfRound update {\\n        require(\\n            timeToken.allowance(msg.sender, address(this)) >= amountTime, \\\"Sponsor: please approve the TIME amount to extend your sponsorship period\\\"\\n        );\\n        require(amountTime >= D, \\\"Sponsor: you should deposit 1 TIME or more to extend your sponsorship period\\\");\\n        timeToken.transferFrom(msg.sender, address(this), amountTime);\\n        remainingTime[msg.sender] += amountTime.mulDiv(1, D);\\n    }\\n\\n    /// @notice Flip the operation type so the most value operation turns into the lesser one, and vice-versa\\n    /// @dev The isOperationTypeFlipped is used in _registerPoints() function to adjust the weight applied over the operation number\\n    function flipOperationType() external admin {\\n        isOperationTypeFlipped = !isOperationTypeFlipped;\\n    }\\n\\n    /// @notice Performs mint of TUP tokens by demand\\n    /// @dev Relays the mint function to the TimeIsUp contract, but observing and registering additional information\\n    /// @param amountTime The amount of TIME the user wants to use to mint TUP\\n    function mint(uint256 amountTime) external payable cannotReceiveAdditional checkEndOfRound onlyOncePerBlock update {\\n        require(\\n            timeToken.allowance(msg.sender, address(this)) >= amountTime, \\\"Sponsor: you should allow TIME to be spent before calling the function\\\"\\n        );\\n        if (amountTime > 0) {\\n            timeToken.transferFrom(msg.sender, address(this), amountTime);\\n            timeToken.approve(address(tupToken), amountTime);\\n        }\\n        uint256 balanceBefore = tupToken.balanceOf(address(this));\\n        try tupToken.mint{ value: msg.value }(amountTime) {\\n            currentValueMoved += msg.value;\\n            uint256 balanceAfter = tupToken.balanceOf(address(this));\\n            tupToken.transfer(msg.sender, balanceAfter - balanceBefore);\\n            if (checkParticipation(msg.sender) && amountTime == 0) {\\n                _registerPoints(msg.sender, OperationType.MINT, msg.value);\\n                _earnAdditionalResources();\\n            }\\n        } catch {\\n            revert(\\\"Sponsor: unable to relay mint\\\");\\n        }\\n    }\\n\\n    /// @notice Query for the amount needed to unlock the prize for round winners\\n    /// @return amountRemaining The amount which is remaining to achieve the current target for prize unlock\\n    function queryAmountRemainingForPrize() public view returns (uint256) {\\n        return currentTarget > (currentRebate + currentValueMoved) ? currentTarget - (currentRebate + currentValueMoved) : 0;\\n    }\\n\\n    /// @notice Query for the prize amount deposited by admins and earned by the contract\\n    /// @return totalPrize Current prize + additional prize earned\\n    function queryCurrentTotalPrize() public view returns (uint256) {\\n        return (currentPrize + currentAdditionalPrize);\\n    }\\n\\n    /// @notice Query for the interaction points of a participant\\n    /// @return interactionPoints Informs the number of interactions (times an operation weight) a given user address interacted with the Sponsor contract\\n    function queryInteractionPoints(address participant) external view returns (uint256) {\\n        return checkParticipation(participant) ? participants[participant].interactionPoints[round] : 0;\\n    }\\n\\n    /// @notice Query for the value points of a participant\\n    /// @return valuePoints Informs the amount of native tokens (times an operation weight) a given user address negotiated with the Sponsor contract\\n    function queryValuePoints(address participant) external view returns (uint256) {\\n        return checkParticipation(participant) ? participants[participant].valuePoints[round] : 0;\\n    }\\n\\n    /// @notice Changes the new administrator address\\n    /// @dev Only the owner of the contract can access\\n    /// @param newAdministrator The new address value to be set.\\n    function setAdministrator(address newAdministrator) public admin {\\n        administrator = newAdministrator;\\n    }\\n\\n    /// @notice Adjusts the new fees percentage charged by the protocol\\n    /// @dev Only the owner of the contract can access\\n    /// @param newCurrentFeesPercentage The new value to be set. Factor of 10_000. Example: if percentage is 1%, it should be set as 100\\n    function setCurrentFeesPercentage(uint256 newCurrentFeesPercentage) public admin {\\n        CURRENT_FEES_PERCENTAGE = newCurrentFeesPercentage;\\n    }\\n\\n    /// @notice Adjusts the minimum amount a participant should trade to earn points in the protocol\\n    /// @dev Only the owner of the contract can access\\n    /// @param newMinAmount The new value to be set. It should be defined in terms of the native token of the underlying network\\n    function setMinAmountToEarnPoints(uint256 newMinAmount) public admin {\\n        minAmountToEarnPoints = newMinAmount;\\n    }\\n\\n    /// @notice Adjusts the percentage of the desirable profit\\n    /// @dev Only the owner of the contract can access\\n    /// @param newProfitTargetPercentage The new value to be set. Factor of 10_000. Example: if percentage is 1%, it should be set as 100\\n    function setPercentageProfitTarget(uint256 newProfitTargetPercentage) external admin {\\n        PERCENTAGE_PROFIT_TARGET = newProfitTargetPercentage;\\n    }\\n\\n    /// @notice Adjusts the percentage of rebates to achieve prize targets\\n    /// @dev Only the owner of the contract can access\\n    /// @param newRebatePercentage The new value to be set. Factor of 10_000. Example: if percentage is 1%, it should be set as 100\\n    function setRebatePercentage(uint256 newRebatePercentage) external admin {\\n        REBATE_PERCENTAGE = newRebatePercentage;\\n    }\\n\\n    /// @notice It relay swaps to TimeExchange contract, but register points only for native currency to another token\\n    /// @dev It should inform address(0) as tokenFrom or tokenTo when considering native currency\\n    /// @param tokenFrom The address of the token to be swapped\\n    /// @param tokenTo The address of the token to be swapped\\n    /// @param amount The token or native currency amount to be swapped\\n    function swap(address tokenFrom, address tokenTo, uint256 amount)\\n        external\\n        payable\\n        cannotReceiveAdditional\\n        checkEndOfRound\\n        onlyOncePerBlock\\n        update\\n    {\\n        IERC20 tokenToTransfer;\\n        uint256 balanceBefore;\\n        if (tokenFrom != address(0)) {\\n            IERC20 tokenFromTransfer = IERC20(tokenFrom);\\n            require(tokenFromTransfer.allowance(msg.sender, address(this)) >= amount, \\\"Sponsor: please approve the amount to swap\\\");\\n            tokenFromTransfer.transferFrom(msg.sender, address(this), amount);\\n            tokenFromTransfer.approve(address(timeExchange), amount);\\n        }\\n        if (tokenTo != address(0)) {\\n            tokenToTransfer = IERC20(tokenTo);\\n            balanceBefore = tokenToTransfer.balanceOf(address(this));\\n        } else {\\n            balanceBefore = address(this).balance;\\n        }\\n        try timeExchange.swap{ value: msg.value }(tokenFrom, tokenTo, amount) {\\n            uint256 balanceAfter;\\n            if (tokenTo != address(0)) {\\n                balanceAfter = tokenToTransfer.balanceOf(address(this));\\n                tokenToTransfer.transfer(msg.sender, balanceAfter - balanceBefore);\\n            } else {\\n                balanceAfter = address(this).balance;\\n                payable(msg.sender).transfer(balanceAfter - balanceBefore);\\n            }\\n            if (tokenFrom == address(0)) {\\n                if (checkParticipation(msg.sender)) {\\n                    _registerPoints(msg.sender, tokenTo == address(timeToken) ? OperationType.SWAP_TIME : OperationType.SWAP_TUP, msg.value);\\n                    _earnAdditionalResources();\\n                }\\n                currentValueMoved += msg.value;\\n            }\\n        } catch {\\n            revert(\\\"Sponsor: unable to relay swap\\\");\\n        }\\n    }\\n\\n    /// @notice Withdraw native tokens given to address zero\\n    /// @dev Eventually the winners don't have remaining TIME deposited when a round is finished. When this happens, the prize goes to the address(0)\\n    function withdrawFromAddressZeroPrizes() external admin {\\n        require(prizeToClaim[address(0)] > 0, \\\"Sponsor: there is no prize to claim for the zero address\\\");\\n        require(prizeToClaim[address(0)] <= address(this).balance, \\\"Sponsor: there is no enough amount to withdraw\\\");\\n        uint256 amount = prizeToClaim[address(0)];\\n        prizeToClaim[address(0)] = 0;\\n        payable(administrator).transfer(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TimeExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./ITimeToken.sol\\\";\\nimport \\\"./ITimeIsUp.sol\\\";\\n\\ncontract TimeExchange {\\n    using Math for uint256;\\n\\n    uint256 private constant FACTOR = 10 ** 18;\\n\\n    uint256 public constant FEE = 70;\\n    address public constant DEVELOPER_ADDRESS = 0x731591207791A93fB0Ec481186fb086E16A7d6D0;\\n    address public immutable timeAddress;\\n    address public immutable tupAddress;\\n\\n    mapping(address => uint256) private _currentBlock;\\n\\n    constructor(address time, address tup) {\\n        timeAddress = time;\\n        tupAddress = tup;\\n    }\\n\\n    receive() external payable { }\\n\\n    fallback() external payable {\\n        require(msg.data.length == 0);\\n    }\\n\\n    /// @notice Modifier to make a function runs only once per block\\n    modifier onlyOncePerBlock() {\\n        require(block.number != _currentBlock[tx.origin], \\\"Time Exchange: you cannot perform this operation again in this block\\\");\\n        _currentBlock[tx.origin] = block.number;\\n        _;\\n    }\\n\\n    /// @notice Swaps native currency for another token\\n    /// @dev Please refer this function is called by swap() function\\n    /// @param tokenTo The address of the token to be swapped\\n    /// @param amount The native currency amount to be swapped\\n    function _swapFromNativeToToken(address tokenTo, uint256 amount) private {\\n        IERC20 token = IERC20(tokenTo);\\n        uint256 comission = amount.mulDiv(FEE, 10_000);\\n        amount -= comission;\\n        payable(tokenTo).call{ value: amount }(\\\"\\\");\\n        payable(DEVELOPER_ADDRESS).call{ value: comission / 2 }(\\\"\\\");\\n        ITimeIsUp(payable(tupAddress)).receiveProfit{ value: comission / 2 }();\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Swaps token for native currency\\n    /// @dev Please refer this function is called by swap() function\\n    /// @param tokenFrom The address of the token to be swapped\\n    /// @param amount The token amount to be swapped\\n    function _swapFromTokenToNative(address tokenFrom, uint256 amount) private {\\n        IERC20 token = IERC20(tokenFrom);\\n        token.transferFrom(msg.sender, address(this), amount);\\n        uint256 balanceBefore = address(this).balance;\\n        token.transfer(tokenFrom, amount);\\n        uint256 balanceAfter = address(this).balance - balanceBefore;\\n        uint256 comission = balanceAfter.mulDiv(FEE, 10_000);\\n        balanceAfter -= comission;\\n        payable(DEVELOPER_ADDRESS).call{ value: comission / 2 }(\\\"\\\");\\n        ITimeIsUp(payable(tupAddress)).receiveProfit{ value: comission / 2 }();\\n        payable(msg.sender).call{ value: balanceAfter }(\\\"\\\");\\n    }\\n\\n    /// @notice Swaps a token for another token\\n    /// @dev Please refer this function is called by swap() function\\n    /// @param tokenFrom The address of the token to be swapped\\n    /// @param tokenTo The address of the token to be swapped\\n    /// @param amount The token amount to be swapped\\n    function _swapFromTokenToToken(address tokenFrom, address tokenTo, uint256 amount) private {\\n        IERC20 tokenFrom_ = IERC20(tokenFrom);\\n        IERC20 tokenTo_ = IERC20(tokenTo);\\n        tokenFrom_.transferFrom(msg.sender, address(this), amount);\\n        uint256 balanceBefore = address(this).balance;\\n        tokenFrom_.transfer(tokenFrom, amount);\\n        uint256 balanceAfter = address(this).balance - balanceBefore;\\n        uint256 comission = balanceAfter.mulDiv(FEE, 10_000);\\n        balanceAfter -= comission;\\n        payable(tokenTo).call{ value: balanceAfter }(\\\"\\\");\\n        payable(DEVELOPER_ADDRESS).call{ value: comission / 2 }(\\\"\\\");\\n        ITimeIsUp(payable(tupAddress)).receiveProfit{ value: comission / 2 }();\\n        tokenTo_.transfer(msg.sender, tokenTo_.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Query the price of native currency in terms of an informed token\\n    /// @dev Please refer this function is called by queryPrice() function and it is only for viewing\\n    /// @param tokenTo The address of the token to be queried\\n    /// @param amount The native currency amount to be queried\\n    /// @return price The price of tokens to be obtained given some native currency amount\\n    function _queryPriceFromNativeToToken(address tokenTo, uint256 amount) private view returns (uint256) {\\n        uint256 price;\\n        if (tokenTo == timeAddress) {\\n            price = ITimeToken(payable(tokenTo)).swapPriceNative(amount);\\n        } else {\\n            price = ITimeIsUp(payable(tokenTo)).queryPriceNative(amount);\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Query the price of an informed token in terms of native currency\\n    /// @dev Please refer this function is called by queryPrice() function and it is only for viewing\\n    /// @param tokenFrom The address of the token to be queried\\n    /// @param amount The token amount to be queried\\n    /// @return price The price of native currency to be obtained given some token amount\\n    function _queryPriceFromTokenToNative(address tokenFrom, uint256 amount) private view returns (uint256) {\\n        uint256 price;\\n        if (tokenFrom == timeAddress) {\\n            price = ITimeToken(payable(tokenFrom)).swapPriceTimeInverse(amount);\\n        } else {\\n            price = ITimeIsUp(payable(tokenFrom)).queryPriceInverse(amount);\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Query the price of an informed token in terms of another informed token\\n    /// @dev Please refer this function is called by queryPrice() function and it is only for viewing\\n    /// @param tokenFrom The address of the token to be queried\\n    /// @param tokenTo The address of the token to be queried\\n    /// @param amount The token amount to be queried\\n    /// @return priceTo The price of tokens to be obtained given some another token amount\\n    /// @return nativeAmount The amount in native currency obtained from the query\\n    function _queryPriceFromTokenToToken(address tokenFrom, address tokenTo, uint256 amount)\\n        private\\n        view\\n        returns (uint256 priceTo, uint256 nativeAmount)\\n    {\\n        uint256 priceFrom = _queryPriceFromTokenToNative(tokenFrom, amount);\\n        nativeAmount = amount.mulDiv(priceFrom, FACTOR);\\n        if (tokenTo == timeAddress) {\\n            priceTo = ITimeToken(payable(tokenTo)).swapPriceNative(nativeAmount);\\n        } else {\\n            priceTo = ITimeIsUp(payable(tokenTo)).queryPriceNative(nativeAmount);\\n        }\\n        return (priceTo, nativeAmount);\\n    }\\n\\n    /// @notice Clean the contract if it has any exceeding token or native amount\\n    /// @dev It should pass the tokenToClean contract address\\n    /// @param tokenToClean The address of token contract\\n    function clean(address tokenToClean) public {\\n        if (address(this).balance > 0) {\\n            payable(DEVELOPER_ADDRESS).call{ value: address(this).balance }(\\\"\\\");\\n        }\\n        if (tokenToClean != address(0)) {\\n            if (IERC20(tokenToClean).balanceOf(address(this)) > 0) {\\n                IERC20(tokenToClean).transfer(DEVELOPER_ADDRESS, IERC20(tokenToClean).balanceOf(address(this)));\\n            }\\n        }\\n    }\\n\\n    /// @notice Swaps token or native currency for another token or native currency\\n    /// @dev It should inform address(0) as tokenFrom or tokenTo when considering native currency\\n    /// @param tokenFrom The address of the token to be swapped\\n    /// @param tokenTo The address of the token to be swapped\\n    /// @param amount The token or native currency amount to be swapped\\n    function swap(address tokenFrom, address tokenTo, uint256 amount) external payable onlyOncePerBlock {\\n        if (tokenFrom == address(0)) {\\n            require(tokenTo != address(0) && (tokenTo == timeAddress || tokenTo == tupAddress), \\\"Time Exchange: unallowed token\\\");\\n            require(msg.value > 0, \\\"Time Exchange: please inform the amount to swap\\\");\\n            _swapFromNativeToToken(tokenTo, msg.value);\\n            clean(tokenFrom);\\n            clean(tokenTo);\\n        } else if (tokenTo == address(0)) {\\n            require(amount > 0, \\\"Time Exchange: please inform the amount to swap\\\");\\n            require(tokenFrom == timeAddress || tokenFrom == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            require(IERC20(tokenFrom).allowance(msg.sender, address(this)) >= amount, \\\"Time Exchange: please approve the amount to swap\\\");\\n            _swapFromTokenToNative(tokenFrom, amount);\\n            clean(tokenFrom);\\n            clean(tokenTo);\\n        } else {\\n            require(amount > 0, \\\"Time Exchange: please inform the amount to swap\\\");\\n            require(tokenTo == timeAddress || tokenTo == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            require(tokenFrom == timeAddress || tokenFrom == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            require(IERC20(tokenFrom).allowance(msg.sender, address(this)) >= amount, \\\"Time Exchange: please approve the amount to swap\\\");\\n            _swapFromTokenToToken(tokenFrom, tokenTo, amount);\\n            clean(tokenFrom);\\n            clean(tokenTo);\\n        }\\n    }\\n\\n    /// @notice Query the price of token or native currency in terms of another token or native currency\\n    /// @dev It should inform address(0) as tokenFrom or tokenTo when considering native currency\\n    /// @param tokenFrom The address of the token to be queried\\n    /// @param tokenTo The address of the token to be queried\\n    /// @param amount The token or native currency amount to be queried\\n    /// @return price The queried price\\n    /// @return nativeAmount The native amount in the middle of the query (if the case)\\n    function queryPrice(address tokenFrom, address tokenTo, uint256 amount) external view returns (uint256, uint256) {\\n        if (tokenFrom == address(0)) {\\n            require(tokenTo != address(0) && (tokenTo == timeAddress || tokenTo == tupAddress), \\\"Time Exchange: unallowed token\\\");\\n            return (_queryPriceFromNativeToToken(tokenTo, amount), 0);\\n        } else if (tokenTo == address(0)) {\\n            require(tokenFrom == timeAddress || tokenFrom == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            return (_queryPriceFromTokenToNative(tokenFrom, amount), 0);\\n        } else {\\n            require(tokenTo == timeAddress || tokenTo == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            require(tokenFrom == timeAddress || tokenFrom == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            return _queryPriceFromTokenToToken(tokenFrom, tokenTo, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ITimeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface ITimeToken {\\n    function DEVELOPER_ADDRESS() external view returns (address);\\n    function BASE_FEE() external view returns (uint256);\\n    function COMISSION_RATE() external view returns (uint256);\\n    function SHARE_RATE() external view returns (uint256);\\n    function TIME_BASE_LIQUIDITY() external view returns (uint256);\\n    function TIME_BASE_FEE() external view returns (uint256);\\n    function TOLERANCE() external view returns (uint256);\\n    function dividendPerToken() external view returns (uint256);\\n    function firstBlock() external view returns (uint256);\\n    function isMiningAllowed(address account) external view returns (bool);\\n    function liquidityFactorNative() external view returns (uint256);\\n    function liquidityFactorTime() external view returns (uint256);\\n    function numberOfHolders() external view returns (uint256);\\n    function numberOfMiners() external view returns (uint256);\\n    function sharedBalance() external view returns (uint256);\\n    function poolBalance() external view returns (uint256);\\n    function totalMinted() external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function burn(uint256 amount) external;\\n    function transfer(address to, uint256 amount) external returns (bool success);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool success);\\n    function averageMiningRate() external view returns (uint256);\\n    function donateEth() external payable;\\n    function enableMining() external payable;\\n    function enableMiningWithTimeToken() external;\\n    function fee() external view returns (uint256);\\n    function feeInTime() external view returns (uint256);\\n    function mining() external;\\n    function saveTime() external payable returns (bool success);\\n    function spendTime(uint256 timeAmount) external returns (bool success);\\n    function swapPriceNative(uint256 amountNative) external view returns (uint256);\\n    function swapPriceTimeInverse(uint256 amountTime) external view returns (uint256);\\n    function accountShareBalance(address account) external view returns (uint256);\\n    function withdrawableShareBalance(address account) external view returns (uint256);\\n    function withdrawShare() external;\\n    receive() external payable;\\n}\\n\"\r\n    },\r\n    \"src/ITimeIsUp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface ITimeIsUp {\\n    function FLASH_MINT_FEE() external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function accountShareBalance(address account) external view returns (uint256);\\n    function burn(uint256 amount) external;\\n    function mint(uint256 timeAmount) external payable;\\n    function queryAmountExternalLP(uint256 amountNative) external view returns (uint256);\\n    function queryAmountInternalLP(uint256 amountNative) external view returns (uint256);\\n    function queryAmountOptimal(uint256 amountNative) external view returns (uint256);\\n    function queryNativeAmount(uint256 d2Amount) external view returns (uint256);\\n    function queryNativeFromTimeAmount(uint256 timeAmount) external view returns (uint256);\\n    function queryPriceNative(uint256 amountNative) external view returns (uint256);\\n    function queryPriceInverse(uint256 d2Amount) external view returns (uint256);\\n    function queryRate() external view returns (uint256);\\n    function queryPublicReward() external view returns (uint256);\\n    function returnNative() external payable returns (bool);\\n    function splitSharesWithReward() external;\\n    function buy() external payable returns (bool success);\\n    function sell(uint256 d2Amount) external returns (bool success);\\n    function flashMint(uint256 d2AmountToBorrow, bytes calldata data) external;\\n    function payFlashMintFee() external payable;\\n    function poolBalance() external view returns (uint256);\\n    function toBeShared() external view returns (uint256);\\n    function receiveProfit() external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@layerzerolabs/=lib/solidity-examples/\",\r\n      \"@aave/core-v3/=lib/aave-v3-core/\",\r\n      \"@chainlink/=lib/chainlink/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"aave-v3-core/=lib/aave-v3-core/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"layerzero/=lib/layerzero/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-examples/=lib/solidity-examples/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tupTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timeExchangeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ParticipantsListCleaned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedPrize\",\"type\":\"uint256\"}],\"name\":\"RoundWinner\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MININUM_NUMBER_OF_PARTICIPANTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_OF_SELECTED_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_BURNING_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"checkParticipation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAdditionalPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLeader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRebate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentValueMoved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPrize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTime\",\"type\":\"uint256\"}],\"name\":\"extendParticipationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstParticipant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipOperationType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperationTypeFlipped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastParticipant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInteractionPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToEarnPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTime\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isParticipating\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"wasSelected\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"previousParticipant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nextParticipant\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prizeToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryAmountRemainingForPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryCurrentTotalPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"queryInteractionPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"queryValuePoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remainingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundWinners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"first\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"second\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"third\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fourth\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdministrator\",\"type\":\"address\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCurrentFeesPercentage\",\"type\":\"uint256\"}],\"name\":\"setCurrentFeesPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToEarnPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProfitTargetPercentage\",\"type\":\"uint256\"}],\"name\":\"setPercentageProfitTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRebatePercentage\",\"type\":\"uint256\"}],\"name\":\"setRebatePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeExchange\",\"outputs\":[{\"internalType\":\"contract TimeExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToken\",\"outputs\":[{\"internalType\":\"contract ITimeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tupToken\",\"outputs\":[{\"internalType\":\"contract ITimeIsUp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFromAddressZeroPrizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Sponsor", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "2000000", "ConstructorArguments": "0000000000000000000000000f8f39b92776d9136408280c7209bebe4351123b00000000000000000000000057685ddbc1498f7873963cee5c186c7d95d91688000000000000000000000000264c8a1d47714fdac1bbd0bb09ef77f10fc90fa5", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}