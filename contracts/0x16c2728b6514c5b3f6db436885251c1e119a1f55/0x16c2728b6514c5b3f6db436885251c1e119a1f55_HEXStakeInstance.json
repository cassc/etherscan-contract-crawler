{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.9;\r\n\r\n/* This contract is a subsidiary of the Hedron contract. The Hedron      *\r\n *  contract can be found at 0x3819f64f282bf135d62168C1e513280dAF905e06. */\r\n\r\n/* Hedron is a collection of Ethereum / PulseChain smart contracts that  *\r\n * build upon the HEX smart contract to provide additional functionality */\r\n\r\ninterface IHEX {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Claim(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        bytes20 indexed btcAddr,\r\n        address indexed claimToAddr,\r\n        address indexed referrerAddr\r\n    );\r\n    event ClaimAssist(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        uint256 data2,\r\n        address indexed senderAddr\r\n    );\r\n    event DailyDataUpdate(uint256 data0, address indexed updaterAddr);\r\n    event ShareRateChange(uint256 data0, uint40 indexed stakeId);\r\n    event StakeEnd(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId\r\n    );\r\n    event StakeGoodAccounting(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId,\r\n        address indexed senderAddr\r\n    );\r\n    event StakeStart(\r\n        uint256 data0,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event XfLobbyEnter(\r\n        uint256 data0,\r\n        address indexed memberAddr,\r\n        uint256 indexed entryId,\r\n        address indexed referrerAddr\r\n    );\r\n    event XfLobbyExit(\r\n        uint256 data0,\r\n        address indexed memberAddr,\r\n        uint256 indexed entryId,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    fallback() external payable;\r\n\r\n    function allocatedSupply() external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function btcAddressClaim(\r\n        uint256 rawSatoshis,\r\n        bytes32[] memory proof,\r\n        address claimToAddr,\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint256 autoStakeDays,\r\n        address referrerAddr\r\n    ) external returns (uint256);\r\n\r\n    function btcAddressClaims(bytes20) external view returns (bool);\r\n\r\n    function btcAddressIsClaimable(\r\n        bytes20 btcAddr,\r\n        uint256 rawSatoshis,\r\n        bytes32[] memory proof\r\n    ) external view returns (bool);\r\n\r\n    function btcAddressIsValid(\r\n        bytes20 btcAddr,\r\n        uint256 rawSatoshis,\r\n        bytes32[] memory proof\r\n    ) external pure returns (bool);\r\n\r\n    function claimMessageMatchesSignature(\r\n        address claimToAddr,\r\n        bytes32 claimParamHash,\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external pure returns (bool);\r\n\r\n    function currentDay() external view returns (uint256);\r\n\r\n    function dailyData(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            uint72 dayPayoutTotal,\r\n            uint72 dayStakeSharesTotal,\r\n            uint56 dayUnclaimedSatoshisTotal\r\n        );\r\n\r\n    function dailyDataRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list);\r\n\r\n    function dailyDataUpdate(uint256 beforeDay) external;\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function globalInfo() external view returns (uint256[13] memory);\r\n\r\n    function globals()\r\n        external\r\n        view\r\n        returns (\r\n            uint72 lockedHeartsTotal,\r\n            uint72 nextStakeSharesTotal,\r\n            uint40 shareRate,\r\n            uint72 stakePenaltyTotal,\r\n            uint16 dailyDataCount,\r\n            uint72 stakeSharesTotal,\r\n            uint40 latestStakeId,\r\n            uint128 claimStats\r\n        );\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function merkleProofIsValid(bytes32 merkleLeaf, bytes32[] memory proof)\r\n        external\r\n        pure\r\n        returns (bool);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function pubKeyToBtcAddress(\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags\r\n    ) external pure returns (bytes20);\r\n\r\n    function pubKeyToEthAddress(bytes32 pubKeyX, bytes32 pubKeyY)\r\n        external\r\n        pure\r\n        returns (address);\r\n\r\n    function stakeCount(address stakerAddr) external view returns (uint256);\r\n\r\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\r\n\r\n    function stakeGoodAccounting(\r\n        address stakerAddr,\r\n        uint256 stakeIndex,\r\n        uint40 stakeIdParam\r\n    ) external;\r\n\r\n    function stakeLists(address, uint256)\r\n        external\r\n        view\r\n        returns (\r\n            uint40 stakeId,\r\n            uint72 stakedHearts,\r\n            uint72 stakeShares,\r\n            uint16 lockedDay,\r\n            uint16 stakedDays,\r\n            uint16 unlockedDay,\r\n            bool isAutoStake\r\n        );\r\n\r\n    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays)\r\n        external;\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function xfLobby(uint256) external view returns (uint256);\r\n\r\n    function xfLobbyEnter(address referrerAddr) external payable;\r\n\r\n    function xfLobbyEntry(address memberAddr, uint256 entryId)\r\n        external\r\n        view\r\n        returns (uint256 rawAmount, address referrerAddr);\r\n\r\n    function xfLobbyExit(uint256 enterDay, uint256 count) external;\r\n\r\n    function xfLobbyFlush() external;\r\n\r\n    function xfLobbyMembers(uint256, address)\r\n        external\r\n        view\r\n        returns (uint40 headIndex, uint40 tailIndex);\r\n\r\n    function xfLobbyPendingDays(address memberAddr)\r\n        external\r\n        view\r\n        returns (uint256[2] memory words);\r\n\r\n    function xfLobbyRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list);\r\n}\r\n\r\nstruct HEXDailyData {\r\n    uint72 dayPayoutTotal;\r\n    uint72 dayStakeSharesTotal;\r\n    uint56 dayUnclaimedSatoshisTotal;\r\n}\r\n\r\nstruct HEXGlobals {\r\n    uint72 lockedHeartsTotal;\r\n    uint72 nextStakeSharesTotal;\r\n    uint40 shareRate;\r\n    uint72 stakePenaltyTotal;\r\n    uint16 dailyDataCount;\r\n    uint72 stakeSharesTotal;\r\n    uint40 latestStakeId;\r\n    uint128 claimStats;\r\n}\r\n\r\nstruct HEXStake {\r\n    uint40 stakeId;\r\n    uint72 stakedHearts;\r\n    uint72 stakeShares;\r\n    uint16 lockedDay;\r\n    uint16 stakedDays;\r\n    uint16 unlockedDay;\r\n    bool   isAutoStake;\r\n}\r\n\r\nstruct HEXStakeMinimal {\r\n    uint40 stakeId;\r\n    uint72 stakeShares;\r\n    uint16 lockedDay;\r\n    uint16 stakedDays;\r\n}\r\n\r\nstruct ShareStore {\r\n    HEXStakeMinimal stake;\r\n    uint16          mintedDays;\r\n    uint8           launchBonus;\r\n    uint16          loanStart;\r\n    uint16          loanedDays;\r\n    uint32          interestRate;\r\n    uint8           paymentsMade;\r\n    bool            isLoaned;\r\n}\r\n\r\nstruct ShareCache {\r\n    HEXStakeMinimal _stake;\r\n    uint256         _mintedDays;\r\n    uint256         _launchBonus;\r\n    uint256         _loanStart;\r\n    uint256         _loanedDays;\r\n    uint256         _interestRate;\r\n    uint256         _paymentsMade;\r\n    bool            _isLoaned;\r\n}\r\n\r\naddress constant _hdrnSourceAddress = address(0x9d73Ced2e36C89E5d167151809eeE218a189f801);\r\naddress constant _hdrnFlowAddress   = address(0xF447BE386164dADfB5d1e7622613f289F17024D8);\r\nuint256 constant _hdrnLaunch        = 1645833600;\r\n\r\ncontract HEXStakeInstance {\r\n    \r\n    IHEX       private _hx;\r\n    address    private _creator;\r\n    ShareStore public  share;\r\n\r\n    /**\r\n     * @dev Updates the HSI's internal HEX stake data.\r\n     */\r\n    function _stakeDataUpdate(\r\n    )\r\n        internal\r\n    {\r\n        uint40 stakeId;\r\n        uint72 stakedHearts;\r\n        uint72 stakeShares;\r\n        uint16 lockedDay;\r\n        uint16 stakedDays;\r\n        uint16 unlockedDay;\r\n        bool   isAutoStake;\r\n        \r\n        (stakeId,\r\n         stakedHearts,\r\n         stakeShares,\r\n         lockedDay,\r\n         stakedDays,\r\n         unlockedDay,\r\n         isAutoStake\r\n        ) = _hx.stakeLists(address(this), 0);\r\n\r\n        share.stake.stakeId = stakeId;\r\n        share.stake.stakeShares = stakeShares;\r\n        share.stake.lockedDay = lockedDay;\r\n        share.stake.stakedDays = stakedDays;\r\n    }\r\n\r\n    function initialize(\r\n        address hexAddress\r\n    ) \r\n        external \r\n    {\r\n        require(_creator == address(0),\r\n            \"HSI: Initialization already performed\");\r\n\r\n        /* _creator is not an admin key. It is set at contsruction to be a link\r\n           to the parent contract. In this case HSIM */\r\n        _creator = msg.sender;\r\n\r\n        // set HEX contract address\r\n        _hx = IHEX(payable(hexAddress));\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new HEX stake using all HEX ERC20 tokens assigned\r\n     *      to the HSI's contract address. This is a privileged operation only\r\n     *      HEXStakeInstanceManager.sol can call.\r\n     * @param stakeLength Number of days the HEX ERC20 tokens will be staked.\r\n     */\r\n    function create(\r\n        uint256 stakeLength\r\n    )\r\n        external\r\n    {\r\n        uint256 hexBalance = _hx.balanceOf(address(this));\r\n\r\n        require(msg.sender == _creator,\r\n            \"HSI: Caller must be contract creator\");\r\n        require(share.stake.stakedDays == 0,\r\n            \"HSI: Creation already performed\");\r\n        require(hexBalance > 0,\r\n            \"HSI: Creation requires a non-zero HEX balance\");\r\n\r\n        _hx.stakeStart(\r\n            hexBalance,\r\n            stakeLength\r\n        );\r\n\r\n        _stakeDataUpdate();\r\n    }\r\n\r\n    /**\r\n     * @dev Calls the HEX function \"stakeGoodAccounting\" against the\r\n     *      HEX stake held within the HSI.\r\n     */\r\n    function goodAccounting(\r\n    )\r\n        external\r\n    {\r\n        require(share.stake.stakedDays > 0,\r\n            \"HSI: Creation not yet performed\");\r\n\r\n        _hx.stakeGoodAccounting(address(this), 0, share.stake.stakeId);\r\n\r\n        _stakeDataUpdate();\r\n    }\r\n\r\n    /**\r\n     * @dev Ends the HEX stake, approves the \"_creator\" address to transfer\r\n     *      all HEX ERC20 tokens, and self-destructs the HSI. This is a \r\n     *      privileged operation only HEXStakeInstanceManager.sol can call.\r\n     */\r\n    function destroy(\r\n    )\r\n        external\r\n    {\r\n        require(msg.sender == _creator,\r\n            \"HSI: Caller must be contract creator\");\r\n        require(share.stake.stakedDays > 0,\r\n            \"HSI: Creation not yet performed\");\r\n\r\n        _hx.stakeEnd(0, share.stake.stakeId);\r\n        \r\n        uint256 hexBalance = _hx.balanceOf(address(this));\r\n\r\n        if (_hx.approve(_creator, hexBalance)) {\r\n            selfdestruct(payable(_creator));\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the HSI's internal share data. This is a privileged \r\n     *      operation only HEXStakeInstanceManager.sol can call.\r\n     * @param _share \"ShareCache\" object containing updated share data.\r\n     */\r\n    function update(\r\n        ShareCache memory _share\r\n    )\r\n        external \r\n    {\r\n        require(msg.sender == _creator,\r\n            \"HSI: Caller must be contract creator\");\r\n\r\n        share.mintedDays   = uint16(_share._mintedDays);\r\n        share.launchBonus  = uint8 (_share._launchBonus);\r\n        share.loanStart    = uint16(_share._loanStart);\r\n        share.loanedDays   = uint16(_share._loanedDays);\r\n        share.interestRate = uint32(_share._interestRate);\r\n        share.paymentsMade = uint8 (_share._paymentsMade);\r\n        share.isLoaned     = _share._isLoaned;\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches stake data from the HEX contract.\r\n     * @return A \"HEXStake\" object containg the HEX stake data. \r\n     */\r\n    function stakeDataFetch(\r\n    ) \r\n        external\r\n        view\r\n        returns(HEXStake memory)\r\n    {\r\n        uint40 stakeId;\r\n        uint72 stakedHearts;\r\n        uint72 stakeShares;\r\n        uint16 lockedDay;\r\n        uint16 stakedDays;\r\n        uint16 unlockedDay;\r\n        bool   isAutoStake;\r\n        \r\n        (stakeId,\r\n         stakedHearts,\r\n         stakeShares,\r\n         lockedDay,\r\n         stakedDays,\r\n         unlockedDay,\r\n         isAutoStake\r\n        ) = _hx.stakeLists(address(this), 0);\r\n\r\n        return HEXStake(\r\n            stakeId,\r\n            stakedHearts,\r\n            stakeShares,\r\n            lockedDay,\r\n            stakedDays,\r\n            unlockedDay,\r\n            isAutoStake\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeLength\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goodAccounting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hexAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"}],\"internalType\":\"struct HEXStakeMinimal\",\"name\":\"stake\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"mintedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"launchBonus\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"loanStart\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"loanedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"interestRate\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"paymentsMade\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLoaned\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDataFetch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakedHearts\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"unlockedDay\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isAutoStake\",\"type\":\"bool\"}],\"internalType\":\"struct HEXStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"}],\"internalType\":\"struct HEXStakeMinimal\",\"name\":\"_stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_mintedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_launchBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentsMade\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLoaned\",\"type\":\"bool\"}],\"internalType\":\"struct ShareCache\",\"name\":\"_share\",\"type\":\"tuple\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HEXStakeInstance", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "369", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://55e7b705b10f2b2c963984150458d56028c6a362cfda89761c00dbc65cff4c51"}