{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cdo:;;;::;;:::;::;;:;;:;;;::;:::;:::;:;;:ldc;::;;;::;:;cdl:;;;;;;:::;:;;:;;;::;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;:;;;;;;l00kkoc::::;cdo:::;;;::;;;:;;cc::lkd:::;;;;;;;::;ckOkkkxdc:;::;;:clc:::;;;;;;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;:ool:;:cccloxddo:;:c:;::;;;::ll:;::odcdK0o:::;;::;;;;:cdkdcccc:;;;;;;cx00dc;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;cd00l;:::::;cdkdc;;;::;;:;;::ldc;:;;::kKl;:::;;;:;;:;:x0l;:::;:odclxx0Xkl:;;:;;;::;:;cdl;;::;:;::;;::;;::::;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;:;;dKOxkOdc:;:;;;;;cdo:;;;:dkl:;;;;;:;:k0l:cc:;:;cdo:;:ldlcc:;;:cdOK0xol:;;:;;;;;:odc:ldl:;;::;;:;:ccc:;;;::;;:;:;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;::cccokKOl;;;:::;:c:;:;:ox0KOo:;:;;:oxkddk0d:;;cdl:;;xXX0xdc;;;lKOc:;:::;:;;:;:oxxdxkkxl:;:;:;:cdxkxdc:ll::;::;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;::;cdkdc::;;;;:;::;:;cdlcdxdc;;:;lKKxkxOXx::;cdl;cdkxxlcdxxxxxxl;;:;::;;::;;cdxxxl:;lxxl::;;:x0l;cdxkKx::;;;;:;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;:;;;:o0x;;::;;:;;;::;;:;;;;;;;;;:::oKNKk0Kxc:;;;;::o0x;;;;;coodo:;;;::;;;::;;;;;;;;;:;;:okkc;:cOKl;::cooc:::;::;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;::;;:x0kddddddddddo:;;;;:::;;;;;:;;dXNkcccloc::cooxkxl::;;:;;:;;;;:;;;;;::;;;;;;;;:;;:;;::oOdox0Kkc;::;;:;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;::;;:;lxxxxxxxxxxx0Kl;:;;::;;::::;:d0NNx:;;cdl::lxxl::;:::;;;;::;::;;::;;::;:::;;:;;::;;;;:;cdxxxo:;;:;::;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;:;;;;;;;;;;;;;xOl;:;;;;;:::;;,;ck0d::;;;;:c:;;;;;;:;:::;:;cdo:;;;::::::::ccllllll:;;;;::;;;;;;:::;;::;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;::::;;;;;;;;;::c:;:;;;;;::;;,''';:;;::;;;xOl;;;;;;;::;:;;::c:::cccccllllllllllllc:;;;;;;;:;;;:;;::;;:;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,,',,;;;;:;;::x0l;:;;;;;;;;;;;:;::loooloollllllllllc:;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:;,,'',;;;:;;;::;:xOl;:;;;;;;;;:;;::lllllllllllllllllc:;;;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,,'',;;:;::;;;;;;cc:;:;;;;;;;;;::lllllllllllllllllc::;;;;:::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::;;::;;;;;;;;;;;,,,'',;;;:;;:;;;;;;::::::;;::;;;::llollllllllllllll::;::;;;:::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;::;;::;;;:;;;::;:;;;;;;,,''',,;;:;;;;;;;;;;;;;;;;:;;::;:::lollllllllllllllc:;;:;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:;;;;;;;:;;,,'''',,;:;;;;;;;;;;;;;;;;;:;;::;;coollllllllllllll::;;;;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;::;codo:lddl:;;::;;;;,,'''',,;;:;;;;;;;;;;;;;;;;;;;;;:::clollllllllllllcc:;;;;;:::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;:lk0KOldKKd:ccccc:;,,'',;;;;:;;:;;;;;;;;;;;;;:;;:;;:cllllllllllllllol::;;;;::::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;:;;:lkKKKOldKKxdk0OOko;'''',;;;;;;;;;;;;;;;;;:;;;;::;:clllllllllllllllllc;:;;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;:;;lx0KKKKOldKKKKKKK0o,',,,;;;:;;;;;;;;;;;;;;;;;;::::clllllllllllllllloo:;;;:;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;:;:dKKKKKK0kOKKKKKKKKOd:ldc;;;:;;;;;;;;;;;;;;;;;;::cllllllllllllllllllol:;;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;:;;;:dKKKKKKKKKKKKKKKKKK0O0Oc;:;;;;;;;;;::;;;;;::::clllllllllllllllllllol::;;;;;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;:::;:dKKK0kxxxxk0KKKKKKKK0Oo:;::;;;;;;;;::;;;;::;:lollllllllllllllllllloc:;;;;:;;:;;;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;::;:cdOkdlllllodk000Odlllc;;:;;:::;;;:;;;;;;:::cclollllllllllllllllllloc:;;;;:;;;;::;;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;:::ccloolllllllloooooc:;;;:;;::;;::cccccccccclooollllllllllllllllllllloc:;;;;;;;::;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;:lllllllllllllllllcc:;;;;::::;:cllooooooooloooooollllllllllllllllllllolccclcccccc:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;:cllllllllllllllllc::;;;;;;;;;;cooooooooddoooooodoooooooollllllllllllloooooooooooolc:;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;:clllllllllllllllc:;;:;;;;;;;;;:::::::coxxkkkkkxxkkxxxxxxdodddddddddddddooooooooooool:;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;:cllllllllllllllc:;:;;;;;;;;;;;:;;::lodxkk0KKK0OO000OOOOkxxxxkxxxxkkxkxxxxxxxoccccclc:;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;:;;;:;;::clllllllllllllc::;;;;;;;;;;;;;;;:ldkkkdddxxk000KKKK0kxxxdddxkO00000000Okkkkko::;;;;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;:;;;;:ccllllllllllllll::;;;;;;;;;;;;;;;;:okkkxoddc;cxOO00KKK0xl;;okkO0KKKKKKKK0kkkkxol:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;:;;::clllllllllllllllc:;;;::;;;;;;;;;;:;;coxkxokx. 'OMNOOKKKK0:  lNNNXKKKKKKKKOkkkxc;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;::cllllllllllllllllc::;::::;;;;;;;;;;:;;;cddllk0dox0XKOOKKKKKkooOXXKKKKKKKKKKOkkkdc;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;:clllllllllllllllllc;:::;;;:::;;;;;;;;::;::::lkKKKKKK0OOKKKKKKKKKKKKKKKKKKKKKK00Odc;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;:clllllllllllllllllc:;;;;;;;;;;;;;;;;;::;;:;:lkKKKKKK0OOOO0KKKKKKKKKKKKKKKKKKKKKOdc;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;:clllllllllllllllll::;;;;;;;;;;;;;;;;;::;;;;:lx0000000OOOO000000000000KKKKKKKK0Okd:;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;:clllllllllllllllc:::;;;;;;;;;;;;;;;;;::clllodk000000OO0000OOOO00000000KKKKK0Okdl:::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;:clllllllllllllllc:;:;;;;;;;;;;;;;;;;:;:cdO00OO00OOOOOkOOOOOOOOO000000000000Okdc;;::;;:;;;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;clllllllllllllllc:;:;;;;;;;;;;;;;;;;:;;;:ldOOO0OOOOOOOOOOOO0OkO00000OOkOOOOkdl::::::;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;cllllllllllllllllc::;;;;;;;;;;;;;;;;:;;:;;:lxOOOOOOO00000000000000OkkkO0000kolcllllcc:::;;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;clllllllllllllllllc:;;;;;;;;;;;;;;;;;;;::;;cdO000000000000000000000000000Okdollllllllcc:;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;clllllllllllllllllc:;;::;;;::;;;;;;;;;;::cclxO000000000000000000000000000Oxolllllllllllcc::;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;:cllllllllllllllllllcc:;;;;;;:;;;;;::;::cllloxO000000000000000000000000000Oxolllllllllllllc:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;::clllllllllllllllllllc:::;;;;;;;;;:::cllllloxO000000000000000000000000000Oxollllllllllllllc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;::;::clllllllllllllllllllc:::;;;;;;;::clllllloxO000000000000000000000000000Oxollllllllllllllllc:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;:;;:;;clllllllllllllllllllllcc:::;;;;;;clllllloxO000000000000000000000000000Oxolllllllllllllllllc:;;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;:clllllllllllllllllllllllllcccccccclllllloxO000000000000000000000000000Oxollllllllllllllllllcc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;:;;;;:cclclllllllllllllllllllllllllllllllllllloxO000000000000000000000000000Oxollllllllllllllllllllcc::::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;:::::clllllllllllllllllllllllllllllllllloxO000000000000000000000000Okxxdlllllllllllllllllllllllc:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;::;:cclllllllllllllllllllllllllllllllllodkO00000000000000000000000Oxollllllllllllllllllllllllllc::;;;;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;:;::ccllllllllllllllllllllllllllllllllodkO0000000000000000000000Oxollllllllllllllllllllllllllllc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;:;;::ccllllllllllllllllllllllllllllllldk00000000000000000000000Oxolllllllllllllllllllllllllllllc:;;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;:;;:::;:::cclllllllllllllllllllllllllllldkO0000000000000000000000Oxollllllllllllllllllllllllllllllc:;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;:;;;;::::::::ccllllllllcc:cllllllldkO0000000000000000000000Oxollllllllllloollllllllllllllllllc:;:::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::::::::::::;:clllllldkO000000000000000000000Okdlllllllllllloollllllllllllllllllcc:;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:;;;;;:;:clllllldkO00000000000000000000Okdlllllllllllllooolllllllllllllllllllc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::;;;:;;;;;:clllllldkO00000000000000000000Okdlllllllllllllloolllllllllllllllllll:::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:;;;;;;;;;:clllllloxO000000000000000000000Okdllllllllllllooollllllllllllllllllc:::;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::;;;;:clllllloxO0000000000000000000000Okdlllllllllloooolllllllllllllllllc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::clllllloxO000000000000000000000Okdllllllllllloolllllllllllllllllc::::;;:::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::;;;:clllllloxO000000000000000000000Oxollllllllllloolllllllllllllllc::::::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::;;;::cclllllloxO00000000000000000OOOkkxolllllllllllollllllllllllllc::;;;:;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::;::lllllllloxO000000000000000Okddoooolllllllllllllllllllllllllc::;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:;;:clllllllllldxkO00000000000Okdolllllllllllllllllllllllllllllllc;;:;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:cclllllllllllodkO00000000OOkdllllllllllllllllllllllllllllllllc:;::;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::cllllllllllllllloxO0000000Okxolllllllllllllllllllllllllllllllc:;;;;;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:cllllllllllllllllloxO000000Oxolllllllllllllllllllllllllllllllc:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::clllllllllllllllllloxO00000Oxolllllllllllllllllllllllllllllllc:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:clllllllllllllllllllodxkOOkkdolllllllllllllllllllllllllllllllc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::;;;;:cllllllllllllllllllllllodxxollllllllllllllllllllllllllllllllc:;;:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::;:;:cllllllllllllllllllllllllodllllllllllllllllllllllllllllllllc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:;;::lllllllllllllllllllllllllllllllllllllllllllllllllllllllllcc::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:cllllllllllllllllllllllllllllllllllllllllllllllllllllllllc::;;::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n// \r\n// A telegram bot built by @oz_dao.\r\n// https://wandbot.app\r\n// https://twitter.com/wand_bot\r\n//\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount);\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n\r\n        unchecked {\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        _balances[from] -= amount;\r\n\r\n        unchecked {\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount);\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n}\r\n\r\ncontract Wand is ERC20, Ownable {\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address public devWallet;\r\n    address public liquidityWallet;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;    \r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 private buyDevFee;\r\n    uint256 private buyLiquidityFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 private sellDevFee;\r\n    uint256 private sellLiquidityFee;\r\n\r\n    uint256 private tokensForDev;\r\n    uint256 private tokensForLiquidity;\r\n    uint256 private previousFee;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    constructor() payable ERC20(\"Wand\", \"WAND\") {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n\r\n        uint256 totalSupply = 100_000_000 ether;\r\n\r\n        maxTransactionAmount = (totalSupply * 10) / 1000;\r\n        maxWallet = (totalSupply * 10) / 1000;\r\n        swapTokensAtAmount = (totalSupply * 1) / 1000;\r\n\r\n        buyDevFee = 4;\r\n        buyLiquidityFee = 0;\r\n        buyTotalFees = buyDevFee + buyLiquidityFee;\r\n\r\n        sellDevFee = 20;\r\n        sellLiquidityFee = 0;\r\n        sellTotalFees = sellDevFee + sellLiquidityFee;\r\n\r\n        previousFee = sellTotalFees;\r\n\r\n        devWallet = _msgSender();\r\n        liquidityWallet = _msgSender();\r\n\r\n        excludeFromFees(_msgSender(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(deadAddress, true);\r\n        excludeFromFees(devWallet, true);\r\n        excludeFromFees(liquidityWallet, true);\r\n\r\n        excludeFromMaxTransaction(_msgSender(), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(deadAddress, true);\r\n        excludeFromMaxTransaction(address(uniswapV2Router), true);\r\n        excludeFromMaxTransaction(devWallet, true);\r\n        excludeFromMaxTransaction(liquidityWallet, true);\r\n\r\n        _mint(msg.sender, (totalSupply * 100) / 100);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);        \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function abracadabra() external onlyOwner {\r\n        require(!tradingActive);\r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function disableTransferDelay() external onlyOwner returns (bool) {\r\n        transferDelayEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    function updateSwapTokensAtAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(newAmount >= (totalSupply() * 1) / 100000);\r\n        require(newAmount <= (totalSupply() * 5) / 1000);\r\n        swapTokensAtAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxWalletAndTxnAmount(\r\n        uint256 newTxnNum,\r\n        uint256 newMaxWalletNum\r\n    ) external onlyOwner {\r\n        require(newTxnNum >= ((totalSupply() * 5) / 1000));\r\n        require(newMaxWalletNum >= ((totalSupply() * 5) / 1000));\r\n        maxWallet = newMaxWalletNum;\r\n        maxTransactionAmount = newTxnNum;\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _devFee,\r\n        uint256 _liquidityFee\r\n    ) external onlyOwner {\r\n        buyDevFee = _devFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyTotalFees = buyDevFee + buyLiquidityFee;\r\n        require(buyTotalFees <= 4, \"Buy fees must be less than or equal to 4%\");\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _devFee,\r\n        uint256 _liquidityFee\r\n    ) external onlyOwner {\r\n        sellDevFee = _devFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellTotalFees = sellDevFee + sellLiquidityFee;\r\n        previousFee = sellTotalFees;\r\n        require(sellTotalFees <= 20, \"Sell fees must be less than or equal to 20%\");\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function setDevWallet(address account) public onlyOwner {\r\n        devWallet = account;\r\n        excludeFromFees(account, true);\r\n        excludeFromMaxTransaction(devWallet, true);\r\n    }\r\n\r\n    function withdrawStuckETH() public onlyOwner {\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function withdrawStuckTokens(address tkn) public onlyOwner {\r\n        require(IERC20(tkn).balanceOf(address(this)) > 0);\r\n        uint256 amount = IERC20(tkn).balanceOf(address(this));\r\n        IERC20(tkn).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            from != owner() &&\r\n            to != owner() &&\r\n            to != address(0) &&\r\n            to != deadAddress &&\r\n            !swapping\r\n        ) {\r\n            if (!tradingActive) {\r\n                require(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\r\n            }\r\n\r\n            if (transferDelayEnabled) {\r\n                if (\r\n                    to != owner() &&\r\n                    to != address(uniswapV2Router) &&\r\n                    to != address(uniswapV2Pair)\r\n                ) {\r\n                    require(\r\n                        _holderLastTransferTimestamp[tx.origin] <\r\n                            block.number,\r\n                        \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                    );\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }            \r\n\r\n            //when buy\r\n            if (\r\n                automatedMarketMakerPairs[from] &&\r\n                !_isExcludedMaxTransactionAmount[to]\r\n            ) {\r\n                require(amount <= maxTransactionAmount);\r\n                require(amount + balanceOf(to) <= maxWallet);\r\n            }\r\n            //when sell\r\n            else if (\r\n                automatedMarketMakerPairs[to] &&\r\n                !_isExcludedMaxTransactionAmount[from]\r\n            ) {\r\n                require(amount <= maxTransactionAmount);\r\n            } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                require(amount + balanceOf(to) <= maxWallet);\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = amount * sellTotalFees / 100;\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = amount * buyTotalFees / 100;\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n        sellTotalFees = previousFee;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForDev;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokensAtAmount * 20) {\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\r\n            totalTokensToSwap /\r\n            2;\r\n        uint256 amountToSwapForETH = contractBalance - liquidityTokens;\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance - initialETHBalance;\r\n\r\n        uint256 ethForDev = ethBalance * tokensForDev / totalTokensToSwap;\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForDev;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForDev = 0;\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        }\r\n\r\n        (success, ) = address(devWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abracadabra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTxnNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxWalletNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAndTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Wand", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://15c62e3749bc4a33a6570161bd4af9f00d1a8fa16e1b7fbff7f39b970fec8ec4"}