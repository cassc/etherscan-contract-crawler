{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.4;\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC-1155 tokens.\r\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\r\nabstract contract ERC1155TokenReceiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) external payable virtual returns (bytes4) {\r\n        return ERC1155TokenReceiver.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bytes calldata\r\n    ) external payable virtual returns (bytes4) {\r\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n/// @notice Minimalist and gas efficient standard ERC-1155 implementation with supply tracking.\r\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\r\nabstract contract ERC1155 {\r\n    /// -----------------------------------------------------------------------\r\n    /// EVENTS\r\n    /// -----------------------------------------------------------------------\r\n\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 amount\r\n    );\r\n\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] amounts\r\n    );\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// ERC-1155 STORAGE\r\n    /// -----------------------------------------------------------------------\r\n    \r\n    mapping(uint256 => uint256) public totalSupply;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\r\n\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// METADATA LOGIC\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function uri(uint256 id) public view virtual returns (string memory);\r\n    \r\n    /// -----------------------------------------------------------------------\r\n    /// ERC-165 LOGIC\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC-165 Interface ID for ERC-165\r\n            interfaceId == 0xd9b67a26 || // ERC-165 Interface ID for ERC-1155\r\n            interfaceId == 0x0e89341c; // ERC-165 Interface ID for ERC1155MetadataURI\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// ERC-1155 LOGIC\r\n    /// -----------------------------------------------------------------------\r\n    \r\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256[] memory balances)\r\n    {\r\n        require(owners.length == ids.length, \"LENGTH_MISMATCH\");\r\n\r\n        balances = new uint256[](owners.length);\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the array index counter which cannot possibly overflow.\r\n        unchecked {\r\n            for (uint256 i; i < owners.length; ++i) {\r\n                balances[i] = balanceOf[owners[i]][ids[i]];\r\n            }\r\n        }\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public payable virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) public payable virtual {\r\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \"NOT_AUTHORIZED\");\r\n\r\n        balanceOf[from][id] -= amount;\r\n        \r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to][id] += amount;\r\n        }\r\n\r\n        emit TransferSingle(msg.sender, from, to, id, amount);\r\n\r\n        if (to.code.length != 0) {\r\n            require(\r\n                ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\r\n                    ERC1155TokenReceiver.onERC1155Received.selector,\r\n                \"UNSAFE_RECIPIENT\"\r\n            );\r\n        } else require(to != address(0), \"INVALID_RECIPIENT\");\r\n    }\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) public payable virtual {\r\n        require(ids.length == amounts.length, \"LENGTH_MISMATCH\");\r\n\r\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \"NOT_AUTHORIZED\");\r\n\r\n        // Storing these outside the loop saves ~15 gas per iteration.\r\n        uint256 id;\r\n        uint256 amount;\r\n\r\n        for (uint256 i; i < ids.length; ) {\r\n            id = ids[i];\r\n            amount = amounts[i];\r\n\r\n            balanceOf[from][id] -= amount;\r\n            \r\n            // Cannot overflow because the sum of all user\r\n            // balances can't exceed the max uint256 value,\r\n            // and an array can't have a total length\r\n            // larger than the max uint256 value.\r\n            unchecked {\r\n                balanceOf[to][id] += amount;\r\n                \r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\r\n\r\n        if (to.code.length != 0) {\r\n            require(\r\n                ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\r\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\r\n                \"UNSAFE_RECIPIENT\"\r\n            );\r\n        } else require(to != address(0), \"INVALID_RECIPIENT\");\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// INTERNAL MINT/BURN LOGIC\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) internal virtual {\r\n        totalSupply[id] += amount;\r\n        \r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value. \r\n        unchecked {\r\n            balanceOf[to][id] += amount;\r\n        }\r\n\r\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\r\n\r\n        if (to.code.length != 0) {\r\n            require(\r\n                ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\r\n                    ERC1155TokenReceiver.onERC1155Received.selector,\r\n                \"UNSAFE_RECIPIENT\"\r\n            );\r\n        } else require(to != address(0), \"INVALID_RECIPIENT\");\r\n    }\r\n\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        balanceOf[from][id] -= amount;\r\n        \r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply[id] -= amount;\r\n        }\r\n\r\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\r\n    }\r\n}\r\n\r\n/// @notice Compound-like voting extension for ERC-1155.\r\n/// @author KaliCo LLC\r\n/// @custom:coauthor Seed Club Ventures (@seedclubvc)\r\nabstract contract ERC1155Votes is ERC1155 {\r\n    /// -----------------------------------------------------------------------\r\n    /// EVENTS\r\n    /// -----------------------------------------------------------------------\r\n\r\n    event DelegateChanged(\r\n        address indexed delegator,\r\n        address indexed fromDelegate,\r\n        address indexed toDelegate,\r\n        uint256 id\r\n    );\r\n\r\n    event DelegateVotesChanged(\r\n        address indexed delegate,\r\n        uint256 indexed id,\r\n        uint256 previousBalance,\r\n        uint256 newBalance\r\n    );\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// VOTING STORAGE\r\n    /// -----------------------------------------------------------------------\r\n     \r\n    mapping(address => mapping(uint256 => address)) internal _delegates;\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public numCheckpoints;\r\n\r\n    mapping(address => mapping(uint256 => mapping(uint256 => Checkpoint))) public checkpoints;\r\n    \r\n    struct Checkpoint {\r\n        uint40 fromTimestamp;\r\n        uint216 votes;\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// DELEGATION LOGIC\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function delegates(address account, uint256 id) public view virtual returns (address) {\r\n        address current = _delegates[account][id];\r\n\r\n        return current == address(0) ? account : current;\r\n    }\r\n\r\n    function getCurrentVotes(address account, uint256 id) public view virtual returns (uint256) {\r\n        // Won't underflow because decrement only occurs if positive `nCheckpoints`.\r\n        unchecked {\r\n            uint256 nCheckpoints = numCheckpoints[account][id];\r\n\r\n            return\r\n                nCheckpoints != 0\r\n                    ? checkpoints[account][id][nCheckpoints - 1].votes\r\n                    : 0;\r\n        }\r\n    }\r\n\r\n    function getPriorVotes(\r\n        address account, \r\n        uint256 id,\r\n        uint256 timestamp\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        require(block.timestamp > timestamp, \"UNDETERMINED\");\r\n\r\n        uint256 nCheckpoints = numCheckpoints[account][id];\r\n\r\n        if (nCheckpoints == 0) return 0;\r\n\r\n        // Won't underflow because decrement only occurs if positive `nCheckpoints`.\r\n        unchecked {\r\n            if (\r\n                checkpoints[account][id][nCheckpoints - 1].fromTimestamp <=\r\n                timestamp\r\n            ) return checkpoints[account][id][nCheckpoints - 1].votes;\r\n\r\n            if (checkpoints[account][id][0].fromTimestamp > timestamp) return 0;\r\n\r\n            uint256 lower;\r\n\r\n            uint256 upper = nCheckpoints - 1;\r\n\r\n            while (upper > lower) {\r\n                uint256 center = upper - (upper - lower) / 2;\r\n\r\n                Checkpoint memory cp = checkpoints[account][id][center];\r\n\r\n                if (cp.fromTimestamp == timestamp) {\r\n                    return cp.votes;\r\n                } else if (cp.fromTimestamp < timestamp) {\r\n                    lower = center;\r\n                } else {\r\n                    upper = center - 1;\r\n                }\r\n            }\r\n\r\n            return checkpoints[account][id][lower].votes;\r\n        }\r\n    }\r\n\r\n    function delegate(address delegatee, uint256 id) public payable virtual {\r\n        address currentDelegate = delegates(msg.sender, id);\r\n\r\n        _delegates[msg.sender][id] = delegatee;\r\n\r\n        emit DelegateChanged(msg.sender, currentDelegate, delegatee, id);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, id, balanceOf[msg.sender][id]);\r\n    }\r\n\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (srcRep != dstRep && amount != 0) {\r\n            if (srcRep != address(0)) {\r\n                uint256 srcRepNum = numCheckpoints[srcRep][id];\r\n\r\n                uint256 srcRepOld;\r\n\r\n                // Won't underflow because decrement only occurs if positive `srcRepNum`.\r\n                unchecked {\r\n                    srcRepOld = srcRepNum != 0\r\n                        ? checkpoints[srcRep][id][srcRepNum - 1].votes\r\n                        : 0;\r\n                }\r\n\r\n                _writeCheckpoint(srcRep, id, srcRepNum, srcRepOld, srcRepOld - amount);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint256 dstRepNum = numCheckpoints[dstRep][id];\r\n                \r\n                uint256 dstRepOld;\r\n\r\n                // Won't underflow because decrement only occurs if positive `dstRepNum`.\r\n                unchecked {\r\n                    dstRepOld = dstRepNum != 0\r\n                        ? checkpoints[dstRep][id][dstRepNum - 1].votes\r\n                        : 0;\r\n                }\r\n                    \r\n                _writeCheckpoint(dstRep, id, dstRepNum, dstRepOld, dstRepOld + amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint256 id,\r\n        uint256 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    ) internal virtual {\r\n        // Won't underflow because decrement only occurs if positive `nCheckpoints`.\r\n        unchecked {\r\n            if (\r\n                nCheckpoints != 0 &&\r\n                checkpoints[delegatee][id][nCheckpoints - 1].fromTimestamp ==\r\n                block.timestamp\r\n            ) {\r\n                checkpoints[delegatee][id][nCheckpoints - 1].votes = _safeCastTo216(\r\n                    newVotes\r\n                );\r\n            } else {\r\n                checkpoints[delegatee][id][nCheckpoints] = Checkpoint(\r\n                    _safeCastTo40(block.timestamp),\r\n                    _safeCastTo216(newVotes)\r\n                );\r\n\r\n                // Won't realistically overflow.\r\n                ++numCheckpoints[delegatee][id];\r\n            }\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, id, oldVotes, newVotes);\r\n    }\r\n\r\n    function _safeCastTo40(uint256 x) internal pure virtual returns (uint40 y) {\r\n        require(x < 1 << 40);\r\n\r\n        y = uint40(x);\r\n    }\r\n\r\n    function _safeCastTo216(uint256 x) internal pure virtual returns (uint216 y) {\r\n        require(x < 1 << 216);\r\n\r\n        y = uint216(x);\r\n    }\r\n}\r\n\r\n/// @notice Contract that enables a single call to call multiple methods on itself.\r\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Multicallable.sol)\r\nabstract contract Multicallable {\r\n    function multicall(bytes[] calldata data) public returns (bytes[] memory results) {\r\n        assembly {\r\n            if data.length {\r\n                results := mload(0x40) // Point `results` to start of free memory.\r\n                mstore(results, data.length) // Store `data.length` into `results`.\r\n                results := add(results, 0x20)\r\n\r\n                // `shl` 5 is equivalent to multiplying by 0x20.\r\n                let end := shl(5, data.length)\r\n                // Copy the offsets from calldata into memory.\r\n                calldatacopy(results, data.offset, end)\r\n                // Pointer to the top of the memory (i.e. start of the free memory).\r\n                let memPtr := add(results, end)\r\n                end := add(results, end)\r\n\r\n                // prettier-ignore\r\n                for {} 1 {} {\r\n                    // The offset of the current bytes in the calldata.\r\n                    let o := add(data.offset, mload(results))\r\n                    // Copy the current bytes from calldata to the memory.\r\n                    calldatacopy(\r\n                        memPtr,\r\n                        add(o, 0x20), // The offset of the current bytes' bytes.\r\n                        calldataload(o) // The length of the current bytes.\r\n                    )\r\n                    if iszero(delegatecall(gas(), address(), memPtr, calldataload(o), 0x00, 0x00)) {\r\n                        // Bubble up the revert if the delegatecall reverts.\r\n                        returndatacopy(0x00, 0x00, returndatasize())\r\n                        revert(0x00, returndatasize())\r\n                    }\r\n                    // Append the current `memPtr` into `results`.\r\n                    mstore(results, memPtr)\r\n                    results := add(results, 0x20)\r\n                    // Append the `returndatasize()`, and the return data.\r\n                    mstore(memPtr, returndatasize())\r\n                    returndatacopy(add(memPtr, 0x20), 0x00, returndatasize())\r\n                    // Advance the `memPtr` by `returndatasize() + 0x20`,\r\n                    // rounded up to the next multiple of 32.\r\n                    memPtr := and(add(add(memPtr, returndatasize()), 0x3f), 0xffffffffffffffe0)\r\n                    // prettier-ignore\r\n                    if iszero(lt(results, end)) { break }\r\n                }\r\n                // Restore `results` and allocate memory for it.\r\n                results := mload(0x40)\r\n                mstore(0x40, memPtr)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// @title Wrappr\r\n/// @author KaliCo LLC\r\n/// @custom:coauthor Seed Club Ventures (@seedclubvc)\r\n/// @notice Ricardian contract for on-chain structures.\r\ncontract Wrappr is ERC1155Votes, Multicallable {\r\n    /// -----------------------------------------------------------------------\r\n    /// EVENTS\r\n    /// -----------------------------------------------------------------------\r\n\r\n    event OwnerOfSet(address indexed operator, address indexed to, uint256 id);\r\n\r\n    event ManagerSet(address indexed operator, address indexed to, bool set);\r\n\r\n    event AdminSet(address indexed operator, address indexed admin);\r\n\r\n    event TransferabilitySet(address indexed operator, uint256 id, bool set);\r\n\r\n    event PermissionSet(address indexed operator, uint256 id, bool set);\r\n\r\n    event UserPermissionSet(address indexed operator, address indexed to, uint256 id, bool set);\r\n\r\n    event BaseURIset(address indexed operator, string baseURI);\r\n\r\n    event UserURIset(address indexed operator, address indexed to, uint256 id, string uuri);\r\n\r\n    event MintFeeSet(address indexed operator, uint256 mintFee);\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// WRAPPR STORAGE/LOGIC\r\n    /// -----------------------------------------------------------------------\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    string internal baseURI;\r\n\r\n    uint256 internal mintFee;\r\n\r\n    address public admin;\r\n\r\n    mapping(uint256 => address) public ownerOf;\r\n\r\n    mapping(address => bool) public manager;\r\n\r\n    mapping(uint256 => bool) internal registered;\r\n\r\n    mapping(uint256 => bool) public transferable;\r\n\r\n    mapping(uint256 => bool) public permissioned;\r\n\r\n    mapping(address => mapping(uint256 => bool)) public userPermissioned;\r\n\r\n    mapping(uint256 => string) internal uris;\r\n\r\n    mapping(address => mapping(uint256 => string)) public userURI;\r\n\r\n    modifier onlyAdmin() virtual {\r\n        require(msg.sender == admin, \"NOT_ADMIN\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOfOrAdmin(uint256 id) virtual {\r\n        require(msg.sender == ownerOf[id] || msg.sender == admin, \"NOT_AUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    function uri(uint256 id) public view override virtual returns (string memory) {\r\n        string memory tokenURI = uris[id];\r\n\r\n        if (bytes(tokenURI).length == 0) return baseURI;\r\n        else return tokenURI;\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// CONSTRUCTOR\r\n    /// -----------------------------------------------------------------------\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseURI,\r\n        uint256 _mintFee,\r\n        address _admin\r\n    ) payable {\r\n        name = _name;\r\n\r\n        symbol = _symbol;\r\n\r\n        baseURI = _baseURI;\r\n\r\n        mintFee = _mintFee;\r\n\r\n        admin = _admin;\r\n\r\n        emit BaseURIset(address(0), _baseURI);\r\n\r\n        emit MintFeeSet(address(0), _mintFee);\r\n\r\n        emit AdminSet(address(0), _admin);\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// PUBLIC FUNCTIONS\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        string calldata tokenURI,\r\n        address owner\r\n    ) public payable virtual {\r\n        uint256 fee = mintFee;\r\n\r\n        if (fee != 0) require(msg.value == fee, \"NOT_FEE\");\r\n\r\n        require(!registered[id], \"REGISTERED\");\r\n\r\n        if (owner != address(0)) {\r\n            ownerOf[id] = owner;\r\n\r\n            emit OwnerOfSet(address(0), owner, id);\r\n        }\r\n\r\n        registered[id] = true;\r\n\r\n        __mint(to, id, amount, data, tokenURI);\r\n    }\r\n\r\n    function burn(\r\n        address from, \r\n        uint256 id, \r\n        uint256 amount\r\n    ) public payable virtual {\r\n        require(\r\n            msg.sender == from || isApprovedForAll[from][msg.sender],\r\n            \"NOT_AUTHORIZED\"\r\n        );\r\n\r\n        __burn(from, id, amount);\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// MANAGEMENT FUNCTIONS\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function manageMint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        string calldata tokenURI,\r\n        address owner\r\n    ) public payable virtual {\r\n        address _owner = ownerOf[id];\r\n\r\n        require(msg.sender == _owner || manager[msg.sender] || msg.sender == admin, \"NOT_AUTHORIZED\");\r\n\r\n        if (!registered[id]) registered[id] = true;\r\n        \r\n        if (_owner == address(0) && (ownerOf[id] = owner) != address(0)) {\r\n            emit OwnerOfSet(address(0), owner, id);\r\n        }\r\n\r\n        __mint(to, id, amount, data, tokenURI);\r\n    }\r\n\r\n    function manageBurn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) public payable virtual {\r\n        require(msg.sender == ownerOf[id] || manager[msg.sender] || msg.sender == admin, \"NOT_AUTHORIZED\");\r\n\r\n        __burn(from, id, amount);\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// OWNER FUNCTIONS\r\n    /// -----------------------------------------------------------------------\r\n    \r\n    function setOwnerOf(address to, uint256 id)\r\n        public\r\n        payable\r\n        onlyOwnerOfOrAdmin(id)\r\n        virtual\r\n    {\r\n        ownerOf[id] = to;\r\n\r\n        emit OwnerOfSet(msg.sender, to, id);\r\n    }\r\n\r\n    function setTransferability(uint256 id, bool set) public payable onlyOwnerOfOrAdmin(id) virtual {\r\n        transferable[id] = set;\r\n\r\n        emit TransferabilitySet(msg.sender, id, set);\r\n    }\r\n\r\n    function setPermission(uint256 id, bool set) public payable onlyOwnerOfOrAdmin(id) virtual {\r\n        permissioned[id] = set;\r\n\r\n        emit PermissionSet(msg.sender, id, set);\r\n    }\r\n\r\n    function setUserPermission(\r\n        address to, \r\n        uint256 id, \r\n        bool set\r\n    ) public payable onlyOwnerOfOrAdmin(id) virtual {\r\n        userPermissioned[to][id] = set;\r\n\r\n        emit UserPermissionSet(msg.sender, to, id, set);\r\n    }\r\n\r\n    function setURI(uint256 id, string calldata tokenURI) public payable onlyOwnerOfOrAdmin(id) virtual {\r\n        uris[id] = tokenURI;\r\n\r\n        emit URI(tokenURI, id);\r\n    }\r\n\r\n    function setUserURI(\r\n        address to, \r\n        uint256 id, \r\n        string calldata uuri\r\n    ) public payable onlyOwnerOfOrAdmin(id) virtual {\r\n        userURI[to][id] = uuri;\r\n\r\n        emit UserURIset(msg.sender, to, id, uuri);\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// ADMIN FUNCTIONS\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function setManager(address to, bool set)\r\n        public\r\n        payable\r\n        onlyAdmin\r\n        virtual\r\n    {\r\n        manager[to] = set;\r\n\r\n        emit ManagerSet(msg.sender, to, set);\r\n    }\r\n    \r\n    function setAdmin(address _admin) public payable onlyAdmin virtual {\r\n        admin = _admin;\r\n\r\n        emit AdminSet(msg.sender, _admin);\r\n    }\r\n\r\n    function setBaseURI(string calldata _baseURI)\r\n        public\r\n        payable\r\n        onlyAdmin\r\n        virtual\r\n    {\r\n        baseURI = _baseURI;\r\n\r\n        emit BaseURIset(msg.sender, _baseURI);\r\n    }\r\n\r\n    function setMintFee(uint256 _mintFee) public payable onlyAdmin virtual {\r\n        mintFee = _mintFee;\r\n\r\n        emit MintFeeSet(msg.sender, _mintFee);\r\n    }\r\n\r\n    function claimFee(address to, uint256 amount)\r\n        public\r\n        payable\r\n        onlyAdmin\r\n        virtual\r\n    {\r\n        assembly {\r\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\r\n                mstore(0x00, hex\"08c379a0\") // Function selector of the error method.\r\n                mstore(0x04, 0x20) // Offset of the error string.\r\n                mstore(0x24, 19) // Length of the error string.\r\n                mstore(0x44, \"ETH_TRANSFER_FAILED\") // The error string.\r\n                revert(0x00, 0x64) // Revert with (offset, size).\r\n            }\r\n        }\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// TRANSFER FUNCTIONS\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) public payable override virtual {\r\n        super.safeTransferFrom(from, to, id, amount, data);\r\n\r\n        require(transferable[id], \"NONTRANSFERABLE\");\r\n\r\n        if (permissioned[id]) require(userPermissioned[from][id] && userPermissioned[to][id], \"NOT_PERMITTED\");\r\n\r\n        _moveDelegates(delegates(from, id), delegates(to, id), id, amount);\r\n    }\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) public payable override virtual {\r\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\r\n\r\n        // Storing these outside the loop saves ~15 gas per iteration.\r\n        uint256 id;\r\n        uint256 amount;\r\n\r\n        for (uint256 i; i < ids.length; ) {\r\n            id = ids[i];\r\n            amount = amounts[i];\r\n\r\n            require(transferable[id], \"NONTRANSFERABLE\");\r\n\r\n            if (permissioned[id]) require(userPermissioned[from][id] && userPermissioned[to][id], \"NOT_PERMITTED\");\r\n\r\n            _moveDelegates(delegates(from, id), delegates(to, id), id, amount);\r\n\r\n            // An array can't have a total length\r\n            // larger than the max uint256 value.\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// -----------------------------------------------------------------------\r\n    /// INTERNAL FUNCTIONS\r\n    /// -----------------------------------------------------------------------\r\n\r\n    function __mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        string calldata tokenURI\r\n    ) internal virtual {\r\n        _mint(to, id, amount, data);\r\n\r\n        _safeCastTo216(totalSupply[id]);\r\n\r\n        _moveDelegates(address(0), delegates(to, id), id, amount);\r\n\r\n        if (bytes(tokenURI).length != 0) {\r\n            uris[id] = tokenURI;\r\n\r\n            emit URI(tokenURI, id);\r\n        }\r\n    }\r\n\r\n    function __burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _burn(from, id, amount);\r\n\r\n        _moveDelegates(delegates(from, id), address(0), id, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"ManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"name\":\"MintFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OwnerOfSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"PermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"TransferabilitySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"UserPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uuri\",\"type\":\"string\"}],\"name\":\"UserURIset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"fromTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"votes\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manageBurn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"manageMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissioned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setOwnerOf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setTransferability\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setUserPermission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uuri\",\"type\":\"string\"}],\"name\":\"setUserURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPermissioned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Wrappr", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a200000000000000000000000000000000000000000000000000000000000000015577261707072204c4c43202844656c617761726529000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c4c430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b504c414345484f4c444552000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://918dd42ef83a8664ad39802bec39bed68dc0a872a7370ff03514aea462ec8b90"}