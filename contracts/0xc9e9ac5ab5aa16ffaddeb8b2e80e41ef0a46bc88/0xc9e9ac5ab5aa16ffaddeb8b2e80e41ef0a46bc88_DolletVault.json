{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @notice Interface for the ERC20 token contract\\ninterface IERC20 is IERC20Upgradeable {\\n    /// @notice Returns the number of decimals used by the token\\n    /// @return The number of decimals\\n    function decimals() external view returns (uint8);\\n\\n    /// dev Returns the name of the Wrapped Ether token.\\n    /// return A string representing the token name.\\n    function name() external view returns (string memory);\\n\\n    /// dev Returns the symbol of the Wrapped Ether token.\\n    /// return A string representing the token symbol.\\n    function symbol() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title Wrapped Ether (WETH) Interface\\n * @dev This interface defines the functions and events for interacting with the Wrapped Ether (WETH) contract.\\n */\\ninterface IWETH is IERC20 {\\n    /**\\n     * @dev Emitted when Ether is deposited and WETH is minted.\\n     * @param dst The address that received the WETH tokens.\\n     * @param wad The amount of Ether deposited, represented in wei.\\n     */\\n    event Deposit(address indexed dst, uint wad);\\n\\n    /**\\n     * @dev Emitted when WETH is burned and Ether is withdrawn.\\n     * @param src The address that initiated the withdrawal.\\n     * @param wad The amount of WETH burned, represented in wei.\\n     */\\n    event Withdrawal(address indexed src, uint wad);\\n\\n    /**\\n     * @dev Deposits Ether to mint WETH tokens.\\n     * @notice This function is payable, and the amount of Ether sent will be converted to WETH.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Withdraws WETH and receives Ether.\\n     * @param wad The amount of WETH to burn, represented in wei.\\n     */\\n    function withdraw(uint wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dollet/IAdminStructure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @dev Interface for managing the super admin role.\\ninterface ISuperAdmin {\\n    /// @notice Returns the address of the super admin.\\n    /// @return The address of the super admin.\\n    function superAdmin() external view returns (address);\\n\\n    /// @notice Returns the address of the potential super admin.\\n    /// @return The address of the potential super admin.\\n    function potentialSuperAdmin() external view returns (address);\\n\\n    /// @notice Transfers the super admin role to a potential super admin address using pull-over-push pattern.\\n    /// @param _potentialSuperAdmin An address of a potential super admin.\\n    function transferSuperAdmin(address _potentialSuperAdmin) external;\\n\\n    /// @notice Accepts the super admin role by a potential super admin.\\n    function acceptSuperAdmin() external;\\n\\n    /// @notice Checks if the caller is a valid super admin.\\n    /// @param caller The address to check.\\n    function isValidSuperAdmin(address caller) external view;\\n}\\n\\n/// @dev Interface for managing admin roles.\\ninterface IAdminStructure is ISuperAdmin {\\n    /// @dev Emitted when an admin is added.\\n    /// @param admin The address of the added admin.\\n    event AddedAdmin(address admin);\\n\\n    /// @dev Emitted when an admin is removed.\\n    /// @param admin The address of the removed admin.\\n    event RemovedAdmin(address admin);\\n\\n    /// @notice Checks if the caller is a valid admin.\\n    /// @param caller The address to check.\\n    function isValidAdmin(address caller) external view;\\n\\n    /// @notice Checks if an account is an admin.\\n    /// @param account The address to check.\\n    /// @return A boolean indicating if the account is an admin.\\n    function isAdmin(address account) external view returns (bool);\\n\\n    /// @notice Adds multiple addresses as admins.\\n    /// @param _admins The addresses to add as admins.\\n    function addAdmins(address[] calldata _admins) external;\\n\\n    /// @notice Removes multiple addresses from admins.\\n    /// @param _admins The addresses to remove from admins.\\n    function removeAdmins(address[] calldata _admins) external;\\n\\n    /// @notice Returns all the admin addresses.\\n    /// @return An array of admin addresses.\\n    function getAllAdmins() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dollet/IStrategyCalculations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @notice Interface for the Strategy Calculations contract\\n/// @dev This interface provides functions for performing various calculations related to the strategy.\\ninterface IStrategyCalculations {\\n    /// @return The address of the Admin Structure contract\\n    function adminStructure() external view returns (address);\\n\\n    /// @return The address of the Strategy contract\\n    function strategy() external view returns (address);\\n\\n    /// @return The address of the Quoter contract\\n    function quoter() external view returns (address);\\n\\n    /// @dev Constant for representing 100 (100%)\\n    /// @return The value of 100\\n    function ONE_HUNDRED() external pure returns (uint256);\\n\\n    /// @notice Calculates the minimum amount of tokens to receive from Curve for a specific token and maximum amount\\n    /// @param _token The address of the token to withdraw\\n    /// @param _maxAmount The maximum amount of tokens to withdraw\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return The minimum amount of tokens to receive from Curve\\n    function calculateCurveMinWithdrawal(\\n        address _token,\\n        uint256 _maxAmount,\\n        uint256 _slippage\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculates the amount of LP tokens to get on curve deposit\\n    /// @param _token The token to estimate the deposit\\n    /// @param _amount The amount of tokens to deposit\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return The amount of LP tokens to get\\n    function calculateCurveDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256);\\n\\n    /// @notice Estimates the amount of tokens to swap from one token to another\\n    /// @param _from The address of the token to swap from\\n    /// @param _to The address of the token to swap to\\n    /// @param _amount The amount of tokens to swap\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return estimate The estimated amount of tokens to receive after the swap\\n    function estimateSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external returns (uint256 estimate);\\n\\n    /// @notice Estimates the deposit details for a specific token and amount\\n    /// @param _token The address of the token to deposit\\n    /// @param _amount The amount of tokens to deposit\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return amountWant The minimum amount of tokens to get on the curve deposit\\n    function estimateDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256 amountWant);\\n\\n    /// @notice Estimates the withdrawal details for a specific user, token, maximum amount, and slippage\\n    /// @param _user The address of the user\\n    /// @param _token The address of the token to withdraw\\n    /// @param _maxAmount The maximum amount of tokens to withdraw\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return minCurveOutput The minimum amount of tokens to get from the curve withdrawal\\n    /// @return withdrawable The minimum amount of tokens to get after the withdrawal\\n    function estimateWithdrawal(\\n        address _user,\\n        address _token,\\n        uint256 _maxAmount,\\n        uint256 _slippage\\n    ) external view returns (uint256 minCurveOutput, uint256 withdrawable);\\n\\n    /// @notice Retrieves information about the pending rewards to harvest from the convex pool\\n    /// @return rewardAmounts rewards the amount representing the pending rewards\\n    /// @return rewardTokens addresses of the reward tokens\\n    /// @return enoughRewards list indicating if the reward token is enough to harvest\\n    /// @return atLeastOne indicates if there is at least one reward to harvest\\n    function getPendingToHarvestView()\\n        external\\n        view\\n        returns (\\n            uint256[] memory rewardAmounts,\\n            address[] memory rewardTokens,\\n            bool[] memory enoughRewards,\\n            bool atLeastOne\\n        );\\n\\n    /// @notice Retrieves information about the pending rewards to harvest from the convex pool\\n    /// @return rewardAmounts rewards the amount representing the pending rewards\\n    /// @return rewardTokens addresses of the reward tokens\\n    /// @return enoughRewards list indicating if the reward token is enough to harvest\\n    /// @return atLeastOne indicates if there is at least one reward to harvest\\n    function getPendingToHarvest()\\n        external\\n        returns (\\n            uint256[] memory rewardAmounts,\\n            address[] memory rewardTokens,\\n            bool[] memory enoughRewards,\\n            bool atLeastOne\\n        );\\n\\n    /// @notice Estimates the rewards details for a specific user, token, amount, and slippage\\n    /// @param _user The address of the user\\n    /// @param _token The address of the token to calculate rewards for\\n    /// @param _amount The amount of tokens\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return minCurveOutput The minimum amount of tokens to get from the curve withdrawal\\n    /// @return claimable The minimum amount of tokens to get after the claim of rewards\\n    function estimateRewards(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256 minCurveOutput, uint256 claimable);\\n\\n    /// @notice Estimates the total claimable rewards for all users using a specific token and slippage\\n    /// @param _token The address of the token to calculate rewards for\\n    /// @param _amount The amount of tokens\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return claimable The total claimable amount of tokens\\n    function estimateAllUsersRewards(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256 claimable);\\n\\n    /// @dev Returns the amount of tokens deposited by a specific user in the indicated token\\n    /// @param _user The address of the user.\\n    /// @param _token The address of the token.\\n    /// @return The amount of tokens deposited by the user.\\n    function userDeposit(address _user, address _token) external view returns (uint256);\\n\\n    /// @dev Returns the total amount of tokens deposited in the strategy in the indicated token\\n    /// @param _token The address of the token.\\n    /// @return The total amount of tokens deposited.\\n    function totalDeposits(address _token) external view returns (uint256);\\n\\n    /// @notice Retrieves the minimum amount of tokens to swap from a specific fromToken to toToken\\n    /// @param _fromToken The address of the token to swap from\\n    /// @param _toToken The address of the token to swap to\\n    /// @return The minimum amount of tokens to swap\\n    function getAutomaticSwapMin(address _fromToken, address _toToken) external returns (uint256);\\n\\n    /// @notice Retrieves the minimum amount of LP tokens to obtained from a curve deposit\\n    /// @param _depositAmount The amount to deposit\\n    /// @return The minimum amount of LP tokens to obtained from the deposit on curve\\n    function getAutomaticCurveMinLp(uint256 _depositAmount) external returns (uint256);\\n\\n    /// @notice Retrieves the balance of a specific token held by the Strategy\\n    /// @param _token The address of the token\\n    /// @return The token balance\\n    function _getTokenBalance(address _token) external view returns (uint256);\\n\\n    /// @notice Retrieves the minimum value between a specific amount and a slippage percentage\\n    /// @param _amount The amount\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return The minimum value\\n    function _getMinimum(uint256 _amount, uint256 _slippage) external pure returns (uint256);\\n\\n    /// @notice Estimates the want balance after a harvest\\n    /// @param _slippage The allowed slippage percentage\\n    /// @return Returns the new want amount\\n    function estimateWantAfterHarvest(uint256 _slippage) external returns (uint256);\\n}\\n\\ninterface IStrategyCalculationsTwocrypto is IStrategyCalculations {\\n    /// @notice Formats the array input for curve\\n    /// @param _depositToken The address of the deposit token\\n    /// @param _amount The amount to deposit\\n    /// @return amounts An array of token amounts to use in curve\\n    function getCurveAmounts(\\n        address _depositToken,\\n        uint256 _amount\\n    ) external view returns (uint256[2] memory amounts);\\n}\\n\\ninterface IStrategyCalculationsTricryptoL1 is IStrategyCalculations {\\n    /// @notice Formats the array input for curve\\n    /// @param _depositToken The address of the deposit token\\n    /// @param _amount The amount to deposit\\n    /// @return amounts An array of token amounts to use in curve\\n    function getCurveAmounts(\\n        address _depositToken,\\n        uint256 _amount\\n    ) external view returns (uint256[3] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dollet/IStrategyConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport { IStrategyCalculations } from \\\"./IStrategyCalculations.sol\\\";\\n\\n/// @notice Interface for the Convex Strategy contract\\ninterface IStrategyConvex {\\n    /// @dev Struct representing a pool token\\n    struct PoolToken {\\n        bool isAllowed; /// Flag indicating if the token is allowed\\n        uint8 index; /// Index of the token\\n    }\\n\\n    /// @dev Struct representing an oracle\\n    struct Oracle {\\n        address token; /// Token address\\n        address oracle; /// Oracle address\\n    }\\n\\n    /// @dev Struct representing default slippages\\n    struct DefaultSlippages {\\n        uint256 curve; /// Default slippage for Curve swaps\\n        uint256 uniswap; /// Default slippage for Uniswap swaps\\n    }\\n\\n    /// @dev Struct representing reward information\\n    struct RewardInfo {\\n        address[] tokens; /// Array of reward tokens\\n        uint256[] minAmount; /// Array of minimum reward amounts\\n    }\\n\\n    /// @dev Enum representing fee types\\n    enum FeeType {\\n        MANAGEMENT, /// Management fee\\n        PERFORMANCE /// Performance fee\\n    }\\n\\n    /// @dev Event emitted when stucked tokens have been withdrawn\\n    /// @param caller Address of the caller of the transaction\\n    /// @param token Address of the token withdrawn\\n    /// @param amount Withdrawn amount\\n    event WithdrawStuckTokens(address caller, address token, uint256 amount);\\n\\n    /// @dev Event emitted when a harvest is executed\\n    /// @param harvester The address of the harvester\\n    /// @param amount The amount harvested\\n    /// @param wantBal The balance of the want token after the harvest\\n    event Harvested(address indexed harvester, uint256 amount, uint256 wantBal);\\n\\n    /// @dev Event emitted when a deposit is made\\n    /// @param user The address of the user\\n    /// @param token The address of the token deposited\\n    /// @param wantBal The balance of the want token generated with the deposit\\n    event Deposit(address user, address token, uint256 wantBal);\\n\\n    /// @dev Event emitted when a withdrawal is made\\n    /// @param user The address of the user\\n    /// @param token The address of the token being withdrawn\\n    /// @param amount The amount withdrawn\\n    /// @param wantBal The balance of the want token after the withdrawal\\n    event Withdraw(address user, address token, uint256 amount, uint256 wantBal);\\n\\n    /// @dev Event emitted when rewards are claimed\\n    /// @param user The address of the user\\n    /// @param token The address of the reward token\\n    /// @param amount The amount of rewards claimed\\n    /// @param wantBal The balance of the want token after claiming rewards\\n    event ClaimedRewards(address user, address token, uint256 amount, uint256 wantBal);\\n\\n    /// @dev Event emitted when fees are charged\\n    /// @param feeType The type of fee (Management or Performance)\\n    /// @param amount The amount of fees charged\\n    /// @param feeRecipient The address of the fee recipient\\n    event ChargedFees(FeeType indexed feeType, uint256 amount, address feeRecipient);\\n\\n    /// @dev Event emitted when allowed tokens are edited\\n    /// @param token The address of the token\\n    /// @param status The new status (true or false)\\n    event EditedAllowedTokens(address token, bool status);\\n\\n    /// @dev Event emitted when the pause status is changed\\n    /// @param status The new pause status (true or false)\\n    event PauseStatusChanged(bool status);\\n\\n    /// @dev Event emitted when a swap path is set\\n    /// @param from The address of the token to swap from\\n    /// @param to The address of the token to swap to\\n    /// @param path The swap path\\n    event SetPath(address from, address to, bytes path);\\n\\n    /// @dev Event emitted when a swap route is set\\n    /// @param from The address of the token to swap from\\n    /// @param to The address of the token to swap to\\n    /// @param route The swap route\\n    event SetRoute(address from, address to, address[] route);\\n\\n    /// @dev Event emitted when an oracle is set\\n    /// @param token The address of the token\\n    /// @param oracle The address of the oracle\\n    event SetOracle(address token, address oracle);\\n\\n    /// @dev Event emitted when the slippage value is set\\n    /// @param oldValue The old slippage value\\n    /// @param newValue The new slippage value\\n    /// @param kind The kind of slippage (Curve or Uniswap)\\n    event SetSlippage(uint256 oldValue, uint256 newValue, string kind);\\n\\n    /// @dev Event emitted when the minimum amount to harvest is changed\\n    /// @param token The address of the token\\n    /// @param minimum The new minimum amount to harvest\\n    event MinimumToHarvestChanged(address token, uint256 minimum);\\n\\n    /// @dev Event emitted when a reward token is added\\n    /// @param token The address of the reward token\\n    /// @param minimum The minimum amount of the reward token\\n    event AddedRewardToken(address token, uint256 minimum);\\n\\n    /// @dev Event emitted when a panic is executed\\n    event PanicExecuted();\\n}\\n\\n/// @notice Extended interface for the Convex Strategy contract\\ninterface IStrategyConvexExtended is IStrategyConvex {\\n    /// @dev Returns the address of the pool contract\\n    /// @return The address of the pool contract\\n    function pool() external view returns (address);\\n\\n    /// @dev Returns how many tokens the pool accepts\\n    /// @return The number of tokens the pool accepts\\n    function POOL_SIZE() external view returns (uint256);\\n\\n    /// @dev Returns the address of the calculations contract\\n    /// @return The address of the calculations contract\\n    function calculations() external view returns (IStrategyCalculations);\\n\\n    /// @dev Returns the address of the admin structure contract\\n    /// @return The address of the admin structure contract\\n    function adminStructure() external view returns (address);\\n\\n    /// @dev Minimum amount to execute reinvestment in harvest\\n    function minimumToHarvest(address _token) external view returns (uint256);\\n\\n    /// @dev Executes the harvest operation, it is also the function compound, reinvests rewards\\n    function harvest() external;\\n\\n    /// @dev Executes the harvest operation on deposits, it is also the function compound, reinvests rewards\\n    function harvestOnDeposit() external;\\n\\n    /// @dev Handles the case where tokens get stuck in the Strategy. Allows the admin to send the tokens to the\\n    ///      SuperAdmin\\n    /// @param _token The address of the stuck token\\n    function inCaseTokensGetStuck(address _token) external;\\n\\n    /// @dev Executes a panic operation, withdraws all the rewards from convex\\n    function panic() external;\\n\\n    /// @dev Pauses the strategy, pauses deposits\\n    function pause() external;\\n\\n    /// @dev Unpauses the strategy\\n    function unpause() external;\\n\\n    /// @dev Withdraws tokens from the strategy\\n    /// @param _user The address of the user\\n    /// @param _amount The amount of tokens to withdraw\\n    /// @param _token The address of the token to withdraw\\n    /// @param _minCurveOutput The minimum LP output from Curve\\n    /// @param _useEth Indicates whether to withdraw ETH or not\\n    function withdraw(\\n        address _user,\\n        uint256 _amount,\\n        address _token,\\n        uint256 _minCurveOutput,\\n        bool _useEth\\n    ) external;\\n\\n    /// @dev Claims rewards for the user\\n    /// @param _user The address of the user\\n    /// @param _token The address of the reward token\\n    /// @param _amount The amount of rewards to claim\\n    /// @param _minCurveOutput The minimum LP token output from Curve swap\\n    /// @param _useEth Indicates whether to withdraw ETH or not\\n    function claimRewards(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minCurveOutput,\\n        bool _useEth\\n    ) external;\\n\\n    /// @dev Returns the address of the reward pool contract\\n    /// @return The address of the reward pool contract\\n    function rewardPool() external view returns (address);\\n\\n    /// @dev Returns the address of the deposit token\\n    /// @return The address of the deposit token\\n    function depositToken() external view returns (address);\\n\\n    /// @dev Checks if a token is allowed for deposit\\n    /// @param token The address of the token\\n    /// @return isAllowed True if the token is allowed, false otherwise\\n    /// @return index The index of the token\\n    function allowedDepositTokens(address token) external view returns (bool, uint8);\\n\\n    /// @dev Returns the swap path for a token pair\\n    /// @param _from The address of the token to swap from\\n    /// @param _to The address of the token to swap to\\n    /// @return The swap path\\n    function paths(address _from, address _to) external view returns (bytes memory);\\n\\n    /// @dev Returns the want deposit amount of a user in the deposit token\\n    /// @param _user The address of the user\\n    /// @return The deposit amount for the user\\n    function userWantDeposit(address _user) external view returns (uint256);\\n\\n    /// @dev Returns the total want deposits in the strategy\\n    /// @return The total deposits in the strategy\\n    function totalWantDeposits() external view returns (uint256);\\n\\n    /// @dev Returns the oracle address for a token\\n    /// @param _token The address of the token\\n    /// @return The oracle address\\n    function oracle(address _token) external view returns (address);\\n\\n    /// @dev Returns the default slippage for Curve swaps used in harvest\\n    /// @return The default slippage for Curve swaps\\n    function defaultSlippageCurve() external view returns (uint256);\\n\\n    /// @dev Returns the default slippage for Uniswap swaps used in harvest\\n    /// @return The default slippage for Uniswap swaps\\n    function defaultSlippageUniswap() external view returns (uint256);\\n\\n    /// @dev Returns the want token\\n    /// @return The want token\\n    function want() external view returns (IERC20Upgradeable);\\n\\n    /// @dev Returns the balance of the strategy held in the strategy\\n    /// @return The balance of the strategy\\n    function balanceOf() external view returns (uint256);\\n\\n    /// @dev Returns the balance of the want token held in the strategy\\n    /// @return The balance of the want token\\n    function balanceOfWant() external view returns (uint256);\\n\\n    /// @dev Returns the balance of want in the strategy\\n    /// @return The balance of the pool\\n    function balanceOfPool() external view returns (uint256);\\n\\n    /// @dev Returns the pause status of the strategy\\n    /// @return True if the strategy is paused, false otherwise\\n    function paused() external view returns (bool);\\n\\n    /// @dev Returns the address of the weth token\\n    /// @return The address of the weth router\\n    function weth() external view returns (address);\\n\\n    /// @dev Returns the address of the Uniswap router\\n    /// @return The address of the Uniswap router\\n    function unirouter() external view returns (address);\\n\\n    /// @dev Returns the address of the vault contract\\n    /// @return The address of the vault contract\\n    function vault() external view returns (address);\\n\\n    /// @dev Returns the address of Convex booster\\n    /// @return The address of the Convex booster\\n    function booster() external view returns (address);\\n\\n    /// @dev Returns the address of Uniswap V2 router\\n    /// @return The address of Uniswap V2 router\\n    function unirouterV2() external view returns (address);\\n\\n    /// @dev Returns the address of Uniswap V3 router\\n    /// @return The address of Uniswap V3 router\\n    function unirouterV3() external view returns (address);\\n\\n    /// @dev Returns the performance fee\\n    /// @return The performance fee\\n    function performanceFee() external view returns (uint256);\\n\\n    /// @dev Returns the management fee\\n    /// @return The management fee\\n    function managementFee() external view returns (uint256);\\n\\n    /// @dev Returns the performance fee recipient\\n    /// @return The performance fee recipient\\n    function performanceFeeRecipient() external view returns (address);\\n\\n    /// @dev Returns the management fee recipient\\n    /// @return The management fee recipient\\n    function managementFeeRecipient() external view returns (address);\\n\\n    /// @dev Returns the fee cap\\n    /// @return The fee cap\\n    function FEE_CAP() external view returns (uint256);\\n\\n    /// @dev Returns the constant value of 100\\n    /// @return The constant value of 100\\n    function ONE_HUNDRED() external view returns (uint256);\\n\\n    /// @dev Sets the performance fee\\n    /// @param _fee The new performance fee\\n    function setPerformanceFee(uint256 _fee) external;\\n\\n    /// @dev Sets the management fee\\n    /// @param _fee The new management fee\\n    function setManagementFee(uint256 _fee) external;\\n\\n    /// @dev Sets the performance fee recipient\\n    /// @param recipient The new performance fee recipient\\n    function setPerformanceFeeRecipient(address recipient) external;\\n\\n    /// @dev Sets the management fee recipient\\n    /// @param recipient The new management fee recipient\\n    function setManagementFeeRecipient(address recipient) external;\\n\\n    /// @dev Sets the vault contract\\n    /// @param _vault The address of the vault contract\\n    function setVault(address _vault) external;\\n\\n    /// @dev Sets the Uniswap V2 router address\\n    /// @param _unirouterV2 The address of the Uniswap V2 router\\n    function setUnirouterV2(address _unirouterV2) external;\\n\\n    /// @dev Sets the Uniswap V3 router address\\n    /// @param _unirouterV3 The address of the Uniswap V3 router\\n    function setUnirouterV3(address _unirouterV3) external;\\n\\n    /// @notice Retrieves information about the pending rewards to harvest from the convex pool\\n    /// @return _rewardAmounts rewards the amount representing the pending rewards\\n    /// @return _rewardTokens addresses of the reward tokens\\n    /// @return _enoughRewards list indicating if the reward token is enough to harvest\\n    /// @return _atLeastOne indicates if there is at least one reward to harvest\\n    function getPendingToHarvest()\\n        external\\n        returns (\\n            uint256[] memory _rewardAmounts,\\n            address[] memory _rewardTokens,\\n            bool[] memory _enoughRewards,\\n            bool _atLeastOne\\n        );\\n\\n    // List of the reward tokens\\n    function getRewardTokens() external view returns (address[] memory);\\n}\\n\\n/// @title IStrategyConvexNonPayable\\n/// @notice Extended interface for the Convex Strategy contract\\ninterface IStrategyConvexNonPayable is IStrategyConvexExtended {\\n    /// @dev Deposits tokens into the strategy\\n    /// @param _token The address of the token to deposit\\n    /// @param _amount Amount of tokens to deposit\\n    /// @param _user The address of the user\\n    /// @param _minWant The minimum amount of want tokens to get from curve\\n    function deposit(address _token, uint256 _amount, address _user, uint256 _minWant) external;\\n}\\n\\n/// @title IStrategyConvexPayable\\n/// @notice Extended interface for the Convex Strategy contract\\ninterface IStrategyConvexPayable is IStrategyConvexExtended {\\n    /// @dev Deposits tokens into the strategy\\n    /// @param _token The address of the token to deposit\\n    /// @param _amount Amount of tokens to deposit\\n    /// @param _user The address of the user\\n    /// @param _minWant The minimum amount of want tokens to get from curve\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        address _user,\\n        uint256 _minWant\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/DolletVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport { IStrategyConvexNonPayable as IStrategyConvex } from \\\"../interfaces/dollet/IStrategyConvex.sol\\\";\\nimport { IAdminStructure } from \\\"../interfaces/dollet/IAdminStructure.sol\\\";\\nimport { IWETH } from \\\"../interfaces/common/IWETH.sol\\\";\\n\\n/**\\n * @dev Implementation of a vault to deposit funds for yield optimizing.\\n * @notice This is the contract that receives funds and that users interface with.\\n * @notice The yield optimizing strategy itself is implemented in a separate 'Strategy.sol' contract.\\n */\\ncontract DolletVault is ERC20Upgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /**\\n     * @dev The strategy currently in use by the vault.\\n     */\\n    IStrategyConvex public strategy;\\n    /**\\n     * @dev Contract that stores the information of the admins.\\n     */\\n    IAdminStructure public adminStructure;\\n\\n    /**\\n     * @dev Stores the deposit limit amounts for a token\\n     */\\n    mapping(address => DepositLimit) public tokenDepositLimit;\\n\\n    /**\\n     * @notice Structure of the values stored in the token deposit limits\\n     */\\n    struct DepositLimit {\\n        address token; // Address of the token\\n        uint256 minAmount; // Minimum amount allowed for deposits\\n        uint256 maxAmount; // Maximum amount allowed for deposits\\n    }\\n\\n    /**\\n     * @notice Logs when the deposit limit of a token has been set\\n     * @param limitBefore Structure of the deposit limit before\\n     * @param limitAfter Structure of the deposit limit after\\n     */\\n    event DepositLimitsSet(DepositLimit limitBefore, DepositLimit limitAfter);\\n\\n    /**\\n     * @notice Logs when stucked tokens have been withdrawn\\n     * @param caller Address of the caller of the transaction\\n     * @param token Address of the token withdrawn\\n     * @param amount Withdrawn amount\\n     */\\n    event WithdrawStuckTokens(address caller, address token, uint256 amount);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes the vault values like the admin stucture contract, strategy, name\\n     * @dev Symbol, and the deposit limits.\\n     * @param _adminStructure The address of the admin stucture contract.\\n     * @param _strategy The address of the strategy contract.\\n     * @param _name The name of the vault token.\\n     * @param _symbol The symbol of the vault token.\\n     * @param _depositLimits Array indicating the deposit limits\\n     */\\n    function initialize(\\n        IAdminStructure _adminStructure,\\n        IStrategyConvex _strategy,\\n        string calldata _name,\\n        string calldata _symbol,\\n        DepositLimit[] calldata _depositLimits\\n    ) external initializer {\\n        __ERC20_init(_name, _symbol);\\n        __ReentrancyGuard_init();\\n\\n        require(address(_strategy) != address(0), \\\"ZeroStrategy\\\");\\n        strategy = _strategy;\\n\\n        require(address(_adminStructure) != address(0), \\\"ZeroAdminStructure\\\");\\n        adminStructure = _adminStructure;\\n\\n        _setDepositLimits(_depositLimits);\\n    }\\n\\n    /**\\n     * @dev The entrypoint of funds into the system. People deposit with this function\\n     * into the vault. The vault is then in charge of sending funds into the strategy.\\n     * @param _amount Amount to be deposited\\n     * @param _token Address of token to be deposited\\n     * @param _minWant Minimum amount obtained fromt he deposit on curve\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        IERC20Upgradeable _token,\\n        uint256 _minWant\\n    ) external payable nonReentrant {\\n        _validateDepositLimit(_token, _amount);\\n        IStrategyConvex _strategy = strategy;\\n        _strategy.harvestOnDeposit();\\n        uint256 _before = balance();\\n        _token.safeTransferFrom(msg.sender, address(_strategy), _amount);\\n        _strategy.deposit(address(_token), _amount, msg.sender, _minWant);\\n        uint256 _after = balance();\\n        _amount = _after - _before;\\n        uint256 _shares = 0;\\n        if (totalSupply() == 0) {\\n            _shares = _amount;\\n        } else {\\n            _shares = (_amount * totalSupply()) / _before;\\n        }\\n        _mint(msg.sender, _shares);\\n    }\\n\\n    /**\\n     * @dev Function to exit the system. The vault will withdraw the required tokens\\n     * from the strategy and pay up the token holder. A proportional number of dollet vault\\n     * tokens are burned in the process.\\n     * @param _token The token to be received in the withdrawal\\n     * @param _minCurveOutput Minimum amount tokens obtained from curve\\n     */\\n    function withdrawAll(address _token, uint256 _minCurveOutput) external nonReentrant {\\n        uint256 _shares = balanceOf(msg.sender);\\n        require(_shares > 0, \\\"UserHasZeroLP\\\");\\n        strategy.harvest();\\n        uint256 _amount = (balance() * _shares) / totalSupply();\\n        _burn(msg.sender, _shares);\\n        strategy.withdraw(msg.sender, _amount, _token, _minCurveOutput, false);\\n    }\\n\\n    /**\\n     * @dev Claims rewards from the Vault for a specific token.\\n     * @param _token The address of the token to claim rewards for.\\n     * @param _minCurveOutput The minimum amount of tokens to receive from Curve.\\n     */\\n    function claimRewards(address _token, uint256 _minCurveOutput) external nonReentrant {\\n        uint256 _shares = balanceOf(msg.sender);\\n        require(_shares > 0, \\\"UserHasZeroLP\\\");\\n        strategy.harvest();\\n        uint256 _before = balance();\\n        uint256 _amount = (_before * _shares) / totalSupply();\\n        strategy.claimRewards(msg.sender, _token, _amount, _minCurveOutput, false);\\n        uint256 _after = balance();\\n        uint256 _wantSpent = _before - _after;\\n        uint256 _amountLP = (_wantSpent * totalSupply()) / _before;\\n        _burn(msg.sender, _amountLP);\\n    }\\n\\n    /**\\n     * @dev Estimates the deposit details for a specific token and amount.\\n     * @param _token The address of the token to deposit.\\n     * @param _amount The amount of tokens to deposit.\\n     * @param _slippage The allowed slippage percentage.\\n     * @return amountLP The amount of LP tokens to receive from the vault\\n     * @return amountWant The minimum amount of LP tokens to get from curve deposit\\n     */\\n    function estimateDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external returns (uint256 amountLP, uint256 amountWant) {\\n        uint256 _before = estimateWantAfterHarvest(_slippage);\\n        amountWant = strategy.calculations().estimateDeposit(_token, _amount, _slippage);\\n        if (totalSupply() == 0) {\\n            amountLP = amountWant;\\n        } else {\\n            amountLP = (amountWant * totalSupply()) / _before;\\n        }\\n    }\\n\\n    /**\\n     * @dev Estimates the withdrawal details for a specific user and token.\\n     * @param _user The address of the user.\\n     * @param _token The address of the token to withdraw.\\n     * @param _slippage The allowed slippage percentage.\\n     * @return minCurveOutput The minimum amount of tokens to receive from Curve.\\n     * @return withdrawable The amount of tokens available that will be accepted from the withdrawal.\\n     */\\n    function estimateWithdrawal(\\n        address _user,\\n        address _token,\\n        uint256 _slippage\\n    ) external returns (uint256 minCurveOutput, uint256 withdrawable) {\\n        uint256 _balanceUser = balanceOf(_user);\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0 || _balanceUser == 0) return (0, 0);\\n        uint256 _amount = (estimateWantAfterHarvest(_slippage) * _balanceUser) / _totalSupply;\\n        return strategy.calculations().estimateWithdrawal(_user, _token, _amount, _slippage);\\n    }\\n\\n    /**\\n     * @dev Estimates the rewards details for a specific user and token.\\n     * @param _user The address of the user.\\n     * @param _token The address of the token to check rewards for.\\n     * @param _slippage The allowed slippage percentage.\\n     * @return minCurveOutput The minimum amount of tokens to receive from Curve.\\n     * @return claimable The amount of tokens claimable as rewards.\\n     */\\n    function estimateRewards(\\n        address _user,\\n        address _token,\\n        uint256 _slippage\\n    ) external returns (uint256 minCurveOutput, uint256 claimable) {\\n        uint256 _balanceUser = balanceOf(_user);\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0 || _balanceUser == 0) return (0, 0);\\n        uint256 amount = (estimateWantAfterHarvest(_slippage) * _balanceUser) / _totalSupply;\\n        (minCurveOutput, claimable) = strategy.calculations().estimateRewards(\\n            _user,\\n            _token,\\n            amount,\\n            _slippage\\n        );\\n    }\\n\\n    /**\\n     * @dev Estimates the want amount after calling harvest useful for other estimation\\n     * @param _slippage The allowed slippage percentage.\\n     * @return want amount after harvest\\n     */\\n    function estimateWantAfterHarvest(uint256 _slippage) public returns (uint256) {\\n        return strategy.calculations().estimateWantAfterHarvest(_slippage);\\n    }\\n\\n    /**\\n     * @dev Estimates the total rewards claimable for all users for a specific token.\\n     * @param _token The address of the token to check rewards for.\\n     * @param _slippage The allowed slippage percentage.\\n     * @return claimable The total amount of tokens claimable as rewards.\\n     */\\n    function estimateAllUsersRewards(\\n        address _token,\\n        uint256 _slippage\\n    ) external returns (uint256 claimable) {\\n        claimable = strategy.calculations().estimateAllUsersRewards(\\n            _token,\\n            estimateWantAfterHarvest(_slippage),\\n            _slippage\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows the super admin to set the strategy\\n     * @param _strategy The address of the strategy\\n     */\\n    function setStrategy(IStrategyConvex _strategy) external {\\n        adminStructure.isValidSuperAdmin(msg.sender);\\n        require(address(_strategy) != address(0), \\\"ZeroStrategy\\\");\\n        strategy = _strategy;\\n    }\\n\\n    /**\\n     * @dev Handles the case where tokens get stuck in the Vault. Allows the admin to send the tokens to the super admin\\n     * @param _token The address of the stuck token.\\n     */\\n    function inCaseTokensGetStuck(address _token) external {\\n        adminStructure.isValidAdmin(msg.sender);\\n        require(_token != address(want()), \\\"ZeroToken\\\");\\n\\n        uint256 _amount = IERC20Upgradeable(_token).balanceOf(address(this));\\n        IERC20Upgradeable(_token).safeTransfer(adminStructure.superAdmin(), _amount);\\n        emit WithdrawStuckTokens(msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @dev Edits the deposit limits for specific tokens.\\n     * @param _depositLimits The array of DepositLimit structs representing the new deposit limits.\\n     */\\n    function editDepositLimits(DepositLimit[] calldata _depositLimits) external {\\n        adminStructure.isValidAdmin(msg.sender);\\n        _setDepositLimits(_depositLimits);\\n    }\\n\\n    /**\\n     * @notice Estimates the amount of tokens to swap from one token to another\\n     * @param _from The address of the token to swap from\\n     * @param _to The address of the token to swap to\\n     * @param _amount The amount of tokens to swap\\n     * @param _slippage The allowed slippage percentage\\n     * @return estimate The estimated amount of tokens to receive after the swap\\n     */\\n    function estimateSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external returns (uint256 estimate) {\\n        return strategy.calculations().estimateSwap(_from, _to, _amount, _slippage);\\n    }\\n\\n    /**\\n     * @dev Calculates the minimum amount of tokens to receive from Curve for a specific token and maximum amount.\\n     * @param _token The address of the token to withdraw.\\n     * @param _amount The amount of LP tokens to withdraw from curve.\\n     * @param _slippage The allowed slippage percentage.\\n     * @return The minimum amount of tokens to receive from Curve.\\n     */\\n    function calculateCurveMinWithdrawal(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256) {\\n        return strategy.calculations().calculateCurveMinWithdrawal(_token, _amount, _slippage);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of LP tokens to get on curve deposit\\n     * @param _amount The amount of tokens to deposit\\n     * @param _slippage The allowed slippage percentage\\n     * @return The amount of LP tokens to get\\n     */\\n    function calculateCurveDeposit(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _slippage\\n    ) external view returns (uint256) {\\n        return strategy.calculations().calculateCurveDeposit(_token, _amount, _slippage);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens deposited by a specific user in the indicated token\\n     * @param _user The address of the user.\\n     * @param _token The address of the token.\\n     * @return The amount of tokens deposited by the user.\\n     */\\n    function userDeposit(address _user, address _token) external view returns (uint256) {\\n        return strategy.calculations().userDeposit(_user, _token);\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens deposited in the strategy in the indicated token\\n     * @param _token The address of the token.\\n     * @return The total amount of tokens deposited.\\n     */\\n    function totalDeposits(address _token) external view returns (uint256) {\\n        return strategy.calculations().totalDeposits(_token);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the token that the Vault holds.\\n     * @return The address of the want token\\n     */\\n    function want() public view returns (IERC20Upgradeable) {\\n        return IERC20Upgradeable(strategy.want());\\n    }\\n\\n    /**\\n     * @dev Calculated the total balance of the want token\\n     * It takes into account the vault contract balance, the strategy contract balance\\n     * and the balance deployed in other contracts as part of the strategy.\\n     * @return The total balance of the want token\\n     */\\n    function balance() public view returns (uint256) {\\n        return want().balanceOf(address(this)) + IStrategyConvex(strategy).balanceOf();\\n    }\\n\\n    /**\\n     * @dev Override of the internal function of ERC20 token transfer.\\n     * @dev Implemented to disable transfers on the Dollet LP token.\\n     */\\n    function _transfer(address, address, uint256) internal pure override {\\n        revert(\\\"DisabledTransfers\\\");\\n    }\\n\\n    /**\\n     * @dev Override of the internal function of ERC20 token approve.\\n     * @dev Implemented to disable approvals on the Dollet LP token.\\n     */\\n    function _approve(address, address, uint256) internal pure override {\\n        revert(\\\"DisabledApprovals\\\");\\n    }\\n\\n    /**\\n     * @dev Edits the deposit limits for specific tokens.\\n     * @param _depositLimits The array of DepositLimit structs representing the new deposit limits.\\n     */\\n    function _setDepositLimits(DepositLimit[] calldata _depositLimits) private {\\n        for (uint256 _i = 0; _i < _depositLimits.length; _i++) {\\n            require(_depositLimits[_i].minAmount > 0, \\\"ZeroMinAmount\\\");\\n            require(_depositLimits[_i].maxAmount >= _depositLimits[_i].minAmount, \\\"WrongMaxAmount\\\");\\n\\n            emit DepositLimitsSet(tokenDepositLimit[_depositLimits[_i].token], _depositLimits[_i]);\\n\\n            tokenDepositLimit[_depositLimits[_i].token] = _depositLimits[_i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Validated the deposit limits for specific tokens.\\n     * @param _token Address of the token to validate.\\n     * @param _amount Amount to validate.\\n     */\\n    function _validateDepositLimit(IERC20Upgradeable _token, uint256 _amount) private view {\\n        DepositLimit memory _depositLimits = tokenDepositLimit[address(_token)];\\n\\n        require(_depositLimits.maxAmount > 0, \\\"InvalidDepositToken\\\");\\n        require(\\n            _amount >= _depositLimits.minAmount && _amount <= _depositLimits.maxAmount,\\n            \\\"InvalidDepositAmount\\\"\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DolletVault.DepositLimit\",\"name\":\"limitBefore\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DolletVault.DepositLimit\",\"name\":\"limitAfter\",\"type\":\"tuple\"}],\"name\":\"DepositLimitsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminStructure\",\"outputs\":[{\"internalType\":\"contract IAdminStructure\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"calculateCurveDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"calculateCurveMinWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCurveOutput\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minWant\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DolletVault.DepositLimit[]\",\"name\":\"_depositLimits\",\"type\":\"tuple[]\"}],\"name\":\"editDepositLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"estimateAllUsersRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"estimateDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWant\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"estimateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minCurveOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"estimateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"estimateWantAfterHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"estimateWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minCurveOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAdminStructure\",\"name\":\"_adminStructure\",\"type\":\"address\"},{\"internalType\":\"contract IStrategyConvexNonPayable\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct DolletVault.DepositLimit[]\",\"name\":\"_depositLimits\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategyConvexNonPayable\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategyConvexNonPayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDepositLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCurveOutput\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DolletVault", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}