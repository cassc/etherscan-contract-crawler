{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ncontract Vault{\r\n    using SafeMath for uint256;\r\n\r\n    address public manager;\r\n    uint256 public lastestTime = 1698138000;\r\n    uint256 immutable public intervalTime = 1 hours;\r\n    uint256 immutable public rewardAmount = 1712000000000000000000;\r\n\r\n    event Reward(address,uint256);\r\n\r\n    constructor(address _manager){\r\n        manager = _manager;\r\n        // lastestTime = block.timestamp;\r\n    }\r\n\r\n    function reward() public {\r\n        if(block.timestamp < lastestTime.add(intervalTime)){\r\n            return;\r\n        }\r\n        uint256 hour = (block.timestamp.sub(lastestTime)).div(intervalTime);\r\n        lastestTime = lastestTime.add(hour.mul(intervalTime));\r\n        uint256 amount = hour.mul(rewardAmount);\r\n        uint256 balance = IERC20(Manager(manager).tokenA()).balanceOf(address(this));\r\n        if(balance == 0){\r\n            return;\r\n        }else if(balance < amount){\r\n            amount = balance;\r\n        }\r\n        address stPool = Manager(manager).stPool();\r\n        IERC20(Manager(manager).tokenA()).transfer(stPool,amount);\r\n        emit Reward(stPool,amount);\r\n    }\r\n\r\n\r\n    function move(address _token,uint256 _amount,address _account) public onlyOwner {\r\n        IERC20 erc = IERC20(_token);\r\n        erc.transfer(_account,_amount);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == Manager(manager).owner(),\"ERC20: address is not owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\ninterface Manager {\r\n    function uniswapRouterV2() external view returns(address);\r\n    function tokenB() external view returns(address);\r\n    function iUniswapV2Factory() external view returns(address);\r\n    function owner() external view returns(address);\r\n    function tokenA() external view returns(address);\r\n    function lpToken() external view returns(address);\r\n    function vault() external view returns(address);\r\n    function stPool() external view returns(address);\r\n    function exPool() external view returns(address);\r\n    function pair() external view returns(address);\r\n    function receiverA() external view returns(address);\r\n    function receiverB() external view returns(address);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"intervalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d58c7e6c942e252a0ad31ea00f02d1bdf9bcc47d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6a820e86822e8ea707e6d00616589da41bea22743aecd0248724738e727bd20c"}