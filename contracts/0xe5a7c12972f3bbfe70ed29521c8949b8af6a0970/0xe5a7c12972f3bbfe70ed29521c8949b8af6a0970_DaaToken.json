{"SourceCode": "pragma solidity ^0.4.10;\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\n/// @title ICONOMI Daa token\r\ncontract DaaToken {\r\n  //\r\n  // events\r\n  //\r\n  // ERC20 events\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  // mint/burn events\r\n  event Mint(address indexed _to, uint256 _amount, uint256 _newTotalSupply);\r\n  event Burn(address indexed _from, uint256 _amount, uint256 _newTotalSupply);\r\n\r\n  // admin events\r\n  event BlockLockSet(uint256 _value);\r\n  event NewOwner(address _newOwner);\r\n  event NewMinter(address _minter);\r\n\r\n  modifier onlyOwner {\r\n    if (msg.sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier minterOrOwner {\r\n    if (msg.sender == minter || msg.sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier blockLock(address _sender) {\r\n    if (!isLocked() || _sender == owner) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  modifier validTransfer(address _from, address _to, uint256 _amount) {\r\n    if (isTransferValid(_from, _to, _amount)) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  uint256 public totalSupply;\r\n  string public name;\r\n  uint8 public decimals;\r\n  string public symbol;\r\n  string public version = '0.0.1';\r\n  address public owner;\r\n  address public minter;\r\n  uint256 public lockedUntilBlock;\r\n\r\n  function DaaToken(\r\n      string _tokenName,\r\n      uint8 _decimalUnits,\r\n      string _tokenSymbol,\r\n      uint256 _lockedUntilBlock\r\n  ) {\r\n\r\n    name = _tokenName;\r\n    decimals = _decimalUnits;\r\n    symbol = _tokenSymbol;\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value)\r\n      public\r\n      blockLock(msg.sender)\r\n      validTransfer(msg.sender, _to, _value)\r\n      returns (bool success)\r\n  {\r\n\r\n    // transfer tokens\r\n    balances[msg.sender] -= _value;\r\n    balances[_to] += _value;\r\n\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value)\r\n      public\r\n      returns (bool success)\r\n  {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n      public\r\n      blockLock(_from)\r\n      validTransfer(_from, _to, _value)\r\n      returns (bool success)\r\n  {\r\n\r\n    // check sufficient allowance\r\n    if (_value > allowed[_from][msg.sender]) {\r\n      return false;\r\n    }\r\n\r\n    // transfer tokens\r\n    balances[_from] -= _value;\r\n    balances[_to] += _value;\r\n    allowed[_from][msg.sender] -= _value;\r\n\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n      public\r\n      returns (bool success)\r\n  {\r\n    if (approve(_spender, _value)) {\r\n      tokenRecipient(_spender).receiveApproval(msg.sender, _value, this, _extraData);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /// @notice Mint new tokens. Can only be called by minter or owner\r\n  function mint(address _to, uint256 _value)\r\n      public\r\n      minterOrOwner\r\n      blockLock(msg.sender)\r\n      returns (bool success)\r\n  {\r\n    // ensure _value is greater than zero and\r\n    // doesn't overflow\r\n    if (totalSupply + _value <= totalSupply) {\r\n      return false;\r\n    }\r\n\r\n    balances[_to] += _value;\r\n    totalSupply += _value;\r\n\r\n    Mint(_to, _value, totalSupply);\r\n    Transfer(0x0, _to, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice Burn tokens. Can be called by any account\r\n  function burn(uint256 _value)\r\n      public\r\n      blockLock(msg.sender)\r\n      returns (bool success)\r\n  {\r\n    if (_value == 0 || _value > balances[msg.sender]) {\r\n      return false;\r\n    }\r\n\r\n    balances[msg.sender] -= _value;\r\n    totalSupply -= _value;\r\n\r\n    Burn(msg.sender, _value, totalSupply);\r\n    Transfer(msg.sender, 0x0, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice Set block lock. Until that block (exclusive) transfers are disallowed\r\n  function setBlockLock(uint256 _lockedUntilBlock)\r\n      public\r\n      onlyOwner\r\n      returns (bool success)\r\n  {\r\n    lockedUntilBlock = _lockedUntilBlock;\r\n    BlockLockSet(_lockedUntilBlock);\r\n    return true;\r\n  }\r\n\r\n  /// @notice Replace current owner with new one\r\n  function replaceOwner(address _newOwner)\r\n      public\r\n      onlyOwner\r\n      returns (bool success)\r\n  {\r\n    owner = _newOwner;\r\n    NewOwner(_newOwner);\r\n    return true;\r\n  }\r\n\r\n  /// @notice Set account that can mint new tokens\r\n  function setMinter(address _newMinter)\r\n      public\r\n      onlyOwner\r\n      returns (bool success)\r\n  {\r\n    minter = _newMinter;\r\n    NewMinter(_newMinter);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner)\r\n      public\r\n      constant\r\n      returns (uint256 balance)\r\n  {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender)\r\n      public\r\n      constant\r\n      returns (uint256 remaining)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /// @notice Are transfers currently disallowed\r\n  function isLocked()\r\n      public\r\n      constant\r\n      returns (bool success)\r\n  {\r\n    return lockedUntilBlock > block.number;\r\n  }\r\n\r\n  /// @dev Checks if transfer parameters are valid\r\n  function isTransferValid(address _from, address _to, uint256 _amount)\r\n      private\r\n      constant\r\n      returns (bool isValid)\r\n  {\r\n    return  balances[_from] >= _amount &&  // sufficient balance\r\n            _amount > 0 &&                 // amount is positive\r\n            _to != address(this) &&        // prevent sending tokens to contract\r\n            _to != 0x0                     // prevent sending token to 0x0 address\r\n    ;\r\n  }\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"}],\"name\":\"setBlockLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_lockedUntilBlock\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BlockLockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"}]", "ContractName": "DaaToken", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010426c6f636b636861696e20496e646578000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424c580000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://873557e49263ebed3bba9e716c7aa751c799cae3a53089798e29b748aeac5ea5"}