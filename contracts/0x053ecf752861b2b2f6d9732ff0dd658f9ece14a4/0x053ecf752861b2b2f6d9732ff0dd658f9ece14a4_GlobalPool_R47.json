{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/upgrades/GlobalPool_R47.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../lib/interfaces/IDepositContract.sol\\\";\\nimport \\\"../SystemParameters.sol\\\";\\nimport \\\"../lib/Lockable.sol\\\";\\nimport \\\"../lib/interfaces/IAETH.sol\\\";\\nimport \\\"../lib/interfaces/IFETH.sol\\\";\\nimport \\\"../lib/interfaces/IConfig.sol\\\";\\nimport \\\"../lib/interfaces/IStaking.sol\\\";\\nimport \\\"../lib/interfaces/IDepositContract.sol\\\";\\nimport \\\"../lib/Pausable.sol\\\";\\nimport \\\"../lib/interfaces/IGlobalPool.sol\\\";\\nimport \\\"../lib/interfaces/IWithdrawalPool.sol\\\";\\nimport \\\"../lib/interfaces/IJokerRace.sol\\\";\\n\\ncontract GlobalPool_R47 is IGlobalPool, Lockable, Pausable {\\n\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n\\n    /* change events */\\n    event AETHContractChanged(address prevValue, address newValue);\\n    event FETHContractChanged(address prevValue, address newValue);\\n    event ConfigContractChanged(address prevValue, address newValue);\\n    event StakingContractChanged(address prevValue, address newValue);\\n    event OperatorChanged(address prevValue, address newValue);\\n    event CrossChainBridgeChanged(address prevValue, address newValue);\\n    event DistributeGasLimitChanged(uint256 prevValue, uint256 newValue);\\n    event WithdrawalPoolChanged(address prevValue, address newValue);\\n    event TreasuryChanged(address prevValue, address newValue);\\n    event VaultAllowed(address vault);\\n    event VaultDisallowed(address vault);\\n\\n    /* staker events */\\n    event StakePending(address indexed staker, uint256 amount);\\n    event StakeConfirmed(address indexed staker, uint256 amount);\\n    event StakeRemoved(address indexed staker, uint256 amount);\\n    event PendingUnstake(\\n        address indexed ownerAddress,\\n        address indexed receiverAddress,\\n        uint256 amount,\\n        bool isAETH\\n    );\\n    event RewardsDistributed(address[] claimers, uint256[] amounts);\\n    event RewardsClaimed(\\n        address indexed receiverAddress,\\n        address claimer,\\n        uint256 amount\\n    );\\n\\n    event ManualClaimExpected(\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    /* deprecated staker events */\\n    event PendingUnstakeRemoved(address claimer, uint256 amount);\\n\\n    /* pool events */\\n    event PoolOnGoing(bytes pool);\\n    event PoolCompleted(bytes pool);\\n    event PushedToVault(address vault, uint256 count);\\n\\n    /* deprecated provider events */\\n    event ProviderSlashedAnkr(address indexed provider, uint256 ankrAmount, uint256 etherEquivalence);\\n    event ProviderToppedUpEth(address indexed provider, uint256 amount);\\n    event ProviderToppedUpAnkr(address indexed provider, uint256 amount);\\n    event ProviderExited(address indexed provider);\\n    event ProviderSlashedEth(address indexed provider, uint256 amount);\\n    event ProviderLockedEthReset(address provider, uint256 amount, uint256 legacy);\\n\\n    /* rewards (AETH) */\\n    event RewardsRestaked(address indexed sender, uint256 amount);\\n    event RewardClaimed(address indexed staker, uint256 amount, bool isAETH);\\n\\n    /// @dev deprecated variable\\n    mapping(address => uint256) private _pendingUserStakes; // deleted\\n\\n    /// @dev total user stake\\n    mapping(address => uint256) private _userStakes;\\n\\n    /* @dev deprecated variables */\\n    mapping(address => uint256) private _rewards; // deleted\\n    mapping(address => uint256) private _claims; // deleted\\n    mapping(address => uint256) private _etherBalances; // deleted\\n    mapping(address => uint256) private _slashings; // deleted\\n    mapping(address => uint256) private _exits;\\n    address[] private _pendingStakers; // deleted\\n    uint256 private _pendingAmount; // deleted\\n    uint256 private _totalStakes; // deleted\\n    uint256 private _totalRewards; // deleted\\n\\n    /// @dev ankrETH contract\\n    IAETH private _aethContract;\\n\\n    /* @dev deprecated variables */\\n    IStaking private _stakingContract;\\n    SystemParameters private _systemParameters;\\n\\n    /// @dev ETH2 Staking contract\\n    address private _depositContract;\\n\\n    /* @dev deprecated variables */\\n    address[] private _pendingTemp; // deleted\\n    uint256[50] private __gap; // deleted\\n    uint256 private _lastPendingStakerPointer; // deleted\\n\\n    /// @dev Governance contract\\n    IConfig private _configContract;\\n\\n    /// @dev deprecated variable\\n    mapping(address => uint256) private _pendingEtherBalances; // deleted\\n\\n    /// @dev operator of contract\\n    address private _operator; // slot:322\\n\\n    /* @dev deprecated variables */\\n    mapping(address => uint256[2]) private _fETHRewards; // deleted\\n    mapping(address => uint256) private _aETHRewards; // slot:324\\n\\n    /// @dev aETHb contract\\n    IFETH private _fethContract;\\n\\n    /* @dev deprecated variables */\\n    uint256 private _fethMintBase; // deleted\\n    address private _crossChainBridge; // slot:327\\n    mapping(address => uint256) private _aETHProviderRewards; // slot:328\\n    uint256 private _totalSlashedETH;\\n\\n    /// @notice Ankr Treasury wallet\\n    address public treasury;\\n\\n    // unstakes\\n    uint256 public _DISTRIBUTE_GAS_LIMIT;\\n    IWithdrawalPool internal _withdrawalPool;\\n    uint256 internal _pendingUnstakeGap;\\n    uint256 internal _pendingTotalUnstakes;\\n    address[] internal _pendingUnstakeClaimers;\\n    mapping(address => uint256) internal _pendingClaimerUnstakes;\\n    uint256[] internal _pendingUnstakeRequests;\\n\\n    // reentrancy guard\\n    // @dev inverse @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\n    bool private _entered;\\n\\n    // manual claim\\n    uint256 internal _stashedForManualClaims;\\n    mapping(address => uint256) internal _manualClaims; // address => amount\\n\\n    // Vaults\\n    mapping(address => bool) internal _allowedVaults; // address => bool\\n\\n    // claimable shares (after stake)\\n    mapping(address => uint256) internal _claimableShares;\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == owner() || msg.sender == _operator, \\\"Operator: not allowed\\\");\\n        _;\\n    }\\n\\n    modifier notMarkedForManualClaim() virtual {\\n        require(\\n            _manualClaims[msg.sender] == 0,\\n            \\\"GlobalPool: sender is marked for manual claim\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _entered will be false\\n        require(!_entered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _entered = true;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _entered = false;\\n    }\\n\\n    function initialize(IAETH aethContract, SystemParameters parameters, address depositContract) public initializer {\\n        __Ownable_init();\\n\\n        _depositContract = depositContract;\\n        _aethContract = aethContract;\\n        _systemParameters = parameters;\\n\\n        _paused[\\\"topUpETH\\\"] = true;\\n        _paused[\\\"topUpANKR\\\"] = true;\\n    }\\n\\n    // @notice Push 32 ETH x count to allowed vault, where ETH going to Deposit Contract\\n    function pushToVault(address vault, uint256 count) external nonReentrant onlyOperator {\\n        require(_allowedVaults[vault], \\\"GlobalPool: vault not allowed\\\");\\n        require(count > 0, \\\"GlobalPool: count is zero\\\");\\n        uint256 amount = count.mul(32 ether);\\n        require(address(this).balance >= amount, \\\"GlobalPool: pending ethers not enough\\\");\\n        require(_unsafeTransfer(vault, amount, false), \\\"GlobalPool: transfer failed\\\");\\n        emit PushedToVault(vault, count);\\n    }\\n\\n    function pushToBeacon(bytes calldata pubkey, bytes calldata withdrawal_credentials, bytes calldata signature, bytes32 deposit_data_root) public onlyOperator {\\n        require(address(this).balance >= 32 ether, \\\"pending ethers not enough\\\");\\n        IDepositContract(_depositContract).deposit{value : 32 ether}(pubkey, withdrawal_credentials, signature, deposit_data_root);\\n        emit PoolOnGoing(pubkey);\\n    }\\n\\n    /*\\n     * @notice add an amount as stakeable reward of pull\\n     */\\n    function restake() external payable override {\\n        emit StakeConfirmed(msg.sender, msg.value);\\n    }\\n\\n    /*\\n     * @notice same as stakeAndClaimAethC\\n     * @dev deprecated\\n     */\\n    function stake() external payable {\\n        stakeAndClaimAethC();\\n    }\\n\\n    function stakeAndClaimAethC() public whenNotPaused(\\\"stake\\\") nonReentrant payable {\\n        _stake(msg.sender, msg.value, LockStrategy.Claimable);\\n        claimAETH();\\n    }\\n\\n    function stakeAndClaimAethB() external whenNotPaused(\\\"stake\\\") nonReentrant payable {\\n        _stake(msg.sender, msg.value, LockStrategy.Claimable);\\n        claimFETH();\\n    }\\n\\n    enum LockStrategy {\\n        Claimable, CrossChain, Provider\\n    }\\n\\n    function _stake(address staker, uint256 value, LockStrategy lockStrategy) internal {\\n        require(value > 0, \\\"Value must be greater than zero\\\");\\n        // lets calc how many ethers every user staked\\n        _userStakes[staker] = _userStakes[staker].add(value);\\n        // calculate amount of shares to be minted to the user\\n        uint256 shares = _aethContract.bondsToShares(value);\\n        // mint rewards based on lock strategy\\n        if (lockStrategy == LockStrategy.Claimable) {\\n            // allow staker to claim aETH or fETH tokens\\n            _aethContract.mint(address(this), shares);\\n            _claimableShares[staker] = _claimableShares[staker].add(shares);\\n        } else if (lockStrategy == LockStrategy.CrossChain) {\\n            // lock rewards on cross chain bridge\\n            require(_crossChainBridge != address(0x00), \\\"Cross chain bridge is not initialized\\\");\\n            _aethContract.mint(address(_crossChainBridge), shares);\\n        } else {\\n            revert(\\\"Not supported lock strategy type\\\");\\n        }\\n        // mint event that this stake is confirmed\\n        emit StakeConfirmed(staker, value);\\n    }\\n\\n    function claimableAETHRewardOf(address staker) public view returns (uint256) {\\n        return _claimableShares[staker];\\n    }\\n\\n    function claimableFETHRewardOf(address staker) public view returns (uint256) {\\n        return _aethContract.sharesToBonds(claimableAETHRewardOf(staker));\\n    }\\n\\n    function claimableAETHFRewardOf(address staker) public view returns (uint256) {\\n        return claimableFETHRewardOf(staker);\\n    }\\n\\n    function claimAETH() whenNotPaused(\\\"claim\\\") public {\\n        address staker = msg.sender;\\n        uint256 claimableShares = claimableAETHRewardOf(staker);\\n        require(claimableShares > 0, \\\"claimable reward zero\\\");\\n        _claimableShares[staker] = 0;\\n        require(_aethContract.transfer(address(staker), claimableShares), \\\"can't transfer shares\\\");\\n        emit RewardClaimed(staker, claimableShares, true);\\n    }\\n\\n    function claimFETH() whenNotPaused(\\\"claim\\\") public {\\n        address staker = msg.sender;\\n        uint256 claimableShares = claimableAETHRewardOf(staker);\\n        require(claimableShares > 0, \\\"claimable reward zero\\\");\\n        _claimableShares[staker] = 0;\\n        uint256 allowance = _aethContract.allowance(address(this), address(_fethContract));\\n        if (allowance < claimableShares) {\\n            require(_aethContract.approve(address(_fethContract), 2 ** 256 - 1), \\\"can't approve\\\");\\n        }\\n        _fethContract.lockSharesFor(address(this), staker, claimableShares);\\n        emit RewardClaimed(staker, claimableShares, false);\\n    }\\n\\n    function unstakeFETH(uint256 amount) external whenNotPaused(\\\"unstake\\\") nonReentrant {\\n        uint256 shares = _fethContract.bondsToShares(amount);\\n        // swap fETH into aETH (it also burns fETH)\\n        _fethContract.unlockSharesFor(msg.sender, shares);\\n        _unstake(msg.sender, msg.sender, shares, amount, false);\\n    }\\n\\n    function unstakeFETHFor(uint256 amount, address recipient) external whenNotPaused(\\\"unstake\\\") nonReentrant {\\n        uint256 shares = _fethContract.bondsToShares(amount);\\n        // swap fETH into aETH (it also burns fETH)\\n        _fethContract.unlockSharesFor(msg.sender, shares);\\n        _unstake(msg.sender, recipient, shares, amount, false);\\n    }\\n\\n    function unstakeAETH(uint256 shares) external whenNotPaused(\\\"unstake\\\") nonReentrant {\\n        uint256 amount = _fethContract.sharesToBonds(shares);\\n        _unstake(msg.sender, msg.sender, shares, amount, true);\\n    }\\n\\n    function unstakeAETHFor(uint256 shares, address recipient) external whenNotPaused(\\\"unstake\\\") nonReentrant {\\n        uint256 amount = _fethContract.sharesToBonds(shares);\\n        _unstake(msg.sender, recipient, shares, amount, true);\\n    }\\n\\n    /*\\n     * @param staker - address where we must burn aETH\\n     * @param recipient - future support for unstakeFor\\n     * @param shares - aETH to burn\\n     * @param amount - ETH amount to unstake\\n     */\\n    function _unstake(address staker, address recipient, uint256 shares, uint256 amount, bool isAETH) internal {\\n        require(amount >= _configContract.getConfig(\\\"UNSTAKE_MIN_AMOUNT\\\"), \\\"Value must be not less than minimum amount\\\");\\n        // no need to check balance, because ERC20UpgradeSafe is checking it before burn\\n        _aethContract.burn(staker, shares);\\n        _addIntoQueue(staker, recipient, amount);\\n        emit PendingUnstake(staker, recipient, amount, isAETH);\\n    }\\n\\n    /*\\n     * @dev queue is released by distributeRewards()\\n     */\\n    function _addIntoQueue(address staker, address recipient, uint256 amount) internal {\\n        require(\\n            amount != 0 && recipient != address(0),\\n            \\\"GlobalPool: zero input values\\\"\\n        );\\n        _pendingTotalUnstakes = _pendingTotalUnstakes.add(amount);\\n        _pendingUnstakeClaimers.push(recipient);\\n        _pendingUnstakeRequests.push(amount);\\n\\n        _pendingClaimerUnstakes[recipient] = _pendingClaimerUnstakes[recipient].add(amount);\\n    }\\n\\n    function getUnstakeRequestsOf(\\n        address claimer\\n    ) external view returns (uint256[] memory) {\\n        uint256 j;\\n        uint256 gap = _pendingUnstakeGap;\\n\\n        uint256[] memory unstakes = new uint256[](\\n            _pendingUnstakeClaimers.length - gap\\n        );\\n        for (; gap < _pendingUnstakeClaimers.length; gap++) {\\n            if (_pendingUnstakeClaimers[gap] == claimer) {\\n                unstakes[j] = _pendingUnstakeRequests[gap];\\n                ++j;\\n            }\\n        }\\n        uint256 removeCells = unstakes.length - j;\\n        if (removeCells > 0) {\\n            assembly {\\n                mstore(unstakes, j)\\n            }\\n        }\\n        return unstakes;\\n    }\\n\\n    function getPendingUnstakesOf(\\n        address claimer\\n    ) public view returns (uint256) {\\n        return _pendingClaimerUnstakes[claimer];\\n    }\\n\\n    function getTotalPendingUnstakes() public view returns (uint256) {\\n        return _pendingTotalUnstakes;\\n    }\\n\\n    /*\\n     * @notice take fee from rewards, pay unstakes, restake the rest of rewards\\n     * @dev control fee from backend\\n     * @param fee - ANKR's fee that should be deducted from rewards\\n     */\\n    function distributeRewards(uint256 feeAmount) external nonReentrant onlyOperator {\\n        require(\\n            _DISTRIBUTE_GAS_LIMIT > 0,\\n            \\\"GlobalPool: DISTRIBUTE_GAS_LIMIT is not set\\\"\\n        );\\n        _withdrawalPool.claim();\\n        uint256 poolBalance = address(this).balance.sub(_stashedForManualClaims);\\n        // withdraw ANKR fee to treasury\\n        require(poolBalance >= feeAmount, \\\"GlobalPool: not enough ETH to withdraw fee\\\");\\n        poolBalance = poolBalance.sub(feeAmount);\\n        require(_unsafeTransfer(treasury, feeAmount, false), \\\"GlobalPool: failed to send fee\\\");\\n\\n        address[] memory claimers = new address[](\\n            _pendingUnstakeClaimers.length - _pendingUnstakeGap\\n        );\\n        uint256[] memory amounts = new uint256[](\\n            _pendingUnstakeClaimers.length - _pendingUnstakeGap\\n        );\\n        uint256 j = 0;\\n        uint256 i = _pendingUnstakeGap;\\n\\n        while (\\n            i < _pendingUnstakeClaimers.length &&\\n            poolBalance > 0 &&\\n            gasleft() > _DISTRIBUTE_GAS_LIMIT\\n        ) {\\n            address claimer = _pendingUnstakeClaimers[i];\\n            uint256 toDistribute = _pendingUnstakeRequests[i];\\n            // empty unstake\\n            if (claimer == address(0) || toDistribute == 0) {\\n                i++;\\n                continue;\\n            }\\n\\n            if (poolBalance < toDistribute) {\\n                break;\\n            }\\n\\n            _pendingClaimerUnstakes[claimer] = _pendingClaimerUnstakes[claimer].sub(toDistribute);\\n            _pendingTotalUnstakes = _pendingTotalUnstakes.sub(toDistribute);\\n            poolBalance = poolBalance.sub(toDistribute);\\n            delete _pendingUnstakeClaimers[i];\\n            delete _pendingUnstakeRequests[i];\\n            i++;\\n\\n            if (isMarkedForManualClaim(claimer)) {\\n                _setForManualClaim(claimer, toDistribute);\\n                continue;\\n            }\\n\\n            bool success = _unsafeTransfer(claimer, toDistribute, true);\\n            if (!success) {\\n                _setForManualClaim(claimer, toDistribute);\\n                continue;\\n            }\\n\\n            claimers[j] = claimer;\\n            amounts[j] = toDistribute;\\n            j++;\\n        }\\n        _pendingUnstakeGap = i;\\n        /* decrease arrays */\\n        uint256 removeCells = claimers.length - j;\\n        if (removeCells > 0) {\\n            assembly {\\n                mstore(claimers, j)\\n            }\\n            assembly {\\n                mstore(amounts, j)\\n            }\\n        }\\n        emit RewardsDistributed(claimers, amounts);\\n    }\\n\\n    function _setForManualClaim(\\n        address claimer,\\n        uint256 amount\\n    ) internal {\\n        _stashedForManualClaims = _stashedForManualClaims.add(amount);\\n        _manualClaims[claimer] = _manualClaims[claimer].add(amount);\\n\\n        emit ManualClaimExpected(claimer, amount);\\n    }\\n\\n    function claimManually(address receiverAddress) external nonReentrant {\\n        require(\\n            receiverAddress != address(0),\\n            \\\"GlobalPool: zero address\\\"\\n        );\\n        uint256 amount = _manualClaims[receiverAddress];\\n        require(\\n            amount > 0,\\n            \\\"GlobalPool: not marked for manual claim\\\"\\n        );\\n        require(_stashedForManualClaims <= address(this).balance, \\\"GlobalPool: not enough balance\\\");\\n        _stashedForManualClaims = _stashedForManualClaims.sub(amount);\\n        delete _manualClaims[receiverAddress];\\n\\n        require(\\n            _unsafeTransfer(receiverAddress, amount, false),\\n            \\\"GlobalPool: failed to send rewards\\\"\\n        );\\n        emit RewardsClaimed(receiverAddress, msg.sender, amount);\\n    }\\n\\n    function isMarkedForManualClaim(address claimer)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return _manualClaims[claimer] != uint256(0);\\n    }\\n\\n    function getForManualClaimOf(address claimer)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return _manualClaims[claimer];\\n    }\\n\\n    function getStashedForManualClaims() public view returns (uint256) {\\n        return _stashedForManualClaims;\\n    }\\n\\n    function updateAETHContract(address payable aEthContract) external onlyOwner {\\n        address prevValue = address(_aethContract);\\n        _aethContract = IAETH(aEthContract);\\n        emit AETHContractChanged(prevValue, aEthContract);\\n    }\\n\\n    function updateFETHContract(address payable fEthContract) external onlyOwner {\\n        address prevValue = address(_fethContract);\\n        _fethContract = IFETH(fEthContract);\\n        emit FETHContractChanged(prevValue, fEthContract);\\n    }\\n\\n    function updateConfigContract(address configContract) external onlyOwner {\\n        address prevValue = address(_configContract);\\n        _configContract = IConfig(configContract);\\n        emit ConfigContractChanged(prevValue, configContract);\\n    }\\n\\n    function changeOperator(address operator) public onlyOwner {\\n        address prevValue = _operator;\\n        _operator = operator;\\n        emit OperatorChanged(prevValue, operator);\\n    }\\n\\n    function updateDistributeGasLimit(uint256 newValue) external onlyOwner {\\n        require(newValue > 0, \\\"GlobalPool: cannot be zero\\\");\\n        emit DistributeGasLimitChanged(_DISTRIBUTE_GAS_LIMIT, newValue);\\n        _DISTRIBUTE_GAS_LIMIT = newValue;\\n    }\\n\\n    function updateWithdrawalPool(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"GlobalPool: zero address\\\");\\n        emit WithdrawalPoolChanged(address(_withdrawalPool), newValue);\\n        _withdrawalPool = IWithdrawalPool(newValue);\\n    }\\n\\n    function updateTreasury(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"GlobalPool: zero address\\\");\\n        emit TreasuryChanged(address(treasury), newValue);\\n        treasury = newValue;\\n    }\\n\\n    function allowVault(address vault) external onlyOwner {\\n        require(vault != address(0), \\\"GlobalPool: zero address\\\");\\n        require(!_allowedVaults[vault], \\\"GlobalPool: already allowed\\\");\\n        _allowedVaults[vault] = true;\\n        emit VaultAllowed(vault);\\n    }\\n\\n    function disallowVault(address vault) external onlyOwner {\\n        require(vault != address(0), \\\"GlobalPool: zero address\\\");\\n        require(_allowedVaults[vault], \\\"GlobalPool: not allowed\\\");\\n        _allowedVaults[vault] = false;\\n        emit VaultDisallowed(vault);\\n    }\\n\\n    event ClaimableSharesUpdated(address[] accounts, uint256[] amounts);\\n\\n    function updateClaimableShares(address[] calldata accounts, uint256[] calldata amounts) external onlyOwner {\\n        require(accounts.length == amounts.length, \\\"GlobalPool: wrong length\\\");\\n        for (uint i; i < accounts.length; i++) {\\n            _claimableShares[accounts[i]] = amounts[i];\\n        }\\n        emit ClaimableSharesUpdated(accounts, amounts);\\n    }\\n\\n    function depositContractAddress() public view returns (address) {\\n        return _depositContract;\\n    }\\n\\n    /**\\n     * @dev deprecated\\n     */\\n    function crossChainBridge() public view returns (address) {\\n        return _crossChainBridge;\\n    }\\n\\n    function _unsafeTransfer (\\n        address receiverAddress,\\n        uint256 amount,\\n        bool limit\\n    ) internal virtual returns (bool) {\\n        address payable wallet = payable(receiverAddress);\\n        bool success;\\n        if (limit) {\\n            assembly {\\n                success := call(10000, wallet, amount, 0, 0, 0, 0)\\n            }\\n            return success;\\n        }\\n        (success, ) = wallet.call{value: amount}(\\\"\\\");\\n        return success;\\n    }\\n\\n    receive() external payable virtual {\\n        require(msg.sender == address(_withdrawalPool), \\\"sender not allowed\\\");\\n    }\\n\\n    function vote(address jr, uint256 proposalId, uint8 support, uint256 totalVotes, uint256 numVotes, bytes32[] calldata proof) external onlyOperator {\\n        IJokerRace(jr).castVote(proposalId, support, totalVotes, numVotes, proof);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/interfaces/IWithdrawalPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ninterface IWithdrawalPool {\\n\\n    function claim() external;\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/interfaces/IStaking.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ninterface IStaking {\\n    function compensateLoss(address provider, uint256 ethAmount) external returns (bool, uint256, uint256);\\n\\n    function freeze(address user, uint256 amount) external returns (bool);\\n\\n    function unfreeze(address user, uint256 amount) external returns (bool);\\n\\n    function frozenStakesOf(address staker) external view returns (uint256);\\n\\n    function lockedDepositsOf(address staker) external view returns (uint256);\\n\\n    function stakesOf(address staker) external view returns (uint256);\\n\\n    function frozenDepositsOf(address staker) external view returns (uint256);\\n\\n    function depositsOf(address staker) external view returns (uint256);\\n\\n    function deposit() external;\\n\\n    function deposit(address user) external;\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/interfaces/IJokerRace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.11;\\n\\ninterface IJokerRace {\\n\\n    function castVote(uint256 proposalId, uint8 support, uint256 totalVotes, uint256 numVotes, bytes32[] calldata proof) external;\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/interfaces/IGlobalPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ninterface IGlobalPool {\\n\\n    function restake() external payable;\\n\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/interfaces/IFETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFETH is IERC20 {\\n\\n    function mint(address account, uint256 shares, uint256 sent) external;\\n\\n    function updateReward(uint256 newReward) external returns (uint256);\\n\\n    function lockShares(address account, uint256 shares) external;\\n\\n    function lockSharesFor(address spender, address account, uint256 shares) external;\\n\\n    function unlockShares(uint256 shares) external;\\n\\n    function unlockSharesFor(address account, uint256 shares) external;\\n\\n    function sharesToBonds(uint256 amount) external view returns (uint256);\\n\\n    function bondsToShares(uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/interfaces/IConfig.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\ninterface IConfig {\\n    function getConfig(bytes32 config) external view returns (uint256);\\n\\n    function setConfig(bytes32 config, uint256 value) external;\\n}\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/interfaces/IAETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAETH is IERC20 {\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function updateMicroPoolContract(address microPoolContract) external;\\n\\n    function ratio() external view returns (uint256);\\n\\n    function mintFrozen(address account, uint256 amount) external;\\n\\n    function mint(address account, uint256 amount) external returns (uint256);\\n\\n    function mintApprovedTo(address account, address spender, uint256 amount) external;\\n\\n    function mintPool() payable external;\\n\\n    function fundPool(uint256 poolIndex, uint256 amount) external;\\n\\n    function sharesToBonds(uint256 amount) external view returns (uint256);\\n\\n    function bondsToShares(uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/Pausable.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\ncontract Pausable is  OwnableUpgradeSafe {\\n    mapping (bytes32 => bool) internal _paused;\\n\\n    modifier whenNotPaused(bytes32 action) {\\n        require(!_paused[action], \\\"This action currently paused\\\");\\n        _;\\n    }\\n\\n    function togglePause(bytes32 action) public onlyOwner {\\n        _paused[action] = !_paused[action];\\n    }\\n\\n    function isPaused(bytes32 action) public view returns(bool) {\\n        return _paused[action];\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/lib/Lockable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.11;\\n\\nabstract contract Lockable {\\n    mapping(address => bool) private _locks;\\n\\n    modifier unlocked(address addr) {\\n        require(!_locks[addr], \\\"Reentrancy protection\\\");\\n        _locks[addr] = true;\\n        _;\\n        _locks[addr] = false;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/SystemParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.6.11;\\n\\nimport \\\"./Governable.sol\\\";\\n\\ncontract SystemParameters is Governable {\\n\\n    // Minimum ankr staking amount to be abel to initialize a pool\\n    uint256 public PROVIDER_MINIMUM_STAKING;\\n\\n    // Minimum staking amount for pool participants\\n    uint256 public REQUESTER_MINIMUM_POOL_STAKING; // 0.1 ETH\\n\\n    // Ethereum staking amount\\n    uint256 public ETHEREUM_STAKING_AMOUNT;\\n\\n    uint256 public EXIT_BLOCKS;\\n\\n    function initialize() external initializer {\\n        PROVIDER_MINIMUM_STAKING = 100000 ether;\\n        REQUESTER_MINIMUM_POOL_STAKING = 500 finney;\\n        ETHEREUM_STAKING_AMOUNT = 4 ether;\\n        EXIT_BLOCKS = 24;\\n    }\\n}\"\r\n    },\r\n    \"/Users/petr/ankr/aws-smart-contracts/legacy/contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\ncontract Governable is Initializable {\\n    address public governor;\\n\\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\\n\\n    /**\\n     * @dev Contract initializer.\\n     * called once by the factory at time of deployment\\n     */\\n    function initialize(address governor_) virtual public initializer {\\n        governor = governor_;\\n        emit GovernorshipTransferred(address(0), governor);\\n    }\\n\\n    modifier governance() {\\n        require(msg.sender == governor);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current governor to relinquish control of the contract.\\n     * @notice Renouncing to governorship will leave the contract without an governor.\\n     * It will not be possible to call the functions with the `governance.js`\\n     * modifier anymore.\\n     */\\n    function renounceGovernorship() public governance {\\n        emit GovernorshipTransferred(governor, address(0));\\n        governor = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\\n     * @param newGovernor The address to transfer governorship to.\\n     */\\n    function transferGovernorship(address newGovernor) public governance {\\n        _transferGovernorship(newGovernor);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newGovernor.\\n     * @param newGovernor The address to transfer governorship to.\\n     */\\n    function _transferGovernorship(address newGovernor) internal {\\n        require(newGovernor != address(0));\\n        emit GovernorshipTransferred(governor, newGovernor);\\n        governor = newGovernor;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"AETHContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ClaimableSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ConfigContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"CrossChainBridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"DistributeGasLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"FETHContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ManualClaimExpected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAETH\",\"type\":\"bool\"}],\"name\":\"PendingUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingUnstakeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pool\",\"type\":\"bytes\"}],\"name\":\"PoolCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pool\",\"type\":\"bytes\"}],\"name\":\"PoolOnGoing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"legacy\",\"type\":\"uint256\"}],\"name\":\"ProviderLockedEthReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ankrAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherEquivalence\",\"type\":\"uint256\"}],\"name\":\"ProviderSlashedAnkr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProviderSlashedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProviderToppedUpAnkr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProviderToppedUpEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"PushedToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAETH\",\"type\":\"bool\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakePending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StakingContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"WithdrawalPoolChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_DISTRIBUTE_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"allowVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"}],\"name\":\"claimManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"claimableAETHFRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"claimableAETHRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"claimableFETHRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"disallowVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getForManualClaimOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getPendingUnstakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStashedForManualClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingUnstakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getUnstakeRequestsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAETH\",\"name\":\"aethContract\",\"type\":\"address\"},{\"internalType\":\"contract SystemParameters\",\"name\":\"parameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"isMarkedForManualClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"pushToBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"pushToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAndClaimAethB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAndClaimAethC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstakeAETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unstakeAETHFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeFETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unstakeFETHFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"aEthContract\",\"type\":\"address\"}],\"name\":\"updateAETHContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateClaimableShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"configContract\",\"type\":\"address\"}],\"name\":\"updateConfigContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDistributeGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"fEthContract\",\"type\":\"address\"}],\"name\":\"updateFETHContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateWithdrawalPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numVotes\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GlobalPool_R47", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}