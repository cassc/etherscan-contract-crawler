{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Exchange pool processor abstract contract.\\n * @dev Keeps an enumerable set of designated exchange addresses as well as a single primary pool address.\\n */\\ninterface IPoolManager {\\n    /// @notice Primary exchange pool address.\\n    function primaryPool() external view returns (address);\\n\\n    /**\\n     * @notice Check if the given address is pool address.\\n     * @param addr Address to check.\\n     * @return bool True if the given address is pool address.\\n     */\\n    function isPoolAddress(address addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITaxHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\ninterface ITaxHandler {\\n    /**\\n     * @notice Get number of tokens to pay as tax.\\n     * @param benefactor Address of the benefactor.\\n     * @param beneficiary Address of the beneficiary.\\n     * @param amount Number of tokens in the transfer.\\n     * @return taxAmount Number of tokens for tax.\\n     */\\n    function getTax(address benefactor, address beneficiary, uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/WarpedTaxHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {ITaxHandler} from \\\"./interfaces/ITaxHandler.sol\\\";\\nimport {IPoolManager} from \\\"./interfaces/IPoolManager.sol\\\";\\n\\ncontract WarpedTaxHandler is ITaxHandler, Ownable {\\n    /// @notice limit number of NFT contracts\\n    uint8 public constant NFT_CONTRACTS_LIMIT = 10;\\n    /// @notice limit number of tax rate points\\n    uint8 public constant TAX_RATES_LIMIT = 10;\\n\\n    /// @notice NFTs to be used to determine user tax level.\\n    IERC721[] public nftContracts;\\n    /// @notice Bits representing levels of each NFTs: 1,2,4,8\\n    mapping(IERC721 => uint8) public nftLevels;\\n\\n    struct TaxRatePoint {\\n        uint256 threshold;\\n        uint256 rate;\\n    }\\n\\n    TaxRatePoint[] public taxRates;\\n    uint256 public basisTaxRate;\\n    uint256 public constant maxTaxRate = 400;\\n    bool public taxDisabled;\\n    IPoolManager public poolManager;\\n\\n    /// @notice Emitted when tax rates are updated.\\n    event TaxRatesUpdated(uint256[] thesholds, uint256[] rates, uint256 basisTaxRate);\\n\\n    /// @notice Emitted when nft contracts and levels are added.\\n    event NFTsAdded(address[] contracts, uint8[] levels);\\n\\n    /// @notice Emitted when nft contracts are removed.\\n    event NFTsRemoved(address[] contracts);\\n\\n    /// @notice Emitted when tax is paused.\\n    event TaxPaused();\\n\\n    /// @notice Emitted when tax is resumed.\\n    event TaxResumed();\\n\\n    /// @notice Constructor of tax handler contract\\n    /// @param _poolManager exchange pool manager address\\n    /// @param _nftContracts array of addresses of NFT contracts\\n    /// @param _levels array of levels of NFT contracts\\n    constructor(IPoolManager _poolManager, address[] memory _nftContracts, uint8[] memory _levels) {\\n        poolManager = _poolManager;\\n\\n        _addNFTs(_nftContracts, _levels);\\n        // init default tax rates\\n        basisTaxRate = 400;\\n        taxRates.push(TaxRatePoint(7, 100));\\n        taxRates.push(TaxRatePoint(5, 200));\\n        taxRates.push(TaxRatePoint(1, 300));\\n    }\\n\\n    /**\\n     * @notice Reset tax rate points.\\n     * @param thresholds of user level.\\n     * @param rates of tax per each threshold.\\n     * @param basisRate basis tax rate.\\n     *\\n     * Requirements:\\n     *\\n     * - values of `thresholds` must be placed in descending order.\\n     */\\n    function setTaxRates(uint256[] memory thresholds, uint256[] memory rates, uint256 basisRate) external onlyOwner {\\n        require(thresholds.length == rates.length, \\\"Invalid level points\\\");\\n        require(thresholds.length <= TAX_RATES_LIMIT, \\\"Tax rates limit exceeded\\\");\\n        require(basisRate > 0, \\\"Invalid base rate\\\");\\n        require(basisRate <= maxTaxRate, \\\"Base rate must be <= than max\\\");\\n\\n        delete taxRates;\\n        for (uint256 i = 0; i < thresholds.length; i++) {\\n            require(rates[i] <= maxTaxRate, \\\"Rate must be less than max rate\\\");\\n            if (i > 0) {\\n                require(thresholds[i] < thresholds[i - 1], \\\"Thresholds not descending order\\\");\\n            }\\n            taxRates.push(TaxRatePoint(thresholds[i], rates[i]));\\n        }\\n        basisTaxRate = basisRate;\\n\\n        emit TaxRatesUpdated(thresholds, rates, basisRate);\\n    }\\n\\n    /**\\n     * @notice Add addresses and their levels of NFTs(only ERC721).\\n     * @dev For future NFT launch, allow to add new NFT addresses and levels.\\n     * @param contracts NFT contract addresses.\\n     * @param levels NFT contract levels to be used for user level calculation.\\n     */\\n    function addNFTs(address[] memory contracts, uint8[] memory levels) external onlyOwner {\\n        require(contracts.length > 0 && levels.length > 0, \\\"Invalid parameters\\\");\\n        _addNFTs(contracts, levels);\\n    }\\n\\n    /**\\n     * @notice Remove nft level by address.\\n     * @param contracts NFT contract addresses.\\n     */\\n    function removeNFTs(address[] memory contracts) external onlyOwner {\\n        require(contracts.length > 0, \\\"Invalid parameters\\\");\\n        for (uint8 i = 0; i < contracts.length; i++) {\\n            for (uint8 j = 0; j < nftContracts.length; j++) {\\n                if (address(nftContracts[j]) == contracts[i]) {\\n                    // safely remove NFT contract from array\\n                    if (j < nftContracts.length - 1) {\\n                        nftContracts[j] = nftContracts[nftContracts.length - 1];\\n                    }\\n                    nftContracts.pop();\\n                    break;\\n                }\\n            }\\n            nftLevels[IERC721(contracts[i])] = 0;\\n        }\\n        emit NFTsRemoved(contracts);\\n    }\\n\\n    /**\\n     * @notice Set no tax for special period\\n     */\\n    function pauseTax() external onlyOwner {\\n        require(!taxDisabled, \\\"Already paused\\\");\\n        taxDisabled = true;\\n        emit TaxPaused();\\n    }\\n\\n    /**\\n     * @notice Resume tax handling\\n     */\\n    function resumeTax() external onlyOwner {\\n        require(taxDisabled, \\\"Not paused\\\");\\n        taxDisabled = false;\\n        emit TaxResumed();\\n    }\\n\\n    /**\\n     * @notice Get number of tokens to pay as tax.\\n     * @dev There is no easy way to differentiate between a user swapping\\n     * tokens and a user adding or removing liquidity to the pool. In both\\n     * cases tokens are transferred to or from the pool. This is an unfortunate\\n     * case where users have to accept being taxed on liquidity additions and\\n     * removal. To get around this issue a separate liquidity addition contract\\n     * can be deployed. This contract could be exempt from taxes if its\\n     * functionality is verified to only add and remove liquidity.\\n     * @param benefactor Address of the benefactor.\\n     * @param beneficiary Address of the beneficiary.\\n     * @param amount Number of tokens in the transfer.\\n     * @return taxAmount Number of tokens for tax\\n     */\\n    function getTax(address benefactor, address beneficiary, uint256 amount) external view override returns (uint256) {\\n        if (taxDisabled) {\\n            return 0;\\n        }\\n\\n        // Transactions between regular users (this includes contracts) aren't taxed.\\n        if (!poolManager.isPoolAddress(benefactor) && !poolManager.isPoolAddress(beneficiary)) {\\n            return 0;\\n        }\\n\\n        // Transactions between pools aren't taxed.\\n        if (poolManager.isPoolAddress(benefactor) && poolManager.isPoolAddress(beneficiary)) {\\n            return 0;\\n        }\\n\\n        uint256 taxRate = 0;\\n        // If the benefactor is found in the set of exchange pools, then it's a buy transactions, otherwise a sell\\n        // transactions, because the other use cases have already been checked above.\\n        if (poolManager.isPoolAddress(benefactor)) {\\n            taxRate = _getTaxBasisPoints(beneficiary);\\n        } else {\\n            taxRate = _getTaxBasisPoints(benefactor);\\n        }\\n\\n        return (amount * taxRate) / 10000;\\n    }\\n\\n    /**\\n     * @notice Get percent of tax to pay for the given user.\\n     * @dev Basis tax percent will be varied based on user's ownership of NFTs\\n     * in the STARL metaverse. There are 3 user levels and user's level will be\\n     * determined by bit-or of nft levels he owned.\\n     * SATE: 8(4th bit), LM/LMvX: 4(3rd bit), PAL: 2(2nd bit), PN: 1(first bit)\\n     * bit-or >= 7 : 1%\\n     * bit-or >= 5 : 2%\\n     * bit-or >= 1 : 3%\\n     * @param user Address of user(buyer/seller address).\\n     * @return Number Basis tax percent in 2 decimal.\\n     */\\n    function _getTaxBasisPoints(address user) internal view returns (uint256) {\\n        uint256 userLevel = 0;\\n        // Max number of nft contracts is 10 so gas for the loop of nft contracts is less than about 141k.\\n        // Max number of tax rates is 10 so gas for the loop of tax rates is less than about 100k.\\n        // Total gas for both loops is less than about 241k so it will be not over the block gas limit.\\n        for (uint256 i = 0; i < nftContracts.length; i++) {\\n            IERC721 nft = nftContracts[i];\\n            if (nft.balanceOf(user) > 0) {\\n                userLevel = userLevel | nftLevels[nftContracts[i]];\\n            }\\n        }\\n        for (uint256 i = 0; i < taxRates.length; i++) {\\n            if (userLevel >= taxRates[i].threshold) {\\n                return taxRates[i].rate;\\n            }\\n        }\\n        return basisTaxRate;\\n    }\\n\\n    function _addNFTs(address[] memory contracts, uint8[] memory levels) internal {\\n        require(contracts.length == levels.length, \\\"Invalid parameters\\\");\\n        require(contracts.length + nftContracts.length <= NFT_CONTRACTS_LIMIT, \\\"No. of NFT contracts over limit\\\");\\n\\n        for (uint8 i = 0; i < contracts.length; i++) {\\n            require(contracts[i] != address(0), \\\"contract address is zero address\\\");\\n            require(IERC165(contracts[i]).supportsInterface(type(IERC721).interfaceId), \\\"IERC721 not implemented\\\");\\n            // nftLevels for existing contract is always bigger than zero.\\n            // So checking this value is enough to check the uniqueness of adding NFT contract address.\\n            require(nftLevels[IERC721(contracts[i])] == 0, \\\"Duplicate NFT contract\\\");\\n            require(levels[i] > 0, \\\"Invalid NFT level\\\");\\n\\n            nftContracts.push(IERC721(contracts[i]));\\n            nftLevels[IERC721(contracts[i])] = levels[i];\\n        }\\n\\n        emit NFTsAdded(contracts, levels);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_nftContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_levels\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"levels\",\"type\":\"uint8[]\"}],\"name\":\"NFTsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"NFTsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TaxPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"thesholds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisTaxRate\",\"type\":\"uint256\"}],\"name\":\"TaxRatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TaxResumed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFT_CONTRACTS_LIMIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_RATES_LIMIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"levels\",\"type\":\"uint8[]\"}],\"name\":\"addNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basisTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContracts\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftLevels\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"removeNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"thresholds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"basisRate\",\"type\":\"uint256\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taxRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WarpedTaxHandler", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000002747f8ef90dfa11e33fbc14a246bbd108ca6811800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000500000000000000000000000048470fb3fe7108b9e15b2bf7aa15b7adf774d7210000000000000000000000001b2f625e11c2cb949b465f343fe866d7f30f204a0000000000000000000000003634847577a40af0a0f592fdbcc1903720112cf600000000000000000000000009243c5fc239a879825e816cf062b7c337ea541200000000000000000000000027cc171b16fdd2224e1f93ed7dccfcc6790ca4bf000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}