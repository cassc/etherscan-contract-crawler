{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IMarket {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when fToken or xToken is minted.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param fTokenOut The amount of fToken minted.\\n  /// @param xTokenOut The amount of xToken minted.\\n  /// @param mintFee The amount of mint fee charged.\\n  event Mint(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 baseTokenIn,\\n    uint256 fTokenOut,\\n    uint256 xTokenOut,\\n    uint256 mintFee\\n  );\\n\\n  /// @notice Emitted when someone redeem base token with fToken or xToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param fTokenBurned The amount of fToken burned.\\n  /// @param xTokenBurned The amount of xToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param redeemFee The amount of redeem fee charged.\\n  event Redeem(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 fTokenBurned,\\n    uint256 xTokenBurned,\\n    uint256 baseTokenOut,\\n    uint256 redeemFee\\n  );\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint both fToken and xToken with some base token.\\n  /// @param baseIn The amount of base token supplied.\\n  /// @param recipient The address of receiver for fToken and xToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function mint(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 fTokenMinted, uint256 xTokenMinted);\\n\\n  /// @notice Mint some fToken with some base token.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for fToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  function mintFToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted\\n  ) external returns (uint256 fTokenMinted);\\n\\n  /// @notice Mint some xToken with some base token.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for xToken.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function mintXToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 xTokenMinted);\\n\\n  /// @notice Redeem base token with fToken and xToken.\\n  /// @param fTokenIn the amount of fToken to redeem, use `uint256(-1)` to redeem all fToken.\\n  /// @param xTokenIn the amount of xToken to redeem, use `uint256(-1)` to redeem all xToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of base token should be received.\\n  /// @return baseOut The amount of base token should be received.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IStrategy {\\n\\n  /// @notice Mint both fToken and xToken with all Lido rewards by staking vault contract.\\n  /// @return fTokenMinted The amount of fToken should be send to staking vault contract.\\n  /// @return xTokenMinted The amount of xToken should be send to staking vault contract.\\n  function mintByStaking() external returns (uint256 fTokenMinted, uint256 xTokenMinted);\\n\\n  /// @notice Mint both fToken and xToken with some Lido rewards by staking vault contract.\\n  /// @param baseIn The amount of base token supplied.\\n  /// @return fTokenMinted The amount of fToken should be send to staking vault contract.\\n  /// @return xTokenMinted The amount of xToken should be send to staking vault contract.\\n  function mintByStaking(uint256 baseIn) external returns (uint256 fTokenMinted, uint256 xTokenMinted);\\n\\n  /// @notice Mint both fToken and xToken with all mint/redeem fee by revenue vault contract.\\n  /// @return fTokenMinted The amount of fToken should be send to revenue vault contract.\\n  /// @return xTokenMinted The amount of xToken should be send to revenue vault contract.\\n  function mintByRevenue() external returns (uint256 fTokenMinted, uint256 xTokenMinted);\\n\\n  /// @notice Mint both fToken and xToken with some mint/redeem fee by revenue vault contract.\\n  /// @param baseIn The amount of base token supplied.\\n  /// @return fTokenMinted The amount of fToken should be send to revenue vault contract.\\n  /// @return xTokenMinted The amount of xToken should be send to revenue vault contract.\\n  function mintByRevenue(uint256 baseIn) external returns (uint256 fTokenMinted, uint256 xTokenMinted);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ITreasury {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the net asset value is updated.\\n  /// @param price The new price of base token.\\n  /// @param fNav The new net asset value of fToken.\\n  event ProtocolSettle(uint256 price, uint256 fNav);\\n\\n  /*********\\n   * Enums *\\n   *********/\\n\\n  enum MintOption {\\n    Both,\\n    FToken,\\n    XToken\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of market contract.\\n  function market() external view returns (address);\\n\\n  /// @notice Return the address of base token.\\n  function baseToken() external view returns (address);\\n\\n  /// @notice Return the address fractional base token.\\n  function fToken() external view returns (address);\\n\\n  /// @notice Return the address leveraged base token.\\n  function xToken() external view returns (address);\\n\\n  /// @notice Return the address of strategy contract.\\n  function strategy() external view returns (address);\\n\\n  /// @notice The last updated permissioned base token price.\\n  function lastPermissionedPrice() external view returns (uint256);\\n\\n  /// @notice Return the total amount of base token deposited.\\n  function totalBaseToken() external view returns (uint256);\\n\\n  /// @notice Return the total amount of base token managed by strategy.\\n  function strategyUnderlying() external view returns (uint256);\\n\\n  /// @notice Return the current collateral ratio of fToken, multipled by 1e18.\\n  function collateralRatio() external view returns (uint256);\\n\\n  /// @notice Return current nav for base token, fToken and xToken.\\n  /// @return baseNav The nav for base token.\\n  /// @return fNav The nav for fToken.\\n  /// @return xNav The nav for xToken.\\n  function getCurrentNav()\\n    external\\n    view\\n    returns (\\n      uint256 baseNav,\\n      uint256 fNav,\\n      uint256 xNav\\n    );\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxFTokenMintable The amount of fToken can be minted.\\n  function maxMintableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxFTokenMintable);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxXTokenMintable);\\n\\n  /// @notice Compute the amount of fToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of base token redeemed.\\n  /// @return maxFTokenRedeemable The amount of fToken needed.\\n  function maxRedeemableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxFTokenRedeemable);\\n\\n  /// @notice Compute the amount of xToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of base token redeemed.\\n  /// @return maxXTokenRedeemable The amount of xToken needed.\\n  function maxRedeemableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxXTokenRedeemable);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint fToken and xToken with some base token.\\n  /// @param baseIn The amount of base token deposited.\\n  /// @param recipient The address of receiver.\\n  /// @param option The mint option, xToken or fToken or both.\\n  /// @return fTokenOut The amount of fToken minted.\\n  /// @return xTokenOut The amount of xToken minted.\\n  function mint(\\n    uint256 baseIn,\\n    address recipient,\\n    MintOption option\\n  ) external returns (uint256 fTokenOut, uint256 xTokenOut);\\n\\n  /// @notice Redeem fToken and xToken to base tokne.\\n  /// @param fTokenIn The amount of fToken to redeem.\\n  /// @param xTokenIn The amount of xToken to redeem.\\n  /// @param owner The owner of the fToken or xToken.\\n  /// @param baseOut The amount of base token redeemed.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address owner\\n  ) external returns (uint256 baseOut);\\n\\n\\n  /// @notice Settle the nav of base token, fToken and xToken.\\n  function protocolSettle() external;\\n\\n  /// @notice Transfer some base token to strategy contract.\\n  /// @param amount The amount of token to transfer.\\n  function transferToStrategy(uint256 amount) external;\\n\\n  /// @notice Notify base token profit from strategy contract.\\n  /// @param amount The amount of base token.\\n  function notifyStrategyProfit(uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/Strategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { ITreasury } from \\\"./interfaces/ITreasury.sol\\\";\\nimport { IMarket } from \\\"./interfaces/IMarket.sol\\\";\\nimport { IStrategy } from \\\"./interfaces/IStrategy.sol\\\";\\n\\ncontract Strategy is OwnableUpgradeable, IStrategy {\\n  using SafeMathUpgradeable for uint256;\\n\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the allocation point is changed\\n  /// @param earn the new point of earn\\n  /// @param platform the new point of platform\\n  /// @param insuranceFund the new point of insurance fund\\n  event UpdateAllocPoint(\\n    uint256 earn,\\n    uint256 platform,\\n    uint256 insuranceFund\\n  );\\n\\n  /// @notice Emitted when the staking contract is changed.\\n  /// @param staking The address of new staking.\\n  event UpdateStaking(address staking);\\n\\n  /// @notice Emitted when the revenue contract is changed.\\n  /// @param revenue The address of new revenue.\\n  event UpdateRevenue(address revenue);\\n\\n  /// @notice Emitted when the treasury contract is changed.\\n  /// @param treasury The address of new treasury.\\n  event UpdateTreasury(address treasury);\\n\\n  /// @notice Emitted when the platform contract is changed.\\n  /// @param platform The address of new platform.\\n  event UpdatePlatform(address platform);\\n\\n  /// @notice Emitted when the insurance fund contract is changed.\\n  /// @param insuranceFund The address of new insurance fund.\\n  event UpdateInsuranceFund(address insuranceFund);\\n\\n  /// @notice Emitted when emergency withdraw all assets.\\n  /// @param treasuryAmount The amount of treasury asset.\\n  /// @param feeAmount The amount of mint/redeem fee.\\n  event EmergencyWithdraw(uint256 treasuryAmount, uint256 feeAmount);\\n\\n  /// @notice Emitted when strategy mint fToken/xToken.\\n  /// @param recipient The address of receiver for fToken and xToken.\\n  /// @param baseIn The amount of base token supplied.\\n  /// @param fTokenMinted The amount of fToken should be minted.\\n  /// @param xTokenMinted The amount of xToken should be minted.\\n  event StrategyMint(\\n    address recipient,\\n    uint256 baseIn,\\n    uint256 fTokenMinted,\\n    uint256 xTokenMinted\\n  );\\n  \\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  struct AllocPoint {\\n    uint256 earn;\\n    uint256 platform;\\n    uint256 insuranceFund;\\n  }\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The address of treasury contract.\\n  address public treasury;\\n\\n  /// @notice The address of staking contract.\\n  address public staking;\\n\\n  /// @notice The address of revenue contract.\\n  address public revenue;\\n  \\n  /// @notice The address of platform contract.\\n  address public platform;\\n\\n  /// @notice The address of insurance fund contract.\\n  address public insuranceFund;\\n  \\n  /// @notice The point of asset allocation.\\n  AllocPoint public allocPoint;\\n\\n  /************\\n   * Modifier *\\n   ************/\\n\\n  modifier onlyStaking() {\\n    require(staking == msg.sender, \\\"Only staking\\\");\\n    _;\\n  }\\n\\n  modifier onlyRevenue() {\\n    require(revenue == msg.sender, \\\"Only revenue\\\");\\n    _;\\n  }\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  function initialize(\\n    address _treasury,\\n    address _staking,\\n    address _revenue,\\n    address _platform,\\n    address _insuranceFund\\n  ) external initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n\\n    treasury = _treasury;\\n    staking = _staking;\\n    revenue = _revenue;\\n    platform = _platform;\\n    insuranceFund = _insuranceFund;\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  function totalAllocPoint() public view returns (uint256) {\\n    return allocPoint.earn + allocPoint.platform + allocPoint.insuranceFund;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n  \\n  /// @inheritdoc IStrategy\\n  function mintByStaking() external override onlyStaking returns (uint256 _fTokenMinted, uint256 _xTokenMinted) {\\n    ITreasury _treasury = ITreasury(treasury);\\n    IERC20Upgradeable baseToken = IERC20Upgradeable(_treasury.baseToken());\\n    uint256 balance = baseToken.balanceOf(treasury);\\n    uint256 total = _treasury.totalBaseToken();\\n    uint256 baseIn = 0;\\n\\n    if (balance > total) {\\n      baseIn = balance.sub(total);\\n    }\\n\\n    _treasury.transferToStrategy(baseIn);\\n\\n    return _allocate(baseIn, staking);\\n  }\\n\\n  /// @inheritdoc IStrategy\\n  function mintByStaking(uint256 _baseIn) external override onlyStaking returns (uint256 _fTokenMinted, uint256 _xTokenMinted) {\\n    ITreasury _treasury = ITreasury(treasury);\\n    IERC20Upgradeable baseToken = IERC20Upgradeable(_treasury.baseToken());\\n    uint256 balance = baseToken.balanceOf(treasury);\\n    uint256 total = _treasury.totalBaseToken();\\n    require(balance.sub(total) > _baseIn, \\\"baseIn exceeds balance\\\");\\n\\n    _treasury.transferToStrategy(_baseIn);\\n\\n    return _allocate(_baseIn, staking);\\n  }\\n\\n  /// @inheritdoc IStrategy\\n  function mintByRevenue() external override onlyRevenue returns (uint256 _fTokenMinted, uint256 _xTokenMinted) {\\n    ITreasury _treasury = ITreasury(treasury);\\n    IERC20Upgradeable baseToken = IERC20Upgradeable(_treasury.baseToken());\\n    uint256 balance = baseToken.balanceOf(address(this));\\n\\n    return _allocate(balance, revenue);\\n  }\\n\\n  /// @inheritdoc IStrategy\\n  function mintByRevenue(uint256 _baseIn) external override onlyRevenue returns (uint256 _fTokenMinted, uint256 _xTokenMinted) {\\n    ITreasury _treasury = ITreasury(treasury);\\n    IERC20Upgradeable baseToken = IERC20Upgradeable(_treasury.baseToken());\\n    uint256 balance = baseToken.balanceOf(address(this));\\n    require(balance > _baseIn, \\\"baseIn exceeds balance\\\");\\n\\n    return _allocate(_baseIn, revenue);\\n  }\\n\\n  /*******************************\\n   * Public Restricted Functions *\\n   *******************************/\\n\\n  /// @notice Update the points for allocation.\\n  /// @param _earn  The point of earn.\\n  /// @param _platform The new point of platform.\\n  /// @param _insuranceFund The new point of insurance fund.\\n  function updateAllocPoint(uint256 _earn, uint256 _platform, uint256 _insuranceFund) external onlyOwner {\\n    allocPoint = AllocPoint(_earn, _platform, _insuranceFund);\\n    emit UpdateAllocPoint(_earn, _platform, _insuranceFund);\\n  }\\n\\n  /// @notice Change address of staking contract.\\n  /// @param _staking The new address of staking contract.\\n  function updateStaking(address _staking) external onlyOwner {\\n    staking = _staking;\\n    emit UpdateStaking(staking);\\n  }\\n\\n  /// @notice Change address of revenue contract.\\n  /// @param _revenue The new address of revenue contract.\\n  function updateRevenue(address _revenue) external onlyOwner {\\n    revenue = _revenue;\\n    emit UpdateRevenue(revenue);\\n  }\\n\\n  /// @notice Change address of treasury contract.\\n  /// @param _treasury The new address of treasury contract.\\n  function updateTreasury(address _treasury) external onlyOwner {\\n    treasury = _treasury;\\n    emit UpdateTreasury(treasury);\\n  }\\n\\n  /// @notice Change address of platform contract.\\n  /// @param _platform The new address of platform contract.\\n  function updatePlatform(address _platform) external onlyOwner {\\n    platform = _platform;\\n    emit UpdatePlatform(platform);\\n  }\\n\\n  /// @notice Change address of insurance fund contract.\\n  /// @param _insuranceFund The new address of insurance fund contract.\\n  function updateInsuranceFund(address _insuranceFund) external onlyOwner {\\n    insuranceFund = _insuranceFund;\\n    emit UpdateInsuranceFund(insuranceFund);\\n  }\\n\\n  /// @notice Emergency withdraw all assets on the contract.\\n  /// @return _treasuryAmount The amount of treasury asset.\\n  /// @return _feeAmount The amount of mint/redeem fee.\\n  function emergencyWithdraw() external onlyOwner returns (uint256 _treasuryAmount, uint256 _feeAmount) {\\n    address owner = owner();\\n    ITreasury _treasury = ITreasury(treasury);\\n    IERC20Upgradeable baseToken = IERC20Upgradeable(_treasury.baseToken());\\n    _treasuryAmount = baseToken.balanceOf(treasury);\\n    _feeAmount = baseToken.balanceOf(address(this));\\n\\n    if (_treasuryAmount > 0) {\\n      ITreasury(treasury).transferToStrategy(_treasuryAmount);\\n      baseToken.transfer(owner, _treasuryAmount);\\n    }\\n    if (_feeAmount > 0) baseToken.transfer(owner, _feeAmount);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Allocate asset.\\n  /// @param _baseIn The amount of base token supplied.\\n  /// @param _recipient The address of receiver for fToken and xToken.\\n  /// @return _fTokenMinted The amount of fToken expected.\\n  /// @return _xTokenMinted The amount of xToken expected.\\n  function _allocate(uint256 _baseIn, address _recipient) private returns (uint256 _fTokenMinted, uint256 _xTokenMinted) {\\n    (uint256 earnAmount, uint256 platformAmount, uint256 insuranceFundAmount) = _computeAllocAmount(_baseIn);\\n    ITreasury _treasury = ITreasury(treasury);\\n    IERC20Upgradeable baseToken = IERC20Upgradeable(_treasury.baseToken());\\n\\n    if (platformAmount > 0) baseToken.transfer(platform, platformAmount);\\n    if (insuranceFundAmount > 0) baseToken.transfer(insuranceFund, insuranceFundAmount);\\n    if (earnAmount > 0) {\\n      IMarket market = IMarket(_treasury.market());\\n      (uint256 minFTokenMinted, uint256 minXTokenMinted) = _computeMinTokenMinted(earnAmount);\\n\\n      baseToken.approve(address(market), earnAmount);\\n      (_fTokenMinted, _xTokenMinted) = market.mint(earnAmount, _recipient, minFTokenMinted, minXTokenMinted);\\n    } else {\\n      _fTokenMinted = 0;\\n      _xTokenMinted = 0;\\n    }\\n\\n    emit StrategyMint(_recipient, _baseIn, _fTokenMinted, _xTokenMinted);\\n  }\\n\\n  /// @dev Compute all allocation amounts.\\n  /// @param _totalAmount The amount of supplied.\\n  /// @return _earnAmount The amount of earn.\\n  /// @return _platformAmount The amount of platform.\\n  /// @return _insuranceFundAmount The amount of insurance fund.\\n  function _computeAllocAmount(uint256 _totalAmount) private view returns (uint256 _earnAmount, uint256 _platformAmount, uint256 _insuranceFundAmount) {\\n    uint256 _totalAllocPoint = totalAllocPoint();\\n\\n    _earnAmount = _totalAmount.mul(allocPoint.earn).div(_totalAllocPoint);\\n    _platformAmount = _totalAmount.mul(allocPoint.platform).div(_totalAllocPoint);\\n    _insuranceFundAmount = _totalAmount.sub(_earnAmount).sub(_platformAmount);\\n  }\\n\\n  /// @notice Compute mintable fToken and xToken according to current collateral ratio.\\n  /// @param _baseIn The amount of base token supplied.\\n  /// @return _minFTokenMinted The amount of fToken expected.\\n  /// @return _minXTokenMinted The amount of xToken expected.\\n  function _computeMinTokenMinted(uint256 _baseIn) private view returns (uint256 _minFTokenMinted, uint256 _minXTokenMinted) {\\n    ITreasury _treasury = ITreasury(treasury);\\n    uint256 baseSupply = _treasury.totalBaseToken();\\n    uint256 fSupply = IERC20Upgradeable(_treasury.fToken()).totalSupply();\\n    uint256 xSupply = IERC20Upgradeable(_treasury.xToken()).totalSupply();\\n\\n    _minFTokenMinted = fSupply.mul(_baseIn).div(baseSupply);\\n    _minXTokenMinted = xSupply.mul(_baseIn).div(baseSupply);\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fTokenMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokenMinted\",\"type\":\"uint256\"}],\"name\":\"StrategyMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platform\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceFund\",\"type\":\"uint256\"}],\"name\":\"UpdateAllocPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceFund\",\"type\":\"address\"}],\"name\":\"UpdateInsuranceFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"}],\"name\":\"UpdatePlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revenue\",\"type\":\"address\"}],\"name\":\"UpdateRevenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"UpdateStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"UpdateTreasury\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"earn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceFund\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insuranceFund\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintByRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"}],\"name\":\"mintByRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintByStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"}],\"name\":\"mintByStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platform\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceFund\",\"type\":\"uint256\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insuranceFund\",\"type\":\"address\"}],\"name\":\"updateInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenue\",\"type\":\"address\"}],\"name\":\"updateRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"updateStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Strategy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}