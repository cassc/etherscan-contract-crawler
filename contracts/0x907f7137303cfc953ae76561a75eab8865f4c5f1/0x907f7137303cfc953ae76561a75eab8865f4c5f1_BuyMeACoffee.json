{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BuyMeACoffee.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\n// contracts/BuyMeACoffee.sol\\npragma solidity ^0.8.0;\\n\\ncontract BuyMeACoffee {\\n    // Event to emit when a Memo is created.\\n    event NewMemo(\\n        address indexed from,\\n        uint256 timestamp,\\n        string name,\\n        string message\\n    );\\n    \\n    // Memo struct.\\n    struct Memo {\\n        address from;\\n        uint256 timestamp;\\n        string name;\\n        string message;\\n    }\\n    \\n    address payable owner;\\n\\n    Memo[] memos;\\n\\n    constructor() {\\n        owner = payable(msg.sender);\\n    }\\n\\n    /**\\n     * @dev fetches all stored memos\\n     */\\n    function getMemos() public view returns (Memo[] memory) {\\n        return memos;\\n    }\\n\\n    /**\\n     * @dev buy a coffee for owner (sends an ETH tip and leaves a memo)\\n     * @param _name name of the coffee purchaser\\n     * @param _message a nice message from the purchaser\\n     */\\n    function buyCoffee(string memory _name, string memory _message) public payable {\\n        require(msg.value > 0, \\\"can't buy coffee for free!\\\");\\n\\n        memos.push(Memo(\\n            msg.sender,\\n            block.timestamp,\\n            _name,\\n            _message\\n        ));\\n\\n        emit NewMemo(\\n            msg.sender,\\n            block.timestamp,\\n            _name,\\n            _message\\n        );\\n    }\\n\\n    /**\\n     * @dev send the entire balance stored in this contract to the owner\\n     */\\n    function withdrawTips() public {\\n        require(owner.send(address(this).balance));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"NewMemo\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"buyCoffee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMemos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct BuyMeACoffee.Memo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BuyMeACoffee", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}