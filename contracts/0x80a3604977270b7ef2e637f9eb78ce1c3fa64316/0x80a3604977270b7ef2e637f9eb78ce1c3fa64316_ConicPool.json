{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ConicPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"BaseConicPool.sol\\\";\\n\\ncontract ConicPool is BaseConicPool {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using ScaledMath for uint256;\\n\\n    uint256 internal constant _DEPEG_UNDERLYING_MULTIPLIER = 2;\\n\\n    constructor(\\n        address _underlying,\\n        IRewardManager _rewardManager,\\n        address _controller,\\n        string memory _lpTokenName,\\n        string memory _symbol,\\n        address _cvx,\\n        address _crv\\n    ) BaseConicPool(_underlying, _rewardManager, _controller, _lpTokenName, _symbol, _cvx, _crv) {}\\n\\n    function _updatePriceCache() internal override {\\n        address[] memory underlyings = getAllUnderlyingCoins();\\n        IOracle priceOracle_ = controller.priceOracle();\\n        for (uint256 i; i < underlyings.length; i++) {\\n            address coin = underlyings[i];\\n            _cachedPrices[coin] = priceOracle_.getUSDPrice(coin);\\n        }\\n    }\\n\\n    function _isAssetDepegged(address asset_) internal view override returns (bool) {\\n        uint256 depegThreshold_ = depegThreshold;\\n        if (asset_ == address(underlying)) depegThreshold_ *= _DEPEG_UNDERLYING_MULTIPLIER; // Threshold is higher for underlying\\n        uint256 cachedPrice_ = _cachedPrices[asset_];\\n        uint256 currentPrice_ = controller.priceOracle().getUSDPrice(asset_);\\n        uint256 priceDiff_ = cachedPrice_.absSub(currentPrice_);\\n        uint256 priceDiffPercent_ = priceDiff_.divDown(cachedPrice_);\\n        return priceDiffPercent_ > depegThreshold_;\\n    }\\n}\\n\"\r\n    },\r\n    \"BaseConicPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"ERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"EnumerableSet.sol\\\";\\nimport \\\"EnumerableMap.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"ERC165Checker.sol\\\";\\n\\nimport \\\"IConicPool.sol\\\";\\nimport \\\"IRewardManager.sol\\\";\\nimport \\\"IWithdrawalProcessor.sol\\\";\\nimport \\\"ICurveRegistryCache.sol\\\";\\nimport \\\"IInflationManager.sol\\\";\\nimport \\\"ILpTokenStaker.sol\\\";\\nimport \\\"IOracle.sol\\\";\\nimport \\\"IBaseRewardPool.sol\\\";\\n\\nimport \\\"LpToken.sol\\\";\\nimport \\\"Pausable.sol\\\";\\nimport \\\"ConicPoolWeightManager.sol\\\";\\n\\nimport \\\"ScaledMath.sol\\\";\\nimport \\\"ArrayExtensions.sol\\\";\\n\\nabstract contract BaseConicPool is IConicPool, Pausable {\\n    using ArrayExtensions for uint256[];\\n    using ArrayExtensions for address[];\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeERC20 for ILpToken;\\n    using ScaledMath for uint256;\\n    using Address for address;\\n    using ERC165Checker for address;\\n\\n    // Avoid stack depth errors\\n    struct DepositVars {\\n        uint256 exchangeRate;\\n        uint256 underlyingBalanceIncrease;\\n        uint256 mintableUnderlyingAmount;\\n        uint256 lpReceived;\\n        uint256 underlyingBalanceBefore;\\n        uint256 allocatedBalanceBefore;\\n        uint256[] allocatedPerPoolBefore;\\n        uint256 underlyingBalanceAfter;\\n        uint256 allocatedBalanceAfter;\\n        uint256[] allocatedPerPoolAfter;\\n    }\\n\\n    uint256 internal constant _IDLE_RATIO_UPPER_BOUND = 0.2e18;\\n    uint256 internal constant _MIN_DEPEG_THRESHOLD = 0.01e18;\\n    uint256 internal constant _MAX_DEPEG_THRESHOLD = 0.1e18;\\n    uint256 internal constant _MAX_DEVIATION_UPPER_BOUND = 0.2e18;\\n    uint256 internal constant _TOTAL_UNDERLYING_CACHE_EXPIRY = 3 days;\\n    uint256 internal constant _MAX_USD_VALUE_FOR_REMOVING_POOL = 100e18;\\n    uint256 internal constant _MIN_EMERGENCY_REBALANCING_REWARD_FACTOR = 1e18;\\n    uint256 internal constant _MAX_EMERGENCY_REBALANCING_REWARD_FACTOR = 100e18;\\n\\n    IERC20 internal immutable CVX;\\n    IERC20 internal immutable CRV;\\n    IERC20 internal constant CNC = IERC20(0x9aE380F0272E2162340a5bB646c354271c0F5cFC);\\n    address internal constant _WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    IERC20Metadata public immutable override underlying;\\n    ILpToken public immutable override lpToken;\\n\\n    IRewardManager public immutable rewardManager;\\n    IConicPoolWeightManager public immutable weightManager;\\n\\n    /// @dev once the deviation gets under this threshold, the reward distribution will be paused\\n    /// until the next rebalancing. This is expressed as a ratio, scaled with 18 decimals\\n    uint256 public maxDeviation = 0.02e18; // 2%\\n    uint256 public maxIdleCurveLpRatio = 0.05e18; // triggers Convex staking when exceeded\\n    bool public isShutdown;\\n    uint256 public depegThreshold = 0.03e18; // 3%\\n    uint256 internal _cacheUpdatedTimestamp;\\n    uint256 internal _cachedTotalUnderlying;\\n\\n    /// @dev `true` if the rebalancing rewards are enabled, i.e. can become active\\n    /// A pool starts rebalancing rewards disabled, and these need to be enabled through governance\\n    bool public rebalancingRewardsEnabled;\\n\\n    /// @dev `true` while the reward distribution is active\\n    bool public rebalancingRewardActive;\\n\\n    /// @notice the time at which rebalancing rewards have been activated\\n    uint64 public rebalancingRewardsActivatedAt;\\n\\n    /// @notice The factor by which the rebalancing reward is multiplied when a pool is depegged\\n    uint256 public emergencyRebalancingRewardsFactor = 10e18;\\n\\n    /// @notice The factor by which the rebalancing reward is multiplied\\n    /// this is 1 (scaled to 18 decimals) for normal rebalancing situations but is set\\n    /// to `emergencyRebalancingRewardsFactor` when a pool is depegged\\n    uint256 public rebalancingRewardsFactor;\\n\\n    /// @dev the absolute value in terms of USD of the total deviation after\\n    /// the weights have been updated\\n    uint256 public totalDeviationAfterWeightUpdate;\\n\\n    mapping(address => uint256) _cachedPrices;\\n\\n    modifier onlyController() {\\n        require(msg.sender == address(controller), \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _underlying,\\n        IRewardManager _rewardManager,\\n        address _controller,\\n        string memory _lpTokenName,\\n        string memory _symbol,\\n        address _cvx,\\n        address _crv\\n    ) Pausable(IController(_controller)) {\\n        require(\\n            _underlying != _cvx && _underlying != _crv && _underlying != address(CNC),\\n            \\\"invalid underlying\\\"\\n        );\\n        underlying = IERC20Metadata(_underlying);\\n        uint8 decimals = IERC20Metadata(_underlying).decimals();\\n        lpToken = new LpToken(_controller, address(this), decimals, _lpTokenName, _symbol);\\n        rewardManager = _rewardManager;\\n        weightManager = new ConicPoolWeightManager(\\n            IController(_controller),\\n            IERC20Metadata(_underlying)\\n        );\\n\\n        CVX = IERC20(_cvx);\\n        CRV = IERC20(_crv);\\n        CVX.safeApprove(address(_rewardManager), type(uint256).max);\\n        CRV.safeApprove(address(_rewardManager), type(uint256).max);\\n        CNC.safeApprove(address(_rewardManager), type(uint256).max);\\n    }\\n\\n    /// @dev We always delegate-call to the Curve handler, which means\\n    /// that we need to be able to receive the ETH to unwrap it and\\n    /// send it to the Curve pool, as well as to receive it back from\\n    /// the Curve pool when withdrawing\\n    receive() external payable {\\n        require(address(underlying) == _WETH_ADDRESS, \\\"not WETH pool\\\");\\n    }\\n\\n    /// @notice Deposit underlying on behalf of someone\\n    /// @param underlyingAmount Amount of underlying to deposit\\n    /// @param minLpReceived The minimum amount of LP to accept from the deposit\\n    /// @return lpReceived The amount of LP received\\n    function depositFor(\\n        address account,\\n        uint256 underlyingAmount,\\n        uint256 minLpReceived,\\n        bool stake\\n    ) public override notPaused returns (uint256) {\\n        runSanityChecks();\\n\\n        DepositVars memory vars;\\n\\n        // Preparing deposit\\n        require(!isShutdown, \\\"pool is shut down\\\");\\n        require(underlyingAmount > 0, \\\"deposit amount cannot be zero\\\");\\n\\n        _updateAdapterCachedPrices();\\n\\n        uint256 underlyingPrice_ = controller.priceOracle().getUSDPrice(address(underlying));\\n        // We use the cached price of LP tokens, which is effectively the latest price\\n        // because we just updated the cache\\n        (\\n            vars.underlyingBalanceBefore,\\n            vars.allocatedBalanceBefore,\\n            vars.allocatedPerPoolBefore\\n        ) = _getTotalAndPerPoolUnderlying(underlyingPrice_, IPoolAdapter.PriceMode.Cached);\\n        vars.exchangeRate = _exchangeRate(vars.underlyingBalanceBefore);\\n\\n        // Executing deposit\\n        underlying.safeTransferFrom(msg.sender, address(this), underlyingAmount);\\n        _depositToCurve(\\n            vars.allocatedBalanceBefore,\\n            vars.allocatedPerPoolBefore,\\n            underlying.balanceOf(address(this))\\n        );\\n\\n        // Minting LP Tokens\\n        // We use the minimum between the price of the LP tokens before and after deposit\\n        (\\n            vars.underlyingBalanceAfter,\\n            vars.allocatedBalanceAfter,\\n            vars.allocatedPerPoolAfter\\n        ) = _getTotalAndPerPoolUnderlying(underlyingPrice_, IPoolAdapter.PriceMode.Minimum);\\n        vars.underlyingBalanceIncrease = vars.underlyingBalanceAfter - vars.underlyingBalanceBefore;\\n        vars.mintableUnderlyingAmount = _min(underlyingAmount, vars.underlyingBalanceIncrease);\\n        vars.lpReceived = vars.mintableUnderlyingAmount.divDown(vars.exchangeRate);\\n        require(vars.lpReceived >= minLpReceived, \\\"too much slippage\\\");\\n\\n        _cachedTotalUnderlying = vars.underlyingBalanceAfter;\\n        _cacheUpdatedTimestamp = block.timestamp;\\n\\n        if (stake) {\\n            lpToken.mint(address(this), vars.lpReceived, account);\\n            ILpTokenStaker lpTokenStaker = controller.lpTokenStaker();\\n            lpToken.forceApprove(address(lpTokenStaker), vars.lpReceived);\\n            lpTokenStaker.stakeFor(vars.lpReceived, address(this), account);\\n        } else {\\n            lpToken.mint(account, vars.lpReceived, account);\\n        }\\n\\n        _handleRebalancingRewards(\\n            account,\\n            vars.allocatedBalanceBefore,\\n            vars.allocatedPerPoolBefore,\\n            vars.allocatedBalanceAfter,\\n            vars.allocatedPerPoolAfter\\n        );\\n\\n        emit Deposit(msg.sender, account, underlyingAmount, vars.lpReceived);\\n        return vars.lpReceived;\\n    }\\n\\n    /// @notice Deposit underlying\\n    /// @param underlyingAmount Amount of underlying to deposit\\n    /// @param minLpReceived The minimum amoun of LP to accept from the deposit\\n    /// @return lpReceived The amount of LP received\\n    function deposit(\\n        uint256 underlyingAmount,\\n        uint256 minLpReceived\\n    ) external override returns (uint256) {\\n        return depositFor(msg.sender, underlyingAmount, minLpReceived, true);\\n    }\\n\\n    /// @notice Deposit underlying\\n    /// @param underlyingAmount Amount of underlying to deposit\\n    /// @param minLpReceived The minimum amoun of LP to accept from the deposit\\n    /// @param stake Whether or not to stake in the LpTokenStaker\\n    /// @return lpReceived The amount of LP received\\n    function deposit(\\n        uint256 underlyingAmount,\\n        uint256 minLpReceived,\\n        bool stake\\n    ) external override returns (uint256) {\\n        return depositFor(msg.sender, underlyingAmount, minLpReceived, stake);\\n    }\\n\\n    function _depositToCurve(\\n        uint256 totalUnderlying_,\\n        uint256[] memory allocatedPerPool,\\n        uint256 underlyingAmount_\\n    ) internal {\\n        uint256 depositsRemaining_ = underlyingAmount_;\\n        uint256 totalAfterDeposit_ = totalUnderlying_ + underlyingAmount_;\\n\\n        // NOTE: avoid modifying `allocatedPerPool`\\n        uint256[] memory allocatedPerPoolCopy = allocatedPerPool.copy();\\n\\n        while (depositsRemaining_ > 0) {\\n            (uint256 poolIndex_, uint256 maxDeposit_) = weightManager.getDepositPool(\\n                totalAfterDeposit_,\\n                allocatedPerPoolCopy,\\n                _getMaxDeviation()\\n            );\\n            // account for rounding errors\\n            if (depositsRemaining_ < maxDeposit_ + 1e2) {\\n                maxDeposit_ = depositsRemaining_;\\n            }\\n\\n            address pool_ = weightManager.getPoolAtIndex(poolIndex_);\\n\\n            // Depositing into least balanced pool\\n            uint256 toDeposit_ = _min(depositsRemaining_, maxDeposit_);\\n            address poolAdapter = address(controller.poolAdapterFor(pool_));\\n            poolAdapter.functionDelegateCall(\\n                abi.encodeWithSignature(\\n                    \\\"deposit(address,address,uint256)\\\",\\n                    pool_,\\n                    address(underlying),\\n                    toDeposit_\\n                )\\n            );\\n\\n            depositsRemaining_ -= toDeposit_;\\n            allocatedPerPoolCopy[poolIndex_] += toDeposit_;\\n        }\\n    }\\n\\n    /// @notice Get current underlying balance of pool\\n    function totalUnderlying() public view virtual returns (uint256) {\\n        (uint256 totalUnderlying_, , ) = getTotalAndPerPoolUnderlying();\\n\\n        return totalUnderlying_;\\n    }\\n\\n    function updateRewardSpendingApproval(address token, bool approved) external {\\n        require(msg.sender == address(rewardManager), \\\"not authorized\\\");\\n        uint256 amount = approved ? type(uint256).max : 0;\\n        IERC20(token).safeApprove(address(rewardManager), amount);\\n    }\\n\\n    function _exchangeRate(uint256 totalUnderlying_) internal view returns (uint256) {\\n        uint256 lpSupply = lpToken.totalSupply();\\n        if (lpSupply == 0 || totalUnderlying_ == 0) return ScaledMath.ONE;\\n\\n        return totalUnderlying_.divDown(lpSupply);\\n    }\\n\\n    /// @notice Get current exchange rate for the pool's LP token to the underlying\\n    function exchangeRate() public view virtual override returns (uint256) {\\n        return _exchangeRate(totalUnderlying());\\n    }\\n\\n    /// @notice Get current exchange rate for the pool's LP token to USD\\n    /// @dev This is using the cached total underlying value, so is not precisely accurate.\\n    function usdExchangeRate() external view virtual override returns (uint256) {\\n        uint256 underlyingPrice = controller.priceOracle().getUSDPrice(address(underlying));\\n        return _exchangeRate(cachedTotalUnderlying()).mulDown(underlyingPrice);\\n    }\\n\\n    /// @notice Unstake LP Tokens and withdraw underlying\\n    /// @param conicLpAmount Amount of LP tokens to burn\\n    /// @param minUnderlyingReceived Minimum amount of underlying to redeem\\n    /// This should always be set to a reasonable value (e.g. 2%), otherwise\\n    /// the user withdrawing could be forced into paying a withdrawal penalty fee\\n    /// by another user\\n    /// @return uint256 Total underlying withdrawn\\n    function unstakeAndWithdraw(\\n        uint256 conicLpAmount,\\n        uint256 minUnderlyingReceived,\\n        address to\\n    ) public override returns (uint256) {\\n        controller.lpTokenStaker().unstakeFrom(conicLpAmount, msg.sender);\\n        return withdraw(conicLpAmount, minUnderlyingReceived, to);\\n    }\\n\\n    function unstakeAndWithdraw(\\n        uint256 conicLpAmount,\\n        uint256 minUnderlyingReceived\\n    ) external returns (uint256) {\\n        return unstakeAndWithdraw(conicLpAmount, minUnderlyingReceived, msg.sender);\\n    }\\n\\n    function withdraw(\\n        uint256 conicLpAmount,\\n        uint256 minUnderlyingReceived\\n    ) public override returns (uint256) {\\n        return withdraw(conicLpAmount, minUnderlyingReceived, msg.sender);\\n    }\\n\\n    /// @notice Withdraw underlying\\n    /// @param conicLpAmount Amount of LP tokens to burn\\n    /// @param minUnderlyingReceived Minimum amount of underlying to redeem\\n    /// This should always be set to a reasonable value (e.g. 2%), otherwise\\n    /// the user withdrawing could be forced into paying a withdrawal penalty fee\\n    /// by another user\\n    /// @return uint256 Total underlying withdrawn\\n    function withdraw(\\n        uint256 conicLpAmount,\\n        uint256 minUnderlyingReceived,\\n        address to\\n    ) public override returns (uint256) {\\n        runSanityChecks();\\n\\n        // Preparing Withdrawals\\n        require(lpToken.balanceOf(msg.sender) >= conicLpAmount, \\\"insufficient balance\\\");\\n        uint256 underlyingBalanceBefore_ = underlying.balanceOf(address(this));\\n\\n        // Processing Withdrawals\\n        (\\n            uint256 totalUnderlying_,\\n            uint256 allocatedUnderlying_,\\n            uint256[] memory allocatedPerPool\\n        ) = getTotalAndPerPoolUnderlying();\\n        uint256 underlyingToReceive_ = conicLpAmount.mulDown(_exchangeRate(totalUnderlying_));\\n        {\\n            if (underlyingBalanceBefore_ < underlyingToReceive_) {\\n                uint256 underlyingToWithdraw_ = underlyingToReceive_ - underlyingBalanceBefore_;\\n                _withdrawFromCurve(allocatedUnderlying_, allocatedPerPool, underlyingToWithdraw_);\\n            }\\n        }\\n\\n        // Sending Underlying and burning LP Tokens\\n        uint256 underlyingWithdrawn_ = _min(\\n            underlying.balanceOf(address(this)),\\n            underlyingToReceive_\\n        );\\n        require(underlyingWithdrawn_ >= minUnderlyingReceived, \\\"too much slippage\\\");\\n        lpToken.burn(msg.sender, conicLpAmount, msg.sender);\\n        underlying.safeTransfer(to, underlyingWithdrawn_);\\n\\n        _cachedTotalUnderlying = totalUnderlying_ - underlyingWithdrawn_;\\n        _cacheUpdatedTimestamp = block.timestamp;\\n\\n        // state has already been updated, so no need to worry about re-entrancy\\n        if (to.supportsInterface(type(IWithdrawalProcessor).interfaceId)) {\\n            IWithdrawalProcessor(to).processWithdrawal(msg.sender, underlyingWithdrawn_);\\n        }\\n\\n        emit Withdraw(msg.sender, underlyingWithdrawn_);\\n        return underlyingWithdrawn_;\\n    }\\n\\n    function _withdrawFromCurve(\\n        uint256 totalUnderlying_,\\n        uint256[] memory allocatedPerPool,\\n        uint256 amount_\\n    ) internal {\\n        uint256 withdrawalsRemaining_ = amount_;\\n        uint256 totalAfterWithdrawal_ = totalUnderlying_ - amount_;\\n\\n        // NOTE: avoid modifying `allocatedPerPool`\\n        uint256[] memory allocatedPerPoolCopy = allocatedPerPool.copy();\\n\\n        while (withdrawalsRemaining_ > 0) {\\n            (uint256 poolIndex_, uint256 maxWithdrawal_) = weightManager.getWithdrawPool(\\n                totalAfterWithdrawal_,\\n                allocatedPerPoolCopy,\\n                _getMaxDeviation()\\n            );\\n            address pool_ = weightManager.getPoolAtIndex(poolIndex_);\\n\\n            // Withdrawing from least balanced pool\\n            uint256 toWithdraw_ = _min(withdrawalsRemaining_, maxWithdrawal_);\\n\\n            address poolAdapter = address(controller.poolAdapterFor(pool_));\\n            poolAdapter.functionDelegateCall(\\n                abi.encodeWithSignature(\\n                    \\\"withdraw(address,address,uint256)\\\",\\n                    pool_,\\n                    underlying,\\n                    toWithdraw_\\n                )\\n            );\\n            withdrawalsRemaining_ -= toWithdraw_;\\n            allocatedPerPoolCopy[poolIndex_] -= toWithdraw_;\\n        }\\n    }\\n\\n    function allPools() external view override returns (address[] memory) {\\n        return weightManager.allPools();\\n    }\\n\\n    function poolsCount() external view override returns (uint256) {\\n        return weightManager.poolsCount();\\n    }\\n\\n    function getPoolAtIndex(uint256 _index) external view override returns (address) {\\n        return weightManager.getPoolAtIndex(_index);\\n    }\\n\\n    function isRegisteredPool(address _pool) external view returns (bool) {\\n        return weightManager.isRegisteredPool(_pool);\\n    }\\n\\n    // Controller and Admin functions\\n\\n    function addPool(address _pool) external override onlyOwner {\\n        weightManager.addPool(_pool);\\n        address booster = controller.convexBooster();\\n        address lpToken_ = controller.poolAdapterFor(_pool).lpToken(_pool);\\n        IERC20(lpToken_).safeApprove(booster, type(uint256).max);\\n    }\\n\\n    function removePool(address _pool) external override onlyOwner {\\n        weightManager.removePool(_pool);\\n        address booster = controller.convexBooster();\\n        address lpToken_ = controller.poolAdapterFor(_pool).lpToken(_pool);\\n        IERC20(lpToken_).safeApprove(booster, 0);\\n    }\\n\\n    function updateWeights(PoolWeight[] memory poolWeights) external onlyController {\\n        runSanityChecks();\\n        weightManager.updateWeights(poolWeights);\\n\\n        (\\n            uint256 totalUnderlying_,\\n            uint256 totalAllocated,\\n            uint256[] memory allocatedPerPool\\n        ) = getTotalAndPerPoolUnderlying();\\n\\n        uint256 totalDeviation = weightManager.computeTotalDeviation(\\n            totalUnderlying_,\\n            allocatedPerPool\\n        );\\n        totalDeviationAfterWeightUpdate = totalDeviation;\\n        rebalancingRewardActive =\\n            rebalancingRewardsEnabled &&\\n            !_isBalanced(allocatedPerPool, totalAllocated);\\n        rebalancingRewardsFactor = ScaledMath.ONE;\\n        rebalancingRewardsActivatedAt = uint64(block.timestamp);\\n\\n        // Updating price cache for all pools\\n        // Used for seeing if a pool has depegged\\n        _updatePriceCache();\\n    }\\n\\n    function shutdownPool() external override onlyController {\\n        require(!isShutdown, \\\"pool already shut down\\\");\\n        isShutdown = true;\\n        emit Shutdown();\\n    }\\n\\n    function updateDepegThreshold(uint256 newDepegThreshold_) external onlyOwner {\\n        require(newDepegThreshold_ >= _MIN_DEPEG_THRESHOLD, \\\"invalid depeg threshold\\\");\\n        require(newDepegThreshold_ <= _MAX_DEPEG_THRESHOLD, \\\"invalid depeg threshold\\\");\\n        require(newDepegThreshold_ != depegThreshold, \\\"same as current\\\");\\n        depegThreshold = newDepegThreshold_;\\n        emit DepegThresholdUpdated(newDepegThreshold_);\\n    }\\n\\n    /// @notice Called when an underlying of a Curve Pool has depegged and we want to exit the pool.\\n    /// Will check if a coin has depegged, and will revert if not.\\n    /// Sets the weight of the Curve Pool to 0, and re-enables CNC rewards for deposits.\\n    /// @dev Cannot be called if the underlying of this pool itself has depegged.\\n    /// @param curvePool_ The Curve Pool to handle.\\n    function handleDepeggedCurvePool(address curvePool_) external override {\\n        runSanityChecks();\\n\\n        require(!_isAssetDepegged(address(underlying)), \\\"underlying is depegged\\\");\\n        require(_isPoolDepegged(curvePool_), \\\"pool is not depegged\\\");\\n\\n        weightManager.handleDepeggedCurvePool(curvePool_);\\n\\n        // Updating total deviation\\n        (\\n            uint256 totalUnderlying_,\\n            ,\\n            uint256[] memory allocatedPerPool\\n        ) = getTotalAndPerPoolUnderlying();\\n        uint256 totalDeviation = weightManager.computeTotalDeviation(\\n            totalUnderlying_,\\n            allocatedPerPool\\n        );\\n        totalDeviationAfterWeightUpdate = totalDeviation;\\n\\n        if (rebalancingRewardsEnabled) {\\n            IPoolAdapter poolAdapter = controller.poolAdapterFor(curvePool_);\\n            uint256 usdValue = poolAdapter.computePoolValueInUSD(address(this), curvePool_);\\n            if (usdValue > _MAX_USD_VALUE_FOR_REMOVING_POOL) {\\n                // if the rebalancing rewards were already active\\n                // we reset the activated at because the rewards factor is now increased\\n                rebalancingRewardsActivatedAt = uint64(block.timestamp);\\n                rebalancingRewardsFactor = emergencyRebalancingRewardsFactor;\\n                rebalancingRewardActive = true;\\n            }\\n        }\\n\\n        emit HandledDepeggedCurvePool(curvePool_);\\n    }\\n\\n    /**\\n     * @notice Allows anyone to set the weight of a Curve pool to 0 if the Convex pool for the\\n     * associated PID has been shut down. This is a very unlikely outcome and the method does\\n     * not reenable rebalancing rewards.\\n     * @param curvePool_ Curve pool for which the Convex PID is invalid (has been shut down)\\n     */\\n    function handleInvalidConvexPid(address curvePool_) external override returns (uint256) {\\n        runSanityChecks();\\n        uint256 pid = weightManager.handleInvalidConvexPid(curvePool_);\\n        emit HandledInvalidConvexPid(curvePool_, pid);\\n        return pid;\\n    }\\n\\n    function setMaxIdleCurveLpRatio(uint256 maxIdleCurveLpRatio_) external onlyOwner {\\n        require(maxIdleCurveLpRatio != maxIdleCurveLpRatio_, \\\"same as current\\\");\\n        require(maxIdleCurveLpRatio_ <= _IDLE_RATIO_UPPER_BOUND, \\\"ratio exceeds upper bound\\\");\\n        maxIdleCurveLpRatio = maxIdleCurveLpRatio_;\\n        emit NewMaxIdleCurveLpRatio(maxIdleCurveLpRatio_);\\n    }\\n\\n    function setMaxDeviation(uint256 maxDeviation_) external override onlyOwner {\\n        require(maxDeviation != maxDeviation_, \\\"same as current\\\");\\n        require(maxDeviation_ <= _MAX_DEVIATION_UPPER_BOUND, \\\"deviation exceeds upper bound\\\");\\n        maxDeviation = maxDeviation_;\\n        emit MaxDeviationUpdated(maxDeviation_);\\n    }\\n\\n    function getWeight(address curvePool) external view override returns (uint256) {\\n        return weightManager.getWeight(curvePool);\\n    }\\n\\n    function getWeights() external view override returns (PoolWeight[] memory) {\\n        return weightManager.getWeights();\\n    }\\n\\n    function getAllocatedUnderlying() external view override returns (PoolWithAmount[] memory) {\\n        address[] memory pools = weightManager.allPools();\\n        PoolWithAmount[] memory perPoolAllocated = new PoolWithAmount[](pools.length);\\n        (, , uint256[] memory allocated) = getTotalAndPerPoolUnderlying();\\n\\n        for (uint256 i; i < perPoolAllocated.length; i++) {\\n            perPoolAllocated[i] = PoolWithAmount(pools[i], allocated[i]);\\n        }\\n        return perPoolAllocated;\\n    }\\n\\n    function computeTotalDeviation() external view override returns (uint256) {\\n        (\\n            ,\\n            uint256 allocatedUnderlying_,\\n            uint256[] memory perPoolUnderlying\\n        ) = getTotalAndPerPoolUnderlying();\\n        return weightManager.computeTotalDeviation(allocatedUnderlying_, perPoolUnderlying);\\n    }\\n\\n    function cachedTotalUnderlying() public view virtual override returns (uint256) {\\n        if (block.timestamp > _cacheUpdatedTimestamp + _TOTAL_UNDERLYING_CACHE_EXPIRY) {\\n            return totalUnderlying();\\n        }\\n        return _cachedTotalUnderlying;\\n    }\\n\\n    function getTotalAndPerPoolUnderlying()\\n        public\\n        view\\n        returns (\\n            uint256 totalUnderlying_,\\n            uint256 totalAllocated_,\\n            uint256[] memory perPoolUnderlying_\\n        )\\n    {\\n        uint256 underlyingPrice_ = controller.priceOracle().getUSDPrice(address(underlying));\\n        return _getTotalAndPerPoolUnderlying(underlyingPrice_, IPoolAdapter.PriceMode.Latest);\\n    }\\n\\n    function isBalanced() external view override returns (bool) {\\n        (\\n            ,\\n            uint256 allocatedUnderlying_,\\n            uint256[] memory allocatedPerPool_\\n        ) = getTotalAndPerPoolUnderlying();\\n        return _isBalanced(allocatedPerPool_, allocatedUnderlying_);\\n    }\\n\\n    function setRebalancingRewardsEnabled(bool enabled) external override onlyOwner {\\n        require(rebalancingRewardsEnabled != enabled, \\\"same as current\\\");\\n        rebalancingRewardsEnabled = enabled;\\n        emit RebalancingRewardsEnabledSet(enabled);\\n    }\\n\\n    function setEmergencyRebalancingRewardFactor(uint256 factor_) external onlyOwner {\\n        require(factor_ >= _MIN_EMERGENCY_REBALANCING_REWARD_FACTOR, \\\"factor below minimum\\\");\\n        require(factor_ <= _MAX_EMERGENCY_REBALANCING_REWARD_FACTOR, \\\"factor above maximum\\\");\\n        require(factor_ != emergencyRebalancingRewardsFactor, \\\"same as current\\\");\\n        emergencyRebalancingRewardsFactor = factor_;\\n        emit EmergencyRebalancingRewardFactorUpdated(factor_);\\n    }\\n\\n    function _updateAdapterCachedPrices() internal {\\n        address[] memory pools = weightManager.allPools();\\n        uint256 poolsLength_ = pools.length;\\n        for (uint256 i; i < poolsLength_; i++) {\\n            address pool_ = pools[i];\\n            IPoolAdapter poolAdapter = controller.poolAdapterFor(pool_);\\n            poolAdapter.updatePriceCache(pool_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns several values related to the Omnipools's underlying assets.\\n     * @param underlyingPrice_ Price of the underlying asset in USD\\n     * @return totalUnderlying_ Total underlying value of the Omnipool\\n     * @return totalAllocated_ Total underlying value of the Omnipool that is allocated to Curve pools\\n     * @return perPoolUnderlying_ Array of underlying values of the Omnipool that is allocated to each Curve pool\\n     */\\n    function _getTotalAndPerPoolUnderlying(\\n        uint256 underlyingPrice_,\\n        IPoolAdapter.PriceMode priceMode\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 totalUnderlying_,\\n            uint256 totalAllocated_,\\n            uint256[] memory perPoolUnderlying_\\n        )\\n    {\\n        address[] memory pools = weightManager.allPools();\\n        uint256 poolsLength_ = pools.length;\\n        perPoolUnderlying_ = new uint256[](poolsLength_);\\n\\n        for (uint256 i; i < poolsLength_; i++) {\\n            address pool_ = pools[i];\\n            uint256 poolUnderlying_ = controller.poolAdapterFor(pool_).computePoolValueInUnderlying(\\n                address(this),\\n                pool_,\\n                address(underlying),\\n                underlyingPrice_,\\n                priceMode\\n            );\\n            perPoolUnderlying_[i] = poolUnderlying_;\\n            totalAllocated_ += poolUnderlying_;\\n        }\\n        totalUnderlying_ = totalAllocated_ + underlying.balanceOf(address(this));\\n    }\\n\\n    function _handleRebalancingRewards(\\n        address account,\\n        uint256 allocatedBalanceBefore_,\\n        uint256[] memory allocatedPerPoolBefore,\\n        uint256 allocatedBalanceAfter_,\\n        uint256[] memory allocatedPerPoolAfter\\n    ) internal {\\n        if (!rebalancingRewardActive) return;\\n        uint256 deviationBefore = weightManager.computeTotalDeviation(\\n            allocatedBalanceBefore_,\\n            allocatedPerPoolBefore\\n        );\\n        uint256 deviationAfter = weightManager.computeTotalDeviation(\\n            allocatedBalanceAfter_,\\n            allocatedPerPoolAfter\\n        );\\n\\n        controller.inflationManager().handleRebalancingRewards(\\n            account,\\n            deviationBefore,\\n            deviationAfter\\n        );\\n\\n        if (_isBalanced(allocatedPerPoolAfter, allocatedBalanceAfter_)) {\\n            rebalancingRewardActive = false;\\n        }\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function _isBalanced(\\n        uint256[] memory allocatedPerPool_,\\n        uint256 totalAllocated_\\n    ) internal view returns (bool) {\\n        return weightManager.isBalanced(allocatedPerPool_, totalAllocated_, maxDeviation);\\n    }\\n\\n    function getAllUnderlyingCoins() public view returns (address[] memory) {\\n        address[] memory pools = weightManager.allPools();\\n        uint256 poolsLength_ = pools.length;\\n        address[] memory underlyings_ = new address[](0);\\n\\n        for (uint256 i; i < poolsLength_; i++) {\\n            address pool_ = pools[i];\\n            address[] memory coins = controller.poolAdapterFor(pool_).getAllUnderlyingCoins(pool_);\\n            underlyings_ = underlyings_.concat(coins);\\n        }\\n        return underlyings_.removeDuplicates();\\n    }\\n\\n    function _isPoolDepegged(address pool_) internal view returns (bool) {\\n        address[] memory coins = controller.poolAdapterFor(pool_).getAllUnderlyingCoins(pool_);\\n        for (uint256 i; i < coins.length; i++) {\\n            address coin = coins[i];\\n            if (_isAssetDepegged(coin)) return true;\\n        }\\n        return false;\\n    }\\n\\n    function runSanityChecks() public virtual {}\\n\\n    function _getMaxDeviation() internal view returns (uint256) {\\n        return rebalancingRewardActive ? 0 : maxDeviation;\\n    }\\n\\n    function _updatePriceCache() internal virtual;\\n\\n    function _isAssetDepegged(address asset_) internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Permit.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IConicPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"ILpToken.sol\\\";\\nimport \\\"IRewardManager.sol\\\";\\nimport \\\"IOracle.sol\\\";\\nimport \\\"IController.sol\\\";\\nimport \\\"IPausable.sol\\\";\\nimport \\\"IConicPoolWeightManagement.sol\\\";\\n\\ninterface IConicPool is IConicPoolWeightManagement, IPausable {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 depositedAmount,\\n        uint256 lpReceived\\n    );\\n    event Withdraw(address indexed account, uint256 amount);\\n    event NewWeight(address indexed curvePool, uint256 newWeight);\\n    event NewMaxIdleCurveLpRatio(uint256 newRatio);\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event HandledDepeggedCurvePool(address curvePool_);\\n    event HandledInvalidConvexPid(address curvePool_, uint256 pid_);\\n    event CurvePoolAdded(address curvePool_);\\n    event CurvePoolRemoved(address curvePool_);\\n    event Shutdown();\\n    event DepegThresholdUpdated(uint256 newThreshold);\\n    event MaxDeviationUpdated(uint256 newMaxDeviation);\\n    event RebalancingRewardsEnabledSet(bool enabled);\\n    event EmergencyRebalancingRewardFactorUpdated(uint256 factor);\\n\\n    struct PoolWithAmount {\\n        address poolAddress;\\n        uint256 amount;\\n    }\\n\\n    function underlying() external view returns (IERC20Metadata);\\n\\n    function lpToken() external view returns (ILpToken);\\n\\n    function rewardManager() external view returns (IRewardManager);\\n\\n    function depegThreshold() external view returns (uint256);\\n\\n    function maxIdleCurveLpRatio() external view returns (uint256);\\n\\n    function setMaxIdleCurveLpRatio(uint256 value) external;\\n\\n    function setMaxDeviation(uint256 maxDeviation_) external;\\n\\n    function updateDepegThreshold(uint256 value) external;\\n\\n    function depositFor(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external returns (uint256);\\n\\n    function deposit(uint256 _amount, uint256 _minLpReceived) external returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _minLpReceived,\\n        bool stake\\n    ) external returns (uint256);\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function usdExchangeRate() external view returns (uint256);\\n\\n    function unstakeAndWithdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function unstakeAndWithdraw(\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, uint256 _minAmount) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, uint256 _minAmount, address _to) external returns (uint256);\\n\\n    function getAllocatedUnderlying() external view returns (PoolWithAmount[] memory);\\n\\n    function rebalancingRewardActive() external view returns (bool);\\n\\n    function totalDeviationAfterWeightUpdate() external view returns (uint256);\\n\\n    function computeTotalDeviation() external view returns (uint256);\\n\\n    /// @notice returns the total amount of funds held by this pool in terms of underlying\\n    function totalUnderlying() external view returns (uint256);\\n\\n    function getTotalAndPerPoolUnderlying()\\n        external\\n        view\\n        returns (\\n            uint256 totalUnderlying_,\\n            uint256 totalAllocated_,\\n            uint256[] memory perPoolUnderlying_\\n        );\\n\\n    /// @notice same as `totalUnderlying` but returns a cached version\\n    /// that might be slightly outdated if oracle prices have changed\\n    /// @dev this is useful in cases where we want to reduce gas usage and do\\n    /// not need a precise value\\n    function cachedTotalUnderlying() external view returns (uint256);\\n\\n    function updateRewardSpendingApproval(address token, bool approved) external;\\n\\n    function shutdownPool() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function isBalanced() external view returns (bool);\\n\\n    function rebalancingRewardsEnabled() external view returns (bool);\\n\\n    function setRebalancingRewardsEnabled(bool enabled) external;\\n\\n    function getAllUnderlyingCoins() external view returns (address[] memory result);\\n\\n    function rebalancingRewardsFactor() external view returns (uint256);\\n\\n    function rebalancingRewardsActivatedAt() external view returns (uint64);\\n\\n    function getWeights() external view returns (PoolWeight[] memory);\\n\\n    function runSanityChecks() external;\\n}\\n\"\r\n    },\r\n    \"ILpToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IERC20Metadata.sol\\\";\\n\\ninterface ILpToken is IERC20Metadata {\\n    function minter() external view returns (address);\\n\\n    function mint(address account, uint256 amount, address ubo) external returns (uint256);\\n\\n    function burn(address _owner, uint256 _amount, address ubo) external returns (uint256);\\n\\n    function taint(address from, address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"IRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IRewardManager {\\n    event ClaimedRewards(uint256 claimedCrv, uint256 claimedCvx);\\n    event SoldRewardTokens(uint256 targetTokenReceived);\\n    event ExtraRewardAdded(address reward);\\n    event ExtraRewardRemoved(address reward);\\n    event ExtraRewardsCurvePoolSet(address extraReward, address curvePool);\\n    event FeesSet(uint256 feePercentage);\\n    event FeesEnabled(uint256 feePercentage);\\n    event EarningsClaimed(\\n        address indexed claimedBy,\\n        uint256 cncEarned,\\n        uint256 crvEarned,\\n        uint256 cvxEarned\\n    );\\n\\n    function accountCheckpoint(address account) external;\\n\\n    function poolCheckpoint() external returns (bool);\\n\\n    function addExtraReward(address reward) external returns (bool);\\n\\n    function addBatchExtraRewards(address[] memory rewards) external;\\n\\n    function conicPool() external view returns (address);\\n\\n    function setFeePercentage(uint256 _feePercentage) external;\\n\\n    function claimableRewards(\\n        address account\\n    ) external view returns (uint256 cncRewards, uint256 crvRewards, uint256 cvxRewards);\\n\\n    function claimEarnings() external returns (uint256, uint256, uint256);\\n\\n    function claimPoolEarningsAndSellRewardTokens() external;\\n\\n    function feePercentage() external view returns (uint256);\\n\\n    function feesEnabled() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IOracle {\\n    event TokenUpdated(address indexed token, address feed, uint256 maxDelay, bool isEthPrice);\\n\\n    /// @notice returns the price in USD of symbol.\\n    function getUSDPrice(address token) external view returns (uint256);\\n\\n    /// @notice returns if the given token is supported for pricing.\\n    function isTokenSupported(address token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IConicPoolWeightManagement.sol\\\";\\nimport \\\"IConicPool.sol\\\";\\nimport \\\"IGenericOracle.sol\\\";\\nimport \\\"IInflationManager.sol\\\";\\nimport \\\"ILpTokenStaker.sol\\\";\\nimport \\\"IBonding.sol\\\";\\nimport \\\"IPoolAdapter.sol\\\";\\nimport \\\"IFeeRecipient.sol\\\";\\nimport \\\"ICurveRegistryCache.sol\\\";\\n\\ninterface IController {\\n    event PoolAdded(address indexed pool);\\n    event PoolRemoved(address indexed pool);\\n    event PoolShutdown(address indexed pool);\\n    event ConvexBoosterSet(address convexBooster);\\n    event CurveHandlerSet(address curveHandler);\\n    event ConvexHandlerSet(address convexHandler);\\n    event CurveRegistryCacheSet(address curveRegistryCache);\\n    event InflationManagerSet(address inflationManager);\\n    event BondingSet(address bonding);\\n    event FeeRecipientSet(address feeRecipient);\\n    event PriceOracleSet(address priceOracle);\\n    event WeightUpdateMinDelaySet(uint256 weightUpdateMinDelay);\\n    event PauseManagerSet(address indexed manager, bool isManager);\\n    event MultiDepositsWithdrawsWhitelistSet(address pool, bool allowed);\\n    event MinimumTaintedTransferAmountSet(address indexed token, uint256 amount);\\n    event DefaultPoolAdapterSet(address poolAdapter);\\n    event CustomPoolAdapterSet(address indexed pool, address poolAdapter);\\n\\n    struct WeightUpdate {\\n        address conicPoolAddress;\\n        IConicPoolWeightManagement.PoolWeight[] weights;\\n    }\\n\\n    function initialize(address _lpTokenStaker) external;\\n\\n    // inflation manager\\n\\n    function inflationManager() external view returns (IInflationManager);\\n\\n    function setInflationManager(address manager) external;\\n\\n    // views\\n    function curveRegistryCache() external view returns (ICurveRegistryCache);\\n\\n    // pool adapter\\n    function poolAdapterFor(address pool) external view returns (IPoolAdapter);\\n\\n    function defaultPoolAdapter() external view returns (IPoolAdapter);\\n\\n    function setDefaultPoolAdapter(address poolAdapter) external;\\n\\n    function setCustomPoolAdapter(address pool, address poolAdapter) external;\\n\\n    /// lp token staker\\n    function switchLpTokenStaker(address _lpTokenStaker) external;\\n\\n    function lpTokenStaker() external view returns (ILpTokenStaker);\\n\\n    // bonding\\n    function bonding() external view returns (IBonding);\\n\\n    function setBonding(address _bonding) external;\\n\\n    // fees\\n    function feeRecipient() external view returns (IFeeRecipient);\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    // oracle\\n    function priceOracle() external view returns (IGenericOracle);\\n\\n    function setPriceOracle(address oracle) external;\\n\\n    // pool functions\\n\\n    function listPools() external view returns (address[] memory);\\n\\n    function listActivePools() external view returns (address[] memory);\\n\\n    function isPool(address poolAddress) external view returns (bool);\\n\\n    function isActivePool(address poolAddress) external view returns (bool);\\n\\n    function addPool(address poolAddress) external;\\n\\n    function shutdownPool(address poolAddress) external;\\n\\n    function removePool(address poolAddress) external;\\n\\n    function cncToken() external view returns (address);\\n\\n    function lastWeightUpdate(address poolAddress) external view returns (uint256);\\n\\n    function updateWeights(WeightUpdate memory update) external;\\n\\n    function updateAllWeights(WeightUpdate[] memory weights) external;\\n\\n    // handler functions\\n\\n    function convexBooster() external view returns (address);\\n\\n    function curveHandler() external view returns (address);\\n\\n    function convexHandler() external view returns (address);\\n\\n    function setConvexBooster(address _convexBooster) external;\\n\\n    function setCurveHandler(address _curveHandler) external;\\n\\n    function setConvexHandler(address _convexHandler) external;\\n\\n    function setCurveRegistryCache(address curveRegistryCache_) external;\\n\\n    function setWeightUpdateMinDelay(uint256 delay) external;\\n\\n    function isPauseManager(address account) external view returns (bool);\\n\\n    function listPauseManagers() external view returns (address[] memory);\\n\\n    function setPauseManager(address account, bool isManager) external;\\n\\n    // deposit/withdrawal whitelist\\n    function isAllowedMultipleDepositsWithdraws(address poolAddress) external view returns (bool);\\n\\n    function setAllowedMultipleDepositsWithdraws(address account, bool allowed) external;\\n\\n    function getMultipleDepositsWithdrawsWhitelist() external view returns (address[] memory);\\n\\n    // tainted transfer amount\\n    function setMinimumTaintedTransferAmount(address token, uint256 amount) external;\\n\\n    function getMinimumTaintedTransferAmount(address token) external view returns (uint256);\\n\\n    // constants\\n\\n    function MAX_WEIGHT_UPDATE_MIN_DELAY() external view returns (uint256);\\n\\n    function MIN_WEIGHT_UPDATE_MIN_DELAY() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IConicPoolWeightManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IConicPoolWeightManagement {\\n    struct PoolWeight {\\n        address poolAddress;\\n        uint256 weight;\\n    }\\n\\n    function addPool(address pool) external;\\n\\n    function removePool(address pool) external;\\n\\n    function updateWeights(PoolWeight[] memory poolWeights) external;\\n\\n    function handleDepeggedCurvePool(address curvePool_) external;\\n\\n    function handleInvalidConvexPid(address pool) external returns (uint256);\\n\\n    function allPools() external view returns (address[] memory);\\n\\n    function poolsCount() external view returns (uint256);\\n\\n    function getPoolAtIndex(uint256 _index) external view returns (address);\\n\\n    function getWeight(address curvePool) external view returns (uint256);\\n\\n    function getWeights() external view returns (PoolWeight[] memory);\\n\\n    function isRegisteredPool(address _pool) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IGenericOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IOracle.sol\\\";\\n\\ninterface IGenericOracle is IOracle {\\n    /// @notice returns the oracle to be used to price `token`\\n    function getOracle(address token) external view returns (IOracle);\\n\\n    /// @notice converts the price of an LP token to the given underlying\\n    function curveLpToUnderlying(\\n        address curveLpToken,\\n        address underlying,\\n        uint256 curveLpAmount\\n    ) external view returns (uint256);\\n\\n    /// @notice same as above but avoids fetching the underlying price again\\n    function curveLpToUnderlying(\\n        address curveLpToken,\\n        address underlying,\\n        uint256 curveLpAmount,\\n        uint256 underlyingPrice\\n    ) external view returns (uint256);\\n\\n    /// @notice converts the price an underlying asset to a given Curve LP token\\n    function underlyingToCurveLp(\\n        address underlying,\\n        address curveLpToken,\\n        uint256 underlyingAmount\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IInflationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IInflationManager {\\n    event TokensClaimed(address indexed pool, uint256 cncAmount);\\n    event RebalancingRewardHandlerAdded(address indexed pool, address indexed handler);\\n    event RebalancingRewardHandlerRemoved(address indexed pool, address indexed handler);\\n    event PoolWeightsUpdated();\\n\\n    function executeInflationRateUpdate() external;\\n\\n    function updatePoolWeights() external;\\n\\n    /// @notice returns the weights of the Conic pools to know how much inflation\\n    /// each of them will receive, as well as the total amount of USD value in all the pools\\n    function computePoolWeights()\\n        external\\n        view\\n        returns (address[] memory _pools, uint256[] memory poolWeights, uint256 totalUSDValue);\\n\\n    function computePoolWeight(\\n        address pool\\n    ) external view returns (uint256 poolWeight, uint256 totalUSDValue);\\n\\n    function currentInflationRate() external view returns (uint256);\\n\\n    function getCurrentPoolInflationRate(address pool) external view returns (uint256);\\n\\n    function handleRebalancingRewards(\\n        address account,\\n        uint256 deviationBefore,\\n        uint256 deviationAfter\\n    ) external;\\n\\n    function addPoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address rebalancingRewardHandler\\n    ) external;\\n\\n    function removePoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address rebalancingRewardHandler\\n    ) external;\\n\\n    function rebalancingRewardHandlers(\\n        address poolAddress\\n    ) external view returns (address[] memory);\\n\\n    function hasPoolRebalancingRewardHandler(\\n        address poolAddress,\\n        address handler\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"ILpTokenStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface ILpTokenStaker {\\n    event LpTokenStaked(address indexed account, uint256 amount);\\n    event LpTokenUnstaked(address indexed account, uint256 amount);\\n    event TokensClaimed(address indexed pool, uint256 cncAmount);\\n    event Shutdown();\\n\\n    function stake(uint256 amount, address conicPool) external;\\n\\n    function unstake(uint256 amount, address conicPool) external;\\n\\n    function stakeFor(uint256 amount, address conicPool, address account) external;\\n\\n    function unstakeFor(uint256 amount, address conicPool, address account) external;\\n\\n    function unstakeFrom(uint256 amount, address account) external;\\n\\n    function getUserBalanceForPool(\\n        address conicPool,\\n        address account\\n    ) external view returns (uint256);\\n\\n    function getBalanceForPool(address conicPool) external view returns (uint256);\\n\\n    function updateBoost(address user) external;\\n\\n    function claimCNCRewardsForPool(address pool) external;\\n\\n    function claimableCnc(address pool) external view returns (uint256);\\n\\n    function checkpoint(address pool) external returns (uint256);\\n\\n    function shutdown() external;\\n\\n    function getBoost(address user) external view returns (uint256);\\n\\n    function isShutdown() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IBonding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IBonding {\\n    event CncStartPriceSet(uint256 startPrice);\\n    event PriceIncreaseFactorSet(uint256 factor);\\n    event MinBondingAmountSet(uint256 amount);\\n    event Bonded(\\n        address indexed account,\\n        address indexed recipient,\\n        uint256 lpTokenAmount,\\n        uint256 cncReceived,\\n        uint256 lockTime\\n    );\\n    event DebtPoolSet(address indexed pool);\\n    event DebtPoolFeesClaimed(uint256 crvAmount, uint256 cvxAmount, uint256 cncAmount);\\n    event StreamClaimed(address indexed account, uint256 amount);\\n    event BondingStarted(uint256 amount, uint256 epochs);\\n    event RemainingCNCRecovered(uint256 amount);\\n\\n    function startBonding() external;\\n\\n    function setCncStartPrice(uint256 _cncStartPrice) external;\\n\\n    function setCncPriceIncreaseFactor(uint256 _priceIncreaseFactor) external;\\n\\n    function setMinBondingAmount(uint256 _minBondingAmount) external;\\n\\n    function setDebtPool(address _debtPool) external;\\n\\n    function bondCncCrvUsd(\\n        uint256 lpTokenAmount,\\n        uint256 minCncReceived,\\n        uint64 cncLockTime\\n    ) external returns (uint256);\\n\\n    function recoverRemainingCNC() external;\\n\\n    function claimStream() external;\\n\\n    function claimFeesForDebtPool() external;\\n\\n    function streamCheckpoint() external;\\n\\n    function accountCheckpoint(address account) external;\\n\\n    function computeCurrentCncBondPrice() external view returns (uint256);\\n\\n    function cncAvailable() external view returns (uint256);\\n\\n    function cncBondPrice() external view returns (uint256);\\n\\n    function bondCncCrvUsdFor(\\n        uint256 lpTokenAmount,\\n        uint256 minCncReceived,\\n        uint64 cncLockTime,\\n        address recipient\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IPoolAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IPoolAdapter {\\n    /// @notice This is to set which LP token price the value computation should use\\n    /// `Latest` uses a freshly computed price\\n    /// `Cached` uses the price in cache\\n    /// `Minimum` uses the minimum of these two\\n    enum PriceMode {\\n        Latest,\\n        Cached,\\n        Minimum\\n    }\\n\\n    /// @notice Deposit `underlyingAmount` of `underlying` into `pool`\\n    /// @dev This function should be written with the assumption that it will be delegate-called into\\n    function deposit(address pool, address underlying, uint256 underlyingAmount) external;\\n\\n    /// @notice Withdraw `underlyingAmount` of `underlying` from `pool`\\n    /// @dev This function should be written with the assumption that it will be delegate-called into\\n    function withdraw(address pool, address underlying, uint256 underlyingAmount) external;\\n\\n    /// @notice Returns the amount of of assets that `conicPool` holds in `pool`, in terms of USD\\n    function computePoolValueInUSD(\\n        address conicPool,\\n        address pool\\n    ) external view returns (uint256 usdAmount);\\n\\n    /// @notice Updates the price caches of the given pools\\n    function updatePriceCache(address pool) external;\\n\\n    /// @notice Returns the amount of of assets that `conicPool` holds in `pool`, in terms of USD\\n    /// using the given price mode\\n    function computePoolValueInUSD(\\n        address conicPool,\\n        address pool,\\n        PriceMode priceMode\\n    ) external view returns (uint256 usdAmount);\\n\\n    /// @notice Returns the amount of of assets that `conicPool` holds in `pool`, in terms of underlying\\n    function computePoolValueInUnderlying(\\n        address conicPool,\\n        address pool,\\n        address underlying,\\n        uint256 underlyingPrice\\n    ) external view returns (uint256 underlyingAmount);\\n\\n    /// @notice Returns the amount of of assets that `conicPool` holds in `pool`, in terms of underlying\\n    /// using the given price mode\\n    function computePoolValueInUnderlying(\\n        address conicPool,\\n        address pool,\\n        address underlying,\\n        uint256 underlyingPrice,\\n        PriceMode priceMode\\n    ) external view returns (uint256 underlyingAmount);\\n\\n    /// @notice Claim earnings of `conicPool` from `pool`\\n    function claimEarnings(address conicPool, address pool) external;\\n\\n    /// @notice Returns the LP token of a given `pool`\\n    function lpToken(address pool) external view returns (address);\\n\\n    /// @notice Returns true if `pool` supports `asset`\\n    function supportsAsset(address pool, address asset) external view returns (bool);\\n\\n    /// @notice Returns the amount of CRV earned by `pool` on Convex\\n    function getCRVEarnedOnConvex(\\n        address account,\\n        address curvePool\\n    ) external view returns (uint256);\\n\\n    /// @notice Executes a sanity check, e.g. checking for reentrancy\\n    function executeSanityCheck(address pool) external;\\n\\n    /// @notice returns all the underlying coins of the pool\\n    function getAllUnderlyingCoins(address pool) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"IFeeRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IFeeRecipient {\\n    event FeesReceived(address indexed sender, uint256 crvAmount, uint256 cvxAmount);\\n\\n    function receiveFees(uint256 amountCrv, uint256 amountCvx) external;\\n}\\n\"\r\n    },\r\n    \"ICurveRegistryCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IBooster.sol\\\";\\nimport \\\"CurvePoolUtils.sol\\\";\\n\\ninterface ICurveRegistryCache {\\n    event PoolInitialized(address indexed pool, uint256 indexed pid);\\n\\n    function BOOSTER() external view returns (IBooster);\\n\\n    function initPool(address pool_) external;\\n\\n    function initPool(address pool_, uint256 pid_) external;\\n\\n    function lpToken(address pool_) external view returns (address);\\n\\n    function assetType(address pool_) external view returns (CurvePoolUtils.AssetType);\\n\\n    function isRegistered(address pool_) external view returns (bool);\\n\\n    function hasCoinDirectly(address pool_, address coin_) external view returns (bool);\\n\\n    function hasCoinAnywhere(address pool_, address coin_) external view returns (bool);\\n\\n    function basePool(address pool_) external view returns (address);\\n\\n    function coinIndex(address pool_, address coin_) external view returns (int128);\\n\\n    function nCoins(address pool_) external view returns (uint256);\\n\\n    function coinIndices(\\n        address pool_,\\n        address from_,\\n        address to_\\n    ) external view returns (int128, int128, bool);\\n\\n    function decimals(address pool_) external view returns (uint256[] memory);\\n\\n    function interfaceVersion(address pool_) external view returns (uint256);\\n\\n    function poolFromLpToken(address lpToken_) external view returns (address);\\n\\n    function coins(address pool_) external view returns (address[] memory);\\n\\n    function getPid(address _pool) external view returns (uint256);\\n\\n    function getRewardPool(address _pool) external view returns (address);\\n\\n    function isShutdownPid(uint256 pid_) external view returns (bool);\\n\\n    /// @notice this returns the underlying coins of a pool, including the underlying of the base pool\\n    /// if the given pool is a meta pool\\n    /// This does not return the LP token of the base pool as an underlying\\n    /// e.g. if the pool is 3CrvFrax, this will return FRAX, DAI, USDC, USDT\\n    function getAllUnderlyingCoins(address pool) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IBooster {\\n    function poolInfo(\\n        uint256 pid\\n    )\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function isShutdown() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"CurvePoolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"ICurvePoolV2.sol\\\";\\nimport \\\"ICurvePoolV1.sol\\\";\\nimport \\\"ScaledMath.sol\\\";\\n\\nlibrary CurvePoolUtils {\\n    using ScaledMath for uint256;\\n\\n    error NotWithinThreshold(address pool, uint256 assetA, uint256 assetB);\\n\\n    /// @dev by default, allow for 30 bps deviation regardless of pool fees\\n    uint256 internal constant _DEFAULT_IMBALANCE_BUFFER = 30e14;\\n\\n    /// @dev Curve scales the `fee` by 1e10\\n    uint8 internal constant _CURVE_POOL_FEE_DECIMALS = 10;\\n\\n    /// @dev allow imbalance to be buffer + 3x the fee, e.g. if fee is 3.6 bps and buffer is 30 bps, allow 40.8 bps\\n    uint256 internal constant _FEE_IMBALANCE_MULTIPLIER = 3;\\n\\n    enum AssetType {\\n        USD,\\n        ETH,\\n        BTC,\\n        OTHER,\\n        CRYPTO\\n    }\\n\\n    struct PoolMeta {\\n        address pool;\\n        uint256 numberOfCoins;\\n        AssetType assetType;\\n        uint256[] decimals;\\n        uint256[] prices;\\n        uint256[] imbalanceBuffers;\\n    }\\n\\n    function ensurePoolBalanced(PoolMeta memory poolMeta) internal view {\\n        uint256 poolFee = ICurvePoolV1(poolMeta.pool).fee().convertScale(\\n            _CURVE_POOL_FEE_DECIMALS,\\n            18\\n        );\\n\\n        for (uint256 i = 0; i < poolMeta.numberOfCoins - 1; i++) {\\n            uint256 fromDecimals = poolMeta.decimals[i];\\n            uint256 fromBalance = 10 ** fromDecimals;\\n            uint256 fromPrice = poolMeta.prices[i];\\n\\n            for (uint256 j = i + 1; j < poolMeta.numberOfCoins; j++) {\\n                uint256 toDecimals = poolMeta.decimals[j];\\n                uint256 toPrice = poolMeta.prices[j];\\n                uint256 toExpectedUnscaled = (fromBalance * fromPrice) / toPrice;\\n                uint256 toExpected = toExpectedUnscaled.convertScale(\\n                    uint8(fromDecimals),\\n                    uint8(toDecimals)\\n                );\\n\\n                uint256 toActual;\\n\\n                if (poolMeta.assetType == AssetType.CRYPTO) {\\n                    // Handling crypto pools\\n                    toActual = ICurvePoolV2(poolMeta.pool).get_dy(i, j, fromBalance);\\n                } else {\\n                    // Handling other pools\\n                    toActual = ICurvePoolV1(poolMeta.pool).get_dy(\\n                        int128(uint128(i)),\\n                        int128(uint128(j)),\\n                        fromBalance\\n                    );\\n                }\\n                uint256 _maxImbalanceBuffer = poolMeta.imbalanceBuffers[i].max(\\n                    poolMeta.imbalanceBuffers[j]\\n                );\\n\\n                if (!_isWithinThreshold(toExpected, toActual, poolFee, _maxImbalanceBuffer))\\n                    revert NotWithinThreshold(poolMeta.pool, i, j);\\n            }\\n        }\\n    }\\n\\n    function _isWithinThreshold(\\n        uint256 a,\\n        uint256 b,\\n        uint256 poolFee,\\n        uint256 imbalanceBuffer\\n    ) internal pure returns (bool) {\\n        if (imbalanceBuffer == 0) imbalanceBuffer = _DEFAULT_IMBALANCE_BUFFER;\\n        uint256 imbalanceTreshold = imbalanceBuffer + poolFee * _FEE_IMBALANCE_MULTIPLIER;\\n        if (a > b) return (a - b).divDown(a) <= imbalanceTreshold;\\n        return (b - a).divDown(b) <= imbalanceTreshold;\\n    }\\n}\\n\"\r\n    },\r\n    \"ICurvePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface ICurvePoolV2 {\\n    function token() external view returns (address);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[2] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 i,\\n        uint256 min_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[] memory amounts) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 token_amount,\\n        uint256 i\\n    ) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICurvePoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface ICurvePoolV1 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[8] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[7] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function lp_token() external view returns (address);\\n\\n    function A_PRECISION() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_dy(int128 i, int128 j, uint256 _dx) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[4] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function fee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ScaledMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nlibrary ScaledMath {\\n    uint256 internal constant DECIMALS = 18;\\n    uint256 internal constant ONE = 10 ** DECIMALS;\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b, uint256 decimals) internal pure returns (uint256) {\\n        return (a * b) / (10 ** decimals);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divDown(uint256 a, uint256 b, uint256 decimals) internal pure returns (uint256) {\\n        return (a * 10 ** decimals) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        return ((a * ONE) - 1) / b + 1;\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / int256(ONE);\\n    }\\n\\n    function mulDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * b) / uint128(ONE);\\n    }\\n\\n    function mulDown(int256 a, int256 b, uint256 decimals) internal pure returns (int256) {\\n        return (a * b) / int256(10 ** decimals);\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * int256(ONE)) / b;\\n    }\\n\\n    function divDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * uint128(ONE)) / b;\\n    }\\n\\n    function divDown(int256 a, int256 b, uint256 decimals) internal pure returns (int256) {\\n        return (a * int256(10 ** decimals)) / b;\\n    }\\n\\n    function convertScale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function convertScale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function upscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a * (10 ** (toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a / (10 ** (fromDecimals - toDecimals));\\n    }\\n\\n    function upscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a * int256(10 ** (toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a / int256(10 ** (fromDecimals - toDecimals));\\n    }\\n\\n    function intPow(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 result = ONE;\\n        for (uint256 i; i < n; ) {\\n            result = mulDown(result, a);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function absSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a >= b ? a - b : b - a;\\n        }\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"Ownable.sol\\\";\\n\\nimport \\\"IController.sol\\\";\\n\\ninterface IPausable {\\n    event Paused(uint256 pausedUntil);\\n    event PauseDurationSet(uint256 pauseDuration);\\n\\n    function controller() external view returns (IController);\\n\\n    function pausedUntil() external view returns (uint256);\\n\\n    function pauseDuration() external view returns (uint256);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function setPauseDuration(uint256 _pauseDuration) external;\\n\\n    function pause() external;\\n}\\n\"\r\n    },\r\n    \"IWithdrawalProcessor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IWithdrawalProcessor {\\n    function processWithdrawal(address account, uint256 underlyingAmount) external;\\n}\\n\"\r\n    },\r\n    \"IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IBaseRewardPool {\\n    function stakeFor(address, uint256) external;\\n\\n    function stake(uint256) external;\\n\\n    function stakeAll() external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"LpToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"ERC20.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IController.sol\\\";\\nimport \\\"ILpToken.sol\\\";\\n\\ncontract LpToken is ILpToken, ERC20 {\\n    IController public immutable controller;\\n\\n    address public immutable override minter;\\n\\n    modifier onlyMinter() {\\n        require(msg.sender == minter, \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    mapping(address => uint256) internal _lastEvent;\\n\\n    uint8 private __decimals;\\n\\n    constructor(\\n        address _controller,\\n        address _minter,\\n        uint8 _decimals,\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC20(name_, symbol_) {\\n        controller = IController(_controller);\\n        minter = _minter;\\n        __decimals = _decimals;\\n    }\\n\\n    function decimals() public view virtual override(ERC20, IERC20Metadata) returns (uint8) {\\n        return __decimals;\\n    }\\n\\n    function mint(\\n        address _account,\\n        uint256 _amount,\\n        address ubo\\n    ) external override onlyMinter returns (uint256) {\\n        _ensureSingleEvent(ubo, _amount);\\n        _mint(_account, _amount);\\n        return _amount;\\n    }\\n\\n    function burn(\\n        address _owner,\\n        uint256 _amount,\\n        address ubo\\n    ) external override onlyMinter returns (uint256) {\\n        _ensureSingleEvent(ubo, _amount);\\n        _burn(_owner, _amount);\\n        return _amount;\\n    }\\n\\n    function taint(address from, address to, uint256 amount) external {\\n        require(msg.sender == address(controller.lpTokenStaker()), \\\"not authorized\\\");\\n        _taint(from, to, amount);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\\n        // mint/burn are handled in their respective functions\\n        if (from == address(0) || to == address(0)) return;\\n\\n        // lpTokenStaker calls `taint` as needed\\n        address lpTokenStaker = address(controller.lpTokenStaker());\\n        if (from == lpTokenStaker || to == lpTokenStaker) return;\\n\\n        // taint any other type of transfer\\n        _taint(from, to, amount);\\n    }\\n\\n    function _ensureSingleEvent(address ubo, uint256 amount) internal {\\n        if (\\n            !controller.isAllowedMultipleDepositsWithdraws(ubo) &&\\n            amount > controller.getMinimumTaintedTransferAmount(address(this))\\n        ) {\\n            require(_lastEvent[ubo] != block.number, \\\"cannot mint/burn twice in a block\\\");\\n            _lastEvent[ubo] = block.number;\\n        }\\n    }\\n\\n    function _taint(address from, address to, uint256 amount) internal {\\n        if (\\n            from != to &&\\n            _lastEvent[from] == block.number &&\\n            amount > controller.getMinimumTaintedTransferAmount(address(this))\\n        ) {\\n            _lastEvent[to] = block.number;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"Ownable.sol\\\";\\n\\nimport \\\"IController.sol\\\";\\nimport \\\"IPausable.sol\\\";\\n\\nabstract contract Pausable is Ownable, IPausable {\\n    uint256 internal constant _MIN_PAUSE_DURATION = 1 hours;\\n    uint256 internal constant _MAX_PAUSE_DURATION = 3 days;\\n    uint256 internal constant _INITIAL_PAUSE_DURATION = 8 hours;\\n\\n    uint256 public pausedUntil;\\n    uint256 public pauseDuration;\\n\\n    IController public immutable controller;\\n\\n    modifier notPaused() {\\n        require(!isPaused(), \\\"paused\\\");\\n        _;\\n    }\\n\\n    constructor(IController _controller) {\\n        controller = _controller;\\n        pauseDuration = _INITIAL_PAUSE_DURATION;\\n    }\\n\\n    function setPauseDuration(uint256 _pauseDuration) external onlyOwner {\\n        require(_pauseDuration >= _MIN_PAUSE_DURATION, \\\"pause duration too short\\\");\\n        require(_pauseDuration <= _MAX_PAUSE_DURATION, \\\"pause duration too long\\\");\\n        pauseDuration = _pauseDuration;\\n        emit PauseDurationSet(pauseDuration);\\n    }\\n\\n    function pause() external {\\n        require(controller.isPauseManager(msg.sender), \\\"not pause manager\\\");\\n        pausedUntil = block.timestamp + pauseDuration;\\n        emit Paused(pausedUntil);\\n    }\\n\\n    function isPaused() public view override returns (bool) {\\n        return pausedUntil >= block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"ConicPoolWeightManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"EnumerableSet.sol\\\";\\nimport \\\"EnumerableMap.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\n\\nimport \\\"IConicPool.sol\\\";\\nimport \\\"IConicPoolWeightManager.sol\\\";\\n\\nimport \\\"ScaledMath.sol\\\";\\n\\ncontract ConicPoolWeightManager is IConicPoolWeightManager {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n    using ScaledMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event CurvePoolAdded(address curvePool_);\\n    event CurvePoolRemoved(address curvePool_);\\n    event NewWeight(address indexed curvePool, uint256 newWeight);\\n\\n    uint256 internal constant _MAX_USD_VALUE_FOR_REMOVING_POOL = 100e18;\\n    uint256 internal constant _MAX_CURVE_POOLS = 10;\\n\\n    IConicPool public immutable conicPool;\\n    IController public immutable controller;\\n    IERC20Metadata public immutable underlying;\\n\\n    EnumerableSet.AddressSet internal _pools;\\n    EnumerableMap.AddressToUintMap internal weights; // liquidity allocation weights\\n\\n    modifier onlyController() {\\n        require(msg.sender == address(controller), \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyConicPool() {\\n        require(msg.sender == address(conicPool), \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    constructor(IController _controller, IERC20Metadata _underlying) {\\n        conicPool = IConicPool(msg.sender);\\n        controller = _controller;\\n        underlying = _underlying;\\n    }\\n\\n    function addPool(address _pool) external onlyConicPool {\\n        require(_pools.length() < _MAX_CURVE_POOLS, \\\"max pools reached\\\");\\n        require(!_pools.contains(_pool), \\\"pool already added\\\");\\n        IPoolAdapter poolAdapter = controller.poolAdapterFor(_pool);\\n        bool supported_ = poolAdapter.supportsAsset(_pool, address(underlying));\\n        require(supported_, \\\"coin not in pool\\\");\\n        address lpToken_ = poolAdapter.lpToken(_pool);\\n        require(controller.priceOracle().isTokenSupported(lpToken_), \\\"cannot price LP Token\\\");\\n\\n        if (!weights.contains(_pool)) weights.set(_pool, 0);\\n        require(_pools.add(_pool), \\\"failed to add pool\\\");\\n        emit CurvePoolAdded(_pool);\\n    }\\n\\n    // This requires that the weight of the pool is first set to 0\\n    function removePool(address _pool) external onlyConicPool {\\n        require(_pools.contains(_pool), \\\"pool not added\\\");\\n        require(_pools.length() > 1, \\\"cannot remove last pool\\\");\\n        IPoolAdapter poolAdapter = controller.poolAdapterFor(_pool);\\n        uint256 usdValue = poolAdapter.computePoolValueInUSD(address(conicPool), _pool);\\n        require(usdValue < _MAX_USD_VALUE_FOR_REMOVING_POOL, \\\"pool has allocated funds\\\");\\n        uint256 weight = weights.get(_pool);\\n        require(weight == 0, \\\"pool has weight set\\\");\\n        require(_pools.remove(_pool), \\\"pool not removed\\\");\\n        require(weights.remove(_pool), \\\"weight not removed\\\");\\n        emit CurvePoolRemoved(_pool);\\n    }\\n\\n    function updateWeights(PoolWeight[] memory poolWeights) external onlyConicPool {\\n        require(poolWeights.length == _pools.length(), \\\"invalid pool weights\\\");\\n        uint256 total;\\n\\n        address previousPool;\\n        for (uint256 i; i < poolWeights.length; i++) {\\n            address pool_ = poolWeights[i].poolAddress;\\n            require(pool_ > previousPool, \\\"pools not sorted\\\");\\n            require(isRegisteredPool(pool_), \\\"pool is not registered\\\");\\n            uint256 newWeight = poolWeights[i].weight;\\n            weights.set(pool_, newWeight);\\n            emit NewWeight(pool_, newWeight);\\n            total += newWeight;\\n            previousPool = pool_;\\n        }\\n\\n        require(total == ScaledMath.ONE, \\\"weights do not sum to 1\\\");\\n    }\\n\\n    function handleDepeggedCurvePool(address curvePool_) external onlyConicPool {\\n        // Validation\\n        require(isRegisteredPool(curvePool_), \\\"pool is not registered\\\");\\n        require(weights.get(curvePool_) != 0, \\\"pool weight already 0\\\");\\n\\n        // Set target curve pool weight to 0\\n        // Scale up other weights to compensate\\n        _setWeightToZero(curvePool_);\\n    }\\n\\n    function handleInvalidConvexPid(address curvePool_) external onlyConicPool returns (uint256) {\\n        require(isRegisteredPool(curvePool_), \\\"curve pool not registered\\\");\\n        ICurveRegistryCache registryCache_ = controller.curveRegistryCache();\\n        uint256 pid = registryCache_.getPid(curvePool_);\\n        require(registryCache_.isShutdownPid(pid), \\\"convex pool pid is not shut down\\\");\\n        _setWeightToZero(curvePool_);\\n        return pid;\\n    }\\n\\n    function getDepositPool(\\n        uint256 totalUnderlying_,\\n        uint256[] memory allocatedPerPool,\\n        uint256 maxDeviation\\n    ) external view returns (uint256 poolIndex, uint256 maxDepositAmount) {\\n        uint256 poolsCount_ = allocatedPerPool.length;\\n        int256 iPoolIndex = -1;\\n        for (uint256 i; i < poolsCount_; i++) {\\n            address pool_ = _pools.at(i);\\n            uint256 allocatedUnderlying_ = allocatedPerPool[i];\\n            uint256 weight_ = weights.get(pool_);\\n            uint256 targetAllocation_ = totalUnderlying_.mulDown(weight_);\\n            if (allocatedUnderlying_ >= targetAllocation_) continue;\\n            // Compute max balance with deviation\\n            uint256 weightWithDeviation_ = weight_.mulDown(ScaledMath.ONE + maxDeviation);\\n            weightWithDeviation_ = weightWithDeviation_ > ScaledMath.ONE\\n                ? ScaledMath.ONE\\n                : weightWithDeviation_;\\n            uint256 maxBalance_ = totalUnderlying_.mulDown(weightWithDeviation_);\\n            uint256 maxDepositAmount_ = maxBalance_ - allocatedUnderlying_;\\n            if (maxDepositAmount_ <= maxDepositAmount) continue;\\n            maxDepositAmount = maxDepositAmount_;\\n            iPoolIndex = int256(i);\\n        }\\n        require(iPoolIndex > -1, \\\"error retrieving deposit pool\\\");\\n        poolIndex = uint256(iPoolIndex);\\n    }\\n\\n    function getWithdrawPool(\\n        uint256 totalUnderlying_,\\n        uint256[] memory allocatedPerPool,\\n        uint256 maxDeviation\\n    ) external view returns (uint256 withdrawPoolIndex, uint256 maxWithdrawalAmount) {\\n        uint256 poolsCount_ = allocatedPerPool.length;\\n        int256 iWithdrawPoolIndex = -1;\\n        for (uint256 i; i < poolsCount_; i++) {\\n            address curvePool_ = _pools.at(i);\\n            uint256 weight_ = weights.get(curvePool_);\\n            uint256 allocatedUnderlying_ = allocatedPerPool[i];\\n\\n            // If a pool has a weight of 0,\\n            // withdraw from it if it has more than the max lp value\\n            if (weight_ == 0) {\\n                uint256 price_ = controller.priceOracle().getUSDPrice(address(underlying));\\n                uint256 allocatedUsd = (price_ * allocatedUnderlying_) /\\n                    10 ** underlying.decimals();\\n                if (allocatedUsd >= _MAX_USD_VALUE_FOR_REMOVING_POOL / 2) {\\n                    return (uint256(i), allocatedUnderlying_);\\n                }\\n            }\\n\\n            uint256 targetAllocation_ = totalUnderlying_.mulDown(weight_);\\n            if (allocatedUnderlying_ <= targetAllocation_) continue;\\n            uint256 minBalance_ = targetAllocation_ - targetAllocation_.mulDown(maxDeviation);\\n            uint256 maxWithdrawalAmount_ = allocatedUnderlying_ - minBalance_;\\n            if (maxWithdrawalAmount_ <= maxWithdrawalAmount) continue;\\n            maxWithdrawalAmount = maxWithdrawalAmount_;\\n            iWithdrawPoolIndex = int256(i);\\n        }\\n        require(iWithdrawPoolIndex > -1, \\\"error retrieving withdraw pool\\\");\\n        withdrawPoolIndex = uint256(iWithdrawPoolIndex);\\n    }\\n\\n    function allPools() external view returns (address[] memory) {\\n        return _pools.values();\\n    }\\n\\n    function poolsCount() external view returns (uint256) {\\n        return _pools.length();\\n    }\\n\\n    function getPoolAtIndex(uint256 _index) external view returns (address) {\\n        return _pools.at(_index);\\n    }\\n\\n    function isRegisteredPool(address _pool) public view returns (bool) {\\n        return _pools.contains(_pool);\\n    }\\n\\n    function getWeight(address pool) external view returns (uint256) {\\n        return weights.get(pool);\\n    }\\n\\n    function getWeights() external view returns (IConicPool.PoolWeight[] memory) {\\n        uint256 length_ = _pools.length();\\n        IConicPool.PoolWeight[] memory weights_ = new IConicPool.PoolWeight[](length_);\\n        for (uint256 i; i < length_; i++) {\\n            (address pool_, uint256 weight_) = weights.at(i);\\n            weights_[i] = PoolWeight(pool_, weight_);\\n        }\\n        return weights_;\\n    }\\n\\n    function computeTotalDeviation(\\n        uint256 allocatedUnderlying_,\\n        uint256[] memory perPoolAllocations_\\n    ) external view returns (uint256) {\\n        uint256 totalDeviation;\\n        for (uint256 i; i < perPoolAllocations_.length; i++) {\\n            uint256 weight = weights.get(_pools.at(i));\\n            uint256 targetAmount = allocatedUnderlying_.mulDown(weight);\\n            totalDeviation += targetAmount.absSub(perPoolAllocations_[i]);\\n        }\\n        return totalDeviation;\\n    }\\n\\n    function isBalanced(\\n        uint256[] memory allocatedPerPool_,\\n        uint256 totalAllocated_,\\n        uint256 maxDeviation\\n    ) external view returns (bool) {\\n        if (totalAllocated_ == 0) return true;\\n        for (uint256 i; i < allocatedPerPool_.length; i++) {\\n            uint256 weight_ = weights.get(_pools.at(i));\\n            uint256 currentAllocated_ = allocatedPerPool_[i];\\n\\n            // If a curve pool has a weight of 0,\\n            if (weight_ == 0) {\\n                uint256 price_ = controller.priceOracle().getUSDPrice(address(underlying));\\n                uint256 allocatedUsd_ = (price_ * currentAllocated_) / 10 ** underlying.decimals();\\n                if (allocatedUsd_ >= _MAX_USD_VALUE_FOR_REMOVING_POOL / 2) {\\n                    return false;\\n                }\\n                continue;\\n            }\\n\\n            uint256 targetAmount = totalAllocated_.mulDown(weight_);\\n            uint256 deviation = targetAmount.absSub(currentAllocated_);\\n            uint256 deviationRatio = deviation.divDown(targetAmount);\\n\\n            if (deviationRatio > maxDeviation) return false;\\n        }\\n        return true;\\n    }\\n\\n    function _setWeightToZero(address zeroedPool) internal {\\n        uint256 weight_ = weights.get(zeroedPool);\\n        if (weight_ == 0) return;\\n        require(weight_ != ScaledMath.ONE, \\\"can't remove last pool\\\");\\n        uint256 scaleUp_ = ScaledMath.ONE.divDown(ScaledMath.ONE - weights.get(zeroedPool));\\n        uint256 curvePoolLength_ = _pools.length();\\n\\n        weights.set(zeroedPool, 0);\\n        emit NewWeight(zeroedPool, 0);\\n\\n        address[] memory nonZeroPools = new address[](curvePoolLength_ - 1);\\n        uint256[] memory nonZeroWeights = new uint256[](curvePoolLength_ - 1);\\n        uint256 nonZeroPoolsCount;\\n        for (uint256 i; i < curvePoolLength_; i++) {\\n            address pool_ = _pools.at(i);\\n            uint256 currentWeight = weights.get(pool_);\\n            if (currentWeight == 0) continue;\\n            nonZeroPools[nonZeroPoolsCount] = pool_;\\n            nonZeroWeights[nonZeroPoolsCount] = currentWeight;\\n            nonZeroPoolsCount++;\\n        }\\n\\n        uint256 totalWeight;\\n        for (uint256 i; i < nonZeroPoolsCount; i++) {\\n            address pool_ = nonZeroPools[i];\\n            uint256 newWeight_ = nonZeroWeights[i].mulDown(scaleUp_);\\n            // ensure that the sum of the weights is 1 despite potential rounding errors\\n            if (i == nonZeroPoolsCount - 1) {\\n                newWeight_ = ScaledMath.ONE - totalWeight;\\n            }\\n            totalWeight += newWeight_;\\n            weights.set(pool_, newWeight_);\\n            emit NewWeight(pool_, newWeight_);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IConicPoolWeightManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"IConicPoolWeightManagement.sol\\\";\\n\\ninterface IConicPoolWeightManager is IConicPoolWeightManagement {\\n    function getDepositPool(\\n        uint256 totalUnderlying_,\\n        uint256[] memory allocatedPerPool,\\n        uint256 maxDeviation\\n    ) external view returns (uint256 poolIndex, uint256 maxDepositAmount);\\n\\n    function getWithdrawPool(\\n        uint256 totalUnderlying_,\\n        uint256[] memory allocatedPerPool,\\n        uint256 maxDeviation\\n    ) external view returns (uint256 withdrawPoolIndex, uint256 maxWithdrawalAmount);\\n\\n    function computeTotalDeviation(\\n        uint256 allocatedUnderlying_,\\n        uint256[] memory perPoolAllocations_\\n    ) external view returns (uint256);\\n\\n    function isBalanced(\\n        uint256[] memory allocatedPerPool_,\\n        uint256 totalAllocated_,\\n        uint256 maxDeviation\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"ArrayExtensions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nlibrary ArrayExtensions {\\n    function copy(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        uint256[] memory copy_ = new uint256[](array.length);\\n        for (uint256 i = 0; i < array.length; i++) {\\n            copy_[i] = array[i];\\n        }\\n        return copy_;\\n    }\\n\\n    function concat(\\n        address[] memory a,\\n        address[] memory b\\n    ) internal pure returns (address[] memory result) {\\n        result = new address[](a.length + b.length);\\n        for (uint256 i; i < a.length; i++) result[i] = a[i];\\n        for (uint256 i; i < b.length; i++) result[i + a.length] = b[i];\\n    }\\n\\n    function includes(address[] memory array, address element) internal pure returns (bool) {\\n        return _includes(array, element, array.length);\\n    }\\n\\n    function _includes(\\n        address[] memory array,\\n        address element,\\n        uint256 until\\n    ) internal pure returns (bool) {\\n        for (uint256 i; i < until; i++) {\\n            if (array[i] == element) return true;\\n        }\\n        return false;\\n    }\\n\\n    function removeDuplicates(address[] memory array) internal pure returns (address[] memory) {\\n        address[] memory unique = new address[](array.length);\\n        uint256 j;\\n        for (uint256 i; i < array.length; i++) {\\n            if (!_includes(unique, array[i], j)) {\\n                unique[j++] = array[i];\\n            }\\n        }\\n        return trim(unique, j);\\n    }\\n\\n    function trim(\\n        address[] memory array,\\n        uint256 length\\n    ) internal pure returns (address[] memory trimmed) {\\n        trimmed = new address[](length);\\n        for (uint256 i; i < length; i++) trimmed[i] = array[i];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"ConicPool.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"contract IRewardManager\",\"name\":\"_rewardManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_cvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedCrv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedCvx\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curvePool_\",\"type\":\"address\"}],\"name\":\"CurvePoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curvePool_\",\"type\":\"address\"}],\"name\":\"CurvePoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"DepegThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpReceived\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"EmergencyRebalancingRewardFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curvePool_\",\"type\":\"address\"}],\"name\":\"HandledDepeggedCurvePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curvePool_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid_\",\"type\":\"uint256\"}],\"name\":\"HandledInvalidConvexPid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeviation\",\"type\":\"uint256\"}],\"name\":\"MaxDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"NewMaxIdleCurveLpRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"NewWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pauseDuration\",\"type\":\"uint256\"}],\"name\":\"PauseDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pausedUntil\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RebalancingRewardsEnabledSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cachedTotalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computeTotalDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depegThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpReceived\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpReceived\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpReceived\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRebalancingRewardsFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUnderlyingCoins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllocatedUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IConicPool.PoolWithAmount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPoolAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAndPerPoolUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUnderlying_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocated_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"perPoolUnderlying_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"}],\"name\":\"getWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeights\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IConicPoolWeightManagement.PoolWeight[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curvePool_\",\"type\":\"address\"}],\"name\":\"handleDepeggedCurvePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curvePool_\",\"type\":\"address\"}],\"name\":\"handleInvalidConvexPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBalanced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isRegisteredPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract ILpToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIdleCurveLpRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancingRewardActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancingRewardsActivatedAt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancingRewardsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancingRewardsFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract IRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runSanityChecks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"factor_\",\"type\":\"uint256\"}],\"name\":\"setEmergencyRebalancingRewardFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeviation_\",\"type\":\"uint256\"}],\"name\":\"setMaxDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxIdleCurveLpRatio_\",\"type\":\"uint256\"}],\"name\":\"setMaxIdleCurveLpRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pauseDuration\",\"type\":\"uint256\"}],\"name\":\"setPauseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRebalancingRewardsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeviationAfterWeightUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conicLpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnderlyingReceived\",\"type\":\"uint256\"}],\"name\":\"unstakeAndWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conicLpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnderlyingReceived\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unstakeAndWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDepegThreshold_\",\"type\":\"uint256\"}],\"name\":\"updateDepegThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"updateRewardSpendingApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IConicPoolWeightManagement.PoolWeight[]\",\"name\":\"poolWeights\",\"type\":\"tuple[]\"}],\"name\":\"updateWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightManager\",\"outputs\":[{\"internalType\":\"contract IConicPoolWeightManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conicLpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnderlyingReceived\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conicLpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnderlyingReceived\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConicPool", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000015c606c60afcfaa8e57777d947c40e92041195320000000000000000000000002790ec478f150a98f5d96755601a26403df57eae00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000000000000000000000000000000000000000000a436f6e69632055534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007636e635553444300000000000000000000000000000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}