{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SafeAmount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary SafeAmount {\\n    using SafeERC20 for IERC20;\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 preBalance = IERC20(token).balanceOf(to);\\n        IERC20(token).transferFrom(from, to, amount);\\n        uint256 postBalance = IERC20(token).balanceOf(to);\\n        return postBalance - preBalance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev StakingPool interface\\n */\\ninterface IStakePool {\\n    event Staked(\\n        address indexed token,\\n        address indexed staker_,\\n        uint256 requestedAmount_,\\n        uint256 stakedAmount_\\n    );\\n    event PaidOut(\\n        address indexed token,\\n        address indexed rewardToken,\\n        address indexed staker_,\\n        uint256 amount_,\\n        uint256 reward_\\n    );\\n\\n    function stake(uint256 amount) external returns (bool);\\n\\n    function stakeFor(address staker, uint256 amount) external returns (bool);\\n\\n    function stakeOf(address account) external view returns (uint256);\\n\\n    function tokenAddress() external view returns (address);\\n\\n    function stakedTotal() external view returns (uint256);\\n\\n    function stakedBalance() external view returns (uint256);\\n\\n    function stakingStarts() external view returns (uint256);\\n\\n    function stakingEnds() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakePoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IStakePoolFactory {\\n    function owner() external view returns (address);\\n\\n    function addTokensTo(address to, uint256 amount) external returns (uint256);\\n\\n    function removeTokensFrom(\\n        address from,\\n        uint256 amount\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/StakeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../common/SafeAmount.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary StakeLibrary {\\n    using SafeERC20 for IERC20;\\n    event Staked(\\n        address indexed token,\\n        address indexed staker_,\\n        uint256 requestedAmount_,\\n        uint256 stakedAmount_\\n    );\\n    event PaidOut(\\n        address indexed token,\\n        address indexed rewardToken,\\n        address indexed staker_,\\n        uint256 amount_,\\n        uint256 reward_\\n    );\\n\\n    struct StakeState {\\n        uint256 stakedTotal;\\n        uint256 stakedBalance;\\n        uint256 withdrawnEarly;\\n        mapping(address => uint256) _stakes;\\n    }\\n\\n    struct StakeRewardState {\\n        uint256 rewardBalance;\\n        uint256 rewardsTotal;\\n        uint256 earlyWithdrawReward;\\n        mapping(address => uint256) _claimed;\\n    }\\n\\n    function VERSION() external pure returns (uint) {\\n        return 2001;\\n    }\\n\\n    function tryStake(\\n        address payer,\\n        address staker,\\n        uint256 amount,\\n        uint256 stakingStarts,\\n        uint256 stakingEnds,\\n        uint256 stakingCap,\\n        address tokenAddress,\\n        StakeState storage state\\n    )\\n        public\\n        _after(stakingStarts)\\n        _before(stakingEnds)\\n        _positive(amount)\\n        returns (uint256)\\n    {\\n        // check the remaining amount to be staked\\n        // For pay per transfer tokens we limit the cap on incoming tokens for simplicity. This might\\n        // mean that cap may not necessary fill completely which is ok.\\n        uint256 remaining = amount;\\n        // uint256 stakedTotal = state.stakedTotal;\\n        {\\n            uint256 stakedBalance = state.stakedBalance;\\n            if (stakingCap > 0 && remaining > (stakingCap - stakedBalance)) {\\n                remaining = stakingCap - stakedBalance;\\n            }\\n        }\\n        // These requires are not necessary, because it will never happen, but won't hurt to double check\\n        // this is because stakedTotal and stakedBalance are only modified in this method during the staking period\\n        require(remaining > 0, \\\"StakeLibrary: Staking cap is filled\\\");\\n        // require((remaining + stakedTotal) <= stakingCap, \\\"StakeLibrary: this will increase staking amount pass the cap\\\");\\n        // Update remaining in case actual amount paid was different.\\n        remaining = _payMe(payer, remaining, tokenAddress);\\n        emit Staked(tokenAddress, staker, amount, remaining);\\n\\n        // Transfer is completed\\n        return remaining;\\n    }\\n\\n    function stake(\\n        address payer,\\n        address staker,\\n        uint256 amount,\\n        uint256 stakingStarts,\\n        uint256 stakingEnds,\\n        uint256 stakingCap,\\n        address tokenAddress,\\n        StakeState storage state\\n    ) external returns (uint256) {\\n        uint256 remaining = tryStake(\\n            payer,\\n            staker,\\n            amount,\\n            stakingStarts,\\n            stakingEnds,\\n            stakingCap,\\n            tokenAddress,\\n            state\\n        );\\n\\n        // Transfer is completed\\n        state.stakedBalance = state.stakedBalance + remaining;\\n        state.stakedTotal = state.stakedTotal + remaining;\\n        state._stakes[staker] = state._stakes[staker] + remaining;\\n\\n        // return the amount staked\\n        return remaining;\\n    }\\n\\n    function addReward(\\n        uint256 rewardAmount,\\n        uint256 withdrawableAmount,\\n        address rewardTokenAddress,\\n        StakeRewardState storage state\\n    ) external returns (bool) {\\n        require(rewardAmount > 0, \\\"StakeLibrary: reward must be positive\\\");\\n        require(\\n            withdrawableAmount >= 0,\\n            \\\"StakeLibrary: withdrawable amount cannot be negative\\\"\\n        );\\n        require(\\n            withdrawableAmount <= rewardAmount,\\n            \\\"StakeLibrary: withdrawable amount must be less than or equal to the reward amount\\\"\\n        );\\n        address from = msg.sender;\\n        rewardAmount = _payMe(from, rewardAmount, rewardTokenAddress);\\n\\n        state.rewardsTotal += rewardAmount;\\n        state.rewardBalance += rewardAmount;\\n        state.earlyWithdrawReward += withdrawableAmount;\\n\\n        return true;\\n    }\\n\\n    function addMarginalReward(\\n        address rewardTokenAddress,\\n        address tokenAddress,\\n        address me,\\n        uint256 stakedBalance,\\n        uint256 earlyWithdrawReward,\\n        StakeRewardState storage state\\n    ) external returns (bool) {\\n        uint256 amount = IERC20(rewardTokenAddress).balanceOf(me) -\\n            state.rewardsTotal;\\n\\n        // if the reward token is the same as the staking token, then we need to subtract the staked balance\\n        if (rewardTokenAddress == tokenAddress) {\\n            amount = amount - stakedBalance;\\n        }\\n\\n        // just in case but should never happen\\n        require(amount >= 0, \\\"StakeLibrary: negative reward\\\");\\n        if (amount == 0) {\\n            return true; // No reward to add. Its ok. No need to fail callers.\\n        }\\n\\n        // if the early reward is bigger then revert\\n        require(\\n            amount >= earlyWithdrawReward,\\n            \\\"StakeLibrary: reward must be greater than or equal to the early withdraw reward\\\"\\n        );\\n\\n        state.rewardsTotal += amount;\\n        state.rewardBalance += amount;\\n        state.earlyWithdrawReward += earlyWithdrawReward;\\n\\n        return true;\\n    }\\n\\n    function tryClaimReward(\\n        address from,\\n        address rewardTokenAddress,\\n        uint256 withdrawStarts,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    ) public _after(withdrawStarts) _realAddress(msg.sender) returns (uint256) {\\n        uint256 staked = state._stakes[from];\\n        require(staked > 0, \\\"StakeLibrary: no staked balance\\\");\\n        return\\n            _claimReward(\\n                rewardTokenAddress,\\n                from,\\n                withdrawEnds,\\n                stakingEnds,\\n                state,\\n                rewardState\\n            );\\n    }\\n\\n    function claimReward(\\n        address from,\\n        address rewardTokenAddress,\\n        uint256 withdrawStarts,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    ) public returns (bool) {\\n        tryClaimReward(\\n            from,\\n            rewardTokenAddress,\\n            withdrawStarts,\\n            withdrawEnds,\\n            stakingEnds,\\n            state,\\n            rewardState\\n        );\\n        return true;\\n    }\\n\\n    function tryWithdraw(\\n        address from,\\n        address tokenAddress,\\n        address rewardTokenAddress,\\n        uint256 amount,\\n        uint256 withdrawStarts,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    )\\n        public\\n        _after(withdrawStarts)\\n        _positive(amount)\\n        _realAddress(msg.sender)\\n        returns (uint256)\\n    {\\n        require(\\n            amount <= state._stakes[from],\\n            \\\"StakeLibrary: not enough balance\\\"\\n        );\\n\\n        return\\n            _withdraw(\\n                tokenAddress,\\n                rewardTokenAddress,\\n                from,\\n                amount,\\n                withdrawEnds,\\n                stakingEnds,\\n                state,\\n                rewardState\\n            );\\n    }\\n\\n    function withdraw(\\n        address from,\\n        address tokenAddress,\\n        address rewardTokenAddress,\\n        uint256 amount,\\n        uint256 withdrawStarts,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    ) public returns (bool) {\\n        uint256 wdAmount = tryWithdraw(\\n            from,\\n            tokenAddress,\\n            rewardTokenAddress,\\n            amount,\\n            withdrawStarts,\\n            withdrawEnds,\\n            stakingEnds,\\n            state,\\n            rewardState\\n        );\\n        state.stakedBalance = state.stakedBalance - wdAmount;\\n        state._stakes[from] = state._stakes[from] - wdAmount;\\n        return true;\\n    }\\n\\n    function calculateReward(\\n        address from,\\n        uint256 amount,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    ) public view returns (uint256) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 claimed = rewardState._claimed[from];\\n        uint256 reward = 0;\\n\\n        if (block.timestamp < withdrawEnds) {\\n            reward = _calculateRewardEarly(\\n                amount,\\n                withdrawEnds,\\n                stakingEnds,\\n                state,\\n                rewardState\\n            );\\n        } else {\\n            reward = _calculateRewardAfterClose(amount, state, rewardState);\\n        }\\n\\n        return reward - claimed;\\n    }\\n\\n    function _calculateRewardEarly(\\n        uint256 amount,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    ) private view returns (uint256) {\\n        // if the pool is not over, then no reward yet\\n        if (stakingEnds >= block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 denom = (withdrawEnds - stakingEnds) * state.stakedTotal;\\n        uint256 reward = ((block.timestamp - stakingEnds) *\\n            rewardState.earlyWithdrawReward *\\n            amount) / denom;\\n        return reward;\\n    }\\n\\n    function _calculateRewardAfterClose(\\n        uint256 amount,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    ) private view returns (uint256) {\\n        uint256 rewBal = rewardState.rewardBalance;\\n        uint256 reward = (rewBal * amount) / state.stakedBalance;\\n        return reward;\\n    }\\n\\n    function _claimReward(\\n        address rewardTokenAddress,\\n        address from,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    ) private _realAddress(from) returns (uint256) {\\n        uint256 amount = state._stakes[from];\\n        uint256 reward = calculateReward(\\n            from,\\n            amount,\\n            withdrawEnds,\\n            stakingEnds,\\n            state,\\n            rewardState\\n        );\\n        rewardState.rewardBalance -= reward;\\n        rewardState._claimed[from] += reward;\\n        bool paid = _payDirect(from, reward, rewardTokenAddress);\\n        require(paid, \\\"StakeLibrary: error paying\\\");\\n        emit PaidOut(\\n            rewardTokenAddress,\\n            rewardTokenAddress,\\n            from,\\n            amount,\\n            reward\\n        );\\n        return reward;\\n    }\\n\\n    function _withdraw(\\n        address tokenAddress,\\n        address rewardTokenAddress,\\n        address from,\\n        uint256 amount,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        StakeState storage state,\\n        StakeRewardState storage rewardState\\n    ) private _realAddress(from) returns (uint256) {\\n        uint256 reward = calculateReward(\\n            from,\\n            amount,\\n            withdrawEnds,\\n            stakingEnds,\\n            state,\\n            rewardState\\n        );\\n        rewardState.rewardBalance -= reward;\\n        rewardState._claimed[from] += reward;\\n        bool principalPaid = _payDirect(from, amount, tokenAddress);\\n        bool rewardPaid = _payDirect(from, reward, rewardTokenAddress);\\n        require(principalPaid && rewardPaid, \\\"StakeLibrary: error paying\\\");\\n        emit PaidOut(tokenAddress, rewardTokenAddress, from, amount, reward);\\n        return amount;\\n    }\\n\\n    function _payMe(\\n        address payer,\\n        uint256 amount,\\n        address token\\n    ) internal returns (uint256) {\\n        return _payTo(payer, address(this), amount, token);\\n    }\\n\\n    function _payTo(\\n        address allower,\\n        address receiver,\\n        uint256 amount,\\n        address token\\n    ) internal returns (uint256) {\\n        // Request to transfer amount from the contract to receiver.\\n        // contract does not own the funds, so the allower must have added allowance to the contract\\n        // Allower is the original owner.\\n        return SafeAmount.safeTransferFrom(token, allower, receiver, amount);\\n    }\\n\\n    function _payDirect(\\n        address to,\\n        uint256 amount,\\n        address token\\n    ) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n        IERC20(token).safeTransfer(to, amount);\\n        return true;\\n    }\\n\\n    modifier _realAddress(address addr) {\\n        require(addr != address(0), \\\"StakeLibrary: zero address\\\");\\n        _;\\n    }\\n\\n    modifier _positive(uint256 amount) {\\n        require(amount != 0, \\\"StakeLibrary: negative amount\\\");\\n        _;\\n    }\\n\\n    modifier _after(uint eventTime) {\\n        require(\\n            block.timestamp >= eventTime,\\n            \\\"StakeLibrary: bad after timing for the request\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier _before(uint eventTime) {\\n        require(\\n            block.timestamp < eventTime,\\n            \\\"StakeLibrary: bad before timing for the request\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./StakePoolRewardable.sol\\\";\\nimport \\\"./StakePoolOptimized.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IStakePoolFactory.sol\\\";\\n\\ncontract StakePool is StakePoolOptimized, StakePoolRewardable {\\n    address public factory;\\n\\n    constructor(\\n        string memory name_,\\n        address tokenAddress_,\\n        address rewardTokenAddress_,\\n        uint stakingStarts_,\\n        uint stakingEnds_,\\n        uint withdrawStarts_,\\n        uint withdrawEnds_,\\n        uint256 stakingCap_\\n    )\\n        StakePoolOptimized(\\n            name_,\\n            tokenAddress_,\\n            stakingStarts_,\\n            stakingEnds_,\\n            withdrawStarts_,\\n            withdrawEnds_,\\n            stakingCap_\\n        )\\n    {\\n        require(\\n            rewardTokenAddress_ != address(0),\\n            \\\"StakingPool: 0 reward address\\\"\\n        );\\n        rewardTokenAddress = rewardTokenAddress_;\\n        factory = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == IStakePoolFactory(factory).owner(),\\n            \\\"StakePool: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function rewardOf(address account) external view returns (uint256) {\\n        return\\n            StakeLibrary.calculateReward(\\n                account,\\n                stakeState._stakes[account],\\n                withdrawEnds,\\n                stakingEnds,\\n                stakeState,\\n                rewardState\\n            );\\n    }\\n\\n    function _annualize(\\n        uint256 reward,\\n        uint256 year,\\n        uint256 dt\\n    ) internal pure returns (uint256) {\\n        return (reward * year) / dt;\\n    }\\n\\n    function minimumRewardMaturity() external view returns (uint256) {\\n        uint256 dt = withdrawEnds - stakingEnds;\\n        uint256 amount = 1e18;\\n        if (stakingCap > 0) {\\n            amount = stakingCap;\\n        } else {\\n            amount = stakeState.stakedTotal;\\n        }\\n\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 reward = StakeLibrary.calculateReward(\\n            address(0),\\n            amount,\\n            withdrawEnds,\\n            stakingEnds,\\n            stakeState,\\n            rewardState\\n        );\\n\\n        return _annualize(reward, 365 days, dt);\\n    }\\n\\n    function calculatedReward() external view returns (uint256) {\\n        if (rewardState.rewardsTotal == 0) {\\n            return 0;\\n        }\\n        if (stakingCap > 0) {\\n            return\\n                StakeLibrary.calculateReward(\\n                    address(0),\\n                    stakingCap,\\n                    withdrawEnds,\\n                    stakingEnds,\\n                    stakeState,\\n                    rewardState\\n                );\\n        } else {\\n            return\\n                StakeLibrary.calculateReward(\\n                    address(0),\\n                    stakeState.stakedTotal,\\n                    withdrawEnds,\\n                    stakingEnds,\\n                    stakeState,\\n                    rewardState\\n                );\\n        }\\n    }\\n\\n    function addReward(\\n        uint256 rewardAmount,\\n        uint256 withdrawableAmount\\n    ) external onlyOwner returns (bool) {\\n        return\\n            StakeLibrary.addReward(\\n                rewardAmount,\\n                withdrawableAmount,\\n                rewardTokenAddress,\\n                rewardState\\n            );\\n    }\\n\\n    function addMarginalReward(\\n        uint256 withdrawableAmount\\n    ) external onlyOwner returns (bool) {\\n        return\\n            StakeLibrary.addMarginalReward(\\n                rewardTokenAddress,\\n                tokenAddress,\\n                address(this),\\n                stakedBalance(),\\n                withdrawableAmount,\\n                rewardState\\n            );\\n    }\\n\\n    function stakeFor(\\n        address staker,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 amountStaked = _stake(msg.sender, staker, amount);\\n        IStakePoolFactory(factory).addTokensTo(staker, amountStaked);\\n        return amountStaked > 0;\\n    }\\n\\n    function stake(uint256 amount) external override returns (bool) {\\n        uint256 amountStaked = _stake(msg.sender, msg.sender, amount);\\n        IStakePoolFactory(factory).addTokensTo(msg.sender, amountStaked);\\n        return amountStaked > 0;\\n    }\\n\\n    function exitPool() external returns (bool) {\\n        IStakePoolFactory(factory).removeTokensFrom(\\n            msg.sender,\\n            stakeState._stakes[msg.sender]\\n        );\\n        return\\n            StakeLibrary.withdraw(\\n                msg.sender,\\n                tokenAddress,\\n                rewardTokenAddress,\\n                stakeState._stakes[msg.sender],\\n                withdrawStarts,\\n                withdrawEnds,\\n                stakingEnds,\\n                stakeState,\\n                rewardState\\n            );\\n    }\\n\\n    function claimReward() public returns (bool) {\\n        return\\n            StakeLibrary.claimReward(\\n                msg.sender,\\n                rewardTokenAddress,\\n                withdrawStarts,\\n                withdrawEnds,\\n                stakingEnds,\\n                stakeState,\\n                rewardState\\n            );\\n    }\\n\\n    function emergencyWithdraw(address _token) public onlyOwner {\\n        if (_token == address(0)) {\\n            payable(msg.sender).transfer(address(this).balance);\\n        } else {\\n            uint256 balance = IERC20(_token).balanceOf(address(this));\\n            IERC20(_token).transfer(msg.sender, balance);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakePoolOptimized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IStakePool.sol\\\";\\nimport \\\"./libraries/StakeLibrary.sol\\\";\\n\\nabstract contract StakePoolOptimized is IStakePool {\\n    string private _name;\\n    address public override tokenAddress;\\n    uint public override stakingStarts;\\n    uint public override stakingEnds;\\n    uint public withdrawStarts;\\n    uint public withdrawEnds;\\n    uint public stakingCap;\\n    StakeLibrary.StakeState public stakeState;\\n    uint constant LIB_VERSION = 2001;\\n\\n    constructor(\\n        string memory name_,\\n        address tokenAddress_,\\n        uint stakingStarts_,\\n        uint stakingEnds_,\\n        uint withdrawStarts_,\\n        uint withdrawEnds_,\\n        uint256 stakingCap_\\n    ) {\\n        require(\\n            StakeLibrary.VERSION() == LIB_VERSION,\\n            \\\"Bad linked library version\\\"\\n        );\\n\\n        _name = name_;\\n\\n        require(tokenAddress_ != address(0), \\\"StakingPool: 0 address\\\");\\n        tokenAddress = tokenAddress_;\\n\\n        if (stakingStarts_ < block.timestamp) {\\n            stakingStarts = block.timestamp;\\n        } else {\\n            stakingStarts = stakingStarts_;\\n        }\\n\\n        require(\\n            stakingEnds_ >= stakingStarts,\\n            \\\"StakingPool: staking end must be after staking starts\\\"\\n        );\\n        stakingEnds = stakingEnds_;\\n\\n        require(\\n            withdrawStarts_ >= stakingEnds,\\n            \\\"StakingPool: withdrawStarts must be after staking ends\\\"\\n        );\\n        withdrawStarts = withdrawStarts_;\\n\\n        require(\\n            withdrawEnds_ >= withdrawStarts,\\n            \\\"StakingPool: withdrawEnds must be after withdraw starts\\\"\\n        );\\n        withdrawEnds = withdrawEnds_;\\n\\n        require(stakingCap_ >= 0, \\\"StakingPool: stakingCap cannot be negative\\\");\\n        stakingCap = stakingCap_;\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function stakedTotal() external view override returns (uint256) {\\n        return stakeState.stakedTotal;\\n    }\\n\\n    function stakedBalance() public view override returns (uint256) {\\n        return stakeState.stakedBalance;\\n    }\\n\\n    function stakeOf(address account) external view override returns (uint256) {\\n        return stakeState._stakes[account];\\n    }\\n\\n    function _stake(\\n        address payer,\\n        address staker,\\n        uint256 amount\\n    ) internal virtual returns (uint256) {\\n        return\\n            StakeLibrary.stake(\\n                payer,\\n                staker,\\n                amount,\\n                stakingStarts,\\n                stakingEnds,\\n                stakingCap,\\n                tokenAddress,\\n                stakeState\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakePoolRewardable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./interfaces/IStakePool.sol\\\";\\nimport \\\"./libraries/StakeLibrary.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract StakePoolRewardable is IStakePool {\\n    using SafeERC20 for IERC20;\\n    address public rewardTokenAddress;\\n    StakeLibrary.StakeRewardState public rewardState;\\n\\n    function earlyWithdrawReward() external view returns (uint256) {\\n        return rewardState.earlyWithdrawReward;\\n    }\\n\\n    function rewardBalance() external view returns (uint256) {\\n        return rewardState.rewardBalance;\\n    }\\n\\n    function rewardsTotal() external view returns (uint256) {\\n        return rewardState.rewardsTotal;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/StakeLibrary.sol\": {\r\n        \"StakeLibrary\": \"0x611fbdead231cce1481565d6dd9ec9c8f4c052f9\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingStarts_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEnds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawStarts_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawEnds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingCap_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount_\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"}],\"name\":\"addMarginalReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRewardMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnEarly\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakePool", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000e8c19b0281580b0d2468741eb9f845c949393d760000000000000000000000007d51888c5abb7cdfa9cdd6a50673c7f8afaccd7f0000000000000000000000000000000000000000000000000000000065831d900000000000000000000000000000000000000000000000000000000065871210000000000000000000000000000000000000000000000000000000006587121000000000000000000000000000000000000000000000000000000000676997100000000000000000000000000000000000000000000000142a897d0f3d500000000000000000000000000000000000000000000000000000000000000000002144442f45544820507269736f6e2043656c6c2031202d203234252041505920444400000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}