{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ninterface IHelper {\\n    function checkWhitelist(\\n        address _user,\\n        address _vault\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/SaleVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IHelper.sol\\\";\\n\\nstruct Parameters {\\n    uint id;\\n    IERC20 depositToken;\\n    IERC20 distributeToken;\\n    address receiver;\\n    uint price;\\n    uint distribution_start;\\n    uint distribution_end;\\n    uint deposit_open;\\n    uint deposit_close;\\n    uint category;\\n    bool onlyWhitelist;\\n    string name;\\n    address helper;\\n    address manager;\\n    address owner;\\n    uint8 gfi_tier_access;\\n    uint8 access_type;\\n    uint256 maxDeposit;\\n    uint256 maxPerUser;\\n    uint256 minPerUser;\\n    address adminFeeReceiver;\\n    uint256 adminFeeAmount;\\n    address[3] partnerFeeReceivers;\\n    uint256[3] partnerFeeAmounts;\\n    bool feeType;\\n}\\n\\nstruct SaleVaultInfo {\\n    uint id;\\n    uint category;\\n    uint price;\\n    uint distribution_start;\\n    uint distribution_end;\\n    uint deposit_open;\\n    uint deposit_close;\\n    uint256 totalDeposit;\\n    uint256 totalDistributed;\\n    bool allowWithdraw;\\n    bool onlyWhitelisted;\\n    uint256 maxTotalDeposit;\\n    uint256 maxUserDeposit;\\n    uint256 minUserDeposit;\\n    string name;\\n    address self;\\n    uint8 status;\\n    uint8 gfi_tier_access;\\n    uint8 access_type;\\n    address depositToken;\\n    address distributeToken;\\n}\\n\\ncontract SaleVault is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 withdraw;\\n        uint256 admin;\\n    }\\n\\n    struct Deposit {\\n        uint256 amount;\\n        uint256 distribute;\\n        uint when;\\n    }\\n\\n    uint256 public id;\\n\\n    uint256 public category;\\n\\n    uint256 public price;\\n\\n    uint256 public maxTotalDeposit;\\n\\n    uint256 public maxUserDeposit;\\n    uint256 public minUserDeposit;\\n\\n    IERC20 public depositToken;\\n    IERC20 public distributeToken;\\n\\n    address public adminReceiver;\\n    uint256 public adminFee;\\n\\n    address public partnerReceiver;\\n    uint256 public partnerFee;\\n\\n    address public partnerReceiver2;\\n    uint256 public partnerFee2;\\n\\n    address public partnerReceiver3;\\n    uint256 public partnerFee3;\\n\\n    uint256 constant FEE_DECIMAL = 1000;\\n\\n    bool allowWithdraw = false;\\n\\n    bool public adminWithdrawed = false;\\n\\n    uint256 public distribution_start;\\n\\n    bool public onlyWhitelisted;\\n\\n    uint256 public distribution_end;\\n\\n    uint256 public deposit_open;\\n\\n    uint256 public deposit_close;\\n\\n    uint256 public totalDeposit;\\n\\n    uint256 public totalDistributed;\\n\\n    Deposit[] public distributeInfo;\\n\\n    address public helper;\\n\\n    uint8 public gfi_tier_access;\\n\\n    uint8 public access_type;\\n\\n    address public withdrawReceiver;\\n\\n    string public name;\\n\\n    string[] public descripton;\\n\\n    uint8 public status;\\n\\n    bool public feeType;\\n\\n    mapping(address => bool) public managers;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event Withdrawal(address user, uint amount, uint when);\\n\\n    event UserDeposit(address user, uint amount, uint when);\\n\\n    event AdminDeposit(uint amount, uint when);\\n\\n    modifier checkManager() {\\n        require(msg.sender == owner() || managers[msg.sender], \\\"not manager\\\");\\n        _;\\n    }\\n\\n    constructor(Parameters memory param) Ownable(param.owner) {\\n        require(\\n            block.timestamp < param.distribution_start &&\\n                param.distribution_start < param.distribution_end,\\n            \\\"invalid vault duration\\\"\\n        );\\n\\n        require(address(param.depositToken) != address(0), \\\"wrong token\\\");\\n        require(address(param.distributeToken) != address(0), \\\"wrong token\\\");\\n\\n        distributeToken = param.distributeToken;\\n        depositToken = param.depositToken;\\n        feeType = param.feeType;\\n\\n        require(param.category > 0, \\\"invalid category\\\");\\n\\n        id = param.id;\\n\\n        price = param.price;\\n\\n        withdrawReceiver = param.receiver;\\n\\n        category = param.category;\\n\\n        distribution_start = param.distribution_start;\\n\\n        distribution_end = param.distribution_end;\\n\\n        deposit_open = param.deposit_open;\\n\\n        deposit_close = param.deposit_close;\\n\\n        name = param.name;\\n\\n        helper = param.helper;\\n\\n        onlyWhitelisted = param.onlyWhitelist;\\n\\n        managers[param.manager] = true;\\n\\n        gfi_tier_access = param.gfi_tier_access;\\n        access_type = param.access_type;\\n\\n        maxTotalDeposit = param.maxDeposit;\\n        maxUserDeposit = param.maxPerUser;\\n        minUserDeposit = param.minPerUser;\\n\\n        adminReceiver = param.adminFeeReceiver;\\n        adminFee = param.adminFeeAmount;\\n\\n        partnerReceiver = param.partnerFeeReceivers[0];\\n        partnerFee = param.partnerFeeAmounts[0];\\n\\n        partnerReceiver2 = param.partnerFeeReceivers[1];\\n        partnerFee2 = param.partnerFeeAmounts[1];\\n\\n        partnerReceiver3 = param.partnerFeeReceivers[1];\\n        partnerFee3 = param.partnerFeeAmounts[1];\\n\\n        require(gfi_tier_access > 0, \\\"wrong gfi tier\\\");\\n    }\\n\\n    function info() external view returns (SaleVaultInfo memory) {\\n        return\\n            SaleVaultInfo({\\n                id: id,\\n                category: category,\\n                price: price,\\n                distribution_start: distribution_start,\\n                distribution_end: distribution_end,\\n                deposit_open: deposit_open,\\n                deposit_close: deposit_close,\\n                totalDeposit: totalDeposit,\\n                totalDistributed: totalDistributed,\\n                allowWithdraw: allowWithdraw,\\n                onlyWhitelisted: onlyWhitelisted,\\n                maxTotalDeposit: maxTotalDeposit,\\n                maxUserDeposit: maxUserDeposit,\\n                minUserDeposit: minUserDeposit,\\n                name: name,\\n                self: address(this),\\n                status: status,\\n                gfi_tier_access: gfi_tier_access,\\n                access_type: access_type,\\n                depositToken: address(depositToken),\\n                distributeToken: address(distributeToken)\\n            });\\n    }\\n\\n    function distributeLength() external view returns (uint256) {\\n        return distributeInfo.length;\\n    }\\n\\n    function feeInfo()\\n        external\\n        view\\n        returns (address[4] memory feeReceivers, uint256[4] memory feeAmounts)\\n    {\\n        feeReceivers[0] = adminReceiver;\\n        feeReceivers[1] = partnerReceiver;\\n        feeReceivers[2] = partnerReceiver2;\\n        feeReceivers[3] = partnerReceiver3;\\n\\n        feeAmounts[0] = adminFee;\\n        feeAmounts[1] = partnerFee;\\n        feeAmounts[2] = partnerFee2;\\n        feeAmounts[3] = partnerFee3;\\n    }\\n\\n    function distribute(uint256 _amount) external checkManager {\\n        require(_amount > 0, \\\"zero amount\\\");\\n        require(block.timestamp > deposit_close, \\\"deposit deposit_open\\\");\\n        uint256 userAmount = _amount;\\n\\n        distributeToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n\\n        if (!feeType) {\\n            uint256 totalFeeAmount = _amount;\\n\\n            uint256 adminFeeAmount = (totalFeeAmount * adminFee) / FEE_DECIMAL;\\n            uint256 partnerFeeAmount = (totalFeeAmount * partnerFee) /\\n                FEE_DECIMAL;\\n            uint256 partnerFeeAmount2 = (totalFeeAmount * partnerFee2) /\\n                FEE_DECIMAL;\\n            uint256 partnerFeeAmount3 = (totalFeeAmount * partnerFee3) /\\n                FEE_DECIMAL;\\n\\n            userAmount =\\n                _amount -\\n                adminFeeAmount -\\n                partnerFeeAmount -\\n                partnerFeeAmount2 -\\n                partnerFeeAmount3;\\n\\n            if (adminFeeAmount > 0 && adminReceiver != address(0)) {\\n                distributeToken.safeTransfer(adminReceiver, adminFeeAmount);\\n            }\\n            if (partnerFeeAmount > 0 && partnerReceiver != address(0)) {\\n                distributeToken.safeTransfer(partnerReceiver, partnerFeeAmount);\\n            }\\n            if (partnerFeeAmount2 > 0 && partnerReceiver2 != address(0)) {\\n                distributeToken.safeTransfer(\\n                    partnerReceiver2,\\n                    partnerFeeAmount2\\n                );\\n            }\\n            if (partnerFeeAmount3 > 0 && partnerReceiver3 != address(0)) {\\n                distributeToken.safeTransfer(\\n                    partnerReceiver3,\\n                    partnerFeeAmount3\\n                );\\n            }\\n        }\\n\\n        totalDistributed += _amount;\\n\\n        distributeInfo.push(\\n            Deposit({\\n                amount: _amount,\\n                distribute: userAmount,\\n                when: block.timestamp\\n            })\\n        );\\n        if (!allowWithdraw) {\\n            allowWithdraw = true;\\n        }\\n\\n        emit AdminDeposit(_amount, block.timestamp);\\n    }\\n\\n    function deposit(uint256 _amount) external {\\n        require(block.timestamp > deposit_open, \\\"not deposit window yet\\\");\\n        require(block.timestamp < deposit_close, \\\"deposit ended\\\");\\n\\n        require(_amount > 0, \\\"invalid amount\\\");\\n        if (access_type == 1) {\\n            require(\\n                IHelper(helper).checkWhitelist(msg.sender, address(this)),\\n                \\\"not whitelisted for this category vault\\\"\\n            );\\n        }\\n\\n        depositToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n\\n        if (feeType) {\\n            uint256 totalFeeAmount = _amount;\\n\\n            uint256 adminFeeAmount = (totalFeeAmount * adminFee) / FEE_DECIMAL;\\n            uint256 partnerFeeAmount = (totalFeeAmount * partnerFee) /\\n                FEE_DECIMAL;\\n            uint256 partnerFeeAmount2 = (totalFeeAmount * partnerFee2) /\\n                FEE_DECIMAL;\\n            uint256 partnerFeeAmount3 = (totalFeeAmount * partnerFee3) /\\n                FEE_DECIMAL;\\n\\n            if (adminFeeAmount > 0 && adminReceiver != address(0)) {\\n                depositToken.safeTransfer(adminReceiver, adminFeeAmount);\\n            }\\n            if (partnerFeeAmount > 0 && partnerReceiver != address(0)) {\\n                depositToken.safeTransfer(partnerReceiver, partnerFeeAmount);\\n            }\\n            if (partnerFeeAmount2 > 0 && partnerReceiver2 != address(0)) {\\n                depositToken.safeTransfer(partnerReceiver2, partnerFeeAmount2);\\n            }\\n            if (partnerFeeAmount3 > 0 && partnerReceiver3 != address(0)) {\\n                depositToken.safeTransfer(partnerReceiver3, partnerFeeAmount3);\\n            }\\n        }\\n\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        user.amount += _amount;\\n\\n        totalDeposit += _amount;\\n\\n        require(maxTotalDeposit >= totalDeposit, \\\"reached max deposit\\\");\\n\\n        require(maxUserDeposit >= user.amount, \\\"reached user max deposit\\\");\\n\\n        require(minUserDeposit <= _amount, \\\"small deposit\\\");\\n\\n        emit UserDeposit(address(msg.sender), _amount, block.timestamp);\\n    }\\n\\n    function updateDescription(string[] memory _des) external checkManager {\\n        descripton = _des;\\n    }\\n\\n    function getDescription() external view returns (string[] memory) {\\n        return descripton;\\n    }\\n\\n    function adminWithdraw() external checkManager {\\n        require(!adminWithdrawed, \\\"double admin withdraw\\\");\\n\\n        require(block.timestamp > deposit_close, \\\"deposit deposit_open\\\");\\n\\n        uint256 total = depositToken.balanceOf(address(this));\\n\\n        adminWithdrawed = true;\\n\\n        depositToken.safeTransfer(withdrawReceiver, total);\\n    }\\n\\n    function availableWithdraw(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n\\n        uint256 amount;\\n\\n        for (uint256 j = user.admin; j < distributeInfo.length; j++) {\\n            Deposit memory depositInfo = distributeInfo[j];\\n            amount += (user.amount * depositInfo.distribute) / totalDeposit;\\n        }\\n\\n        return amount;\\n    }\\n\\n    function withdraw() external {\\n        require(block.timestamp >= deposit_close, \\\"You can't withdraw yet\\\");\\n\\n        require(allowWithdraw, \\\"You can't withdraw yet\\\");\\n\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        require(user.amount > 0, \\\"not deposited\\\");\\n\\n        uint256 amount;\\n\\n        for (uint256 j = user.admin; j < distributeInfo.length; j++) {\\n            Deposit memory depositInfo = distributeInfo[j];\\n            amount += (user.amount * depositInfo.distribute) / totalDeposit;\\n        }\\n\\n        require(amount > 0, \\\"invalid withdraw\\\");\\n\\n        user.admin = distributeInfo.length;\\n\\n        user.withdraw += amount;\\n\\n        distributeToken.safeTransfer(address(msg.sender), amount);\\n\\n        emit Withdrawal(address(msg.sender), amount, block.timestamp);\\n    }\\n\\n    function updateCategory(uint256 _category) external onlyOwner {\\n        category = _category;\\n    }\\n\\n    function updateDistributeToken(address _distributeToken) external onlyOwner {\\n        distributeToken = IERC20(_distributeToken);\\n    }\\n\\n    function updateFeeType(bool _feeType) external onlyOwner {\\n        require(block.timestamp < deposit_open, \\\"deposit started\\\");\\n        feeType = _feeType;\\n    }\\n\\n    function updateGFITier(uint8 _tier) external onlyOwner {\\n        require(gfi_tier_access > 0, \\\"wrong gfi tier\\\");\\n        gfi_tier_access = _tier;\\n    }\\n\\n    function updateAccessType(uint8 _access) external onlyOwner {\\n        access_type = _access;\\n    }\\n\\n    function updateHelper(address _helper) external onlyOwner {\\n        helper = _helper;\\n    }\\n\\n    function updateWithdrawReceiver(address _receiver) external onlyOwner {\\n        withdrawReceiver = _receiver;\\n    }\\n\\n    function updateDisplay(bool _flag) external checkManager {\\n        onlyWhitelisted = _flag;\\n    }\\n\\n    function updateStrategyName(string memory _name) external checkManager {\\n        name = _name;\\n    }\\n\\n    function updateStatus(uint8 _status) external checkManager {\\n        status = _status;\\n    }\\n\\n    function updateManager(address _manager, bool flag) external onlyOwner {\\n        managers[_manager] = flag;\\n    }\\n\\n    function updateMaxTotal(uint256 _max) external checkManager {\\n        maxTotalDeposit = _max;\\n    }\\n\\n    function updateMaxUser(uint256 _max) external checkManager {\\n        maxUserDeposit = _max;\\n    }\\n\\n    function updateMinUser(uint256 _min) external checkManager {\\n        minUserDeposit = _min;\\n    }\\n\\n    function updateDistributionStart(uint256 _start) external checkManager {\\n        distribution_start = _start;\\n    }\\n\\n    function updateDistributionEnd(uint256 _end) external checkManager {\\n        distribution_end = _end;\\n    }\\n\\n    function updateDepositOpen(uint256 _open) external checkManager {\\n        require(block.timestamp < deposit_open, \\\"deposit started\\\");\\n        deposit_open = _open;\\n    }\\n\\n    function updateDepositClose(uint256 _close) external checkManager {\\n        deposit_close = _close;\\n    }\\n\\n    function updatePrice(uint256 _price) external checkManager {\\n        price = _price;\\n    }\\n\\n    function updateAdmin(address _admin) external onlyOwner {\\n        adminReceiver = _admin;\\n    }\\n\\n    function updateAdminFee(uint256 _admin) external onlyOwner {\\n        adminFee = _admin;\\n    }\\n\\n    function updatePartner(address _partner) external onlyOwner {\\n        partnerReceiver = _partner;\\n    }\\n\\n    function updatePartnerFee(uint256 _partner) external onlyOwner {\\n        partnerFee = _partner;\\n    }\\n\\n    function updatePartner2(address _partner) external onlyOwner {\\n        partnerReceiver2 = _partner;\\n    }\\n\\n    function updatePartnerFee2(uint256 _partner) external onlyOwner {\\n        partnerFee2 = _partner;\\n    }\\n\\n    function updatePartner3(address _partner) external onlyOwner {\\n        partnerReceiver3 = _partner;\\n    }\\n\\n    function updatePartnerFee3(uint256 _partner) external onlyOwner {\\n        partnerFee3 = _partner;\\n    }\\n\\n    function updateWithdrawal(bool _flag) external onlyOwner {\\n        allowWithdraw = _flag;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"distributeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_close\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onlyWhitelist\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"gfi_tier_access\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"access_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPerUser\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adminFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[3]\",\"name\":\"partnerFeeReceivers\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"partnerFeeAmounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"feeType\",\"type\":\"bool\"}],\"internalType\":\"struct Parameters\",\"name\":\"param\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"AdminDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"access_type\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"availableWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"category\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit_close\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit_open\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"descripton\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribution_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribution_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInfo\",\"outputs\":[{\"internalType\":\"address[4]\",\"name\":\"feeReceivers\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"feeAmounts\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDescription\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gfi_tier_access\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_close\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDistributed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyWhitelisted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUserDeposit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gfi_tier_access\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"access_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributeToken\",\"type\":\"address\"}],\"internalType\":\"struct SaleVaultInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUserDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUserDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerFee3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerReceiver2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerReceiver3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_access\",\"type\":\"uint8\"}],\"name\":\"updateAccessType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_admin\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_category\",\"type\":\"uint256\"}],\"name\":\"updateCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_close\",\"type\":\"uint256\"}],\"name\":\"updateDepositClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_open\",\"type\":\"uint256\"}],\"name\":\"updateDepositOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_des\",\"type\":\"string[]\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"updateDisplay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributeToken\",\"type\":\"address\"}],\"name\":\"updateDistributeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"updateDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"updateDistributionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_feeType\",\"type\":\"bool\"}],\"name\":\"updateFeeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"updateGFITier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"}],\"name\":\"updateHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"updateMaxUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"updateMinUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartner2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartner3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partner\",\"type\":\"uint256\"}],\"name\":\"updatePartnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partner\",\"type\":\"uint256\"}],\"name\":\"updatePartnerFee2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partner\",\"type\":\"uint256\"}],\"name\":\"updatePartnerFee3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateStrategyName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"updateWithdrawReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"updateWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SaleVault", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000016c0da917be394ebba774809fd22966ea09c6ab800000000000000000000000000000000000000000000000000000000000000960000000000000000000000000000000000000000000000000000000065e7c15f0000000000000000000000000000000000000000000000000000000065ea64230000000000000000000000000000000000000000000000000000000065e7c15f0000000000000000000000000000000000000000000000000000000065ea64230000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000b7378b63c89a56d79efb6b6d647b08f40af42423000000000000000000000000d9b757caceee3266841623d13155dcc97a0ffbf900000000000000000000000016c0da917be394ebba774809fd22966ea09c6ab800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000746a52880000000000000000000000000000000000000000000000000000000006fc23ac00000000000000000000000000000000000000000000000000000000000098968000000000000000000000000016c0da917be394ebba774809fd22966ea09c6ab8000000000000000000000000000000000000000000000000000000000000003200000000000000000000000016c0da917be394ebba774809fd22966ea09c6ab800000000000000000000000016c0da917be394ebba774809fd22966ea09c6ab800000000000000000000000016c0da917be394ebba774809fd22966ea09c6ab8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a53616c65205661756c7400000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}