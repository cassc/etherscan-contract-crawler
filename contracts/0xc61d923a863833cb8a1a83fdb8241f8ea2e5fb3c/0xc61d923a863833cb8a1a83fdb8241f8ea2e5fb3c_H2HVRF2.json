{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/H2HVRF2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\"; // used for the required collections check\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\nimport \\\"./BlackListManager.sol\\\";\\r\\n\\r\\n/// @title H2H competitions\\r\\n/// @author Luis Pando\\r\\n/// @notice It consumes VRF v2 from Chainlink. It has the role\\r\\n/// \\\"operator\\\" that is the one used by a backend app to make some calls\\r\\n/// @dev It saves in an ordered array the player wallet and the current\\r\\n/// entries count. So buying entries has a complexity of O(1)\\r\\n/// For calculating the winner, from the huge random number generated by Chainlink\\r\\n/// a normalized random is generated by using the module method, adding 1 to have\\r\\n/// a random from 1 to entriesCount.\\r\\n/// So next step is to perform a binary search on the ordered array to get the\\r\\n/// player O(log n)\\r\\n/// Example:\\r\\n/// 0 -> { 1, player1} as player1 buys 1 entry\\r\\n/// 1 -> {51, player2} as player2 buys 50 entries\\r\\n/// 2 -> {52, player3} as player3 buys 1 entry\\r\\n/// 3 -> {53, player4} as player4 buys 1 entry\\r\\n/// 4 -> {153, player5} as player5 buys 100 entries\\r\\n/// So the setWinner method performs a binary search on that sorted array to get the upper bound.\\r\\n/// If the random number generated is 150, the winner is player5. If the random number is 20, winner is player2\\r\\n///\\r\\n/// There are 3 possible scenarios for a competition\\r\\n/// -SCENARIO 1. If there are enough players, it calls chainlink VRF v2 to get a winner\\r\\n/// that takes all.\\r\\n/// -SCENARIO 2. If there are players, but not enough, the first one will get unfulfilledAmount\\r\\n/// (for example 0.6 ETH) instead of the amount entered to buy (for example 0.55 ETH).\\r\\n/// The rest of the players get the amount entered to buy (0.55 ETH) so there is an incentive\\r\\n/// to be the first to participate. It is designed to allow n participants, not only 2.\\r\\n/// The contract must have some ETH in the balance to cover the difference between the amount used\\r\\n/// to buy and the failureAmount (0.05 ETH in this competition).\\r\\n/// But there is no need to call stake, just transfer ETH to the contract\\r\\n/// -SCENARIO 3. If there are no players at all, the competition is canceled, and no fund is sent\\r\\n/// to anyone\\r\\n/// In scenario 1, the status of the competition is ENDED. In scenario 2 is UNFULFILLED and in 3,\\r\\n/// the status of the competition is CANCELED\\r\\ncontract H2HVRF2 is\\r\\n    AccessControl,\\r\\n    ReentrancyGuard,\\r\\n    VRFConsumerBaseV2,\\r\\n    ConfirmedOwner\\r\\n{\\r\\n    ////////// CHAINLINK VRF v2 /////////////////\\r\\n\\r\\n    VRFCoordinatorV2Interface COORDINATOR;\\r\\n\\r\\n    // Your subscription ID.\\r\\n    uint64 immutable s_subscriptionId;\\r\\n\\r\\n    // Goerli coordinator. For other networks,\\r\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n    address immutable vrfCoordinator; // = 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D;\\r\\n\\r\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\r\\n    // For a list of available gas lanes on each network,\\r\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\r\\n    bytes32 immutable keyHash; // = 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15;\\r\\n\\r\\n    // Depends on the number of requested values that you want sent to the\\r\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\r\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\r\\n    // this limit based on the network that you select, the size of the request,\\r\\n    // and the processing of the callback request in the fulfillRandomWords()\\r\\n    // function.\\r\\n    uint32 callbackGasLimit = 300000;\\r\\n\\r\\n    // The default is 3, but you can set this higher.\\r\\n    uint16 immutable requestConfirmations = 3;\\r\\n\\r\\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\r\\n    uint32 immutable numWords = 5;\\r\\n\\r\\n    address s_owner;\\r\\n\\r\\n    uint256 internal fee; // fee paid in LINK to chainlink. 0.1 in Rinkeby, 2 in mainnet\\r\\n\\r\\n    struct RequestStatus {\\r\\n        bool fulfilled; // whether the request has been successfully fulfilled\\r\\n        bool exists; // whether a requestId exists\\r\\n        uint256[] randomWords; // array with random numbers generated\\r\\n        uint256 id; // competition Id\\r\\n        uint256 size; // number of players\\r\\n    }\\r\\n    mapping(uint256 => RequestStatus) public s_requests;\\r\\n\\r\\n    /////////////// END CHAINKINK VRF V2 //////////////\\r\\n\\r\\n    // event sent when the smart contract calls Chainlink\u00b4s VRF v2 to generate a set of random numbers\\r\\n    event RandomNumberRequested(uint256 indexed raffleId, uint256 size);\\r\\n\\r\\n    // event sent when the random number is generated by the VRF. In SCENARIO 1 so there is a winner\\r\\n    event RandomNumberCreated(\\r\\n        uint256 indexed idFromMetawin,\\r\\n        uint256 randomNumber,\\r\\n        uint256 normalizedRandomNumber\\r\\n    );\\r\\n\\r\\n    // Event generated in SCENARIO 2, when there are players but not enough so no winner is selected\\r\\n    // so players are refunded except the first player to buy, who gets an extra\\r\\n    event RaffleUnfulfilled(\\r\\n        uint256 indexed raffleId,\\r\\n        address winner,\\r\\n        uint256 unfunfilledAmount,\\r\\n        uint256 randomNumber,\\r\\n        uint256 amountRaised\\r\\n    );\\r\\n    struct RaffleInfo {\\r\\n        uint256 id; // raffleId\\r\\n        uint256 size; // length of the entries array of that raffle\\r\\n    }\\r\\n\\r\\n    // Event sent when the raffle is created by the operator\\r\\n    event RaffleCreated(uint256 indexed raffleId, uint256 indexed prizeAmount);\\r\\n    // Event sent when the raffle is finished (either early cashout or successful completion)\\r\\n    event RaffleEnded(\\r\\n        uint256 indexed raffleId,\\r\\n        address indexed winner,\\r\\n        uint256 amountRaised,\\r\\n        uint256 randomNumber\\r\\n    );\\r\\n    // Event sent when one or more entries are sold (info from the price structure)\\r\\n    event EntrySold(\\r\\n        uint256 indexed raffleId,\\r\\n        address indexed buyer,\\r\\n        uint256 currentSize,\\r\\n        uint256 priceStructureId\\r\\n    );\\r\\n    // Event sent when a free entry is added by the hamburguer\\r\\n    event FreeEntry(\\r\\n        uint256 indexed raffleId,\\r\\n        address[] buyer,\\r\\n        uint256 amount,\\r\\n        uint256 currentSize\\r\\n    );\\r\\n    // Event sent when a raffle is asked to cancel by the operator\\r\\n    event RaffleCancelled(uint256 indexed raffleId, uint256 amountRaised);\\r\\n    // The raffle is closed successfully and the platform receives the fee\\r\\n    event FeeTransferredToPlatform(\\r\\n        uint256 indexed raffleId,\\r\\n        uint256 amountTransferred\\r\\n    );\\r\\n    event SetWinnerTriggered(uint256 indexed raffleId, uint256 amountRaised);\\r\\n    // Emitted when an entry is cancelled\\r\\n    event EntryCancelled(\\r\\n        uint256 indexed raffleId,\\r\\n        uint256 amountOfEntriesCanceled,\\r\\n        address player\\r\\n    );\\r\\n\\r\\n    // In order to calculate the winner, in this struct is saved for each bought the data\\r\\n    struct EntriesBought {\\r\\n        uint256 currentEntriesLength; // current amount of entries bought in the raffle\\r\\n        address player; // wallet address of the player\\r\\n    }\\r\\n    // every raffle has a sorted array of EntriesBought. Each element is created when calling\\r\\n    // either buyEntry or giveBatchEntriesForFree\\r\\n    mapping(uint256 => EntriesBought[]) public entriesList;\\r\\n\\r\\n    // Main raffle data struct\\r\\n    struct RaffleStruct {\\r\\n        STATUS status; // status of the raffle. Can be created, accepted, ended, etc\\r\\n        uint48 totalEntriesCap;\\r\\n        uint48 randomNumber; // normalized (0-Entries array size) random number generated by the VRF\\r\\n        uint48 entriesLength; // to easy frontend, the length of the entries array is saved here\\r\\n        uint48 cancellingDate;\\r\\n        address[] collectionWhitelist; // addresses of the required nfts. Will be empty if no NFT is required to buy\\r\\n        address winner; // address of thed winner of the raffle. Address(0) if no winner yet\\r\\n        ENTRY_TYPE entryType;\\r\\n        uint128 unfulfilledAmount; // amount paid to the first player that bought if the compt is canceled\\r\\n        uint128 price; // price to pay to buy a single entry\\r\\n        uint128 amountOfETH; // Amount of ETH of the prize\\r\\n        uint128 amountRaised; // funds raised so far in wei\\r\\n    }\\r\\n    // The main structure is an array of raffles\\r\\n    RaffleStruct[] public raffles;\\r\\n\\r\\n    // Map that contains the number of entries each user has bought, to prevent abuse\\r\\n    /*  struct ClaimStruct {\\r\\n        uint48 numEntriesPerUser;\\r\\n    }*/\\r\\n    mapping(bytes32 => bool) public claimsData;\\r\\n\\r\\n    // Map with the addresses linked to a particular raffle + nft\\r\\n    mapping(bytes32 => address) public requiredNFTWallets;\\r\\n\\r\\n    // All the different status a competition can have\\r\\n    enum STATUS {\\r\\n        CREATED, // the operator creates the raffle\\r\\n        ACCEPTED, // the seller stakes the ETH for the raffle\\r\\n        EARLY_CASHOUT, // the seller wants to cashout early\\r\\n        CANCELLED, // the operator cancels the raffle and transfer the remaining funds after 30 days passes\\r\\n        CLOSING_REQUESTED, // the operator sets a winner\\r\\n        ENDED, // the raffle is finished, and the funds were transferred\\r\\n        CANCEL_REQUESTED, // operator asks to cancel the raffle. Players has 30 days to ask for a refund\\r\\n        UNFULFILLED // there are players, but not enough. First player that bought get an extra as incentive\\r\\n    }\\r\\n\\r\\n    enum ENTRY_TYPE {\\r\\n        ONLY_DIRECTLY,\\r\\n        ONLY_EXTERNAL_CONTRACT,\\r\\n        MIXED\\r\\n    }\\r\\n\\r\\n    // The operator role is operated by a backend application\\r\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR\\\");\\r\\n    // requested by Hamburger. Role for the buy method of the hamburger (only that contract)\\r\\n    bytes32 public constant MINTERCONTRACT_ROLE = keccak256(\\\"MINTERCONTRACT\\\");\\r\\n\\r\\n    // address of the wallet controlled by the platform that will receive the platform fee\\r\\n    address payable public destinationWallet =\\r\\n        payable(0x52a032cF59eA274f9D745f29b6D514fe95Ba192D);\\r\\n\\r\\n    // contract that contains the black list\\r\\n    BlackListManager blackListManager;\\r\\n\\r\\n    constructor(\\r\\n        address _blacklistManager,\\r\\n        uint64 subscriptionId,\\r\\n        address _vrfCoordinator,\\r\\n        bytes32 _keyHash\\r\\n    ) VRFConsumerBaseV2(_vrfCoordinator) ConfirmedOwner(msg.sender) {\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\r\\n        vrfCoordinator = _vrfCoordinator;\\r\\n        keyHash = _keyHash;\\r\\n        s_owner = msg.sender;\\r\\n        s_subscriptionId = subscriptionId;\\r\\n\\r\\n        _setupRole(OPERATOR_ROLE, 0x13503B622abC0bD30A7e9687057DF6E8c42Fb928);\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(OPERATOR_ROLE, msg.sender);\\r\\n\\r\\n        blackListManager = BlackListManager(_blacklistManager);\\r\\n    }\\r\\n\\r\\n    function callVRFAndGetRequestId() internal returns (uint256 requestId) {\\r\\n        // Will revert if subscription is not set and funded.\\r\\n        requestId = COORDINATOR.requestRandomWords(\\r\\n            keyHash,\\r\\n            s_subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimit,\\r\\n            numWords\\r\\n        );\\r\\n        return requestId;\\r\\n    }\\r\\n\\r\\n    /// @dev this is the method that will be called by the smart contract to get a random number\\r\\n    /// @param _id Id of the raffle\\r\\n    /// @param _entriesSize length of the entries array of that raffle\\r\\n    function getRandomNumber(\\r\\n        uint256 _id,\\r\\n        uint256 _entriesSize,\\r\\n        uint256 _requestId\\r\\n    ) internal {\\r\\n        s_requests[_requestId] = RequestStatus({\\r\\n            randomWords: new uint256[](0),\\r\\n            exists: true,\\r\\n            fulfilled: false,\\r\\n            id: _id,\\r\\n            size: _entriesSize\\r\\n        });\\r\\n\\r\\n        emit RandomNumberRequested(_id, _entriesSize);\\r\\n    }\\r\\n\\r\\n    function setWinnerActions(\\r\\n        uint256 _raffleId\\r\\n    ) internal returns (RaffleStruct memory, bool) {\\r\\n        RaffleStruct storage raffle = raffles[_raffleId];\\r\\n\\r\\n        // if there are no participants, when calculating the winner will trigger a division by zero\\r\\n        require(raffle.entriesLength != 0, \\\"No participants in the raffle\\\");\\r\\n\\r\\n        // Check if the raffle is already accepted or is called again because early cashout failed\\r\\n        require(raffle.status == STATUS.ACCEPTED, \\\"Raffle in wrong status\\\");\\r\\n        raffle.status = STATUS.CLOSING_REQUESTED;\\r\\n\\r\\n        emit SetWinnerTriggered(_raffleId, raffle.amountRaised);\\r\\n\\r\\n        if (raffle.entriesLength < raffle.totalEntriesCap) {\\r\\n            closeRaffleAndRefund(_raffleId, 1);\\r\\n            return (raffle, false);\\r\\n        }\\r\\n        return (raffle, true);\\r\\n    }\\r\\n\\r\\n    /// @param _raffleId Id of the raffle\\r\\n    /// @notice the operator finish the raffle, if the desired funds has been reached\\r\\n    /// @dev it triggers Chainlink VRF1 consumer, and generates a random number that is normalized and checked that corresponds to a MW player\\r\\n    function setWinner(\\r\\n        uint256 _raffleId\\r\\n    ) external nonReentrant onlyRole(OPERATOR_ROLE) {\\r\\n        (RaffleStruct memory raffle, bool shouldDoCallback) = setWinnerActions(\\r\\n            _raffleId\\r\\n        );\\r\\n        if (shouldDoCallback) {\\r\\n            uint256 requestId = callVRFAndGetRequestId();\\r\\n            getRandomNumber(_raffleId, raffle.entriesLength, requestId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRequestStatus(\\r\\n        uint256 _requestId\\r\\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\\r\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\r\\n        RequestStatus memory request = s_requests[_requestId];\\r\\n        return (request.fulfilled, request.randomWords);\\r\\n    }\\r\\n\\r\\n    // Called by Chainlink\\r\\n    function fulfillRandomWords(\\r\\n        uint256 _requestId,\\r\\n        uint256[] memory _randomWords\\r\\n    ) internal override {\\r\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\r\\n        s_requests[_requestId].fulfilled = true;\\r\\n        s_requests[_requestId].randomWords = _randomWords;\\r\\n\\r\\n        uint256 normalizedRandomNumber = (_randomWords[0] %\\r\\n            s_requests[_requestId].size) + 1;\\r\\n\\r\\n        uint256 raffleId = s_requests[_requestId].id;\\r\\n        RaffleStruct storage raffle = raffles[raffleId];\\r\\n        raffle.status = STATUS.CLOSING_REQUESTED;\\r\\n\\r\\n        // SCENARIO 1\\r\\n        if (raffle.totalEntriesCap == raffle.entriesLength) {\\r\\n            emit RandomNumberCreated(\\r\\n                raffleId,\\r\\n                _randomWords[0],\\r\\n                normalizedRandomNumber\\r\\n            );\\r\\n            transferFunds(raffleId, normalizedRandomNumber);\\r\\n        }\\r\\n        // SCENARIOS 2 AND 3. Theoretically should never be called as\\r\\n        // the scenario is managed in setwinner\\r\\n        else closeRaffleAndRefund(raffleId, normalizedRandomNumber);\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////////\\r\\n\\r\\n    /// @dev callable by players. Depending on the number of entries assigned to the price structure the player buys (_id parameter)\\r\\n    /// one or more entries will be assigned to the player.\\r\\n    /// Also it is checked the maximum number of entries per user is not reached\\r\\n    /// As the method is payable, in msg.value there will be the amount paid by the user\\r\\n    /// @notice If the operator set requiredNFTs when creating the raffle, only the owners of nft on that collection can make a call to this method. This will be\\r\\n    /// used for special raffles\\r\\n    /// @param _raffleId: id of the raffle\\r\\n    /// @param _collection: collection of the tokenId used. Not used if there is no required nft on the raffle\\r\\n    /// @param _tokenIdUsed: id of the token used in private raffles (to avoid abuse can not be reused on the same raffle)\\r\\n    function buyEntry(\\r\\n        uint256 _raffleId,\\r\\n        address _collection,\\r\\n        uint256 _tokenIdUsed\\r\\n    ) external payable nonReentrant {\\r\\n        RaffleStruct storage raffle = raffles[_raffleId];\\r\\n        uint256 collectionWLLength = raffle.collectionWhitelist.length;\\r\\n\\r\\n        require(raffle.price == msg.value, \\\"Price not reached\\\");\\r\\n        require(\\r\\n            raffle.entryType == ENTRY_TYPE.MIXED ||\\r\\n                raffle.entryType == ENTRY_TYPE.ONLY_DIRECTLY,\\r\\n            \\\"Entry type not allowed\\\"\\r\\n        );\\r\\n        require(\\r\\n            blackListManager.isBlackListed(msg.sender) == false,\\r\\n            \\\"Blacklisted!\\\"\\r\\n        );\\r\\n        // if the raffle requires an nft\\r\\n        if (collectionWLLength > 0) {\\r\\n            bool hasRequiredCollection = false;\\r\\n            for (uint256 i = 0; i < collectionWLLength; i++) {\\r\\n                if (raffle.collectionWhitelist[i] == _collection) {\\r\\n                    hasRequiredCollection = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            require(\\r\\n                hasRequiredCollection == true,\\r\\n                \\\"Not in required collection\\\"\\r\\n            );\\r\\n            IERC721 requiredNFT = IERC721(_collection);\\r\\n            require(\\r\\n                requiredNFT.ownerOf(_tokenIdUsed) == msg.sender,\\r\\n                \\\"Not the owner of tokenId\\\"\\r\\n            );\\r\\n            bytes32 hashRequiredNFT = keccak256(\\r\\n                abi.encode(_collection, _raffleId, _tokenIdUsed)\\r\\n            );\\r\\n            // check the tokenId has not been using yet in the raffle, to avoid abuse\\r\\n            if (requiredNFTWallets[hashRequiredNFT] == address(0)) {\\r\\n                requiredNFTWallets[hashRequiredNFT] = msg.sender;\\r\\n            } else\\r\\n                require(\\r\\n                    requiredNFTWallets[hashRequiredNFT] == msg.sender,\\r\\n                    \\\"tokenId used\\\"\\r\\n                );\\r\\n        }\\r\\n\\r\\n        require(msg.sender != address(0), \\\"msg.sender is null\\\"); // 37\\r\\n        require(raffle.status == STATUS.ACCEPTED, \\\"Raffle is not in accepted\\\"); // 1808\\r\\n\\r\\n        require(\\r\\n            (raffle.totalEntriesCap == 0 ||\\r\\n                (raffle.entriesLength + 1 <= raffle.totalEntriesCap)),\\r\\n            \\\"Total Cap Entries reached\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 hash = keccak256(abi.encode(msg.sender, _raffleId));\\r\\n        // check there are enough entries left for this particular user\\r\\n        require(claimsData[hash] == false, \\\"Bought too many entries\\\");\\r\\n\\r\\n        EntriesBought memory entryBought = EntriesBought({\\r\\n            player: msg.sender,\\r\\n            currentEntriesLength: raffle.entriesLength + 1\\r\\n        });\\r\\n        entriesList[_raffleId].push(entryBought);\\r\\n\\r\\n        raffle.amountRaised += uint128(msg.value);\\r\\n        // update the field entriesLength, used in frontend to avoid making extra calls\\r\\n        raffle.entriesLength = raffle.entriesLength + 1;\\r\\n        // the player already participated on the H2H raffle\\r\\n        claimsData[hash] = true;\\r\\n\\r\\n        emit EntrySold(_raffleId, msg.sender, raffle.entriesLength, 0);\\r\\n    }\\r\\n\\r\\n    // helper method to get the winner address of a raffle\\r\\n    /// @param _raffleId Id of the raffle\\r\\n    /// @param _normalizedRandomNumber Generated by chainlink\\r\\n    /// @return the wallet that won the raffle\\r\\n    /// @dev Uses a binary search on the sorted array to retreive the winner\\r\\n    /// but if the winner candidate is blacklisted, loop through the left looking for\\r\\n    /// a candidate not blacklisted\\r\\n    function getWinnerAddressFromRandom(\\r\\n        uint256 _raffleId,\\r\\n        uint256 _normalizedRandomNumber\\r\\n    ) public view returns (address) {\\r\\n        uint256 position = findUpperBound(\\r\\n            entriesList[_raffleId],\\r\\n            _normalizedRandomNumber\\r\\n        );\\r\\n\\r\\n        address candidate = entriesList[_raffleId][position].player;\\r\\n        // general case\\r\\n        if (candidate != address(0)) return candidate;\\r\\n        // special case. The user is blacklisted, so try next on the left until find a non-blacklisted\\r\\n        else {\\r\\n            bool ended = false;\\r\\n            uint256 i = position;\\r\\n            while (\\r\\n                ended == false && entriesList[_raffleId][i].player == address(0)\\r\\n            ) {\\r\\n                if (i == 0) i = entriesList[_raffleId].length - 1;\\r\\n                else i = i - 1;\\r\\n                // we came to the beginning without finding a non blacklisted player\\r\\n                if (i == position) ended == true;\\r\\n            }\\r\\n            require(!ended, \\\"All users blacklisted\\\");\\r\\n            return entriesList[_raffleId][i].player;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @param array sorted array of EntriesBought. CurrentEntriesLength is the numeric field used to sort\\r\\n    /// @param element uint256 to find. Goes from 1 to entriesLength\\r\\n    /// @dev based on openzeppelin code (v4.0), modified to use an array of EntriesBought\\r\\n    /// Searches a sorted array and returns the first index that contains a value greater or equal to element.\\r\\n    /// If no such index exists (i.e. all values in the array are strictly less than element), the array length is returned. Time complexity O(log n).\\r\\n    /// array is expected to be sorted in ascending order, and to contain no repeated elements.\\r\\n    /// https://docs.openzeppelin.com/contracts/3.x/api/utils#Arrays-findUpperBound-uint256---uint256-\\r\\n    function findUpperBound(\\r\\n        EntriesBought[] memory array,\\r\\n        uint256 element\\r\\n    ) internal pure returns (uint256) {\\r\\n        if (array.length == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 low = 0;\\r\\n        uint256 high = array.length;\\r\\n\\r\\n        while (low < high) {\\r\\n            uint256 mid = Math.average(low, high);\\r\\n\\r\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\r\\n            // because Math.average rounds down (it does integer division with truncation).\\r\\n            if (array[mid].currentEntriesLength > element) {\\r\\n                high = mid;\\r\\n            } else {\\r\\n                low = mid + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\r\\n        if (low > 0 && array[low - 1].currentEntriesLength == element) {\\r\\n            return low - 1;\\r\\n        } else {\\r\\n            return low;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // The operator can call this method once they receive the event \\\"RandomNumberCreated\\\"\\r\\n    // triggered by the VRF v2 consumer contract (RandomNumber.sol)\\r\\n    /// @param _raffleId Id of the raffle\\r\\n    /// @param _normalizedRandomNumber index of the array that contains the winner of the raffle. Generated by chainlink\\r\\n    /// @notice it is the method that sets the winner and transfers funds\\r\\n    /// @dev called by Chainlink callback\\r\\n    function transferFunds(\\r\\n        uint256 _raffleId,\\r\\n        uint256 _normalizedRandomNumber\\r\\n    ) internal nonReentrant {\\r\\n        RaffleStruct storage raffle = raffles[_raffleId];\\r\\n        // Only when the raffle has been asked to be closed and the platform\\r\\n        require(\\r\\n            raffle.status == STATUS.EARLY_CASHOUT ||\\r\\n                raffle.status == STATUS.CLOSING_REQUESTED,\\r\\n            \\\"Raffle in wrong status\\\"\\r\\n        );\\r\\n\\r\\n        raffle.randomNumber = uint48(_normalizedRandomNumber);\\r\\n        raffle.winner = getWinnerAddressFromRandom(\\r\\n            _raffleId,\\r\\n            _normalizedRandomNumber\\r\\n        );\\r\\n        raffle.status = STATUS.ENDED;\\r\\n\\r\\n        (bool sentPrize, ) = raffle.winner.call{value: raffle.amountOfETH}(\\\"\\\");\\r\\n        require(sentPrize, \\\"Failed to send Ether\\\");\\r\\n\\r\\n        // The amount for the platform is not a percentage but raised - prize\\r\\n        uint256 amountForPlatform = (raffle.amountRaised - raffle.amountOfETH);\\r\\n        // transfer the amount to the platform\\r\\n        (bool sent2, ) = destinationWallet.call{value: amountForPlatform}(\\\"\\\");\\r\\n        require(sent2, \\\"Failed send Eth to MW\\\");\\r\\n        emit FeeTransferredToPlatform(_raffleId, amountForPlatform);\\r\\n\\r\\n        emit RaffleEnded(\\r\\n            _raffleId,\\r\\n            raffle.winner,\\r\\n            raffle.amountRaised,\\r\\n            _normalizedRandomNumber\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @param _newAddress new address of the platform\\r\\n    /// @dev Change the wallet of the platform. The one that will receive the platform fee when the raffle is closed.\\r\\n    /// Only the admin can change this\\r\\n    function setDestinationAddress(\\r\\n        address payable _newAddress\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        destinationWallet = _newAddress;\\r\\n    }\\r\\n\\r\\n    /// @param _raffleId Id of the raffle\\r\\n    /// @return array of entries bougth of that particular raffle\\r\\n    function getEntriesBought(\\r\\n        uint256 _raffleId\\r\\n    ) external view returns (EntriesBought[] memory) {\\r\\n        return entriesList[_raffleId];\\r\\n    }\\r\\n\\r\\n    /// @dev if a player has been blacklisted, their entries must be void\\r\\n    /// this has a cost in gas, but this makes cheaper in gas the callback from chainlink\\r\\n    /// This method has to be called for every raffle of the blacklisted player\\r\\n    /// @param _raffleId Id of the raffle\\r\\n    /// @param entriesToCancel array that contains the index of the entries to cancel. 0 based\\r\\n    /// @param _player blacklisted player who owns the entry to be voided\\r\\n    function cancelEntry(\\r\\n        uint256 _raffleId,\\r\\n        uint256[] calldata entriesToCancel,\\r\\n        address _player\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        uint256 totalEntriesBoughtCancelled = 0;\\r\\n        for (uint256 i = 0; i < entriesToCancel.length; i++) {\\r\\n            EntriesBought storage entry = entriesList[_raffleId][\\r\\n                entriesToCancel[i]\\r\\n            ];\\r\\n\\r\\n            require(entry.player == _player, \\\"Entry did not belong to player\\\");\\r\\n\\r\\n            entry.player = address(0);\\r\\n\\r\\n            uint256 previousTotalEntriesLength;\\r\\n            if (entriesToCancel[i] == 0) previousTotalEntriesLength = 0;\\r\\n            else\\r\\n                previousTotalEntriesLength = entriesList[_raffleId][\\r\\n                    entriesToCancel[i] - 1\\r\\n                ].currentEntriesLength;\\r\\n            totalEntriesBoughtCancelled +=\\r\\n                entry.currentEntriesLength -\\r\\n                previousTotalEntriesLength;\\r\\n        }\\r\\n        emit EntryCancelled(_raffleId, totalEntriesBoughtCancelled, _player);\\r\\n    }\\r\\n\\r\\n    // When the contract is replaced, or if there was sent too much ETH to the contract for the\\r\\n    // case of SCENARIO 2, calling this method will sent some ETH from the contract to the\\r\\n    // destination wallet\\r\\n    function withdraw(\\r\\n        uint256 amount\\r\\n    ) external nonReentrant onlyRole(OPERATOR_ROLE) {\\r\\n        (bool sent, ) = destinationWallet.call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Fail send Eth to MW\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a H2H (with multiple players, not only 2)\\r\\n    /// Each player funds the competition by buying entries. So no need to\\r\\n    /// stake on the raffle like in previous versions\\r\\n    /// @dev unfulfilledAmount is the total amount paid to the first buyer in\\r\\n    /// SCENARIO 2. Not an extra fee to add to the amount paid.\\r\\n    /// @param _amountOfETH the prize in weis the winner will get if SCENARIO 1 occurs\\r\\n    /// @param _unfulfilledAmount paid price + extra the first player will get in SCENARIO 2\\r\\n    /// @param _price Amount in weis a player must enter to participate in the H2H competition\\r\\n    function createH2HRaffle(\\r\\n        uint128 _amountOfETH,\\r\\n        uint128 _unfulfilledAmount,\\r\\n        uint128 _price,\\r\\n        address[] calldata _collectionWhitelist,\\r\\n        ENTRY_TYPE _entryType,\\r\\n        uint48 _totalEntriesCap\\r\\n    ) external onlyRole(OPERATOR_ROLE) returns (uint256) {\\r\\n        unchecked {\\r\\n            require(_amountOfETH != 0, \\\"Prize is 0\\\");\\r\\n\\r\\n            RaffleStruct memory raffle = RaffleStruct({\\r\\n                status: STATUS.ACCEPTED, // no stake, so it is automatically in accepted\\r\\n                amountOfETH: _amountOfETH,\\r\\n                winner: address(0),\\r\\n                randomNumber: 0,\\r\\n                amountRaised: 0,\\r\\n                entriesLength: 0,\\r\\n                cancellingDate: 0,\\r\\n                collectionWhitelist: _collectionWhitelist,\\r\\n                entryType: _entryType,\\r\\n                totalEntriesCap: _totalEntriesCap,\\r\\n                unfulfilledAmount: _unfulfilledAmount,\\r\\n                price: _price\\r\\n            });\\r\\n\\r\\n            raffles.push(raffle);\\r\\n\\r\\n            uint256 raffleId = raffles.length - 1;\\r\\n\\r\\n            emit RaffleCreated(raffleId, _amountOfETH);\\r\\n\\r\\n            return raffleId;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev This method manages SCENARIO 2 and SCENARIO 3\\r\\n    /// So when a raffle cannot be fulfilled because either there are no purchases\\r\\n    /// or there are only a few players.\\r\\n    /// @param _raffleId Id of the raffle\\r\\n    /// @param _normalizedRandomNumber index of the array that contains the winner of the raffle. Generated by chainlink\\r\\n    function closeRaffleAndRefund(\\r\\n        uint256 _raffleId,\\r\\n        uint256 _normalizedRandomNumber\\r\\n    ) internal {\\r\\n        RaffleStruct storage raffle = raffles[_raffleId];\\r\\n        require(raffle.status == STATUS.CLOSING_REQUESTED, \\\"Wrong status\\\");\\r\\n        uint256 amountOfEntries = raffle.entriesLength;\\r\\n\\r\\n        // SCENARIO 2\\r\\n        // There are boughts, but not enough to reach the required amount\\r\\n        // The first player to bought, gets an extra amount to incentivate players to participate\\r\\n        // The status of the competition is not cancelled but UNFULFILLED, and a new event is sent\\r\\n        if (amountOfEntries != 0) {\\r\\n            uint256 amountToRefundPerPlayer = raffle.price;\\r\\n            require(\\r\\n                address(this).balance >\\r\\n                    raffle.unfulfilledAmount +\\r\\n                        (amountToRefundPerPlayer * (amountOfEntries - 1)),\\r\\n                \\\"Not enough balance\\\"\\r\\n            );\\r\\n\\r\\n            raffle.status = STATUS.UNFULFILLED;\\r\\n            raffle.winner = entriesList[_raffleId][0].player;\\r\\n            raffle.randomNumber = uint48(_normalizedRandomNumber);\\r\\n            emit RaffleUnfulfilled(\\r\\n                _raffleId,\\r\\n                raffle.winner,\\r\\n                raffle.unfulfilledAmount,\\r\\n                _normalizedRandomNumber,\\r\\n                raffle.amountRaised\\r\\n            );\\r\\n\\r\\n            for (uint256 i; i < amountOfEntries; ++i) {\\r\\n                if (i == 0) // first player has special bonus\\r\\n                {\\r\\n                    (bool sentFundsBack, ) = entriesList[_raffleId][i]\\r\\n                        .player\\r\\n                        .call{value: raffle.unfulfilledAmount}(\\\"\\\");\\r\\n                    require(sentFundsBack, \\\"Failed to send Ether 1\\\");\\r\\n                } else {\\r\\n                    (bool sentFundsBack, ) = entriesList[_raffleId][i]\\r\\n                        .player\\r\\n                        .call{value: amountToRefundPerPlayer}(\\\"\\\");\\r\\n                    require(sentFundsBack, \\\"Failed to send Ether 2\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        // SCENARIO 3.\\r\\n        // Nobody boughts, no need to refund anything. Just set status to cancelled and send event\\r\\n        // Theoretically this branch should never be reached, as there are checks done both back\\r\\n        // and in method SetWinner to avoid calling chainlink if there are 0 entries bought\\r\\n        else {\\r\\n            raffle.status = STATUS.CANCELLED;\\r\\n            raffle.cancellingDate = uint48(block.timestamp);\\r\\n            emit RaffleCancelled(_raffleId, raffle.amountRaised);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Will receive any eth sent to the contract. We will use it to send some ETH\\r\\n    /// for the case of the extra amount paid to first player to buy in SCENARIO 2\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// @dev lets the operator to change the blacklist contract used. For example in case\\r\\n    /// of updating the blacklistManager contract\\r\\n    /// @param _blacklistManager address of the new BlacklistManager contract\\r\\n    function changeBlackList(\\r\\n        address _blacklistManager\\r\\n    ) external onlyRole(OPERATOR_ROLE) {\\r\\n        blackListManager = BlackListManager(_blacklistManager);\\r\\n    }\\r\\n\\r\\n    /// @dev cancels a raffle, and in the case of having some entries bought, it refunds them\\r\\n    /// Avoid cancelling two times the same raffle\\r\\n    function cancelRaffle(uint256 _raffleId) external onlyRole(OPERATOR_ROLE) {\\r\\n        RaffleStruct storage raffle = raffles[_raffleId];\\r\\n        require(raffle.status != STATUS.CANCELLED, \\\"Already canceled\\\");\\r\\n        uint256 amountOfEntries = raffle.entriesLength;\\r\\n\\r\\n        // if there are already players\\r\\n        if (amountOfEntries > 0) {\\r\\n            // send funds back to existing players\\r\\n            for (uint256 i; i < amountOfEntries; ++i) {\\r\\n                (bool sentFundsBack, ) = entriesList[_raffleId][i].player.call{\\r\\n                    value: raffle.price\\r\\n                }(\\\"\\\");\\r\\n                require(sentFundsBack, \\\"Failed to refund\\\");\\r\\n            }\\r\\n        }\\r\\n        raffle.status = STATUS.CANCELLED;\\r\\n        raffle.cancellingDate = uint48(block.timestamp);\\r\\n        emit RaffleCancelled(_raffleId, raffle.amountRaised);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/BlackListManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\n/// @title Blacklist manager\\r\\n/// @author Luis Pando\\r\\n/// @notice Manages the players that are blacklisted\\r\\n/// @dev A player is blacklisted for all the raffles at once.\\r\\ncontract BlackListManager is AccessControl {\\r\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR\\\");\\r\\n\\r\\n    struct BlackListStruct {\\r\\n        bool blacklisted;   // is blacklisted the user\\r\\n        uint256 dateBlacklisted; // when was blacklisted for the first time\\r\\n    }\\r\\n    // map with the wallet of the player as key\\r\\n    mapping(address => BlackListStruct) public blackList;\\r\\n\\r\\n    constructor() {\\r\\n        _setupRole(OPERATOR_ROLE, msg.sender);\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Add a player to the blacklist. The blacklist is common for all the raffles\\r\\n    /// @dev the user could be added and removed from the blacklist several times, but the\\r\\n    /// field dateBlacklisted will contain the date of when the user was added, even if was removed\\r\\n    /// @param _player User that has suspicious behaviour and that will be blacklisted\\r\\n    function addToBlackList(address _player) external onlyRole(OPERATOR_ROLE) {\\r\\n        BlackListStruct memory blElement = BlackListStruct({\\r\\n            blacklisted: true,\\r\\n            dateBlacklisted: block.timestamp\\r\\n        });\\r\\n        blackList[_player] = blElement;\\r\\n    }\\r\\n\\r\\n    /// @notice remove a player from the blacklist\\r\\n    /// @param _player that will be removed from the blacklist and will be able to buy entries again\\r\\n    function removeFromBlackList(address _player)\\r\\n        external\\r\\n        onlyRole(OPERATOR_ROLE)\\r\\n    {\\r\\n        blackList[_player].blacklisted = false;\\r\\n    }\\r\\n\\r\\n    /// @notice returns if a player is in the blacklist\\r\\n    /// @param _player User to check if blacklisted or not\\r\\n    /// @return true if the user wallet is in the blacklist. False otherwise\\r\\n    function isBlackListed(address _player) external view returns (bool) {\\r\\n        return blackList[_player].blacklisted;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the date (if any) when the user was blacklisted for first time\\r\\n    /// @dev The returned value will exists even if the user was removed from the blacklist\\r\\n    /// Do not use it without calling isBlacklisted first\\r\\n    /// @param _player User to return the date when blacklisted\\r\\n    /// @return a number with the epoch of when the player was blacklisted. 0 if never blacklisted\\r\\n    function getBlackListedDate(address _player) external view returns (uint256) {\\r\\n        return blackList[_player].dateBlacklisted;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blacklistManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfEntriesCanceled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"EntryCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceStructureId\",\"type\":\"uint256\"}],\"name\":\"EntrySold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransferred\",\"type\":\"uint256\"}],\"name\":\"FeeTransferredToPlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"buyer\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentSize\",\"type\":\"uint256\"}],\"name\":\"FreeEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"RaffleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"}],\"name\":\"RaffleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"RaffleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unfunfilledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"RaffleUnfulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idFromMetawin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalizedRandomNumber\",\"type\":\"uint256\"}],\"name\":\"RandomNumberCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"RandomNumberRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"SetWinnerTriggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTERCONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdUsed\",\"type\":\"uint256\"}],\"name\":\"buyEntry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"entriesToCancel\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"cancelEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"cancelRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blacklistManager\",\"type\":\"address\"}],\"name\":\"changeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimsData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amountOfETH\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_unfulfilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_price\",\"type\":\"uint128\"},{\"internalType\":\"address[]\",\"name\":\"_collectionWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"enum H2HVRF2.ENTRY_TYPE\",\"name\":\"_entryType\",\"type\":\"uint8\"},{\"internalType\":\"uint48\",\"name\":\"_totalEntriesCap\",\"type\":\"uint48\"}],\"name\":\"createH2HRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destinationWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entriesList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentEntriesLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getEntriesBought\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentEntriesLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"internalType\":\"struct H2HVRF2.EntriesBought[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_normalizedRandomNumber\",\"type\":\"uint256\"}],\"name\":\"getWinnerAddressFromRandom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"enum H2HVRF2.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint48\",\"name\":\"totalEntriesCap\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"randomNumber\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"entriesLength\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"cancellingDate\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"enum H2HVRF2.ENTRY_TYPE\",\"name\":\"entryType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"unfulfilledAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountOfETH\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountRaised\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requiredNFTWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setDestinationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"setWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "H2HVRF2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003be4bef162cd158887cfdca89a34fae107ab2c740000000000000000000000000000000000000000000000000000000000000254000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e699098af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}