{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <=0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMessengerWrapper {\\n    function sendCrossDomainMessage(bytes memory _calldata) external;\\n    function verifySender(address l1BridgeCaller, bytes memory _data) external;\\n    function confirmRoots(\\n        bytes32[] calldata rootHashes,\\n        uint256[] calldata destinationChainIds,\\n        uint256[] calldata totalAmounts,\\n        uint256[] calldata rootCommittedAts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/optimism/messengers/iOVM_BaseCrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// +build ovm\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_BaseCrossDomainMessenger\\n */\\ninterface iOVM_BaseCrossDomainMessenger {\\n\\n    /**********\\n     * Events *\\n     **********/\\n    event SentMessage(bytes message);\\n    event RelayedMessage(bytes32 msgHash);\\n\\n    /**********************\\n     * Contract Variables *\\n     **********************/\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n\\n    function deposit(\\n        address _depositor,\\n        uint256 _amount,\\n        bool _send\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/optimism/messengers/iOVM_L1CrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { iOVM_BaseCrossDomainMessenger } from \\\"./iOVM_BaseCrossDomainMessenger.sol\\\";\\n\\n/**\\n * @title iOVM_L1CrossDomainMessenger\\n */\\ninterface iOVM_L1CrossDomainMessenger is iOVM_BaseCrossDomainMessenger {}\"\r\n    },\r\n    \"contracts/wrappers/BaseMessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/optimism/messengers/iOVM_L1CrossDomainMessenger.sol\\\";\\nimport \\\"./MessengerWrapper.sol\\\";\\n\\n/**\\n * @dev A MessengerWrapper for Base - https://docs.base.org/\\n * @notice Deployed on layer-1\\n */\\n\\ncontract BaseMessengerWrapper is MessengerWrapper, Ownable {\\n\\n    iOVM_L1CrossDomainMessenger public immutable l1MessengerAddress;\\n    address public immutable l2BridgeAddress;\\n    uint256 public defaultL2GasLimit;\\n    mapping (bytes4 => uint256) public l2GasLimitForSignature;\\n\\n    constructor(\\n        address _l1BridgeAddress,\\n        address _l2BridgeAddress,\\n        iOVM_L1CrossDomainMessenger _l1MessengerAddress,\\n        uint256 _l2ChainId,\\n        uint256 _defaultL2GasLimit\\n    )\\n        public\\n        MessengerWrapper(_l1BridgeAddress, _l2ChainId)\\n    {\\n        l2BridgeAddress = _l2BridgeAddress;\\n        l1MessengerAddress = _l1MessengerAddress;\\n        defaultL2GasLimit = _defaultL2GasLimit;\\n    }\\n\\n    /** \\n     * @dev Sends a message to the l2BridgeAddress from layer-1\\n     * @param _calldata The data that l2BridgeAddress will be called with\\n     */\\n    function sendCrossDomainMessage(bytes memory _calldata) public override onlyL1Bridge {\\n        uint256 l2GasLimit = l2GasLimitForCalldata(_calldata);\\n\\n        l1MessengerAddress.sendMessage(\\n            l2BridgeAddress,\\n            _calldata,\\n            uint32(l2GasLimit)\\n        );\\n    }\\n\\n    function verifySender(address l1BridgeCaller, bytes memory /*_data*/) public override {\\n        if (isRootConfirmation) return;\\n\\n        require(l1BridgeCaller == address(l1MessengerAddress), \\\"BASE_MSG_WPR: Caller is not l1MessengerAddress\\\");\\n        // Verify that cross-domain sender is l2BridgeAddress\\n        require(l1MessengerAddress.xDomainMessageSender() == l2BridgeAddress, \\\"BASE_MSG_WPR: Invalid cross-domain sender\\\");\\n    }\\n\\n    function setDefaultL2GasLimit(uint256 _l2GasLimit) external onlyOwner {\\n        defaultL2GasLimit = _l2GasLimit;\\n    }\\n\\n    function setL2GasLimitForSignature(uint256 _l2GasLimit, bytes4 signature) external onlyOwner {\\n        l2GasLimitForSignature[signature] = _l2GasLimit;\\n    }\\n\\n    // Private functions\\n\\n    function l2GasLimitForCalldata(bytes memory _calldata) private view returns (uint256) {\\n        uint256 l2GasLimit;\\n\\n        if (_calldata.length >= 4) {\\n            bytes4 functionSignature = bytes4(toUint32(_calldata, 0));\\n            l2GasLimit = l2GasLimitForSignature[functionSignature];\\n        }\\n\\n        if (l2GasLimit == 0) {\\n            l2GasLimit = defaultL2GasLimit;\\n        }\\n\\n        return l2GasLimit;\\n    }\\n\\n    // source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n    function toUint32(bytes memory _bytes, uint256 _start) private pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"OVM_MSG_WPR: out of bounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wrappers/MessengerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <=0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IMessengerWrapper.sol\\\";\\n\\ncontract IL1Bridge {\\n    struct TransferBond {\\n        address bonder;\\n        uint256 createdAt;\\n        uint256 totalAmount;\\n        uint256 challengeStartTime;\\n        address challenger;\\n        bool challengeResolved;\\n    }\\n    uint256 public challengePeriod;\\n    mapping(bytes32 => TransferBond) public transferBonds;\\n    function getIsBonder(address maybeBonder) public view returns (bool) {}\\n    function getTransferRootId(bytes32 rootHash, uint256 totalAmount) public pure returns (bytes32) {}\\n    function confirmTransferRoot(\\n        uint256 originChainId,\\n        bytes32 rootHash,\\n        uint256 destinationChainId,\\n        uint256 totalAmount,\\n        uint256 rootCommittedAt\\n    )\\n        external\\n    {}\\n}\\n\\nabstract contract MessengerWrapper is IMessengerWrapper {\\n    address public immutable l1BridgeAddress;\\n    uint256 public immutable l2ChainId;\\n    bool public isRootConfirmation = false;\\n\\n    constructor(address _l1BridgeAddress, uint256 _l2ChainId) internal {\\n        l1BridgeAddress = _l1BridgeAddress;\\n        l2ChainId = _l2ChainId;\\n    }\\n\\n    modifier onlyL1Bridge {\\n        require(msg.sender == l1BridgeAddress, \\\"MW: Sender must be the L1 Bridge\\\");\\n        _;\\n    }\\n\\n    modifier rootConfirmation {\\n        isRootConfirmation = true;\\n        _;\\n        isRootConfirmation = false;\\n    }\\n\\n    /**\\n     * @dev Confirm roots that have bonded on L1 and passed the challenge period with no challenge\\n     * @param rootHashes The root hashes to confirm\\n     * @param destinationChainIds The destinationChainId of the roots to confirm\\n     * @param totalAmounts The totalAmount of the roots to confirm\\n     * @param rootCommittedAts The rootCommittedAt of the roots to confirm\\n     */\\n    function confirmRoots (\\n        bytes32[] calldata rootHashes,\\n        uint256[] calldata destinationChainIds,\\n        uint256[] calldata totalAmounts,\\n        uint256[] calldata rootCommittedAts\\n    ) external override rootConfirmation {\\n        IL1Bridge l1Bridge = IL1Bridge(l1BridgeAddress);\\n        require(l1Bridge.getIsBonder(msg.sender), \\\"MW: Sender must be a bonder\\\");\\n        require(rootHashes.length == totalAmounts.length, \\\"MW: rootHashes and totalAmounts must be the same length\\\");\\n\\n        uint256 challengePeriod = l1Bridge.challengePeriod();\\n        for (uint256 i = 0; i < rootHashes.length; i++) {\\n            bool canConfirm = canConfirmRoot(l1Bridge, rootHashes[i], totalAmounts[i], challengePeriod);\\n            require(canConfirm, \\\"MW: Root cannot be confirmed\\\");\\n            l1Bridge.confirmTransferRoot(\\n                l2ChainId,\\n                rootHashes[i],\\n                destinationChainIds[i],\\n                totalAmounts[i],\\n                rootCommittedAts[i]\\n            );\\n        }\\n    }\\n    \\n    function canConfirmRoot (IL1Bridge l1Bridge, bytes32 rootHash, uint256 totalAmount, uint256 challengePeriod) public view returns (bool) {\\n        bytes32 transferRootId = l1Bridge.getTransferRootId(rootHash, totalAmount);\\n        (,uint256 createdAt,,uint256 challengeStartTime,,) = l1Bridge.transferBonds(transferRootId);\\n\\n        uint256 timeSinceBondCreation = block.timestamp - createdAt;\\n        if (\\n            createdAt != 0 &&\\n            challengeStartTime == 0 &&\\n            timeSinceBondCreation > challengePeriod\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2BridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contract iOVM_L1CrossDomainMessenger\",\"name\":\"_l1MessengerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultL2GasLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IL1Bridge\",\"name\":\"l1Bridge\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengePeriod\",\"type\":\"uint256\"}],\"name\":\"canConfirmRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rootHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destinationChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rootCommittedAts\",\"type\":\"uint256[]\"}],\"name\":\"confirmRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultL2GasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRootConfirmation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessengerAddress\",\"outputs\":[{\"internalType\":\"contract iOVM_L1CrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"l2GasLimitForSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendCrossDomainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2GasLimit\",\"type\":\"uint256\"}],\"name\":\"setDefaultL2GasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_l2GasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"signature\",\"type\":\"bytes4\"}],\"name\":\"setL2GasLimitForSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1BridgeCaller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BaseMessengerWrapper", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "50000", "ConstructorArguments": "000000000000000000000000b8901acb165ed027e32754e0ffe830802919727f000000000000000000000000a50395bdeaca7062255109fede012efe63d6d402000000000000000000000000710bda329b2a6224e4b44833de30f38e7f81d564000000000000000000000000000000000000000000000000000000000000210500000000000000000000000000000000000000000000000000000000000249f0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}