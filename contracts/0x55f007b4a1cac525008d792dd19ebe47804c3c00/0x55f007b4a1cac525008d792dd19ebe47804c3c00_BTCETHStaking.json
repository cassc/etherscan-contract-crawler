{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\ninterface IBEP20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    /**\r\n\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n\r\n    */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n\r\n    */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n\r\n        require(b > 0);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n    */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n\r\n    */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n\r\n    * reverts when dividing by zero.\r\n\r\n    */\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\t\r\n    function _msgSender() internal view virtual returns (address) {\t\r\n        return msg.sender;\t\r\n    }\t\r\n    function _msgData() internal view virtual returns (bytes calldata) {\t\r\n        return msg.data;\t\r\n    }\t\r\n}\t\r\nabstract contract Pausable is Context {\t\r\n    /**\t\r\n     * @dev Emitted when the pause is triggered by `account`.\t\r\n     */\t\r\n    event Paused(address account);\t\r\n    /**\t\r\n     * @dev Emitted when the pause is lifted by `account`.\t\r\n     */\t\r\n    event Unpaused(address account);\t\r\n    bool private _paused;\t\r\n    /**\t\r\n     * @dev Initializes the contract in unpaused state.\t\r\n     */\t\r\n    constructor() {\t\r\n        _paused = false;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns true if the contract is paused, and false otherwise.\t\r\n     */\t\r\n    function paused() public view virtual returns (bool) {\t\r\n        return _paused;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The contract must not be paused.\t\r\n     */\t\r\n    modifier whenNotPaused() {\t\r\n        require(!paused(), \"Pausable: paused\");\t\r\n        _;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Modifier to make a function callable only when the contract is paused.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The contract must be paused.\t\r\n     */\t\r\n    modifier whenPaused() {\t\r\n        require(paused(), \"Pausable: not paused\");\t\r\n        _;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Triggers stopped state.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The contract must not be paused.\t\r\n     */\t\r\n    function _pause() internal virtual whenNotPaused {\t\r\n        _paused = true;\t\r\n        emit Paused(_msgSender());\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns to normal state.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The contract must be paused.\t\r\n     */\t\r\n    function _unpause() internal virtual whenPaused {\t\r\n        _paused = false;\t\r\n        emit Unpaused(_msgSender());\t\r\n    }\t\r\n}\r\n\r\ncontract Ownable   {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor()  {\r\n        _owner = msg.sender;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract BTCETHStaking is Ownable,Pausable,ReentrancyGuard{\r\n    using SafeMath for uint256;\r\n    IBEP20 public Token;\r\n\r\n    struct userInfo {\r\n        uint256 DepositeToken;\r\n        uint256 WithdrawAbleReward;\r\n        uint256 depositeTime;\r\n    }\r\n    \r\n     event Deposite_(address indexed to,address indexed From, uint256 amount, uint256 day,uint256 time);\r\n\r\n    \r\n    mapping(uint256 => uint256) public allocation;\r\n    mapping(address => uint256[] ) public depositeToken;\r\n    mapping(address => uint256[] ) public lockabledays;\r\n    mapping(address => uint256[] ) public depositetime;  \r\n    mapping(address => uint256[] ) public lastclaimedtime;\r\n    mapping(address =>  userInfo) public Users;\r\n    mapping(address => bool) public isSpam;\r\n\r\n    uint256 public minimumDeposit = 10000000000000000000; //10 tokens\r\n\r\n    constructor(IBEP20 _token)  {\r\n        Token = _token;\r\n        allocation[360] = 3858020000000; //120 apy% //0.00000385802 per sec\r\n        \r\n    }\r\n\r\n    function farm(uint256 _amount, uint256 _lockableDays) external whenNotPaused nonReentrant\t\r\n    {\r\n    \r\n        require(isSpam[msg.sender]==false,\"Account is spam!\");\r\n        require(_amount >= minimumDeposit, \"Invalid amount\");\r\n        require(_lockableDays==360, \"Invalid day selection\");\r\n        Token.transferFrom(msg.sender, address(this), _amount);\r\n        depositeToken[msg.sender].push(_amount);\r\n        depositetime[msg.sender].push(uint40(block.timestamp));\r\n        lastclaimedtime[msg.sender].push(uint40(block.timestamp));\r\n        Users[msg.sender].DepositeToken += _amount;\r\n        Users[msg.sender].depositeTime=block.timestamp;\r\n        lockabledays[msg.sender].push(_lockableDays);\r\n        emit Deposite_(msg.sender,address(this),_amount,_lockableDays,block.timestamp);\r\n    }\r\n    \r\n\r\n\r\n\r\n        function pendindRewards(address _add) public view returns(uint256 reward)\r\n    {\r\n        uint256 Reward;\r\n        uint256 sec;\r\n        uint256 tokenperct;\r\n        \r\n        for(uint256 z=0 ; z< depositeToken[_add].length;z++){\r\n           sec =(block.timestamp-lastclaimedtime[_add][z]);\r\n           tokenperct=depositeToken[_add][z]*allocation[360];\r\n            Reward += (sec*tokenperct).div(1e18);\r\n        }\r\n    \r\n    return Reward;\r\n    }\r\n\r\n    function claim() public {\r\n        require(pendindRewards(msg.sender)>0,\"no pending rewards!\");\r\n        uint256 withdrawable=pendindRewards(msg.sender);\r\n        for(uint256 z=0 ; z< depositeToken[msg.sender].length;z++){\r\n        lastclaimedtime[msg.sender][z]=block.timestamp;\r\n        }\r\n        Token.transfer(msg.sender,  withdrawable);\r\n\r\n    }\r\n\r\n  \r\n    \r\n    \r\n    function harvest() external whenNotPaused nonReentrant\r\n    {\r\n        require(isSpam[msg.sender]==false,\"Account is spam!\");\r\n        require( Users[msg.sender].DepositeToken > 0, \" Deposite not \");\r\n        uint256 reward = pendindRewards(msg.sender);\r\n        Users[msg.sender].WithdrawAbleReward += reward;\r\n        uint256 totalamt=Users[msg.sender].DepositeToken+Users[msg.sender].WithdrawAbleReward;\r\n        \r\n\r\n        \r\n        delete depositeToken[msg.sender];\r\n        delete lockabledays[msg.sender];\r\n        delete depositetime[msg.sender];\r\n        delete lastclaimedtime[msg.sender];\r\n    \r\n             Token.transfer(msg.sender,  totalamt);\r\n             Users[msg.sender].WithdrawAbleReward =0;\r\n             Users[msg.sender].DepositeToken = 0; \r\n             Users[msg.sender].depositeTime=0;\r\n\r\n         \r\n    }\r\n\r\n\r\n    \r\n\r\n    \r\n    function UserInformation(address _add) public view returns(uint256 [] memory , uint256 [] memory,uint256 [] memory){\r\n        return(depositeToken[_add],lockabledays[_add],depositetime[_add]);\r\n    }\r\n \r\n \r\n    \r\n\r\n   function emergencyWithdrawtokens(IBEP20 _token,uint256 _amount) external onlyOwner {\r\n         _token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function emergencyWithdrawETH(uint256 Amount) external onlyOwner {\r\n        payable(msg.sender).transfer(Amount);\r\n    }\r\n\r\n    function changeMinimmumAmount(uint256 amount) external onlyOwner{\r\n        minimumDeposit=amount;\r\n    }\r\n    function changePercentages(uint256 _360dayspercent) external onlyOwner{\r\n     allocation[360] = _360dayspercent;\r\n    }\r\n\r\n    \t    function pausePool() external onlyOwner{\t\r\n        _pause();\t\r\n    }\t\r\n      function UnpausePool() external onlyOwner{\t\r\n        _unpause();\t\r\n    }\r\n\r\n    function changeToken(IBEP20 addr) public onlyOwner{\r\n        Token=addr;\r\n        \r\n    }\r\n\r\n      function addorRemoveSpam(address _Addr,bool _state) external onlyOwner{\r\n        isSpam[_Addr]=_state;\r\n    }\r\n    \r\n\t\r\n    receive() external payable{\t\r\n//  receive the ETH\t\r\n} \t\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Deposite_\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"UserInformation\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"DepositeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"WithdrawAbleReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"addorRemoveSpam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMinimmumAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_360dayspercent\",\"type\":\"uint256\"}],\"name\":\"changePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawtokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockableDays\",\"type\":\"uint256\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSpam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastclaimedtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockabledays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"pendindRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTCETHStaking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000f87ab4f244335b1c00b45a9af5cb9cb851f6a8f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://136241074e4e411150bea41acbfa0d94fda543a8479c66795bd7dfd874fe1985"}