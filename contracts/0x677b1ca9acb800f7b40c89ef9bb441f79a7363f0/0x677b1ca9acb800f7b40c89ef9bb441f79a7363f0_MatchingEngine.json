{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/safex/MatchingEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\nimport {IOrderbookFactory} from \\\"./interfaces/IOrderbookFactory.sol\\\";\\nimport {IOrderbook, ExchangeOrderbook} from \\\"./interfaces/IOrderbook.sol\\\";\\nimport {TransferHelper} from \\\"./libraries/TransferHelper.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IRevenue {\\n    function report(\\n        uint32 uid,\\n        address token,\\n        uint256 amount,\\n        bool isAdd\\n    ) external;\\n\\n    function isReportable(\\n        address token,\\n        uint32 uid\\n    ) external view returns (bool);\\n\\n    function refundFee(address to, address token, uint256 amount) external;\\n\\n    function feeOf(uint32 uid, bool isMaker) external returns (uint32 feeNum);\\n}\\n\\n// Onchain Matching engine for the orders\\ncontract MatchingEngine is Initializable, ReentrancyGuard {\\n    // fee recipient\\n    address private feeTo;\\n    // fee denominator\\n    uint32 public immutable feeDenom = 1000000;\\n    // Factories\\n    address public orderbookFactory;\\n    // WETH\\n    address public WETH;\\n\\n    // events\\n    event OrderCanceled(\\n        address orderbook,\\n        uint256 id,\\n        bool isBid,\\n        address indexed owner\\n    );\\n\\n    event OrderMatched(\\n        address indexed orderbook,\\n        uint256 id,\\n        bool isBid,\\n        address sender,\\n        address owner,\\n        uint256 amount,\\n        uint256 price\\n    );\\n\\n    event OrderPlaced(\\n        address orderbook,\\n        address indexed sender,\\n        uint256 price,\\n        bool isBid,\\n        uint256 orderId\\n    );\\n\\n    event PairAdded(\\n        address orderbook,\\n        address base,\\n        address quote\\n    );\\n\\n    error TooManyMatches(uint256 n);\\n    error InvalidFeeRate(uint256 feeNum, uint256 feeDenom);\\n    error NotContract(address newImpl);\\n    error InvalidRole(bytes32 role, address sender);\\n    error OrderSizeTooSmall(uint256 amount, uint256 minRequired);\\n\\n    constructor() {}\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    /**\\n     * @dev Initialize the matching engine with orderbook factory and listing requirements.\\n     * It can be called only once.\\n     * @param orderbookFactory_ address of orderbook factory\\n     * @param treasury_ address of treasury contract\\n     * @param WETH_ address of wrapped ether contract\\n     *\\n     * Requirements:\\n     * - `msg.sender` must have the default admin role.\\n     */\\n    function initialize(\\n        address orderbookFactory_,\\n        address treasury_,\\n        address WETH_\\n    ) external initializer {\\n        orderbookFactory = orderbookFactory_;\\n        feeTo = treasury_;\\n        WETH = WETH_;\\n    }\\n\\n    /**\\n     * @dev Executes a market buy order,\\n     * buys the base asset using the quote asset at the best available price in the orderbook up to `n` orders,\\n     * and make an order at the market price.\\n     * @param base The address of the base asset for the trading pair\\n     * @param quote The address of the quote asset for the trading pair\\n     * @param quoteAmount The amount of quote asset to be used for the market buy order\\n     * @param isMaker Boolean indicating if a order should be made at the market price in orderbook\\n     * @param n The maximum number of orders to match in the orderbook\\n     * @return bool True if the order was successfully executed, otherwise false.\\n     */\\n    function marketBuy(\\n        address base,\\n        address quote,\\n        uint256 quoteAmount,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) public nonReentrant returns (bool) {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            0,\\n            quoteAmount,\\n            true,\\n            uid,\\n            isMaker\\n        );\\n        // negate on give if the asset is not the base\\n        uint256 lmp;\\n        // reuse withoutFee variable due to stack too deep error\\n        (withoutFee, lmp) = _limitOrder(\\n            orderbook,\\n            withoutFee,\\n            quote,\\n            true,\\n            type(uint256).max,\\n            n\\n        );\\n        // add make order on market price\\n\\n        _detMake(\\n            base,\\n            quote,\\n            orderbook,\\n            withoutFee,\\n            lmp == 0 ? mktPrice(base, quote) : lmp,\\n            true,\\n            isMaker\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a market sell order,\\n     * sells the base asset for the quote asset at the best available price in the orderbook up to `n` orders,\\n     * and make an order at the market price.\\n     * @param base The address of the base asset for the trading pair\\n     * @param quote The address of the quote asset for the trading pair\\n     * @param baseAmount The amount of base asset to be sold in the market sell order\\n     * @param isMaker Boolean indicating if an order should be made at the market price in orderbook\\n     * @param n The maximum number of orders to match in the orderbook\\n     * @return bool True if the order was successfully executed, otherwise false.\\n     */\\n    function marketSell(\\n        address base,\\n        address quote,\\n        uint256 baseAmount,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) public nonReentrant returns (bool) {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            0,\\n            baseAmount,\\n            false,\\n            uid,\\n            isMaker\\n        );\\n        // negate on give if the asset is not the base\\n        uint256 lmp;\\n        // reuse withoutFee variable for storing remaining amount after matching due to stack too deep error\\n        (withoutFee, lmp) = _limitOrder(\\n            orderbook,\\n            withoutFee,\\n            base,\\n            false,\\n            0,\\n            n\\n        );\\n        _detMake(\\n            base,\\n            quote,\\n            orderbook,\\n            withoutFee,\\n            lmp == 0 ? mktPrice(base, quote) : lmp,\\n            false,\\n            isMaker\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a market buy order,\\n     * buys the base asset using the quote asset at the best available price in the orderbook up to `n` orders,\\n     * and make an order at the market price with quote asset as native Ethereum(or other network currencies).\\n     * @param base The address of the base asset for the trading pair\\n     * @param isMaker Boolean indicating if a order should be made at the market price in orderbook\\n     * @param n The maximum number of orders to match in the orderbook\\n     * @return bool True if the order was successfully executed, otherwise false.\\n     */\\n    function marketBuyETH(\\n        address base,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) external payable returns (bool) {\\n        IWETH(WETH).deposit{value: msg.value}();\\n        return marketBuy(base, WETH, msg.value, isMaker, n, uid);\\n    }\\n\\n    /**\\n     * @dev Executes a market sell order,\\n     * sells the base asset for the quote asset at the best available price in the orderbook up to `n` orders,\\n     * and make an order at the market price with base asset as native Ethereum(or other network currencies).\\n     * @param quote The address of the quote asset for the trading pair\\n     * @param isMaker Boolean indicating if an order should be made at the market price in orderbook\\n     * @param n The maximum number of orders to match in the orderbook\\n     * @return bool True if the order was successfully executed, otherwise false.\\n     */\\n    function marketSellETH(\\n        address quote,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) external payable returns (bool) {\\n        IWETH(WETH).deposit{value: msg.value}();\\n        return marketSell(WETH, quote, msg.value, isMaker, n, uid);\\n    }\\n\\n    /**\\n     * @dev Executes a limit buy order,\\n     * places a limit order in the orderbook for buying the base asset using the quote asset at a specified price,\\n     * and make an order at the limit price.\\n     * @param base The address of the base asset for the trading pair\\n     * @param quote The address of the quote asset for the trading pair\\n     * @param price The price, base/quote regardless of decimals of the assets in the pair represented with 8 decimals (if 1000, base is 1000x quote)\\n     * @param quoteAmount The amount of quote asset to be used for the limit buy order\\n     * @param isMaker Boolean indicating if an order should be made at the limit price\\n     * @param n The maximum number of orders to match in the orderbook\\n     * @return bool True if the order was successfully executed, otherwise false.\\n     */\\n    function limitBuy(\\n        address base,\\n        address quote,\\n        uint256 price,\\n        uint256 quoteAmount,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) public nonReentrant returns (bool) {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            price,\\n            quoteAmount,\\n            true,\\n            uid,\\n            isMaker\\n        );\\n        // negate on give if the asset is not the base\\n        uint256 lmp;\\n        // reuse withoutFee variable for storing remaining amount after matching due to stack too deep error\\n        (withoutFee, lmp) = _limitOrder(\\n            orderbook,\\n            withoutFee,\\n            quote,\\n            true,\\n            price,\\n            n\\n        );\\n\\n        _detMake(\\n            base,\\n            quote,\\n            orderbook,\\n            withoutFee,\\n            lmp == 0 ? price : lmp,\\n            true,\\n            isMaker\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a limit sell order,\\n     * places a limit order in the orderbook for selling the base asset for the quote asset at a specified price,\\n     * and makes an order at the limit price.\\n     * @param base The address of the base asset for the trading pair\\n     * @param quote The address of the quote asset for the trading pair\\n     * @param price The price, base/quote regardless of decimals of the assets in the pair represented with 8 decimals (if 1000, base is 1000x quote)\\n     * @param baseAmount The amount of base asset to be used for the limit sell order\\n     * @param isMaker Boolean indicating if an order should be made at the limit price\\n     * @param n The maximum number of orders to match in the orderbook\\n     * @return bool True if the order was successfully executed, otherwise false.\\n     */\\n    function limitSell(\\n        address base,\\n        address quote,\\n        uint256 price,\\n        uint256 baseAmount,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) public nonReentrant returns (bool) {\\n        (uint256 withoutFee, address orderbook) = _deposit(\\n            base,\\n            quote,\\n            price,\\n            baseAmount,\\n            false,\\n            uid,\\n            isMaker\\n        );\\n        // negate on give if the asset is not the base\\n        uint256 lmp;\\n        // reuse withoutFee variable for storing remaining amount after matching due to stack too deep error\\n        (withoutFee, lmp) = _limitOrder(\\n            orderbook,\\n            withoutFee,\\n            base,\\n            false,\\n            price,\\n            n\\n        );\\n        _detMake(\\n            base,\\n            quote,\\n            orderbook,\\n            withoutFee,\\n            lmp == 0 ? price : lmp,\\n            false,\\n            isMaker\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Executes a limit buy order,\\n     * places a limit order in the orderbook for buying the base asset using the quote asset at a specified price,\\n     * and make an order at the limit price with quote asset as native Ethereum(or network currencies).\\n     * @param base The address of the base asset for the trading pair\\n     * @param isMaker Boolean indicating if a order should be made at the market price in orderbook\\n     * @param n The maximum number of orders to match in the orderbook\\n     * @return bool True if the order was successfully executed, otherwise false.\\n     */\\n    function limitBuyETH(\\n        address base,\\n        uint256 price,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) external payable returns (bool) {\\n        IWETH(WETH).deposit{value: msg.value}();\\n        return limitBuy(base, WETH, price, msg.value, isMaker, n, uid);\\n    }\\n\\n    /**\\n     * @dev Executes a limit sell order,\\n     * places a limit order in the orderbook for selling the base asset for the quote asset at a specified price,\\n     * and makes an order at the limit price with base asset as native Ethereum(or network currencies).\\n     * @param quote The address of the quote asset for the trading pair\\n     * @param isMaker Boolean indicating if an order should be made at the market price in orderbook\\n     * @param n The maximum number of orders to match in the orderbook\\n     * @return bool True if the order was successfully executed, otherwise false.\\n     */\\n    function limitSellETH(\\n        address quote,\\n        uint256 price,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) external payable returns (bool) {\\n        IWETH(WETH).deposit{value: msg.value}();\\n        return limitSell(WETH, quote, price, msg.value, isMaker, n, uid);\\n    }\\n\\n    /**\\n     * @dev Creates an orderbook for a new trading pair and returns its address\\n     * @param base The address of the base asset for the trading pair\\n     * @param quote The address of the quote asset for the trading pair\\n     * @return book The address of the newly created orderbook\\n     */\\n    function addPair(\\n        address base,\\n        address quote\\n    ) public returns (address book) {\\n        // create orderbook for the pair\\n        address orderBook = IOrderbookFactory(orderbookFactory).createBook(\\n            base,\\n            quote\\n        );\\n        emit PairAdded(orderBook, base, quote);\\n        return orderBook;\\n    }\\n\\n    /**\\n     * @dev Cancels an order in an orderbook by the given order ID and order type.\\n     * @param orderbook The address of the orderbook to cancel the order in\\n     * @param price The price of the order to cancel\\n     * @param orderId The ID of the order to cancel\\n     * @param isBid Boolean indicating if the order to cancel is an ask order\\n     * @return bool True if the order was successfully canceled, otherwise false.\\n     */\\n    function cancelOrder(\\n        address orderbook,\\n        uint256 price,\\n        uint32 orderId,\\n        bool isBid,\\n        uint32 uid\\n    ) public nonReentrant returns (bool) {\\n        (address base, address quote) = IOrderbookFactory(orderbookFactory).getBaseQuote(orderbook);\\n\\n        uint256 remaining = IOrderbook(orderbook).cancelOrder(\\n            isBid,\\n            price,\\n            orderId,\\n            msg.sender\\n        );\\n        // decrease point from orderbook\\n        if (uid != 0 && IRevenue(feeTo).isReportable(msg.sender, uid)) {\\n            // report cancelation to accountant\\n            IRevenue(feeTo).report(\\n                uid,\\n                isBid ? quote : base,\\n                remaining,\\n                false\\n            );\\n            // refund fee from treasury to sender\\n            IRevenue(feeTo).refundFee(\\n                msg.sender,\\n                isBid ? quote : base,\\n                (remaining * 100) / feeDenom\\n            );\\n        }\\n\\n        emit OrderCanceled(orderbook, orderId, isBid, msg.sender);\\n        return true;\\n    }\\n\\n    function cancelOrders(\\n        address[] memory orderbook,\\n        uint256[] memory prices,\\n        uint32[] memory orderIds,\\n        bool[] memory isBid,\\n        uint32 uid\\n    ) external returns (bool) {\\n        for (uint32 i = 0; i < orderIds.length; i++) {\\n            cancelOrder(\\n                orderbook[i],\\n                prices[i],\\n                orderIds[i],\\n                isBid[i],\\n                uid\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Cancels an order in an orderbook by the given order ID and order type.\\n     * @param base The address of the base asset for the trading pair\\n     * @param quote The address of the quote asset for the trading pair\\n     * @param price The price of the order to rematch\\n     * @param orderId The ID of the order to cancel\\n     * @param isBid Boolean indicating if the order to cancel is an ask order\\n     * @param uid The ID of the user\\n     * @return bool True if the order was successfully rematched, otherwise false.\\n     */\\n    function rematchOrder(\\n        address base,\\n        address quote,\\n        uint256 price,\\n        uint32 orderId,\\n        bool isBid,\\n        bool isMarket,\\n        bool isMaker,\\n        uint32 n,\\n        uint32 uid\\n    ) external nonReentrant returns (bool) {\\n        address orderbook = IOrderbookFactory(orderbookFactory).getBookByPair(\\n            base,\\n            quote\\n        );\\n        uint256 remaining = IOrderbook(orderbook).cancelOrder(\\n            isBid,\\n            price,\\n            orderId,\\n            msg.sender\\n        );\\n        if (isBid) {\\n            if (isMarket) {\\n                return marketBuy(base, quote, remaining, isMaker, n, uid);\\n            } else {\\n                return limitBuy(base, quote, price, remaining, isMaker, n, uid);\\n            }\\n        } else {\\n            if (isMarket) {\\n                return marketSell(base, quote, remaining, isMaker, n, uid);\\n            } else {\\n                return\\n                    limitSell(base, quote, price, remaining, isMaker, n, uid);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the orderbook with the given ID.\\n     * @param id The ID of the orderbook to retrieve.\\n     * @return The address of the orderbook.\\n     */\\n    function getOrderbookById(uint256 id) external view returns (address) {\\n        return IOrderbookFactory(orderbookFactory).getBook(id);\\n    }\\n\\n    /**\\n     * @dev Returns the base and quote asset addresses for the given orderbook.\\n     * @param orderbook The address of the orderbook to retrieve the base and quote asset addresses for.\\n     * @return base The address of the base asset.\\n     * @return quote The address of the quote asset.\\n     */\\n    function getBaseQuote(\\n        address orderbook\\n    ) external view returns (address base, address quote) {\\n        return IOrderbookFactory(orderbookFactory).getBaseQuote(orderbook);\\n    }\\n\\n    /**\\n     * @dev returns addresses of pairs in OrderbookFactory registry\\n     * @return pairs list of pairs from start to end\\n     */\\n    function getPairs(\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (IOrderbookFactory.Pair[] memory pairs) {\\n        return IOrderbookFactory(orderbookFactory).getPairs(start, end);\\n    }\\n\\n    /**\\n     * @dev returns addresses of pairs in OrderbookFactory registry\\n     * @return pairs list of pairs from start to end\\n     */\\n    function getPairsWithIds(\\n        uint256[] memory ids\\n    ) external view returns (IOrderbookFactory.Pair[] memory pairs) {\\n        return IOrderbookFactory(orderbookFactory).getPairsWithIds(ids);\\n    }\\n\\n    /**\\n     * @dev returns addresses of pairs in OrderbookFactory registry\\n     * @return names list of pair names from start to end\\n     */\\n    function getPairNames(\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (string[] memory names) {\\n        return IOrderbookFactory(orderbookFactory).getPairNames(start, end);\\n    }\\n\\n    /**\\n     * @dev returns addresses of pairs in OrderbookFactory registry\\n     * @return names list of pair names from start to end\\n     */\\n    function getPairNamesWithIds(\\n        uint256[] memory ids\\n    ) external view returns (string[] memory names) {\\n        return IOrderbookFactory(orderbookFactory).getPairNamesWithIds(ids);\\n    }\\n\\n    /**\\n     * @dev returns addresses of pairs in OrderbookFactory registry\\n     * @return mktPrices list of mktPrices from start to end\\n     */\\n    function getMktPrices(\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (uint256[] memory mktPrices) {\\n        IOrderbookFactory.Pair[] memory pairs = IOrderbookFactory(\\n            orderbookFactory\\n        ).getPairs(start, end);\\n        mktPrices = new uint256[](pairs.length);\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            try this.mktPrice(pairs[i].base, pairs[i].quote) returns (\\n                uint256 price\\n            ) {\\n                uint256 p = price;\\n                mktPrices[i] = p;\\n            } catch {\\n                uint256 p = 0;\\n                mktPrices[i] = p;\\n            }\\n        }\\n        return mktPrices;\\n    }\\n\\n    /**\\n     * @dev returns addresses of pairs in OrderbookFactory registry\\n     * @return mktPrices list of mktPrices from start to end\\n     */\\n    function getMktPricesWithIds(\\n        uint256[] memory ids\\n    ) external view returns (uint256[] memory mktPrices) {\\n        IOrderbookFactory.Pair[] memory pairs = IOrderbookFactory(\\n            orderbookFactory\\n        ).getPairsWithIds(ids);\\n        mktPrices = new uint256[](pairs.length);\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            try this.mktPrice(pairs[i].base, pairs[i].quote) returns (\\n                uint256 price\\n            ) {\\n                uint256 p = price;\\n                mktPrices[i] = p;\\n            } catch {\\n                uint256 p = 0;\\n                mktPrices[i] = p;\\n            }\\n        }\\n        return mktPrices;\\n    }\\n\\n    /**\\n     * @dev Returns prices in the ask/bid orderbook for the given trading pair.\\n     * @param base The address of the base asset for the trading pair.\\n     * @param quote The address of the quote asset for the trading pair.\\n     * @param isBid Boolean indicating if the orderbook to retrieve prices from is an ask orderbook.\\n     * @param n The number of prices to retrieve.\\n     */\\n    function getPrices(\\n        address base,\\n        address quote,\\n        bool isBid,\\n        uint32 n\\n    ) external view returns (uint256[] memory) {\\n        address orderbook = getBookByPair(base, quote);\\n        return IOrderbook(orderbook).getPrices(isBid, n);\\n    }\\n\\n    /**\\n     * @dev Returns orders in the ask/bid orderbook for the given trading pair in a price.\\n     * @param base The address of the base asset for the trading pair.\\n     * @param quote The address of the quote asset for the trading pair.\\n     * @param isBid Boolean indicating if the orderbook to retrieve orders from is an ask orderbook.\\n     * @param price The price to retrieve orders from.\\n     * @param n The number of orders to retrieve.\\n     */\\n    function getOrders(\\n        address base,\\n        address quote,\\n        bool isBid,\\n        uint256 price,\\n        uint32 n\\n    ) external view returns (ExchangeOrderbook.Order[] memory) {\\n        address orderbook = getBookByPair(base, quote);\\n        return IOrderbook(orderbook).getOrders(isBid, price, n);\\n    }\\n\\n    /**\\n     * @dev Returns an order in the ask/bid orderbook for the given trading pair with order id.\\n     * @param base The address of the base asset for the trading pair.\\n     * @param quote The address of the quote asset for the trading pair.\\n     * @param isBid Boolean indicating if the orderbook to retrieve orders from is an ask orderbook.\\n     * @param orderId The order id to retrieve.\\n     */\\n    function getOrder(\\n        address base,\\n        address quote,\\n        bool isBid,\\n        uint32 orderId\\n    ) external view returns (ExchangeOrderbook.Order memory) {\\n        address orderbook = getBookByPair(base, quote);\\n        return IOrderbook(orderbook).getOrder(isBid, orderId);\\n    }\\n\\n    /**\\n     * @dev Returns order ids in the ask/bid orderbook for the given trading pair in a price.\\n     * @param base The address of the base asset for the trading pair.\\n     * @param quote The address of the quote asset for the trading pair.\\n     * @param isBid Boolean indicating if the orderbook to retrieve orders from is an ask orderbook.\\n     * @param price The price to retrieve orders from.\\n     * @param n The number of order ids to retrieve.\\n     */\\n    function getOrderIds(\\n        address base,\\n        address quote,\\n        bool isBid,\\n        uint256 price,\\n        uint32 n\\n    ) external view returns (uint32[] memory) {\\n        address orderbook = getBookByPair(base, quote);\\n        return IOrderbook(orderbook).getOrderIds(isBid, price, n);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the orderbook for the given base and quote asset addresses.\\n     * @param base The address of the base asset for the trading pair.\\n     * @param quote The address of the quote asset for the trading pair.\\n     * @return book The address of the orderbook.\\n     */\\n    function getBookByPair(\\n        address base,\\n        address quote\\n    ) public view returns (address book) {\\n        return IOrderbookFactory(orderbookFactory).getBookByPair(base, quote);\\n    }\\n\\n    function heads(\\n        address base,\\n        address quote\\n    ) external view returns (uint256 bidHead, uint256 askHead) {\\n        address orderbook = getBookByPair(base, quote);\\n        return IOrderbook(orderbook).heads();\\n    }\\n\\n    function mktPrice(\\n        address base,\\n        address quote\\n    ) public view returns (uint256) {\\n        address orderbook = getBookByPair(base, quote);\\n        return IOrderbook(orderbook).mktPrice();\\n    }\\n\\n    /**\\n     * @dev return converted amount from base to quote or vice versa\\n     * @param base address of base asset\\n     * @param quote address of quote asset\\n     * @param amount amount of base or quote asset\\n     * @param isBid if true, amount is quote asset, otherwise base asset\\n     * @return converted converted amount from base to quote or vice versa.\\n     * if true, amount is quote asset, otherwise base asset\\n     * if orderbook does not exist, return 0\\n     */\\n    function convert(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        bool isBid\\n    ) public view returns (uint256 converted) {\\n        address orderbook = getBookByPair(base, quote);\\n        if (base == quote) {\\n            return amount;\\n        } else if (orderbook == address(0)) {\\n            return 0;\\n        } else {\\n            return IOrderbook(orderbook).assetValue(amount, isBid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function which makes an order on the orderbook.\\n     * @param orderbook The address of the orderbook contract for the trading pair\\n     * @param withoutFee The remaining amount of the asset after the market order has been executed\\n     * @param price The price, base/quote regardless of decimals of the assets in the pair represented with 8 decimals (if 1000, base is 1000x quote)\\n     * @param isBid Boolean indicating if the order is a buy (false) or a sell (true)\\n     */\\n    function _makeOrder(\\n        address orderbook,\\n        uint256 withoutFee,\\n        uint256 price,\\n        bool isBid\\n    ) internal {\\n        uint32 id;\\n        // create order\\n        if (isBid) {\\n            id = IOrderbook(orderbook).placeBid(msg.sender, price, withoutFee);\\n        } else {\\n            id = IOrderbook(orderbook).placeAsk(msg.sender, price, withoutFee);\\n        }\\n        emit OrderPlaced(orderbook, msg.sender, price, isBid, id);\\n    }\\n\\n    /**\\n     * @dev Match bid if `isBid` is true, match ask if `isBid` is false.\\n     */\\n    function _matchAt(\\n        address orderbook,\\n        address give,\\n        bool isBid,\\n        uint256 amount,\\n        uint256 price,\\n        uint32 i,\\n        uint32 n\\n    ) internal returns (uint256 remaining, uint32 k) {\\n        if (n > 20) {\\n            revert TooManyMatches(n);\\n        }\\n        remaining = amount;\\n        while (\\n            remaining > 0 &&\\n            !IOrderbook(orderbook).isEmpty(!isBid, price) &&\\n            i < n\\n        ) {\\n            // fpop OrderLinkedList by price, if ask you get bid order, if bid you get ask order. Get quote asset on bid order on buy, base asset on ask order on sell\\n            (uint32 orderId, uint256 required) = IOrderbook(orderbook).fpop(\\n                !isBid,\\n                price,\\n                remaining\\n            );\\n            // order exists, and amount is not 0\\n            if (remaining <= required) {\\n                // set last matching price\\n                IOrderbook(orderbook).setLmp(price);\\n                // execute order\\n                TransferHelper.safeTransfer(give, orderbook, remaining);\\n                address owner = IOrderbook(orderbook).execute(\\n                    orderId,\\n                    !isBid,\\n                    price,\\n                    msg.sender,\\n                    remaining\\n                );\\n                // emit event order matched\\n                emit OrderMatched(\\n                    orderbook,\\n                    orderId,\\n                    isBid,\\n                    msg.sender,\\n                    owner,\\n                    remaining,\\n                    price\\n                );\\n                // end loop as remaining is 0\\n                return (0, n);\\n            }\\n            // order is null\\n            else if (required == 0) {\\n                ++i;\\n                continue;\\n            }\\n            // remaining >= depositAmount\\n            else {\\n                remaining -= required;\\n                TransferHelper.safeTransfer(give, orderbook, required);\\n                address owner = IOrderbook(orderbook).execute(\\n                    orderId,\\n                    !isBid,\\n                    price,\\n                    msg.sender,\\n                    required\\n                );\\n                // emit event order matched\\n                emit OrderMatched(\\n                    orderbook,\\n                    orderId,\\n                    isBid,\\n                    msg.sender,\\n                    owner,\\n                    required,\\n                    price\\n                );\\n                ++i;\\n            }\\n        }\\n        k = i;\\n        return (remaining, k);\\n    }\\n\\n    /**\\n     * @dev Executes limit order by matching orders in the orderbook based on the provided limit price.\\n     * @param orderbook The address of the orderbook to execute the limit order on.\\n     * @param amount The amount of asset to trade.\\n     * @param give The address of the asset to be traded.\\n     * @param isBid True if the order is an ask (sell) order, false if it is a bid (buy) order.\\n     * @param limitPrice The maximum price at which the order can be executed.\\n     * @param n The maximum number of matches to execute.\\n     * @return remaining The remaining amount of asset that was not traded.\\n     */\\n    function _limitOrder(\\n        address orderbook,\\n        uint256 amount,\\n        address give,\\n        bool isBid,\\n        uint256 limitPrice,\\n        uint32 n\\n    ) internal returns (uint256 remaining, uint256 lmp) {\\n        remaining = amount;\\n        lmp = 0;\\n        uint32 i = 0;\\n        if (isBid) {\\n            // check if there is any matching ask order until matching ask order price is lower than the limit bid Price\\n            uint256 askHead = IOrderbook(orderbook).askHead();\\n            while (\\n                remaining > 0 && askHead != 0 && askHead <= limitPrice && i < n\\n            ) {\\n                lmp = askHead;\\n                (remaining, i) = _matchAt(\\n                    orderbook,\\n                    give,\\n                    isBid,\\n                    remaining,\\n                    askHead,\\n                    i,\\n                    n\\n                );\\n                // i == 0 when orders are all empty and only head price is left\\n                askHead = i == 0 ? 0 : IOrderbook(orderbook).askHead();\\n            }\\n        } else {\\n            // check if there is any maching bid order until matching bid order price is higher than the limit ask price\\n            uint256 bidHead = IOrderbook(orderbook).bidHead();\\n            while (\\n                remaining > 0 && bidHead != 0 && bidHead >= limitPrice && i < n\\n            ) {\\n                lmp = bidHead;\\n                (remaining, i) = _matchAt(\\n                    orderbook,\\n                    give,\\n                    isBid,\\n                    remaining,\\n                    bidHead,\\n                    i,\\n                    n\\n                );\\n                // i == 0 when orders are all empty and only head price is left\\n                bidHead = i == 0 ? 0 : IOrderbook(orderbook).bidHead();\\n            }\\n        }\\n        // set last match price\\n        if (lmp != 0) {\\n            IOrderbook(orderbook).setLmp(lmp);\\n        }\\n        return (remaining, lmp);\\n    }\\n\\n    /**\\n     * @dev Determines if an order can be made at the market price,\\n     * and if so, makes the an order on the orderbook.\\n     * If an order cannot be made, transfers the remaining asset to either the orderbook or the user.\\n     * @param base The address of the base asset for the trading pair\\n     * @param quote The address of the quote asset for the trading pair\\n     * @param orderbook The address of the orderbook contract for the trading pair\\n     * @param remaining The remaining amount of the asset after the market order has been taken\\n     * @param price The price used to determine if an order can be made\\n     * @param isBid Boolean indicating if the order was a buy (true) or a sell (false)\\n     * @param isMaker Boolean indicating if an order is for storing in orderbook\\n     */\\n    function _detMake(\\n        address base,\\n        address quote,\\n        address orderbook,\\n        uint256 remaining,\\n        uint256 price,\\n        bool isBid,\\n        bool isMaker\\n    ) internal {\\n        if (remaining > 0) {\\n            address stopTo = isMaker ? orderbook : msg.sender;\\n            TransferHelper.safeTransfer(\\n                isBid ? quote : base,\\n                stopTo,\\n                remaining\\n            );\\n            if (isMaker)\\n                _makeOrder(orderbook, remaining, price, isBid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposit amount of asset to the contract with the given asset information and subtracts the fee.\\n     * @param base The address of the base asset.\\n     * @param quote The address of the quote asset.\\n     * @param amount The amount of asset to deposit.\\n     * @param isBid Whether it is an ask order or not.\\n     * If ask, the quote asset is transferred to the contract.\\n     * @return withoutFee The amount of asset without the fee.\\n     * @return book The address of the orderbook for the given asset pair.\\n     */\\n    function _deposit(\\n        address base,\\n        address quote,\\n        uint256 price,\\n        uint256 amount,\\n        bool isBid,\\n        uint32 uid,\\n        bool isMaker\\n    ) internal returns (uint256 withoutFee, address book) {\\n        // get orderbook address from the base and quote asset\\n        book = getBookByPair(base, quote);\\n        if (book == address(0)) {\\n            book = addPair(base, quote);\\n        }\\n        // check if amount is valid in case of both market and limit\\n        uint256 converted = _convert(book, price, amount, !isBid);\\n        if (converted == 0) {\\n            revert OrderSizeTooSmall(\\n                amount,\\n                _convert(book, price, 1, isBid)\\n            );\\n        }\\n        // check if sender has uid\\n        uint256 fee = _fee(base, quote, amount, isBid, uid, isMaker);\\n        withoutFee = amount - fee;\\n        if (isBid) {\\n            // transfer input asset give user to this contract\\n            if (quote != WETH) {\\n                TransferHelper.safeTransferFrom(\\n                    quote,\\n                    msg.sender,\\n                    address(this),\\n                    amount\\n                );\\n            }\\n            TransferHelper.safeTransfer(quote, feeTo, fee);\\n        } else {\\n            // transfer input asset give user to this contract\\n            if (base != WETH) {\\n                TransferHelper.safeTransferFrom(\\n                    base,\\n                    msg.sender,\\n                    address(this),\\n                    amount\\n                );\\n            }\\n            TransferHelper.safeTransfer(base, feeTo, fee);\\n        }\\n\\n        return (withoutFee, book);\\n    }\\n\\n    function _fee(\\n        address base,\\n        address quote,\\n        uint256 amount,\\n        bool isBid,\\n        uint32 uid,\\n        bool isMaker\\n    ) internal returns (uint256 fee) {\\n        if (uid != 0 && IRevenue(feeTo).isReportable(msg.sender, uid)) {\\n            uint32 feeNum = IRevenue(feeTo).feeOf(uid, isMaker);\\n            // report fee to accountant\\n            IRevenue(feeTo).report(\\n                uid,\\n                isBid ? quote : base,\\n                amount,\\n                true\\n            );\\n            return (amount * feeNum) / feeDenom;\\n        } else {\\n            return amount / 1000;\\n        }\\n    }\\n\\n    /**\\n     * @dev return converted amount from base to quote or vice versa\\n     * @param orderbook address of orderbook\\n     * @param price price of base/quote regardless of decimals of the assets in the pair represented with 8 decimals (if 1000, base is 1000x quote) proposed by a trader\\n     * @param amount amount of base or quote asset\\n     * @param isBid if true, amount is quote asset, otherwise base asset\\n     * @return converted converted amount from base to quote or vice versa.\\n     * if true, amount is quote asset, otherwise base asset\\n     * if orderbook does not exist, return 0\\n     */\\n    function _convert(\\n        address orderbook,\\n        uint256 price,\\n        uint256 amount,\\n        bool isBid\\n    ) internal view returns (uint256 converted) {\\n        if (orderbook == address(0)) {\\n            return 0;\\n        } else {\\n            return price == 0 ? IOrderbook(orderbook).assetValue(amount, isBid) : IOrderbook(orderbook).convert(price, amount, isBid);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/interfaces/IOrderbookFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface IOrderbookFactory {\\n    struct Pair {\\n        address base;\\n        address quote;\\n    }\\n\\n    function createBook(address bid_, address ask_) external returns (address orderbook);\\n\\n    function getBook(uint256 bookId_) external view returns (address orderbook);\\n\\n    function getBookByPair(address base, address quote) external view returns (address book);\\n\\n    function getBaseQuote(address orderbook) external view returns (address base, address quote);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    /// Address of a manager\\n    function engine() external view returns (address);\\n\\n    function getPairs(uint256 start, uint256 end) external view returns (Pair[] memory);\\n\\n    function getPairsWithIds(uint256[] memory ids) external view returns (Pair[] memory);\\n\\n    function getPairNames(uint256 start, uint256 end) external view returns (string[] memory names);\\n\\n    function getPairNamesWithIds(uint256[] memory ids) external view returns (string[] memory names);\\n}\\n\"\r\n    },\r\n    \"contracts/safex/interfaces/IOrderbook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/ExchangeOrderbook.sol\\\";\\n\\ninterface IOrderbook {\\n    function initialize(uint256 id, address base_, address quote_, address engine_) external;\\n\\n    function fpop(bool isBid, uint256 price, uint256 remaining) external returns (uint32 orderId, uint256 required);\\n\\n    function setLmp(uint256 lmp) external;\\n\\n    function mktPrice() external view returns (uint256);\\n\\n    function assetValue(uint256 amount, bool isBid) external view returns (uint256 converted);\\n\\n    function isEmpty(bool isBid, uint256 price) external view returns (bool);\\n\\n    function getRequired(bool isBid, uint256 price, uint32 orderId) external view returns (uint256 required);\\n\\n    function convert(uint256 price, uint256 amount, bool isBid) external view returns (uint256 converted);\\n\\n    function placeAsk(address owner, uint256 price, uint256 amount) external returns (uint32 orderId);\\n\\n    function placeBid(address owner, uint256 price, uint256 amount) external returns (uint32 orderId);\\n\\n    function cancelOrder(bool isBid, uint256 price, uint32 orderId, address owner)\\n        external\\n        returns (uint256 remaining);\\n\\n    function execute(uint32 orderId, bool isBid, uint256 price, address sender, uint256 amount)\\n        external\\n        returns (address owner);\\n\\n    function heads() external view returns (uint256 bidHead, uint256 askHead);\\n\\n    function askHead() external view returns (uint256);\\n\\n    function bidHead() external view returns (uint256);\\n\\n    function getPrices(bool isBid, uint32 n) external view returns (uint256[] memory);\\n\\n    function getOrders(bool isBid, uint256 price, uint32 n) external view returns (ExchangeOrderbook.Order[] memory);\\n\\n    function getOrder(bool isBid, uint32 orderId) external view returns (ExchangeOrderbook.Order memory);\\n\\n    function getOrderIds(bool isBid, uint256 price, uint32 n) external view returns (uint32[] memory);\\n\\n    function getBaseQuote() external view returns(address base, address quote);\\n}\\n\"\r\n    },\r\n    \"contracts/safex/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"AF\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TF\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TFF\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success,) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETF\\\");\\n    }\\n\\n    function decimals(address token) internal view returns (uint8) {\\n        // bytes4(keccak256(bytes(\\\"decimals()\\\")));\\n        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(0x313ce567));\\n        require(success, \\\"DF\\\");\\n        return abi.decode(data, (uint8));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/safex/libraries/ExchangeOrderbook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nlibrary ExchangeOrderbook {\\n  // Order struct\\n  struct Order {\\n    address owner;\\n    uint256 depositAmount;\\n  }\\n\\n  // Order Linked List\\n  struct OrderStorage {\\n    /// Hashmap-style linked list of prices to route orders\\n    // key: price, value: order indices linked hashmap\\n    mapping(uint256 => mapping(uint32 => uint32)) list;\\n    mapping(uint32 => Order) orders;\\n    mapping(uint32 => bool) canceled;\\n    // Head of the linked list(i.e. lowest ask price / highest bid price)\\n    mapping(uint256 => uint32) head;\\n    // count of the orders, used for array allocation\\n    uint32 count;\\n    address engine;\\n  }\\n\\n  // for orders, lower depositAmount are next, higher depositAmount comes first\\n  function _insertId(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 id,\\n    uint256 amount\\n  ) internal {\\n    uint32 last = 0;\\n    uint32 head = self.head[price];\\n    mapping(uint32 => uint32) storage list = self.list[price];\\n    mapping(uint32 => Order) storage orders = self.orders;\\n    // insert order to the linked list\\n    // if the list is empty\\n    if (head == 0 || amount > self.orders[head].depositAmount) {\\n      self.head[price] = id;\\n      list[id] = head;\\n      return;\\n    }\\n    // Traverse through list until we find the right spot where id's deposit amount is higher than next\\n    while (head != 0) {\\n      // what if order deposit amount is bigger than the next order's deposit amount?\\n      uint32 next = list[head];\\n      if (amount < orders[next].depositAmount) {\\n        // Keep traversing\\n        head = list[head];\\n        last = next;\\n      } else if (amount > orders[next].depositAmount) {\\n        // This is either order is cancelled or order is at the end of the list\\n        if (orders[next].depositAmount == 0) {\\n          // what if order is canceled and order id still stays in the list?\\n          // if order is canceled and stays in the list, there is at least a next order in the list\\n          if (self.canceled[head]) {\\n            // Keep traversing\\n            head = list[head];\\n            last = next;\\n          } else {\\n            // Insert order at the end of the list\\n            list[head] = id;\\n            list[id] = 0;\\n            return;\\n          }\\n        }\\n        // Insert order in the middle of the list\\n        list[head] = id;\\n        list[id] = next;\\n        return;\\n      }\\n      // what if there is same order with same deposit amount?\\n      else if (amount == orders[next].depositAmount) {\\n        list[id] = list[head];\\n        list[head] = id;\\n        return;\\n      }\\n    }\\n  }\\n\\n  // pop front\\n  function _fpop(\\n    OrderStorage storage self,\\n    uint256 price\\n  ) internal returns (uint256) {\\n    uint32 first = self.head[price];\\n    if (first == 0) {\\n      return 0;\\n    }\\n    uint32 next = self.list[price][first];\\n    self.head[price] = next;\\n    delete self.list[price][first];\\n    return first;\\n  }\\n\\n  function _createOrder(\\n    OrderStorage storage self,\\n    address owner,\\n    uint256 depositAmount\\n  ) internal returns (uint32 id) {\\n    Order memory order = Order({ owner: owner, depositAmount: depositAmount });\\n    // prevent order overflow, order id must start from 1\\n    self.count = self.count == 0 || self.count == type(uint32).max\\n      ? 1\\n      : self.count + 1;\\n    self.orders[self.count] = order;\\n    return self.count;\\n  }\\n\\n  function _decreaseOrder(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 id,\\n    uint256 amount\\n  ) internal {\\n    uint256 decreased = self.orders[id].depositAmount - amount;\\n    if (decreased == 0) {\\n      _deleteOrder(self, price, id);\\n    } else {\\n      self.orders[id].depositAmount = decreased;\\n    }\\n  }\\n\\n  function _deleteOrder(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 id\\n  ) internal {\\n    uint32 last = 0;\\n    uint32 head = self.head[price];\\n    uint16 i;\\n    mapping(uint32 => uint32) storage list = self.list[price];\\n    // delete id in the order linked list\\n    if (head == id) {\\n      self.head[price] = list[head];\\n      delete list[id];\\n    } else {\\n      // search for the order id in the linked list\\n      while (head != 0 && i < 30) {\\n        uint32 next = list[head];\\n        if (head == id) {\\n          list[last] = next;\\n          delete list[id];\\n          break;\\n        }\\n        last = head;\\n        head = next;\\n        ++i;\\n      }\\n    }\\n    // delete order\\n    delete self.orders[id];\\n    // add canceled info to see if the order was deleted in the list\\n    if (i == 30) {\\n      self.canceled[id] = true;\\n    }\\n    return;\\n  }\\n\\n  // show n order ids at the price in the orderbook\\n  function _getOrderIds(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 n\\n  ) internal view returns (uint32[] memory) {\\n    uint32 head = self.head[price];\\n    uint32[] memory orders = new uint32[](n);\\n    uint32 i = 0;\\n    while (head != 0 && i < n) {\\n      orders[i] = head;\\n      head = self.list[price][head];\\n      i++;\\n    }\\n    return orders;\\n  }\\n\\n  function _getOrders(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 n\\n  ) internal view returns (Order[] memory) {\\n    uint32 head = self.head[price];\\n    Order[] memory orders = new Order[](n);\\n    uint32 i = 0;\\n    while (head != 0 && i < n) {\\n      orders[i] = self.orders[head];\\n      head = self.list[price][head];\\n      i++;\\n    }\\n    return orders;\\n  }\\n\\n  function _head(\\n    OrderStorage storage self,\\n    uint256 price\\n  ) internal view returns (uint32) {\\n    return self.head[price];\\n  }\\n\\n  function _isEmpty(\\n    OrderStorage storage self,\\n    uint256 price\\n  ) internal view returns (bool) {\\n    return self.head[price] == 0;\\n  }\\n\\n  function _next(\\n    OrderStorage storage self,\\n    uint256 price,\\n    uint32 curr\\n  ) internal view returns (uint32) {\\n    return self.list[price][curr];\\n  }\\n\\n  function _getOrder(\\n    OrderStorage storage self,\\n    uint32 id\\n  ) internal view returns (Order memory) {\\n    return self.orders[id];\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@graphprotocol/=node_modules/@graphprotocol/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@uniswap/v4-core/=lib/periphery-next/lib/v4-core/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/periphery-next/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-gas-snapshot/=lib/periphery-next/lib/forge-gas-snapshot/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"lib/periphery-next:@openzeppelin/contracts/=lib/periphery-next/lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/periphery-next:@uniswap/v4-core/=lib/periphery-next/lib/v4-core/\",\r\n      \"lib/periphery-next:forge-gas-snapshot/=lib/periphery-next/lib/forge-gas-snapshot/src/\",\r\n      \"lib/periphery-next:solmate/=lib/periphery-next/lib/v4-core/lib/solmate/src/\",\r\n      \"lib/periphery-next:v4-core/=lib/periphery-next/lib/v4-core/contracts/\",\r\n      \"openzeppelin-contracts/=lib/periphery-next/lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/periphery-next/lib/openzeppelin-contracts/contracts/\",\r\n      \"periphery-next/=lib/periphery-next/contracts/\",\r\n      \"solmate/=lib/periphery-next/lib/solmate/src/\",\r\n      \"v4-core/=lib/periphery-next/lib/v4-core/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDenom\",\"type\":\"uint256\"}],\"name\":\"InvalidFeeRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InvalidRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequired\",\"type\":\"uint256\"}],\"name\":\"OrderSizeTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"TooManyMatches\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"orderbook\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orderbook\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"OrderMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"orderbook\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"orderbook\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"PairAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"book\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderbook\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"orderId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"orderbook\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"orderIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bool[]\",\"name\":\"isBid\",\"type\":\"bool[]\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"cancelOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"converted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenom\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderbook\",\"type\":\"address\"}],\"name\":\"getBaseQuote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"getBookByPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"book\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getMktPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"mktPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getMktPricesWithIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"mktPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"orderId\",\"type\":\"uint32\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeOrderbook.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"}],\"name\":\"getOrderIds\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOrderbookById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"}],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeOrderbook.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPairNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getPairNamesWithIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"internalType\":\"struct IOrderbookFactory.Pair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getPairsWithIds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"internalType\":\"struct IOrderbookFactory.Pair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"heads\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidHead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"askHead\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orderbookFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"limitBuyETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"limitSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"limitSellETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"marketBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"marketBuyETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"marketSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"marketSellETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"mktPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderbookFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"orderId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"n\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"uid\",\"type\":\"uint32\"}],\"name\":\"rematchOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MatchingEngine", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}