{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *\r\n *  @title: NextGen 6529 - Word Pool\r\n *  @date: 20-December-2023 \r\n *  @version: 1.3\r\n *  @author: 6529 team\r\n */\r\n\r\npragma solidity ^0.8.19;\r\n\r\ncontract randomPool {\r\n\r\n    function getWord(uint256 id) private pure returns (string memory) {\r\n        \r\n        // array storing the words list\r\n        string[100] memory wordsList = [\"Acai\", \"Ackee\", \"Apple\", \"Apricot\", \"Avocado\", \"Babaco\", \"Banana\", \"Bilberry\", \"Blackberry\", \"Blackcurrant\", \"Blood Orange\", \r\n        \"Blueberry\", \"Boysenberry\", \"Breadfruit\", \"Brush Cherry\", \"Canary Melon\", \"Cantaloupe\", \"Carambola\", \"Casaba Melon\", \"Cherimoya\", \"Cherry\", \"Clementine\", \r\n        \"Cloudberry\", \"Coconut\", \"Cranberry\", \"Crenshaw Melon\", \"Cucumber\", \"Currant\", \"Curry Berry\", \"Custard Apple\", \"Damson Plum\", \"Date\", \"Dragonfruit\", \"Durian\", \r\n        \"Eggplant\", \"Elderberry\", \"Feijoa\", \"Finger Lime\", \"Fig\", \"Gooseberry\", \"Grapes\", \"Grapefruit\", \"Guava\", \"Honeydew Melon\", \"Huckleberry\", \"Italian Prune Plum\", \r\n        \"Jackfruit\", \"Java Plum\", \"Jujube\", \"Kaffir Lime\", \"Kiwi\", \"Kumquat\", \"Lemon\", \"Lime\", \"Loganberry\", \"Longan\", \"Loquat\", \"Lychee\", \"Mammee\", \"Mandarin\", \"Mango\", \r\n        \"Mangosteen\", \"Mulberry\", \"Nance\", \"Nectarine\", \"Noni\", \"Olive\", \"Orange\", \"Papaya\", \"Passion fruit\", \"Pawpaw\", \"Peach\", \"Pear\", \"Persimmon\", \"Pineapple\", \r\n        \"Plantain\", \"Plum\", \"Pomegranate\", \"Pomelo\", \"Prickly Pear\", \"Pulasan\", \"Quine\", \"Rambutan\", \"Raspberries\", \"Rhubarb\", \"Rose Apple\", \"Sapodilla\", \"Satsuma\", \r\n        \"Soursop\", \"Star Apple\", \"Star Fruit\", \"Strawberry\", \"Sugar Apple\", \"Tamarillo\", \"Tamarind\", \"Tangelo\", \"Tangerine\", \"Ugli\", \"Velvet Apple\", \"Watermelon\"];\r\n\r\n        // returns a word based on index\r\n        return wordsList[id];\r\n\r\n    }\r\n\r\n    function randomNumber() public view returns (uint256){\r\n        uint256 randomNum = uint(keccak256(abi.encodePacked(block.prevrandao, blockhash(block.number - 1), block.timestamp))) % 1000;\r\n        return randomNum;\r\n    }\r\n\r\n    function randomWord() public view returns (string memory) {\r\n        uint256 randomNum = uint(keccak256(abi.encodePacked(block.prevrandao, blockhash(block.number - 1), block.timestamp))) % 100;\r\n        return getWord(randomNum);\r\n    }\r\n\r\n    function returnIndex(uint256 id) public view returns (string memory) {\r\n        return getWord(id);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomWord\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"returnIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "randomPool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://70e7e41e07fc14be09cc19344ce910f332bd22c3e0072b7559b37409a00d8a31"}