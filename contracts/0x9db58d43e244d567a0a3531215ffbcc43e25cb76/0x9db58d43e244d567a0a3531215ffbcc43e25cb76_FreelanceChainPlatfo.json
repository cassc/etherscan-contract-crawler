{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Platform.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.6;\\n\\nimport \\\"../node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract FreelanceChainPlatform {\\n    address payable public contractOwner;\\n    IERC20 public fctToken;\\n    IERC20 public daiToken;\\n    IERC20 public usdtToken;\\n    IERC20 public usdcToken;\\n\\n    enum Currency { ETH, FCT, DAI, USDT, USDC }\\n\\n    mapping(address => uint) public tokenBalances;\\n\\n    constructor(IERC20 _fctToken, IERC20 _daiToken, IERC20 _usdtToken, IERC20 _usdcToken) {\\n        contractOwner = payable(msg.sender);\\n\\n        fctToken = _fctToken;\\n        daiToken = _daiToken;\\n        usdtToken = _usdtToken;\\n        usdcToken = _usdcToken;\\n\\n        tokenBalances[address(fctToken)] = fctToken.balanceOf(address(this));\\n        tokenBalances[address(daiToken)] = daiToken.balanceOf(address(this));\\n        tokenBalances[address(usdtToken)] = usdtToken.balanceOf(address(this));\\n        tokenBalances[address(usdcToken)] = usdcToken.balanceOf(address(this));\\n    }\\n\\n    uint constant FEE_ETH = 0.005 ether;\\n    uint constant FEE_USD = 10 ether;\\n    uint constant FEE_FCT = 1 ether;\\n\\n    mapping(uint => Project) public projects;\\n    mapping(uint => Application[]) public applications;\\n    mapping(uint => mapping(address => bool)) public hasApplied;\\n\\n    uint[] public projectIds;\\n    uint public totalProjectsCount = 0;\\n    uint public nextProjectId = 1;\\n\\n    event ProjectPosted(uint id);\\n    event ProjectUpdated(uint id);\\n    event ParticipantApplied(uint id, address participant, uint availableDate);\\n    event ParticipantApproved(uint id, address participant);\\n    event RewardReleased(uint id);\\n\\n    struct Project {\\n        uint id;\\n        address payable author;\\n        address payable participant;\\n        uint reward;\\n        Currency rewardCurrency;\\n        bool isEligibleToDiscount;\\n        string title;\\n        string description;\\n        string[] skillsRequired;\\n        uint deadline;\\n        address payable[] candidates;\\n        bool rewardReleased;\\n    }\\n\\n    struct Application {\\n        uint projectId;\\n        address payable applicant;\\n        uint bid;\\n        Currency bidCurrency;\\n        uint availableDate;\\n        bool isProjectEligibleToDiscount;\\n    }\\n\\n    //\\n    // Payable functions\\n\\n    function PreSaleInvest() public payable {\\n        uint start = 1675036800; // Nov 1st 0:00\\n        uint end = 1677628799; // Nov 30th 23:59\\n\\n        require(\\n            block.timestamp >= start && block.timestamp <= end,\\n            \\\"Pre-sale is not active\\\"\\n        );\\n\\n        uint minPurchase = 500 * 10 ** 18;\\n        uint rate = 16000;\\n\\n        require(\\n            msg.value * rate >= minPurchase,\\n            \\\"You have to buy at least 500 FCT\\\"\\n        );\\n\\n        uint tokensToBuy = msg.value * rate;\\n\\n        require(\\n            fctToken.balanceOf(address(this)) >= tokensToBuy,\\n            \\\"Not enough FCT tokens in contract\\\"\\n        );\\n\\n        require(\\n            fctToken.transfer(msg.sender, tokensToBuy),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        contractOwner.transfer(msg.value);\\n    }\\n\\n    function postProject(string memory title, string memory description, string[] memory skillsRequired, uint deadline, uint reward, Currency currency, Currency rewardCurrency) public payable {\\n        if (currency == Currency.FCT) {\\n            require(\\n                fctToken.transferFrom(msg.sender, address(this), FEE_FCT),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.DAI) {\\n            require(\\n                daiToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.USDT) {\\n            require(\\n                usdtToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.USDC) {\\n            require(\\n                usdcToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.ETH) {\\n            require(msg.value >= FEE_ETH, \\\"Fee is not correct\\\");\\n        }\\n\\n        require(deadline > block.timestamp, \\\"Deadline must be in the future\\\");\\n\\n        bool eligibilityStatus = (currency == Currency.FCT || rewardCurrency == Currency.FCT) ? true : false;\\n\\n        Project storage p = projects[nextProjectId];\\n        p.id = nextProjectId;\\n        p.rewardReleased = false;\\n        p.author = payable(msg.sender);\\n        p.title = title;\\n        p.description = description;\\n        p.skillsRequired = skillsRequired;\\n        p.deadline = deadline;\\n        p.reward = reward;\\n        p.rewardCurrency = rewardCurrency;\\n        p.isEligibleToDiscount = eligibilityStatus;\\n\\n        projectIds.push(nextProjectId);\\n        totalProjectsCount++;\\n\\n        emit ProjectPosted(p.id);\\n\\n        nextProjectId++;\\n    }\\n\\n    function updateProject(uint id, uint newReward, string memory title, string memory description, string[] memory skillsRequired, uint deadline, Currency currency, Currency rewardCurrency) public payable {\\n        if (currency == Currency.FCT) {\\n            require(\\n                fctToken.transferFrom(msg.sender, address(this), FEE_FCT),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.DAI) {\\n            require(\\n                daiToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.USDT) {\\n            require(\\n                usdtToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.USDC) {\\n            require(\\n                usdcToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.ETH) {\\n            require(msg.value >= FEE_ETH, \\\"Fee is not correct\\\");\\n        }\\n\\n        require(deadline > block.timestamp, \\\"Deadline must be in the future\\\");\\n\\n        Project storage p = projects[id];\\n\\n        require(p.author == msg.sender, \\\"Only author can update the project\\\");\\n\\n        require(\\n            p.participant == address(0),\\n            \\\"Project info can't be updated after participant has been assigned\\\"\\n        );\\n\\n        bool eligibilityStatus = (currency == Currency.FCT || rewardCurrency == Currency.FCT) ? true : false;\\n\\n        p.reward = newReward;\\n        p.title = title;\\n        p.description = description;\\n        p.skillsRequired = skillsRequired;\\n        p.deadline = deadline;\\n        p.rewardCurrency = rewardCurrency;\\n        p.isEligibleToDiscount = eligibilityStatus;\\n\\n        emit ProjectUpdated(id);\\n    }\\n\\n    function applyForProject(uint id, uint bid, uint availableDate, Currency currency, Currency bidCurrency) public payable {\\n        if (currency == Currency.FCT) {\\n            require(\\n                fctToken.transferFrom(msg.sender, address(this), FEE_FCT),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.DAI) {\\n            require(\\n                daiToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.USDT) {\\n            require(\\n                usdtToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.USDC) {\\n            require(\\n                usdcToken.transferFrom(msg.sender, address(this), FEE_USD),\\n                \\\"Fee is not correct\\\"\\n            );\\n        } else if (currency == Currency.ETH) {\\n            require(msg.value >= FEE_ETH, \\\"Fee is not correct\\\");\\n        }\\n\\n        Project storage p = projects[id];\\n        require(\\n            p.author != msg.sender,\\n            \\\"Author cannot apply to their own project\\\"\\n        );\\n        require(\\n            p.participant == address(0),\\n            \\\"Project already has a participant\\\"\\n        );\\n        require(\\n            availableDate > block.timestamp,\\n            \\\"Available date must be in the future\\\"\\n        );\\n\\n        require(\\n            !hasApplied[id][msg.sender],\\n            \\\"User has already applied to this project\\\"\\n        );\\n\\n        hasApplied[id][msg.sender] = true;\\n\\n        p.candidates.push(payable(msg.sender));\\n\\n        bool eligibilityStatus = (currency == Currency.FCT || bidCurrency == Currency.FCT) ? true : false;\\n\\n        Application memory newApplication = Application({\\n            projectId: id,\\n            applicant: payable(msg.sender),\\n            bid: bid,\\n            bidCurrency: bidCurrency,\\n            isProjectEligibleToDiscount: eligibilityStatus,\\n            availableDate: availableDate\\n        });\\n\\n        applications[id].push(newApplication);\\n\\n        emit ParticipantApplied(id, msg.sender, availableDate);\\n    }\\n\\n    function approveApplicant(uint id, address payable candidate) public payable {\\n        Project storage p = projects[id];\\n        \\n        Application memory candidateApplication;\\n        bool applicationExists = false;\\n        \\n        for (uint i = 0; i < applications[id].length; i++) {\\n            if (applications[id][i].applicant == candidate) {\\n                candidateApplication = applications[id][i];\\n                applicationExists = true;\\n                break;\\n            }\\n        }\\n\\n        require(applicationExists, \\\"This candidate has not applied\\\");\\n\\n        if (candidateApplication.bidCurrency == Currency.FCT) {\\n            require(\\n                fctToken.transferFrom(msg.sender, address(this), candidateApplication.bid),\\n                \\\"Reward is not correct\\\"\\n            );\\n        } else if (candidateApplication.bidCurrency == Currency.DAI) {\\n            require(\\n                daiToken.transferFrom(msg.sender, address(this), candidateApplication.bid),\\n                \\\"Reward is not correct\\\"\\n            );\\n        } else if (candidateApplication.bidCurrency == Currency.USDT) {\\n            require(\\n                usdtToken.transferFrom(msg.sender, address(this), candidateApplication.bid),\\n                \\\"Reward is not correct\\\"\\n            );\\n        } else if (candidateApplication.bidCurrency == Currency.USDC) {\\n            require(\\n                usdcToken.transferFrom(msg.sender, address(this), candidateApplication.bid),\\n                \\\"Reward is not correct\\\"\\n            );\\n        } else if (candidateApplication.bidCurrency == Currency.ETH) {\\n            require(msg.value == candidateApplication.bid, \\\"Reward is not correct\\\");\\n        }\\n\\n        require(\\n            p.author == msg.sender,\\n            \\\"Only author can approve the applicant\\\"\\n        );\\n        require(\\n            p.participant == address(0),\\n            \\\"A participant has already been approved\\\"\\n        );\\n\\n        p.participant = candidate;\\n        p.reward = candidateApplication.bid;\\n        p.rewardCurrency = candidateApplication.bidCurrency;\\n        p.isEligibleToDiscount = candidateApplication.isProjectEligibleToDiscount;\\n\\n        emit ParticipantApproved(id, candidate);\\n    }\\n\\n    function releaseReward(uint id) public payable {\\n        Project storage p = projects[id];\\n        require(\\n            p.participant != address(0),\\n            \\\"No participant assigned to the project\\\"\\n        );\\n        require(p.author == msg.sender, \\\"Only author can release the reward\\\");\\n        require(!p.rewardReleased, \\\"Reward has already been released\\\");\\n\\n        uint platformCut;\\n        if (p.rewardCurrency == Currency.FCT) {\\n            platformCut = p.reward / 2000; // 0.05%\\n        } else {\\n            platformCut = p.reward / 200; // 0.5%\\n        }\\n\\n        uint participantReward = p.reward - platformCut;\\n        \\n        // Transfer platform cut and participant reward\\n        if (p.rewardCurrency == Currency.FCT) {\\n            require(fctToken.transfer(contractOwner, platformCut), \\\"Platform cut transfer failed\\\");\\n            require(fctToken.transfer(p.participant, participantReward), \\\"Participant reward transfer failed\\\");\\n        } else if (p.rewardCurrency == Currency.DAI) {\\n            require(daiToken.transfer(contractOwner, platformCut), \\\"Platform cut transfer failed\\\");\\n            require(daiToken.transfer(p.participant, participantReward), \\\"Participant reward transfer failed\\\");\\n        } else if (p.rewardCurrency == Currency.USDT) {\\n            require(usdtToken.transfer(contractOwner, platformCut), \\\"Platform cut transfer failed\\\");\\n            require(usdtToken.transfer(p.participant, participantReward), \\\"Participant reward transfer failed\\\");\\n        } else if (p.rewardCurrency == Currency.USDC) {\\n            require(usdcToken.transfer(contractOwner, platformCut), \\\"Platform cut transfer failed\\\");\\n            require(usdcToken.transfer(p.participant, participantReward), \\\"Participant reward transfer failed\\\");\\n        } else if (p.rewardCurrency == Currency.ETH) {\\n            contractOwner.transfer(platformCut);\\n            p.participant.transfer(participantReward);\\n        } \\n\\n        p.rewardReleased = true;\\n\\n        emit RewardReleased(id);\\n    }\\n\\n\\n    //\\n    // Read functions\\n\\n    function getProjects() public view returns (uint[] memory) {\\n        return projectIds;\\n    }\\n\\n    function getTotalProjectsCount() public view returns (uint256) {\\n        return totalProjectsCount;\\n    }\\n\\n    function getProjectById(uint id) public view returns (uint, address, address, uint, Currency, string[] memory, string memory, string memory, uint, address[] memory) {\\n        Project memory p = projects[id];\\n        return (p.id, address(p.author), address(p.participant), p.reward, p.rewardCurrency, p.skillsRequired, p.title, p.description, p.deadline, stringsToAddresses(p.candidates));\\n    }\\n\\n    function getFctBalance() public view returns (uint) {\\n        return tokenBalances[address(fctToken)];\\n    }\\n\\n    //\\n    // Helper functions\\n\\n    function getTotalLockedRewards() internal view returns (uint) {\\n        uint totalLocked = 0;\\n        for (uint i = 0; i < projectIds.length; i++) {\\n            uint id = projectIds[i];\\n            Project storage p = projects[id];\\n            if (p.participant != address(0) && !p.rewardReleased) {\\n                totalLocked += p.reward;\\n            }\\n        }\\n        return totalLocked;\\n    }\\n\\n    function stringsToAddresses(address payable[] memory input) private pure returns (address[] memory) {\\n        address[] memory output = new address[](input.length);\\n        for (uint i = 0; i < input.length; i++) {\\n            output[i] = address(input[i]);\\n        }\\n        return output;\\n    }\\n\\n    //\\n    // Contract owner functions\\n\\n    function withdraw() public {\\n        require(\\n            msg.sender == contractOwner,\\n            \\\"Only the contractOwner can withdraw\\\"\\n        );\\n\\n        uint totalLocked = getTotalLockedRewards();\\n        uint availableBalance = address(this).balance - totalLocked;\\n\\n        require(availableBalance > 0, \\\"No available balance for withdrawal\\\");\\n        contractOwner.transfer(availableBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fctToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_daiToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableDate\",\"type\":\"uint256\"}],\"name\":\"ParticipantApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProjectPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProjectUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RewardReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PreSaleInvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"bidCurrency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"availableDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProjectEligibleToDiscount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableDate\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"bidCurrency\",\"type\":\"uint8\"}],\"name\":\"applyForProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"approveApplicant\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fctToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFctBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProjectById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProjects\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProjectsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasApplied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"skillsRequired\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"rewardCurrency\",\"type\":\"uint8\"}],\"name\":\"postProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"rewardCurrency\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isEligibleToDiscount\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rewardReleased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"releaseReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProjectsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"skillsRequired\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"enum FreelanceChainPlatform.Currency\",\"name\":\"rewardCurrency\",\"type\":\"uint8\"}],\"name\":\"updateProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FreelanceChainPlatform", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d69154f833c740e6d9fa9307b66b58d4afbeee4f0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "berlin", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}