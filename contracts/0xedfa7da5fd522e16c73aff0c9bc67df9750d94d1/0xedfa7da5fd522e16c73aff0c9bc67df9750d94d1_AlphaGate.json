{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n -@#*+-:.                                    .:-=*#@=  \r\n @@@@@@@@@@%#**+==--:::.........:::--=++*#%@@@@@@@@@@. \r\n*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@* \r\n.:=+*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%*+=:. \r\n        :@@@@@@@@@%@@@@@@@@@@@@@@@@@%%@@@@@@@@-        \r\n  ======+@@@@@@@@#    +@@@@@@@@%+    *@@@@@@@@*========\r\n  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n  *****#@@@@@@@@@@*******************@@@@@@@@@@#*******\r\n       -@@@@@@@@@%                   #@@@@@@@@@+       \r\n       #@@@@@@@@@%                   #@@@@@@@@@%       \r\n      .@@@@@@@@@@%                   #@@@@@@@@@@:      \r\n      +@@@@@@@@@@%                   #@@@@@@@@@@*      \r\n      @@@@@@@@@@@%                   #@@@@@@@@@@@      \r\n     -@@@@@@@@@@@%                   #@@@@@@@@@@@=     \r\n     #@@@@@@@@@@@%                   #@@@@@@@@@@@%     \r\n    .@@@@@@@@@@@@%                   #@@@@@@@@@@@@:    \r\n    +@@@@@@@@@@@@%                   #@@@@@@@@@@@@#    \r\n    @@@@@@@@@@@@@%                   #@@@@@@@@@@@@@.   \r\n   -@@@@@@@@@@@@@%                   #@@@@@@@@@@@@@+   \r\n   #@@@@@@@@@@@@@%                   #@@@@@@@@@@@@@@   \r\n  .@@@@@@@@@@@@@@%                   #@@@@@@@@@@@@@@-  \r\n  +@@@@@@@@@@@@@@%                   #@@@@@@@@@@@@@@#  \r\n   \r\n A telegram tool-suite providing low latency, high quality calls\r\n aggregated into one single feed designed to elevate your ETH trading experience.\r\n \r\n Features include, but are not limited to, auto-buy, call channels ranked,\r\n filtering & integrations with popular ETH snipers such as Maestro, BananaGun & Unibot.\r\n \r\n Bring your trading experience to the next level with AlphaGate\r\n\r\n * Bot: https://t.me/alphagateggbot\r\n * Website: https://alphagate.gg/\r\n * Twitter: https://twitter.com/alphagategg\r\n * Telegram: https://t.me/alphagategg\r\n * Community: https://t.me/alphagateportal\r\n   \r\n*/\r\n \r\npragma solidity 0.8.20;\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n \r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n \r\n    error OwnableUnauthorizedAccount(address account);\r\n \r\n    error OwnableInvalidOwner(address owner);\r\n \r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n \r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address to, uint256 value) external returns (bool);\r\n \r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n \r\n    function approve(address spender, uint256 value) external returns (bool);\r\n \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n \r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n \r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\ncontract AlphaGate is IERC20, Ownable {\r\n\r\n    event TradingStarted();\r\n\r\n    bool public tradingOpen;\r\n \r\n    address private constant DEAD_ADDRESS = address(0xdead);\r\n    address public uniswapV2PairAddress;\r\n    address payable public taxAddress;\r\n    IUniswapV2Router02 immutable router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n \r\n    string private constant _name = \"AlphaGate\";\r\n    string private constant _symbol = \"AGATE\";\r\n \r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 100_000_000 * (10**_decimals);\r\n \r\n    uint256 private _swapCount = 0;\r\n    uint256 private constant totalBuyTax = 4;\r\n    uint256 private constant totalSellTax = 4;\r\n    uint256 private constant initialMaxTxLimitPercent = 1;\r\n    uint256 private constant preventSwapBefore = 15;\r\n    uint256 private finalMaxTxLimitPercent = 15;\r\n    uint256 private lowerLimitsAndTaxesAfter = 20;\r\n    uint256 private swapThresholdPercent = 5; //0.5%\r\n    bool private inSwap = false;\r\n \r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n \r\n    modifier onlyTaxAddress() {\r\n        require(msg.sender == taxAddress, \"Not TaxAddress\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _taxAddress) {\r\n        require(_taxAddress != address(0), \"ZeroAddress not allowed\");\r\n        taxAddress = payable(_taxAddress);\r\n \r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[taxAddress] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[address(0)] = true;\r\n        isFeeExempt[DEAD_ADDRESS] = true;\r\n \r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n \r\n    function setSwapThresholdPercent(uint256 _newSwapThresholdPercent) external onlyTaxAddress {\r\n        swapThresholdPercent = _newSwapThresholdPercent;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        require(lowerLimitsAndTaxesAfter != 0, \"Limits have already been removed\");\r\n        lowerLimitsAndTaxesAfter = 0;\r\n    }\r\n\r\n    function setTxLimit(uint256 _newMaxTxLimitPercent) external onlyOwner {\r\n        require(_newMaxTxLimitPercent > 10 && _newMaxTxLimitPercent < 30, \"Transaction limit must be higher than 10% and lower than 30%\");\r\n        finalMaxTxLimitPercent = _newMaxTxLimitPercent;\r\n    }\r\n \r\n    function setFeeExempt(address addressToExempt, bool isExempt) external onlyOwner {\r\n        require(isFeeExempt[addressToExempt] != isExempt, \"Value has to be different than the current value\");\r\n        isFeeExempt[addressToExempt] = isExempt;\r\n    }\r\n \r\n    function setUniswapV2Pair(address pairAddress) external onlyOwner {\r\n        require(pairAddress != address(0), \"ZeroAddress not allowed\");\r\n        require(!tradingOpen, \"Trading is already open\");\r\n        uniswapV2PairAddress = pairAddress;\r\n    }\r\n \r\n    function startTrading() external onlyOwner {\r\n        require(\r\n            uniswapV2PairAddress != address(0),\r\n            \"uniswapV2PairAddress can't be ZeroAddress\"\r\n        );\r\n        require(!tradingOpen, \"Trading is already open\");\r\n        \r\n        tradingOpen = true;\r\n        emit TradingStarted();\r\n    }\r\n \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address from, address to)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[from][to];\r\n    }\r\n \r\n    function approve(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n \r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n \r\n        return true;\r\n    }\r\n \r\n    function increaseAllowance(address to, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), to, _allowances[_msgSender()][to] + addedValue);\r\n        return true;\r\n    }\r\n \r\n    function decreaseAllowance(address to, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][to];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), to, currentAllowance - subtractedValue);\r\n        }\r\n \r\n        return true;\r\n    }\r\n \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(amount > 0, \"ERC20: transfer amount zero\");\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n \r\n        if(!tradingOpen) {\r\n            require(isFeeExempt[sender] || isFeeExempt[recipient], \"Trading is disabled\");\r\n        }\r\n\r\n        uint256 taxTokens = 0;\r\n        uint256 maxTxTokens = 0;\r\n\r\n        uint256 taxSwapThreshold = (_totalSupply * swapThresholdPercent) / 1000;\r\n \r\n        if(_balances[address(this)] >= taxSwapThreshold && !inSwap && recipient == uniswapV2PairAddress && !(isFeeExempt[sender] || isFeeExempt[recipient]) && _swapCount >= preventSwapBefore) {\r\n            inSwap = true;\r\n            uint256 swapBackAmount = taxSwapThreshold;\r\n            swapTokensForEth(swapBackAmount);\r\n \r\n            uint256 contractBalance = address(this).balance;\r\n\r\n            if(contractBalance > 0) {\r\n                _withdraw(contractBalance);\r\n            }\r\n            inSwap = false;\r\n        }\r\n \r\n        if (sender == uniswapV2PairAddress || recipient == uniswapV2PairAddress) {\r\n            if (_swapCount < lowerLimitsAndTaxesAfter) {\r\n                maxTxTokens = (_totalSupply * initialMaxTxLimitPercent) / 100;\r\n            } else {\r\n                maxTxTokens = (_totalSupply * finalMaxTxLimitPercent) / 100;\r\n            }\r\n            _swapCount++;\r\n            taxTokens = _calculateTax(sender, recipient, amount);\r\n        }\r\n \r\n        if (taxTokens > 0) {\r\n            amount -= taxTokens;\r\n            _balances[address(this)] += taxTokens;\r\n            emit Transfer(sender, address(this), taxTokens);\r\n        }\r\n \r\n        if (maxTxTokens > 0 && sender == uniswapV2PairAddress && recipient != address(router) && !(isFeeExempt[sender] || isFeeExempt[recipient])) {\r\n            require(\r\n                amount <= maxTxTokens,\r\n                \"Transaction exceeds transaction limit\"\r\n            );\r\n        }\r\n \r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n \r\n    function _calculateTax(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        if (isFeeExempt[from] || isFeeExempt[to] || from == address(router) || to == address(router)) {\r\n            return (0);\r\n        }\r\n \r\n        uint256 currentBuyTax = totalBuyTax;\r\n        uint256 currentSellTax = totalSellTax;\r\n \r\n        if (_swapCount < lowerLimitsAndTaxesAfter) {\r\n            currentBuyTax = 30;\r\n            currentSellTax = 30;\r\n        }\r\n \r\n        uint256 totalTaxTokens = 0;\r\n \r\n        if (from == uniswapV2PairAddress) {\r\n            totalTaxTokens = (amount * currentBuyTax) / 100;\r\n        } else if (to == uniswapV2PairAddress) {\r\n            totalTaxTokens = (amount * currentSellTax) / 100;\r\n        }\r\n \r\n        return (totalTaxTokens);\r\n    }\r\n \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n \r\n        emit Transfer(account, DEAD_ADDRESS, amount);\r\n    }\r\n \r\n    function burn(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n \r\n    function swapTokensForEth(uint256 _tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), _tokenAmount);\r\n \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function _withdraw(uint256 _amount) internal {\r\n        taxAddress.transfer(_amount);\r\n    }\r\n \r\n    function manualSwap(uint256 _tokenAmount) external onlyTaxAddress {\r\n        swapTokensForEth(_tokenAmount);\r\n        _withdraw(address(this).balance);\r\n    }\r\n \r\n    function _approve(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: approve from the zero address\");\r\n        require(to != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[from][to] = amount;\r\n        emit Approval(from, to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToExempt\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapThresholdPercent\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTxLimitPercent\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2PairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AlphaGate", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000db6cbfbdfa8c3590aab2828fe6c3f1951dd5f91f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://06c782fc45090a63611c75666941bd4471047c8649d7e03016462209639ac6e5"}