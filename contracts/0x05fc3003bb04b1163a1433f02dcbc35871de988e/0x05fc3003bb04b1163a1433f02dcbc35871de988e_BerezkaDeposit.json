{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Deposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// Developed by EasyChain Blockchain Development Team (easychain.tech)\\n//\\npragma solidity ^0.8.4;\\n\\nimport \\\"./api/IAgent.sol\\\";\\nimport \\\"./api/ITokens.sol\\\";\\nimport \\\"./common/BerezkaOracleClient.sol\\\";\\nimport \\\"./common/BerezkaDaoManager.sol\\\";\\nimport \\\"./common/BerezkaStableCoinManager.sol\\\";\\n\\n// This contract provides Deposit function for Berezka DAO\\n// Basic flow is:\\n//  1. User obtains signed price data from trusted off-chain Oracle\\n//  2. Exchange rate is computed\\n//  3. User's stable coins are transferred to agent\\n//  4. DAO tokens are minted to user\\n//\\ninterface IERC20TransferFrom {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\\ncontract BerezkaDeposit is\\n    BerezkaOracleClient,\\n    BerezkaDaoManager,\\n    BerezkaStableCoinManager\\n{\\n    // Events\\n    event DepositSuccessEvent(\\n        address indexed daoToken,\\n        uint256 daoTokenAmount,\\n        address indexed stableToken,\\n        uint256 stableTokenAmount,\\n        address indexed sender,\\n        uint256 price,\\n        uint256 timestamp,\\n        string ref\\n    );\\n\\n    struct DepositData {\\n        uint256 amount;\\n        address token;\\n        address targetToken;\\n        uint256 optimisticPrice;\\n        uint256 optimisticPriceTimestamp;\\n        bytes signature;\\n        string ref;\\n        address sender;\\n    }\\n\\n    // Main function. Allows user (msg.sender) to deposit funds to DAO.\\n    // _amount - amount of DAO tokens to recieve\\n    // _token - token of DAO to exchange\\n    // _targetToken - token to receive in exchange\\n    // _optimisticPrice - an optimistic price of DAO token. Used to check if DAO Agent\\n    //                    have enough funds on it's balance. Is not used to calculare\\n    //                    use returns\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        address _targetToken,\\n        uint256 _optimisticPrice,\\n        uint256 _optimisticPriceTimestamp,\\n        bytes memory _signature,\\n        string memory _ref\\n    )\\n        public\\n        withValidOracleData(\\n            _token,\\n            _optimisticPrice,\\n            _optimisticPriceTimestamp,\\n            _signature\\n        )\\n        isWhitelisted(_targetToken)\\n    {\\n        // Require that amount is positive\\n        //\\n        require(_amount > 0, \\\"ZERO_TOKEN_AMOUNT\\\");\\n\\n        DepositData memory data = DepositData({\\n            amount: _amount,\\n            token: _token,\\n            targetToken: _targetToken,\\n            optimisticPrice: _optimisticPrice,\\n            optimisticPriceTimestamp: _optimisticPriceTimestamp,\\n            signature: _signature,\\n            ref: _ref,\\n            sender: msg.sender\\n        });\\n\\n        _deposit(data);\\n    }\\n\\n    function _deposit(DepositData memory _data) internal {\\n        // Require that user have funds to fullfill request (optimisitcally)\\n        // And that this contract can receive neccesary amount of funds from user\\n        //\\n        uint256 optimisticAmount = computeExchange(\\n            _data.amount,\\n            _data.optimisticPrice,\\n            _data.targetToken\\n        );\\n\\n        _doDeposit(\\n            _data.amount, \\n            _data.token, \\n            _data.targetToken, \\n            _data.sender, \\n            optimisticAmount\\n        );\\n\\n        // Emit deposit success event\\n        //\\n        emit DepositSuccessEvent(\\n            _data.token,\\n            _data.amount,\\n            _data.targetToken,\\n            optimisticAmount,\\n            _data.sender,\\n            _data.optimisticPrice,\\n            _data.optimisticPriceTimestamp,\\n            _data.ref\\n        );\\n    }\\n\\n    function _doDeposit(\\n        uint256 _amount,\\n        address _token,\\n        address _targetToken,\\n        address _user,\\n        uint256 _optimisticAmount\\n    ) internal {\\n        address agentAddress = _agentAddress(_token);\\n\\n        IERC20TransferFrom targetToken = IERC20TransferFrom(_targetToken);\\n        \\n        // Perform actual exchange\\n        //\\n        targetToken.transferFrom(_user, agentAddress, _optimisticAmount);\\n\\n        // Mint tokens\\n        //\\n        ITokens tokens = ITokens(daoConfig[_token].tokens);\\n        tokens.mint(_user, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/api/IAgent.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface IAgent {\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/api/ITokens.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface ITokens {\\n    \\n    function burn(address _holder, uint256 _amount) external;\\n\\n    function mint(address _holder, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/common/BerezkaOracleClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// Developed by EasyChain Blockchain Development Team (easychain.tech)\\n//\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BerezkaOracleClient is Ownable {\\n    // Address of Oracle\\n    //\\n    address public oracleAddress = 0xAb66dE3DF08318922bb4cE15553E4C2dCf9187A1;\\n\\n    // Signature expiration time\\n    //\\n    uint256 public signatureValidityDuractionSec = 3600;\\n\\n    modifier withValidOracleData(\\n        address _token,\\n        uint256 _optimisticPrice,\\n        uint256 _optimisticPriceTimestamp,\\n        bytes memory _signature\\n    ) {\\n        // Check price is not Zero\\n        //\\n        require(_optimisticPrice > 0, \\\"ZERO_OPTIMISTIC_PRICE\\\");\\n\\n        // Check that signature is not expired and is valid\\n        //\\n        require(\\n            isValidSignatureDate(_optimisticPriceTimestamp),\\n            \\\"EXPIRED_PRICE_DATA\\\"\\n        );\\n\\n        require(\\n            isValidSignature(\\n                _optimisticPrice,\\n                _optimisticPriceTimestamp,\\n                _token,\\n                _signature\\n            ),\\n            \\\"INVALID_SIGNATURE\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    function isValidSignatureDate(uint256 _optimisticPriceTimestamp)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return computeSignatureDateDelta(_optimisticPriceTimestamp) <= signatureValidityDuractionSec;\\n    }\\n\\n    function computeSignatureDateDelta(uint256 _optimisticPriceTimestamp)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 timeDelta = 0;\\n        if (_optimisticPriceTimestamp >= block.timestamp) {\\n            timeDelta = _optimisticPriceTimestamp - block.timestamp;\\n        } else {\\n            timeDelta = block.timestamp - _optimisticPriceTimestamp;\\n        }\\n        return timeDelta;\\n    }\\n\\n    // Validates oracle price signature\\n    //\\n    function isValidSignature(\\n        uint256 _price,\\n        uint256 _timestamp,\\n        address _token,\\n        bytes memory _signature\\n    ) public view returns (bool) {\\n        return recover(_price, _timestamp, _token, _signature) == oracleAddress;\\n    }\\n\\n    // Validates oracle price signature\\n    //\\n    function recover(\\n        uint256 _price,\\n        uint256 _timestamp,\\n        address _token,\\n        bytes memory _signature\\n    ) public pure returns (address) {\\n        bytes32 dataHash = keccak256(\\n            abi.encodePacked(_price, _timestamp, _token)\\n        );\\n        bytes32 signedMessageHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)\\n        );\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n        address signer = ecrecover(signedMessageHash, v, r, s);\\n        return signer;\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        public\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n\\n    // Adds possible tokens (stableconins) to withdraw to\\n    // _whitelisted - list of stableconins to withdraw to\\n    //\\n    function setSignatureValidityDurationSec(\\n        uint256 _signatureValidityDuractionSec\\n    ) public onlyOwner {\\n        require(_signatureValidityDuractionSec > 0);\\n\\n        signatureValidityDuractionSec = _signatureValidityDuractionSec;\\n    }\\n\\n    // Sets an address of Oracle\\n    // _oracleAddres - Oracle\\n    //\\n    function setOracleAddress(address _oracleAddres) public onlyOwner {\\n        oracleAddress = _oracleAddres;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/BerezkaDaoManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// Developed by EasyChain Blockchain Development Team (easychain.tech)\\n//\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BerezkaDaoManager is Ownable {\\n    // Information about DAO\\n    struct Dao {\\n        address agent; // Address of Aragon DAO Agent App\\n        address tokens; // Address of Aragon DAO Tokens App\\n    }\\n\\n    // Each token have an agent to withdraw tokens from\\n    //\\n    mapping(address => Dao) public daoConfig;\\n\\n    function _agentAddress(\\n        address _token\\n    ) public view returns (address) {\\n        address agentAddress = daoConfig[_token].agent;\\n        // Require that there is an agent (vault) address for a given token\\n        //\\n        require(agentAddress != address(0), \\\"NO_DAO_FOR_TOKEN\\\");\\n        return agentAddress;\\n    }\\n\\n    // Adds new DAO to contract.\\n    // _token - DAO token\\n    // _tokens - corresponding Tokens service in Aragon, that manages _token\\n    // _agent - agent contract in Aragon (fund holder)\\n    //\\n    function addDao(\\n        address _token,\\n        address _tokens,\\n        address _agent\\n    ) public onlyOwner {\\n        daoConfig[_token] = Dao(_agent, _tokens);\\n    }\\n\\n    // Removes DAO from contract\\n    // _token - token to remove\\n    //\\n    function deleteDao(address _token) public onlyOwner {\\n        delete daoConfig[_token];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/BerezkaStableCoinManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// Developed by EasyChain Blockchain Development Team (easychain.tech)\\n//\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract BerezkaStableCoinManager is Ownable {\\n    \\n    // Stable token whitelist to use\\n    //\\n    mapping(address => bool) public whitelist;\\n\\n    modifier isWhitelisted(\\n        address _targetToken\\n    ) {\\n        require(whitelist[_targetToken], \\\"INVALID_TOKEN_TO_DEPOSIT\\\");\\n        _;\\n    }\\n\\n    // Computes an amount of _targetToken that user will get in exchange for\\n    // a given amount for DAO tokens\\n    // _amount - amount of DAO tokens\\n    // _price - price in 6 decimals per 10e18 of DAO token\\n    // _targetToken - target token to receive\\n    //\\n    function computeExchange(\\n        uint256 _amount,\\n        uint256 _price,\\n        address _targetToken\\n    ) public view returns (uint256) {\\n        IERC20Metadata targetToken = IERC20Metadata(_targetToken);\\n        uint256 result = _amount * _price / 10 ** (24 - targetToken.decimals());\\n        require(result > 0, \\\"INVALID_TOKEN_AMOUNT\\\");\\n        return result;\\n    }\\n\\n    // Adds possible tokens (stableconins) to use\\n    // _whitelisted - list of stableconins to use\\n    //\\n    function addWhitelistTokens(address[] memory _whitelisted)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _whitelisted.length; i++) {\\n            whitelist[_whitelisted[i]] = true;\\n        }\\n    }\\n\\n    // Removes possible tokens (stableconins) to use\\n    // _whitelisted - list of stableconins to use\\n    //\\n    function removeWhitelistTokens(address[] memory _whitelisted)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _whitelisted.length; i++) {\\n            whitelist[_whitelisted[i]] = false;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"daoToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ref\",\"type\":\"string\"}],\"name\":\"DepositSuccessEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"_agentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"addDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelisted\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"computeExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optimisticPriceTimestamp\",\"type\":\"uint256\"}],\"name\":\"computeSignatureDateDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokens\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deleteDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_optimisticPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_optimisticPriceTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_ref\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optimisticPriceTimestamp\",\"type\":\"uint256\"}],\"name\":\"isValidSignatureDate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelisted\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddres\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_signatureValidityDuractionSec\",\"type\":\"uint256\"}],\"name\":\"setSignatureValidityDurationSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureValidityDuractionSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BerezkaDeposit", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}