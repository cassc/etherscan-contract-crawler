{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@matterlabs/zksync-contracts/l1/contracts/common/interfaces/IAllowList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IAllowList {\\n    /*//////////////////////////////////////////////////////////////\\n                            EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Access mode of target contract is changed\\n    event UpdateAccessMode(address indexed target, AccessMode previousMode, AccessMode newMode);\\n\\n    /// @notice Permission to call is changed\\n    event UpdateCallPermission(address indexed caller, address indexed target, bytes4 indexed functionSig, bool status);\\n\\n    /// @notice Type of access to a specific contract includes three different modes\\n    /// @param Closed No one has access to the contract\\n    /// @param SpecialAccessOnly Any address with granted special access can interact with a contract (see `hasSpecialAccessToCall`)\\n    /// @param Public Everyone can interact with a contract\\n    enum AccessMode {\\n        Closed,\\n        SpecialAccessOnly,\\n        Public\\n    }\\n\\n    /// @dev A struct that contains deposit limit data of a token\\n    /// @param depositLimitation Whether any deposit limitation is placed or not\\n    /// @param depositCap The maximum amount that can be deposited.\\n    struct Deposit {\\n        bool depositLimitation;\\n        uint256 depositCap;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            GETTERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getAccessMode(address _target) external view returns (AccessMode);\\n\\n    function hasSpecialAccessToCall(\\n        address _caller,\\n        address _target,\\n        bytes4 _functionSig\\n    ) external view returns (bool);\\n\\n    function canCall(\\n        address _caller,\\n        address _target,\\n        bytes4 _functionSig\\n    ) external view returns (bool);\\n\\n    function getTokenDepositLimitData(address _l1Token) external view returns (Deposit memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           ALLOW LIST LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setBatchAccessMode(address[] calldata _targets, AccessMode[] calldata _accessMode) external;\\n\\n    function setAccessMode(address _target, AccessMode _accessMode) external;\\n\\n    function setBatchPermissionToCall(\\n        address[] calldata _callers,\\n        address[] calldata _targets,\\n        bytes4[] calldata _functionSigs,\\n        bool[] calldata _enables\\n    ) external;\\n\\n    function setPermissionToCall(\\n        address _caller,\\n        address _target,\\n        bytes4 _functionSig,\\n        bool _enable\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           DEPOSIT LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setDepositLimit(\\n        address _l1Token,\\n        bool _depositLimitation,\\n        uint256 _depositCap\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/common/libraries/UncheckedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary UncheckedMath {\\n    function uncheckedInc(uint256 _number) internal pure returns (uint256) {\\n        unchecked {\\n            return _number + 1;\\n        }\\n    }\\n\\n    function uncheckedAdd(uint256 _lhs, uint256 _rhs) internal pure returns (uint256) {\\n        unchecked {\\n            return _lhs + _rhs;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\nimport \\\"../libraries/Diamond.sol\\\";\\n\\ninterface IDiamondCut {\\n    function proposeTransparentUpgrade(Diamond.DiamondCutData calldata _diamondCut, uint40 _proposalId) external;\\n\\n    function proposeShadowUpgrade(bytes32 _proposalHash, uint40 _proposalId) external;\\n\\n    function cancelUpgradeProposal(bytes32 _proposedUpgradeHash) external;\\n\\n    function securityCouncilUpgradeApprove(bytes32 _upgradeProposalHash) external;\\n\\n    function executeUpgrade(Diamond.DiamondCutData calldata _diamondCut, bytes32 _proposalSalt) external;\\n\\n    function freezeDiamond() external;\\n\\n    function unfreezeDiamond() external;\\n\\n    function upgradeProposalHash(\\n        Diamond.DiamondCutData calldata _diamondCut,\\n        uint256 _proposalId,\\n        bytes32 _salt\\n    ) external pure returns (bytes32);\\n\\n    event ProposeTransparentUpgrade(\\n        Diamond.DiamondCutData diamondCut,\\n        uint256 indexed proposalId,\\n        bytes32 proposalSalt\\n    );\\n\\n    event ProposeShadowUpgrade(uint256 indexed proposalId, bytes32 indexed proposalHash);\\n\\n    event CancelUpgradeProposal(uint256 indexed proposalId, bytes32 indexed proposalHash);\\n\\n    event SecurityCouncilUpgradeApprove(uint256 indexed proposalId, bytes32 indexed proposalHash);\\n\\n    event ExecuteUpgrade(uint256 indexed proposalId, bytes32 indexed proposalHash, bytes32 proposalSalt);\\n\\n    event Freeze();\\n\\n    event Unfreeze();\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IExecutor {\\n    /// @notice Rollup block stored data\\n    /// @param blockNumber Rollup block number\\n    /// @param blockHash Hash of L2 block\\n    /// @param indexRepeatedStorageChanges The serial number of the shortcut index that's used as a unique identifier for storage keys that were used twice or more\\n    /// @param numberOfLayer1Txs Number of priority operations to be processed\\n    /// @param priorityOperationsHash Hash of all priority operations from this block\\n    /// @param l2LogsTreeRoot Root hash of tree that contains L2 -> L1 messages from this block\\n    /// @param timestamp Rollup block timestamp, have the same format as Ethereum block constant\\n    /// @param commitment Verified input for the zkSync circuit\\n    struct StoredBlockInfo {\\n        uint64 blockNumber;\\n        bytes32 blockHash;\\n        uint64 indexRepeatedStorageChanges;\\n        uint256 numberOfLayer1Txs;\\n        bytes32 priorityOperationsHash;\\n        bytes32 l2LogsTreeRoot;\\n        uint256 timestamp;\\n        bytes32 commitment;\\n    }\\n\\n    /// @notice Data needed to commit new block\\n    /// @param blockNumber Number of the committed block\\n    /// @param timestamp Unix timestamp denoting the start of the block execution\\n    /// @param indexRepeatedStorageChanges The serial number of the shortcut index that's used as a unique identifier for storage keys that were used twice or more\\n    /// @param newStateRoot The state root of the full state tree\\n    /// @param numberOfLayer1Txs Number of priority operations to be processed\\n    /// @param l2LogsTreeRoot The root hash of the tree that contains all L2 -> L1 logs in the block\\n    /// @param priorityOperationsHash Hash of all priority operations from this block\\n    /// @param initialStorageChanges Storage write access as a concatenation key-value\\n    /// @param repeatedStorageChanges Storage write access as a concatenation index-value\\n    /// @param l2Logs concatenation of all L2 -> L1 logs in the block\\n    /// @param l2ArbitraryLengthMessages array of hash preimages that were sent as value of L2 logs by special system L2 contract\\n    /// @param factoryDeps array of l2 bytecodes that were marked as known on L2\\n    struct CommitBlockInfo {\\n        uint64 blockNumber;\\n        uint64 timestamp;\\n        uint64 indexRepeatedStorageChanges;\\n        bytes32 newStateRoot;\\n        uint256 numberOfLayer1Txs;\\n        bytes32 l2LogsTreeRoot;\\n        bytes32 priorityOperationsHash;\\n        bytes initialStorageChanges;\\n        bytes repeatedStorageChanges;\\n        bytes l2Logs;\\n        bytes[] l2ArbitraryLengthMessages;\\n        bytes[] factoryDeps;\\n    }\\n\\n    /// @notice Recursive proof input data (individual commitments are constructed onchain)\\n    struct ProofInput {\\n        uint256[] recursiveAggregationInput;\\n        uint256[] serializedProof;\\n    }\\n\\n    function commitBlocks(StoredBlockInfo calldata _lastCommittedBlockData, CommitBlockInfo[] calldata _newBlocksData)\\n        external;\\n\\n    function proveBlocks(\\n        StoredBlockInfo calldata _prevBlock,\\n        StoredBlockInfo[] calldata _committedBlocks,\\n        ProofInput calldata _proof\\n    ) external;\\n\\n    function executeBlocks(StoredBlockInfo[] calldata _blocksData) external;\\n\\n    function revertBlocks(uint256 _newLastBlock) external;\\n\\n    /// @notice Event emitted when a block is committed\\n    event BlockCommit(uint256 indexed blockNumber, bytes32 indexed blockHash, bytes32 indexed commitment);\\n\\n    /// @notice Event emitted when blocks are verified\\n    event BlocksVerification(uint256 indexed previousLastVerifiedBlock, uint256 indexed currentLastVerifiedBlock);\\n\\n    /// @notice Event emitted when a block is executed\\n    event BlockExecution(uint256 indexed blockNumber, bytes32 indexed blockHash, bytes32 indexed commitment);\\n\\n    /// @notice Event emitted when blocks are reverted\\n    event BlocksRevert(uint256 totalBlocksCommitted, uint256 totalBlocksVerified, uint256 totalBlocksExecuted);\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IGetters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../Storage.sol\\\";\\nimport \\\"../libraries/PriorityQueue.sol\\\";\\nimport {VerifierParams} from \\\"../Storage.sol\\\";\\n\\ninterface IGetters {\\n    /*//////////////////////////////////////////////////////////////\\n                            CUSTOM GETTERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getVerifier() external view returns (address);\\n\\n    function getGovernor() external view returns (address);\\n\\n    function getPendingGovernor() external view returns (address);\\n\\n    function getTotalBlocksCommitted() external view returns (uint256);\\n\\n    function getTotalBlocksVerified() external view returns (uint256);\\n\\n    function getTotalBlocksExecuted() external view returns (uint256);\\n\\n    function getTotalPriorityTxs() external view returns (uint256);\\n\\n    function getFirstUnprocessedPriorityTx() external view returns (uint256);\\n\\n    function getPriorityQueueSize() external view returns (uint256);\\n\\n    function priorityQueueFrontOperation() external view returns (PriorityOperation memory);\\n\\n    function isValidator(address _address) external view returns (bool);\\n\\n    function l2LogsRootHash(uint256 _blockNumber) external view returns (bytes32 hash);\\n\\n    function storedBlockHash(uint256 _blockNumber) external view returns (bytes32);\\n\\n    function getL2BootloaderBytecodeHash() external view returns (bytes32);\\n\\n    function getL2DefaultAccountBytecodeHash() external view returns (bytes32);\\n\\n    function getVerifierParams() external view returns (VerifierParams memory);\\n\\n    function isDiamondStorageFrozen() external view returns (bool);\\n\\n    function getSecurityCouncil() external view returns (address);\\n\\n    function getUpgradeProposalState() external view returns (UpgradeState);\\n\\n    function getProposedUpgradeHash() external view returns (bytes32);\\n\\n    function getProposedUpgradeTimestamp() external view returns (uint256);\\n\\n    function getCurrentProposalId() external view returns (uint256);\\n\\n    function isApprovedBySecurityCouncil() external view returns (bool);\\n\\n    function getPriorityTxMaxGasLimit() external view returns (uint256);\\n\\n    function getAllowList() external view returns (address);\\n\\n    function isEthWithdrawalFinalized(uint256 _l2BlockNumber, uint256 _l2MessageIndex) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            DIAMOND LOUPE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Fa\u0441et structure compatible with the EIP-2535 diamond loupe\\n    /// @param addr The address of the facet contract\\n    /// @param selectors The NON-sorted array with selectors associated with facet\\n    struct Facet {\\n        address addr;\\n        bytes4[] selectors;\\n    }\\n\\n    function facets() external view returns (Facet[] memory);\\n\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory);\\n\\n    function facetAddresses() external view returns (address[] memory facets);\\n\\n    function facetAddress(bytes4 _selector) external view returns (address facet);\\n\\n    function isFunctionFreezable(bytes4 _selector) external view returns (bool);\\n\\n    function isFacetFreezable(address _facet) external view returns (bool isFreezable);\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../common/interfaces/IAllowList.sol\\\";\\nimport \\\"../Verifier.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\ninterface IGovernance {\\n    function setPendingGovernor(address _newPendingGovernor) external;\\n\\n    function acceptGovernor() external;\\n\\n    function setValidator(address _validator, bool _active) external;\\n\\n    function setL2BootloaderBytecodeHash(bytes32 _l2BootloaderBytecodeHash) external;\\n\\n    function setL2DefaultAccountBytecodeHash(bytes32 _l2DefaultAccountBytecodeHash) external;\\n\\n    function setPorterAvailability(bool _zkPorterIsAvailable) external;\\n\\n    function setVerifier(Verifier _newVerifier) external;\\n\\n    function setVerifierParams(VerifierParams calldata _newVerifierParams) external;\\n\\n    function setAllowList(IAllowList _newAllowList) external;\\n\\n    function setPriorityTxMaxGasLimit(uint256 _newPriorityTxMaxGasLimit) external;\\n\\n    /// @notice \u0421hanges to the bytecode that is used in L2 as a bootloader (start program)\\n    event NewL2BootloaderBytecodeHash(bytes32 indexed previousBytecodeHash, bytes32 indexed newBytecodeHash);\\n\\n    /// @notice \u0421hanges to the bytecode that is used in L2 as a default account\\n    event NewL2DefaultAccountBytecodeHash(bytes32 indexed previousBytecodeHash, bytes32 indexed newBytecodeHash);\\n\\n    /// @notice Porter availability status changes\\n    event IsPorterAvailableStatusUpdate(bool isPorterAvailable);\\n\\n    /// @notice Validator's status changed\\n    event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive);\\n\\n    /// @notice pendingGovernor is changed\\n    /// @dev Also emitted when new governor is accepted and in this case, `newPendingGovernor` would be zero address\\n    event NewPendingGovernor(address indexed oldPendingGovernor, address indexed newPendingGovernor);\\n\\n    /// @notice Governor changed\\n    event NewGovernor(address indexed oldGovernor, address indexed newGovernor);\\n\\n    /// @notice Verifier address changed\\n    event NewVerifier(address indexed oldVerifier, address indexed newVerifier);\\n\\n    /// @notice Verifier address changed\\n    event NewVerifierParams(VerifierParams oldVerifierParams, VerifierParams newVerifierParams);\\n\\n    /// @notice Allow list address changed\\n    event NewAllowList(address indexed oldAllowList, address indexed newAllowList);\\n\\n    /// @notice Priority transaction max L2 gas limit changed\\n    event NewPriorityTxMaxGasLimit(uint256 oldPriorityTxMaxGasLimit, uint256 newPriorityTxMaxGasLimit);\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IMailbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport {L2Log, L2Message} from \\\"../Storage.sol\\\";\\n\\n/// @dev The enum that represents the transaction execution status\\n/// @param Failure The transaction execution failed\\n/// @param Success The transaction execution succeeded\\nenum TxStatus {\\n    Failure,\\n    Success\\n}\\n\\ninterface IMailbox {\\n    /// @dev Structure that includes all fields of the L2 transaction\\n    /// @dev The hash of this structure is the \\\"canonical L2 transaction hash\\\" and can be used as a unique identifier of a tx\\n    /// @param txType The tx type number, depending on which the L2 transaction can be interpreted differently\\n    /// @param from The sender's address. `uint256` type for possible address format changes and maintaining backward compatibility\\n    /// @param to The recipient's address. `uint256` type for possible address format changes and maintaining backward compatibility\\n    /// @param gasLimit The L2 gas limit for L2 transaction. Analog to the `gasLimit` on an L1 transactions\\n    /// @param gasPerPubdataByteLimit Maximum number of L2 gas that will cost one byte of pubdata (every piece of data that will be stored on L1 as calldata)\\n    /// @param maxFeePerGas The absolute maximum sender willing to pay per unit of L2 gas to get the transaction included in a block. Analog to the EIP-1559 `maxFeePerGas` on an L1 transactions\\n    /// @param maxPriorityFeePerGas The additional fee that is paid directly to the validator to incentivize them to include the transaction in a block. Analog to the EIP-1559 `maxPriorityFeePerGas` on an L1 transactions\\n    /// @param paymaster The address of the EIP-4337 paymaster, that will pay fees for the transaction. `uint256` type for possible address format changes and maintaining backward compatibility\\n    /// @param nonce The nonce of the transaction. For L1->L2 transactions it is the priority operation Id.\\n    /// @param value The value to pass with the transaction\\n    /// @param reserved The fixed-length fields for usage in a future extension of transaction formats\\n    /// @param data The calldata that is transmitted for the transaction call\\n    /// @param signature An abstract set of bytes that are used for transaction authorization\\n    /// @param factoryDeps The set of L2 bytecode hashes whose preimages were shown on L1\\n    /// @param paymasterInput The arbitrary-length data that is used as a calldata to the paymaster pre-call\\n    /// @param reservedDynamic The arbitrary-length field for usage in a future extension of transaction formats\\n    struct L2CanonicalTransaction {\\n        uint256 txType;\\n        uint256 from;\\n        uint256 to;\\n        uint256 gasLimit;\\n        uint256 gasPerPubdataByteLimit;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        uint256 paymaster;\\n        uint256 nonce;\\n        uint256 value;\\n        // In the future, we might want to add some\\n        // new fields to the struct. The `txData` struct\\n        // is to be passed to account and any changes to its structure\\n        // would mean a breaking change to these accounts. To prevent this,\\n        // we should keep some fields as \\\"reserved\\\".\\n        // It is also recommended that their length is fixed, since\\n        // it would allow easier proof integration (in case we will need\\n        // some special circuit for preprocessing transactions).\\n        uint256[4] reserved;\\n        bytes data;\\n        bytes signature;\\n        uint256[] factoryDeps;\\n        bytes paymasterInput;\\n        // Reserved dynamic type for the future use-case. Using it should be avoided,\\n        // But it is still here, just in case we want to enable some additional functionality.\\n        bytes reservedDynamic;\\n    }\\n\\n    /// @dev Internal structure that contains the parameters for the writePriorityOp\\n    /// internal function.\\n    /// @param sender The sender's address.\\n    /// @param txId The id of the priority transaction.\\n    /// @param l2Value The msg.value of the L2 transaction.\\n    /// @param contractAddressL2 The address of the contract on L2 to call.\\n    /// @param expirationTimestamp The timestamp by which the priority operation must be processed by the operator.\\n    /// @param l2GasLimit The limit of the L2 gas for the L2 transaction\\n    /// @param l2GasPricePerPubdata The price for a single pubdata byte in L2 gas.\\n    /// @param valueToMint The amount of ether that should be minted on L2 as the result of this transaction.\\n    /// @param refundRecipient The recipient of the refund for the transaction on L2. If the transaction fails, then\\n    /// this address will receive the `l2Value`.\\n    struct WritePriorityOpParams {\\n        address sender;\\n        uint256 txId;\\n        uint256 l2Value;\\n        address contractAddressL2;\\n        uint64 expirationTimestamp;\\n        uint256 l2GasLimit;\\n        uint256 l2GasPrice;\\n        uint256 l2GasPricePerPubdata;\\n        uint256 valueToMint;\\n        address refundRecipient;\\n    }\\n\\n    function proveL2MessageInclusion(\\n        uint256 _blockNumber,\\n        uint256 _index,\\n        L2Message calldata _message,\\n        bytes32[] calldata _proof\\n    ) external view returns (bool);\\n\\n    function proveL2LogInclusion(\\n        uint256 _blockNumber,\\n        uint256 _index,\\n        L2Log memory _log,\\n        bytes32[] calldata _proof\\n    ) external view returns (bool);\\n\\n    function proveL1ToL2TransactionStatus(\\n        bytes32 _l2TxHash,\\n        uint256 _l2BlockNumber,\\n        uint256 _l2MessageIndex,\\n        uint16 _l2TxNumberInBlock,\\n        bytes32[] calldata _merkleProof,\\n        TxStatus _status\\n    ) external view returns (bool);\\n\\n    function finalizeEthWithdrawal(\\n        uint256 _l2BlockNumber,\\n        uint256 _l2MessageIndex,\\n        uint16 _l2TxNumberInBlock,\\n        bytes calldata _message,\\n        bytes32[] calldata _merkleProof\\n    ) external;\\n\\n    function requestL2Transaction(\\n        address _contractL2,\\n        uint256 _l2Value,\\n        bytes calldata _calldata,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit,\\n        bytes[] calldata _factoryDeps,\\n        address _refundRecipient\\n    ) external payable returns (bytes32 canonicalTxHash);\\n\\n    function l2TransactionBaseCost(\\n        uint256 _gasPrice,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit\\n    ) external view returns (uint256);\\n\\n    /// @notice New priority request event. Emitted when a request is placed into the priority queue\\n    /// @param txId Serial number of the priority operation\\n    /// @param txHash keccak256 hash of encoded transaction representation\\n    /// @param expirationTimestamp Timestamp up to which priority request should be processed\\n    /// @param transaction The whole transaction structure that is requested to be executed on L2\\n    /// @param factoryDeps An array of bytecodes that were shown in the L1 public data. Will be marked as known bytecodes in L2\\n    event NewPriorityRequest(\\n        uint256 txId,\\n        bytes32 txHash,\\n        uint64 expirationTimestamp,\\n        L2CanonicalTransaction transaction,\\n        bytes[] factoryDeps\\n    );\\n\\n    /// @notice Emitted when the withdrawal is finalized on L1 and funds are released.\\n    /// @param to The address to which the funds were sent\\n    /// @param amount The amount of funds that were sent\\n    event EthWithdrawalFinalized(address indexed to, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IZkSync.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IMailbox.sol\\\";\\nimport \\\"./IGovernance.sol\\\";\\nimport \\\"./IExecutor.sol\\\";\\nimport \\\"./IDiamondCut.sol\\\";\\nimport \\\"./IGetters.sol\\\";\\n\\ninterface IZkSync is IMailbox, IGovernance, IExecutor, IDiamondCut, IGetters {}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/libraries/Diamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../../common/libraries/UncheckedMath.sol\\\";\\n\\n/// @author Matter Labs\\n/// @notice The helper library for managing the EIP-2535 diamond proxy.\\nlibrary Diamond {\\n    using UncheckedMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @dev Magic value that should be returned by diamond cut initialize contracts.\\n    /// @dev Used to distinguish calls to contracts that were supposed to be used as diamond initializer from other contracts.\\n    bytes32 constant DIAMOND_INIT_SUCCESS_RETURN_VALUE =\\n        0x33774e659306e47509050e97cb651e731180a42d458212294d30751925c551a2; // keccak256(\\\"diamond.zksync.init\\\") - 1\\n\\n    /// @dev Storage position of `DiamondStorage` structure.\\n    bytes32 constant DIAMOND_STORAGE_POSITION = 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b; // keccak256(\\\"diamond.standard.diamond.storage\\\") - 1;\\n\\n    event DiamondCut(FacetCut[] facetCuts, address initAddress, bytes initCalldata);\\n\\n    /// @dev Utility struct that contains associated facet & meta information of selector\\n    /// @param facetAddress address of the facet which is connected with selector\\n    /// @param selectorPosition index in `FacetToSelectors.selectors` array, where is selector stored\\n    /// @param isFreezable denotes whether the selector can be frozen.\\n    struct SelectorToFacet {\\n        address facetAddress;\\n        uint16 selectorPosition;\\n        bool isFreezable;\\n    }\\n\\n    /// @dev Utility struct that contains associated selectors & meta information of facet\\n    /// @param selectors list of all selectors that belong to the facet\\n    /// @param facetPosition index in `DiamondStorage.facets` array, where is facet stored\\n    struct FacetToSelectors {\\n        bytes4[] selectors;\\n        uint16 facetPosition;\\n    }\\n\\n    /// @notice The structure that holds all diamond proxy associated parameters\\n    /// @dev According to the EIP-2535 should be stored on a special storage key - `DIAMOND_STORAGE_POSITION`\\n    /// @param selectorToFacet A mapping from the selector to the facet address and its meta information\\n    /// @param facetToSelectors A mapping from facet address to its selector with meta information\\n    /// @param facets The array of all unique facet addresses that belong to the diamond proxy\\n    /// @param isFrozen Denotes whether the diamond proxy is frozen and all freezable facets are not accessible\\n    struct DiamondStorage {\\n        mapping(bytes4 => SelectorToFacet) selectorToFacet;\\n        mapping(address => FacetToSelectors) facetToSelectors;\\n        address[] facets;\\n        bool isFrozen;\\n    }\\n\\n    /// @dev Parameters for diamond changes that touch one of the facets\\n    /// @param facet The address of facet that's affected by the cut\\n    /// @param action The action that is made on the facet\\n    /// @param isFreezable Denotes whether the facet & all their selectors can be frozen\\n    /// @param selectors An array of unique selectors that belongs to the facet address\\n    struct FacetCut {\\n        address facet;\\n        Action action;\\n        bool isFreezable;\\n        bytes4[] selectors;\\n    }\\n\\n    /// @dev Structure of the diamond proxy changes\\n    /// @param facetCuts The set of changes (adding/removing/replacement) of implementation contracts\\n    /// @param initAddress The address that's delegate called after setting up new facet changes\\n    /// @param initCalldata Calldata for the delegate call to `initAddress`\\n    struct DiamondCutData {\\n        FacetCut[] facetCuts;\\n        address initAddress;\\n        bytes initCalldata;\\n    }\\n\\n    /// @dev Type of change over diamond: add/replace/remove facets\\n    enum Action {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n\\n    /// @return diamondStorage The pointer to the storage where all specific diamond proxy parameters stored\\n    function getDiamondStorage() internal pure returns (DiamondStorage storage diamondStorage) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            diamondStorage.slot := position\\n        }\\n    }\\n\\n    /// @dev Add/replace/remove any number of selectors and optionally execute a function with delegatecall\\n    /// @param _diamondCut Diamond's facet changes and the parameters to optional initialization delegatecall\\n    function diamondCut(DiamondCutData memory _diamondCut) internal {\\n        FacetCut[] memory facetCuts = _diamondCut.facetCuts;\\n        address initAddress = _diamondCut.initAddress;\\n        bytes memory initCalldata = _diamondCut.initCalldata;\\n        uint256 facetCutsLength = facetCuts.length;\\n        for (uint256 i = 0; i < facetCutsLength; i = i.uncheckedInc()) {\\n            Action action = facetCuts[i].action;\\n            address facet = facetCuts[i].facet;\\n            bool isFacetFreezable = facetCuts[i].isFreezable;\\n            bytes4[] memory selectors = facetCuts[i].selectors;\\n\\n            require(selectors.length > 0, \\\"B\\\"); // no functions for diamond cut\\n\\n            if (action == Action.Add) {\\n                _addFunctions(facet, selectors, isFacetFreezable);\\n            } else if (action == Action.Replace) {\\n                _replaceFunctions(facet, selectors, isFacetFreezable);\\n            } else if (action == Action.Remove) {\\n                _removeFunctions(facet, selectors);\\n            } else {\\n                revert(\\\"C\\\"); // undefined diamond cut action\\n            }\\n        }\\n\\n        _initializeDiamondCut(initAddress, initCalldata);\\n        emit DiamondCut(facetCuts, initAddress, initCalldata);\\n    }\\n\\n    /// @dev Add new functions to the diamond proxy\\n    /// NOTE: expect but NOT enforce that `_selectors` is NON-EMPTY array\\n    function _addFunctions(\\n        address _facet,\\n        bytes4[] memory _selectors,\\n        bool _isFacetFreezable\\n    ) private {\\n        DiamondStorage storage ds = getDiamondStorage();\\n\\n        require(_facet != address(0), \\\"G\\\"); // facet with zero address cannot be added\\n\\n        // Add facet to the list of facets if the facet address is new one\\n        _saveFacetIfNew(_facet);\\n\\n        uint256 selectorsLength = _selectors.length;\\n        for (uint256 i = 0; i < selectorsLength; i = i.uncheckedInc()) {\\n            bytes4 selector = _selectors[i];\\n            SelectorToFacet memory oldFacet = ds.selectorToFacet[selector];\\n            require(oldFacet.facetAddress == address(0), \\\"J\\\"); // facet for this selector already exists\\n\\n            _addOneFunction(_facet, selector, _isFacetFreezable);\\n        }\\n    }\\n\\n    /// @dev Change associated facets to already known function selectors\\n    /// NOTE: expect but NOT enforce that `_selectors` is NON-EMPTY array\\n    function _replaceFunctions(\\n        address _facet,\\n        bytes4[] memory _selectors,\\n        bool _isFacetFreezable\\n    ) private {\\n        DiamondStorage storage ds = getDiamondStorage();\\n\\n        require(_facet != address(0), \\\"K\\\"); // cannot replace facet with zero address\\n\\n        uint256 selectorsLength = _selectors.length;\\n        for (uint256 i = 0; i < selectorsLength; i = i.uncheckedInc()) {\\n            bytes4 selector = _selectors[i];\\n            SelectorToFacet memory oldFacet = ds.selectorToFacet[selector];\\n            require(oldFacet.facetAddress != address(0), \\\"L\\\"); // it is impossible to replace the facet with zero address\\n\\n            _removeOneFunction(oldFacet.facetAddress, selector);\\n            // Add facet to the list of facets if the facet address is a new one\\n            _saveFacetIfNew(_facet);\\n            _addOneFunction(_facet, selector, _isFacetFreezable);\\n        }\\n    }\\n\\n    /// @dev Remove association with function and facet\\n    /// NOTE: expect but NOT enforce that `_selectors` is NON-EMPTY array\\n    function _removeFunctions(address _facet, bytes4[] memory _selectors) private {\\n        DiamondStorage storage ds = getDiamondStorage();\\n\\n        require(_facet == address(0), \\\"a1\\\"); // facet address must be zero\\n\\n        uint256 selectorsLength = _selectors.length;\\n        for (uint256 i = 0; i < selectorsLength; i = i.uncheckedInc()) {\\n            bytes4 selector = _selectors[i];\\n            SelectorToFacet memory oldFacet = ds.selectorToFacet[selector];\\n            require(oldFacet.facetAddress != address(0), \\\"a2\\\"); // Can't delete a non-existent facet\\n\\n            _removeOneFunction(oldFacet.facetAddress, selector);\\n        }\\n    }\\n\\n    /// @dev Add address to the list of known facets if it is not on the list yet\\n    /// NOTE: should be called ONLY before adding a new selector associated with the address\\n    function _saveFacetIfNew(address _facet) private {\\n        DiamondStorage storage ds = getDiamondStorage();\\n\\n        uint256 selectorsLength = ds.facetToSelectors[_facet].selectors.length;\\n        // If there are no selectors associated with facet then save facet as new one\\n        if (selectorsLength == 0) {\\n            ds.facetToSelectors[_facet].facetPosition = ds.facets.length.toUint16();\\n            ds.facets.push(_facet);\\n        }\\n    }\\n\\n    /// @dev Add one function to the already known facet\\n    /// NOTE: It is expected but NOT enforced that:\\n    /// - `_facet` is NON-ZERO address\\n    /// - `_facet` is already stored address in `DiamondStorage.facets`\\n    /// - `_selector` is NOT associated by another facet\\n    function _addOneFunction(\\n        address _facet,\\n        bytes4 _selector,\\n        bool _isSelectorFreezable\\n    ) private {\\n        DiamondStorage storage ds = getDiamondStorage();\\n\\n        uint16 selectorPosition = (ds.facetToSelectors[_facet].selectors.length).toUint16();\\n\\n        // if selectorPosition is nonzero, it means it is not a new facet\\n        // so the freezability of the first selector must be matched to _isSelectorFreezable\\n        // so all the selectors in a facet will have the same freezability\\n        if (selectorPosition != 0) {\\n            bytes4 selector0 = ds.facetToSelectors[_facet].selectors[0];\\n            require(_isSelectorFreezable == ds.selectorToFacet[selector0].isFreezable, \\\"J1\\\");\\n        }\\n\\n        ds.selectorToFacet[_selector] = SelectorToFacet({\\n            facetAddress: _facet,\\n            selectorPosition: selectorPosition,\\n            isFreezable: _isSelectorFreezable\\n        });\\n        ds.facetToSelectors[_facet].selectors.push(_selector);\\n    }\\n\\n    /// @dev Remove one associated function with facet\\n    /// NOTE: It is expected but NOT enforced that `_facet` is NON-ZERO address\\n    function _removeOneFunction(address _facet, bytes4 _selector) private {\\n        DiamondStorage storage ds = getDiamondStorage();\\n\\n        // Get index of `FacetToSelectors.selectors` of the selector and last element of array\\n        uint256 selectorPosition = ds.selectorToFacet[_selector].selectorPosition;\\n        uint256 lastSelectorPosition = ds.facetToSelectors[_facet].selectors.length - 1;\\n\\n        // If the selector is not at the end of the array then move the last element to the selector position\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetToSelectors[_facet].selectors[lastSelectorPosition];\\n\\n            ds.facetToSelectors[_facet].selectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacet[lastSelector].selectorPosition = selectorPosition.toUint16();\\n        }\\n\\n        // Remove last element from the selectors array\\n        ds.facetToSelectors[_facet].selectors.pop();\\n\\n        // Finally, clean up the association with facet\\n        delete ds.selectorToFacet[_selector];\\n\\n        // If there are no selectors for facet then remove the facet from the list of known facets\\n        if (lastSelectorPosition == 0) {\\n            _removeFacet(_facet);\\n        }\\n    }\\n\\n    /// @dev remove facet from the list of known facets\\n    /// NOTE: It is expected but NOT enforced that there are no selectors associated with `_facet`\\n    function _removeFacet(address _facet) private {\\n        DiamondStorage storage ds = getDiamondStorage();\\n\\n        // Get index of `DiamondStorage.facets` of the facet and last element of array\\n        uint256 facetPosition = ds.facetToSelectors[_facet].facetPosition;\\n        uint256 lastFacetPosition = ds.facets.length - 1;\\n\\n        // If the facet is not at the end of the array then move the last element to the facet position\\n        if (facetPosition != lastFacetPosition) {\\n            address lastFacet = ds.facets[lastFacetPosition];\\n\\n            ds.facets[facetPosition] = lastFacet;\\n            ds.facetToSelectors[lastFacet].facetPosition = facetPosition.toUint16();\\n        }\\n\\n        // Remove last element from the facets array\\n        ds.facets.pop();\\n    }\\n\\n    /// @dev Delegates call to the initialization address with provided calldata\\n    /// @dev Used as a final step of diamond cut to execute the logic of the initialization for changed facets\\n    function _initializeDiamondCut(address _init, bytes memory _calldata) private {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"H\\\"); // Non-empty calldata for zero address\\n        } else {\\n            // Do not check whether `_init` is a contract since later we check that it returns data.\\n            (bool success, bytes memory data) = _init.delegatecall(_calldata);\\n            require(success, \\\"I\\\"); // delegatecall failed\\n\\n            // Check that called contract returns magic value to make sure that contract logic\\n            // supposed to be used as diamond cut initializer.\\n            require(data.length == 32, \\\"lp\\\");\\n            require(abi.decode(data, (bytes32)) == DIAMOND_INIT_SUCCESS_RETURN_VALUE, \\\"lp1\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/libraries/PairingsBn254.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary PairingsBn254 {\\n    uint256 constant q_mod = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    uint256 constant r_mod = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant bn254_b_coeff = 3;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    struct Fr {\\n        uint256 value;\\n    }\\n\\n    function new_fr(uint256 fr) internal pure returns (Fr memory) {\\n        require(fr < r_mod);\\n        return Fr({value: fr});\\n    }\\n\\n    function copy(Fr memory self) internal pure returns (Fr memory n) {\\n        n.value = self.value;\\n    }\\n\\n    function assign(Fr memory self, Fr memory other) internal pure {\\n        self.value = other.value;\\n    }\\n\\n    function inverse(Fr memory fr) internal view returns (Fr memory) {\\n        require(fr.value != 0);\\n        return pow(fr, r_mod - 2);\\n    }\\n\\n    function add_assign(Fr memory self, Fr memory other) internal pure {\\n        self.value = addmod(self.value, other.value, r_mod);\\n    }\\n\\n    function sub_assign(Fr memory self, Fr memory other) internal pure {\\n        self.value = addmod(self.value, r_mod - other.value, r_mod);\\n    }\\n\\n    function mul_assign(Fr memory self, Fr memory other) internal pure {\\n        self.value = mulmod(self.value, other.value, r_mod);\\n    }\\n\\n    function pow(Fr memory self, uint256 power) internal view returns (Fr memory) {\\n        uint256[6] memory input = [32, 32, 32, self.value, power, r_mod];\\n        uint256[1] memory result;\\n        bool success;\\n        assembly {\\n            success := staticcall(gas(), 0x05, input, 0xc0, result, 0x20)\\n        }\\n        require(success);\\n        return Fr({value: result[0]});\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n\\n    function new_g1(uint256 x, uint256 y) internal pure returns (G1Point memory) {\\n        return G1Point(x, y);\\n    }\\n\\n    // function new_g1_checked(uint256 x, uint256 y) internal pure returns (G1Point memory) {\\n    function new_g1_checked(uint256 x, uint256 y) internal pure returns (G1Point memory) {\\n        if (x == 0 && y == 0) {\\n            // point of infinity is (0,0)\\n            return G1Point(x, y);\\n        }\\n\\n        // check encoding\\n        require(x < q_mod, \\\"x axis isn't valid\\\");\\n        require(y < q_mod, \\\"y axis isn't valid\\\");\\n        // check on curve\\n        uint256 lhs = mulmod(y, y, q_mod); // y^2\\n\\n        uint256 rhs = mulmod(x, x, q_mod); // x^2\\n        rhs = mulmod(rhs, x, q_mod); // x^3\\n        rhs = addmod(rhs, bn254_b_coeff, q_mod); // x^3 + b\\n        require(lhs == rhs, \\\"is not on curve\\\");\\n\\n        return G1Point(x, y);\\n    }\\n\\n    function new_g2(uint256[2] memory x, uint256[2] memory y) internal pure returns (G2Point memory) {\\n        return G2Point(x, y);\\n    }\\n\\n    function copy_g1(G1Point memory self) internal pure returns (G1Point memory result) {\\n        result.X = self.X;\\n        result.Y = self.Y;\\n    }\\n\\n    function P2() internal pure returns (G2Point memory) {\\n        // for some reason ethereum expects to have c1*v + c0 form\\n\\n        return\\n            G2Point(\\n                [\\n                    0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2,\\n                    0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed\\n                ],\\n                [\\n                    0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b,\\n                    0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa\\n                ]\\n            );\\n    }\\n\\n    function negate(G1Point memory self) internal pure {\\n        // The prime q in the base field F_q for G1\\n        if (self.Y == 0) {\\n            require(self.X == 0);\\n            return;\\n        }\\n\\n        self.Y = q_mod - self.Y;\\n    }\\n\\n    function point_add(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        point_add_into_dest(p1, p2, r);\\n        return r;\\n    }\\n\\n    function point_add_assign(G1Point memory p1, G1Point memory p2) internal view {\\n        point_add_into_dest(p1, p2, p1);\\n    }\\n\\n    function point_add_into_dest(\\n        G1Point memory p1,\\n        G1Point memory p2,\\n        G1Point memory dest\\n    ) internal view {\\n        if (p2.X == 0 && p2.Y == 0) {\\n            // we add zero, nothing happens\\n            dest.X = p1.X;\\n            dest.Y = p1.Y;\\n            return;\\n        } else if (p1.X == 0 && p1.Y == 0) {\\n            // we add into zero, and we add non-zero point\\n            dest.X = p2.X;\\n            dest.Y = p2.Y;\\n            return;\\n        } else {\\n            uint256[4] memory input;\\n\\n            input[0] = p1.X;\\n            input[1] = p1.Y;\\n            input[2] = p2.X;\\n            input[3] = p2.Y;\\n\\n            bool success;\\n            assembly {\\n                success := staticcall(gas(), 6, input, 0x80, dest, 0x40)\\n            }\\n            require(success);\\n        }\\n    }\\n\\n    function point_sub_assign(G1Point memory p1, G1Point memory p2) internal view {\\n        point_sub_into_dest(p1, p2, p1);\\n    }\\n\\n    function point_sub_into_dest(\\n        G1Point memory p1,\\n        G1Point memory p2,\\n        G1Point memory dest\\n    ) internal view {\\n        if (p2.X == 0 && p2.Y == 0) {\\n            // we subtracted zero, nothing happens\\n            dest.X = p1.X;\\n            dest.Y = p1.Y;\\n            return;\\n        } else if (p1.X == 0 && p1.Y == 0) {\\n            // we subtract from zero, and we subtract non-zero point\\n            dest.X = p2.X;\\n            dest.Y = q_mod - p2.Y;\\n            return;\\n        } else {\\n            uint256[4] memory input;\\n\\n            input[0] = p1.X;\\n            input[1] = p1.Y;\\n            input[2] = p2.X;\\n            input[3] = q_mod - p2.Y;\\n\\n            bool success = false;\\n            assembly {\\n                success := staticcall(gas(), 6, input, 0x80, dest, 0x40)\\n            }\\n            require(success);\\n        }\\n    }\\n\\n    function point_mul(G1Point memory p, Fr memory s) internal view returns (G1Point memory r) {\\n        // https://eips.ethereum.org/EIPS/eip-197\\n        // Elliptic curve points are encoded as a Jacobian pair (X, Y) where the point at infinity is encoded as (0, 0)\\n        if (p.X == 0 && p.Y == 1) {\\n            p.Y = 0;\\n        }\\n        point_mul_into_dest(p, s, r);\\n        return r;\\n    }\\n\\n    function point_mul_assign(G1Point memory p, Fr memory s) internal view {\\n        point_mul_into_dest(p, s, p);\\n    }\\n\\n    function point_mul_into_dest(\\n        G1Point memory p,\\n        Fr memory s,\\n        G1Point memory dest\\n    ) internal view {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s.value;\\n        bool success;\\n        assembly {\\n            success := staticcall(gas(), 7, input, 0x60, dest, 0x40)\\n        }\\n        require(success);\\n    }\\n\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length);\\n        uint256 elements = p1.length;\\n        uint256 inputSize = elements * 6;\\n        uint256[] memory input = new uint256[](inputSize);\\n        for (uint256 i = 0; i < elements; ) {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        uint256[1] memory out;\\n        bool success;\\n        assembly {\\n            success := staticcall(gas(), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n        }\\n        require(success);\\n        return out[0] != 0;\\n    }\\n\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/libraries/PriorityQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/// @notice The structure that contains meta information of the L2 transaction that was requested from L1\\n/// @dev The weird size of fields was selected specifically to minimize the structure storage size\\n/// @param canonicalTxHash Hashed L2 transaction data that is needed to process it\\n/// @param expirationTimestamp Expiration timestamp for this request (must be satisfied before)\\n/// @param layer2Tip Additional payment to the validator as an incentive to perform the operation\\nstruct PriorityOperation {\\n    bytes32 canonicalTxHash;\\n    uint64 expirationTimestamp;\\n    uint192 layer2Tip;\\n}\\n\\n/// @author Matter Labs\\n/// @dev The library provides the API to interact with the priority queue container\\n/// @dev Order of processing operations from queue - FIFO (Fist in - first out)\\nlibrary PriorityQueue {\\n    using PriorityQueue for Queue;\\n\\n    /// @notice Container that stores priority operations\\n    /// @param data The inner mapping that saves priority operation by its index\\n    /// @param head The pointer to the first unprocessed priority operation, equal to the tail if the queue is empty\\n    /// @param tail The pointer to the free slot\\n    struct Queue {\\n        mapping(uint256 => PriorityOperation) data;\\n        uint256 tail;\\n        uint256 head;\\n    }\\n\\n    /// @notice Returns zero if and only if no operations were processed from the queue\\n    /// @return Index of the oldest priority operation that wasn't processed yet\\n    function getFirstUnprocessedPriorityTx(Queue storage _queue) internal view returns (uint256) {\\n        return _queue.head;\\n    }\\n\\n    /// @return The total number of priority operations that were added to the priority queue, including all processed ones\\n    function getTotalPriorityTxs(Queue storage _queue) internal view returns (uint256) {\\n        return _queue.tail;\\n    }\\n\\n    /// @return The total number of unprocessed priority operations in a priority queue\\n    function getSize(Queue storage _queue) internal view returns (uint256) {\\n        return uint256(_queue.tail - _queue.head);\\n    }\\n\\n    /// @return Whether the priority queue contains no operations\\n    function isEmpty(Queue storage _queue) internal view returns (bool) {\\n        return _queue.tail == _queue.head;\\n    }\\n\\n    /// @notice Add the priority operation to the end of the priority queue\\n    function pushBack(Queue storage _queue, PriorityOperation memory _operation) internal {\\n        // Save value into the stack to avoid double reading from the storage\\n        uint256 tail = _queue.tail;\\n\\n        _queue.data[tail] = _operation;\\n        _queue.tail = tail + 1;\\n    }\\n\\n    /// @return The first unprocessed priority operation from the queue\\n    function front(Queue storage _queue) internal view returns (PriorityOperation memory) {\\n        require(!_queue.isEmpty(), \\\"D\\\"); // priority queue is empty\\n\\n        return _queue.data[_queue.head];\\n    }\\n\\n    /// @notice Remove the first unprocessed priority operation from the queue\\n    /// @return priorityOperation that was popped from the priority queue\\n    function popFront(Queue storage _queue) internal returns (PriorityOperation memory priorityOperation) {\\n        require(!_queue.isEmpty(), \\\"s\\\"); // priority queue is empty\\n\\n        // Save value into the stack to avoid double reading from the storage\\n        uint256 head = _queue.head;\\n\\n        priorityOperation = _queue.data[head];\\n        delete _queue.data[head];\\n        _queue.head = head + 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/libraries/TranscriptLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./PairingsBn254.sol\\\";\\n\\nlibrary TranscriptLib {\\n    // flip                    0xe000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 constant FR_MASK = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    uint32 constant DST_0 = 0;\\n    uint32 constant DST_1 = 1;\\n    uint32 constant DST_CHALLENGE = 2;\\n\\n    struct Transcript {\\n        bytes32 state_0;\\n        bytes32 state_1;\\n        uint32 challenge_counter;\\n    }\\n\\n    function new_transcript() internal pure returns (Transcript memory t) {\\n        t.state_0 = bytes32(0);\\n        t.state_1 = bytes32(0);\\n        t.challenge_counter = 0;\\n    }\\n\\n    function update_with_u256(Transcript memory self, uint256 value) internal pure {\\n        bytes32 old_state_0 = self.state_0;\\n        self.state_0 = keccak256(abi.encodePacked(DST_0, old_state_0, self.state_1, value));\\n        self.state_1 = keccak256(abi.encodePacked(DST_1, old_state_0, self.state_1, value));\\n    }\\n\\n    function update_with_fr(Transcript memory self, PairingsBn254.Fr memory value) internal pure {\\n        update_with_u256(self, value.value);\\n    }\\n\\n    function update_with_g1(Transcript memory self, PairingsBn254.G1Point memory p) internal pure {\\n        update_with_u256(self, p.X);\\n        update_with_u256(self, p.Y);\\n    }\\n\\n    function get_challenge(Transcript memory self) internal pure returns (PairingsBn254.Fr memory challenge) {\\n        bytes32 query = keccak256(abi.encodePacked(DST_CHALLENGE, self.state_0, self.state_1, self.challenge_counter));\\n        self.challenge_counter += 1;\\n        challenge = PairingsBn254.Fr({value: uint256(query) & FR_MASK});\\n    }\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/Plonk4VerifierWithAccessToDNext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./libraries/PairingsBn254.sol\\\";\\nimport \\\"./libraries/TranscriptLib.sol\\\";\\nimport \\\"../common/libraries/UncheckedMath.sol\\\";\\n\\nuint256 constant STATE_WIDTH = 4;\\nuint256 constant NUM_G2_ELS = 2;\\n\\nstruct VerificationKey {\\n    uint256 domain_size;\\n    uint256 num_inputs;\\n    PairingsBn254.Fr omega;\\n    PairingsBn254.G1Point[2] gate_selectors_commitments;\\n    PairingsBn254.G1Point[8] gate_setup_commitments;\\n    PairingsBn254.G1Point[STATE_WIDTH] permutation_commitments;\\n    PairingsBn254.G1Point lookup_selector_commitment;\\n    PairingsBn254.G1Point[4] lookup_tables_commitments;\\n    PairingsBn254.G1Point lookup_table_type_commitment;\\n    PairingsBn254.Fr[STATE_WIDTH - 1] non_residues;\\n    PairingsBn254.G2Point[NUM_G2_ELS] g2_elements;\\n}\\n\\ncontract Plonk4VerifierWithAccessToDNext {\\n    using PairingsBn254 for PairingsBn254.G1Point;\\n    using PairingsBn254 for PairingsBn254.G2Point;\\n    using PairingsBn254 for PairingsBn254.Fr;\\n\\n    using TranscriptLib for TranscriptLib.Transcript;\\n\\n    using UncheckedMath for uint256;\\n\\n    struct Proof {\\n        uint256[] input_values;\\n        // commitments\\n        PairingsBn254.G1Point[STATE_WIDTH] state_polys_commitments;\\n        PairingsBn254.G1Point copy_permutation_grand_product_commitment;\\n        PairingsBn254.G1Point[STATE_WIDTH] quotient_poly_parts_commitments;\\n        // openings\\n        PairingsBn254.Fr[STATE_WIDTH] state_polys_openings_at_z;\\n        PairingsBn254.Fr[1] state_polys_openings_at_z_omega;\\n        PairingsBn254.Fr[1] gate_selectors_openings_at_z;\\n        PairingsBn254.Fr[STATE_WIDTH - 1] copy_permutation_polys_openings_at_z;\\n        PairingsBn254.Fr copy_permutation_grand_product_opening_at_z_omega;\\n        PairingsBn254.Fr quotient_poly_opening_at_z;\\n        PairingsBn254.Fr linearization_poly_opening_at_z;\\n        // lookup commitments\\n        PairingsBn254.G1Point lookup_s_poly_commitment;\\n        PairingsBn254.G1Point lookup_grand_product_commitment;\\n        // lookup openings\\n        PairingsBn254.Fr lookup_s_poly_opening_at_z_omega;\\n        PairingsBn254.Fr lookup_grand_product_opening_at_z_omega;\\n        PairingsBn254.Fr lookup_t_poly_opening_at_z;\\n        PairingsBn254.Fr lookup_t_poly_opening_at_z_omega;\\n        PairingsBn254.Fr lookup_selector_poly_opening_at_z;\\n        PairingsBn254.Fr lookup_table_type_poly_opening_at_z;\\n        PairingsBn254.G1Point opening_proof_at_z;\\n        PairingsBn254.G1Point opening_proof_at_z_omega;\\n    }\\n\\n    struct PartialVerifierState {\\n        PairingsBn254.Fr zero;\\n        PairingsBn254.Fr alpha;\\n        PairingsBn254.Fr beta;\\n        PairingsBn254.Fr gamma;\\n        PairingsBn254.Fr[9] alpha_values;\\n        PairingsBn254.Fr eta;\\n        PairingsBn254.Fr beta_lookup;\\n        PairingsBn254.Fr gamma_lookup;\\n        PairingsBn254.Fr beta_plus_one;\\n        PairingsBn254.Fr beta_gamma;\\n        PairingsBn254.Fr v;\\n        PairingsBn254.Fr u;\\n        PairingsBn254.Fr z;\\n        PairingsBn254.Fr z_omega;\\n        PairingsBn254.Fr z_minus_last_omega;\\n        PairingsBn254.Fr l_0_at_z;\\n        PairingsBn254.Fr l_n_minus_one_at_z;\\n        PairingsBn254.Fr t;\\n        PairingsBn254.G1Point tp;\\n    }\\n\\n    function evaluate_l0_at_point(uint256 domain_size, PairingsBn254.Fr memory at)\\n        internal\\n        view\\n        returns (PairingsBn254.Fr memory num)\\n    {\\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\\n\\n        PairingsBn254.Fr memory size_fe = PairingsBn254.new_fr(domain_size);\\n        PairingsBn254.Fr memory den = at.copy();\\n        den.sub_assign(one);\\n        den.mul_assign(size_fe);\\n\\n        den = den.inverse();\\n\\n        num = at.pow(domain_size);\\n        num.sub_assign(one);\\n        num.mul_assign(den);\\n    }\\n\\n    function evaluate_lagrange_poly_out_of_domain(\\n        uint256 poly_num,\\n        uint256 domain_size,\\n        PairingsBn254.Fr memory omega,\\n        PairingsBn254.Fr memory at\\n    ) internal view returns (PairingsBn254.Fr memory res) {\\n        // (omega^i / N) / (X - omega^i) * (X^N - 1)\\n        require(poly_num < domain_size);\\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory omega_power = omega.pow(poly_num);\\n        res = at.pow(domain_size);\\n        res.sub_assign(one);\\n        require(res.value != 0); // Vanishing polynomial can not be zero at point `at`\\n        res.mul_assign(omega_power);\\n\\n        PairingsBn254.Fr memory den = PairingsBn254.copy(at);\\n        den.sub_assign(omega_power);\\n        den.mul_assign(PairingsBn254.new_fr(domain_size));\\n\\n        den = den.inverse();\\n\\n        res.mul_assign(den);\\n    }\\n\\n    function evaluate_vanishing(uint256 domain_size, PairingsBn254.Fr memory at)\\n        internal\\n        view\\n        returns (PairingsBn254.Fr memory res)\\n    {\\n        res = at.pow(domain_size);\\n        res.sub_assign(PairingsBn254.new_fr(1));\\n    }\\n\\n    function initialize_transcript(Proof memory proof, VerificationKey memory vk)\\n        internal\\n        pure\\n        returns (PartialVerifierState memory state)\\n    {\\n        TranscriptLib.Transcript memory transcript = TranscriptLib.new_transcript();\\n\\n        for (uint256 i = 0; i < vk.num_inputs; i = i.uncheckedInc()) {\\n            transcript.update_with_u256(proof.input_values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < STATE_WIDTH; i = i.uncheckedInc()) {\\n            transcript.update_with_g1(proof.state_polys_commitments[i]);\\n        }\\n\\n        state.eta = transcript.get_challenge();\\n        transcript.update_with_g1(proof.lookup_s_poly_commitment);\\n\\n        state.beta = transcript.get_challenge();\\n        state.gamma = transcript.get_challenge();\\n\\n        transcript.update_with_g1(proof.copy_permutation_grand_product_commitment);\\n        state.beta_lookup = transcript.get_challenge();\\n        state.gamma_lookup = transcript.get_challenge();\\n        transcript.update_with_g1(proof.lookup_grand_product_commitment);\\n        state.alpha = transcript.get_challenge();\\n\\n        for (uint256 i = 0; i < proof.quotient_poly_parts_commitments.length; i = i.uncheckedInc()) {\\n            transcript.update_with_g1(proof.quotient_poly_parts_commitments[i]);\\n        }\\n        state.z = transcript.get_challenge();\\n\\n        transcript.update_with_fr(proof.quotient_poly_opening_at_z);\\n\\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z.length; i = i.uncheckedInc()) {\\n            transcript.update_with_fr(proof.state_polys_openings_at_z[i]);\\n        }\\n\\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z_omega.length; i = i.uncheckedInc()) {\\n            transcript.update_with_fr(proof.state_polys_openings_at_z_omega[i]);\\n        }\\n        for (uint256 i = 0; i < proof.gate_selectors_openings_at_z.length; i = i.uncheckedInc()) {\\n            transcript.update_with_fr(proof.gate_selectors_openings_at_z[i]);\\n        }\\n        for (uint256 i = 0; i < proof.copy_permutation_polys_openings_at_z.length; i = i.uncheckedInc()) {\\n            transcript.update_with_fr(proof.copy_permutation_polys_openings_at_z[i]);\\n        }\\n\\n        state.z_omega = state.z.copy();\\n        state.z_omega.mul_assign(vk.omega);\\n\\n        transcript.update_with_fr(proof.copy_permutation_grand_product_opening_at_z_omega);\\n\\n        transcript.update_with_fr(proof.lookup_t_poly_opening_at_z);\\n        transcript.update_with_fr(proof.lookup_selector_poly_opening_at_z);\\n        transcript.update_with_fr(proof.lookup_table_type_poly_opening_at_z);\\n        transcript.update_with_fr(proof.lookup_s_poly_opening_at_z_omega);\\n        transcript.update_with_fr(proof.lookup_grand_product_opening_at_z_omega);\\n        transcript.update_with_fr(proof.lookup_t_poly_opening_at_z_omega);\\n        transcript.update_with_fr(proof.linearization_poly_opening_at_z);\\n\\n        state.v = transcript.get_challenge();\\n\\n        transcript.update_with_g1(proof.opening_proof_at_z);\\n        transcript.update_with_g1(proof.opening_proof_at_z_omega);\\n\\n        state.u = transcript.get_challenge();\\n    }\\n\\n    // compute some powers of challenge alpha([alpha^1, .. alpha^8])\\n    function compute_powers_of_alpha(PartialVerifierState memory state) public pure {\\n        require(state.alpha.value != 0);\\n        state.alpha_values[0] = PairingsBn254.new_fr(1);\\n        state.alpha_values[1] = state.alpha.copy();\\n        PairingsBn254.Fr memory current_alpha = state.alpha.copy();\\n        for (uint256 i = 2; i < state.alpha_values.length; i = i.uncheckedInc()) {\\n            current_alpha.mul_assign(state.alpha);\\n            state.alpha_values[i] = current_alpha.copy();\\n        }\\n    }\\n\\n    function verify(Proof memory proof, VerificationKey memory vk) internal view returns (bool) {\\n        // we initialize all challenges beforehand, we can draw each challenge in its own place\\n        PartialVerifierState memory state = initialize_transcript(proof, vk);\\n        if (verify_quotient_evaluation(vk, proof, state) == false) {\\n            return false;\\n        }\\n        require(proof.state_polys_openings_at_z_omega.length == 1);\\n\\n        PairingsBn254.G1Point memory quotient_result = proof.quotient_poly_parts_commitments[0].copy_g1();\\n        {\\n            // block scope\\n            PairingsBn254.Fr memory z_in_domain_size = state.z.pow(vk.domain_size);\\n            PairingsBn254.Fr memory current_z = z_in_domain_size.copy();\\n            PairingsBn254.G1Point memory tp;\\n            // start from i =1\\n            for (uint256 i = 1; i < proof.quotient_poly_parts_commitments.length; i = i.uncheckedInc()) {\\n                tp = proof.quotient_poly_parts_commitments[i].copy_g1();\\n                tp.point_mul_assign(current_z);\\n                quotient_result.point_add_assign(tp);\\n\\n                current_z.mul_assign(z_in_domain_size);\\n            }\\n        }\\n\\n        Queries memory queries = prepare_queries(vk, proof, state);\\n        queries.commitments_at_z[0] = quotient_result;\\n        queries.values_at_z[0] = proof.quotient_poly_opening_at_z;\\n        queries.commitments_at_z[1] = aggregated_linearization_commitment(vk, proof, state);\\n        queries.values_at_z[1] = proof.linearization_poly_opening_at_z;\\n\\n        require(queries.commitments_at_z.length == queries.values_at_z.length);\\n\\n        PairingsBn254.G1Point memory aggregated_commitment_at_z = queries.commitments_at_z[0];\\n\\n        PairingsBn254.Fr memory aggregated_opening_at_z = queries.values_at_z[0];\\n        PairingsBn254.Fr memory aggregation_challenge = PairingsBn254.new_fr(1);\\n        PairingsBn254.G1Point memory scaled;\\n        for (uint256 i = 1; i < queries.commitments_at_z.length; i = i.uncheckedInc()) {\\n            aggregation_challenge.mul_assign(state.v);\\n            scaled = queries.commitments_at_z[i].point_mul(aggregation_challenge);\\n            aggregated_commitment_at_z.point_add_assign(scaled);\\n\\n            state.t = queries.values_at_z[i];\\n            state.t.mul_assign(aggregation_challenge);\\n            aggregated_opening_at_z.add_assign(state.t);\\n        }\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        PairingsBn254.G1Point memory aggregated_commitment_at_z_omega = queries.commitments_at_z_omega[0].point_mul(\\n            aggregation_challenge\\n        );\\n        PairingsBn254.Fr memory aggregated_opening_at_z_omega = queries.values_at_z_omega[0];\\n        aggregated_opening_at_z_omega.mul_assign(aggregation_challenge);\\n        for (uint256 i = 1; i < queries.commitments_at_z_omega.length; i = i.uncheckedInc()) {\\n            aggregation_challenge.mul_assign(state.v);\\n\\n            scaled = queries.commitments_at_z_omega[i].point_mul(aggregation_challenge);\\n            aggregated_commitment_at_z_omega.point_add_assign(scaled);\\n\\n            state.t = queries.values_at_z_omega[i];\\n            state.t.mul_assign(aggregation_challenge);\\n            aggregated_opening_at_z_omega.add_assign(state.t);\\n        }\\n\\n        return\\n            final_pairing(\\n                vk.g2_elements,\\n                proof,\\n                state,\\n                aggregated_commitment_at_z,\\n                aggregated_commitment_at_z_omega,\\n                aggregated_opening_at_z,\\n                aggregated_opening_at_z_omega\\n            );\\n    }\\n\\n    function verify_quotient_evaluation(\\n        VerificationKey memory vk,\\n        Proof memory proof,\\n        PartialVerifierState memory state\\n    ) internal view returns (bool) {\\n        uint256[] memory lagrange_poly_numbers = new uint256[](vk.num_inputs);\\n        for (uint256 i = 0; i < lagrange_poly_numbers.length; i = i.uncheckedInc()) {\\n            lagrange_poly_numbers[i] = i;\\n        }\\n        require(vk.num_inputs > 0);\\n\\n        PairingsBn254.Fr memory inputs_term = PairingsBn254.new_fr(0);\\n        for (uint256 i = 0; i < vk.num_inputs; i = i.uncheckedInc()) {\\n            state.t = evaluate_lagrange_poly_out_of_domain(i, vk.domain_size, vk.omega, state.z);\\n            state.t.mul_assign(PairingsBn254.new_fr(proof.input_values[i]));\\n            inputs_term.add_assign(state.t);\\n        }\\n        inputs_term.mul_assign(proof.gate_selectors_openings_at_z[0]);\\n        PairingsBn254.Fr memory result = proof.linearization_poly_opening_at_z.copy();\\n        result.add_assign(inputs_term);\\n\\n        // compute powers of alpha\\n        compute_powers_of_alpha(state);\\n        PairingsBn254.Fr memory factor = state.alpha_values[4].copy();\\n        factor.mul_assign(proof.copy_permutation_grand_product_opening_at_z_omega);\\n\\n        // - alpha_0 * (a + perm(z) * beta + gamma)*()*(d + gamma) * z(z*omega)\\n        require(proof.copy_permutation_polys_openings_at_z.length == STATE_WIDTH - 1);\\n        PairingsBn254.Fr memory t; // TMP;\\n        for (uint256 i = 0; i < proof.copy_permutation_polys_openings_at_z.length; i = i.uncheckedInc()) {\\n            t = proof.copy_permutation_polys_openings_at_z[i].copy();\\n            t.mul_assign(state.beta);\\n            t.add_assign(proof.state_polys_openings_at_z[i]);\\n            t.add_assign(state.gamma);\\n\\n            factor.mul_assign(t);\\n        }\\n\\n        t = proof.state_polys_openings_at_z[3].copy();\\n        t.add_assign(state.gamma);\\n        factor.mul_assign(t);\\n        result.sub_assign(factor);\\n\\n        // - L_0(z) * alpha_1\\n        PairingsBn254.Fr memory l_0_at_z = evaluate_l0_at_point(vk.domain_size, state.z);\\n        l_0_at_z.mul_assign(state.alpha_values[4 + 1]);\\n        result.sub_assign(l_0_at_z);\\n\\n        PairingsBn254.Fr memory lookup_quotient_contrib = lookup_quotient_contribution(vk, proof, state);\\n        result.add_assign(lookup_quotient_contrib);\\n\\n        PairingsBn254.Fr memory lhs = proof.quotient_poly_opening_at_z.copy();\\n        lhs.mul_assign(evaluate_vanishing(vk.domain_size, state.z));\\n        return lhs.value == result.value;\\n    }\\n\\n    function lookup_quotient_contribution(\\n        VerificationKey memory vk,\\n        Proof memory proof,\\n        PartialVerifierState memory state\\n    ) internal view returns (PairingsBn254.Fr memory result) {\\n        PairingsBn254.Fr memory t;\\n\\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\\n        state.beta_plus_one = state.beta_lookup.copy();\\n        state.beta_plus_one.add_assign(one);\\n        state.beta_gamma = state.beta_plus_one.copy();\\n        state.beta_gamma.mul_assign(state.gamma_lookup);\\n\\n        // (s'*beta + gamma)*(zw')*alpha\\n        t = proof.lookup_s_poly_opening_at_z_omega.copy();\\n        t.mul_assign(state.beta_lookup);\\n        t.add_assign(state.beta_gamma);\\n        t.mul_assign(proof.lookup_grand_product_opening_at_z_omega);\\n        t.mul_assign(state.alpha_values[6]);\\n\\n        // (z - omega^{n-1}) for this part\\n        PairingsBn254.Fr memory last_omega = vk.omega.pow(vk.domain_size - 1);\\n        state.z_minus_last_omega = state.z.copy();\\n        state.z_minus_last_omega.sub_assign(last_omega);\\n        t.mul_assign(state.z_minus_last_omega);\\n        result.add_assign(t);\\n\\n        // - alpha_1 * L_{0}(z)\\n        state.l_0_at_z = evaluate_lagrange_poly_out_of_domain(0, vk.domain_size, vk.omega, state.z);\\n        t = state.l_0_at_z.copy();\\n        t.mul_assign(state.alpha_values[6 + 1]);\\n        result.sub_assign(t);\\n\\n        // - alpha_2 * beta_gamma_powered L_{n-1}(z)\\n        PairingsBn254.Fr memory beta_gamma_powered = state.beta_gamma.pow(vk.domain_size - 1);\\n        state.l_n_minus_one_at_z = evaluate_lagrange_poly_out_of_domain(\\n            vk.domain_size - 1,\\n            vk.domain_size,\\n            vk.omega,\\n            state.z\\n        );\\n        t = state.l_n_minus_one_at_z.copy();\\n        t.mul_assign(beta_gamma_powered);\\n        t.mul_assign(state.alpha_values[6 + 2]);\\n\\n        result.sub_assign(t);\\n    }\\n\\n    function aggregated_linearization_commitment(\\n        VerificationKey memory vk,\\n        Proof memory proof,\\n        PartialVerifierState memory state\\n    ) internal view returns (PairingsBn254.G1Point memory result) {\\n        // qMain*(Q_a * A + Q_b * B + Q_c * C + Q_d * D + Q_m * A*B + Q_const + Q_dNext * D_next)\\n        result = PairingsBn254.new_g1(0, 0);\\n        // Q_a * A\\n        PairingsBn254.G1Point memory scaled = vk.gate_setup_commitments[0].point_mul(\\n            proof.state_polys_openings_at_z[0]\\n        );\\n        result.point_add_assign(scaled);\\n        // Q_b * B\\n        scaled = vk.gate_setup_commitments[1].point_mul(proof.state_polys_openings_at_z[1]);\\n        result.point_add_assign(scaled);\\n        // Q_c * C\\n        scaled = vk.gate_setup_commitments[2].point_mul(proof.state_polys_openings_at_z[2]);\\n        result.point_add_assign(scaled);\\n        // Q_d * D\\n        scaled = vk.gate_setup_commitments[3].point_mul(proof.state_polys_openings_at_z[3]);\\n        result.point_add_assign(scaled);\\n        // Q_m* A*B or Q_ab*A*B\\n        PairingsBn254.Fr memory t = proof.state_polys_openings_at_z[0].copy();\\n        t.mul_assign(proof.state_polys_openings_at_z[1]);\\n        scaled = vk.gate_setup_commitments[4].point_mul(t);\\n        result.point_add_assign(scaled);\\n        // Q_AC* A*C\\n        t = proof.state_polys_openings_at_z[0].copy();\\n        t.mul_assign(proof.state_polys_openings_at_z[2]);\\n        scaled = vk.gate_setup_commitments[5].point_mul(t);\\n        result.point_add_assign(scaled);\\n        // Q_const\\n        result.point_add_assign(vk.gate_setup_commitments[6]);\\n        // Q_dNext * D_next\\n        scaled = vk.gate_setup_commitments[7].point_mul(proof.state_polys_openings_at_z_omega[0]);\\n        result.point_add_assign(scaled);\\n        result.point_mul_assign(proof.gate_selectors_openings_at_z[0]);\\n\\n        PairingsBn254.G1Point\\n            memory rescue_custom_gate_linearization_contrib = rescue_custom_gate_linearization_contribution(\\n                vk,\\n                proof,\\n                state\\n            );\\n        result.point_add_assign(rescue_custom_gate_linearization_contrib);\\n        require(vk.non_residues.length == STATE_WIDTH - 1);\\n\\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory factor = state.alpha_values[4].copy();\\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z.length; ) {\\n            t = state.z.copy();\\n            if (i == 0) {\\n                t.mul_assign(one);\\n            } else {\\n                t.mul_assign(vk.non_residues[i - 1]);\\n            }\\n            t.mul_assign(state.beta);\\n            t.add_assign(state.gamma);\\n            t.add_assign(proof.state_polys_openings_at_z[i]);\\n\\n            factor.mul_assign(t);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        scaled = proof.copy_permutation_grand_product_commitment.point_mul(factor);\\n        result.point_add_assign(scaled);\\n\\n        // - (a(z) + beta*perm_a + gamma)*()*()*z(z*omega) * beta * perm_d(X)\\n        factor = state.alpha_values[4].copy();\\n        factor.mul_assign(state.beta);\\n        factor.mul_assign(proof.copy_permutation_grand_product_opening_at_z_omega);\\n        for (uint256 i = 0; i < STATE_WIDTH - 1; i = i.uncheckedInc()) {\\n            t = proof.copy_permutation_polys_openings_at_z[i].copy();\\n            t.mul_assign(state.beta);\\n            t.add_assign(state.gamma);\\n            t.add_assign(proof.state_polys_openings_at_z[i]);\\n\\n            factor.mul_assign(t);\\n        }\\n        scaled = vk.permutation_commitments[3].point_mul(factor);\\n        result.point_sub_assign(scaled);\\n\\n        // + L_0(z) * Z(x)\\n        state.l_0_at_z = evaluate_lagrange_poly_out_of_domain(0, vk.domain_size, vk.omega, state.z);\\n        require(state.l_0_at_z.value != 0);\\n        factor = state.l_0_at_z.copy();\\n        factor.mul_assign(state.alpha_values[4 + 1]);\\n        scaled = proof.copy_permutation_grand_product_commitment.point_mul(factor);\\n        result.point_add_assign(scaled);\\n\\n        PairingsBn254.G1Point memory lookup_linearization_contrib = lookup_linearization_contribution(proof, state);\\n        result.point_add_assign(lookup_linearization_contrib);\\n    }\\n\\n    function rescue_custom_gate_linearization_contribution(\\n        VerificationKey memory vk,\\n        Proof memory proof,\\n        PartialVerifierState memory state\\n    ) public view returns (PairingsBn254.G1Point memory result) {\\n        PairingsBn254.Fr memory t;\\n        PairingsBn254.Fr memory intermediate_result;\\n\\n        // a^2 - b = 0\\n        t = proof.state_polys_openings_at_z[0].copy();\\n        t.mul_assign(t);\\n        t.sub_assign(proof.state_polys_openings_at_z[1]);\\n        // t.mul_assign(challenge1);\\n        t.mul_assign(state.alpha_values[1]);\\n        intermediate_result.add_assign(t);\\n\\n        // b^2 - c = 0\\n        t = proof.state_polys_openings_at_z[1].copy();\\n        t.mul_assign(t);\\n        t.sub_assign(proof.state_polys_openings_at_z[2]);\\n        t.mul_assign(state.alpha_values[1 + 1]);\\n        intermediate_result.add_assign(t);\\n\\n        // c*a - d = 0;\\n        t = proof.state_polys_openings_at_z[2].copy();\\n        t.mul_assign(proof.state_polys_openings_at_z[0]);\\n        t.sub_assign(proof.state_polys_openings_at_z[3]);\\n        t.mul_assign(state.alpha_values[1 + 2]);\\n        intermediate_result.add_assign(t);\\n\\n        result = vk.gate_selectors_commitments[1].point_mul(intermediate_result);\\n    }\\n\\n    function lookup_linearization_contribution(Proof memory proof, PartialVerifierState memory state)\\n        internal\\n        view\\n        returns (PairingsBn254.G1Point memory result)\\n    {\\n        PairingsBn254.Fr memory zero = PairingsBn254.new_fr(0);\\n\\n        PairingsBn254.Fr memory t;\\n        PairingsBn254.Fr memory factor;\\n        // s(x) from the Z(x*omega)*(\\\\gamma*(1 + \\\\beta) + s(x) + \\\\beta * s(x*omega)))\\n        factor = proof.lookup_grand_product_opening_at_z_omega.copy();\\n        factor.mul_assign(state.alpha_values[6]);\\n        factor.mul_assign(state.z_minus_last_omega);\\n\\n        PairingsBn254.G1Point memory scaled = proof.lookup_s_poly_commitment.point_mul(factor);\\n        result.point_add_assign(scaled);\\n\\n        // Z(x) from - alpha_0 * Z(x) * (\\\\beta + 1) * (\\\\gamma + f(x)) * (\\\\gamma(1 + \\\\beta) + t(x) + \\\\beta * t(x*omega))\\n        // + alpha_1 * Z(x) * L_{0}(z) + alpha_2 * Z(x) * L_{n-1}(z)\\n\\n        // accumulate coefficient\\n        factor = proof.lookup_t_poly_opening_at_z_omega.copy();\\n        factor.mul_assign(state.beta_lookup);\\n        factor.add_assign(proof.lookup_t_poly_opening_at_z);\\n        factor.add_assign(state.beta_gamma);\\n\\n        // (\\\\gamma + f(x))\\n        PairingsBn254.Fr memory f_reconstructed;\\n        PairingsBn254.Fr memory current = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory tmp0;\\n        for (uint256 i = 0; i < STATE_WIDTH - 1; i = i.uncheckedInc()) {\\n            tmp0 = proof.state_polys_openings_at_z[i].copy();\\n            tmp0.mul_assign(current);\\n            f_reconstructed.add_assign(tmp0);\\n\\n            current.mul_assign(state.eta);\\n        }\\n\\n        // add type of table\\n        t = proof.lookup_table_type_poly_opening_at_z.copy();\\n        t.mul_assign(current);\\n        f_reconstructed.add_assign(t);\\n\\n        f_reconstructed.mul_assign(proof.lookup_selector_poly_opening_at_z);\\n        f_reconstructed.add_assign(state.gamma_lookup);\\n\\n        // end of (\\\\gamma + f(x)) part\\n        factor.mul_assign(f_reconstructed);\\n        factor.mul_assign(state.beta_plus_one);\\n        t = zero.copy();\\n        t.sub_assign(factor);\\n        factor = t;\\n        factor.mul_assign(state.alpha_values[6]);\\n\\n        // Multiply by (z - omega^{n-1})\\n        factor.mul_assign(state.z_minus_last_omega);\\n\\n        // L_{0}(z) in front of Z(x)\\n        t = state.l_0_at_z.copy();\\n        t.mul_assign(state.alpha_values[6 + 1]);\\n        factor.add_assign(t);\\n\\n        // L_{n-1}(z) in front of Z(x)\\n        t = state.l_n_minus_one_at_z.copy();\\n        t.mul_assign(state.alpha_values[6 + 2]);\\n        factor.add_assign(t);\\n\\n        scaled = proof.lookup_grand_product_commitment.point_mul(factor);\\n        result.point_add_assign(scaled);\\n    }\\n\\n    struct Queries {\\n        PairingsBn254.G1Point[13] commitments_at_z;\\n        PairingsBn254.Fr[13] values_at_z;\\n        PairingsBn254.G1Point[6] commitments_at_z_omega;\\n        PairingsBn254.Fr[6] values_at_z_omega;\\n    }\\n\\n    function prepare_queries(\\n        VerificationKey memory vk,\\n        Proof memory proof,\\n        PartialVerifierState memory state\\n    ) public view returns (Queries memory queries) {\\n        // we set first two items in calee side so start idx from 2\\n        uint256 idx = 2;\\n        for (uint256 i = 0; i < STATE_WIDTH; i = i.uncheckedInc()) {\\n            queries.commitments_at_z[idx] = proof.state_polys_commitments[i];\\n            queries.values_at_z[idx] = proof.state_polys_openings_at_z[i];\\n            idx = idx.uncheckedInc();\\n        }\\n        require(proof.gate_selectors_openings_at_z.length == 1);\\n        queries.commitments_at_z[idx] = vk.gate_selectors_commitments[0];\\n        queries.values_at_z[idx] = proof.gate_selectors_openings_at_z[0];\\n        idx = idx.uncheckedInc();\\n        for (uint256 i = 0; i < STATE_WIDTH - 1; i = i.uncheckedInc()) {\\n            queries.commitments_at_z[idx] = vk.permutation_commitments[i];\\n            queries.values_at_z[idx] = proof.copy_permutation_polys_openings_at_z[i];\\n            idx = idx.uncheckedInc();\\n        }\\n\\n        queries.commitments_at_z_omega[0] = proof.copy_permutation_grand_product_commitment;\\n        queries.commitments_at_z_omega[1] = proof.state_polys_commitments[STATE_WIDTH - 1];\\n\\n        queries.values_at_z_omega[0] = proof.copy_permutation_grand_product_opening_at_z_omega;\\n        queries.values_at_z_omega[1] = proof.state_polys_openings_at_z_omega[0];\\n\\n        PairingsBn254.G1Point memory lookup_t_poly_commitment_aggregated = vk.lookup_tables_commitments[0];\\n        PairingsBn254.Fr memory current_eta = state.eta.copy();\\n        for (uint256 i = 1; i < vk.lookup_tables_commitments.length; i = i.uncheckedInc()) {\\n            state.tp = vk.lookup_tables_commitments[i].point_mul(current_eta);\\n            lookup_t_poly_commitment_aggregated.point_add_assign(state.tp);\\n\\n            current_eta.mul_assign(state.eta);\\n        }\\n        queries.commitments_at_z[idx] = lookup_t_poly_commitment_aggregated;\\n        queries.values_at_z[idx] = proof.lookup_t_poly_opening_at_z;\\n        idx = idx.uncheckedInc();\\n        queries.commitments_at_z[idx] = vk.lookup_selector_commitment;\\n        queries.values_at_z[idx] = proof.lookup_selector_poly_opening_at_z;\\n        idx = idx.uncheckedInc();\\n        queries.commitments_at_z[idx] = vk.lookup_table_type_commitment;\\n        queries.values_at_z[idx] = proof.lookup_table_type_poly_opening_at_z;\\n        queries.commitments_at_z_omega[2] = proof.lookup_s_poly_commitment;\\n        queries.values_at_z_omega[2] = proof.lookup_s_poly_opening_at_z_omega;\\n        queries.commitments_at_z_omega[3] = proof.lookup_grand_product_commitment;\\n        queries.values_at_z_omega[3] = proof.lookup_grand_product_opening_at_z_omega;\\n        queries.commitments_at_z_omega[4] = lookup_t_poly_commitment_aggregated;\\n        queries.values_at_z_omega[4] = proof.lookup_t_poly_opening_at_z_omega;\\n    }\\n\\n    function final_pairing(\\n        // VerificationKey memory vk,\\n        PairingsBn254.G2Point[NUM_G2_ELS] memory g2_elements,\\n        Proof memory proof,\\n        PartialVerifierState memory state,\\n        PairingsBn254.G1Point memory aggregated_commitment_at_z,\\n        PairingsBn254.G1Point memory aggregated_commitment_at_z_omega,\\n        PairingsBn254.Fr memory aggregated_opening_at_z,\\n        PairingsBn254.Fr memory aggregated_opening_at_z_omega\\n    ) internal view returns (bool) {\\n        // q(x) = f(x) - f(z) / (x - z)\\n        // q(x) * (x-z)  = f(x) - f(z)\\n\\n        // f(x)\\n        PairingsBn254.G1Point memory pair_with_generator = aggregated_commitment_at_z.copy_g1();\\n        aggregated_commitment_at_z_omega.point_mul_assign(state.u);\\n        pair_with_generator.point_add_assign(aggregated_commitment_at_z_omega);\\n\\n        // - f(z)*g\\n        PairingsBn254.Fr memory aggregated_value = aggregated_opening_at_z_omega.copy();\\n        aggregated_value.mul_assign(state.u);\\n        aggregated_value.add_assign(aggregated_opening_at_z);\\n        PairingsBn254.G1Point memory tp = PairingsBn254.P1().point_mul(aggregated_value);\\n        pair_with_generator.point_sub_assign(tp);\\n\\n        // +z * q(x)\\n        tp = proof.opening_proof_at_z.point_mul(state.z);\\n        PairingsBn254.Fr memory t = state.z_omega.copy();\\n        t.mul_assign(state.u);\\n        PairingsBn254.G1Point memory t1 = proof.opening_proof_at_z_omega.point_mul(t);\\n        tp.point_add_assign(t1);\\n        pair_with_generator.point_add_assign(tp);\\n\\n        // rhs\\n        PairingsBn254.G1Point memory pair_with_x = proof.opening_proof_at_z_omega.point_mul(state.u);\\n        pair_with_x.point_add_assign(proof.opening_proof_at_z);\\n        pair_with_x.negate();\\n        // Pairing precompile expects points to be in a `i*x[1] + x[0]` form instead of `x[0] + i*x[1]`\\n        // so we handle it in code generation step\\n        PairingsBn254.G2Point memory first_g2 = g2_elements[0];\\n        PairingsBn254.G2Point memory second_g2 = g2_elements[1];\\n\\n        return PairingsBn254.pairingProd2(pair_with_generator, first_g2, pair_with_x, second_g2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Verifier.sol\\\";\\nimport \\\"../common/interfaces/IAllowList.sol\\\";\\nimport \\\"./libraries/PriorityQueue.sol\\\";\\n\\n/// @notice Indicates whether an upgrade is initiated and if yes what type\\n/// @param None Upgrade is NOT initiated\\n/// @param Transparent Fully transparent upgrade is initiated, upgrade data is publicly known\\n/// @param Shadow Shadow upgrade is initiated, upgrade data is hidden\\nenum UpgradeState {\\n    None,\\n    Transparent,\\n    Shadow\\n}\\n\\n/// @dev Logically separated part of the storage structure, which is responsible for everything related to proxy upgrades and diamond cuts\\n/// @param proposedUpgradeHash The hash of the current upgrade proposal, zero if there is no active proposal\\n/// @param state Indicates whether an upgrade is initiated and if yes what type\\n/// @param securityCouncil Address which has the permission to approve instant upgrades (expected to be a Gnosis multisig)\\n/// @param approvedBySecurityCouncil Indicates whether the security council has approved the upgrade\\n/// @param proposedUpgradeTimestamp The timestamp when the upgrade was proposed, zero if there are no active proposals\\n/// @param currentProposalId The serial number of proposed upgrades, increments when proposing a new one\\nstruct UpgradeStorage {\\n    bytes32 proposedUpgradeHash;\\n    UpgradeState state;\\n    address securityCouncil;\\n    bool approvedBySecurityCouncil;\\n    uint40 proposedUpgradeTimestamp;\\n    uint40 currentProposalId;\\n}\\n\\n/// @dev The log passed from L2\\n/// @param l2ShardId The shard identifier, 0 - rollup, 1 - porter. All other values are not used but are reserved for the future\\n/// @param isService A boolean flag that is part of the log along with `key`, `value`, and `sender` address.\\n/// This field is required formally but does not have any special meaning.\\n/// @param txNumberInBlock The L2 transaction number in a block, in which the log was sent\\n/// @param sender The L2 address which sent the log\\n/// @param key The 32 bytes of information that was sent in the log\\n/// @param value The 32 bytes of information that was sent in the log\\n// Both `key` and `value` are arbitrary 32-bytes selected by the log sender\\nstruct L2Log {\\n    uint8 l2ShardId;\\n    bool isService;\\n    uint16 txNumberInBlock;\\n    address sender;\\n    bytes32 key;\\n    bytes32 value;\\n}\\n\\n/// @dev An arbitrary length message passed from L2\\n/// @notice Under the hood it is `L2Log` sent from the special system L2 contract\\n/// @param txNumberInBlock The L2 transaction number in a block, in which the message was sent\\n/// @param sender The address of the L2 account from which the message was passed\\n/// @param data An arbitrary length message\\nstruct L2Message {\\n    uint16 txNumberInBlock;\\n    address sender;\\n    bytes data;\\n}\\n\\n/// @notice Part of the configuration parameters of ZKP circuits\\nstruct VerifierParams {\\n    bytes32 recursionNodeLevelVkHash;\\n    bytes32 recursionLeafLevelVkHash;\\n    bytes32 recursionCircuitsSetVksHash;\\n}\\n\\n/// @dev storing all storage variables for zkSync facets\\n/// NOTE: It is used in a proxy, so it is possible to add new variables to the end\\n/// NOTE: but NOT to modify already existing variables or change their order\\n/// NOTE: DiamondCutStorage is unused, but it must remain a member of AppStorage to not have storage collision\\n/// NOTE: instead UpgradeStorage is used that is appended to the end of the AppStorage struct\\nstruct AppStorage {\\n    /// @dev Storage of variables needed for deprecated diamond cut facet\\n    uint256[7] __DEPRECATED_diamondCutStorage;\\n    /// @notice Address which will exercise governance over the network i.e. change validator set, conduct upgrades\\n    address governor;\\n    /// @notice Address that the governor proposed as one that will replace it\\n    address pendingGovernor;\\n    /// @notice List of permitted validators\\n    mapping(address => bool) validators;\\n    /// @dev Verifier contract. Used to verify aggregated proof for blocks\\n    Verifier verifier;\\n    /// @notice Total number of executed blocks i.e. blocks[totalBlocksExecuted] points at the latest executed block (block 0 is genesis)\\n    uint256 totalBlocksExecuted;\\n    /// @notice Total number of proved blocks i.e. blocks[totalBlocksProved] points at the latest proved block\\n    uint256 totalBlocksVerified;\\n    /// @notice Total number of committed blocks i.e. blocks[totalBlocksCommitted] points at the latest committed block\\n    uint256 totalBlocksCommitted;\\n    /// @dev Stored hashed StoredBlock for block number\\n    mapping(uint256 => bytes32) storedBlockHashes;\\n    /// @dev Stored root hashes of L2 -> L1 logs\\n    mapping(uint256 => bytes32) l2LogsRootHashes;\\n    /// @dev Container that stores transactions requested from L1\\n    PriorityQueue.Queue priorityQueue;\\n    /// @dev The smart contract that manages the list with permission to call contract functions\\n    IAllowList allowList;\\n    /// @notice Part of the configuration parameters of ZKP circuits. Used as an input for the verifier smart contract\\n    VerifierParams verifierParams;\\n    /// @notice Bytecode hash of bootloader program.\\n    /// @dev Used as an input to zkp-circuit.\\n    bytes32 l2BootloaderBytecodeHash;\\n    /// @notice Bytecode hash of default account (bytecode for EOA).\\n    /// @dev Used as an input to zkp-circuit.\\n    bytes32 l2DefaultAccountBytecodeHash;\\n    /// @dev Indicates that the porter may be touched on L2 transactions.\\n    /// @dev Used as an input to zkp-circuit.\\n    bool zkPorterIsAvailable;\\n    /// @dev The maximum number of the L2 gas that a user can request for L1 -> L2 transactions\\n    /// @dev This is the maximum number of L2 gas that is available for the \\\"body\\\" of the transaction, i.e.\\n    /// without overhead for proving the block.\\n    uint256 priorityTxMaxGasLimit;\\n    /// @dev Storage of variables needed for upgrade facet\\n    UpgradeStorage upgrades;\\n    /// @dev A mapping L2 block number => message number => flag.\\n    /// @dev The L2 -> L1 log is sent for every withdrawal, so this mapping is serving as\\n    /// a flag to indicate that the message was already processed.\\n    /// @dev Used to indicate that eth withdrawal was already processed\\n    mapping(uint256 => mapping(uint256 => bool)) isEthWithdrawalFinalized;\\n    /// @dev The most recent withdrawal time and amount reset\\n    uint256 __DEPRECATED_lastWithdrawalLimitReset;\\n    /// @dev The accumulated withdrawn amount during the withdrawal limit window\\n    uint256 __DEPRECATED_withdrawnAmountInWindow;\\n    /// @dev A mapping user address => the total deposited amount by the user\\n    mapping(address => uint256) totalDepositedAmountPerUser;\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l1/contracts/zksync/Verifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Plonk4VerifierWithAccessToDNext.sol\\\";\\nimport \\\"../common/libraries/UncheckedMath.sol\\\";\\n\\ncontract Verifier is Plonk4VerifierWithAccessToDNext {\\n    using UncheckedMath for uint256;\\n\\n    function get_verification_key() public pure returns (VerificationKey memory vk) {\\n        vk.num_inputs = 1;\\n        vk.domain_size = 67108864;\\n        vk.omega = PairingsBn254.new_fr(0x1dba8b5bdd64ef6ce29a9039aca3c0e524395c43b9227b96c75090cc6cc7ec97);\\n        // coefficients\\n        vk.gate_setup_commitments[0] = PairingsBn254.new_g1(\\n            0x08fa9d6f0dd6ac1cbeb94ae20fe7a23df05cb1095df66fb561190e615a4037ef,\\n            0x196dcc8692fe322d21375920559944c12ba7b1ba8b732344cf4ba2e3aa0fc8b4\\n        );\\n        vk.gate_setup_commitments[1] = PairingsBn254.new_g1(\\n            0x0074aaf5d97bd57551311a8b3e4aa7840bc55896502020b2f43ad6a98d81a443,\\n            0x2d275a3ad153dc9d89ebb9c9b6a0afd2dde82470554e9738d905c328fbb4c8bc\\n        );\\n        vk.gate_setup_commitments[2] = PairingsBn254.new_g1(\\n            0x287f1975a9aeaef5d2bb0767b5ef538f76e82f7da01c0cb6db8c6f920818ec4f,\\n            0x2fff6f53594129f794a7731d963d27e72f385c5c6d8e08829e6f66a9d29a12ea\\n        );\\n        vk.gate_setup_commitments[3] = PairingsBn254.new_g1(\\n            0x038809fa3d4b7320d43e023454194f0a7878baa7e73a295d2d105260f1c34cbc,\\n            0x25418b1105cf45b2a3da6c349bab1d9caaf145eaf24d1e8fb92c11654c000781\\n        );\\n        vk.gate_setup_commitments[4] = PairingsBn254.new_g1(\\n            0x0561cafd527ac3f0bc550db77d87cd1c63938f7ec051e62ebf84a5bbe07f9840,\\n            0x28f87201b4cbe19f1517a1c29ca6d6cb074502ccfed4c31c8931c6992c3eea43\\n        );\\n        vk.gate_setup_commitments[5] = PairingsBn254.new_g1(\\n            0x27e0af572bac6e36d31c33808cb44c0ef8ceee5e2850e916fb01f3747db72491,\\n            0x1da20087ba61c59366b21e31e4ac6889d357cf11bf16b94d875f94f41525c427\\n        );\\n        vk.gate_setup_commitments[6] = PairingsBn254.new_g1(\\n            0x2c2bcafea8f93d07f96874f470985a8d272c09c8ed49373f36497ee80bd8da17,\\n            0x299276cf6dca1a7e3780f6276c5d067403f6e024e83e0cc1ab4c5f7252b7f653\\n        );\\n        vk.gate_setup_commitments[7] = PairingsBn254.new_g1(\\n            0x0ba9d4a53e050da25b8410045b634f1ca065ff74acd35bab1a72bf1f20047ef3,\\n            0x1f1eefc8b0507a08f852f554bd7abcbd506e52de390ca127477a678d212abfe5\\n        );\\n        // gate selectors\\n        vk.gate_selectors_commitments[0] = PairingsBn254.new_g1(\\n            0x1c6b68d9920620012d85a4850dad9bd6d03ae8bbc7a08b827199e85dba1ef2b1,\\n            0x0f6380560d1b585628ed259289cec19d3a7c70c60e66bbfebfcb70c8c312d91e\\n        );\\n        vk.gate_selectors_commitments[1] = PairingsBn254.new_g1(\\n            0x0dfead780e5067181aae631ff734a33fca302773472997daca58ba49dbd20dcc,\\n            0x00f13fa6e356f525d2fd1c533acf2858c0d2b9f0a9b3180f94e1543929c75073\\n        );\\n        // permutation\\n        vk.permutation_commitments[0] = PairingsBn254.new_g1(\\n            0x1df0747c787934650d99c5696f9273088ad07ec3e0825c9d39685a9b9978ebed,\\n            0x2ace2a277becbc69af4e89518eb50960a733d9d71354845ea43d2e65c8e0e4cb\\n        );\\n        vk.permutation_commitments[1] = PairingsBn254.new_g1(\\n            0x06598c8236a5f5045cd7444dc87f3e1f66f99bf01251e13be4dc0ab1f7f1af4b,\\n            0x14ca234fe9b3bb1e5517fc60d6b90f8ad44b0899a2d4f71a64c9640b3142ce8b\\n        );\\n        vk.permutation_commitments[2] = PairingsBn254.new_g1(\\n            0x01889e2c684caefde60471748f4259196ecf4209a735ccdf7b1816f05bafa50a,\\n            0x092d287a080bfe2fd40ad392ff290e462cd0e347b8fd9d05b90af234ce77a11b\\n        );\\n        vk.permutation_commitments[3] = PairingsBn254.new_g1(\\n            0x0dd98eeb5bc12c221da969398b67750a8774dbdd37a78da52367f9fc0e566d5c,\\n            0x06750ceb40c9fb87fc424df9599340938b7552b759914a90cb0e41d3915c945b\\n        );\\n        // lookup table commitments\\n        vk.lookup_selector_commitment = PairingsBn254.new_g1(\\n            0x2f491c662ae53ceb358f57a868dc00b89befa853bd9a449127ea2d46820995bd,\\n            0x231fe6538634ff8b6fa21ca248fb15e7f43d82eb0bfa705490d24ddb3e3cad77\\n        );\\n        vk.lookup_tables_commitments[0] = PairingsBn254.new_g1(\\n            0x0ebe0de4a2f39df3b903da484c1641ffdffb77ff87ce4f9508c548659eb22d3c,\\n            0x12a3209440242d5662729558f1017ed9dcc08fe49a99554dd45f5f15da5e4e0b\\n        );\\n        vk.lookup_tables_commitments[1] = PairingsBn254.new_g1(\\n            0x1b7d54f8065ca63bed0bfbb9280a1011b886d07e0c0a26a66ecc96af68c53bf9,\\n            0x2c51121fff5b8f58c302f03c74e0cb176ae5a1d1730dec4696eb9cce3fe284ca\\n        );\\n        vk.lookup_tables_commitments[2] = PairingsBn254.new_g1(\\n            0x0138733c5faa9db6d4b8df9748081e38405999e511fb22d40f77cf3aef293c44,\\n            0x269bee1c1ac28053238f7fe789f1ea2e481742d6d16ae78ed81e87c254af0765\\n        );\\n        vk.lookup_tables_commitments[3] = PairingsBn254.new_g1(\\n            0x1b1be7279d59445065a95f01f16686adfa798ec4f1e6845ffcec9b837e88372e,\\n            0x057c90cb96d8259238ed86b05f629efd55f472a721efeeb56926e979433e6c0e\\n        );\\n        vk.lookup_table_type_commitment = PairingsBn254.new_g1(\\n            0x12cd873a6f18a4a590a846d9ebf61565197edf457efd26bc408eb61b72f37b59,\\n            0x19890cbdac892682e7a5910ca6c238c082130e1c71f33d0c9c901153377770d1\\n        );\\n        // non residues\\n        vk.non_residues[0] = PairingsBn254.new_fr(0x0000000000000000000000000000000000000000000000000000000000000005);\\n        vk.non_residues[1] = PairingsBn254.new_fr(0x0000000000000000000000000000000000000000000000000000000000000007);\\n        vk.non_residues[2] = PairingsBn254.new_fr(0x000000000000000000000000000000000000000000000000000000000000000a);\\n\\n        // g2 elements\\n        vk.g2_elements[0] = PairingsBn254.new_g2(\\n            [\\n                0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2,\\n                0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed\\n            ],\\n            [\\n                0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b,\\n                0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa\\n            ]\\n        );\\n        vk.g2_elements[1] = PairingsBn254.new_g2(\\n            [\\n                0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1,\\n                0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0\\n            ],\\n            [\\n                0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4,\\n                0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55\\n            ]\\n        );\\n    }\\n\\n    function deserialize_proof(uint256[] calldata public_inputs, uint256[] calldata serialized_proof)\\n        internal\\n        pure\\n        returns (Proof memory proof)\\n    {\\n        require(serialized_proof.length == 44);\\n        proof.input_values = new uint256[](public_inputs.length);\\n        for (uint256 i = 0; i < public_inputs.length; i = i.uncheckedInc()) {\\n            proof.input_values[i] = public_inputs[i];\\n        }\\n\\n        uint256 j;\\n        for (uint256 i = 0; i < STATE_WIDTH; i = i.uncheckedInc()) {\\n            proof.state_polys_commitments[i] = PairingsBn254.new_g1_checked(\\n                serialized_proof[j],\\n                serialized_proof[j.uncheckedInc()]\\n            );\\n\\n            j = j.uncheckedAdd(2);\\n        }\\n        proof.copy_permutation_grand_product_commitment = PairingsBn254.new_g1_checked(\\n            serialized_proof[j],\\n            serialized_proof[j.uncheckedInc()]\\n        );\\n        j = j.uncheckedAdd(2);\\n\\n        proof.lookup_s_poly_commitment = PairingsBn254.new_g1_checked(\\n            serialized_proof[j],\\n            serialized_proof[j.uncheckedInc()]\\n        );\\n        j = j.uncheckedAdd(2);\\n\\n        proof.lookup_grand_product_commitment = PairingsBn254.new_g1_checked(\\n            serialized_proof[j],\\n            serialized_proof[j.uncheckedInc()]\\n        );\\n        j = j.uncheckedAdd(2);\\n        for (uint256 i = 0; i < proof.quotient_poly_parts_commitments.length; i = i.uncheckedInc()) {\\n            proof.quotient_poly_parts_commitments[i] = PairingsBn254.new_g1_checked(\\n                serialized_proof[j],\\n                serialized_proof[j.uncheckedInc()]\\n            );\\n            j = j.uncheckedAdd(2);\\n        }\\n\\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z.length; i = i.uncheckedInc()) {\\n            proof.state_polys_openings_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j = j.uncheckedInc();\\n        }\\n\\n        for (uint256 i = 0; i < proof.state_polys_openings_at_z_omega.length; i = i.uncheckedInc()) {\\n            proof.state_polys_openings_at_z_omega[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j = j.uncheckedInc();\\n        }\\n        for (uint256 i = 0; i < proof.gate_selectors_openings_at_z.length; i = i.uncheckedInc()) {\\n            proof.gate_selectors_openings_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j = j.uncheckedInc();\\n        }\\n        for (uint256 i = 0; i < proof.copy_permutation_polys_openings_at_z.length; i = i.uncheckedInc()) {\\n            proof.copy_permutation_polys_openings_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j = j.uncheckedInc();\\n        }\\n        proof.copy_permutation_grand_product_opening_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j = j.uncheckedInc();\\n        proof.lookup_s_poly_opening_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\\n        j = j.uncheckedInc();\\n        proof.lookup_grand_product_opening_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j = j.uncheckedInc();\\n        proof.lookup_t_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j = j.uncheckedInc();\\n        proof.lookup_t_poly_opening_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\\n        j = j.uncheckedInc();\\n        proof.lookup_selector_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n        j = j.uncheckedInc();\\n        proof.lookup_table_type_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n        j = j.uncheckedInc();\\n        proof.quotient_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n        j = j.uncheckedInc();\\n        proof.linearization_poly_opening_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n        j = j.uncheckedInc();\\n        proof.opening_proof_at_z = PairingsBn254.new_g1_checked(\\n            serialized_proof[j],\\n            serialized_proof[j.uncheckedInc()]\\n        );\\n        j = j.uncheckedAdd(2);\\n        proof.opening_proof_at_z_omega = PairingsBn254.new_g1_checked(\\n            serialized_proof[j],\\n            serialized_proof[j.uncheckedInc()]\\n        );\\n    }\\n\\n    function verify_serialized_proof(uint256[] calldata public_inputs, uint256[] calldata serialized_proof)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        VerificationKey memory vk = get_verification_key();\\n        require(vk.num_inputs == public_inputs.length);\\n\\n        Proof memory proof = deserialize_proof(public_inputs, serialized_proof);\\n\\n        return verify(proof, vk);\\n    }\\n}\\n\"\r\n    },\r\n    \"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IL1Messenger {\\n    // Possibly in the future we will be able to track the messages sent to L1 with\\n    // some hooks in the VM. For now, it is much easier to track them with L2 events.\\n    event L1MessageSent(address indexed _sender, bytes32 indexed _hash, bytes _message);\\n\\n    function sendToL1(bytes memory _message) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAccessControl } from './IAccessControl.sol';\\nimport { AccessControlInternal } from './AccessControlInternal.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControl is IAccessControl, AccessControlInternal {\\n    /**\\n     * @inheritdoc IAccessControl\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) external onlyRole(_getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControl\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool) {\\n        return _hasRole(role, account);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControl\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32) {\\n        return _getRoleAdmin(role);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControl\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) external onlyRole(_getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControl\\n     */\\n    function renounceRole(bytes32 role) external {\\n        _renounceRole(role);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/AccessControlInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/AccessControlStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\n\\n/**\\n * @title AccessControl interface\\n */\\ninterface IAccessControl is IAccessControlInternal {\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function renounceRole(bytes32 role) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\n\\ninterface IOwnable is IERC173 {}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/IOwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/ISafeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable } from './IOwnable.sol';\\n\\ninterface ISafeOwnable is IOwnable {\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function nomineeOwner() external view returns (address);\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface ISafeOwnableInternal is IOwnableInternal {\\n    error SafeOwnable__NotNomineeOwner();\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/OwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address owner) {\\n        owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        _setOwner(account);\\n    }\\n\\n    function _setOwner(address account) internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, account);\\n        l.owner = account;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/OwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/SafeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Ownable } from './Ownable.sol';\\nimport { ISafeOwnable } from './ISafeOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is ISafeOwnable, Ownable, SafeOwnableInternal {\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function nomineeOwner() public view virtual returns (address) {\\n        return _nomineeOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        _acceptOwnership();\\n    }\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnableInternal) {\\n        super._transferOwnership(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal is ISafeOwnableInternal, OwnableInternal {\\n    modifier onlyNomineeOwner() {\\n        if (msg.sender != _nomineeOwner())\\n            revert SafeOwnable__NotNomineeOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function _nomineeOwner() internal view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function _acceptOwnership() internal virtual {\\n        _setOwner(msg.sender);\\n        delete SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice set nominee owner, granting permission to call acceptOwnership\\n     */\\n    function _transferOwnership(address account) internal virtual override {\\n        SafeOwnableStorage.layout().nomineeOwner = account;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/data/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC1155Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 is IERC165Internal {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC165Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165Internal } from './IERC165Internal.sol';\\n\\n/**\\n * @title ERC165 interface registration interface\\n */\\ninterface IERC165Internal {\\n\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC173Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC20Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool status);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC721Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/ERC165Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165Base } from './IERC165Base.sol';\\nimport { ERC165BaseInternal } from './ERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165Base is IERC165Base, ERC165BaseInternal {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return _supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/ERC165BaseInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\nimport { ERC165BaseStorage } from './ERC165BaseStorage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165BaseInternal is IERC165BaseInternal {\\n    /**\\n     * @notice indicates whether an interface is already supported based on the interfaceId\\n     * @param interfaceId id of interface to check\\n     * @return bool indicating whether interface is supported\\n     */\\n    function _supportsInterface(\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return ERC165BaseStorage.layout().supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @notice sets status of interface support\\n     * @param interfaceId id of interface to set status for\\n     * @param status boolean indicating whether interface will be set as supported\\n     */\\n    function _setSupportsInterface(bytes4 interfaceId, bool status) internal {\\n        if (interfaceId == 0xffffffff) revert ERC165Base__InvalidInterfaceId();\\n        ERC165BaseStorage.layout().supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/ERC165BaseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165BaseStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/IERC165Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../../interfaces/IERC165.sol';\\nimport { IERC165BaseInternal } from './IERC165BaseInternal.sol';\\n\\ninterface IERC165Base is IERC165, IERC165BaseInternal {}\\n\"\r\n    },\r\n    \"@solidstate/contracts/introspection/ERC165/base/IERC165BaseInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165Internal } from '../../../interfaces/IERC165Internal.sol';\\n\\ninterface IERC165BaseInternal is IERC165Internal {\\n    error ERC165Base__InvalidInterfaceId();\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        implementation = address(bytes20(l.facets[msg.sig]));\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from '../../IProxy.sol';\\n\\ninterface IDiamondBase is IProxy {}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBase } from '../base/DiamondBase.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondFallback } from './IDiamondFallback.sol';\\n\\n// TODO: DiamondFallback interface\\n\\n/**\\n * @title Fallback feature for EIP-2535 \\\"Diamond\\\" proxy\\n */\\nabstract contract DiamondFallback is\\n    IDiamondFallback,\\n    OwnableInternal,\\n    DiamondBase\\n{\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = _getFallbackAddress();\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        _setFallbackAddress(fallbackAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondBase\\n     * @notice query custom fallback address is no implementation is found\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n\\n        if (implementation == address(0)) {\\n            implementation = _getFallbackAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function _getFallbackAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function _setFallbackAddress(address fallbackAddress) internal virtual {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/fallback/IDiamondFallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondBase } from '../base/IDiamondBase.sol';\\n\\ninterface IDiamondFallback is IDiamondBase {\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress);\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function setFallbackAddress(address fallbackAddress) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnable } from '../../access/ownable/ISafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IDiamondBase } from './base/IDiamondBase.sol';\\nimport { IDiamondFallback } from './fallback/IDiamondFallback.sol';\\nimport { IDiamondReadable } from './readable/IDiamondReadable.sol';\\nimport { IDiamondWritable } from './writable/IDiamondWritable.sol';\\n\\ninterface ISolidStateDiamond is\\n    IDiamondBase,\\n    IDiamondFallback,\\n    IDiamondReadable,\\n    IDiamondWritable,\\n    ISafeOwnable,\\n    IERC165\\n{\\n    receive() external payable;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet) {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable, Ownable, OwnableInternal } from '../../access/ownable/Ownable.sol';\\nimport { ISafeOwnable, SafeOwnable } from '../../access/ownable/SafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { ERC165Base, ERC165BaseStorage } from '../../introspection/ERC165/base/ERC165Base.sol';\\nimport { DiamondBase } from './base/DiamondBase.sol';\\nimport { DiamondFallback, IDiamondFallback } from './fallback/DiamondFallback.sol';\\nimport { DiamondReadable, IDiamondReadable } from './readable/DiamondReadable.sol';\\nimport { DiamondWritable, IDiamondWritable } from './writable/DiamondWritable.sol';\\nimport { ISolidStateDiamond } from './ISolidStateDiamond.sol';\\n\\n/**\\n * @title SolidState \\\"Diamond\\\" proxy reference implementation\\n */\\nabstract contract SolidStateDiamond is\\n    ISolidStateDiamond,\\n    DiamondBase,\\n    DiamondFallback,\\n    DiamondReadable,\\n    DiamondWritable,\\n    SafeOwnable,\\n    ERC165Base\\n{\\n    constructor() {\\n        bytes4[] memory selectors = new bytes4[](12);\\n        uint256 selectorIndex;\\n\\n        // register DiamondFallback\\n\\n        selectors[selectorIndex++] = IDiamondFallback\\n            .getFallbackAddress\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondFallback\\n            .setFallbackAddress\\n            .selector;\\n\\n        _setSupportsInterface(type(IDiamondFallback).interfaceId, true);\\n\\n        // register DiamondWritable\\n\\n        selectors[selectorIndex++] = IDiamondWritable.diamondCut.selector;\\n\\n        _setSupportsInterface(type(IDiamondWritable).interfaceId, true);\\n\\n        // register DiamondReadable\\n\\n        selectors[selectorIndex++] = IDiamondReadable.facets.selector;\\n        selectors[selectorIndex++] = IDiamondReadable\\n            .facetFunctionSelectors\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddresses.selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddress.selector;\\n\\n        _setSupportsInterface(type(IDiamondReadable).interfaceId, true);\\n\\n        // register ERC165\\n\\n        selectors[selectorIndex++] = IERC165.supportsInterface.selector;\\n\\n        _setSupportsInterface(type(IERC165).interfaceId, true);\\n\\n        // register SafeOwnable\\n\\n        selectors[selectorIndex++] = Ownable.owner.selector;\\n        selectors[selectorIndex++] = SafeOwnable.nomineeOwner.selector;\\n        selectors[selectorIndex++] = Ownable.transferOwnership.selector;\\n        selectors[selectorIndex++] = SafeOwnable.acceptOwnership.selector;\\n\\n        _setSupportsInterface(type(IERC173).interfaceId, true);\\n\\n        // diamond cut\\n\\n        FacetCut[] memory facetCuts = new FacetCut[](1);\\n\\n        facetCuts[0] = FacetCut({\\n            target: address(this),\\n            action: FacetCutAction.ADD,\\n            selectors: selectors\\n        });\\n\\n        _diamondCut(facetCuts, address(0), '');\\n\\n        // set owner\\n\\n        _setOwner(msg.sender);\\n    }\\n\\n    receive() external payable {}\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnable) {\\n        super._transferOwnership(account);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondFallback\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        override(DiamondBase, DiamondFallback)\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { IDiamondWritable } from './IDiamondWritable.sol';\\nimport { DiamondWritableInternal } from './DiamondWritableInternal.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondWritable is\\n    IDiamondWritable,\\n    DiamondWritableInternal,\\n    OwnableInternal\\n{\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        _diamondCut(facetCuts, target, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\nabstract contract DiamondWritableInternal is IDiamondWritableInternal {\\n    using AddressUtils for address;\\n\\n    bytes32 private constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 private constant CLEAR_SELECTOR_MASK =\\n        bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function _diamondCut(\\n        FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                FacetCut memory facetCut = facetCuts[i];\\n                FacetCutAction action = facetCut.action;\\n\\n                if (facetCut.selectors.length == 0)\\n                    revert DiamondWritable__SelectorNotSpecified();\\n\\n                if (action == FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = _addFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == FacetCutAction.REPLACE) {\\n                    _replaceFacetSelectors(l, facetCut);\\n                } else if (action == FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = _removeFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            _initialize(target, data);\\n        }\\n    }\\n\\n    function _addFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (\\n                facetCut.target != address(this) &&\\n                !facetCut.target.isContract()\\n            ) revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0))\\n                    revert DiamondWritable__SelectorAlreadyAdded();\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _removeFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.target != address(0))\\n                revert DiamondWritable__RemoveTargetNotZeroAddress();\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n\\n                if (address(bytes20(oldFacet)) == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _replaceFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            if (!facetCut.target.isContract())\\n                revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n                if (oldFacetAddress == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n                if (oldFacetAddress == facetCut.target)\\n                    revert DiamondWritable__ReplaceTargetIsIdentical();\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function _initialize(address target, bytes memory data) private {\\n        if ((target == address(0)) != (data.length == 0))\\n            revert DiamondWritable__InvalidInitializationParameters();\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                if (!target.isContract())\\n                    revert DiamondWritable__TargetHasNoCode();\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondWritable is IDiamondWritableInternal {\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional target of initialization delegatecall\\n     * @param data optional initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/diamond/writable/IDiamondWritableInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDiamondWritableInternal {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    error DiamondWritable__InvalidInitializationParameters();\\n    error DiamondWritable__RemoveTargetNotZeroAddress();\\n    error DiamondWritable__ReplaceTargetIsIdentical();\\n    error DiamondWritable__SelectorAlreadyAdded();\\n    error DiamondWritable__SelectorIsImmutable();\\n    error DiamondWritable__SelectorNotFound();\\n    error DiamondWritable__SelectorNotSpecified();\\n    error DiamondWritable__TargetHasNoCode();\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    error Proxy__ImplementationIsNotContract();\\n\\n    fallback() external payable;\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        if (!implementation.isContract())\\n            revert Proxy__ImplementationIsNotContract();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20 } from '../interfaces/IERC20.sol';\\nimport { AddressUtils } from './AddressUtils.sol';\\n\\n/**\\n * @title Safe ERC20 interaction library\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary SafeERC20 {\\n    using AddressUtils for address;\\n\\n    error SafeERC20__ApproveFromNonZeroToNonZero();\\n    error SafeERC20__DecreaseAllowanceBelowZero();\\n    error SafeERC20__OperationFailed();\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev safeApprove (like approve) should only be called when setting an initial allowance or when resetting it to zero; otherwise prefer safeIncreaseAllowance and safeDecreaseAllowance\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if ((value != 0) && (token.allowance(address(this), spender) != 0))\\n            revert SafeERC20__ApproveFromNonZeroToNonZero();\\n\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            if (oldAllowance < value)\\n                revert SafeERC20__DecreaseAllowanceBelowZero();\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice send transaction data and check validity of return value, if present\\n     * @param token ERC20 token interface\\n     * @param data transaction data\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n\\n        if (returndata.length > 0) {\\n            if (!abi.decode(returndata, (bool)))\\n                revert SafeERC20__OperationFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/NaffleTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary NaffleTypes {\\n    struct L2MessageParams {\\n        uint256 l2GasLimit;\\n        uint256 l2GasPerPubdataByteLimit;\\n    }\\n\\n    struct ExchangeRateData {\\n        uint256 exchangeRate;\\n        uint256 expireTimestamp;\\n    }\\n\\n    struct ExchangeRateParams {\\n        ExchangeRateData exchangeRateData;\\n        bytes exchangeRateSignature;\\n    }\\n\\n    struct CollectionWhitelistParams {\\n        uint256 expiresAt;\\n        bytes signature;\\n    }\\n\\n    struct CreateZkSyncNaffleParams {\\n        NaffleTokenInformation naffleTokenInformation;\\n        address owner;\\n        uint256 naffleId;\\n        uint256 paidTicketSpots;\\n        uint256 ticketPriceInWei;\\n        uint256 endTime;\\n        NaffleType naffleType;\\n    }\\n\\n    enum NaffleStatus {\\n        ACTIVE,\\n        POSTPONED,\\n        CANCELLED,\\n        SELECTING_WINNER,\\n        FINISHED\\n    }\\n\\n    enum NaffleType {\\n        STANDARD,\\n        UNLIMITED\\n    }\\n\\n    enum ActionType {\\n        SET_WINNER,\\n        CANCEL\\n    }\\n\\n    enum TicketType {\\n        OPEN_ENTRY,\\n        PAID\\n    }\\n\\n    enum TokenContractType {\\n        ERC721,\\n        ERC1155,\\n        ERC20\\n    }\\n\\n    enum TxStatus {\\n        Failure,\\n        Success\\n    }\\n\\n    struct NaffleTokenInformation {\\n        address tokenAddress;\\n        uint256 nftId;\\n        uint256 amount;\\n        TokenContractType naffleTokenType;\\n    }\\n\\n    struct L1Naffle {\\n        NaffleTokenInformation naffleTokenInformation;\\n        uint256 naffleId;\\n        address owner;\\n        address winner;\\n        bool cancelled;\\n        bytes32 txHash;\\n    }\\n\\n    struct OpenEntryTicket {\\n        uint256 naffleId;\\n        uint256 ticketIdOnNaffle;\\n    }\\n\\n    struct L2Naffle {\\n        NaffleTokenInformation naffleTokenInformation;\\n        address owner;\\n        uint256 naffleId;\\n        uint256 paidTicketSpots;\\n        uint256 openEntryTicketSpots;\\n        uint256 numberOfPaidTickets;\\n        uint256 numberOfOpenEntries;\\n        uint256 ticketPriceInWei;\\n        uint256 endTime;\\n        uint256 winningTicketId;\\n        NaffleStatus status;\\n        NaffleType naffleType;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/naffle/ethereum/L1NaffleBaseInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./L1NaffleBaseStorage.sol\\\";\\nimport \\\"../../libraries/NaffleTypes.sol\\\";\\nimport '@solidstate/contracts/interfaces/IERC165.sol';\\nimport '@solidstate/contracts/interfaces/IERC721.sol';\\nimport '@solidstate/contracts/interfaces/IERC1155.sol';\\nimport '@solidstate/contracts/interfaces/IERC20.sol';\\nimport '@solidstate/contracts/utils/SafeERC20.sol';\\nimport \\\"@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IZkSync.sol\\\";\\nimport \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport \\\"../../../interfaces/naffle/ethereum/IL1NaffleBaseInternal.sol\\\";\\nimport \\\"@matterlabs/zksync-contracts/l1/contracts/zksync/Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract L1NaffleBaseInternal is IL1NaffleBaseInternal {\\n    using SafeERC20 for IERC20;\\n    bytes4 internal constant ERC20_INTERFACE_ID = 0x36372b07;\\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\\n    bytes4 internal constant ERC1155_INTERFACE_ID = 0xd9b67a26;\\n\\n    /**\\n     * @notice create a new naffle. When the naffle is created, a message is sent to the L2 naffle contract.\\n     * @dev function gets called by someone who wants to start a naffle.\\n     * @dev if the owner does not have a founders key, the owner can't create a naffle and a NotAllowed error is thrown.\\n     * @dev if the naffle end time is less than the current time + the minimum naffle duration, an InvalidEndTime error is thrown.\\n     * @dev if the naffle type is unlimited and the paid ticket spots is not 0, an InvalidPaidTicketSpots error is thrown.\\n     * @dev if the naffle type is standard and the paid ticket spots is less than the minimum paid ticket spots, an InvalidPaidTicketSpots error is thrown.\\n     * @dev if the token type is not supported an InvalidTokenType error is thrown.\\n     * @dev if the naffle type is standard and the nft id is 0, an InvalidNftId error is thrown.\\n     * @param _naffleTokenInformation the naffle token information.\\n     * @param _paidTicketSpots the number of paid ticket spots.\\n     * @param _ticketPriceInWei the price of a ticket in wei.\\n     * @param _endTime the end time of the naffle.\\n     * @param _naffleType the type of the naffle.\\n     * @param _collectionWhitelistParams the collection whitelist params.\\n     * @return naffleId the id of the naffle that is created.\\n     * @return txHash the hash of the transaction that is sent to the L2 naffle contract.\\n     */\\n    function _createNaffle(\\n        NaffleTypes.NaffleTokenInformation memory _naffleTokenInformation,\\n        uint256 _paidTicketSpots,\\n        uint256 _ticketPriceInWei,\\n        uint256 _endTime,\\n        NaffleTypes.NaffleType _naffleType,\\n        NaffleTypes.L2MessageParams memory _l2MessageParams,\\n        NaffleTypes.CollectionWhitelistParams memory _collectionWhitelistParams\\n    ) internal returns (uint256 naffleId, bytes32 txHash) {\\n        L1NaffleBaseStorage.Layout storage layout = L1NaffleBaseStorage.layout();\\n\\n        if (block.timestamp > _collectionWhitelistParams.expiresAt) {\\n            revert InvalidSignature();\\n        }\\n\\n        _validateCollectionSignature(\\n            _naffleTokenInformation,\\n            _collectionWhitelistParams,\\n            layout.signatureSigner,\\n            layout.collectionWhitelistSignature,\\n            layout.domainName,\\n            layout.domainSignature\\n        );\\n\\n        if (\\n            IERC721(layout.foundersKeyAddress).balanceOf(msg.sender) == 0 &&\\n            IERC721(layout.foundersKeyPlaceholderAddress).balanceOf(msg.sender) == 0\\n        ) {\\n            revert NotAllowed();\\n        }\\n\\n        if (_endTime < block.timestamp + layout.minimumNaffleDuration) {\\n            revert InvalidEndTime(_endTime);\\n        }\\n\\n        ++layout.numberOfNaffles;\\n        naffleId = layout.numberOfNaffles;\\n        if (\\n            (_naffleType == NaffleTypes.NaffleType.UNLIMITED && _paidTicketSpots != 0) ||\\n            (_naffleType == NaffleTypes.NaffleType.STANDARD && _paidTicketSpots < layout.minimumPaidTicketSpots)\\n        ) {\\n            // Unlimited naffles don't have an upper limit on paid or open entry tickets.\\n            revert InvalidPaidTicketSpots(_paidTicketSpots);\\n        }\\n\\n        NaffleTypes.TokenContractType tokenContractType;\\n        if (_naffleTokenInformation.naffleTokenType == NaffleTypes.TokenContractType.ERC721) {\\n            tokenContractType = NaffleTypes.TokenContractType.ERC721;\\n            IERC721(_naffleTokenInformation.tokenAddress).transferFrom(msg.sender, address(this), _naffleTokenInformation.nftId);\\n        } else if (_naffleTokenInformation.naffleTokenType == NaffleTypes.TokenContractType.ERC1155) {\\n            tokenContractType = NaffleTypes.TokenContractType.ERC1155;\\n            IERC1155(_naffleTokenInformation.tokenAddress).safeTransferFrom(msg.sender,  address(this), _naffleTokenInformation.nftId, _naffleTokenInformation.amount, bytes(\\\"\\\"));\\n        } else {\\n            tokenContractType = NaffleTypes.TokenContractType.ERC20;\\n            IERC20(_naffleTokenInformation.tokenAddress).safeTransferFrom(msg.sender, address(this), _naffleTokenInformation.amount);\\n        }\\n\\n        \\n        IZkSync zksync = IZkSync(layout.zkSyncAddress);\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"createNaffle(((address,uint256,uint256,uint8),address,uint256,uint256,uint256,uint256,uint8))\\\",\\n            NaffleTypes.CreateZkSyncNaffleParams({\\n                naffleTokenInformation: _naffleTokenInformation,\\n                owner: msg.sender,\\n                naffleId: naffleId,\\n                paidTicketSpots: _paidTicketSpots,\\n                ticketPriceInWei: _ticketPriceInWei,\\n                endTime: _endTime,\\n                naffleType: _naffleType\\n            })\\n        );\\n\\n        txHash = zksync.requestL2Transaction{value: msg.value}(\\n            layout.zkSyncNaffleContractAddress,\\n            0,\\n            data,\\n            _l2MessageParams.l2GasLimit,\\n            _l2MessageParams.l2GasPerPubdataByteLimit,\\n            new bytes[](0),\\n            msg.sender\\n        );\\n\\n        layout.naffles[naffleId] = NaffleTypes.L1Naffle({\\n            naffleTokenInformation: _naffleTokenInformation,\\n            naffleId: naffleId,\\n            owner: msg.sender,\\n            winner: address(0),\\n            cancelled: false,\\n            txHash: txHash\\n        });\\n\\n        emit L1NaffleCreated(_naffleTokenInformation, naffleId, msg.sender, _paidTicketSpots, _ticketPriceInWei, _endTime, _naffleType);\\n    }\\n\\n    function _cancelFailedNaffle(\\n        uint256 _naffleId,\\n        uint256 _l2BlockNumber,\\n        uint256 _l2MessageIndex,\\n        uint16 _l2TxNumberInBlock,\\n        bytes32[] calldata _merkleProof\\n    ) internal {\\n        L1NaffleBaseStorage.Layout storage layout = L1NaffleBaseStorage.layout();\\n        NaffleTypes.L1Naffle storage naffle = layout.naffles[_naffleId];\\n\\n        require(msg.sender == naffle.owner);\\n\\n        IZkSync zksync = IZkSync(layout.zkSyncAddress);\\n        bool success = zksync.proveL1ToL2TransactionStatus(\\n            naffle.txHash,\\n            _l2BlockNumber,\\n            _l2MessageIndex,\\n            _l2TxNumberInBlock,\\n            _merkleProof,\\n            TxStatus.Failure\\n        );\\n\\n        require(success);\\n\\n        _cancelNaffle(_naffleId);\\n    }\\n\\n    /**\\n     * @notice Validates the collection signature.\\n     * @dev if the collection signature is invalid, an InvalidSignature error is thrown.\\n     * @param _naffleTokenInformation the naffle token information.\\n     * @param _collectionWhitelistParams the collection whitelist params.\\n     * @param _signatureSigner the signer of the collection signature.\\n     * @param _collectionWhitelistSignature the collection whitelist signature.\\n     * @param _domainName the domain name. \\n     * @param _domainSignature the domain signature.\\n     */\\n    function _validateCollectionSignature(\\n        NaffleTypes.NaffleTokenInformation memory _naffleTokenInformation,\\n        NaffleTypes.CollectionWhitelistParams memory _collectionWhitelistParams,\\n        address _signatureSigner,\\n        bytes32 _collectionWhitelistSignature,\\n        string memory _domainName,\\n        bytes32 _domainSignature\\n    ) internal pure {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                _domainSignature,\\n                keccak256(abi.encodePacked(_domainName))\\n            )\\n        );\\n\\n        bytes32 dataHash = keccak256(\\n            abi.encode(\\n                _collectionWhitelistSignature,\\n                _naffleTokenInformation.tokenAddress,\\n                _collectionWhitelistParams.expiresAt\\n            )\\n        );\\n        \\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                dataHash\\n            )\\n        );\\n\\n        address signer = ECDSA.recover(digest, _collectionWhitelistParams.signature);\\n\\n        if (signer != _signatureSigner) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /**\\n     * @notice set the winner of a naffle and transfer the price to that address.\\n     * @param _naffleId the id of the naffle.\\n     * @param _winner the address of the winner.\\n     */\\n    function _setWinnerAndTransferPrize(\\n        uint256 _naffleId,\\n        address _winner\\n    ) internal {\\n        L1NaffleBaseStorage.Layout storage layout = L1NaffleBaseStorage.layout();\\n        NaffleTypes.L1Naffle storage naffle = layout.naffles[_naffleId];\\n\\n        NaffleTypes.NaffleTokenInformation memory tokenInfo = naffle.naffleTokenInformation;\\n\\n        naffle.winner = _winner;\\n        if (tokenInfo.naffleTokenType == NaffleTypes.TokenContractType.ERC721) {\\n            IERC721(tokenInfo.tokenAddress).transferFrom(address(this), _winner, tokenInfo.nftId);\\n        } else if (tokenInfo.naffleTokenType == NaffleTypes.TokenContractType.ERC1155) {\\n            IERC1155(tokenInfo.tokenAddress).safeTransferFrom(address(this), _winner, tokenInfo.nftId, tokenInfo.amount, bytes(\\\"\\\"));\\n        } else {\\n            IERC20(tokenInfo.tokenAddress).safeTransfer(_winner, tokenInfo.amount);\\n        } \\n\\n        emit L1NaffleWinnerSet(_naffleId, _winner);\\n    }\\n\\n    /**\\n     * @notice consumes a message from L2. Stores that the message has been processed.\\n     * @param _l2BlockNumber the block number of the L2 block.\\n     * @param _index the index of the message in the L2 block.\\n     * @param _l2TxNumberInBlock the transaction number in the L2 block.\\n     * @param _messageHash the hashed message send by L2\\n     * @param _message the message that is consumed.\\n     * @param _proof the proof of the message.\\n     */\\n    function _consumeMessageFromL2(\\n        uint256 _l2BlockNumber,\\n        uint256 _index,\\n        uint16 _l2TxNumberInBlock,\\n        bytes32 _messageHash,\\n        bytes memory _message,\\n        bytes32[] memory _proof\\n    ) internal {\\n        L1NaffleBaseStorage.Layout storage layout = L1NaffleBaseStorage.layout();\\n        if (layout.isL2ToL1MessageProcessed[_l2BlockNumber][_index]) {\\n            revert MessageAlreadyProcessed();\\n        }\\n\\n        if (keccak256(_message) != _messageHash) {\\n            revert FailedMessageInclusion();\\n        }\\n\\n        IZkSync zksync = IZkSync(layout.zkSyncAddress);\\n\\n        L2Message memory l2Message = L2Message({\\n            sender: layout.zkSyncNaffleContractAddress,\\n            data: _message,\\n            txNumberInBlock: _l2TxNumberInBlock\\n        });\\n\\n        bool success = zksync.proveL2MessageInclusion(\\n            _l2BlockNumber,\\n            _index,\\n            l2Message,\\n            _proof\\n        );\\n        if (!success) {\\n            revert FailedMessageInclusion();\\n        }\\n\\n        layout.isL2ToL1MessageProcessed[_l2BlockNumber][_index] = true;\\n    }\\n\\n    /**\\n     * @notice cancels a naffle.\\n     * @param _naffleId the id of the naffle.\\n     */\\n    function _cancelNaffle(uint256 _naffleId) internal {\\n        L1NaffleBaseStorage.Layout storage layout = L1NaffleBaseStorage.layout();\\n        NaffleTypes.L1Naffle storage naffle = layout.naffles[_naffleId];\\n\\n        require(naffle.cancelled == false);\\n        naffle.cancelled = true;\\n\\n        NaffleTypes.NaffleTokenInformation memory tokenInfo = naffle.naffleTokenInformation;\\n\\n        if (tokenInfo.naffleTokenType == NaffleTypes.TokenContractType.ERC721) {\\n            IERC721(tokenInfo.tokenAddress).transferFrom(address(this), naffle.owner, tokenInfo.nftId);\\n        } else if (tokenInfo.naffleTokenType == NaffleTypes.TokenContractType.ERC1155) {\\n            IERC1155(tokenInfo.tokenAddress).safeTransferFrom(address(this), naffle.owner, tokenInfo.nftId, tokenInfo.amount, bytes(\\\"\\\"));\\n        } else {\\n            IERC20(tokenInfo.tokenAddress).safeTransferFrom(address(this), naffle.owner, tokenInfo.amount);\\n        } \\n\\n        emit L1NaffleCancelled(_naffleId);\\n    }\\n\\n    /**\\n     * @notice gets the admin role.\\n     * @return adminRole the admin role.\\n     */\\n    function _getAdminRole() internal pure returns (bytes32 adminRole) {\\n        adminRole = AccessControlStorage.DEFAULT_ADMIN_ROLE;\\n    }\\n\\n    /**\\n     * @notice gets the minimum naffle duration.\\n     * @return minimumNaffleDuration the minimum naffle duration.\\n     */\\n    function _getMinimumNaffleDuration() internal view returns (uint256 minimumNaffleDuration) {\\n        minimumNaffleDuration = L1NaffleBaseStorage.layout().minimumNaffleDuration;\\n    }\\n\\n    /**\\n     * @notice sets the minimum naffle duration.\\n     * @param _minimumNaffleDuration the minimum naffle duration.\\n     */\\n    function _setMinimumNaffleDuration(uint256 _minimumNaffleDuration) internal {\\n        L1NaffleBaseStorage.layout().minimumNaffleDuration = _minimumNaffleDuration;\\n    }\\n\\n    /**\\n     * @notice gets the minimum paid ticket spots.\\n     * @return minimumPaidTicketSpots the minimum paid ticket spots.\\n     */\\n    function _getMinimumPaidTicketSpots() internal view returns (uint256 minimumPaidTicketSpots) {\\n        minimumPaidTicketSpots = L1NaffleBaseStorage.layout().minimumPaidTicketSpots;\\n    }\\n\\n    /**\\n     * @notice sets the minimum paid ticket spots\\n     * @param _minimumPaidTicketSpots the minimum paid ticket spots.\\n     */\\n    function _setMinimumPaidTicketSpots(uint256 _minimumPaidTicketSpots) internal {\\n        L1NaffleBaseStorage.layout().minimumPaidTicketSpots = _minimumPaidTicketSpots;\\n    }\\n\\n    /**\\n     * @notice sets the zkSync naffle contract address.\\n     * @param _zkSyncNaffleContractAddress the zkSync naffle contract address.\\n     */\\n    function _setZkSyncNaffleContractAddress(address _zkSyncNaffleContractAddress) internal {\\n        L1NaffleBaseStorage.layout().zkSyncNaffleContractAddress = _zkSyncNaffleContractAddress;\\n    }\\n\\n    /**\\n     * @notice gets the zkSync naffle contract address.\\n     * @return zkSyncNaffleContractAddress the zkSync naffle contract address.\\n     */\\n    function _getZkSyncNaffleContractAddress() internal view returns (address zkSyncNaffleContractAddress) {\\n        zkSyncNaffleContractAddress = L1NaffleBaseStorage.layout().zkSyncNaffleContractAddress;\\n    }\\n\\n    /**\\n     * @notice sets the zkSync address.\\n     * @param _zkSyncAddress the zkSync address.\\n     */\\n    function _setZkSyncAddress(address _zkSyncAddress) internal {\\n        L1NaffleBaseStorage.layout().zkSyncAddress = _zkSyncAddress;\\n    }\\n\\n    /**\\n     * @notice gets the zkSync address.\\n     * @return zkSyncAddress the zkSync address.\\n     */\\n    function _getZkSyncAddress() internal view returns (address zkSyncAddress) {\\n        zkSyncAddress = L1NaffleBaseStorage.layout().zkSyncAddress;\\n    }\\n\\n    /**\\n     * @notice gets the founders key address.\\n     * @return foundersKeyAddress the founders key address.\\n     */\\n    function _getFoundersKeyAddress() internal view returns (address foundersKeyAddress) {\\n        foundersKeyAddress = L1NaffleBaseStorage.layout().foundersKeyAddress;\\n    }\\n\\n    /**\\n     * @notice sets the founders key address.\\n     * @param _foundersKeyAddress the founders key address.\\n     */\\n    function _setFoundersKeyAddress(address _foundersKeyAddress) internal {\\n        L1NaffleBaseStorage.layout().foundersKeyAddress = _foundersKeyAddress;\\n    }\\n\\n    /**\\n     * @notice sets the founders key placeholder address.\\n     * @param _foundersKeyPlaceholderAddress the founders key placeholder address.\\n     */\\n    function _setFoundersKeyPlaceholderAddress(address _foundersKeyPlaceholderAddress) internal {\\n        L1NaffleBaseStorage.layout().foundersKeyPlaceholderAddress = _foundersKeyPlaceholderAddress;\\n    }\\n\\n    /**\\n     * @notice gets the founders key placeholder address.\\n     * @return foundersKeyPlaceholderAddress the founders key placeholder address.\\n     */\\n    function _getFoundersKeyPlaceholderAddress() internal view returns (address foundersKeyPlaceholderAddress) {\\n        foundersKeyPlaceholderAddress = L1NaffleBaseStorage.layout().foundersKeyPlaceholderAddress;\\n    }\\n\\n    /**\\n     * @notice sets the signature signer address.\\n     * @param _signatureSignerAddress the signature signer address.\\n     */\\n    function _setSignatureSignerAddress(address _signatureSignerAddress) internal {\\n        L1NaffleBaseStorage.layout().signatureSigner = _signatureSignerAddress;\\n    }\\n\\n    /**\\n     * @notice gets the naffle by id.\\n     * @param _naffleId the id of the naffle.\\n     * @return naffle the naffle.\\n     */\\n    function _getNaffleById(uint256 _naffleId) internal view returns (NaffleTypes.L1Naffle memory naffle) {\\n        naffle = L1NaffleBaseStorage.layout().naffles[_naffleId];\\n    }\\n\\n    /**\\n     * @notice sets the collection signature\\n     * @param _collectionSignature the new collection signature.\\n     */\\n    function _setCollectionWhitelistSignature(bytes32 _collectionSignature) internal {\\n        L1NaffleBaseStorage.layout().collectionWhitelistSignature = _collectionSignature;\\n    }\\n\\n    /**\\n     * @notice gets the domain signature.\\n     * @param _domainSignature the domain signature.\\n     */\\n    function _setDomainSignature(bytes32 _domainSignature) internal {\\n        L1NaffleBaseStorage.layout().domainSignature = _domainSignature;\\n    }\\n\\n    /**\\n     * @notice gets the domain signature.\\n     * @param _domainName the domain signature.\\n     */\\n    function _setDomainName(string memory _domainName) internal {\\n        L1NaffleBaseStorage.layout().domainName = _domainName;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/naffle/ethereum/L1NaffleBaseStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../libraries/NaffleTypes.sol\\\";\\nimport \\\"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol\\\";\\n\\n\\n/**\\n *  @dev diamond storage management for L1Naffle* contracts\\n */\\nlibrary L1NaffleBaseStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"naffles.contracts.naffle.ethereum.L1NaffleBaseStorage\\\");\\n\\n    /**\\n     * @dev all storage variables for L1 Naffle contracts\\n     */\\n    struct Layout {\\n        address zkSyncAddress;\\n        address zkSyncNaffleContractAddress;\\n        address foundersKeyAddress;\\n        address foundersKeyPlaceholderAddress;\\n        uint256 numberOfNaffles;\\n        uint256 minimumNaffleDuration;\\n        uint256 minimumPaidTicketSpots;\\n        mapping(uint256 => NaffleTypes.L1Naffle) naffles;\\n        mapping(uint256 => mapping(uint256 => bool)) isL2ToL1MessageProcessed;\\n        address signatureSigner; \\n        bytes32 collectionWhitelistSignature;\\n        bytes32 domainSignature;\\n        string domainName;\\n    }\\n\\n    /**\\n     * @dev Returns the storage struct from the specified slot\\n     */\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/naffle/ethereum/L1NaffleDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@solidstate/contracts/access/access_control/AccessControlStorage.sol\\\";\\nimport \\\"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol\\\";\\nimport \\\"@solidstate/contracts/access/access_control/AccessControl.sol\\\";\\nimport \\\"./L1NaffleBaseInternal.sol\\\";\\n\\n/**\\n    @title L1 Naffle Diamond\\n    @dev diamond implementation contract for L1 Naffle\\n    @notice inherits from SolidStateDiamond, AccessControl, L1NaffleBaseInternal\\n */\\ncontract L1NaffleDiamond is SolidStateDiamond, AccessControl, L1NaffleBaseInternal {\\n    constructor(\\n        address _admin,\\n        uint256 _minimumNaffleDuration,\\n        uint256 _minimumPaidTicketSpots,\\n        address _zksyncContractAddress,\\n        address _foundersKeyContractAddress,\\n        address _foundersKeyPlaceholderAddress,\\n        string memory _domainName\\n    ) SolidStateDiamond() {\\n        _grantRole(AccessControlStorage.DEFAULT_ADMIN_ROLE, _admin);\\n        _setMinimumNaffleDuration(_minimumNaffleDuration);\\n        _setMinimumPaidTicketSpots(_minimumPaidTicketSpots);\\n        _setFoundersKeyAddress(_foundersKeyContractAddress);\\n        _setFoundersKeyPlaceholderAddress(_foundersKeyPlaceholderAddress);\\n        _setZkSyncAddress(_zksyncContractAddress);\\n\\n        _setSignatureSignerAddress(msg.sender);\\n        _setCollectionWhitelistSignature(keccak256(abi.encodePacked(\\\"CollectionWhitelist(address tokenAddress,uint256 expiresAt)\\\")));\\n        _setDomainSignature(keccak256(abi.encodePacked(\\\"EIP712Domain(string name)\\\")));\\n        _setDomainName(_domainName);\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/naffle/ethereum/IL1NaffleBaseInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../contracts/libraries/NaffleTypes.sol\\\";\\n\\n/**\\n * @title interface for L1NaffleBaseInternal\\n */\\ninterface IL1NaffleBaseInternal {\\n    /**\\n     * @notice thrown when the msg.sender is not allowed to call this message.\\n     */\\n    error NotAllowed();\\n\\n    /**\\n     * @notice thrown when invalid signature is provided\\n     */\\n    error InvalidSignature();\\n\\n    /**\\n     * @notice thrown when the end time provided to the naffle is not valid.\\n     * @param endTime provided end time.\\n     */\\n    error InvalidEndTime(uint256 endTime);\\n\\n    /**\\n     * @notice thrown when there are an invalid number of ticket spots provided.\\n     * @param spots ticket spots.\\n     */\\n    error InvalidPaidTicketSpots(uint256 spots);\\n\\n    /**\\n     * @notice thrown when the L2 message is already processed.\\n     */\\n    error MessageAlreadyProcessed();\\n\\n    /**\\n     * @notice thrown when the L2 message is invalid\\n     */\\n    error FailedMessageInclusion();\\n\\n    /**\\n     * @notice thrown when insufficient gas is forwarded for the create naffle call.\\n     */ \\n    error InsufficientL2GasForwardedForCreateNaffle();\\n\\n    /**\\n     * @notice thrown when the decoding of the message fails\\n    */\\n    error InvalidMessage();\\n\\n    /**\\n     * @notice emitted when a naffle is created.\\n     * @param naffleId id of the naffle.\\n     * @param owner address of the owner.\\n     * @param paidTicketSpots number of paid ticket spots.\\n     * @param ticketPriceInWei price of the ticket in wei.\\n     * @param endTime end time of the naffle.\\n     * @param naffleType type of the naffle.\\n     */\\n    event L1NaffleCreated(\\n        NaffleTypes.NaffleTokenInformation naffleTokenInformation,\\n        uint256 naffleId,\\n        address indexed owner,\\n        uint256 paidTicketSpots,\\n        uint256 ticketPriceInWei,\\n        uint256 endTime,\\n        NaffleTypes.NaffleType naffleType\\n    );\\n\\n    /**\\n     * @notice emitted when winner is set on the naffle.\\n     * @param naffleId id of the naffle.\\n     * @param winner address of the winner.\\n     */\\n    event L1NaffleWinnerSet(\\n        uint256 indexed naffleId,\\n        address indexed winner\\n    );\\n\\n    /**\\n     * @notice emitted when a naffle is cancelled.\\n     * @param naffleId id of the naffle.\\n     */\\n    event L1NaffleCancelled(\\n        uint256 naffleId\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumNaffleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPaidTicketSpots\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_zksyncContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundersKeyContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundersKeyPlaceholderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_domainName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DiamondWritable__InvalidInitializationParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__RemoveTargetNotZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__ReplaceTargetIsIdentical\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorIsImmutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__TargetHasNoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Base__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedMessageInclusion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientL2GasForwardedForCreateNaffle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"InvalidEndTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spots\",\"type\":\"uint256\"}],\"name\":\"InvalidPaidTicketSpots\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proxy__ImplementationIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeOwnable__NotNomineeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"naffleId\",\"type\":\"uint256\"}],\"name\":\"L1NaffleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum NaffleTypes.TokenContractType\",\"name\":\"naffleTokenType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct NaffleTypes.NaffleTokenInformation\",\"name\":\"naffleTokenInformation\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"naffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidTicketSpots\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketPriceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum NaffleTypes.NaffleType\",\"name\":\"naffleType\",\"type\":\"uint8\"}],\"name\":\"L1NaffleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"naffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"L1NaffleWinnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondReadable.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "L1NaffleDiamond", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000269dcf7ef91d7d30ae037f879b9314953bf03d7f0000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000032400084c286cf3e17e7b677ea9583e60a00032400000000000000000000000002eab30603dad3e17d0bda0f14a683f51475cd990000000000000000000000001eddcb3a7e703f67495e9814b9518a1828ea0b7900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000074e6166666c657300000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}