{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/IncentivizingLiquidityAMO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.19;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ================== IncentivizingLiquidityAMO =======================\\n// ====================================================================\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author(s)\\n// Amirnader Aghayeghazvini: https://github.com/amirnader-ghazvini\\n\\n// Reviewer(s) / Contributor(s)\\n// Dennis: https://github.com/denett\\n\\nimport \\\"./interfaces/IFrax.sol\\\";\\nimport \\\"./interfaces/IFxs.sol\\\";\\nimport \\\"./interfaces/IIncentivizationHandler.sol\\\";\\nimport \\\"./Uniswap/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract IncentivizingLiquidityAmo is Ownable {\\n    /* ============================================= STATE VARIABLES ==================================================== */\\n\\n    // Addresses Config\\n    address public operatorAddress;\\n    address public targetTokenAddress; // Token that AMO incentivize\\n    address public incentiveTokenAddress; // Token that AMO uses as an incentive\\n    \\n\\n    // Pools related\\n    address[] public poolArray;\\n    struct LiquidityPool {\\n        // Pool Addresses\\n        address poolAddress; // Where the actual tokens are in the pool\\n        address incentivePoolAddress; // Contract that handle incentive distribution e.g. Bribe contract\\n        address incentivizationHandlerAddress; // Incentive handler contract e.g. votemarket handler\\n        address gaugeAddress; // Gauge address\\n        uint256 incentivizationId; // Votemarket Bounty ID\\n        bool isPaused;\\n        uint lastIncentivizationTimestamp; // timestamp of last time this pool was incentivized\\n        uint lastIncentivizationAmount; // Max amount of incentives\\n    }\\n    mapping(address => bool) public poolInitialized;\\n    mapping(address => LiquidityPool) private poolInfo;\\n\\n    // Constant Incentivization can be set (e.g. DAO Deal)\\n    mapping(address => bool) public poolHasFixedIncent; \\n    mapping(address => uint256) public poolFixedIncentAmount; // Constant Incentivization amount\\n\\n    // Configurations\\n    uint256 public minTvl; // Min TVL of pool for being considered for incentivization\\n\\n    /* =============================================== CONSTRUCTOR ====================================================== */\\n\\n    /// @notice constructor\\n    /// @param _operatorAddress Address of AMO Operator\\n    /// @param _targetTokenAddress Address of Token that AMO incentivize (e.g. crvFRAX)\\n    /// @param _incentiveTokenAddress Address of Token that AMO uses as an incentive (e.g. FXS)\\n    /// @param _minTvl Min TVL of pool for being considered for incentivization\\n    constructor(\\n        address _operatorAddress,\\n        address _targetTokenAddress,\\n        address _incentiveTokenAddress,\\n        uint256 _minTvl\\n    ) Ownable() {\\n        operatorAddress = _operatorAddress;\\n        targetTokenAddress = _targetTokenAddress;\\n        incentiveTokenAddress = _incentiveTokenAddress;\\n        minTvl = _minTvl;\\n        emit StartAMO(_operatorAddress, _targetTokenAddress, _incentiveTokenAddress);\\n    }\\n\\n    /* ================================================ MODIFIERS ======================================================= */\\n\\n    modifier onlyByOwnerOperator() {\\n        require(msg.sender == operatorAddress || msg.sender == owner(), \\\"Not owner or operator\\\");\\n        _;\\n    }\\n\\n    modifier activePool(address _poolAddress) {\\n        require(poolInitialized[_poolAddress] && !poolInfo[_poolAddress].isPaused, \\\"Pool is not active\\\");\\n        require(showPoolTvl(_poolAddress) > minTvl, \\\"Pool is small\\\");\\n        _;\\n    }\\n\\n    /* ================================================= EVENTS ========================================================= */\\n\\n    /// @notice The ```StartAMO``` event fires when the AMO deploys\\n    /// @param _operatorAddress Address of operator\\n    /// @param _targetTokenAddress Address of Token that AMO incentivize (e.g. crvFRAX)\\n    /// @param _incentiveTokenAddress Address of Token that AMO uses as an incentive (e.g. FXS)\\n    event StartAMO(address _operatorAddress, address _targetTokenAddress, address _incentiveTokenAddress);\\n\\n    /// @notice The ```SetOperator``` event fires when the operatorAddress is set\\n    /// @param _oldAddress The original address\\n    /// @param _newAddress The new address\\n    event SetOperator(address _oldAddress, address _newAddress);\\n\\n    /// @notice The ```AddOrSetPool``` event fires when a pool is added or modified\\n    /// @param _poolAddress The pool address\\n    /// @param _gaugeAddress The gauge address\\n    /// @param _incentivePoolAddress Contract that handle incentive distribution e.g. Bribe contract\\n    /// @param _incentivizationHandlerAddress Incentive handler contract e.g. votemarket handler\\n    /// @param _indexId indexID in Votium or Votemarket\\n    event AddOrSetPool(\\n        address _poolAddress,\\n        address _gaugeAddress,\\n        address _incentivePoolAddress,\\n        address _incentivizationHandlerAddress,\\n        uint256 _indexId\\n    );\\n\\n    /// @notice The ```ChangePauseStatusPool``` event fires when a pool is added or modified\\n    /// @param _poolAddress The pool address\\n    /// @param _isPaused Pool Pause Status\\n    event ChangePauseStatusPool(address _poolAddress, bool _isPaused);\\n\\n    /// @notice The ```SetPoolFixedIncent``` event fires when a pool's constant incentivization is updated \\n    /// @param _poolAddress The pool address\\n    /// @param _hasFixedIncent Pool Deal Status\\n    /// @param _amountPerCycle Pool Deal Amount\\n    event SetPoolFixedIncent(address _poolAddress, bool _hasFixedIncent, uint256 _amountPerCycle);\\n\\n    /// @notice The ```IncentivizePool``` event fires when a deposit happens to a pair\\n    /// @param _poolAddress The pool address\\n    /// @param _amount Incentive amount\\n    event IncentivizePool(address _poolAddress, uint256 _amount);\\n\\n    /* ================================================== VIEWS ========================================================= */\\n\\n    /// @notice Show TVL of targeted token in all active pools\\n    /// @return TVL of targeted token in all active pools\\n    function showActivePoolsTvl() public view returns (uint256) {\\n        uint tvl = 0;\\n        for (uint i = 0; i < poolArray.length; i++) {\\n            if (!poolInfo[poolArray[i]].isPaused) {\\n                tvl += showPoolTvl(poolArray[i]);\\n            }\\n        }\\n        return tvl;\\n    }\\n\\n    /// @notice Show TVL of targeted token in liquidity pool\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @return TVL of targeted token in liquidity pool\\n    function showPoolTvl(address _poolAddress) public view returns (uint256) {\\n        ERC20 targetToken = ERC20(targetTokenAddress);\\n        return targetToken.balanceOf(_poolAddress);\\n    }\\n\\n    /// @notice Show Pool parameters\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @return _gaugeAddress Gauge Contract Address\\n    /// @return _incentivePoolAddress Contract that handle incentive distribution e.g. Bribe contract\\n    /// @return _incentivizationHandlerAddress Incentive handler contract e.g. votemarket handler\\n    /// @return _incentivizationId Pool General Incentivization ID (e.g. in Votemarket it is BountyID)\\n    function showPoolInfo(\\n        address _poolAddress\\n    )\\n        external\\n        view\\n        returns (\\n            address _gaugeAddress,\\n            address _incentivePoolAddress,\\n            address _incentivizationHandlerAddress,\\n            uint256 _incentivizationId\\n        )\\n    {\\n        _incentivePoolAddress = poolInfo[_poolAddress].incentivePoolAddress;\\n        _incentivizationHandlerAddress = poolInfo[_poolAddress].incentivizationHandlerAddress;\\n        _gaugeAddress = poolInfo[_poolAddress].gaugeAddress;\\n        _incentivizationId = poolInfo[_poolAddress].incentivizationId;\\n    }\\n\\n    /// @notice Show Pool status\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @return _isInitialized Pool registered or not\\n    /// @return _lastIncentivizationTimestamp timestamp of last time this pool was incentivized\\n    /// @return _lastIncentivizationAmount last cycle incentive amount\\n    /// @return _isPaused puased or not\\n    function showPoolStatus(\\n        address _poolAddress\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isInitialized,\\n            uint _lastIncentivizationTimestamp,\\n            uint _lastIncentivizationAmount,\\n            bool _isPaused\\n        )\\n    {\\n        _isInitialized = poolInitialized[_poolAddress];\\n        _lastIncentivizationTimestamp = poolInfo[_poolAddress].lastIncentivizationTimestamp;\\n        _lastIncentivizationAmount = poolInfo[_poolAddress].lastIncentivizationAmount;\\n        _isPaused = poolInfo[_poolAddress].isPaused;\\n    }\\n\\n    /* ============================================== INCENTIVIZATION FUNCTIONS ==================================================== */\\n\\n    /// @notice Function to deposit incentives to one pool\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @param _amount Amount of incentives to be deposited\\n    function incentivizePoolByAmount(\\n        address _poolAddress,\\n        uint256 _amount\\n    ) public activePool(_poolAddress) onlyByOwnerOperator {\\n        ERC20 _incentiveToken = ERC20(incentiveTokenAddress);\\n        _incentiveToken.approve(poolInfo[_poolAddress].incentivePoolAddress, _amount);\\n\\n        (bool success, ) = poolInfo[_poolAddress].incentivizationHandlerAddress.delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"incentivizePool(address,address,address,address,uint256,uint256)\\\",\\n                _poolAddress,\\n                poolInfo[_poolAddress].gaugeAddress,\\n                poolInfo[_poolAddress].incentivePoolAddress,\\n                incentiveTokenAddress,\\n                poolInfo[_poolAddress].incentivizationId,\\n                _amount\\n            )\\n        );\\n        require(success, \\\"delegatecall failed\\\");\\n\\n        poolInfo[_poolAddress].lastIncentivizationTimestamp = block.timestamp;\\n        poolInfo[_poolAddress].lastIncentivizationAmount = _amount;\\n        emit IncentivizePool(_poolAddress, _amount);\\n    }\\n\\n    /// @notice Function to deposit incentives to one pool (based on ratio)\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @param _totalIncentAmount Total budget for incentivization\\n    /// @param _totalTvl Total active pools TVL\\n    function incentivizePoolByTvl(\\n        address _poolAddress,\\n        uint256 _totalIncentAmount,\\n        uint256 _totalTvl\\n    ) public onlyByOwnerOperator {\\n        uint256 _poolTvl = showPoolTvl(_poolAddress);\\n        uint256 _amount = (_totalIncentAmount * _poolTvl) / _totalTvl;\\n        incentivizePoolByAmount(_poolAddress, _amount);\\n    }\\n\\n    /// @notice Function to deposit incentives to one pool (based on budget per unit)\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @param _unitIncentAmount Incentive per single unit of target Token\\n    function incentivizePoolByUnitBudget(\\n        address _poolAddress,\\n        uint256 _unitIncentAmount\\n    ) public onlyByOwnerOperator {\\n        uint256 _poolTvl = showPoolTvl(_poolAddress);\\n        uint256 _amount = (_unitIncentAmount * _poolTvl) / (10 ** ERC20(targetTokenAddress).decimals());\\n        incentivizePoolByAmount(_poolAddress, _amount);\\n    }\\n\\n    /// @notice Function to deposit incentives to one pool (based on Constant Incentivization)\\n    /// @param _poolAddress Address of liquidity pool\\n    function incentivizePoolByFixedIncent(\\n        address _poolAddress\\n    ) public onlyByOwnerOperator {\\n        if (poolHasFixedIncent[_poolAddress]){\\n            uint256 _amount = poolFixedIncentAmount[_poolAddress];\\n            incentivizePoolByAmount(_poolAddress, _amount);\\n        }\\n    }\\n\\n    /// Functions For depositing incentives to all active pools\\n\\n    /// @notice Function to deposit incentives to all active pools (based on TVL ratio)\\n    /// @param _totalIncentAmount Total Incentive budget\\n    /// @param _FixedIncent Incentivize considering FixedIncent\\n    function incentivizeAllPoolsByTvl(uint256 _totalIncentAmount, bool _FixedIncent) public onlyByOwnerOperator {\\n        uint256 _totalTvl = showActivePoolsTvl();\\n        for (uint i = 0; i < poolArray.length; i++) {\\n            if (_FixedIncent && poolHasFixedIncent[poolArray[i]]) {\\n                incentivizePoolByFixedIncent(poolArray[i]);\\n            } else if (!poolInfo[poolArray[i]].isPaused && showPoolTvl(poolArray[i]) > minTvl) {\\n                incentivizePoolByTvl(poolArray[i], _totalIncentAmount, _totalTvl);\\n            }\\n        }\\n    }\\n    \\n    /// @notice Function to deposit incentives to all active pools (based on budget per unit of target Token)\\n    /// @param _unitIncentAmount Incentive per single unit of target Token\\n    /// @param _FixedIncent Incentivize considering FixedIncent\\n    function incentivizeAllPoolsByUnitBudget(uint256 _unitIncentAmount, bool _FixedIncent) public onlyByOwnerOperator {\\n        for (uint i = 0; i < poolArray.length; i++) {\\n            if (_FixedIncent && poolHasFixedIncent[poolArray[i]]) {\\n                incentivizePoolByFixedIncent(poolArray[i]);\\n            } else if (!poolInfo[poolArray[i]].isPaused && showPoolTvl(poolArray[i]) > minTvl) {\\n                incentivizePoolByUnitBudget(poolArray[i], _unitIncentAmount);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add/Set liquidity pool\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @param _incentivePoolAddress Contract that handle incentive distribution e.g. Bribe contract\\n    /// @param _incentivizationHandlerAddress Incentive handler contract e.g. votemarket handler\\n    /// @param _gaugeAddress Address of liquidity pool gauge\\n    /// @param _incentivizationId Pool General Incentivization ID (e.g. in Votemarket it is BountyID)\\n    function addOrSetPool(\\n        address _poolAddress,\\n        address _incentivePoolAddress,\\n        address _incentivizationHandlerAddress,\\n        address _gaugeAddress,\\n        uint256 _incentivizationId\\n    ) external onlyByOwnerOperator {\\n        if (poolInitialized[_poolAddress]) {\\n            poolInfo[_poolAddress].incentivePoolAddress = _incentivePoolAddress;\\n            poolInfo[_poolAddress].incentivizationHandlerAddress = _incentivizationHandlerAddress;\\n            poolInfo[_poolAddress].gaugeAddress = _gaugeAddress;\\n            poolInfo[_poolAddress].incentivizationId = _incentivizationId;\\n        } else {\\n            poolInitialized[_poolAddress] = true;\\n            poolArray.push(_poolAddress);\\n            poolInfo[_poolAddress] = LiquidityPool({\\n                poolAddress: _poolAddress,\\n                incentivePoolAddress: _incentivePoolAddress,\\n                incentivizationHandlerAddress: _incentivizationHandlerAddress,\\n                gaugeAddress: _gaugeAddress,\\n                lastIncentivizationTimestamp: 0,\\n                lastIncentivizationAmount: 0,\\n                isPaused: false,\\n                incentivizationId: _incentivizationId\\n            });\\n        }\\n\\n        emit AddOrSetPool(\\n            _poolAddress,\\n            _gaugeAddress,\\n            _incentivePoolAddress,\\n            _incentivizationHandlerAddress,\\n            _incentivizationId\\n        );\\n    }\\n\\n    /// @notice Pause/Unpause liquidity pool\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @param _isPaused bool\\n    function pausePool(address _poolAddress, bool _isPaused) external onlyByOwnerOperator {\\n        if (poolInitialized[_poolAddress]) {\\n            poolInfo[_poolAddress].isPaused = _isPaused;\\n            emit ChangePauseStatusPool(_poolAddress, _isPaused);\\n        }\\n    }\\n\\n    /// @notice Add/Change/Remove Constant Incentivization can be set (e.g. DAO Deal)\\n    /// @param _poolAddress Address of liquidity pool\\n    /// @param _hasFixedIncent bool\\n    /// @param _amountPerCycle Amount of constant incentives\\n    function setFixedIncent(address _poolAddress, bool _hasFixedIncent, uint256 _amountPerCycle) external onlyByOwnerOperator {\\n        if (poolInitialized[_poolAddress]) {\\n            poolHasFixedIncent[_poolAddress] = _hasFixedIncent;\\n            poolFixedIncentAmount[_poolAddress] = _amountPerCycle;\\n            emit SetPoolFixedIncent(_poolAddress, _hasFixedIncent, _amountPerCycle);\\n        }\\n    }\\n\\n    /* ====================================== RESTRICTED GOVERNANCE FUNCTIONS =========================================== */\\n\\n    /// @notice Change the Operator address\\n    /// @param _newOperatorAddress Operator address\\n    function setOperatorAddress(address _newOperatorAddress) external onlyOwner {\\n        emit SetOperator(operatorAddress, _newOperatorAddress);\\n        operatorAddress = _newOperatorAddress;\\n    }\\n\\n    /// @notice Change the Min TVL for incentivization\\n    /// @param _minTvl Min TVL of pool for being considered for incentivization\\n    function setMinTvl(uint256 _minTvl) external onlyOwner {\\n        minTvl = _minTvl;\\n    }\\n\\n    /// @notice Recover ERC20 tokens\\n    /// @param tokenAddress address of ERC20 token\\n    /// @param tokenAmount amount to be withdrawn\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        // Can only be triggered by owner\\n        TransferHelper.safeTransfer(address(tokenAddress), msg.sender, tokenAmount);\\n    }\\n\\n    // Generic proxy\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOwner returns (bool, bytes memory) {\\n        (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n        return (success, result);\\n    }\\n}\"\r\n    },\r\n    \"src/contracts/interfaces/IFrax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ninterface IFrax {\\n  function COLLATERAL_RATIO_PAUSER() external view returns (bytes32);\\n  function DEFAULT_ADMIN_ADDRESS() external view returns (address);\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n  function addPool(address pool_address ) external;\\n  function allowance(address owner, address spender ) external view returns (uint256);\\n  function approve(address spender, uint256 amount ) external returns (bool);\\n  function balanceOf(address account ) external view returns (uint256);\\n  function burn(uint256 amount ) external;\\n  function burnFrom(address account, uint256 amount ) external;\\n  function collateral_ratio_paused() external view returns (bool);\\n  function controller_address() external view returns (address);\\n  function creator_address() external view returns (address);\\n  function decimals() external view returns (uint8);\\n  function decreaseAllowance(address spender, uint256 subtractedValue ) external returns (bool);\\n  function eth_usd_consumer_address() external view returns (address);\\n  function eth_usd_price() external view returns (uint256);\\n  function frax_eth_oracle_address() external view returns (address);\\n  function frax_info() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\\n  function frax_pools(address ) external view returns (bool);\\n  function frax_pools_array(uint256 ) external view returns (address);\\n  function frax_price() external view returns (uint256);\\n  function frax_step() external view returns (uint256);\\n  function fxs_address() external view returns (address);\\n  function fxs_eth_oracle_address() external view returns (address);\\n  function fxs_price() external view returns (uint256);\\n  function genesis_supply() external view returns (uint256);\\n  function getRoleAdmin(bytes32 role ) external view returns (bytes32);\\n  function getRoleMember(bytes32 role, uint256 index ) external view returns (address);\\n  function getRoleMemberCount(bytes32 role ) external view returns (uint256);\\n  function globalCollateralValue() external view returns (uint256);\\n  function global_collateral_ratio() external view returns (uint256);\\n  function grantRole(bytes32 role, address account ) external;\\n  function hasRole(bytes32 role, address account ) external view returns (bool);\\n  function increaseAllowance(address spender, uint256 addedValue ) external returns (bool);\\n  function last_call_time() external view returns (uint256);\\n  function minting_fee() external view returns (uint256);\\n  function name() external view returns (string memory);\\n  function owner_address() external view returns (address);\\n  function pool_burn_from(address b_address, uint256 b_amount ) external;\\n  function pool_mint(address m_address, uint256 m_amount ) external;\\n  function price_band() external view returns (uint256);\\n  function price_target() external view returns (uint256);\\n  function redemption_fee() external view returns (uint256);\\n  function refreshCollateralRatio() external;\\n  function refresh_cooldown() external view returns (uint256);\\n  function removePool(address pool_address ) external;\\n  function renounceRole(bytes32 role, address account ) external;\\n  function revokeRole(bytes32 role, address account ) external;\\n  function setController(address _controller_address ) external;\\n  function setETHUSDOracle(address _eth_usd_consumer_address ) external;\\n  function setFRAXEthOracle(address _frax_oracle_addr, address _weth_address ) external;\\n  function setFXSAddress(address _fxs_address ) external;\\n  function setFXSEthOracle(address _fxs_oracle_addr, address _weth_address ) external;\\n  function setFraxStep(uint256 _new_step ) external;\\n  function setMintingFee(uint256 min_fee ) external;\\n  function setOwner(address _owner_address ) external;\\n  function setPriceBand(uint256 _price_band ) external;\\n  function setPriceTarget(uint256 _new_price_target ) external;\\n  function setRedemptionFee(uint256 red_fee ) external;\\n  function setRefreshCooldown(uint256 _new_cooldown ) external;\\n  function setTimelock(address new_timelock ) external;\\n  function symbol() external view returns (string memory);\\n  function timelock_address() external view returns (address);\\n  function toggleCollateralRatio() external;\\n  function totalSupply() external view returns (uint256);\\n  function transfer(address recipient, uint256 amount ) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\\n  function weth_address() external view returns (address);\\n}\"\r\n    },\r\n    \"src/contracts/interfaces/IFxs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ninterface IFxs {\\n  function DEFAULT_ADMIN_ROLE() external view returns(bytes32);\\n  function FRAXStablecoinAdd() external view returns(address);\\n  function FXS_DAO_min() external view returns(uint256);\\n  function allowance(address owner, address spender) external view returns(uint256);\\n  function approve(address spender, uint256 amount) external returns(bool);\\n  function balanceOf(address account) external view returns(uint256);\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function checkpoints(address, uint32) external view returns(uint32 fromBlock, uint96 votes);\\n  function decimals() external view returns(uint8);\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns(bool);\\n  function genesis_supply() external view returns(uint256);\\n  function getCurrentVotes(address account) external view returns(uint96);\\n  function getPriorVotes(address account, uint256 blockNumber) external view returns(uint96);\\n  function getRoleAdmin(bytes32 role) external view returns(bytes32);\\n  function getRoleMember(bytes32 role, uint256 index) external view returns(address);\\n  function getRoleMemberCount(bytes32 role) external view returns(uint256);\\n  function grantRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns(bool);\\n  function increaseAllowance(address spender, uint256 addedValue) external returns(bool);\\n  function mint(address to, uint256 amount) external;\\n  function name() external view returns(string memory);\\n  function numCheckpoints(address) external view returns(uint32);\\n  function oracle_address() external view returns(address);\\n  function owner_address() external view returns(address);\\n  function pool_burn_from(address b_address, uint256 b_amount) external;\\n  function pool_mint(address m_address, uint256 m_amount) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function setFRAXAddress(address frax_contract_address) external;\\n  function setFXSMinDAO(uint256 min_FXS) external;\\n  function setOracle(address new_oracle) external;\\n  function setOwner(address _owner_address) external;\\n  function setTimelock(address new_timelock) external;\\n  function symbol() external view returns(string memory);\\n  function timelock_address() external view returns(address);\\n  function toggleVotes() external;\\n  function totalSupply() external view returns(uint256);\\n  function trackingVotes() external view returns(bool);\\n  function transfer(address recipient, uint256 amount) external returns(bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\\n}\"\r\n    },\r\n    \"src/contracts/interfaces/IIncentivizationHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ninterface IIncentivizationHandler {\\n  function incentivizePool(\\n    address poolAddress, \\n    address gaugeAddress,\\n    address incentivePoolAdderss, \\n    address incentiveTokenAddress,\\n    uint256 indexId, \\n    uint256 amount) external;\\n}\"\r\n    },\r\n    \"src/contracts/Uniswap/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=node_modules/ds-test/src/\",\r\n      \"forge-std/=node_modules/forge-std/src/\",\r\n      \"frax-std/=node_modules/frax-standard-solidity/src/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"frax-standard-solidity/=node_modules/frax-standard-solidity/\",\r\n      \"solidity-bytes-utils/=node_modules/solidity-bytes-utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 2000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incentiveTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTvl\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gaugeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_incentivePoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_incentivizationHandlerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_indexId\",\"type\":\"uint256\"}],\"name\":\"AddOrSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"ChangePauseStatusPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"IncentivizePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_hasFixedIncent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountPerCycle\",\"type\":\"uint256\"}],\"name\":\"SetPoolFixedIncent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_targetTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_incentiveTokenAddress\",\"type\":\"address\"}],\"name\":\"StartAMO\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incentivePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incentivizationHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incentivizationId\",\"type\":\"uint256\"}],\"name\":\"addOrSetPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalIncentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_FixedIncent\",\"type\":\"bool\"}],\"name\":\"incentivizeAllPoolsByTvl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unitIncentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_FixedIncent\",\"type\":\"bool\"}],\"name\":\"incentivizeAllPoolsByUnitBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incentivizePoolByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"incentivizePoolByFixedIncent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalIncentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTvl\",\"type\":\"uint256\"}],\"name\":\"incentivizePoolByTvl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unitIncentAmount\",\"type\":\"uint256\"}],\"name\":\"incentivizePoolByUnitBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolFixedIncentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolHasFixedIncent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_hasFixedIncent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerCycle\",\"type\":\"uint256\"}],\"name\":\"setFixedIncent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTvl\",\"type\":\"uint256\"}],\"name\":\"setMinTvl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showActivePoolsTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"showPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_gaugeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incentivePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incentivizationHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incentivizationId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"showPoolStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isInitialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncentivizationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastIncentivizationAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"showPoolTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IncentivizingLiquidityAmo", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "2000", "ConstructorArguments": "0000000000000000000000006e74053a3798e0fc9a9775f7995316b27f21c4d20000000000000000000000005e8422345238f34275888049021821e8e08caa1f0000000000000000000000003432b6a60d23ca0dfca7761b7ab56459d9c964d00000000000000000000000000000000000000000000000004563918244f40000", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}