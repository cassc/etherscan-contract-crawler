{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/q/Account.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {Errors} from \\\"src/libraries/Errors.sol\\\";\\nimport {IAccount} from \\\"src/q/interfaces/IAccount.sol\\\";\\nimport {IOperator} from \\\"src/storage/interfaces/IOperator.sol\\\";\\n\\n/// @title Account\\n/// @notice Contract which is cloned and deployed for every `trader` interacting with STFX or OZO\\ncontract Account is IAccount {\\n    /*//////////////////////////////////////////////////////////////\\n                        STATE VARIABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address private immutable OPERATOR;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _operator) {\\n        OPERATOR = _operator;\\n    }\\n\\n    receive() external payable {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        EXTERNAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to execute trades logic\\n    /// @dev can only be called by a plugin\\n    /// @param adapter address of the contract to execute logic\\n    /// @param data calldata of the function to execute logic\\n    function execute(address adapter, bytes calldata data, uint256 ethToSend) external payable returns (bytes memory) {\\n        bool isPlugin = IOperator(OPERATOR).getPlugin(msg.sender);\\n        if (!isPlugin) revert Errors.NoAccess();\\n        (bool success, bytes memory returnData) = adapter.call{value: ethToSend}(data);\\n        if (!success) revert Errors.CallFailed(returnData);\\n        return returnData;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary Errors {\\n    // Zero Errors\\n    error ZeroAmount();\\n    error ZeroAddress();\\n    error ZeroTotalRaised();\\n    error ZeroClaimableAmount();\\n\\n    // Modifier Errors\\n    error NotOwner();\\n    error NotAdmin();\\n    error CallerNotVault();\\n    error CallerNotTrade();\\n    error CallerNotVaultOwner();\\n    error CallerNotGenerate();\\n    error NoAccess();\\n    error NotPlugin();\\n\\n    // State Errors\\n    error BelowMinFundraisingPeriod();\\n    error AboveMaxFundraisingPeriod();\\n    error BelowMinLeverage();\\n    error AboveMaxLeverage();\\n    error BelowMinEndTime();\\n    error TradeTokenNotApplicable();\\n\\n    // STV errors\\n    error StvDoesNotExist();\\n    error AlreadyOpened();\\n    error MoreThanTotalRaised();\\n    error MoreThanTotalReceived();\\n    error StvNotOpen();\\n    error StvNotClose();\\n    error ClaimNotApplicable();\\n    error StvStatusMismatch();\\n\\n    // General Errors\\n    error BalanceLessThanAmount();\\n    error FundraisingPeriodEnded();\\n    error TotalRaisedMoreThanCapacity();\\n    error StillFundraising();\\n    error CommandMisMatch();\\n    error TradeCommandMisMatch();\\n    error NotInitialised();\\n    error Initialised();\\n    error LengthMismatch();\\n    error TransferFailed();\\n    error DelegateCallFailed();\\n    error CallFailed(bytes);\\n    error AccountAlreadyExists();\\n    error SwapFailed();\\n    error ExchangeDataMismatch();\\n    error AccountNotExists();\\n    error InputMismatch();\\n    error AboveMaxDistributeIndex();\\n    error BelowMinStvDepositAmount();\\n\\n    // Protocol specific errors\\n    error GmxFeesMisMatch();\\n    error UpdateOrderRequestMisMatch();\\n    error CancelOrderRequestMisMatch();\\n\\n    // Subscriptions\\n    error NotASubscriber();\\n    error AlreadySubscribed();\\n    error MoreThanLimit();\\n}\\n\"\r\n    },\r\n    \"src/q/interfaces/IAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IAccount {\\n    function execute(address adapter, bytes calldata data, uint256 ethToSend)\\n        external\\n        payable\\n        returns (bytes memory returnData);\\n}\\n\"\r\n    },\r\n    \"src/storage/interfaces/IOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface IOperator {\\n    function getMaxDistributeIndex() external view returns (uint256);\\n    function getAddress(string calldata adapter) external view returns (address);\\n    function getAddresses(string[] calldata adapters) external view returns (address[] memory);\\n    function getTraderAccount(address trader) external view returns (address);\\n    function getPlugin(address plugin) external view returns (bool);\\n    function getPlugins(address[] calldata plugins) external view returns (bool[] memory);\\n    function setAddress(string calldata adapter, address addr) external;\\n    function setAddresses(string[] calldata adapters, address[] calldata addresses) external;\\n    function setPlugin(address plugin, bool isPlugin) external;\\n    function setPlugins(address[] calldata plugins, bool[] calldata isPlugin) external;\\n    function setTraderAccount(address trader, address account) external;\\n    function getAllSubscribers(address manager) external view returns (address[] memory);\\n    function getIsSubscriber(address manager, address subscriber) external view returns (bool);\\n    function getSubscriptionAmount(address manager, address subscriber) external view returns (uint96);\\n    function getTotalSubscribedAmountPerManager(address manager) external view returns (uint96);\\n    function setSubscribe(address manager, address subscriber, uint96 maxLimit) external;\\n    function setUnsubscribe(address manager, address subscriber) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@synthetix/=src/interfaces/synthetix/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/Generate.sol\": {\r\n        \"Generate\": \"0x74e0ca6e1ecfb462a80f3b7ab6840013ee32c1c5\"\r\n      },\r\n      \"src/SpotTrade/SpotTrade.sol\": {\r\n        \"SpotTrade\": \"0x019dfb87e218a07091c83cec604cb2d48fbdf194\"\r\n      },\r\n      \"src/Trade.sol\": {\r\n        \"Trade\": \"0x16766913fae839da226a669c76f04b2b5e2380a0\"\r\n      },\r\n      \"src/libraries/BytesCheck.sol\": {\r\n        \"BytesCheck\": \"0x3f3a5da6dbb99dc879a8ed2ec26c831da962231f\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"ethToSend\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Account", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ae58861e6d3d47972953dcae37c87d842683ccc", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}