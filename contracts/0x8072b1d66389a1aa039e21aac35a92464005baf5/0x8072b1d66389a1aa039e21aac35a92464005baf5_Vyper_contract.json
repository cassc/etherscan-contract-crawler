{"SourceCode": "# @version 0.3.3\r\n\"\"\"\r\n@title Yearn Token Vault\r\n@license GNU AGPLv3\r\n@author yearn.finance\r\n@notice\r\n    Yearn Token Vault. Holds an underlying token, and allows users to interact\r\n    with the Yearn ecosystem through Strategies connected to the Vault.\r\n    Vaults are not limited to a single Strategy, they can have as many Strategies\r\n    as can be designed (however the withdrawal queue is capped at 20.)\r\n\r\n    Deposited funds are moved into the most impactful strategy that has not\r\n    already reached its limit for assets under management, regardless of which\r\n    Strategy a user's funds end up in, they receive their portion of yields\r\n    generated across all Strategies.\r\n\r\n    When a user withdraws, if there are no funds sitting undeployed in the\r\n    Vault, the Vault withdraws funds from Strategies in the order of least\r\n    impact. (Funds are taken from the Strategy that will disturb everyone's\r\n    gains the least, then the next least, etc.) In order to achieve this, the\r\n    withdrawal queue's order must be properly set and managed by the community\r\n    (through governance).\r\n\r\n    Vault Strategies are parameterized to pursue the highest risk-adjusted yield.\r\n\r\n    There is an \"Emergency Shutdown\" mode. When the Vault is put into emergency\r\n    shutdown, assets will be recalled from the Strategies as quickly as is\r\n    practical (given on-chain conditions), minimizing loss. Deposits are\r\n    halted, new Strategies may not be added, and each Strategy exits with the\r\n    minimum possible damage to position, while opening up deposits to be\r\n    withdrawn by users. There are no restrictions on withdrawals above what is\r\n    expected under Normal Operation.\r\n\r\n    For further details, please refer to the specification:\r\n    https://github.com/iearn-finance/yearn-vaults/blob/main/SPECIFICATION.md\r\n\"\"\"\r\n\r\nAPI_VERSION: constant(String[28]) = \"0.4.6\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\n\r\ninterface DetailedERC20:\r\n    def name() -> String[42]: view\r\n    def symbol() -> String[20]: view\r\n    def decimals() -> uint256: view\r\n\r\n\r\ninterface Strategy:\r\n    def want() -> address: view\r\n    def vault() -> address: view\r\n    def isActive() -> bool: view\r\n    def delegatedAssets() -> uint256: view\r\n    def estimatedTotalAssets() -> uint256: view\r\n    def withdraw(_amount: uint256) -> uint256: nonpayable\r\n    def migrate(_newStrategy: address): nonpayable\r\n    def emergencyExit() -> bool: view\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\ndecimals: public(uint256)\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\ntotalSupply: public(uint256)\r\n\r\ntoken: public(ERC20)\r\ngovernance: public(address)\r\nmanagement: public(address)\r\nguardian: public(address)\r\npendingGovernance: address\r\n\r\nstruct StrategyParams:\r\n    performanceFee: uint256  # Strategist's fee (basis points)\r\n    activation: uint256  # Activation block.timestamp\r\n    debtRatio: uint256  # Maximum borrow amount (in BPS of total assets)\r\n    minDebtPerHarvest: uint256  # Lower limit on the increase of debt since last harvest\r\n    maxDebtPerHarvest: uint256  # Upper limit on the increase of debt since last harvest\r\n    lastReport: uint256  # block.timestamp of the last time a report occured\r\n    totalDebt: uint256  # Total outstanding debt that Strategy has\r\n    totalGain: uint256  # Total returns that Strategy has realized for Vault\r\n    totalLoss: uint256  # Total losses that Strategy has realized for Vault\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nevent Deposit:\r\n    recipient: indexed(address)\r\n    shares: uint256\r\n    amount: uint256\r\n\r\nevent Withdraw:\r\n    recipient: indexed(address)\r\n    shares: uint256\r\n    amount: uint256\r\n\r\nevent Sweep:\r\n    token: indexed(address)\r\n    amount: uint256\r\n\r\nevent LockedProfitDegradationUpdated:\r\n    value: uint256\r\n\r\nevent StrategyAdded:\r\n    strategy: indexed(address)\r\n    debtRatio: uint256  # Maximum borrow amount (in BPS of total assets)\r\n    minDebtPerHarvest: uint256  # Lower limit on the increase of debt since last harvest\r\n    maxDebtPerHarvest: uint256  # Upper limit on the increase of debt since last harvest\r\n    performanceFee: uint256  # Strategist's fee (basis points)\r\n\r\n\r\nevent StrategyReported:\r\n    strategy: indexed(address)\r\n    gain: uint256\r\n    loss: uint256\r\n    debtPaid: uint256\r\n    totalGain: uint256\r\n    totalLoss: uint256\r\n    totalDebt: uint256\r\n    debtAdded: uint256\r\n    debtRatio: uint256\r\n\r\nevent FeeReport:\r\n    management_fee: uint256\r\n    performance_fee: uint256\r\n    strategist_fee: uint256\r\n    duration: uint256\r\n\r\nevent WithdrawFromStrategy:\r\n    strategy: indexed(address)\r\n    totalDebt: uint256\r\n    loss: uint256\r\n\r\nevent UpdateGovernance:\r\n    governance: address # New active governance\r\n\r\n\r\nevent UpdateManagement:\r\n    management: address # New active manager\r\n\r\nevent UpdateRewards:\r\n    rewards: address # New active rewards recipient\r\n\r\n\r\nevent UpdateDepositLimit:\r\n    depositLimit: uint256 # New active deposit limit\r\n\r\n\r\nevent UpdatePerformanceFee:\r\n    performanceFee: uint256 # New active performance fee\r\n\r\n\r\nevent UpdateManagementFee:\r\n    managementFee: uint256 # New active management fee\r\n\r\n\r\nevent UpdateGuardian:\r\n    guardian: address # Address of the active guardian\r\n\r\n\r\nevent EmergencyShutdown:\r\n    active: bool # New emergency shutdown state (if false, normal operation enabled)\r\n\r\n\r\nevent UpdateWithdrawalQueue:\r\n    queue: address[MAXIMUM_STRATEGIES] # New active withdrawal queue\r\n\r\n\r\nevent StrategyUpdateDebtRatio:\r\n    strategy: indexed(address) # Address of the strategy for the debt ratio adjustment\r\n    debtRatio: uint256 # The new debt limit for the strategy (in BPS of total assets)\r\n\r\n\r\nevent StrategyUpdateMinDebtPerHarvest:\r\n    strategy: indexed(address) # Address of the strategy for the rate limit adjustment\r\n    minDebtPerHarvest: uint256  # Lower limit on the increase of debt since last harvest\r\n\r\n\r\nevent StrategyUpdateMaxDebtPerHarvest:\r\n    strategy: indexed(address) # Address of the strategy for the rate limit adjustment\r\n    maxDebtPerHarvest: uint256  # Upper limit on the increase of debt since last harvest\r\n\r\n\r\nevent StrategyUpdatePerformanceFee:\r\n    strategy: indexed(address) # Address of the strategy for the performance fee adjustment\r\n    performanceFee: uint256 # The new performance fee for the strategy\r\n\r\n\r\nevent StrategyMigrated:\r\n    oldVersion: indexed(address) # Old version of the strategy to be migrated\r\n    newVersion: indexed(address) # New version of the strategy\r\n\r\n\r\nevent StrategyRevoked:\r\n    strategy: indexed(address) # Address of the strategy that is revoked\r\n\r\n\r\nevent StrategyRemovedFromQueue:\r\n    strategy: indexed(address) # Address of the strategy that is removed from the withdrawal queue\r\n\r\n\r\nevent StrategyAddedToQueue:\r\n    strategy: indexed(address) # Address of the strategy that is added to the withdrawal queue\r\n\r\nevent NewPendingGovernance:\r\n    pendingGovernance: indexed(address)\r\n\r\n# NOTE: Track the total for overhead targeting purposes\r\nstrategies: public(HashMap[address, StrategyParams])\r\nMAXIMUM_STRATEGIES: constant(uint256) = 20\r\nDEGRADATION_COEFFICIENT: constant(uint256) = 10 ** 18\r\n\r\n# Ordering that `withdraw` uses to determine which strategies to pull funds from\r\n# NOTE: Does *NOT* have to match the ordering of all the current strategies that\r\n#       exist, but it is recommended that it does or else withdrawal depth is\r\n#       limited to only those inside the queue.\r\n# NOTE: Ordering is determined by governance, and should be balanced according\r\n#       to risk, slippage, and/or volatility. Can also be ordered to increase the\r\n#       withdrawal speed of a particular Strategy.\r\n# NOTE: The first time a ZERO_ADDRESS is encountered, it stops withdrawing\r\nwithdrawalQueue: public(address[MAXIMUM_STRATEGIES])\r\n\r\nemergencyShutdown: public(bool)\r\n\r\ndepositLimit: public(uint256)  # Limit for totalAssets the Vault can hold\r\ndebtRatio: public(uint256)  # Debt ratio for the Vault across all strategies (in BPS, <= 10k)\r\ntotalIdle: public(uint256)  # Amount of tokens that are in the vault\r\ntotalDebt: public(uint256)  # Amount of tokens that all strategies have borrowed\r\nlastReport: public(uint256)  # block.timestamp of last report\r\nactivation: public(uint256)  # block.timestamp of contract deployment\r\nlockedProfit: public(uint256) # how much profit is locked and cant be withdrawn\r\nlockedProfitDegradation: public(uint256) # rate per block of degradation. DEGRADATION_COEFFICIENT is 100% per block\r\nrewards: public(address)  # Rewards contract where Governance fees are sent to\r\n# Governance Fee for management of Vault (given to `rewards`)\r\nmanagementFee: public(uint256)\r\n# Governance Fee for performance of Vault (given to `rewards`)\r\nperformanceFee: public(uint256)\r\nMAX_BPS: constant(uint256) = 10_000  # 100%, or 10k basis points\r\n# NOTE: A four-century period will be missing 3 of its 100 Julian leap years, leaving 97.\r\n#       So the average year has 365 + 97/400 = 365.2425 days\r\n#       ERROR(Julian): -0.0078\r\n#       ERROR(Gregorian): -0.0003\r\n#       A day = 24 * 60 * 60 sec = 86400 sec\r\n#       365.2425 * 86400 = 31556952.0\r\nSECS_PER_YEAR: constant(uint256) = 31_556_952  # 365.2425 days\r\n# `nonces` track `permit` approvals with signature.\r\nnonces: public(HashMap[address, uint256])\r\nDOMAIN_TYPE_HASH: constant(bytes32) = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\r\nPERMIT_TYPE_HASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\n\r\n\r\n@external\r\ndef initialize(\r\n    token: address,\r\n    governance: address,\r\n    rewards: address,\r\n    nameOverride: String[64],\r\n    symbolOverride: String[32],\r\n    guardian: address = msg.sender,\r\n    management: address =  msg.sender,\r\n):\r\n    \"\"\"\r\n    @notice\r\n        Initializes the Vault, this is called only once, when the contract is\r\n        deployed.\r\n        The performance fee is set to 10% of yield, per Strategy.\r\n        The management fee is set to 2%, per year.\r\n        The initial deposit limit is set to 0 (deposits disabled); it must be\r\n        updated after initialization.\r\n    @dev\r\n        If `nameOverride` is not specified, the name will be 'yearn'\r\n        combined with the name of `token`.\r\n\r\n        If `symbolOverride` is not specified, the symbol will be 'yv'\r\n        combined with the symbol of `token`.\r\n\r\n        The token used by the vault should not change balances outside transfers and \r\n        it must transfer the exact amount requested. Fee on transfer and rebasing are not supported.\r\n    @param token The token that may be deposited into this Vault.\r\n    @param governance The address authorized for governance interactions.\r\n    @param rewards The address to distribute rewards to.\r\n    @param management The address of the vault manager.\r\n    @param nameOverride Specify a custom Vault name. Leave empty for default choice.\r\n    @param symbolOverride Specify a custom Vault symbol name. Leave empty for default choice.\r\n    @param guardian The address authorized for guardian interactions. Defaults to caller.\r\n    \"\"\"\r\n    assert self.activation == 0  # dev: no devops199\r\n    self.token = ERC20(token)\r\n    if nameOverride == \"\":\r\n        self.name = concat(DetailedERC20(token).symbol(), \" yVault\")\r\n    else:\r\n        self.name = nameOverride\r\n    if symbolOverride == \"\":\r\n        self.symbol = concat(\"yv\", DetailedERC20(token).symbol())\r\n    else:\r\n        self.symbol = symbolOverride\r\n    decimals: uint256 = DetailedERC20(token).decimals()\r\n    self.decimals = decimals\r\n    assert decimals < 256 # dev: see VVE-2020-0001\r\n\r\n    self.governance = governance\r\n    log UpdateGovernance(governance)\r\n    self.management = management\r\n    log UpdateManagement(management)\r\n    self.rewards = rewards\r\n    log UpdateRewards(rewards)\r\n    self.guardian = guardian\r\n    log UpdateGuardian(guardian)\r\n    self.performanceFee = 1000  # 10% of yield (per Strategy)\r\n    log UpdatePerformanceFee(convert(1000, uint256))\r\n    self.managementFee = 200  # 2% per year\r\n    log UpdateManagementFee(convert(200, uint256))\r\n    self.lastReport = block.timestamp\r\n    self.activation = block.timestamp\r\n    self.lockedProfitDegradation = convert(DEGRADATION_COEFFICIENT * 46 / 10 ** 6 , uint256) # 6 hours in blocks\r\n    # EIP-712\r\n\r\n\r\n@pure\r\n@external\r\ndef apiVersion() -> String[28]:\r\n    \"\"\"\r\n    @notice\r\n        Used to track the deployed version of this contract. In practice you\r\n        can use this version number to compare with Yearn's GitHub and\r\n        determine which version of the source matches this deployed contract.\r\n    @dev\r\n        All strategies must have an `apiVersion()` that matches the Vault's\r\n        `API_VERSION`.\r\n    @return API_VERSION which holds the current version of this contract.\r\n    \"\"\"\r\n    return API_VERSION\r\n\r\n@view\r\n@internal\r\ndef domain_separator() -> bytes32:\r\n    return keccak256(\r\n        concat(\r\n            DOMAIN_TYPE_HASH,\r\n            keccak256(convert(\"Yearn Vault\", Bytes[11])),\r\n            keccak256(convert(API_VERSION, Bytes[28])),\r\n            convert(chain.id, bytes32),\r\n            convert(self, bytes32)\r\n        )\r\n    )\r\n\r\n@view\r\n@external\r\ndef DOMAIN_SEPARATOR() -> bytes32:\r\n    return self.domain_separator()\r\n\r\n@external\r\ndef setName(name: String[64]):\r\n    \"\"\"\r\n    @notice\r\n        Used to change the value of `name`.\r\n\r\n        This may only be called by governance.\r\n    @param name The new name to use.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    self.name = name\r\n\r\n\r\n@external\r\ndef setSymbol(symbol: String[32]):\r\n    \"\"\"\r\n    @notice\r\n        Used to change the value of `symbol`.\r\n\r\n        This may only be called by governance.\r\n    @param symbol The new symbol to use.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    self.symbol = symbol\r\n\r\n\r\n# 2-phase commit for a change in governance\r\n@external\r\ndef setGovernance(governance: address):\r\n    \"\"\"\r\n    @notice\r\n        Nominate a new address to use as governance.\r\n\r\n        The change does not go into effect immediately. This function sets a\r\n        pending change, and the governance address is not updated until\r\n        the proposed governance address has accepted the responsibility.\r\n\r\n        This may only be called by the current governance address.\r\n    @param governance The address requested to take over Vault governance.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    log NewPendingGovernance(governance)\r\n    self.pendingGovernance = governance\r\n\r\n\r\n@external\r\ndef acceptGovernance():\r\n    \"\"\"\r\n    @notice\r\n        Once a new governance address has been proposed using setGovernance(),\r\n        this function may be called by the proposed address to accept the\r\n        responsibility of taking over governance for this contract.\r\n\r\n        This may only be called by the proposed governance address.\r\n    @dev\r\n        setGovernance() should be called by the existing governance address,\r\n        prior to calling this function.\r\n    \"\"\"\r\n    assert msg.sender == self.pendingGovernance\r\n    self.governance = msg.sender\r\n    log UpdateGovernance(msg.sender)\r\n\r\n\r\n@external\r\ndef setManagement(management: address):\r\n    \"\"\"\r\n    @notice\r\n        Changes the management address.\r\n        Management is able to make some investment decisions adjusting parameters.\r\n\r\n        This may only be called by governance.\r\n    @param management The address to use for managing.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    self.management = management\r\n    log UpdateManagement(management)\r\n\r\n\r\n@external\r\ndef setRewards(rewards: address):\r\n    \"\"\"\r\n    @notice\r\n        Changes the rewards address. Any distributed rewards\r\n        will cease flowing to the old address and begin flowing\r\n        to this address once the change is in effect.\r\n\r\n        This will not change any Strategy reports in progress, only\r\n        new reports made after this change goes into effect.\r\n\r\n        This may only be called by governance.\r\n    @param rewards The address to use for collecting rewards.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    assert not (rewards in [self, ZERO_ADDRESS])\r\n    self.rewards = rewards\r\n    log UpdateRewards(rewards)\r\n\r\n\r\n@external\r\ndef setLockedProfitDegradation(degradation: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Changes the locked profit degradation.\r\n    @param degradation The rate of degradation in percent per second scaled to 1e18.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    # Since \"degradation\" is of type uint256 it can never be less than zero\r\n    assert degradation <= DEGRADATION_COEFFICIENT\r\n    self.lockedProfitDegradation = degradation\r\n    log LockedProfitDegradationUpdated(degradation) \r\n\r\n\r\n@external\r\ndef setDepositLimit(limit: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Changes the maximum amount of tokens that can be deposited in this Vault.\r\n\r\n        Note, this is not how much may be deposited by a single depositor,\r\n        but the maximum amount that may be deposited across all depositors.\r\n\r\n        This may only be called by governance.\r\n    @param limit The new deposit limit to use.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    self.depositLimit = limit\r\n    log UpdateDepositLimit(limit)\r\n\r\n\r\n@external\r\ndef setPerformanceFee(fee: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Used to change the value of `performanceFee`.\r\n\r\n        Should set this value below the maximum strategist performance fee.\r\n\r\n        This may only be called by governance.\r\n    @param fee The new performance fee to use.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    assert fee <= MAX_BPS / 2\r\n    self.performanceFee = fee\r\n    log UpdatePerformanceFee(fee)\r\n\r\n\r\n@external\r\ndef setManagementFee(fee: uint256):\r\n    \"\"\"\r\n    @notice\r\n        Used to change the value of `managementFee`.\r\n\r\n        This may only be called by governance.\r\n    @param fee The new management fee to use.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    assert fee <= MAX_BPS\r\n    self.managementFee = fee\r\n    log UpdateManagementFee(fee)\r\n\r\n\r\n@external\r\ndef setGuardian(guardian: address):\r\n    \"\"\"\r\n    @notice\r\n        Used to change the address of `guardian`.\r\n\r\n        This may only be called by governance or the existing guardian.\r\n    @param guardian The new guardian address to use.\r\n    \"\"\"\r\n    assert msg.sender in [self.guardian, self.governance]\r\n    self.guardian = guardian\r\n    log UpdateGuardian(guardian)\r\n\r\n\r\n@external\r\ndef setEmergencyShutdown(active: bool):\r\n    \"\"\"\r\n    @notice\r\n        Activates or deactivates Vault mode where all Strategies go into full\r\n        withdrawal.\r\n\r\n        During Emergency Shutdown:\r\n        1. No Users may deposit into the Vault (but may withdraw as usual.)\r\n        2. Governance may not add new Strategies.\r\n        3. Each Strategy must pay back their debt as quickly as reasonable to\r\n            minimally affect their position.\r\n        4. Only Governance may undo Emergency Shutdown.\r\n\r\n        See contract level note for further details.\r\n\r\n        This may only be called by governance or the guardian.\r\n    @param active\r\n        If true, the Vault goes into Emergency Shutdown. If false, the Vault\r\n        goes back into Normal Operation.\r\n    \"\"\"\r\n    if active:\r\n        assert msg.sender in [self.guardian, self.governance]\r\n    else:\r\n        assert msg.sender == self.governance\r\n    self.emergencyShutdown = active\r\n    log EmergencyShutdown(active)\r\n\r\n\r\n@external\r\ndef setWithdrawalQueue(queue: address[MAXIMUM_STRATEGIES]):\r\n    \"\"\"\r\n    @notice\r\n        Updates the withdrawalQueue to match the addresses and order specified\r\n        by `queue`.\r\n\r\n        There can be fewer strategies than the maximum, as well as fewer than\r\n        the total number of strategies active in the vault. `withdrawalQueue`\r\n        will be updated in a gas-efficient manner, assuming the input is well-\r\n        ordered with 0x0 only at the end.\r\n\r\n        This may only be called by governance or management.\r\n    @dev\r\n        This is order sensitive, specify the addresses in the order in which\r\n        funds should be withdrawn (so `queue`[0] is the first Strategy withdrawn\r\n        from, `queue`[1] is the second, etc.)\r\n\r\n        This means that the least impactful Strategy (the Strategy that will have\r\n        its core positions impacted the least by having funds removed) should be\r\n        at `queue`[0], then the next least impactful at `queue`[1], and so on.\r\n    @param queue\r\n        The array of addresses to use as the new withdrawal queue. This is\r\n        order sensitive.\r\n    \"\"\"\r\n    assert msg.sender in [self.management, self.governance]\r\n\r\n    # HACK: Temporary until Vyper adds support for Dynamic arrays\r\n    old_queue: address[MAXIMUM_STRATEGIES] = empty(address[MAXIMUM_STRATEGIES])\r\n    for i in range(MAXIMUM_STRATEGIES):\r\n        old_queue[i] = self.withdrawalQueue[i] \r\n        if queue[i] == ZERO_ADDRESS:\r\n            # NOTE: Cannot use this method to remove entries from the queue\r\n            assert old_queue[i] == ZERO_ADDRESS\r\n            break\r\n        # NOTE: Cannot use this method to add more entries to the queue\r\n        assert old_queue[i] != ZERO_ADDRESS\r\n\r\n        assert self.strategies[queue[i]].activation > 0\r\n\r\n        existsInOldQueue: bool = False\r\n        for j in range(MAXIMUM_STRATEGIES):\r\n            if queue[j] == ZERO_ADDRESS:\r\n                existsInOldQueue = True\r\n                break\r\n            if queue[i] == old_queue[j]:\r\n                # NOTE: Ensure that every entry in queue prior to reordering exists now\r\n                existsInOldQueue = True\r\n\r\n            if j <= i:\r\n                # NOTE: This will only check for duplicate entries in queue after `i`\r\n                continue\r\n            assert queue[i] != queue[j]  # dev: do not add duplicate strategies\r\n\r\n        assert existsInOldQueue # dev: do not add new strategies\r\n\r\n        self.withdrawalQueue[i] = queue[i]\r\n    log UpdateWithdrawalQueue(queue)\r\n\r\n\r\n@internal\r\ndef erc20_safe_transfer(token: address, receiver: address, amount: uint256):\r\n    # Used only to send tokens that are not the type managed by this Vault.\r\n    # HACK: Used to handle non-compliant tokens like USDT\r\n    response: Bytes[32] = raw_call(\r\n        token,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(receiver, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) > 0:\r\n        assert convert(response, bool), \"Transfer failed!\"\r\n\r\n\r\n@internal\r\ndef erc20_safe_transferFrom(token: address, sender: address, receiver: address, amount: uint256):\r\n    # Used only to send tokens that are not the type managed by this Vault.\r\n    # HACK: Used to handle non-compliant tokens like USDT\r\n    response: Bytes[32] = raw_call(\r\n        token,\r\n        concat(\r\n            method_id(\"transferFrom(address,address,uint256)\"),\r\n            convert(sender, bytes32),\r\n            convert(receiver, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) > 0:\r\n        assert convert(response, bool), \"Transfer failed!\"\r\n\r\n\r\n@internal\r\ndef _transfer(sender: address, receiver: address, amount: uint256):\r\n    # See note on `transfer()`.\r\n\r\n    # Protect people from accidentally sending their shares to bad places\r\n    assert receiver not in [self, ZERO_ADDRESS]\r\n    self.balanceOf[sender] -= amount\r\n    self.balanceOf[receiver] += amount\r\n    log Transfer(sender, receiver, amount)\r\n\r\n\r\n@external\r\ndef transfer(receiver: address, amount: uint256) -> bool:\r\n    \"\"\"\r\n    @notice\r\n        Transfers shares from the caller's address to `receiver`. This function\r\n        will always return true, unless the user is attempting to transfer\r\n        shares to this contract's address, or to 0x0.\r\n    @param receiver\r\n        The address shares are being transferred to. Must not be this contract's\r\n        address, must not be 0x0.\r\n    @param amount The quantity of shares to transfer.\r\n    @return\r\n        True if transfer is sent to an address other than this contract's or\r\n        0x0, otherwise the transaction will fail.\r\n    \"\"\"\r\n    self._transfer(msg.sender, receiver, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(sender: address, receiver: address, amount: uint256) -> bool:\r\n    \"\"\"\r\n    @notice\r\n        Transfers `amount` shares from `sender` to `receiver`. This operation will\r\n        always return true, unless the user is attempting to transfer shares\r\n        to this contract's address, or to 0x0.\r\n\r\n        Unless the caller has given this contract unlimited approval,\r\n        transfering shares will decrement the caller's `allowance` by `amount`.\r\n    @param sender The address shares are being transferred from.\r\n    @param receiver\r\n        The address shares are being transferred to. Must not be this contract's\r\n        address, must not be 0x0.\r\n    @param amount The quantity of shares to transfer.\r\n    @return\r\n        True if transfer is sent to an address other than this contract's or\r\n        0x0, otherwise the transaction will fail.\r\n    \"\"\"\r\n    # Unlimited approval (saves an SSTORE)\r\n    if (self.allowance[sender][msg.sender] < MAX_UINT256):\r\n        allowance: uint256 = self.allowance[sender][msg.sender] - amount\r\n        self.allowance[sender][msg.sender] = allowance\r\n        # NOTE: Allows log filters to have a full accounting of allowance changes\r\n        log Approval(sender, msg.sender, allowance)\r\n    self._transfer(sender, receiver, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(spender: address, amount: uint256) -> bool:\r\n    \"\"\"\r\n    @dev Approve the passed address to spend the specified amount of tokens on behalf of\r\n         `msg.sender`. Beware that changing an allowance with this method brings the risk\r\n         that someone may use both the old and the new allowance by unfortunate transaction\r\n         ordering. See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param spender The address which will spend the funds.\r\n    @param amount The amount of tokens to be spent.\r\n    \"\"\"\r\n    self.allowance[msg.sender][spender] = amount\r\n    log Approval(msg.sender, spender, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef increaseAllowance(spender: address, amount: uint256) -> bool:\r\n    \"\"\"\r\n    @dev Increase the allowance of the passed address to spend the total amount of tokens\r\n         on behalf of msg.sender. This method mitigates the risk that someone may use both\r\n         the old and the new allowance by unfortunate transaction ordering.\r\n         See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param spender The address which will spend the funds.\r\n    @param amount The amount of tokens to increase the allowance by.\r\n    \"\"\"\r\n    self.allowance[msg.sender][spender] += amount\r\n    log Approval(msg.sender, spender, self.allowance[msg.sender][spender])\r\n    return True\r\n\r\n\r\n@external\r\ndef decreaseAllowance(spender: address, amount: uint256) -> bool:\r\n    \"\"\"\r\n    @dev Decrease the allowance of the passed address to spend the total amount of tokens\r\n         on behalf of msg.sender. This method mitigates the risk that someone may use both\r\n         the old and the new allowance by unfortunate transaction ordering.\r\n         See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param spender The address which will spend the funds.\r\n    @param amount The amount of tokens to decrease the allowance by.\r\n    \"\"\"\r\n    self.allowance[msg.sender][spender] -= amount\r\n    log Approval(msg.sender, spender, self.allowance[msg.sender][spender])\r\n    return True\r\n\r\n\r\n@external\r\ndef permit(owner: address, spender: address, amount: uint256, expiry: uint256, signature: Bytes[65]) -> bool:\r\n    \"\"\"\r\n    @notice\r\n        Approves spender by owner's signature to expend owner's tokens.\r\n        See https://eips.ethereum.org/EIPS/eip-2612.\r\n\r\n    @param owner The address which is a source of funds and has signed the Permit.\r\n    @param spender The address which is allowed to spend the funds.\r\n    @param amount The amount of tokens to be spent.\r\n    @param expiry The timestamp after which the Permit is no longer valid.\r\n    @param signature A valid secp256k1 signature of Permit by owner encoded as r, s, v.\r\n    @return True, if transaction completes successfully\r\n    \"\"\"\r\n    assert owner != ZERO_ADDRESS  # dev: invalid owner\r\n    assert expiry >= block.timestamp  # dev: permit expired\r\n    nonce: uint256 = self.nonces[owner]\r\n    digest: bytes32 = keccak256(\r\n        concat(\r\n            b'\\x19\\x01',\r\n            self.domain_separator(),\r\n            keccak256(\r\n                concat(\r\n                    PERMIT_TYPE_HASH,\r\n                    convert(owner, bytes32),\r\n                    convert(spender, bytes32),\r\n                    convert(amount, bytes32),\r\n                    convert(nonce, bytes32),\r\n                    convert(expiry, bytes32),\r\n                )\r\n            )\r\n        )\r\n    )\r\n    # NOTE: signature is packed as r, s, v\r\n    r: uint256 = convert(slice(signature, 0, 32), uint256)\r\n    s: uint256 = convert(slice(signature, 32, 32), uint256)\r\n    v: uint256 = convert(slice(signature, 64, 1), uint256)\r\n    assert ecrecover(digest, v, r, s) == owner  # dev: invalid signature\r\n    self.allowance[owner][spender] = amount\r\n    self.nonces[owner] = nonce + 1\r\n    log Approval(owner, spender, amount)\r\n    return True\r\n\r\n\r\n@view\r\n@internal\r\ndef _totalAssets() -> uint256:\r\n    # See note on `totalAssets()`.\r\n    return self.totalIdle + self.totalDebt\r\n\r\n\r\n@view\r\n@external\r\ndef totalAssets() -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Returns the total quantity of all assets under control of this\r\n        Vault, whether they're loaned out to a Strategy, or currently held in\r\n        the Vault.\r\n    @return The total assets under control of this Vault.\r\n    \"\"\"\r\n    return self._totalAssets()\r\n\r\n\r\n@view\r\n@internal\r\ndef _calculateLockedProfit() -> uint256:\r\n    lockedFundsRatio: uint256 = (block.timestamp - self.lastReport) * self.lockedProfitDegradation\r\n\r\n    if(lockedFundsRatio < DEGRADATION_COEFFICIENT):\r\n        lockedProfit: uint256 = self.lockedProfit\r\n        return lockedProfit - (\r\n                lockedFundsRatio\r\n                * lockedProfit\r\n                / DEGRADATION_COEFFICIENT\r\n            )\r\n    else:        \r\n        return 0\r\n\r\n@view\r\n@internal\r\ndef _freeFunds() -> uint256:\r\n    return self._totalAssets() - self._calculateLockedProfit()\r\n\r\n@internal\r\ndef _issueSharesForAmount(to: address, amount: uint256) -> uint256:\r\n    # Issues `amount` Vault shares to `to`.\r\n    # Shares must be issued prior to taking on new collateral, or\r\n    # calculation will be wrong. This means that only *trusted* tokens\r\n    # (with no capability for exploitative behavior) can be used.\r\n    shares: uint256 = 0\r\n    # HACK: Saves 2 SLOADs (~200 gas, post-Berlin)\r\n    totalSupply: uint256 = self.totalSupply\r\n    if totalSupply > 0:\r\n        # Mint amount of shares based on what the Vault is managing overall\r\n        # NOTE: if sqrt(token.totalSupply()) > 1e39, this could potentially revert\r\n        shares =  amount * totalSupply / self._freeFunds()  # dev: no free funds\r\n    else:\r\n        # No existing shares, so mint 1:1\r\n        shares = amount\r\n    assert shares != 0 # dev: division rounding resulted in zero\r\n\r\n    # Mint new shares\r\n    self.totalSupply = totalSupply + shares\r\n    self.balanceOf[to] += shares\r\n    log Transfer(ZERO_ADDRESS, to, shares)\r\n\r\n    return shares\r\n\r\n\r\n@external\r\n@nonreentrant(\"withdraw\")\r\ndef deposit(_amount: uint256 = MAX_UINT256, recipient: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Deposits `_amount` `token`, issuing shares to `recipient`. If the\r\n        Vault is in Emergency Shutdown, deposits will not be accepted and this\r\n        call will fail.\r\n    @dev\r\n        Measuring quantity of shares to issues is based on the total\r\n        outstanding debt that this contract has (\"expected value\") instead\r\n        of the total balance sheet it has (\"estimated value\") has important\r\n        security considerations, and is done intentionally. If this value were\r\n        measured against external systems, it could be purposely manipulated by\r\n        an attacker to withdraw more assets than they otherwise should be able\r\n        to claim by redeeming their shares.\r\n\r\n        On deposit, this means that shares are issued against the total amount\r\n        that the deposited capital can be given in service of the debt that\r\n        Strategies assume. If that number were to be lower than the \"expected\r\n        value\" at some future point, depositing shares via this method could\r\n        entitle the depositor to *less* than the deposited value once the\r\n        \"realized value\" is updated from further reports by the Strategies\r\n        to the Vaults.\r\n\r\n        Care should be taken by integrators to account for this discrepancy,\r\n        by using the view-only methods of this contract (both off-chain and\r\n        on-chain) to determine if depositing into the Vault is a \"good idea\".\r\n    @param _amount The quantity of tokens to deposit, defaults to all.\r\n    @param recipient\r\n        The address to issue the shares in this Vault to. Defaults to the\r\n        caller's address.\r\n    @return The issued Vault shares.\r\n    \"\"\"\r\n    assert not self.emergencyShutdown  # Deposits are locked out\r\n    assert recipient not in [self, ZERO_ADDRESS]\r\n\r\n    amount: uint256 = _amount\r\n\r\n    # If _amount not specified, transfer the full token balance,\r\n    # up to deposit limit\r\n    if amount == MAX_UINT256:\r\n        amount = min(\r\n            self.depositLimit - self._totalAssets(),\r\n            self.token.balanceOf(msg.sender),\r\n        )\r\n    else:\r\n        # Ensure deposit limit is respected\r\n        assert self._totalAssets() + amount <= self.depositLimit\r\n\r\n    # Ensure we are depositing something\r\n    assert amount > 0\r\n\r\n    # Issue new shares (needs to be done before taking deposit to be accurate)\r\n    # Shares are issued to recipient (may be different from msg.sender)\r\n    # See @dev note, above.\r\n    shares: uint256 = self._issueSharesForAmount(recipient, amount)\r\n\r\n    # Tokens are transferred from msg.sender (may be different from _recipient)\r\n    self.erc20_safe_transferFrom(self.token.address, msg.sender, self, amount)\r\n    self.totalIdle += amount\r\n\r\n    log Deposit(recipient, shares, amount)\r\n\r\n    return shares  # Just in case someone wants them\r\n\r\n\r\n@view\r\n@internal\r\ndef _shareValue(shares: uint256) -> uint256:\r\n    # Returns price = 1:1 if vault is empty\r\n    if self.totalSupply == 0:\r\n        return shares\r\n\r\n    # Determines the current value of `shares`.\r\n    # NOTE: if sqrt(Vault.totalAssets()) >>> 1e39, this could potentially revert\r\n\r\n    return (\r\n        shares\r\n        * self._freeFunds()\r\n        / self.totalSupply\r\n    )\r\n\r\n\r\n@view\r\n@internal\r\ndef _sharesForAmount(amount: uint256) -> uint256:\r\n    # Determines how many shares `amount` of token would receive.\r\n    # See dev note on `deposit`.\r\n    _freeFunds: uint256 = self._freeFunds()\r\n    if _freeFunds > 0:\r\n        # NOTE: if sqrt(token.totalSupply()) > 1e37, this could potentially revert\r\n        return  (\r\n            amount\r\n            * self.totalSupply\r\n            / _freeFunds \r\n        )\r\n    else:\r\n        return 0\r\n\r\n\r\n@view\r\n@external\r\ndef maxAvailableShares() -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Determines the maximum quantity of shares this Vault can facilitate a\r\n        withdrawal for, factoring in assets currently residing in the Vault,\r\n        as well as those deployed to strategies on the Vault's balance sheet.\r\n    @dev\r\n        Regarding how shares are calculated, see dev note on `deposit`.\r\n\r\n        If you want to calculated the maximum a user could withdraw up to,\r\n        you want to use this function.\r\n\r\n        Note that the amount provided by this function is the theoretical\r\n        maximum possible from withdrawing, the real amount depends on the\r\n        realized losses incurred during withdrawal.\r\n    @return The total quantity of shares this Vault can provide.\r\n    \"\"\"\r\n    shares: uint256 = self._sharesForAmount(self.totalIdle)\r\n\r\n    for strategy in self.withdrawalQueue:\r\n        if strategy == ZERO_ADDRESS:\r\n            break\r\n        shares += self._sharesForAmount(self.strategies[strategy].totalDebt)\r\n\r\n    return shares\r\n\r\n\r\n@internal\r\ndef _reportLoss(strategy: address, loss: uint256):\r\n    # Loss can only be up the amount of debt issued to strategy\r\n    totalDebt: uint256 = self.strategies[strategy].totalDebt\r\n    assert totalDebt >= loss\r\n\r\n    # Also, make sure we reduce our trust with the strategy by the amount of loss\r\n    if self.debtRatio != 0: # if vault with single strategy that is set to EmergencyOne\r\n        # NOTE: The context to this calculation is different than the calculation in `_reportLoss`,\r\n        # this calculation intentionally approximates via `totalDebt` to avoid manipulatable results\r\n        ratio_change: uint256 = min(\r\n            # NOTE: This calculation isn't 100% precise, the adjustment is ~10%-20% more severe due to EVM math\r\n            loss * self.debtRatio / self.totalDebt,\r\n            self.strategies[strategy].debtRatio,\r\n        )\r\n        self.strategies[strategy].debtRatio -= ratio_change\r\n        self.debtRatio -= ratio_change\r\n    # Finally, adjust our strategy's parameters by the loss\r\n    self.strategies[strategy].totalLoss += loss\r\n    self.strategies[strategy].totalDebt = totalDebt - loss\r\n    self.totalDebt -= loss\r\n\r\n\r\n@external\r\n@nonreentrant(\"withdraw\")\r\ndef withdraw(\r\n    maxShares: uint256 = MAX_UINT256,\r\n    recipient: address = msg.sender,\r\n    maxLoss: uint256 = 1,  # 0.01% [BPS]\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Withdraws the calling account's tokens from this Vault, redeeming\r\n        amount `_shares` for an appropriate amount of tokens.\r\n\r\n        See note on `setWithdrawalQueue` for further details of withdrawal\r\n        ordering and behavior.\r\n    @dev\r\n        Measuring the value of shares is based on the total outstanding debt\r\n        that this contract has (\"expected value\") instead of the total balance\r\n        sheet it has (\"estimated value\") has important security considerations,\r\n        and is done intentionally. If this value were measured against external\r\n        systems, it could be purposely manipulated by an attacker to withdraw\r\n        more assets than they otherwise should be able to claim by redeeming\r\n        their shares.\r\n\r\n        On withdrawal, this means that shares are redeemed against the total\r\n        amount that the deposited capital had \"realized\" since the point it\r\n        was deposited, up until the point it was withdrawn. If that number\r\n        were to be higher than the \"expected value\" at some future point,\r\n        withdrawing shares via this method could entitle the depositor to\r\n        *more* than the expected value once the \"realized value\" is updated\r\n        from further reports by the Strategies to the Vaults.\r\n\r\n        Under exceptional scenarios, this could cause earlier withdrawals to\r\n        earn \"more\" of the underlying assets than Users might otherwise be\r\n        entitled to, if the Vault's estimated value were otherwise measured\r\n        through external means, accounting for whatever exceptional scenarios\r\n        exist for the Vault (that aren't covered by the Vault's own design.)\r\n\r\n        In the situation where a large withdrawal happens, it can empty the \r\n        vault balance and the strategies in the withdrawal queue. \r\n        Strategies not in the withdrawal queue will have to be harvested to \r\n        rebalance the funds and make the funds available again to withdraw.\r\n    @param maxShares\r\n        How many shares to try and redeem for tokens, defaults to all.\r\n    @param recipient\r\n        The address to issue the shares in this Vault to. Defaults to the\r\n        caller's address.\r\n    @param maxLoss\r\n        The maximum acceptable loss to sustain on withdrawal. Defaults to 0.01%.\r\n        If a loss is specified, up to that amount of shares may be burnt to cover losses on withdrawal.\r\n    @return The quantity of tokens redeemed for `_shares`.\r\n    \"\"\"\r\n    shares: uint256 = maxShares  # May reduce this number below\r\n\r\n    # Max Loss is <=100%, revert otherwise\r\n    assert maxLoss <= MAX_BPS\r\n\r\n    # If _shares not specified, transfer full share balance\r\n    if shares == MAX_UINT256:\r\n        shares = self.balanceOf[msg.sender]\r\n\r\n    # Limit to only the shares they own\r\n    assert shares <= self.balanceOf[msg.sender]\r\n\r\n    # Ensure we are withdrawing something\r\n    assert shares > 0\r\n\r\n    # See @dev note, above.\r\n    value: uint256 = self._shareValue(shares)\r\n    vault_balance: uint256 = self.totalIdle\r\n\r\n    if value > vault_balance:\r\n        totalLoss: uint256 = 0\r\n        # We need to go get some from our strategies in the withdrawal queue\r\n        # NOTE: This performs forced withdrawals from each Strategy. During\r\n        #       forced withdrawal, a Strategy may realize a loss. That loss\r\n        #       is reported back to the Vault, and the will affect the amount\r\n        #       of tokens that the withdrawer receives for their shares. They\r\n        #       can optionally specify the maximum acceptable loss (in BPS)\r\n        #       to prevent excessive losses on their withdrawals (which may\r\n        #       happen in certain edge cases where Strategies realize a loss)\r\n        for strategy in self.withdrawalQueue:\r\n            if strategy == ZERO_ADDRESS:\r\n                break  # We've exhausted the queue\r\n\r\n            if value <= vault_balance:\r\n                break  # We're done withdrawing\r\n\r\n            amountNeeded: uint256 = value - vault_balance\r\n\r\n            # NOTE: Don't withdraw more than the debt so that Strategy can still\r\n            #       continue to work based on the profits it has\r\n            # NOTE: This means that user will lose out on any profits that each\r\n            #       Strategy in the queue would return on next harvest, benefiting others\r\n            amountNeeded = min(amountNeeded, self.strategies[strategy].totalDebt)\r\n            if amountNeeded == 0:\r\n                continue  # Nothing to withdraw from this Strategy, try the next one\r\n\r\n            # Force withdraw amount from each Strategy in the order set by governance\r\n            preBalance: uint256 = self.token.balanceOf(self)\r\n            loss: uint256 = Strategy(strategy).withdraw(amountNeeded)\r\n            withdrawn: uint256 = self.token.balanceOf(self) - preBalance\r\n            vault_balance += withdrawn\r\n\r\n            # NOTE: Withdrawer incurs any losses from liquidation\r\n            if loss > 0:\r\n                value -= loss\r\n                totalLoss += loss\r\n                self._reportLoss(strategy, loss)\r\n\r\n            # Reduce the Strategy's debt by the amount withdrawn (\"realized returns\")\r\n            # NOTE: This doesn't add to returns as it's not earned by \"normal means\"\r\n            self.strategies[strategy].totalDebt -= withdrawn\r\n            self.totalDebt -= withdrawn\r\n            log WithdrawFromStrategy(strategy, self.strategies[strategy].totalDebt, loss)\r\n\r\n        self.totalIdle = vault_balance\r\n        # NOTE: We have withdrawn everything possible out of the withdrawal queue\r\n        #       but we still don't have enough to fully pay them back, so adjust\r\n        #       to the total amount we've freed up through forced withdrawals\r\n        if value > vault_balance:\r\n            value = vault_balance\r\n            # NOTE: Burn # of shares that corresponds to what Vault has on-hand,\r\n            #       including the losses that were incurred above during withdrawals\r\n            shares = self._sharesForAmount(value + totalLoss)\r\n\r\n        # NOTE: This loss protection is put in place to revert if losses from\r\n        #       withdrawing are more than what is considered acceptable.\r\n        assert totalLoss <= maxLoss * (value + totalLoss) / MAX_BPS\r\n\r\n    # Burn shares (full value of what is being withdrawn)\r\n    self.totalSupply -= shares\r\n    self.balanceOf[msg.sender] -= shares\r\n    log Transfer(msg.sender, ZERO_ADDRESS, shares)\r\n    \r\n    self.totalIdle -= value\r\n    # Withdraw remaining balance to _recipient (may be different to msg.sender) (minus fee)\r\n    self.erc20_safe_transfer(self.token.address, recipient, value)\r\n    log Withdraw(recipient, shares, value)\r\n    \r\n    return value\r\n\r\n\r\n@view\r\n@external\r\ndef pricePerShare() -> uint256:\r\n    \"\"\"\r\n    @notice Gives the price for a single Vault share.\r\n    @dev See dev note on `withdraw`.\r\n    @return The value of a single share.\r\n    \"\"\"\r\n    return self._shareValue(10 ** self.decimals)\r\n\r\n\r\n@internal\r\ndef _organizeWithdrawalQueue():\r\n    # Reorganize `withdrawalQueue` based on premise that if there is an\r\n    # empty value between two actual values, then the empty value should be\r\n    # replaced by the later value.\r\n    # NOTE: Relative ordering of non-zero values is maintained.\r\n    offset: uint256 = 0\r\n    for idx in range(MAXIMUM_STRATEGIES):\r\n        strategy: address = self.withdrawalQueue[idx]\r\n        if strategy == ZERO_ADDRESS:\r\n            offset += 1  # how many values we need to shift, always `<= idx`\r\n        elif offset > 0:\r\n            self.withdrawalQueue[idx - offset] = strategy\r\n            self.withdrawalQueue[idx] = ZERO_ADDRESS\r\n\r\n\r\n@external\r\ndef addStrategy(\r\n    strategy: address,\r\n    debtRatio: uint256,\r\n    minDebtPerHarvest: uint256,\r\n    maxDebtPerHarvest: uint256,\r\n    performanceFee: uint256,\r\n):\r\n    \"\"\"\r\n    @notice\r\n        Add a Strategy to the Vault.\r\n\r\n        This may only be called by governance.\r\n    @dev\r\n        The Strategy will be appended to `withdrawalQueue`, call\r\n        `setWithdrawalQueue` to change the order.\r\n    @param strategy The address of the Strategy to add.\r\n    @param debtRatio\r\n        The share of the total assets in the `vault that the `strategy` has access to.\r\n    @param minDebtPerHarvest\r\n        Lower limit on the increase of debt since last harvest\r\n    @param maxDebtPerHarvest\r\n        Upper limit on the increase of debt since last harvest\r\n    @param performanceFee\r\n        The fee the strategist will receive based on this Vault's performance.\r\n    \"\"\"\r\n    # Check if queue is full\r\n    assert self.withdrawalQueue[MAXIMUM_STRATEGIES - 1] == ZERO_ADDRESS\r\n\r\n    # Check calling conditions\r\n    assert not self.emergencyShutdown\r\n    assert msg.sender == self.governance\r\n\r\n    # Check strategy configuration\r\n    assert strategy != ZERO_ADDRESS\r\n    assert self.strategies[strategy].activation == 0\r\n    assert self == Strategy(strategy).vault()\r\n    assert self.token.address == Strategy(strategy).want()\r\n\r\n    # Check strategy parameters\r\n    assert self.debtRatio + debtRatio <= MAX_BPS\r\n    assert minDebtPerHarvest <= maxDebtPerHarvest\r\n    assert performanceFee <= MAX_BPS / 2 \r\n\r\n    # Add strategy to approved strategies\r\n    self.strategies[strategy] = StrategyParams({\r\n        performanceFee: performanceFee,\r\n        activation: block.timestamp,\r\n        debtRatio: debtRatio,\r\n        minDebtPerHarvest: minDebtPerHarvest,\r\n        maxDebtPerHarvest: maxDebtPerHarvest,\r\n        lastReport: block.timestamp,\r\n        totalDebt: 0,\r\n        totalGain: 0,\r\n        totalLoss: 0,\r\n    })\r\n    log StrategyAdded(strategy, debtRatio, minDebtPerHarvest, maxDebtPerHarvest, performanceFee)\r\n\r\n    # Update Vault parameters\r\n    self.debtRatio += debtRatio\r\n\r\n    # Add strategy to the end of the withdrawal queue\r\n    self.withdrawalQueue[MAXIMUM_STRATEGIES - 1] = strategy\r\n    self._organizeWithdrawalQueue()\r\n\r\n\r\n@external\r\ndef updateStrategyDebtRatio(\r\n    strategy: address,\r\n    debtRatio: uint256,\r\n):\r\n    \"\"\"\r\n    @notice\r\n        Change the quantity of assets `strategy` may manage.\r\n\r\n        This may be called by governance or management.\r\n    @param strategy The Strategy to update.\r\n    @param debtRatio The quantity of assets `strategy` may now manage.\r\n    \"\"\"\r\n    assert msg.sender in [self.management, self.governance]\r\n    assert self.strategies[strategy].activation > 0\r\n    assert Strategy(strategy).emergencyExit() == False # dev: strategy in emergency\r\n    self.debtRatio -= self.strategies[strategy].debtRatio\r\n    self.strategies[strategy].debtRatio = debtRatio\r\n    self.debtRatio += debtRatio\r\n    assert self.debtRatio <= MAX_BPS\r\n    log StrategyUpdateDebtRatio(strategy, debtRatio)\r\n\r\n\r\n@external\r\ndef updateStrategyMinDebtPerHarvest(\r\n    strategy: address,\r\n    minDebtPerHarvest: uint256,\r\n):\r\n    \"\"\"\r\n    @notice\r\n        Change the quantity assets per block this Vault may deposit to or\r\n        withdraw from `strategy`.\r\n\r\n        This may only be called by governance or management.\r\n    @param strategy The Strategy to update.\r\n    @param minDebtPerHarvest\r\n        Lower limit on the increase of debt since last harvest\r\n    \"\"\"\r\n    assert msg.sender in [self.management, self.governance]\r\n    assert self.strategies[strategy].activation > 0\r\n    assert self.strategies[strategy].maxDebtPerHarvest >= minDebtPerHarvest\r\n    self.strategies[strategy].minDebtPerHarvest = minDebtPerHarvest\r\n    log StrategyUpdateMinDebtPerHarvest(strategy, minDebtPerHarvest)\r\n\r\n\r\n@external\r\ndef updateStrategyMaxDebtPerHarvest(\r\n    strategy: address,\r\n    maxDebtPerHarvest: uint256,\r\n):\r\n    \"\"\"\r\n    @notice\r\n        Change the quantity assets per block this Vault may deposit to or\r\n        withdraw from `strategy`.\r\n\r\n        This may only be called by governance or management.\r\n    @param strategy The Strategy to update.\r\n    @param maxDebtPerHarvest\r\n        Upper limit on the increase of debt since last harvest\r\n    \"\"\"\r\n    assert msg.sender in [self.management, self.governance]\r\n    assert self.strategies[strategy].activation > 0\r\n    assert self.strategies[strategy].minDebtPerHarvest <= maxDebtPerHarvest\r\n    self.strategies[strategy].maxDebtPerHarvest = maxDebtPerHarvest\r\n    log StrategyUpdateMaxDebtPerHarvest(strategy, maxDebtPerHarvest)\r\n\r\n\r\n@external\r\ndef updateStrategyPerformanceFee(\r\n    strategy: address,\r\n    performanceFee: uint256,\r\n):\r\n    \"\"\"\r\n    @notice\r\n        Change the fee the strategist will receive based on this Vault's\r\n        performance.\r\n\r\n        This may only be called by governance.\r\n    @param strategy The Strategy to update.\r\n    @param performanceFee The new fee the strategist will receive.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    assert performanceFee <= MAX_BPS / 2\r\n    assert self.strategies[strategy].activation > 0\r\n    self.strategies[strategy].performanceFee = performanceFee\r\n    log StrategyUpdatePerformanceFee(strategy, performanceFee)\r\n\r\n\r\n@internal\r\ndef _revokeStrategy(strategy: address):\r\n    self.debtRatio -= self.strategies[strategy].debtRatio\r\n    self.strategies[strategy].debtRatio = 0\r\n    log StrategyRevoked(strategy)\r\n\r\n\r\n@external\r\ndef migrateStrategy(oldVersion: address, newVersion: address):\r\n    \"\"\"\r\n    @notice\r\n        Migrates a Strategy, including all assets from `oldVersion` to\r\n        `newVersion`.\r\n\r\n        This may only be called by governance.\r\n    @dev\r\n        Strategy must successfully migrate all capital and positions to new\r\n        Strategy, or else this will upset the balance of the Vault.\r\n\r\n        The new Strategy should be \"empty\" e.g. have no prior commitments to\r\n        this Vault, otherwise it could have issues.\r\n    @param oldVersion The existing Strategy to migrate from.\r\n    @param newVersion The new Strategy to migrate to.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    assert newVersion != ZERO_ADDRESS\r\n    assert self.strategies[oldVersion].activation > 0\r\n    assert self.strategies[newVersion].activation == 0\r\n\r\n    strategy: StrategyParams = self.strategies[oldVersion]\r\n\r\n    self._revokeStrategy(oldVersion)\r\n    # _revokeStrategy will lower the debtRatio\r\n    self.debtRatio += strategy.debtRatio\r\n    # Debt is migrated to new strategy\r\n    self.strategies[oldVersion].totalDebt = 0\r\n\r\n    self.strategies[newVersion] = StrategyParams({\r\n        performanceFee: strategy.performanceFee,\r\n        # NOTE: use last report for activation time, so E[R] calc works\r\n        activation: strategy.lastReport,\r\n        debtRatio: strategy.debtRatio,\r\n        minDebtPerHarvest: strategy.minDebtPerHarvest,\r\n        maxDebtPerHarvest: strategy.maxDebtPerHarvest,\r\n        lastReport: strategy.lastReport,\r\n        totalDebt: strategy.totalDebt,\r\n        totalGain: 0,\r\n        totalLoss: 0,\r\n    })\r\n\r\n    Strategy(oldVersion).migrate(newVersion)\r\n    log StrategyMigrated(oldVersion, newVersion)\r\n\r\n    for idx in range(MAXIMUM_STRATEGIES):\r\n        if self.withdrawalQueue[idx] == oldVersion:\r\n            self.withdrawalQueue[idx] = newVersion\r\n            return  # Don't need to reorder anything because we swapped\r\n\r\n\r\n@external\r\ndef revokeStrategy(strategy: address = msg.sender):\r\n    \"\"\"\r\n    @notice\r\n        Revoke a Strategy, setting its debt limit to 0 and preventing any\r\n        future deposits.\r\n\r\n        This function should only be used in the scenario where the Strategy is\r\n        being retired but no migration of the positions are possible, or in the\r\n        extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n        mode in order for it to exit as quickly as possible. The latter scenario\r\n        could be for any reason that is considered \"critical\" that the Strategy\r\n        exits its position as fast as possible, such as a sudden change in market\r\n        conditions leading to losses, or an imminent failure in an external\r\n        dependency.\r\n\r\n        This may only be called by governance, the guardian, or the Strategy\r\n        itself. Note that a Strategy will only revoke itself during emergency\r\n        shutdown.\r\n    @param strategy The Strategy to revoke.\r\n    \"\"\"\r\n    assert msg.sender in [strategy, self.governance, self.guardian]\r\n    assert self.strategies[strategy].debtRatio != 0 # dev: already zero\r\n\r\n    self._revokeStrategy(strategy)\r\n\r\n\r\n@external\r\ndef addStrategyToQueue(strategy: address):\r\n    \"\"\"\r\n    @notice\r\n        Adds `strategy` to `withdrawalQueue`.\r\n\r\n        This may only be called by governance or management.\r\n    @dev\r\n        The Strategy will be appended to `withdrawalQueue`, call\r\n        `setWithdrawalQueue` to change the order.\r\n    @param strategy The Strategy to add.\r\n    \"\"\"\r\n    assert msg.sender in [self.management, self.governance]\r\n    # Must be a current Strategy\r\n    assert self.strategies[strategy].activation > 0\r\n    # Can't already be in the queue\r\n    last_idx: uint256 = 0\r\n    for s in self.withdrawalQueue:\r\n        if s == ZERO_ADDRESS:\r\n            break\r\n        assert s != strategy\r\n        last_idx += 1\r\n    # Check if queue is full\r\n    assert last_idx < MAXIMUM_STRATEGIES\r\n\r\n    self.withdrawalQueue[MAXIMUM_STRATEGIES - 1] = strategy\r\n    self._organizeWithdrawalQueue()\r\n    log StrategyAddedToQueue(strategy)\r\n\r\n\r\n@external\r\ndef removeStrategyFromQueue(strategy: address):\r\n    \"\"\"\r\n    @notice\r\n        Remove `strategy` from `withdrawalQueue`.\r\n\r\n        This may only be called by governance or management.\r\n    @dev\r\n        We don't do this with revokeStrategy because it should still\r\n        be possible to withdraw from the Strategy if it's unwinding.\r\n    @param strategy The Strategy to remove.\r\n    \"\"\"\r\n    assert msg.sender in [self.management, self.governance]\r\n    for idx in range(MAXIMUM_STRATEGIES):\r\n        if self.withdrawalQueue[idx] == strategy:\r\n            self.withdrawalQueue[idx] = ZERO_ADDRESS\r\n            self._organizeWithdrawalQueue()\r\n            log StrategyRemovedFromQueue(strategy)\r\n            return  # We found the right location and cleared it\r\n    raise  # We didn't find the Strategy in the queue\r\n\r\n\r\n@view\r\n@internal\r\ndef _debtOutstanding(strategy: address) -> uint256:\r\n    # See note on `debtOutstanding()`.\r\n    if self.debtRatio == 0:\r\n        return self.strategies[strategy].totalDebt\r\n\r\n    strategy_debtLimit: uint256 = (\r\n        self.strategies[strategy].debtRatio\r\n        * self._totalAssets()\r\n        / MAX_BPS\r\n    )\r\n    strategy_totalDebt: uint256 = self.strategies[strategy].totalDebt\r\n\r\n    if self.emergencyShutdown:\r\n        return strategy_totalDebt\r\n    elif strategy_totalDebt <= strategy_debtLimit:\r\n        return 0\r\n    else:\r\n        return strategy_totalDebt - strategy_debtLimit\r\n\r\n\r\n@view\r\n@external\r\ndef debtOutstanding(strategy: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Determines if `strategy` is past its debt limit and if any tokens\r\n        should be withdrawn to the Vault.\r\n    @param strategy The Strategy to check. Defaults to the caller.\r\n    @return The quantity of tokens to withdraw.\r\n    \"\"\"\r\n    return self._debtOutstanding(strategy)\r\n\r\n\r\n@view\r\n@internal\r\ndef _creditAvailable(strategy: address) -> uint256:\r\n    # See note on `creditAvailable()`.\r\n    if self.emergencyShutdown:\r\n        return 0\r\n    vault_totalAssets: uint256 = self._totalAssets()\r\n    vault_debtLimit: uint256 =  self.debtRatio * vault_totalAssets / MAX_BPS \r\n    vault_totalDebt: uint256 = self.totalDebt\r\n    strategy_debtLimit: uint256 = self.strategies[strategy].debtRatio * vault_totalAssets / MAX_BPS\r\n    strategy_totalDebt: uint256 = self.strategies[strategy].totalDebt\r\n    strategy_minDebtPerHarvest: uint256 = self.strategies[strategy].minDebtPerHarvest\r\n    strategy_maxDebtPerHarvest: uint256 = self.strategies[strategy].maxDebtPerHarvest\r\n\r\n    # Exhausted credit line\r\n    if strategy_debtLimit <= strategy_totalDebt or vault_debtLimit <= vault_totalDebt:\r\n        return 0\r\n\r\n    # Start with debt limit left for the Strategy\r\n    available: uint256 = strategy_debtLimit - strategy_totalDebt\r\n\r\n    # Adjust by the global debt limit left\r\n    available = min(available, vault_debtLimit - vault_totalDebt)\r\n\r\n    # Can only borrow up to what the contract has in reserve\r\n    # NOTE: Running near 100% is discouraged\r\n    available = min(available, self.totalIdle)\r\n\r\n    # Adjust by min and max borrow limits (per harvest)\r\n    # NOTE: min increase can be used to ensure that if a strategy has a minimum\r\n    #       amount of capital needed to purchase a position, it's not given capital\r\n    #       it can't make use of yet.\r\n    # NOTE: max increase is used to make sure each harvest isn't bigger than what\r\n    #       is authorized. This combined with adjusting min and max periods in\r\n    #       `BaseStrategy` can be used to effect a \"rate limit\" on capital increase.\r\n    if available < strategy_minDebtPerHarvest:\r\n        return 0\r\n    else:\r\n        return min(available, strategy_maxDebtPerHarvest)\r\n\r\n@view\r\n@external\r\ndef creditAvailable(strategy: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Amount of tokens in Vault a Strategy has access to as a credit line.\r\n\r\n        This will check the Strategy's debt limit, as well as the tokens\r\n        available in the Vault, and determine the maximum amount of tokens\r\n        (if any) the Strategy may draw on.\r\n\r\n        In the rare case the Vault is in emergency shutdown this will return 0.\r\n    @param strategy The Strategy to check. Defaults to caller.\r\n    @return The quantity of tokens available for the Strategy to draw on.\r\n    \"\"\"\r\n    return self._creditAvailable(strategy)\r\n\r\n\r\n@view\r\n@internal\r\ndef _expectedReturn(strategy: address) -> uint256:\r\n    # See note on `expectedReturn()`.\r\n    strategy_lastReport: uint256 = self.strategies[strategy].lastReport\r\n    timeSinceLastHarvest: uint256 = block.timestamp - strategy_lastReport\r\n    totalHarvestTime: uint256 = strategy_lastReport - self.strategies[strategy].activation\r\n\r\n    # NOTE: If either `timeSinceLastHarvest` or `totalHarvestTime` is 0, we can short-circuit to `0`\r\n    if timeSinceLastHarvest > 0 and totalHarvestTime > 0 and Strategy(strategy).isActive():\r\n        # NOTE: Unlikely to throw unless strategy accumalates >1e68 returns\r\n        # NOTE: Calculate average over period of time where harvests have occured in the past\r\n        return (\r\n            self.strategies[strategy].totalGain\r\n            * timeSinceLastHarvest\r\n            / totalHarvestTime\r\n        )\r\n    else:\r\n        return 0  # Covers the scenario when block.timestamp == activation\r\n\r\n\r\n@view\r\n@external\r\ndef availableDepositLimit() -> uint256:\r\n    if self.depositLimit > self._totalAssets():\r\n        return self.depositLimit - self._totalAssets()\r\n    else:\r\n        return 0\r\n\r\n\r\n@view\r\n@external\r\ndef expectedReturn(strategy: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Provide an accurate expected value for the return this `strategy`\r\n        would provide to the Vault the next time `report()` is called\r\n        (since the last time it was called).\r\n    @param strategy The Strategy to determine the expected return for. Defaults to caller.\r\n    @return\r\n        The anticipated amount `strategy` should make on its investment\r\n        since its last report.\r\n    \"\"\"\r\n    return self._expectedReturn(strategy)\r\n\r\n\r\n@internal\r\ndef _assessFees(strategy: address, gain: uint256) -> uint256:\r\n    # Issue new shares to cover fees\r\n    # NOTE: In effect, this reduces overall share price by the combined fee\r\n    # NOTE: may throw if Vault.totalAssets() > 1e64, or not called for more than a year\r\n    if self.strategies[strategy].activation == block.timestamp:\r\n        return 0  # NOTE: Just added, no fees to assess\r\n\r\n    duration: uint256 = block.timestamp - self.strategies[strategy].lastReport\r\n    assert duration != 0 # can't assessFees twice within the same block\r\n\r\n    if gain == 0:\r\n        # NOTE: The fees are not charged if there hasn't been any gains reported\r\n        return 0\r\n\r\n    management_fee: uint256 = (\r\n        (\r\n            (self.strategies[strategy].totalDebt - Strategy(strategy).delegatedAssets())\r\n            * duration \r\n            * self.managementFee\r\n        )\r\n        / MAX_BPS\r\n        / SECS_PER_YEAR\r\n    )\r\n\r\n    # NOTE: Applies if Strategy is not shutting down, or it is but all debt paid off\r\n    # NOTE: No fee is taken when a Strategy is unwinding it's position, until all debt is paid\r\n    strategist_fee: uint256 = (\r\n        gain\r\n        * self.strategies[strategy].performanceFee\r\n        / MAX_BPS\r\n    )\r\n    # NOTE: Unlikely to throw unless strategy reports >1e72 harvest profit\r\n    performance_fee: uint256 = gain * self.performanceFee / MAX_BPS\r\n\r\n    # NOTE: This must be called prior to taking new collateral,\r\n    #       or the calculation will be wrong!\r\n    # NOTE: This must be done at the same time, to ensure the relative\r\n    #       ratio of governance_fee : strategist_fee is kept intact\r\n    total_fee: uint256 = performance_fee + strategist_fee + management_fee\r\n    # ensure total_fee is not more than gain\r\n    if total_fee > gain:\r\n        total_fee = gain\r\n    if total_fee > 0:  # NOTE: If mgmt fee is 0% and no gains were realized, skip\r\n        reward: uint256 = self._issueSharesForAmount(self, total_fee)\r\n\r\n        # Send the rewards out as new shares in this Vault\r\n        if strategist_fee > 0:  # NOTE: Guard against DIV/0 fault\r\n            # NOTE: Unlikely to throw unless sqrt(reward) >>> 1e39\r\n            strategist_reward: uint256 = (\r\n                strategist_fee\r\n                * reward\r\n                / total_fee\r\n            )\r\n            self._transfer(self, strategy, strategist_reward)\r\n            # NOTE: Strategy distributes rewards at the end of harvest()\r\n        # NOTE: Governance earns any dust leftover from flooring math above\r\n        if self.balanceOf[self] > 0:\r\n            self._transfer(self, self.rewards, self.balanceOf[self])\r\n    log FeeReport(management_fee, performance_fee, strategist_fee, duration)\r\n    return total_fee\r\n\r\n\r\n@external\r\ndef report(gain: uint256, loss: uint256, _debtPayment: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice\r\n        Reports the amount of assets the calling Strategy has free (usually in\r\n        terms of ROI).\r\n\r\n        The performance fee is determined here, off of the strategy's profits\r\n        (if any), and sent to governance.\r\n\r\n        The strategist's fee is also determined here (off of profits), to be\r\n        handled according to the strategist on the next harvest.\r\n\r\n        This may only be called by a Strategy managed by this Vault.\r\n    @dev\r\n        For approved strategies, this is the most efficient behavior.\r\n        The Strategy reports back what it has free, then Vault \"decides\"\r\n        whether to take some back or give it more. Note that the most it can\r\n        take is `gain + _debtPayment`, and the most it can give is all of the\r\n        remaining reserves. Anything outside of those bounds is abnormal behavior.\r\n\r\n        All approved strategies must have increased diligence around\r\n        calling this function, as abnormal behavior could become catastrophic.\r\n    @param gain\r\n        Amount Strategy has realized as a gain on it's investment since its\r\n        last report, and is free to be given back to Vault as earnings\r\n    @param loss\r\n        Amount Strategy has realized as a loss on it's investment since its\r\n        last report, and should be accounted for on the Vault's balance sheet.\r\n        The loss will reduce the debtRatio. The next time the strategy will harvest,\r\n        it will pay back the debt in an attempt to adjust to the new debt limit.\r\n    @param _debtPayment\r\n        Amount Strategy has made available to cover outstanding debt\r\n    @return Amount of debt outstanding (if totalDebt > debtLimit or emergency shutdown).\r\n    \"\"\"\r\n\r\n    # Only approved strategies can call this function\r\n    assert self.strategies[msg.sender].activation > 0\r\n    # No lying about total available to withdraw!\r\n    assert self.token.balanceOf(msg.sender) >= gain + _debtPayment\r\n\r\n    # We have a loss to report, do it before the rest of the calculations\r\n    if loss > 0:\r\n        self._reportLoss(msg.sender, loss)\r\n\r\n    # Assess both management fee and performance fee, and issue both as shares of the vault\r\n    totalFees: uint256 = self._assessFees(msg.sender, gain)\r\n\r\n    # Returns are always \"realized gains\"\r\n    self.strategies[msg.sender].totalGain += gain\r\n\r\n    # Compute the line of credit the Vault is able to offer the Strategy (if any)\r\n    credit: uint256 = self._creditAvailable(msg.sender)\r\n\r\n    # Outstanding debt the Strategy wants to take back from the Vault (if any)\r\n    # NOTE: debtOutstanding <= StrategyParams.totalDebt\r\n    debt: uint256 = self._debtOutstanding(msg.sender)\r\n    debtPayment: uint256 = min(_debtPayment, debt)\r\n\r\n    if debtPayment > 0:\r\n        self.strategies[msg.sender].totalDebt -= debtPayment\r\n        self.totalDebt -= debtPayment\r\n        debt -= debtPayment\r\n        # NOTE: `debt` is being tracked for later\r\n\r\n    # Update the actual debt based on the full credit we are extending to the Strategy\r\n    # or the returns if we are taking funds back\r\n    # NOTE: credit + self.strategies[msg.sender].totalDebt is always < self.debtLimit\r\n    # NOTE: At least one of `credit` or `debt` is always 0 (both can be 0)\r\n    if credit > 0:\r\n        self.strategies[msg.sender].totalDebt += credit\r\n        self.totalDebt += credit\r\n\r\n    # Give/take balance to Strategy, based on the difference between the reported gains\r\n    # (if any), the debt payment (if any), the credit increase we are offering (if any),\r\n    # and the debt needed to be paid off (if any)\r\n    # NOTE: This is just used to adjust the balance of tokens between the Strategy and\r\n    #       the Vault based on the Strategy's debt limit (as well as the Vault's).\r\n    totalAvail: uint256 = gain + debtPayment\r\n    if totalAvail < credit:  # credit surplus, give to Strategy\r\n        self.totalIdle -= credit - totalAvail\r\n        self.erc20_safe_transfer(self.token.address, msg.sender, credit - totalAvail)\r\n    elif totalAvail > credit:  # credit deficit, take from Strategy\r\n        self.totalIdle += totalAvail - credit\r\n        self.erc20_safe_transferFrom(self.token.address, msg.sender, self, totalAvail - credit)\r\n    # else, don't do anything because it is balanced\r\n\r\n    # Profit is locked and gradually released per block\r\n    # NOTE: compute current locked profit and replace with sum of current and new\r\n    lockedProfitBeforeLoss: uint256 = self._calculateLockedProfit() + gain - totalFees\r\n    if lockedProfitBeforeLoss > loss: \r\n        self.lockedProfit = lockedProfitBeforeLoss - loss\r\n    else:\r\n        self.lockedProfit = 0\r\n\r\n    # Update reporting time\r\n    self.strategies[msg.sender].lastReport = block.timestamp\r\n    self.lastReport = block.timestamp\r\n\r\n    log StrategyReported(\r\n        msg.sender,\r\n        gain,\r\n        loss,\r\n        debtPayment,\r\n        self.strategies[msg.sender].totalGain,\r\n        self.strategies[msg.sender].totalLoss,\r\n        self.strategies[msg.sender].totalDebt,\r\n        credit,\r\n        self.strategies[msg.sender].debtRatio,\r\n    )\r\n\r\n    if self.strategies[msg.sender].debtRatio == 0 or self.emergencyShutdown:\r\n        # Take every last penny the Strategy has (Emergency Exit/revokeStrategy)\r\n        # NOTE: This is different than `debt` in order to extract *all* of the returns\r\n        return Strategy(msg.sender).estimatedTotalAssets()\r\n    else:\r\n        # Otherwise, just return what we have as debt outstanding\r\n        return debt\r\n\r\n\r\n@external\r\ndef sweep(token: address, amount: uint256 = MAX_UINT256):\r\n    \"\"\"\r\n    @notice\r\n        Removes tokens from this Vault that are not the type of token managed\r\n        by this Vault. This may be used in case of accidentally sending the\r\n        wrong kind of token to this Vault.\r\n\r\n        Tokens will be sent to `governance`.\r\n\r\n        This will fail if an attempt is made to sweep the tokens that this\r\n        Vault manages.\r\n\r\n        This may only be called by governance.\r\n    @param token The token to transfer out of this vault.\r\n    @param amount The quantity or tokenId to transfer out.\r\n    \"\"\"\r\n    assert msg.sender == self.governance\r\n    # Can't be used to steal what this Vault is protecting\r\n    value: uint256 = amount\r\n    if value == MAX_UINT256:\r\n        value = ERC20(token).balanceOf(self)\r\n\r\n    if token == self.token.address:\r\n        value = self.token.balanceOf(self) - self.totalIdle\r\n\r\n    log Sweep(token, value)\r\n    self.erc20_safe_transfer(token, self.governance, value)", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true},{\"name\":\"shares\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Sweep\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LockedProfitDegradationUpdated\",\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyAdded\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true},{\"name\":\"debtRatio\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"minDebtPerHarvest\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"maxDebtPerHarvest\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"performanceFee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyReported\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true},{\"name\":\"gain\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"loss\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"debtPaid\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"totalGain\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"totalLoss\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"totalDebt\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"debtAdded\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"debtRatio\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FeeReport\",\"inputs\":[{\"name\":\"management_fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"performance_fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"strategist_fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"duration\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"WithdrawFromStrategy\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true},{\"name\":\"totalDebt\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"loss\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateGovernance\",\"inputs\":[{\"name\":\"governance\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateRewards\",\"inputs\":[{\"name\":\"rewards\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateDepositLimit\",\"inputs\":[{\"name\":\"depositLimit\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdatePerformanceFee\",\"inputs\":[{\"name\":\"performanceFee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateManagementFee\",\"inputs\":[{\"name\":\"managementFee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateGuardian\",\"inputs\":[{\"name\":\"guardian\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"EmergencyShutdown\",\"inputs\":[{\"name\":\"active\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateWithdrawalQueue\",\"inputs\":[{\"name\":\"queue\",\"type\":\"address[20]\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyUpdateDebtRatio\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true},{\"name\":\"debtRatio\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyUpdateMinDebtPerHarvest\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true},{\"name\":\"minDebtPerHarvest\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyUpdateMaxDebtPerHarvest\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true},{\"name\":\"maxDebtPerHarvest\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyUpdatePerformanceFee\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true},{\"name\":\"performanceFee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyMigrated\",\"inputs\":[{\"name\":\"oldVersion\",\"type\":\"address\",\"indexed\":true},{\"name\":\"newVersion\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyRevoked\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyRemovedFromQueue\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StrategyAddedToQueue\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewPendingGovernance\",\"inputs\":[{\"name\":\"pendingGovernance\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"governance\",\"type\":\"address\"},{\"name\":\"rewards\",\"type\":\"address\"},{\"name\":\"nameOverride\",\"type\":\"string\"},{\"name\":\"symbolOverride\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"governance\",\"type\":\"address\"},{\"name\":\"rewards\",\"type\":\"address\"},{\"name\":\"nameOverride\",\"type\":\"string\"},{\"name\":\"symbolOverride\",\"type\":\"string\"},{\"name\":\"guardian\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"governance\",\"type\":\"address\"},{\"name\":\"rewards\",\"type\":\"address\"},{\"name\":\"nameOverride\",\"type\":\"string\"},{\"name\":\"symbolOverride\",\"type\":\"string\"},{\"name\":\"guardian\",\"type\":\"address\"},{\"name\":\"management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"apiVersion\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setName\",\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setSymbol\",\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setGovernance\",\"inputs\":[{\"name\":\"governance\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acceptGovernance\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setRewards\",\"inputs\":[{\"name\":\"rewards\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLockedProfitDegradation\",\"inputs\":[{\"name\":\"degradation\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setDepositLimit\",\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setPerformanceFee\",\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setManagementFee\",\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setGuardian\",\"inputs\":[{\"name\":\"guardian\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setEmergencyShutdown\",\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setWithdrawalQueue\",\"inputs\":[{\"name\":\"queue\",\"type\":\"address[20]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalAssets\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxAvailableShares\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"maxShares\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"maxShares\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"maxShares\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"maxLoss\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pricePerShare\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addStrategy\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"},{\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"name\":\"minDebtPerHarvest\",\"type\":\"uint256\"},{\"name\":\"maxDebtPerHarvest\",\"type\":\"uint256\"},{\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateStrategyDebtRatio\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"},{\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateStrategyMinDebtPerHarvest\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"},{\"name\":\"minDebtPerHarvest\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateStrategyMaxDebtPerHarvest\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"},{\"name\":\"maxDebtPerHarvest\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateStrategyPerformanceFee\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"},{\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"migrateStrategy\",\"inputs\":[{\"name\":\"oldVersion\",\"type\":\"address\"},{\"name\":\"newVersion\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revokeStrategy\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"revokeStrategy\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addStrategyToQueue\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"removeStrategyFromQueue\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"debtOutstanding\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"debtOutstanding\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditAvailable\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"creditAvailable\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"availableDepositLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"expectedReturn\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"expectedReturn\",\"inputs\":[{\"name\":\"strategy\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"report\",\"inputs\":[{\"name\":\"gain\",\"type\":\"uint256\"},{\"name\":\"loss\",\"type\":\"uint256\"},{\"name\":\"_debtPayment\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sweep\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sweep\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"governance\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"guardian\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"strategies\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"name\":\"activation\",\"type\":\"uint256\"},{\"name\":\"debtRatio\",\"type\":\"uint256\"},{\"name\":\"minDebtPerHarvest\",\"type\":\"uint256\"},{\"name\":\"maxDebtPerHarvest\",\"type\":\"uint256\"},{\"name\":\"lastReport\",\"type\":\"uint256\"},{\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"name\":\"totalGain\",\"type\":\"uint256\"},{\"name\":\"totalLoss\",\"type\":\"uint256\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"withdrawalQueue\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emergencyShutdown\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"depositLimit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"debtRatio\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalIdle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalDebt\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastReport\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"activation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lockedProfit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lockedProfitDegradation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"managementFee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"performanceFee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.3", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}