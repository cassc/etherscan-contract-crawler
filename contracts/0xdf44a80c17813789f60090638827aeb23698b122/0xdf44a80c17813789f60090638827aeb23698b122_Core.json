{"SourceCode": "pragma solidity 0.5.7;\r\n\r\nlibrary SafeMath {\r\n    \r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a && c >= b);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    bool public transferStatus = true;\r\n    event ownershipChanged(address indexed _invoker, address indexed _newOwner);        \r\n    event transferStatusChanged(bool _newStatus);\r\n    uint256 public _totalSupply = 100000000000000000000000000;\r\n    mapping(address => uint256) userBalances;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier _onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _AddressToMake) public _onlyOwner returns (bool _success) {\r\n\r\n        owner = _AddressToMake;\r\n        emit ownershipChanged(msg.sender, _AddressToMake);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function changeTransferStatus(bool _newStatus) public _onlyOwner returns (bool _success) {\r\n\r\n        transferStatus = _newStatus;\r\n        emit transferStatusChanged(_newStatus);\r\n    \r\n        return true;\r\n    \r\n    }\r\n\t\r\n   function mint(uint256 _amount) public _onlyOwner returns (bool _success) {\r\n\r\n        _totalSupply = SafeMath.safeAdd(_totalSupply, _amount);\r\n        userBalances[msg.sender] = SafeMath.safeAdd(userBalances[msg.sender], _amount);\r\n\t\r\n        emit Transfer(address(0), msg.sender, _amount);\r\n\r\n        return true;\r\n\r\n    }    \r\n\t\r\n   function mintToAddress(address _address, uint256 _amount) public _onlyOwner returns (bool _success) {\r\n\r\n        _totalSupply = SafeMath.safeAdd(_totalSupply, _amount);\r\n        userBalances[_address] = SafeMath.safeAdd(userBalances[_address], _amount);\r\n\t\r\n        emit Transfer(address(0), _address, _amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function burn(uint256 _amount) public _onlyOwner returns (bool _success) {\r\n\r\n        require(SafeMath.safeSub(userBalances[msg.sender], _amount) >= 0);\r\n        _totalSupply = SafeMath.safeSub(_totalSupply, _amount);\r\n        userBalances[msg.sender] = SafeMath.safeSub(userBalances[msg.sender], _amount);\r\n\t\r\n\t    emit Transfer(msg.sender, address(0), _amount);\r\n\r\n        return true;\r\n\r\n    }\r\n        \r\n}\r\n\r\ncontract Core is Owned {\r\n\r\n    string public name = \"stableDEX\";\r\n    string public symbol = \"STDEX\";\r\n    uint256 public decimals = 18;\r\n    mapping(address => mapping(address => uint256)) public userAllowances;\r\n\r\n    constructor() public {\r\n\r\n        userBalances[msg.sender] = _totalSupply;\r\n\r\n    }\r\n\r\n    function _transferCheck(address _sender, address _recipient, uint256 _amount) private view returns (bool success) {\r\n\r\n        require(transferStatus == true);\r\n        require(_recipient != address(0));\r\n        require(userBalances[_sender] >= _amount);\r\n        require(SafeMath.safeSub(userBalances[_sender], _amount) >= 0);\r\n        require(SafeMath.safeAdd(userBalances[_recipient], _amount) >= userBalances[_recipient]);\r\n        \r\n        return true;\r\n\r\n    }\r\n\r\n    function transfer(address _receiver, uint256 _amount) public returns (bool status) {\r\n\r\n        require(_transferCheck(msg.sender, _receiver, _amount));\r\n        userBalances[msg.sender] = SafeMath.safeSub(userBalances[msg.sender], _amount);\r\n        userBalances[_receiver] = SafeMath.safeAdd(userBalances[_receiver], _amount);\r\n        \r\n        emit Transfer(msg.sender, _receiver, _amount);\r\n        \r\n        return true;\r\n\r\n    }\r\n\r\n    function transferFrom(address _owner, address _receiver, uint256 _amount) public returns (bool status) {\r\n\r\n        require(_transferCheck(_owner, _receiver, _amount));\r\n        require(SafeMath.safeSub(userAllowances[_owner][msg.sender], _amount) >= 0);\r\n        userAllowances[_owner][msg.sender] = SafeMath.safeSub(userAllowances[_owner][msg.sender], _amount);\r\n        userBalances[_owner] = SafeMath.safeSub(userBalances[_owner], _amount);\r\n        userBalances[_receiver] = SafeMath.safeAdd(userBalances[_receiver], _amount);\r\n        \r\n        emit Transfer(_owner, _receiver, _amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function multiTransfer(address[] memory _destinations, uint256[] memory _values) public returns (uint256) {\r\n\r\n        uint256 max = 0;\r\n        uint256 totalSent = 0;\r\n\r\n\t\tfor (uint256 i = 0; i < _destinations.length; i++) {\r\n\r\n            require(_transferCheck(msg.sender, _destinations[i], _values[i]));\r\n            userBalances[_destinations[i]] = SafeMath.safeAdd(userBalances[_destinations[i]], _values[i]);\r\n            totalSent += _values[i];\r\n\r\n            emit Transfer(msg.sender, _destinations[i], _values[i]);\r\n\r\n            max = i;\r\n\r\n        }\r\n\r\n        userBalances[msg.sender] = SafeMath.safeSub(userBalances[msg.sender], totalSent);\r\n\r\n        return max;\r\n\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public returns (bool approved) {\r\n\r\n        require(_amount >= 0);\r\n        userAllowances[msg.sender][_spender] = _amount;\r\n        \r\n        emit Approval(msg.sender, _spender, _amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function balanceOf(address _address) public view returns (uint256 balance) {\r\n\r\n        return userBalances[_address];\r\n\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 allowed) {\r\n\r\n        return userAllowances[_owner][_spender];\r\n\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 supply) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_destinations\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintToAddress\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"changeTransferStatus\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_AddressToMake\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAllowances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ownershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"transferStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "Core", "CompilerVersion": "v0.5.7+commit.6da8b019", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://91d00fbea16b59c4b56969b2678dac2ee166091d3d6d4e63ac7afa410a972cca"}