{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/KeyPoster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\n//  __   ___    _____  __      __  _____      ____      _____   ________    _____   ______\\n// () ) / __)  / ___/  ) \\\\    / ( (  __ \\\\    / __ \\\\    / ____\\\\ (___  ___)  / ___/  (   __ \\\\\\n// ( (_/ /    ( (__     \\\\ \\\\  / /   ) )_) )  / /  \\\\ \\\\  ( (___       ) )    ( (__     ) (__) )\\n// ()   (      ) __)     \\\\ \\\\/ /   (  ___/  ( ()  () )  \\\\___ \\\\     ( (      ) __)   (    __/\\n// () /\\\\ \\\\    ( (         \\\\  /     ) )     ( ()  () )      ) )     ) )    ( (       ) \\\\ \\\\  _\\n// ( (  \\\\ \\\\    \\\\ \\\\___      )(     ( (       \\\\ \\\\__/ /   ___/ /     ( (      \\\\ \\\\___  ( ( \\\\ \\\\_))\\n// ()_)  \\\\_\\\\    \\\\____\\\\    /__\\\\    /__\\\\       \\\\____/   /____/      /__\\\\      \\\\____\\\\  )_) \\\\__/\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**************************************************************************\\n * @dev KeyPoster is a simple contract that stores an array of addresses. *\\n * @dev The contract uses the term \\\"Key\\\" in place of Address in order to  *\\n * @dev avoid confusion from solidity functions. Keys can only be added   *\\n * @dev or removed by the contract owner. The contract has a function to  *\\n * @dev transfer ownership. Anybody can check if an address (key) is in   *\\n * @dev the list (returns bool) or may call a complete list of keys       *\\n * @dev stored. A key is also stored with the block number the key was    *\\n * @dev added. License is Unlicense, open source and free to use.         *\\n *************************************************************************/\\n\\ncontract KeyPoster is Ownable {\\n    // Mapping to keep track of keys\\n    mapping(address => bool) private _keys;\\n    mapping(address => uint256) private _keyBlockNumbers;\\n\\n    // Array to store all keys for efficient retrieval\\n    address[] private _allKeys;\\n\\n    // Events\\n    event KeyAdded(address indexed key, uint256 blockNumber);\\n    event KeyRemoved(address indexed key);\\n\\n    struct KeyData {\\n        address key;\\n        uint256 blockNumber;\\n    }\\n\\n    /**\\n     * @dev Constructor that sets the initial owner.\\n     * @param initialOwner The initial owner's address.\\n     */\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Internal function to determine if an address is a contract.\\n     * @param addr The address to check.\\n     * @return bool True if the address is a contract, otherwise false.\\n     */\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Add a Key.\\n     * Only callable by the owner.\\n     * Validates that the key is not a contract address.\\n     * @param key The Key to add.\\n     */\\n    function addKey(address key) external onlyOwner {\\n        require(!_keys[key], \\\"Key already exists\\\");\\n        require(!_isContract(key), \\\"Key cannot be a contract address\\\");\\n        _keys[key] = true;\\n        _keyBlockNumbers[key] = block.number;\\n        _allKeys.push(key);\\n        emit KeyAdded(key, block.number);\\n    }\\n\\n    /**\\n     * @dev Remove a Key.\\n     * Only callable by the owner.\\n     * @param key The Key to remove.\\n     */\\n    function removeKey(address key) external onlyOwner {\\n        require(_keys[key], \\\"Key does not exist\\\");\\n        _keys[key] = false;\\n\\n        // Remove the key from _allKeys array\\n        for (uint256 i = 0; i < _allKeys.length; i++) {\\n            if (_allKeys[i] == key) {\\n                _allKeys[i] = _allKeys[_allKeys.length - 1];\\n                _allKeys.pop();\\n                break;\\n            }\\n        }\\n        emit KeyRemoved(key);\\n    }\\n\\n    /**\\n     * @dev Check if a Key exists.\\n     * @param key The Key to check.\\n     * @return bool True if the Key exists, otherwise false.\\n     */\\n    function isKey(address key) external view returns (bool) {\\n        return _keys[key];\\n    }\\n\\n    /**\\n     * @dev Retrieve all Keys along with the block numbers they were added.\\n     * @return KeyData[] The list of all Keys and their block numbers.\\n     */\\n    function getAllKeys() external view returns (KeyData[] memory) {\\n        KeyData[] memory keysWithBlockNumbers = new KeyData[](_allKeys.length);\\n        for (uint256 i = 0; i < _allKeys.length; i++) {\\n            keysWithBlockNumbers[i] = KeyData(\\n                _allKeys[i],\\n                _keyBlockNumbers[_allKeys[i]]\\n            );\\n        }\\n        return keysWithBlockNumbers;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/KeyPosterFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.21;\\n\\nimport \\\"./KeyPoster.sol\\\";\\n\\ncontract KeyPosterFactory {\\n    event KeyPosterCreated(address indexed newKeyPoster, address indexed owner);\\n\\n    function createKeyPoster() public returns (address) {\\n        KeyPoster newKeyPoster = new KeyPoster(msg.sender);\\n        emit KeyPosterCreated(address(newKeyPoster), msg.sender);\\n        return address(newKeyPoster);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKeyPoster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"KeyPosterCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createKeyPoster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeyPosterFactory", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}