{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/helpers/AddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface EtherFiProxy {\\n    function getImplementation() external view returns (address);\\n}\\n\\ncontract AddressProvider {\\n\\n    //--------------------------------------------------------------------------------------\\n    //---------------------------------  STATE-VARIABLES  ----------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    struct ContractData {\\n        address contractAddress;\\n        string name;\\n    }\\n\\n    mapping(string => ContractData) public contracts;\\n    uint256 public numberOfContracts;\\n\\n    address public owner;\\n\\n    event ContractAdded(address contractAddress, string name);\\n    event ContractRemoved(address contractAddress, string name);\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    //--------------------------------------------------------------------------------------\\n    //----------------------------  STATE-CHANGING FUNCTIONS  ------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    /// @notice Adds contracts to the address provider that have already been deployed\\n    /// @dev Only called by the contract owner\\n    /// @param _contractAddress the proxy address of the contract we are adding\\n    /// @param _name the name of the contract for reference\\n    function addContract(address _contractAddress, string memory _name) external onlyOwner {\\n        require(contracts[_name].contractAddress == address(0), \\\"Contract already exists\\\");\\n        contracts[_name] = ContractData({\\n            contractAddress: _contractAddress,\\n            name: _name\\n        });\\n        numberOfContracts++;\\n\\n        emit ContractAdded(_contractAddress, _name);\\n    }\\n\\n    /// @notice Removes a contract\\n    /// @dev Only called by the contract owner\\n    /// @param _name the name of the contract for reference\\n    function removeContract(string memory _name) external onlyOwner {\\n        ContractData memory contractData = contracts[_name];\\n        require(contracts[_name].contractAddress != address(0), \\\"Contract does not exist\\\");\\n        \\n        address contractAddress = contractData.contractAddress;\\n        delete contracts[_name];\\n        numberOfContracts--;\\n\\n        emit ContractRemoved(contractAddress, _name);\\n    }\\n\\n    //--------------------------------------------------------------------------------------\\n    //-----------------------------------  SETTER  -----------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    /// @notice Facilitates the change of ownership\\n    /// @dev Only called by the contract owner\\n    /// @param _newOwner the address of the new owner\\n    function setOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Cannot be zero addr\\\");\\n        owner = _newOwner;\\n    }\\n\\n    //--------------------------------------------------------------------------------------\\n    //------------------------------------  GETTER  ----------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    function getContractAddress(string memory _name) external view returns (address) {\\n        return contracts[_name].contractAddress;\\n    }\\n\\n    function getImplementationAddress(string memory _name) external view returns (address) {\\n        address localContractAddress = contracts[_name].contractAddress;\\n        try EtherFiProxy(localContractAddress).getImplementation() returns (address result) {\\n            return result;\\n        } catch {\\n            return address(0);\\n        }\\n    }\\n\\n    //--------------------------------------------------------------------------------------\\n    //-----------------------------------  MODIFIERS  --------------------------------------\\n    //--------------------------------------------------------------------------------------\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner function\\\");\\n        _;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@uniswap/=lib/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getImplementationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"removeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AddressProvider", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000f8a86ea1ac39ec529814c377bd484387d395421e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}