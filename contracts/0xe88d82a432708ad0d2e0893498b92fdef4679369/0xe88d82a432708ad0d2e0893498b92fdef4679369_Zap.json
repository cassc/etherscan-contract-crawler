{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/zap/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IAsyncSwapper, SwapParams } from \\\"src/interfaces/swapper/IAsyncSwapper.sol\\\";\\nimport { IRegistry } from \\\"src/interfaces/pool/IRegistry.sol\\\";\\nimport { IPool } from \\\"src/interfaces/pool/IPool.sol\\\";\\nimport { IStargateRouter } from \\\"src/interfaces/stargate/IStargateRouter.sol\\\";\\nimport { ITokenKeeper } from \\\"src/interfaces/zap/ITokenKeeper.sol\\\";\\nimport { IZap } from \\\"src/interfaces/zap/IZap.sol\\\";\\n\\nimport { Error } from \\\"src/librairies/Error.sol\\\";\\nimport { ERC20Utils } from \\\"src/librairies/ERC20Utils.sol\\\";\\n\\nimport { Address } from \\\"openzeppelin-contracts/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable, Ownable2Step } from \\\"openzeppelin-contracts/contracts/access/Ownable2Step.sol\\\";\\nimport { ReentrancyGuard } from \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Zap is IZap, Ownable2Step, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    address public immutable swapper;\\n    address public immutable registry;\\n    address public immutable stargateRouter;\\n    address public immutable tokenKeeper;\\n\\n    uint256 public constant DST_GAS = 200_000;\\n\\n    // chainId -> stargateReceiver\\n    mapping(uint16 => address) public stargateDestinations;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            CONSTRUCTOR\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        address _swapper,\\n        address _registry,\\n        address _stargateRouter,\\n        address _tokenKeeper,\\n        address _owner\\n    ) Ownable(_owner) {\\n        if (_swapper == address(0)) revert Error.ZeroAddress();\\n        if (_registry == address(0)) revert Error.ZeroAddress();\\n        if (_stargateRouter == address(0)) revert Error.ZeroAddress();\\n        if (_tokenKeeper == address(0)) revert Error.ZeroAddress();\\n        swapper = _swapper;\\n        registry = _registry;\\n        stargateRouter = _stargateRouter;\\n        tokenKeeper = _tokenKeeper;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IZap\\n    function stake(address _pool, uint256 _amount) external poolExists(_pool) {\\n        if (_amount == 0) revert Error.ZeroAmount();\\n\\n        IERC20 token = IPool(_pool).token();\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        _stake(_pool, address(token), _amount);\\n    }\\n\\n    /// @inheritdoc IZap\\n    function stakeFromBridge(address _pool) external poolExists(_pool) {\\n        IERC20 token = IPool(_pool).token();\\n        uint256 amount = ITokenKeeper(tokenKeeper).pullToken(address(token), msg.sender);\\n\\n        _stake(_pool, address(token), amount);\\n    }\\n\\n    /// @inheritdoc IZap\\n    function swapAndStake(SwapParams memory _swapParams, address _pool) external poolExists(_pool) nonReentrant {\\n        if (_swapParams.buyTokenAddress != address(IPool(_pool).token())) revert WrongPoolToken();\\n\\n        IERC20 sellToken = IERC20(_swapParams.sellTokenAddress);\\n        sellToken.safeTransferFrom(msg.sender, address(this), _swapParams.sellAmount);\\n\\n        uint256 amountSwapped = _swap(_swapParams);\\n        _stake(_pool, _swapParams.buyTokenAddress, amountSwapped);\\n    }\\n\\n    /// @inheritdoc IZap\\n    function swapAndStakeFromBridge(\\n        SwapParams memory _swapParams,\\n        address _pool\\n    ) external poolExists(_pool) nonReentrant {\\n        if (_swapParams.buyTokenAddress != address(IPool(_pool).token())) revert WrongPoolToken();\\n\\n        IERC20 sellToken = IERC20(_swapParams.sellTokenAddress);\\n        uint256 amountToSwap = ITokenKeeper(tokenKeeper).pullToken(address(sellToken), msg.sender);\\n        if (_swapParams.sellAmount != amountToSwap) revert WrongAmount();\\n\\n        uint256 amountSwapped = _swap(_swapParams);\\n        _stake(_pool, _swapParams.buyTokenAddress, amountSwapped);\\n    }\\n\\n    /// @inheritdoc IZap\\n    function swapAndBridge(\\n        SwapParams memory _swapParams,\\n        uint256 _minAmount,\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _dstAccount\\n    ) external payable nonReentrant {\\n        IERC20 sellToken = IERC20(_swapParams.sellTokenAddress);\\n        sellToken.safeTransferFrom(msg.sender, address(this), _swapParams.sellAmount);\\n        uint256 amountSwapped = _swap(_swapParams);\\n        _bridge(\\n            _swapParams.buyTokenAddress, amountSwapped, _minAmount, _dstChainId, _srcPoolId, _dstPoolId, _dstAccount\\n        );\\n    }\\n\\n    /// @inheritdoc IZap\\n    function bridge(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _dstAccount\\n    ) external payable {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        _bridge(_token, _amount, _minAmount, _dstChainId, _srcPoolId, _dstPoolId, _dstAccount);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            SETTERS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IZap\\n    function setStargateDestinations(uint16[] calldata chainIds, address[] calldata destinations) external onlyOwner {\\n        uint256 len = chainIds.length;\\n        if (len == 0) revert Error.ZeroAmount();\\n        if (len != destinations.length) revert Error.ArrayLengthMismatch();\\n\\n        for (uint256 i = 0; i < len; ++i) {\\n            uint16 chainId = chainIds[i];\\n            if (chainId == 0) revert InvalidChainId();\\n            // Zero address is ok here to allow for cancelling of chains\\n            stargateDestinations[chainId] = destinations[i];\\n        }\\n\\n        emit StargateDestinationsSet(chainIds, destinations);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t\\t\\t\\t\\t    INTERNAL FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Bridges tokens to a specific chain using Stargate\\n     *  @param _token The token address\\n     *  @param _amount The amount of token to bridge\\n     *  @param _minAmount The minimum amount of bridged tokens caller is willing to accept\\n     *  @param _dstChainId The destination chain ID\\n     *  @param _srcPoolId The source pool ID\\n     *  @param _dstPoolId The destination pool ID\\n     *  @param _dstAccount The destination account\\n     */\\n    function _bridge(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _dstAccount\\n    ) internal {\\n        address dstStargateReceiver = stargateDestinations[_dstChainId];\\n        if (_token == address(0)) revert Error.ZeroAddress();\\n        if (_amount == 0) revert Error.ZeroAmount();\\n        if (dstStargateReceiver == address(0)) revert InvalidChainId();\\n        if (_dstAccount == address(0)) revert Error.ZeroAddress();\\n\\n        ERC20Utils._approve(IERC20(_token), stargateRouter, _amount);\\n\\n        bytes memory data = abi.encode(_dstAccount);\\n\\n        IStargateRouter(stargateRouter).swap{ value: msg.value }(\\n            _dstChainId,\\n            _srcPoolId,\\n            _dstPoolId,\\n            payable(msg.sender),\\n            _amount,\\n            _minAmount,\\n            IStargateRouter.lzTxObj(DST_GAS, 0, \\\"0x\\\"),\\n            abi.encodePacked(dstStargateReceiver),\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice Calls the stakeFor function of a Pool contract\\n     * @param _pool The pool address\\n     * @param _token The token used in the pool\\n     * @param _amount The stake amount\\n     */\\n    function _stake(address _pool, address _token, uint256 _amount) internal {\\n        ERC20Utils._approve(IERC20(_token), _pool, _amount);\\n        IPool(_pool).stakeFor(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Calls IAsyncSwapper.Swap() using delegateCall\\n     * @param _swapParams A struct containing all necessary params allowing a token swap\\n     * @return The amount of tokens which got swapped\\n     */\\n    function _swap(SwapParams memory _swapParams) internal returns (uint256) {\\n        bytes memory returnedData = swapper.functionDelegateCall(\\n            abi.encodeWithSelector(IAsyncSwapper.swap.selector, _swapParams), _delegateSwapFailed\\n        );\\n        return abi.decode(returnedData, (uint256));\\n    }\\n\\n    /**\\n     * @notice A default revert function used in case the error\\n     * from a reverted delegatecall isn't returned\\n     */\\n    // slither-disable-start dead-code\\n    function _delegateSwapFailed() internal pure {\\n        revert DelegateSwapFailed();\\n    }\\n\\n    // slither-disable-end dead-code\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t\\t\\t\\t\\t    MODIFIERS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice modifier checking if a pool is registered\\n    modifier poolExists(address _pool) {\\n        if (!IRegistry(registry).hasPool(_pool, false)) revert PoolNotRegistered();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/swapper/IAsyncSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nstruct SwapParams {\\n    /// @dev The address of the token to be sold.\\n    address sellTokenAddress;\\n    /// @dev The amount of tokens to be sold.\\n    uint256 sellAmount;\\n    /// @dev The address of the token to be bought.\\n    address buyTokenAddress;\\n    /// @dev The expected minimum amount of tokens to be bought.\\n    uint256 buyAmount;\\n    /// @dev Data payload generated off-chain.\\n    bytes data;\\n}\\n\\ninterface IAsyncSwapper {\\n    error SwapFailed();\\n    error InsufficientBuyAmountReceived(address buyTokenAddress, uint256 buyTokenAmountReceived, uint256 buyAmount);\\n\\n    event Swapped(\\n        address indexed sellTokenAddress,\\n        address indexed buyTokenAddress,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 buyTokenAmountReceived\\n    );\\n\\n    /**\\n     * @notice Swaps sellToken for buyToken\\n     * @dev Only payable so it can be called from bridge fn\\n     * @param swapParams Encoded swap data\\n     * @return buyTokenAmountReceived The amount of buyToken received from the swap\\n     */\\n    function swap(SwapParams memory swapParams) external payable returns (uint256 buyTokenAmountReceived);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IRegistry {\\n    /*///////////////////////////////////////////////////////////////\\n                                EVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event FactorySet(address indexed oldFactory, address indexed newFactory);\\n\\n    event PoolApproved(address indexed pool);\\n\\n    event PoolPending(address indexed pool);\\n\\n    event PoolRejected(address indexed pool);\\n\\n    event PoolRemoved(address indexed pool);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            VIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns the address of a pool located at _index\\n     *  @param _index The index of a pool stored in the EnumerableSet\\n     *  @param _isPending True if looking into the pending pools, false for the approved ones\\n     * @return The address of a pool\\n     */\\n    function getPoolAt(uint256 _index, bool _isPending) external view returns (address);\\n\\n    /**\\n     * @notice Returns the total number of pools\\n     * @param _isPending True if looking into the pending pools, false for the approved ones\\n     * @return The total number of pools\\n     */\\n    function getPoolCount(bool _isPending) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if an address is stored in the pools set\\n     * @param _pool The address of a pool\\n     * @param _isPending True if looking into the pending pools, false for the approved ones\\n     * @return True if the pool has been found, false otherwise\\n     */\\n    function hasPool(address _pool, bool _isPending) external view returns (bool);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                SETTERS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Modifies the factory address\\n     * @param _newFactory The new factory address\\n     */\\n    function setFactory(address _newFactory) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Registers a new pool in the pending queue\\n     * @param _newPool The address of a pool\\n     */\\n    function registerPool(address _newPool) external;\\n\\n    /**\\n     * @notice Approves a pool from the pending queue\\n     * @param _pool The address of a pool\\n     */\\n    function approvePool(address _pool) external;\\n\\n    /**\\n     * @notice Rejects a pool from the pending queue\\n     * @param _pool The address of a pool\\n     */\\n    function rejectPool(address _pool) external;\\n\\n    /**\\n     * @notice Removes a pool from the approved pool Set\\n     * @param _pool The address of a pool\\n     */\\n    function removePool(address _pool) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pool/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPool {\\n    /*///////////////////////////////////////////////////////////////\\n                            STRUCTS/ENUMS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    enum Status {\\n        Uninitialized,\\n        Created,\\n        Approved,\\n        Rejected,\\n        Seeding,\\n        Locked,\\n        Unlocked\\n    }\\n\\n    struct StakingSchedule {\\n        /// @notice The timestamp when the seeding period starts.\\n        uint256 seedingStart;\\n        /// @notice The duration of the seeding period.\\n        uint256 seedingPeriod;\\n        /// @notice The timestamp when the locked period starts.\\n        uint256 lockedStart;\\n        /// @notice The duration of the lock period, which is also the duration of rewards.\\n        uint256 lockPeriod;\\n        /// @notice The timestamp when the rewards period ends.\\n        uint256 periodFinish;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error StakeLimitMismatch();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                EVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event PoolInitialized(\\n        address indexed token,\\n        address indexed creator,\\n        uint256 seedingPeriod,\\n        uint256 lockPeriod,\\n        uint256 amount,\\n        uint256 fee,\\n        uint256 maxStakePerAddress,\\n        uint256 maxStakePerPool\\n    );\\n\\n    event PoolApproved();\\n\\n    event PoolRejected();\\n\\n    event PoolStarted(uint256 seedingStart, uint256 periodFinish);\\n\\n    event RewardsRetrieved(address indexed creator, uint256 amount);\\n\\n    event Staked(address indexed account, uint256 amount);\\n\\n    event Unstaked(address indexed account, uint256 amount);\\n\\n    event RewardPaid(address indexed account, uint256 amount);\\n\\n    event ProtocolFeePaid(address indexed treasury, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            INITIALIZER\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializes a new staking pool\\n     * @param _creator The address of pool creator\\n     * @param _treasury The address of the treasury where the rewards will be distributed\\n     * @param _token The address of the token to be staked\\n     * @param _seedingPeriod The period in seconds during which users are able to stake\\n     * @param _lockPeriod The period in seconds during which the staked tokens are locked\\n     * @param _maxStakePerAddress The maximum amount of tokens that can be staked by a single address\\n     * @param _protocolFeeBps The fee charged by the protocol for each pool in bps\\n     * @param _maxStakePerPool The maximum amount of tokens that can be staked in the pool\\n     */\\n    function initialize(\\n        address _creator,\\n        address _treasury,\\n        address _token,\\n        uint256 _seedingPeriod,\\n        uint256 _lockPeriod,\\n        uint256 _maxStakePerAddress,\\n        uint256 _protocolFeeBps,\\n        uint256 _maxStakePerPool\\n    ) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            VIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns the registry this pool is setup with\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current operational status of the pool.\\n     * @return The current status of the pool.\\n     */\\n    function status() external view returns (Status);\\n\\n    /**\\n     * @notice Returns the earned rewards of a specific account\\n     * @param account The address of the account\\n     * @return The amount of rewards earned by the account\\n     */\\n    function earned(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the rewards per token for the current time.\\n     * @dev The total amount of rewards available in the system is fixed, and it needs to be distributed among the users\\n     * based on their token balances and the lock duration.\\n     * Rewards per token represent the amount of rewards that each token is entitled to receive at the current time.\\n     * The calculation takes into account the reward rate (rewardAmount / lockPeriod), the time duration since the last\\n     * update,\\n     * and the total supply of tokens in the pool.\\n     * @return The updated rewards per token value for the current block.\\n     */\\n    function rewardPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the last time where rewards are applicable.\\n     * @return The last time where rewards are applicable.\\n     */\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the token used in the pool\\n     * @return The ERC20 token used in the pool\\n     */\\n    function token() external view returns (IERC20);\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t\\t\\t\\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Approves the pool to start accepting stakes\\n    function approvePool() external;\\n\\n    /// @notice Rejects the pool\\n    function rejectPool() external;\\n\\n    /// @notice Retrieves the reward tokens from the pool if the pool is rejected\\n    function retrieveRewardToken() external;\\n\\n    /// @notice Starts the seeding period for the pool, during which deposits are accepted\\n    function start() external;\\n\\n    /**\\n     * @notice Stakes a certain amount of tokens\\n     * @param _amount The amount of tokens to stake\\n     */\\n    function stake(uint256 _amount) external;\\n\\n    /**\\n     * @notice Stakes a certain amount of tokens for a specified address\\n     * @param _staker The address for which the tokens are being staked\\n     * @param _amount The amount of tokens to stake\\n     */\\n    function stakeFor(address _staker, uint256 _amount) external;\\n\\n    /**\\n     * @notice Unstakes all staked tokens\\n     */\\n    function unstakeAll() external;\\n\\n    /**\\n     * @notice Claims the earned rewards\\n     */\\n    function claim() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stargate/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Ref'd from: https://stargateprotocol.gitbook.io/stargate/interfaces/evm-solidity-interfaces/istargaterouter.sol\\n\\n// solhint-disable func-name-mixedcase,contract-name-camelcase,max-line-length\\n\\npragma solidity 0.8.19;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    /// @param _dstChainId the destination chain id\\n    /// @param _srcPoolId the source Stargate poolId\\n    /// @param _dstPoolId the destination Stargate poolId\\n    /// @param _refundAddress refund address. if msg.sender pays too much gas, return extra eth\\n    /// @param _amountLD total tokens to send to destination chain\\n    /// @param _minAmountLD min amount allowed out\\n    /// @param _lzTxParams default lzTxObj\\n    /// @param _to destination address, the sgReceive() implementer\\n    /// @param _payload bytes payload\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/zap/ITokenKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ITokenKeeper {\\n    /*///////////////////////////////////////////////////////////////\\n                                EVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event BridgedTokensReceived(address indexed account, address indexed token, uint256 amount);\\n\\n    event ZapSet(address indexed zap);\\n\\n    event StargateReceiverSet(address indexed receiver);\\n\\n    event TokenTransferred(address indexed from, address indexed to, address indexed token, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tVIEW FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns an account's balance for a specific token\\n     *  @param _account The address of the account\\n     *  @param _token The address of the token\\n     * @return The account's token balance\\n     */\\n    function balances(address _account, address _token) external returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSETTER FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets both Zap and StargateReceiver addresses\\n     *  @param _zap The Zap contract address\\n     *  @param _receiver The StargateReceiver contract address\\n     */\\n    function setZapAndStargateReceiver(address _zap, address _receiver) external;\\n\\n    /**\\n     * @notice Sets the Zap address\\n     *  @param _zap The Zap contract address\\n     */\\n    function setZap(address _zap) external;\\n\\n    /**\\n     * @notice Sets the StargateReceiver address\\n     *  @param _receiver The StargateReceiver contract address\\n     */\\n    function setStargateReceiver(address _receiver) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n    \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Transfers and registers the bridged tokens for an account\\n     *  @param _account The address of the account\\n     *  @param _token The address of the token\\n     *  @param _amount The bridged amount\\n     */\\n    function transferFromStargateReceiver(address _account, address _token, uint256 _amount) external;\\n\\n    /**\\n     * @notice Transfers tokens to Zap contract for an account\\n     *  @param _token The address of the token\\n     *  @param _account The address of the account\\n     *  @return The transferred amount\\n     */\\n    function pullToken(address _token, address _account) external returns (uint256);\\n\\n    /**\\n     * @notice Allows an account to withdraw their token balance\\n     *  @param _token The address of the token\\n     *  @return The transferred amount\\n     */\\n    function withdraw(address _token) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/zap/IZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { SwapParams } from \\\"src/swapper/AsyncSwapper.sol\\\";\\n\\ninterface IZap {\\n    /*///////////////////////////////////////////////////////////////\\n                                ERRORS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    error DelegateSwapFailed();\\n\\n    error PoolNotRegistered();\\n\\n    error WrongPoolToken();\\n\\n    error WrongAmount();\\n\\n    error InvalidChainId();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                EVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event StargateDestinationsSet(uint16[] chainIds, address[] destinations);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          MUTATIVE FUNCTIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Wrapper function calling the stakeFor function of a Pool contract\\n     * Pulls the funds from msg.sender\\n     *  @param _pool The pool address\\n     *  @param _amount The stake amount\\n     */\\n    function stake(address _pool, uint256 _amount) external;\\n\\n    /**\\n     * @notice Wrapper function calling the stakeFor function of a Pool contract\\n     * Pulls the funds from the TokenKeeper contract\\n     *  @param _pool The pool address\\n     */\\n    function stakeFromBridge(address _pool) external;\\n\\n    /**\\n     * @notice Swaps a token for another using the swapper then stakes it in the pool\\n     *  @param _swapParams A struct containing all necessary params allowing a token swap\\n     *  @param _pool The pool address\\n     */\\n    function swapAndStake(SwapParams memory _swapParams, address _pool) external;\\n\\n    /**\\n     * @notice Swaps a token for another using the swapper then stakes it in the pool\\n     * Pulls the funds from the TokenKeeper contract\\n     *  @param _swapParams A struct containing all necessary params allowing a token swap\\n     *  @param _pool The pool address\\n     */\\n    function swapAndStakeFromBridge(SwapParams memory _swapParams, address _pool) external;\\n\\n    /**\\n     *  @notice Swaps a token for another using the swapper then bridges it\\n     *  @param _swapParams A struct containing all necessary params allowing a token swap\\n     *  @param _minAmount The minimum amount of bridged tokens caller is willing to accept\\n     *  @param _dstChainId The destination chain ID\\n     *  @param _srcPoolId The source pool ID\\n     *  @param _dstPoolId The destination pool ID\\n     *  @param _dstAccount The destination account\\n     */\\n    function swapAndBridge(\\n        SwapParams memory _swapParams,\\n        uint256 _minAmount,\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _dstAccount\\n    ) external payable;\\n\\n    /**\\n     * @notice Bridges tokens to a specific chain using Stargate\\n     *  @param _token The token address\\n     *  @param _amount The amount of token to bridge\\n     *  @param _minAmount The minimum amount of bridged tokens caller is willing to accept\\n     *  @param _dstChainId The destination chain ID\\n     *  @param _srcPoolId The source pool ID\\n     *  @param _dstPoolId The destination pool ID\\n     *  @param _dstAccount The destination account\\n     */\\n    function bridge(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _dstAccount\\n    ) external payable;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            SETTERS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Configure our Stargate receivers on destination chains\\n    /// @dev Arrays are expected to be index synced\\n    /// @param _chainIds List of Stargate chain ids to configure\\n    /// @param _destinations List of our receivers on chain id\\n    function setStargateDestinations(uint16[] calldata _chainIds, address[] calldata _destinations) external;\\n}\\n\"\r\n    },\r\n    \"src/librairies/Error.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary Error {\\n    error AlreadyInitialized();\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error ArrayLengthMismatch();\\n    error AddFailed();\\n    error RemoveFailed();\\n    error Unauthorized();\\n    error UnknownTemplate();\\n    error DeployerNotFound();\\n    error PoolNotRejected();\\n    error PoolNotApproved();\\n    error DepositsDisabled();\\n    error WithdrawalsDisabled();\\n    error InsufficientBalance();\\n    error MaxStakePerAddressExceeded();\\n    error MaxStakePerPoolExceeded();\\n    error FeeTooHigh();\\n    error MismatchRegistry();\\n    error InvalidStatus();\\n}\\n\"\r\n    },\r\n    \"src/librairies/ERC20Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary ERC20Utils {\\n    using SafeERC20 for IERC20;\\n\\n    function _approve(IERC20 _token, address _spender, uint256 _amount) internal {\\n        uint256 currentAllowance = _token.allowance(address(this), _spender);\\n        if (currentAllowance > 0) {\\n            _token.safeDecreaseAllowance(_spender, currentAllowance);\\n        }\\n        _token.safeIncreaseAllowance(_spender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with a\\n     * `customRevert` function as a fallback when `target` reverts.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with a `customRevert` function as a fallback revert reason when `target` reverts.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided `customRevert`) in case of unsuccessful call or if target was not a contract.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check if target is a contract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                if (target.code.length == 0) {\\n                    revert AddressEmptyCode(target);\\n                }\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, customRevert);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or with a default revert error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal view returns (bytes memory) {\\n        return verifyCallResult(success, returndata, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-verifyCallResult-bool-bytes-}[`verifyCallResult`], but with a\\n     * `customRevert` function as a fallback when `success` is `false`.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, customRevert);\\n        }\\n    }\\n\\n    /**\\n     * @dev Default reverting function when no `customRevert` is provided in a function call.\\n     */\\n    function defaultRevert() internal pure {\\n        revert FailedInnerCall();\\n    }\\n\\n    function _revert(bytes memory returndata, function() internal view customRevert) private view {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            customRevert();\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        if (_status == _ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/swapper/AsyncSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IAsyncSwapper, SwapParams } from \\\"src/interfaces/swapper/IAsyncSwapper.sol\\\";\\nimport { Error } from \\\"src/librairies/Error.sol\\\";\\nimport { ERC20Utils } from \\\"src/librairies/ERC20Utils.sol\\\";\\n\\ncontract AsyncSwapper is IAsyncSwapper {\\n    address public immutable aggregator;\\n\\n    constructor(address _aggregator) {\\n        if (_aggregator == address(0)) revert Error.ZeroAddress();\\n        aggregator = _aggregator;\\n    }\\n\\n    /// @inheritdoc IAsyncSwapper\\n    function swap(SwapParams memory swapParams) public payable virtual returns (uint256 buyTokenAmountReceived) {\\n        if (swapParams.buyTokenAddress == address(0)) revert Error.ZeroAddress();\\n        if (swapParams.sellTokenAddress == address(0)) revert Error.ZeroAddress();\\n        if (swapParams.sellAmount == 0) revert Error.ZeroAmount();\\n        if (swapParams.buyAmount == 0) revert Error.ZeroAmount();\\n\\n        IERC20 sellToken = IERC20(swapParams.sellTokenAddress);\\n        IERC20 buyToken = IERC20(swapParams.buyTokenAddress);\\n\\n        uint256 sellTokenBalance = sellToken.balanceOf(address(this));\\n\\n        if (sellTokenBalance < swapParams.sellAmount) revert Error.InsufficientBalance();\\n\\n        ERC20Utils._approve(sellToken, aggregator, swapParams.sellAmount);\\n\\n        uint256 buyTokenBalanceBefore = buyToken.balanceOf(address(this));\\n\\n        // we don't need the returned value, we calculate the buyTokenAmountReceived ourselves\\n        // slither-disable-start low-level-calls,unchecked-lowlevel\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = aggregator.call(swapParams.data);\\n        // slither-disable-end low-level-calls,unchecked-lowlevel\\n\\n        if (!success) revert SwapFailed();\\n\\n        uint256 buyTokenBalanceAfter = buyToken.balanceOf(address(this));\\n        buyTokenAmountReceived = buyTokenBalanceAfter - buyTokenBalanceBefore;\\n\\n        if (buyTokenAmountReceived < swapParams.buyAmount) {\\n            revert InsufficientBuyAmountReceived(address(buyToken), buyTokenAmountReceived, swapParams.buyAmount);\\n        }\\n\\n        // slither-disable-next-line reentrancy-events\\n        emit Swapped(\\n            swapParams.sellTokenAddress,\\n            swapParams.buyTokenAddress,\\n            swapParams.sellAmount,\\n            swapParams.buyAmount,\\n            buyTokenAmountReceived\\n        );\\n\\n        return buyTokenAmountReceived;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"script/=script/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenKeeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegateSwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"chainIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"StargateDestinationsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DST_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dstAccount\",\"type\":\"address\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"chainIds\",\"type\":\"uint16[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"setStargateDestinations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"stakeFromBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"stargateDestinations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapParams\",\"name\":\"_swapParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dstAccount\",\"type\":\"address\"}],\"name\":\"swapAndBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapParams\",\"name\":\"_swapParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"swapAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapParams\",\"name\":\"_swapParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"swapAndStakeFromBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenKeeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Zap", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f532ebb02a26a47c6b913b61a2a6316c0e4e367800000000000000000000000016e8e98ec0d7ea6a4b4037093d79b7d13eb6aece000000000000000000000000ecc19e177d24551aa7ed6bc6fe566eca726cc8a90000000000000000000000004c6bdef904082b33839ae1b88bcfe90aa300215100000000000000000000000014dee79878f9b108dc3f893c11fee88a12fd2261", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}