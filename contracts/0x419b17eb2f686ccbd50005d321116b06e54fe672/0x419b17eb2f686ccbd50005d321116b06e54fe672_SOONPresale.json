{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\ninterface IUniswapRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapRouter02 is IUniswapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ninterface ISOONToken {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function getOwner() external view returns (address);\r\n    function getCirculatingSupply() external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function setOwner(address owner) external;\r\n    function setInitialDistributionFinished(bool value) external;\r\n    function clearStuckBalance(address receiver) external;\r\n    function rescueToken(address tokenAddress, uint256 tokens) external returns (bool success);\r\n    function setPresaleFactory(address presaleFactory) external;\r\n    function setAutoRebase(bool autoRebase) external;\r\n    function setRebaseFrequency(uint256 rebaseFrequency) external;\r\n    function setRewardYield(uint256 rewardYield, uint256 rewardYieldDenominator) external;\r\n    function setNextRebase(uint256 nextRebase) external;\r\n    function manualRebase() external;\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract SOONPresale is Ownable {\r\n    ISOONToken _SOONAddress;\r\n    IERC20 _USDCAddress;\r\n    IUniswapRouter02 public _Uniswap02Router;\r\n\r\n    uint256 private constant USDC_DECIMAL = 6;\r\n\r\n    // min/max cap\r\n    uint256 public minCapUSDC                                       = 1 * 10 **  USDC_DECIMAL;\r\n    uint256 public maxCapUSDC                                       = 10000 * 10 ** USDC_DECIMAL;\r\n    uint256 public pTokenPrice_USDC                                 = 1 * 10 ** (USDC_DECIMAL - 5);\r\n    \r\n    // presale period\r\n    uint256 public start_time;\r\n    uint256 public end_time;\r\n\r\n    // owner address token receive\r\n    address payable fundAddress                             = payable(0x7Ad696FC88B9Cc87c138859F0623872feFa08F56);\r\n\r\n    mapping (address => uint256) private _userPaidUSDC;\r\n\r\n    constructor(address _router, address _SOON, address _USDC) {\r\n        _Uniswap02Router = IUniswapRouter02(_router);\r\n        _SOONAddress = ISOONToken(_SOON);\r\n        _USDCAddress = IERC20(_USDC);\r\n    }\r\n\r\n    function buyTokensByUSDC(uint256 _amountPrice) external {\r\n        require(block.timestamp >= start_time && block.timestamp <= end_time, \"SOONPresale: Not presale period\");\r\n\r\n        // token amount user want to buy\r\n        uint256 tokenAmount = _amountPrice / pTokenPrice_USDC * 10 ** 18;\r\n\r\n        uint256 currentPaid = _userPaidUSDC[msg.sender];\r\n        require(currentPaid + _amountPrice >= minCapUSDC && currentPaid + _amountPrice <= maxCapUSDC, \"SOONPresale: The price is not allowed for presale.\");\r\n        \r\n        // transfer USDC to owners\r\n        _USDCAddress.transferFrom(msg.sender, fundAddress, _amountPrice);\r\n\r\n        // transfer SOON token to user\r\n        _SOONAddress.transfer(msg.sender, tokenAmount);\r\n        \r\n        // add USDC user bought\r\n        _userPaidUSDC[msg.sender] += _amountPrice;\r\n\r\n        emit Presale(address(this), msg.sender, tokenAmount);\r\n    }\r\n\r\n    function buyTokensByETH() external payable {\r\n        require(block.timestamp >= start_time && block.timestamp <= end_time, \"SOONPresale: Not presale period\");\r\n        \r\n        require(msg.value > 0, \"Insufficient ETH amount\");\r\n        uint256 amountPrice = getLatestETHPrice (msg.value);\r\n \r\n        // token amount user want to buy\r\n        uint256 tokenAmount = amountPrice / pTokenPrice_USDC * 10 ** 18;\r\n\r\n        uint256 currentPaid = _userPaidUSDC[msg.sender];\r\n        require(currentPaid + amountPrice >= minCapUSDC && currentPaid + amountPrice <= maxCapUSDC, \"SOONPresale: The price is not allowed for presale.\");\r\n        \r\n        // transfer ETH to owner\r\n        fundAddress.transfer(msg.value);\r\n\r\n        // transfer SOON token to user\r\n        _SOONAddress.transfer(msg.sender, tokenAmount);\r\n\r\n        // add USDC user bought\r\n        _userPaidUSDC[msg.sender] += amountPrice;\r\n\r\n        emit Presale(address(this), msg.sender, tokenAmount);\r\n    }\r\n\r\n    function getLatestETHPrice(uint256 _amount) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _Uniswap02Router.WETH();\r\n        path[1] = address(_USDCAddress);\r\n\r\n        uint256[] memory price_out = _Uniswap02Router.getAmountsOut(_amount, path);\r\n        uint256 price_round = price_out[1] / 10 ** 6;\r\n        return price_round * 10 ** 6;\r\n    }\r\n\r\n    function withdrawAll() external onlyOwner{\r\n        uint256 balance = _SOONAddress.balanceOf(address(this));\r\n        if(balance > 0) {\r\n            _SOONAddress.transfer(msg.sender, balance);\r\n        }\r\n\r\n        emit WithdrawAll (msg.sender, balance);\r\n    }\r\n\r\n    function getUserPaidUSDC () public view returns (uint256) {\r\n        return _userPaidUSDC[msg.sender];\r\n    }\r\n\r\n    function setAddress(address payable _addr) external onlyOwner {\r\n        fundAddress = _addr;\r\n    }\r\n\r\n    function setMinCapUSDC(uint256 _minCap) external onlyOwner {\r\n        minCapUSDC = _minCap;\r\n\r\n        emit SetMinCap(_minCap);\r\n    }\r\n\r\n    function setMaxCapUSDC(uint256 _maxCap) external onlyOwner {\r\n        maxCapUSDC = _maxCap;\r\n\r\n        emit SetMaxCap(_maxCap);\r\n    }\r\n\r\n    function setStartTime(uint256 _time) external onlyOwner {\r\n        start_time = _time;\r\n\r\n        emit SetStartTime(_time);\r\n    }\r\n\r\n    function setEndTime(uint256 _time) external onlyOwner {\r\n        end_time = _time;\r\n\r\n        emit SetEndTime(_time);\r\n    }\r\n\r\n    function setpTokenPriceUSDC(uint256 _pTokenPrice) external onlyOwner {\r\n        pTokenPrice_USDC = _pTokenPrice;\r\n\r\n        emit SetpTokenPrice(_pTokenPrice, 1);\r\n    }\r\n\r\n    event Presale(address _from, address _to, uint256 _amount);\r\n    event SetMinCap(uint256 _amount);\r\n    event SetMaxCap(uint256 _amount);\r\n    event SetpTokenPrice(uint256 _price, uint _type);\r\n    event SetStartTime(uint256 _time);\r\n    event SetEndTime(uint256 _time);\r\n    event WithdrawAll(address addr, uint256 SOON);\r\n\r\n    receive() payable external {}\r\n\r\n    fallback() payable external {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SOON\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Presale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"SetEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetMaxCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetMinCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"SetStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"SetpTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"SOON\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_Uniswap02Router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountPrice\",\"type\":\"uint256\"}],\"name\":\"buyTokensByUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getLatestETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserPaidUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCapUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pTokenPrice_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"}],\"name\":\"setMaxCapUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCap\",\"type\":\"uint256\"}],\"name\":\"setMinCapUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pTokenPrice\",\"type\":\"uint256\"}],\"name\":\"setpTokenPriceUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SOONPresale", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000006c736a378dff964d4d310399d4a3a764537565d2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9b3900e6f050e1c1c909457acd18f92c3f11bcef91eafe92d618ea538a166217"}