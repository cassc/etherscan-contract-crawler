{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/sandwich.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n//https://sandwich.bot/\\r\\n//https://twitter.com/SandwichERC20\\r\\n//https://t.me/SandwichChat\\r\\n//https://archives.sandwich.bot/\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\" multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() payable {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"new owner is zero address\\\");\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n}\\r\\n\\r\\ncontract Sandwich is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _balance;\\r\\n    mapping(address => bool) private _isExcludedWallet;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 private _totalSupply = 5_000_000 * 10 ** _decimals;\\r\\n\\r\\n    string private constant _name = \\\"Sandwich\\\";\\r\\n    string private constant _symbol = \\\"Sandwich\\\";\\r\\n\\r\\n    uint256 public buyFee = 10;\\r\\n    uint256 public sellFee = 10;\\r\\n    uint256 public maxAmountPerTx = (_totalSupply * 1) / 100;\\r\\n    uint256 public maxAmountPerWallet = (_totalSupply * 1) / 100;\\r\\n    uint256 public phoenixPercent = 20;\\r\\n    uint256 private maxSwapTokenAmount = 250_000 * 10 ** _decimals;\\r\\n\\r\\n    IUniswapV2Router02 private constant uniswapV2Router =\\r\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address public uniswapV2Pair;\\r\\n    address public stakingWallet;\\r\\n    address payable private taxWallet;\\r\\n    address payable private phoenixWallet;\\r\\n    address payable private devWallet1;\\r\\n    address payable private devWallet2;\\r\\n\\r\\n    bool private swapEnabled = false;\\r\\n    bool private inSwapAndLiquify = false;\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address owner,\\r\\n        address _taxWallet,\\r\\n        address _phoenixWallet\\r\\n    ) payable {\\r\\n        taxWallet = payable(_taxWallet);\\r\\n        phoenixWallet = payable(_phoenixWallet);\\r\\n        devWallet1 = payable(0xb5ef669ffB567d9fc6dBa54934fcf8618Edc003d);\\r\\n        devWallet2 = payable(0xDb26CD2AB5968e7189201e50F332b80d1f9e2efc);\\r\\n        address cexWallet = 0xbE51c0Aa0Fe35A16bDD1dB48c8Ef335B518c7912;\\r\\n        stakingWallet = 0x687d8E292CecA0cB77d71490ed9682ccba71E27C;\\r\\n        _isExcludedWallet[_msgSender()] = true;\\r\\n        _isExcludedWallet[address(this)] = true;\\r\\n        _isExcludedWallet[taxWallet] = true;\\r\\n        _isExcludedWallet[phoenixWallet] = true;\\r\\n        _isExcludedWallet[devWallet1] = true;\\r\\n        _isExcludedWallet[devWallet2] = true;\\r\\n        _isExcludedWallet[owner] = true;\\r\\n        _mint(_msgSender(), _totalSupply);\\r\\n        _transfer(_msgSender(), stakingWallet, _totalSupply.mul(11).div(100));\\r\\n        _transfer(_msgSender(), cexWallet, _totalSupply.mul(9).div(100));\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\r\\n            address(this),\\r\\n            uniswapV2Router.WETH()\\r\\n        );\\r\\n\\r\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\r\\n    }\\r\\n\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balance[account];\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(amount, \\\"low allowance\\\")\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(\\r\\n            owner != address(0) && spender != address(0),\\r\\n            \\\"approve zero address\\\"\\r\\n        );\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        uint256 _tax = 0;\\r\\n        if (from != owner() && to != owner()) {\\r\\n            require(swapEnabled, \\\"Trading is not allowed\\\");\\r\\n        }\\r\\n        if (!_isExcludedWallet[from] && !_isExcludedWallet[to]) {\\r\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\\r\\n                require(\\r\\n                    _balance[to] + amount <= maxAmountPerWallet ||\\r\\n                        maxAmountPerWallet == 0,\\r\\n                    \\\"Exceed max amount per wallet\\\"\\r\\n                );\\r\\n                require(\\r\\n                    amount <= maxAmountPerTx || maxAmountPerTx == 0,\\r\\n                    \\\"Exceed max amount per tx\\\"\\r\\n                );\\r\\n                _tax = buyFee;\\r\\n            } else if (to == uniswapV2Pair) {\\r\\n                require(\\r\\n                    amount <= maxAmountPerTx || maxAmountPerTx == 0,\\r\\n                    \\\"Exceed max amount per tx\\\"\\r\\n                );\\r\\n                _tax = sellFee;\\r\\n            } else {\\r\\n                _tax = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 taxAmount = amount.mul( _tax).div(100);\\r\\n        uint256 transferAmount = amount.sub(taxAmount);\\r\\n\\r\\n        _balance[from] = _balance[from].sub(amount);\\r\\n        _balance[address(this)] = _balance[address(this)] + taxAmount;\\r\\n\\r\\n        uint256 cAmount = _balance[address(this)];\\r\\n        if (\\r\\n            !inSwapAndLiquify &&\\r\\n            from != uniswapV2Pair &&\\r\\n            to == uniswapV2Pair &&\\r\\n            swapEnabled\\r\\n        ) {\\r\\n            if (cAmount >= maxSwapTokenAmount) {\\r\\n                swapTokensForEth(cAmount);\\r\\n                uint256 ethBalance = address(this).balance;\\r\\n                if (ethBalance > 0) {\\r\\n                    sendETHToFee(ethBalance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _balance[to] = _balance[to] + transferAmount;\\r\\n\\r\\n        if (taxAmount > 0) {\\r\\n            emit Transfer(from, address(this), taxAmount);\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, transferAmount);\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 amount) private {\\r\\n        _balance[to] = amount;\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 _tokenAmount) private lockTheSwap {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            _tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function buyBackAndBurn() public payable {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapV2Router.WETH();\\r\\n        path[1] = address(this);\\r\\n\\r\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n            value: msg.value\\r\\n        }(0, path, _msgSender(), block.timestamp);\\r\\n        uint256 burnAmount = _balance[_msgSender()];\\r\\n        _burn(_msgSender(), burnAmount);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 value) public {\\r\\n        _burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(_balance[account] >= value, \\\"Invalid amount\\\");\\r\\n        unchecked {\\r\\n            _totalSupply -= value;\\r\\n            _balance[account] -= value;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n \\r\\n    function sendETHToFee(uint256 _amount) private {\\r\\n        uint256 phoenixAmount = (_amount * phoenixPercent) / 100;\\r\\n        uint256 feeAmount = _amount.sub(phoenixAmount);\\r\\n        phoenixWallet.transfer(phoenixAmount);\\r\\n        devWallet1.transfer(feeAmount * 19 / 100);\\r\\n        devWallet2.transfer(feeAmount * 31 / 100);\\r\\n        taxWallet.transfer(feeAmount * 50 / 100);\\r\\n    }\\r\\n\\r\\n    function manualSwap() external {\\r\\n        require(\\r\\n            _msgSender() == owner() ||\\r\\n                _msgSender() == taxWallet ||\\r\\n                _msgSender() == devWallet1 ||\\r\\n                _msgSender() == devWallet2,\\r\\n            \\\"Invalid permission\\\"\\r\\n        );\\r\\n\\r\\n        uint256 tokenBalance = _balance[address(this)];\\r\\n        if (tokenBalance > 0) {\\r\\n            swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        if (ethBalance > 0) {\\r\\n            sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function openTrading() public onlyOwner {\\r\\n        require(!swapEnabled, \\\"token is already enabled for trading\\\");\\r\\n        swapEnabled = true;\\r\\n    }\\r\\n\\r\\n    function _setFee(uint256 _buyFee, uint256 _sellFee) private {\\r\\n        buyFee = _buyFee;\\r\\n        sellFee = _sellFee;\\r\\n    }\\r\\n\\r\\n    function _setMaxAmountPerTx(uint256 _maxAmountPerTx) private {\\r\\n        maxAmountPerTx = _maxAmountPerTx;\\r\\n    }\\r\\n\\r\\n    function _setMaxAmountPerWallet(uint256 _maxAmountPerWallet) private {\\r\\n        maxAmountPerWallet = _maxAmountPerWallet;\\r\\n    }\\r\\n\\r\\n    function _setMaxSwapTokenAmount(uint256 _maxSwapTokenAmount) private {\\r\\n        maxSwapTokenAmount = _maxSwapTokenAmount;\\r\\n    }\\r\\n\\r\\n    function _setPhoenixPercent(uint256 _phoenixPercent) private {\\r\\n        phoenixPercent = _phoenixPercent;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 _buyFee, uint256 _sellFee) external {\\r\\n        require(\\r\\n            _msgSender() == owner() ||\\r\\n            _msgSender() == taxWallet ||\\r\\n            _msgSender() == devWallet1 ||\\r\\n            _msgSender() == devWallet2,\\r\\n            \\\"Invalid permission\\\"\\r\\n        );\\r\\n        require(_buyFee <= 5 && _sellFee <=5, \\\"limited to 5 percent\\\" );\\r\\n        _setFee(_buyFee, _sellFee);\\r\\n    }\\r\\n\\r\\n    function setMaxAmountPerTx(uint256 _maxAmountPerTx) external onlyOwner {\\r\\n        require (_maxAmountPerTx >= _totalSupply.mul(5).div(1000), \\\"maxTx is limited to 0.5%\\\");\\r\\n        _setMaxAmountPerTx(_maxAmountPerTx);\\r\\n    }\\r\\n\\r\\n    function setMaxAmountPerWallet(\\r\\n        uint256 _maxAmountPerWallet\\r\\n    ) external onlyOwner {\\r\\n        require (_maxAmountPerWallet >= _totalSupply.mul(5).div(1000), \\\"maxWallet is limited to 0.5%\\\");\\r\\n        _setMaxAmountPerWallet(_maxAmountPerWallet);\\r\\n    }\\r\\n\\r\\n    function setPhoenixPercent(uint256 _phoenixPercent) external {\\r\\n        require(\\r\\n            _msgSender() == owner() || _msgSender() == phoenixWallet,\\r\\n            \\\"Invalid permission\\\"\\r\\n        );\\r\\n        _setPhoenixPercent(_phoenixPercent);\\r\\n    }\\r\\n\\r\\n    function setMaxSwapTokenAmount(\\r\\n        uint256 _maxSwapTokenAmount\\r\\n    ) external {\\r\\n        require(\\r\\n            _msgSender() == owner() ||\\r\\n            _msgSender() == taxWallet ||\\r\\n            _msgSender() == devWallet1 ||\\r\\n            _msgSender() == devWallet2,\\r\\n            \\\"Invalid permission\\\"\\r\\n        );\\r\\n        _setMaxSwapTokenAmount(_maxSwapTokenAmount);\\r\\n    }\\r\\n\\r\\n    function setTaxWallet(address _taxWallet) external onlyOwner {\\r\\n        taxWallet = payable(_taxWallet);\\r\\n    }\\r\\n\\r\\n    function setPhoenixWallet(address _phoenixWallet) external onlyOwner {\\r\\n        phoenixWallet = payable(_phoenixWallet);\\r\\n    }\\r\\n\\r\\n    function setDevWallet1(address _devWallet) external {\\r\\n        require(_msgSender() == devWallet1);\\r\\n        devWallet1 = payable(_devWallet);\\r\\n    }\\r\\n\\r\\n    function setDevWallet2(address _devWallet) external {\\r\\n        require(_msgSender() == devWallet2);\\r\\n        devWallet2 = payable(_devWallet);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\\r\\ncontract Factory is Context, Ownable {\\r\\n    Sandwich public sandwich;\\r\\n    IUniswapV2Router02 private constant uniswapV2Router =\\r\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n    event SandwichTokenDeployed(address tokenAddress);\\r\\n\\r\\n    constructor(address _taxWallet, address _phoenixWallet) payable {\\r\\n        sandwich = new Sandwich(_msgSender(), _taxWallet, _phoenixWallet); // creating new contract inside another parent contract\\r\\n        emit SandwichTokenDeployed(address(sandwich));\\r\\n        sandwich.approve(address(uniswapV2Router), type(uint256).max);\\r\\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\\r\\n            address(sandwich),\\r\\n            sandwich.balanceOf(address(this)),\\r\\n            0,\\r\\n            0,\\r\\n            _msgSender(),\\r\\n            block.timestamp\\r\\n        );\\r\\n        sandwich.transferOwnership(_msgSender());\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_phoenixWallet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndBurn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phoenixPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxAmountPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmountPerWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxAmountPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSwapTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSwapTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phoenixPercent\",\"type\":\"uint256\"}],\"name\":\"setPhoenixPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_phoenixWallet\",\"type\":\"address\"}],\"name\":\"setPhoenixWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Sandwich", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000016474f796fdcabd96f7df799abd821a18b96cfeb000000000000000000000000162cef44dd6eb82612499b918eaec568a23443d000000000000000000000000038cad30ea365c7cd2e821b235215983a36578452", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}