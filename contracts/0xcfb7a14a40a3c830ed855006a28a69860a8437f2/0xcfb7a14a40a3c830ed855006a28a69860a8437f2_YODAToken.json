{"SourceCode": "pragma solidity 0.8.13;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface PancakeSwapFactoryV2 {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface PancakeSwapRouterV2 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract YODAToken is Ownable {\r\n    string public name = \"Token YODA meme\";\r\n    string public symbol = \"YODA\";\r\n    uint256 public totalSupply = 1234567890e18;\r\n    uint8 public decimals = 18;\r\n    uint256 public deadBlocks = 2;\r\n    bool public isTradingEnabled = false;\r\n    uint256 private startBlock;\r\n    uint256 public startPrice = 7e15;\r\n    bool public antibot = true;\r\n    uint256 public fee = 2;\r\n    uint256 public blockTimeout = 10;\r\n    uint256 public maxTxAmount = 1234567e18;\r\n    PancakeSwapRouterV2 private _pancakeRouterV2 = PancakeSwapRouterV2(0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD); //0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3   0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public _dead = 0x000000000000000000000000000000000000dEaD;\r\n    IERC20 private _usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7); // 0x85139721a22be44f4AF4c10A7EC006a3aF3Fa91b 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee\r\n    address public pair;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => bool) public isWhitelisted;\r\n    mapping(address => bool) public isDisabledFee;\r\n    mapping(address => uint256) public lastTransfer;\r\n\r\n    constructor() {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        isWhitelisted[msg.sender] = true;\r\n        isWhitelisted[address(this)] = true;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    function _burn(address _from, uint256 _amount) internal returns (bool success) {\r\n        balanceOf[_from] -= _amount;\r\n        balanceOf[_dead] += _amount;\r\n        emit Transfer(_from, _dead, _amount);\r\n        return true;\r\n    }\r\n\r\n    function _beforeTransfer(address _from, address _to, uint256 _value) internal returns (uint256 _newValue) {\r\n        if (!isWhitelisted[_from] && !isWhitelisted[_to]) {\r\n            require(isTradingEnabled, \"Trading is disabled\");\r\n            require(balanceOf[_from] > _value);\r\n            require(!isBlacklisted[_from] && !isBlacklisted[_to], \"Blacklisted address\");\r\n            require(_value <= maxTxAmount, \"amount must be lower maxTxAmount\");\r\n            if (_from == pair) lastTransfer[_to] = block.number;\r\n            if (_to == pair) require(lastTransfer[_from] + blockTimeout <= block.number, \"not time yet\");\r\n            if (antibot) {\r\n                if (startBlock + deadBlocks >= block.number) {\r\n                    isBlacklisted[_to] = true;\r\n                } else {\r\n                    antibot = false;\r\n                }\r\n            }\r\n            if(!isDisabledFee[_from]) {\r\n                uint256 feeAmount = _value * fee / 100;\r\n                _burn(_from, feeAmount);\r\n                uint256 newAmount = _value - feeAmount;\r\n                return newAmount;\r\n            } else {\r\n                return _value;\r\n            }\r\n        }\r\n        return _value;\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        uint256 _newValue = _beforeTransfer(_from, _to, _value);\r\n        balanceOf[_from] -= _newValue;\r\n        balanceOf[_to] += _newValue;\r\n        emit Transfer(_from, _to, _newValue);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        _transfer(_from, _to, _value);\r\n        allowance[_from][msg.sender] -= _value;\r\n        return true;\r\n    }\r\n\r\n    function setDeadBlocks(uint256 _deadBlocks) public onlyOwner {\r\n        deadBlocks = _deadBlocks;\r\n    }\r\n\r\n    function setisBlacklisted(address account, bool value) public onlyOwner {\r\n        isBlacklisted[account] = value;\r\n    }\r\n\r\n    function setisDisabledFee(address account, bool value) public onlyOwner {\r\n        isDisabledFee[account] = value;\r\n    }\r\n\r\n    function multisetisBlacklisted(address[] calldata accounts, bool value) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            isBlacklisted[accounts[i]] = value;\r\n        }\r\n    }\r\n\r\n    function setisWhitelisted(address account, bool value) public onlyOwner {\r\n        isWhitelisted[account] = value;\r\n    }\r\n\r\n    function setFee(uint256 value) public onlyOwner {\r\n        require(value <= 50, \"must be lower 50\");\r\n        fee = value;\r\n    }\r\n\r\n    function setAntibot(bool value) public onlyOwner {\r\n        antibot = value;\r\n    }\r\n\r\n    function manualStartTrade(address pairaddress) public onlyOwner {\r\n        require(!isTradingEnabled, \"Trading is already enabled!\");\r\n        pair = pairaddress;\r\n        isTradingEnabled = true;\r\n        startBlock = block.number;\r\n    }\r\n\r\n    function openTrade() public onlyOwner {\r\n        require(!isTradingEnabled, \"Trading is already enabled!\");\r\n        allowance[address(this)][address(_pancakeRouterV2)] = totalSupply;\r\n        uint256 _usdtAmount = _usdt.balanceOf(address(this));\r\n        _usdt.approve(address(_pancakeRouterV2), ~uint256(0));\r\n        uint256 _tokenAmount = _usdtAmount / startPrice * 1e18;\r\n        pair = PancakeSwapFactoryV2(_pancakeRouterV2.factory()).createPair(address(this), address(_usdt));\r\n        _pancakeRouterV2.addLiquidity(address(this),address(_usdt),_tokenAmount,_usdtAmount,_tokenAmount,_usdtAmount,owner(),block.timestamp);\r\n        IERC20(pair).approve(address(_pancakeRouterV2), ~uint256(0));\r\n        isTradingEnabled = true;\r\n        startBlock = block.number;\r\n    }\r\n\r\n    function setRouter(address newRouter) public onlyOwner returns (bool success) {\r\n        _pancakeRouterV2 = PancakeSwapRouterV2(newRouter);\r\n        return true;\r\n    }\r\n\r\n    function setBUSD(address newBusd) public onlyOwner returns (bool success) {\r\n        _usdt = IERC20(newBusd);\r\n        return true;\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 amount) public onlyOwner returns (bool success) {\r\n        require(amount < totalSupply, \"cant be more than totalSupply\");\r\n        require(amount > 0, \"cant be zero!\");\r\n        maxTxAmount = amount;\r\n        return true;\r\n    }\r\n\r\n    function setStartPrice(uint256 newPrice) public onlyOwner returns (bool success) {\r\n        startPrice = newPrice;\r\n        return true;\r\n    }\r\n\r\n    function setBlockTimeout(uint256 newBlockTimeout) public onlyOwner returns (bool success) {\r\n        require(newBlockTimeout <= 28800, \"cant be more when 1 day!\");\r\n        blockTimeout = newBlockTimeout;\r\n        return true;\r\n    }\r\n\r\n    function setDead(address newDead) public onlyOwner returns (bool success) {\r\n        _dead = newDead;\r\n        return true;\r\n    }\r\n\r\n    function setPair(address newPair) public onlyOwner returns (bool success) {\r\n        pair = newPair;\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antibot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDisabledFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairaddress\",\"type\":\"address\"}],\"name\":\"manualStartTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"multisetisBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAntibot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBusd\",\"type\":\"address\"}],\"name\":\"setBUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlockTimeout\",\"type\":\"uint256\"}],\"name\":\"setBlockTimeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDead\",\"type\":\"address\"}],\"name\":\"setDead\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"}],\"name\":\"setDeadBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setStartPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setisBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setisDisabledFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setisWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YODAToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e3756427d757a6235972d21b450164b5964cf6a702c614aebe4c4e511a7223a1"}