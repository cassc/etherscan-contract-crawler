{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/RNFTVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IROOT } from \\\"./IROOT.sol\\\";\\nimport { IRNFTV2 } from \\\"./IRNFTV2.sol\\\";\\nimport { IRNFTStaking } from \\\"./IRNFTStaking.sol\\\";\\n\\n/// @title ROOT Vesting Contract\\n/// @notice This contract is used for vesting rootNFT rewards on a monthly basis\\n/// @author nexusflip\\n\\ncontract RNFTVesting is ReentrancyGuard {\\n    IROOT public root;\\n    IRNFTV2 public rnftv2;\\n    IRNFTStaking public rnftStaking;\\n\\n    uint32 public cliff;\\n    uint24 public cliffDuration;\\n    uint128 public withdrawnTokens;\\n    uint8 public constant NUMBER_OF_CLIFFS = 6;\\n    uint80 public constant BENEFICIARY_TOKENS = 2000 ether;\\n\\n    mapping(uint16 => bool) public isTokenIdVested;\\n    mapping(address => mapping(uint16 => bool)) public userClaimedIds;\\n    mapping(address => mapping(uint8 => bool)) public isClaimedUserCliffId;\\n    mapping(uint16 => uint80) public rootClaimedByTokenId;\\n    mapping(address => uint80) public userClaimedTokens;\\n\\n    event TokensReleased(uint16 tokenId, uint80 amount);\\n\\n    constructor(\\n        address _root,\\n        address _rnftv2,\\n        address _rnftStaking,\\n        uint32 _cliff,\\n        uint24 _cliffDuration\\n    ) {\\n        root = IROOT(_root);\\n        rnftv2 = IRNFTV2(_rnftv2);\\n        rnftStaking = IRNFTStaking(_rnftStaking);\\n        cliff = _cliff;\\n        cliffDuration = _cliffDuration;\\n    }\\n\\n    function _claimTokens(uint16 _tokenId) internal {\\n        bool userHasClaimed = userClaimedIds[msg.sender][_tokenId];\\n        bool tokenIdVested = isTokenIdVested[_tokenId];\\n\\n        if (!userHasClaimed && !tokenIdVested) {\\n            userClaimedIds[msg.sender][_tokenId] = true;\\n            isTokenIdVested[_tokenId] = true;\\n        }\\n\\n        if (userClaimedIds[msg.sender][_tokenId] && BENEFICIARY_TOKENS > rootClaimedByTokenId[_tokenId]) {\\n            uint80 toClaim = uint80(BENEFICIARY_TOKENS / NUMBER_OF_CLIFFS);\\n\\n            if (block.timestamp - cliffDuration >= cliff) {\\n                toClaim = BENEFICIARY_TOKENS - rootClaimedByTokenId[_tokenId];\\n            }\\n            withdrawnTokens += uint128(toClaim);\\n            rootClaimedByTokenId[_tokenId] += toClaim;\\n            userClaimedTokens[msg.sender] += toClaim;\\n\\n            root.mint(msg.sender, toClaim);\\n            emit TokensReleased(_tokenId, toClaim);\\n        }\\n    }\\n\\n    function claimUserTokens() external nonReentrant {\\n        uint256[] memory tokens = rnftv2.getUserTokens(msg.sender);\\n        uint256[] memory stakedTokens = rnftStaking.stakedTokenIds(msg.sender);\\n\\n        require(\\n            block.timestamp >= cliff,\\n            \\\"Vesting: cliff time not reached\\\"\\n        );\\n        uint8 currentCliffId = uint8(((block.timestamp - cliff) * NUMBER_OF_CLIFFS) / (cliffDuration));\\n\\n        if (currentCliffId > NUMBER_OF_CLIFFS) {\\n            currentCliffId = NUMBER_OF_CLIFFS;\\n        }\\n\\n        for (uint8 i = 0; i < currentCliffId; i++) {\\n            if (!isClaimedUserCliffId[msg.sender][i]) {\\n                for (uint16 j = 0; j < uint16(tokens.length); j++) {\\n                    _claimTokens(uint16(tokens[j]));\\n                }\\n\\n                for (uint16 k = 0; k < uint16(stakedTokens.length); k++) {\\n                    _claimTokens(uint16(stakedTokens[k]));\\n                }\\n\\n                isClaimedUserCliffId[msg.sender][i] = true;\\n            }\\n        }\\n    }\\n\\n    function userClaimable(address user) external view returns (uint128) {\\n        uint128 total = 0;\\n\\n        uint256[] memory tokens = rnftv2.getUserTokens(user);\\n        uint256[] memory stakedTokens = rnftStaking.stakedTokenIds(user);\\n\\n        for (uint16 i = 0; i < tokens.length; i++) {\\n            if (userClaimedIds[user][uint16(tokens[i])]) {\\n                total += uint128(BENEFICIARY_TOKENS - rootClaimedByTokenId[uint16(tokens[i])]);\\n            }\\n\\n            if(!userClaimedIds[user][uint16(tokens[i])] && !isTokenIdVested[uint16(tokens[i])]) {\\n                total += uint128(BENEFICIARY_TOKENS - rootClaimedByTokenId[uint16(tokens[i])]);\\n            }\\n        }\\n\\n        for (uint16 j = 0; j < stakedTokens.length; j++) {\\n            if (userClaimedIds[user][uint16(stakedTokens[j])]) {\\n                total += uint128(BENEFICIARY_TOKENS - rootClaimedByTokenId[uint16(stakedTokens[j])]);\\n            }\\n\\n            if(!userClaimedIds[user][uint16(stakedTokens[j])] && !isTokenIdVested[uint16(stakedTokens[j])]) {\\n                total += uint128(BENEFICIARY_TOKENS - rootClaimedByTokenId[uint16(stakedTokens[j])]);\\n            }\\n        }\\n\\n        return total;\\n    }\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/IROOT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IROOT {\\n    function mint(address _to, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"src/IRNFTV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRNFTV2 {\\n    function getUserTokens(address _user) external view returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"src/IRNFTStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRNFTStaking {\\n    function stakedTokenIds(address _user) external view returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_root\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rnftv2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rnftStaking\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_cliff\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"_cliffDuration\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"amount\",\"type\":\"uint80\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BENEFICIARY_TOKENS\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_OF_CLIFFS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUserTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffDuration\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"isClaimedUserCliffId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"isTokenIdVested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rnftStaking\",\"outputs\":[{\"internalType\":\"contract IRNFTStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rnftv2\",\"outputs\":[{\"internalType\":\"contract IRNFTV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"contract IROOT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"rootClaimedByTokenId\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userClaimable\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"userClaimedIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedTokens\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawnTokens\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RNFTVesting", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d2658e0f52df7875a7b3e58fc12f82f5e34dd6100000000000000000000000061658242a3cb396098303d504bbc4495fcc6af8400000000000000000000000026639f1aa0989d04f954d834c4354586684104b20000000000000000000000000000000000000000000000000000000065184d260000000000000000000000000000000000000000000000000000000000f0c8a0", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}