{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n//********************************************************************************************\r\n//***********************      HERE STARTS THE CODE OF CONTRACT     **************************\r\n//********************************************************************************************\r\n\r\ncontract PaymentSplitter {\r\n\r\n// simplified version of ownable (to save gas)\r\n    address private _owner;\r\n    constructor() {_owner = msg.sender;}\r\n    modifier onlyOwner() {require(_owner == msg.sender, \"Ownable: caller is not the owner\"); _;}\r\n\r\n// function necessary to receive the native token of the blockchain\r\n    receive() external payable {}\r\n\r\n// variables\r\n    address[] public Partners;\r\n    error AlreadyExist();\r\n    error Not_Enough_To_Distribute();\r\n\r\n// onlyOwner functions\r\n    function addPartnerWallet(address _addr) external onlyOwner {\r\n        for (uint256 i = 0; i < Partners.length; i++) {\r\n            if (Partners[i] == _addr) {revert AlreadyExist();}\r\n        }\r\n        Partners.push(_addr);\r\n        }\r\n    function removePartnerWallet(address _addr) external onlyOwner {\r\n        for (uint256 i = 0; i < Partners.length; i++) {\r\n            if (Partners[i] == _addr) {\r\n                Partners[i] = Partners[Partners.length - 1];\r\n                Partners.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n// view functions\r\n    function getPartnerNumber(address _addr) external view returns (uint256) {\r\n        for (uint256 i = 0; i < Partners.length; i++) {\r\n            if (Partners[i] == _addr) {return i;}\r\n        }\r\n        return 0;\r\n    }\r\n\r\n// token distribution\r\n    function distribute_ERC20_Token (IERC20 token) external {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (Partners.length > balance) {revert Not_Enough_To_Distribute();}\r\n        uint256 PartnerAmount = balance/Partners.length;\r\n        for (uint256 i = 0; i < Partners.length; i++) {\r\n            token.transfer(Partners[i], PartnerAmount);\r\n        }\r\n    }\r\n    function distribute_Native_Token () external {\r\n        uint256 balance = address(this).balance;\r\n        if (Partners.length > balance) {revert Not_Enough_To_Distribute();}\r\n        uint256 PartnerAmount = balance/Partners.length;\r\n        for (uint256 i = 0; i < Partners.length; i++) {\r\n            payable(Partners[i]).transfer(PartnerAmount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_Enough_To_Distribute\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Partners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPartnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"distribute_ERC20_Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute_Native_Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPartnerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePartnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaymentSplitter", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8bdf4d3b304d48bc1b9808a3b44d8d8ba1105bd21aefe85388b4b84df6150a5"}