{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"Delegated.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.0;\\n\\n/***********************\\n* @author: squeebo_nft *\\n************************/\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Delegated is Ownable {\\n  mapping(address =\\u003e bool) internal _delegates;\\n\\n  constructor(){\\n    _delegates[owner()] = true;\\n  }\\n\\n  modifier onlyDelegates {\\n    require(_delegates[msg.sender], \\\"Invalid delegate\\\" );\\n    _;\\n  }\\n\\n  //onlyOwner\\n  function isDelegate( address addr ) external view onlyOwner returns ( bool ){\\n    return _delegates[addr];\\n  }\\n\\n  function setDelegate( address addr, bool isDelegate_ ) external onlyOwner{\\n    _delegates[addr] = isDelegate_;\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\\n    _delegates[newOwner] = true;\\n    super.transferOwnership( newOwner );\\n  }\\n}\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"},\"ERC721EnumerableT.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.0;\\n\\n/****************************************\\n * @author: squeebo_nft                 *\\n ****************************************\\n *   Blimpie-ERC721 provides low-gas    *\\n *           mints + transfers          *\\n ****************************************/\\n\\nimport \\\"./ERC721T.sol\\\";\\nimport \\\"./IERC721Batch.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\nabstract contract ERC721EnumerableT is ERC721T, IERC721Batch, IERC721Enumerable {\\n    function balanceOf( address owner ) public view virtual override( IERC721, ERC721T ) returns( uint );\\n\\n    function isOwnerOf( address account, uint[] calldata tokenIds ) external view virtual override returns( bool );\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721T) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint index) public view virtual override returns( uint tokenId );\\n\\n    function tokenByIndex(uint index) external view virtual override returns (uint) {\\n        require(index \\u003c totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return index;\\n    }\\n\\n    function totalSupply() public view virtual override returns( uint );\\n\\n    function transferBatch( address from, address to, uint[] calldata tokenIds, bytes calldata data ) external override{\\n        for(uint i; i \\u003c tokenIds.length; ++i ){\\n            safeTransferFrom( from, to, tokenIds[i], data );\\n        }\\n    }\\n\\n    function walletOfOwner( address account ) external view virtual override returns( uint[] memory ){\\n        uint quantity = balanceOf( account );\\n        uint[] memory wallet = new uint[]( quantity );\\n        for( uint i; i \\u003c quantity; ++i ){\\n            wallet[i] = tokenOfOwnerByIndex( account, i );\\n        }\\n        return wallet;\\n    }\\n}\"},\"ERC721T.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.0;\\n\\n/****************************************\\n * @author: squeebo_nft                 *\\n * @team:   GoldenX                     *\\n ****************************************\\n *   Blimpie-ERC721 provides low-gas    *\\n *           mints + transfers          *\\n ****************************************/\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\nabstract contract ERC721T is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    mapping(uint =\\u003e address) internal _tokenApprovals;\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) internal _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    //public\\n    function balanceOf(address owner) public view virtual override returns( uint );\\n\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function ownerOf(uint tokenId) public view virtual override returns (address);\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /*\\n    function totalSupply() public view virtual returns (uint) {\\n        return _owners.length - (_offset + _burned);\\n    }\\n    */\\n\\n\\n    function approve(address to, uint tokenId) external virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    function getApproved(uint tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint tokenId\\n    ) external virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n\\n    //internal\\n    function _approve(address to, uint tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _exists(uint tokenId) internal view virtual returns (bool);\\n\\n    function _isApprovedOrOwner(address spender, uint tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    function _transfer(address from, address to, uint tokenId) internal virtual;\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\"},\"IERC721Batch.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC721Batch {\\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view returns( bool );\\n  function transferBatch( address from, address to, uint[] calldata tokenIds, bytes calldata data ) external;\\n  function walletOfOwner( address account ) external view returns( uint[] memory );\\n}\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}   \"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\"},\"TigerTigerTiger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/****************************************\\n * @author: tiger_nft                 *\\n * @team:   L.E.V.O                *\\n ****************************************\\n *   L.E.V.O-ERC721 provides low-gas    *\\n *           mints + transfers          *\\n ****************************************/\\n\\nimport \\u0027./Delegated.sol\\u0027;\\nimport \\u0027./ERC721EnumerableT.sol\\u0027;\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\ncontract TigerTigerTiger is ERC721EnumerableT, Delegated, ReentrancyGuard {\\n  using Strings for uint;\\n\\n\\n  /**\\n    * @dev Data structure of Moon\\n    */\\n  struct Moon {\\n    address owner;\\n    bool celestialType;\\n  }\\n\\n  /**\\n     *    @notice Keep track of each user and their info\\n     */\\n    struct Staker {\\n        mapping(address =\\u003e uint256[]) stakedTokens;\\n        mapping(address =\\u003e uint256) timeStaked;\\n        uint256 amountStaked;\\n    }\\n\\n\\n    \\n    // @notice mapping of a staker to its current properties\\n    mapping(address =\\u003e Staker) public stakers;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 =\\u003e address) public originalStakeOwner;\\n\\n     // @notice event emitted when a user has staked a token\\n    event Staked(address owner, uint256 tokenId);\\n\\n    // @notice event emitted when a user has unstaked a token\\n    event Unstaked(address owner, uint256 tokenId);\\n\\n  bool public revealed = false;\\n \\n\\n  uint public MAX_SUPPLY   = 5000;\\n  uint public PRICE        = 0.005 ether;\\n  uint public MAX_QTY = 2;\\n  \\n  Moon[] public moons;\\n\\n  bool public isWhitelistActive = false;\\n  bool public isMintActive = false;\\n\\n  mapping(address =\\u003e uint) public mintNum;\\n\\n  mapping(address =\\u003e uint) public accessList;\\n\\n  bool public isStakeActive   = false;\\n\\n  mapping(address =\\u003e uint) private _balances;\\n  string private _tokenURIPrefix=\\\"ipfs://QmZQQP87i5vyt4WL7yDwnAo4FsNj8a4HNQfHizrgbVM5vu/\\\";\\n  string private _tokenURISuffix =  \\\".json\\\";\\n\\n  constructor() \\n    ERC721T(\\\"Tiger Tiger Tiger\\\", \\\"Tiger Club\\\"){\\n  }\\n  \\n/**\\n  * @dev Returns the number of tokens in ``owners``\\u0027s account.\\n  */\\n  function balanceOf(address account) public view override returns (uint) {\\n    require(account != address(0), \\\"Tiger: balance query for the zero address\\\");\\n    return _balances[account];\\n  }\\n\\n/**\\n  * @dev Returns the bool of tokens if``owner``\\u0027s account contains the tokenIds.\\n  */\\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view override returns( bool ){\\n    for(uint i; i \\u003c tokenIds.length; ++i ){\\n      if( moons[ tokenIds[i] -1 ].owner != account )\\n        return false;\\n    }\\n\\n    return true;\\n  }\\n\\n/**\\n  * @dev Returns the owner of the `tokenId` token.\\n  *\\n  */\\n  function ownerOf( uint tokenId ) public override view returns( address owner_ ){\\n    address owner = moons[tokenId-1].owner;\\n    require(owner != address(0), \\\"Tiger: query for nonexistent token\\\");\\n    return owner;\\n  }\\n\\n/**\\n  * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n  * Use along with {totalSupply} to enumerate all tokens.\\n  */\\n  function tokenByIndex(uint index) external view override returns (uint) {\\n    require(index \\u003c= totalSupply(), \\\"Tiger: global index out of bounds\\\");\\n    return index;\\n  }\\n\\n/**\\n  * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n  * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n  */\\n  function tokenOfOwnerByIndex(address owner, uint index) public view override returns (uint tokenId) {\\n    uint count;\\n    for( uint i; i \\u003c= moons.length; ++i ){\\n      if( owner == moons[i].owner ){\\n        if( count == index )\\n          return i;\\n        else\\n          ++count;\\n      }\\n    }\\n\\n    revert(\\\"ERC721Enumerable: owner index out of bounds\\\");\\n  }\\n\\n /**\\n  * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n  */\\n  function tokenURI(uint tokenId) external view override returns (string memory) {\\n    require(_exists(tokenId), \\\"Tiger: URI query for nonexistent token\\\");\\n    return string(abi.encodePacked(_tokenURIPrefix, tokenId.toString(), _tokenURISuffix));\\n  }\\n\\n/**\\n  * @dev Returns the total amount of tokens stored by the contract.\\n  */\\n  function totalSupply() public view override returns( uint totalSupply_ ){\\n    return moons.length;\\n  }\\n\\n\\n\\n/**\\n  * @dev Returns the list of tokenIds stored by the owner\\u0027s account.\\n  */\\n  function walletOfOwner( address account ) external view override returns( uint[] memory ){\\n    uint quantity = balanceOf( account );\\n    uint[] memory wallet = new uint[]( quantity );\\n    for( uint i; i \\u003c quantity; ++i ){\\n        wallet[i] = tokenOfOwnerByIndex( account, i );\\n    }\\n    return wallet;\\n  }\\n\\n/**\\n  * @dev Owner sets the Staking contract address.\\n  */\\n  function setRevealState(bool reveal_) external onlyDelegates {\\n      revealed = reveal_;\\n  }\\n\\n\\n\\n /**\\n  * @dev mints token based on the number of qty specified.\\n  */\\n  function mint( uint quantity ) external payable nonReentrant {\\n    require(isMintActive == true,\\\"Tiger: Minting needs to be enabled.\\\");\\n    //If whitelist is active, people in WL can mint \\n    //based on the allowable qty limit set by owner/delegates.\\n    if( isWhitelistActive ){\\n      require( accessList[ msg.sender ] \\u003e= quantity, \\\"Tiger: Account is less than the qty limit\\\");\\n      accessList[ msg.sender ] -= quantity;\\n    } else { \\n      //For public, MAX_QTY limit will be applied. \\n      //MAX_QTY is determined by the owner/delegates\\n      require(mintNum[msg.sender]+quantity \\u003c= MAX_QTY,\\\"Tiger:Quantity must be less than or equal MAX_QTY\\\");\\n      if(mintNum[msg.sender]+quantity\\u003e1){\\n         require( msg.value \\u003e= PRICE , \\\"Tiger: Ether sent is not correct\\\" );\\n      }\\n    }\\n\\n    uint supply = totalSupply();\\n    require( supply + quantity \\u003c= MAX_SUPPLY, \\\"Tiger: Mint/order exceeds supply\\\" );\\n    mintNum[msg.sender] = mintNum[msg.sender] + quantity;\\n    for(uint i; i \\u003c quantity; i++){\\n       uint tokenId =  ++supply ;\\n      _mint( msg.sender, tokenId );\\n    }\\n  \\n    \\n  }\\n\\n\\n\\n/**\\n  * @dev Returns the balance amount of the Contract address.\\n  */\\n  function getBalanceofContract() external view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n/**\\n  * @dev Withdraws an amount from the contract balance.\\n  */\\n  function withdraw(uint256 amount_) public onlyOwner {\\n    require(address(this).balance \\u003e= amount_, \\\"Address: insufficient balance\\\");\\n\\n    // This will payout the owner 100% of the contract balance.\\n    // Do not remove this otherwise you will not be able to withdraw the funds.\\n    // =============================================================================\\n    (bool os, ) = payable(owner()).call{value: amount_}(\\\"\\\");\\n    require(os);\\n    // =============================================================================\\n  }\\n\\n\\n  /**\\n  * @dev Allows team to mint the token without restriction.\\n  */\\n  function team_mint(uint[] calldata quantity, address[] calldata recipient) public onlyDelegates{\\n    require(quantity.length == recipient.length, \\\"Tiger: Must provide equal quantities and recipients\\\" );\\n\\n    uint totalQuantity;\\n    uint supply = totalSupply();\\n    for(uint i; i \\u003c quantity.length; ++i){\\n      totalQuantity += quantity[i];\\n    }\\n    require( supply + totalQuantity \\u003c MAX_SUPPLY, \\\"Tiger: Mint/order exceeds supply\\\" );\\n\\n    for(uint i; i \\u003c recipient.length; ++i){\\n      for(uint j; j \\u003c quantity[i]; ++j){\\n        uint tokenId = ++supply;\\n        _mint( recipient[i], tokenId);\\n      }\\n    }\\n  }\\n\\n/**\\n  * @dev Owner/Delegate sets the Whitelist active flag.\\n  */\\n  function setWhitelistAddress(address[] calldata accounts, uint allowed) external onlyDelegates{\\n    for(uint i; i \\u003c accounts.length; ++i){\\n      accessList[ accounts[i] ] = allowed;\\n    }\\n  }\\n\\n/**\\n  * @dev Owner/Delegate sets the Minting flag.\\n  */\\n  function setMintingActive(bool mintActive_) external onlyDelegates {\\n    require( isMintActive != mintActive_ , \\\"Tiger: New value matches old\\\" );\\n    isMintActive = mintActive_;\\n  }\\n\\n/**\\n  * @dev Owner/Delegate sets the Whitelist active flag.\\n  */\\n  function setWhitelistActive(bool isWhitelistActive_) external onlyDelegates{\\n    require( isWhitelistActive != isWhitelistActive_ , \\\"Tiger: New value matches old\\\" );\\n    isWhitelistActive = isWhitelistActive_;\\n  }\\n\\n/**\\n  * @dev Owner/Delegates sets the BaseURI of IPFS.\\n  */\\n  function setBaseURI(string calldata prefix, string calldata suffix) external onlyDelegates{\\n    _tokenURIPrefix = prefix;\\n    _tokenURISuffix = suffix;\\n  }\\n\\n/**\\n  * @dev Owner/Delegate sets the Max supply of the token.\\n  */\\n  function setMaxSupply(uint maxSupply) external onlyDelegates{\\n    require( MAX_SUPPLY != maxSupply, \\\"Tiger: New value matches old\\\" );\\n    require( maxSupply \\u003e= totalSupply(), \\\"Tiger: Specified supply is lower than current balance\\\" );\\n    MAX_SUPPLY = maxSupply;\\n  }\\n\\n/**\\n  * @dev Owner/Delegate sets the Max. qty \\n  */\\n  function setMaxQty(uint maxQty) external onlyDelegates{\\n    require( MAX_QTY != maxQty, \\\"Tiger: New value matches old\\\" );\\n    MAX_QTY = maxQty;\\n  }\\n\\n/**\\n  * @dev Owner/Delegate sets the minting price.\\n  */\\n  function setPrice(uint price) external onlyDelegates{\\n    require( PRICE != price, \\\"Tiger: New value matches old\\\" );\\n    PRICE = price;\\n  }\\n\\n/**\\n  * @dev increment and decrement balances based on address from and  to.\\n  */\\n  function _beforeTokenTransfer(address from, address to) internal {\\n    if( from != address(0) )\\n      --_balances[ from ];\\n\\n    if( to != address(0) )\\n      ++_balances[ to ];\\n  }\\n\\n/**\\n  * @dev returns bool if the tokenId exist.\\n  */\\n  function _exists(uint tokenId) internal view override returns (bool) {\\n    return tokenId\\u003e0 \\u0026\\u0026 tokenId \\u003c= moons.length \\u0026\\u0026 moons[tokenId-1].owner != address(0);\\n  }\\n\\n/**\\n  * @dev mints token based address and tokenId\\n  */\\n  function _mint(address to, uint tokenId) internal {\\n    _beforeTokenTransfer(address(0), to);\\n    moons.push(Moon(to,false));\\n    emit Transfer(address(0), to, tokenId);\\n  }\\n\\n/**\\n    * @dev update the moon type.\\n    */\\n  function updateMoontype(bool moonType, uint[] calldata tokenIds ) external onlyDelegates {\\n        //update logic to update the MoonType\\n        for(uint i=0; i \\u003c tokenIds.length; i++) {\\n            require(_exists(tokenIds[i]), \\\"Tiger: TokenId not exist\\\");\\n            moons[tokenIds[i]-1].celestialType = moonType;\\n        }\\n  }\\n\\n/**\\n  * @dev returns the moontypes based on the tokenIds.\\n  */\\n  function getMoonType(uint[] calldata tokenIds) external view returns(bool[] memory moonTypes) {\\n      // return moontype true/false\\n      bool[] memory _moonTypes = new bool[](tokenIds.length);\\n      for(uint i; i \\u003c tokenIds.length; i++) {\\n        _moonTypes[i] = moons[tokenIds[i]-1].celestialType;\\n      }\\n      return _moonTypes;\\n  }\\n\\n/**\\n  * @dev transfer tokenId to other address.\\n  */\\n  function _transfer(address from, address to, uint tokenId) internal override {\\n    require(moons[tokenId-1].owner == from, \\\"Tiger: transfer of token that is not owned\\\");\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n    _beforeTokenTransfer(from, to);\\n\\n    moons[tokenId-1].owner = to;\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n    * @dev Get the tokens staked by a user\\n    */\\n    function getStakedTokens(address _user) public view returns (uint256[] memory tokenIds) {\\n        Staker storage staker = stakers[_user];\\n        return staker.stakedTokens[_user]; \\n    }\\n\\n/**\\n  * @dev Stake the NFT based on array of tokenIds\\n  */\\n    function stake( uint[] calldata tokenIds ) external {\\n        require( isStakeActive, \\\"Tiger: Staking is not active\\\" );\\n        \\n        Moon storage moon;\\n        //Check if TokenIds exist and the moon owner is the msge sender\\n        for( uint i; i \\u003c tokenIds.length; ++i ){\\n            require( _exists(tokenIds[i]-1), \\\"Tiger: Query for nonexistent token\\\" );\\n            moon = moons[ tokenIds[i]-1 ];\\n            require(moon.owner == msg.sender, \\\"Tiger: Staking token that is not owned\\\");\\n\\n            _stake(msg.sender, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev For internal access to stake the NFT based tokenId\\n    */\\n    function _stake( address _user, uint256 _tokenId ) internal {\\n\\n        Staker storage staker = stakers[_user];\\n\\n        staker.amountStaked += 1;\\n        staker.timeStaked[_user] = block.timestamp;\\n        staker.stakedTokens[_user].push(_tokenId);\\n\\n        originalStakeOwner[_tokenId] = msg.sender;\\n\\n        _transfer(_user,address(this), _tokenId);\\n      \\n        emit Staked(_user, _tokenId);\\n\\n        \\n    }\\n\\n/**\\n  * @dev Unstake the token based on array of tokenIds\\n  */\\n    function unStake( uint[] calldata tokenIds ) external {\\n        require( isStakeActive, \\\"Tiger: Staking is not active\\\" );\\n        //Check if TokenIds exist\\n        for( uint i; i \\u003c tokenIds.length; ++i ){\\n            require( originalStakeOwner[tokenIds[i]] == msg.sender, \\n            \\\"Tiger._unstake: Sender must have staked tokenID\\\");\\n            _unstake(msg.sender,tokenIds[i]);        \\n        }\\n    }\\n\\n    /**\\n    * @dev For internal access to unstake the NFT based tokenId\\n    */\\n    function _unstake( address _user, uint256 _tokenId) internal {\\n\\n        Staker storage staker = stakers[_user];\\n\\n        _removeElement(_user, _tokenId);\\n\\n        delete originalStakeOwner[_tokenId];\\n        staker.timeStaked[_user] = block.timestamp;\\n        staker.amountStaked -= 1;\\n\\n        if(staker.amountStaked == 0) {\\n            delete stakers[_user];\\n        }\\n\\n        _transfer(address(this),_user, _tokenId);\\n        \\n        emit Unstaked(_user, _tokenId);\\n        \\n    }\\n\\n  /**\\n    * @dev Owner/Delegate sets the Whitelist active flag.\\n    */\\n    function setStakeActive( bool isActive_ ) external onlyDelegates {\\n      require( isStakeActive != isActive_ , \\\"Tiger: New value matches old\\\" );\\n      isStakeActive = isActive_;\\n    }\\n\\n    /**\\n    *   @notice remove given elements from array\\n    *   @dev usable only if _array contains unique elements only\\n     */\\n    function _removeElement(address _user, uint256 _element) internal {\\n        Staker storage staker = stakers[_user];\\n        for (uint256 i; i\\u003cstaker.stakedTokens[_user].length; i++) {\\n            if (staker.stakedTokens[_user][i] == _element) {\\n                staker.stakedTokens[_user][i] = staker.stakedTokens[_user][staker.stakedTokens[_user].length - 1];\\n                staker.stakedTokens[_user].pop();\\n                break;\\n            }\\n        }\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_QTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accessList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceofContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getMoonType\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"moonTypes\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"celestialType\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"originalStakeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDelegate_\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQty\",\"type\":\"uint256\"}],\"name\":\"setMaxQty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mintActive_\",\"type\":\"bool\"}],\"name\":\"setMintingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reveal_\",\"type\":\"bool\"}],\"name\":\"setRevealState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive_\",\"type\":\"bool\"}],\"name\":\"setStakeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelistActive_\",\"type\":\"bool\"}],\"name\":\"setWhitelistActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"}],\"name\":\"setWhitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"quantity\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"}],\"name\":\"team_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"moonType\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"updateMoontype\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TigerTigerTiger", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://09fa913df8ab97db5927fa573e16ff07db177f2f8de295e7574ce52c876a32ce"}