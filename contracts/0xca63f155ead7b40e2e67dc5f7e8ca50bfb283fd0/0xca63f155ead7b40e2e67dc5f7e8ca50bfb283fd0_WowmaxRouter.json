{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// @title Wrapped token ERC20 interface\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWowmaxRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\n// @title Router token swapping functionality\\n// @notice Functions for swapping tokens via WOWMAX\\ninterface IWowmaxRouter {\\n    struct Swap {\\n        // target token address\\n        address to;\\n        // part of owned tokens to be swapped\\n        uint256 part;\\n        // contract address that performs the swap\\n        address addr;\\n        // contract DEX family\\n        bytes32 family;\\n        // additional data that is required for a specific DEX protocol\\n        bytes data;\\n    }\\n\\n    struct ExchangeRoute {\\n        // source token address\\n        address from;\\n        // total parts of owned token\\n        uint256 parts;\\n        // array of swaps for a specified token\\n        Swap[] swaps;\\n    }\\n\\n    struct ExchangeRequest {\\n        // source token address\\n        address from;\\n        // source token amount to swap\\n        uint256 amountIn;\\n        // target token addresses\\n        address[] to;\\n        // exchange routes\\n        ExchangeRoute[] exchangeRoutes;\\n        // slippage tolerance for each target token\\n        uint256[] slippage;\\n        // expected amount for each target token\\n        uint256[] amountOutExpected;\\n    }\\n\\n    event SwapExecuted(\\n        address indexed account,\\n        address indexed from,\\n        uint256 amountIn,\\n        address[] to,\\n        uint256[] amountOut\\n    );\\n\\n    // @notice Executes a token swap\\n    // @param request - swap request\\n    // @return amountsOut - array of amounts that were received for each target token\\n    // @dev if from token is address(0) and amountIn is 0,\\n    // then chain native token is used as a source token, and value is used as amountIn\\n    function swap(ExchangeRequest calldata request) external payable returns (uint256[] memory amountsOut);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Curve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title Curve pool interface\\ninterface ICurvePool {\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n}\\n\\n// @title Curve library\\n// @notice Functions to swap tokens on Curve like protocols\\nlibrary Curve {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        (int128 i, int128 j) = abi.decode(swapData.data, (int128, int128));\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).approve(swapData.addr, amountIn);\\n        ICurvePool(swapData.addr).exchange(i, j, amountIn, 0);\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DODOV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title DODO v1 pool interface\\ninterface IDODOV1Pool {\\n    function sellBaseToken(uint256 amount, uint256 minReceiveQuote, bytes calldata data) external returns (uint256);\\n\\n    function buyBaseToken(uint256 amount, uint256 maxPayQuote, bytes calldata data) external returns (uint256);\\n}\\n\\n// @title DODO v1 library\\n// @notice Functions to swap tokens on DODO v1 protocol\\nlibrary DODOV1 {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).approve(swapData.addr, amountIn);\\n        amountOut = IDODOV1Pool(swapData.addr).sellBaseToken(amountIn, 0, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DODOV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title DODO v2 pool interface\\ninterface IDODOV2Pool {\\n    function sellBase(address to) external returns (uint256);\\n\\n    function sellQuote(address to) external returns (uint256);\\n}\\n\\n// @title DODO v2 library\\n// @notice Functions to swap tokens on DODO v2 protocol\\nlibrary DODOV2 {\\n    uint8 internal constant BASE_TO_QUOTE = 0;\\n\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        uint8 direction = abi.decode(swapData.data, (uint8));\\n\\n        if (direction == BASE_TO_QUOTE) {\\n            amountOut = IDODOV2Pool(swapData.addr).sellBase(address(this));\\n        } else {\\n            amountOut = IDODOV2Pool(swapData.addr).sellQuote(address(this));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Fulcrom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title Fulcrom pool interface\\ninterface IFulcromPool {\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n}\\n\\n// @title Fulcrom library\\n// @notice Functions to swap tokens on Fulcrom protocol\\nlibrary Fulcrom {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        amountOut = IFulcromPool(swapData.addr).swap(from, swapData.to, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Hashflow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title Hashflow router interface\\ninterface IHashflowRouter {\\n    struct RFQTQuote {\\n        address pool;\\n        address externalAccount;\\n        address trader;\\n        address effectiveTrader;\\n        address baseToken;\\n        address quoteToken;\\n        uint256 effectiveBaseTokenAmount;\\n        uint256 maxBaseTokenAmount;\\n        uint256 maxQuoteTokenAmount;\\n        uint256 quoteExpiry;\\n        uint256 nonce;\\n        bytes32 txid;\\n        bytes signature;\\n    }\\n\\n    function tradeSingleHop(RFQTQuote calldata quote) external payable;\\n}\\n\\n// @title Hashflow library\\n// @notice Functions to swap tokens on Hashflow protocol\\nlibrary Hashflow {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IHashflowRouter.RFQTQuote memory quote = abi.decode(swapData.data, (IHashflowRouter.RFQTQuote));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).approve(swapData.addr, amountIn);\\n        if (amountIn < quote.maxBaseTokenAmount) {\\n            quote.effectiveBaseTokenAmount = amountIn;\\n        }\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        IHashflowRouter(swapData.addr).tradeSingleHop(quote);\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Level.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title Level pool interface\\ninterface ILevelPool {\\n    function swap(address _tokenIn, address _tokenOut, uint256 _minOut, address _to, bytes calldata extradata) external;\\n}\\n\\n// @title Level library\\n// @notice Functions to swap tokens on Level protocol\\nlibrary Level {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        ILevelPool(swapData.addr).swap(from, swapData.to, 0, address(this), new bytes(0));\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PancakeSwapStable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title PancakeSwap pool interface\\ninterface IPancakeStablePool {\\n    // @dev Same as Curve but uses uint256 instead of int128\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external;\\n}\\n\\n// @title PancakeSwap library\\n// @notice Functions to swap tokens on PancakeSwap like protocols\\nlibrary PancakeSwapStable {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        (int128 i, int128 j) = abi.decode(swapData.data, (int128, int128));\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).approve(swapData.addr, amountIn);\\n        IPancakeStablePool(swapData.addr).exchange(uint256(uint128(i)), uint256(uint128(j)), amountIn, 0);\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Saddle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title Saddle pool interface\\ninterface ISaddlePool {\\n    function swap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) external;\\n}\\n\\n// @title Saddle library\\n// @notice Functions to swap tokens on Saddle protocol\\nlibrary Saddle {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        (uint8 tokenIndexFrom, uint8 tokenIndexTo) = abi.decode(swapData.data, (uint8, uint8));\\n        uint256 balanceBefore = IERC20(swapData.to).balanceOf(address(this));\\n        //slither-disable-next-line unused-return //it's safe to ignore\\n        IERC20(from).approve(swapData.addr, amountIn);\\n        ISaddlePool(swapData.addr).swap(tokenIndexFrom, tokenIndexTo, amountIn, 0, type(uint256).max);\\n        amountOut = IERC20(swapData.to).balanceOf(address(this)) - balanceBefore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title Uniswap v2 pair interface\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    function router() external returns (address);\\n}\\n\\n// @title Uniswap v2 router interface\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\n// @title Uniswap v2 library\\n// @notice Functions to swap tokens on Uniswap v2 and compatible protocols\\nlibrary UniswapV2 {\\n    uint256 private constant feeDenominator = 10000;\\n\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        uint256 fee = abi.decode(swapData.data, (uint256));\\n        bool directSwap = IUniswapV2Pair(swapData.addr).token0() == from;\\n        (uint112 reserveIn, uint112 reserveOut) = getReserves(swapData.addr, directSwap);\\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut, fee);\\n        if (amountOut > 0) {\\n            IUniswapV2Pair(swapData.addr).swap(\\n                directSwap ? 0 : amountOut,\\n                directSwap ? amountOut : 0,\\n                address(this),\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function routerSwap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IUniswapV2Router router = IUniswapV2Router(IUniswapV2Pair(swapData.addr).router());\\n        IERC20(from).safeApprove(address(router), amountIn);\\n        address[] memory path = new address[](2);\\n        path[0] = from;\\n        path[1] = swapData.to;\\n        return router.swapExactTokensForTokens(amountIn, 0, path, address(this), type(uint256).max)[1];\\n    }\\n\\n    function getReserves(address pair, bool directSwap) private view returns (uint112 reserveIn, uint112 reserveOut) {\\n        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pair).getReserves();\\n        return directSwap ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint112 reserveIn,\\n        uint112 reserveOut,\\n        uint256 fee\\n    ) private pure returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * (feeDenominator - fee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * feeDenominator + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title Uniswap v3 pool interface\\ninterface IUniswapV3Pool {\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\\n// @title Uniswap v3 library\\n// @notice Functions to swap tokens on Uniswap v3 and compatible protocol\\nlibrary UniswapV3 {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(uint256 amountIn, IWowmaxRouter.Swap memory swapData) internal returns (uint256 amountOut) {\\n        bool zeroForOne = abi.decode(swapData.data, (bool));\\n        uint160 sqrtPriceLimitX96 = zeroForOne ? 4295128740 : 1461446703485210103287273052203988822378723970341;\\n        (int256 amount0, int256 amount1) = IUniswapV3Pool(swapData.addr).swap(\\n            address(this),\\n            zeroForOne,\\n            int256(amountIn),\\n            sqrtPriceLimitX96,\\n            new bytes(0)\\n        );\\n        amountOut = uint(zeroForOne ? -amount1 : -amount0);\\n    }\\n\\n    function invokeCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata /*_data*/) internal {\\n        if (amount0Delta > 0 && amount1Delta < 0) {\\n            IERC20(IUniswapV3Pool(msg.sender).token0()).safeTransfer(msg.sender, uint256(amount0Delta));\\n        } else if (amount0Delta < 0 && amount1Delta > 0) {\\n            IERC20(IUniswapV3Pool(msg.sender).token1()).safeTransfer(msg.sender, uint256(amount1Delta));\\n        } else {\\n            revert(\\\"WOWMAX: Uniswap v3 invariant violation\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Wombat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title Wombat pool interface\\ninterface IWombatPool {\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n}\\n\\n// @title Wombat library\\n// @notice Functions to swap tokens on Wombat protocol\\nlibrary Wombat {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeApprove(swapData.addr, amountIn);\\n        (amountOut, ) = IWombatPool(swapData.addr).swap(\\n            from,\\n            swapData.to,\\n            amountIn,\\n            0,\\n            address(this),\\n            type(uint256).max\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/WooFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWowmaxRouter.sol\\\";\\n\\n// @title WooFi pool interface\\ninterface IWooFiPool {\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minToAmount,\\n        address to,\\n        address rebateTo\\n    ) external returns (uint256 realToAmount);\\n}\\n\\n// @title WooFi library\\n// @notice Functions to swap tokens on WooFi protocol\\nlibrary WooFi {\\n    using SafeERC20 for IERC20;\\n\\n    function swap(\\n        address from,\\n        uint256 amountIn,\\n        IWowmaxRouter.Swap memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        IERC20(from).safeTransfer(swapData.addr, amountIn);\\n        amountOut = IWooFiPool(swapData.addr).swap(from, swapData.to, amountIn, 0, address(this), address(0x0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WowmaxRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IWowmaxRouter.sol\\\";\\n\\nimport \\\"./libraries/UniswapV2.sol\\\";\\nimport \\\"./libraries/UniswapV3.sol\\\";\\nimport \\\"./libraries/Curve.sol\\\";\\nimport \\\"./libraries/PancakeSwapStable.sol\\\";\\nimport \\\"./libraries/DODOV2.sol\\\";\\nimport \\\"./libraries/DODOV1.sol\\\";\\nimport \\\"./libraries/Hashflow.sol\\\";\\nimport \\\"./libraries/Saddle.sol\\\";\\nimport \\\"./libraries/Wombat.sol\\\";\\nimport \\\"./libraries/Level.sol\\\";\\nimport \\\"./libraries/Fulcrom.sol\\\";\\nimport \\\"./libraries/WooFi.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./WowmaxSwapReentrancyGuard.sol\\\";\\n\\n/// @title WOWMAX Router\\n/// @notice Router for stateless execution of swaps against multiple DEX protocols\\ncontract WowmaxRouter is IWowmaxRouter, Ownable, WowmaxSwapReentrancyGuard {\\n    IWETH public WETH;\\n    address public treasury;\\n\\n    bytes32 internal constant UNISWAP_V2 = \\\"UNISWAP_V2\\\";\\n    bytes32 internal constant UNISWAP_V3 = \\\"UNISWAP_V3\\\";\\n    bytes32 internal constant UNISWAP_V2_ROUTER = \\\"UNISWAP_V2_ROUTER\\\";\\n    bytes32 internal constant CURVE = \\\"CURVE\\\";\\n    bytes32 internal constant DODO_V1 = \\\"DODO_V1\\\";\\n    bytes32 internal constant DODO_V2 = \\\"DODO_V2\\\";\\n    bytes32 internal constant HASHFLOW = \\\"HASHFLOW\\\";\\n    bytes32 internal constant PANCAKESWAP_STABLE = \\\"PANCAKESWAP_STABLE\\\";\\n    bytes32 internal constant SADDLE = \\\"SADDLE\\\";\\n    bytes32 internal constant WOMBAT = \\\"WOMBAT\\\";\\n    bytes32 internal constant LEVEL = \\\"LEVEL\\\";\\n    bytes32 internal constant FULCROM = \\\"FULCROM\\\";\\n    bytes32 internal constant WOOFI = \\\"WOOFI\\\";\\n\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address _weth, address _treasury) {\\n        require(_weth != address(0), \\\"WOWMAX: Wrong WETH address\\\");\\n        require(_treasury != address(0), \\\"WOWMAX: Wrong treasury address\\\");\\n\\n        WETH = IWETH(_weth);\\n        treasury = _treasury;\\n    }\\n\\n    receive() external payable {\\n        require(_msgSender() == payable(address(WETH)), \\\"WOWMAX: Forbidden token transfer\\\");\\n        // only accept native chain tokens via fallback from the wrapper contract\\n    }\\n\\n    // @inheritdoc IWowmaxRouter\\n    function swap(\\n        ExchangeRequest calldata request\\n    ) external payable override reentrancyProtectedSwap returns (uint256[] memory amountsOut) {\\n        uint256 amountIn = receiveTokens(request);\\n        for (uint256 i = 0; i < request.exchangeRoutes.length; i++) {\\n            exchange(request.exchangeRoutes[i]);\\n        }\\n        amountsOut = sendTokens(request);\\n\\n        emit SwapExecuted(\\n            msg.sender,\\n            request.from == address(0) ? address(WETH) : request.from,\\n            amountIn,\\n            request.to,\\n            amountsOut\\n        );\\n    }\\n\\n    // @dev receives source tokens from account or wraps received value\\n    function receiveTokens(ExchangeRequest calldata request) private returns (uint256) {\\n        uint256 amountIn;\\n        if (msg.value > 0 && request.from == address(0) && request.amountIn == 0) {\\n            amountIn = msg.value;\\n            WETH.deposit{ value: amountIn }();\\n        } else {\\n            if (request.amountIn > 0) {\\n                amountIn = request.amountIn;\\n                IERC20(request.from).safeTransferFrom(msg.sender, address(this), amountIn);\\n            }\\n        }\\n        return amountIn;\\n    }\\n\\n    // @dev transfers received tokens back to the caller\\n    function sendTokens(ExchangeRequest calldata request) private returns (uint256[] memory amountsOut) {\\n        amountsOut = new uint256[](request.to.length);\\n        uint256 amountOut;\\n        IERC20 token;\\n        for (uint256 i = 0; i < request.to.length; i++) {\\n            token = IERC20(request.to[i]);\\n            amountOut = token.balanceOf(address(this));\\n\\n            uint256 amountExtra;\\n            if (amountOut > request.amountOutExpected[i]) {\\n                amountExtra = amountOut - request.amountOutExpected[i];\\n                amountsOut[i] = request.amountOutExpected[i];\\n            } else {\\n                require(\\n                    amountOut >= (request.amountOutExpected[i] * (10000 - request.slippage[i])) / 10000,\\n                    \\\"WOWMAX: Insufficient output amount\\\"\\n                );\\n                amountsOut[i] = amountOut;\\n            }\\n\\n            if (address(token) == address(WETH)) {\\n                WETH.withdraw(amountOut);\\n            }\\n\\n            transfer(token, treasury, amountExtra);\\n            transfer(token, msg.sender, amountsOut[i]);\\n        }\\n    }\\n\\n    // @dev transfer token to a recipient, unwrapping native token if necessary\\n    function transfer(IERC20 token, address to, uint256 amount) private {\\n        //slither-disable-next-line incorrect-equality\\n        if (amount == 0) {\\n            return;\\n        }\\n        if (address(token) == address(WETH)) {\\n            //slither-disable-next-line arbitrary-send-eth //recipient is either a msg.sender or a treasury\\n            payable(to).transfer(amount);\\n        } else {\\n            token.safeTransfer(to, amount);\\n        }\\n    }\\n\\n    // @dev executes a single exchange route\\n    function exchange(ExchangeRoute calldata exchangeRoute) private returns (uint256) {\\n        uint256 amountIn = IERC20(exchangeRoute.from).balanceOf(address(this));\\n        uint256 amountOut;\\n        for (uint256 i = 0; i < exchangeRoute.swaps.length; i++) {\\n            amountOut += executeSwap(\\n                exchangeRoute.from,\\n                (amountIn * exchangeRoute.swaps[i].part) / exchangeRoute.parts,\\n                exchangeRoute.swaps[i]\\n            );\\n        }\\n        return amountOut;\\n    }\\n\\n    // @dev executes a single swap\\n    function executeSwap(address from, uint256 amountIn, Swap calldata swapData) private returns (uint256) {\\n        if (swapData.family == UNISWAP_V3) {\\n            return UniswapV3.swap(amountIn, swapData);\\n        } else if (swapData.family == HASHFLOW) {\\n            return Hashflow.swap(from, amountIn, swapData);\\n        } else if (swapData.family == WOMBAT) {\\n            return Wombat.swap(from, amountIn, swapData);\\n        } else if (swapData.family == LEVEL) {\\n            return Level.swap(from, amountIn, swapData);\\n        } else if (swapData.family == DODO_V2) {\\n            return DODOV2.swap(from, amountIn, swapData);\\n        } else if (swapData.family == WOOFI) {\\n            return WooFi.swap(from, amountIn, swapData);\\n        } else if (swapData.family == UNISWAP_V2) {\\n            return UniswapV2.swap(from, amountIn, swapData);\\n        } else if (swapData.family == CURVE) {\\n            return Curve.swap(from, amountIn, swapData);\\n        } else if (swapData.family == PANCAKESWAP_STABLE) {\\n            return PancakeSwapStable.swap(from, amountIn, swapData);\\n        } else if (swapData.family == DODO_V1) {\\n            return DODOV1.swap(from, amountIn, swapData);\\n        } else if (swapData.family == SADDLE) {\\n            return Saddle.swap(from, amountIn, swapData);\\n        } else if (swapData.family == FULCROM) {\\n            return Fulcrom.swap(from, amountIn, swapData);\\n        } else if (swapData.family == UNISWAP_V2_ROUTER) {\\n            return UniswapV2.routerSwap(from, amountIn, swapData);\\n        } else {\\n            revert(\\\"WOWMAX: Unknown DEX family\\\");\\n        }\\n    }\\n\\n    // Callbacks\\n\\n    // @dev callback for UniswapV3, is not allowed to be executed outside of a swap operation\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    ) external onlyDuringSwap {\\n        UniswapV3.invokeCallback(amount0Delta, amount1Delta, _data);\\n    }\\n\\n    // @dev callback for PancakeSwapV3, is not allowed to be executed outside of a swap operation\\n    function pancakeV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    ) external onlyDuringSwap {\\n        UniswapV3.invokeCallback(amount0Delta, amount1Delta, _data);\\n    }\\n\\n    // Admin functions\\n\\n    // @dev withdraws tokens from the contract, in case of leftovers after a swap, or invalid swap requests\\n    function withdraw(address token, uint256 amount) external onlyOwner {\\n        IERC20(token).safeTransfer(treasury, amount);\\n    }\\n\\n    // @dev withdraws chain native tokens from the contract, in case of leftovers after a swap, or invalid swap requests\\n    function withdrawETH(uint256 amount) external onlyOwner {\\n        payable(treasury).transfer(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WowmaxSwapReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant swaps\\n */\\nabstract contract WowmaxSwapReentrancyGuard {\\n    uint256 private constant _SWAP_IN_PROGRESS = 1;\\n    uint256 private constant _SWAP_NOT_IN_PROGRESS = 2;\\n\\n    uint256 private _swapStatus;\\n\\n    constructor() {\\n        _swapStatus = _SWAP_NOT_IN_PROGRESS;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling swap, directly or indirectly\\n     */\\n    modifier reentrancyProtectedSwap() {\\n        _beforeSwap();\\n        _;\\n        _afterSwap();\\n    }\\n\\n    /**\\n     * @dev Prevents operation from being called outside of swap\\n     */\\n    modifier onlyDuringSwap() {\\n        require(_swapStatus == _SWAP_IN_PROGRESS, \\\"WOWMAX: not allowed outside of swap\\\");\\n        _;\\n    }\\n\\n    function _beforeSwap() private {\\n        require(_swapStatus != _SWAP_IN_PROGRESS, \\\"WOWMAX: reentrant swap not allowed\\\");\\n        _swapStatus = _SWAP_IN_PROGRESS;\\n    }\\n\\n    function _afterSwap() private {\\n        _swapStatus = _SWAP_NOT_IN_PROGRESS;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountOut\",\"type\":\"uint256[]\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"family\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWowmaxRouter.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IWowmaxRouter.ExchangeRoute[]\",\"name\":\"exchangeRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"slippage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountOutExpected\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IWowmaxRouter.ExchangeRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WowmaxRouter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000bd4a0f12293c54e4e8ad221271cf0d395dd60a71", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}