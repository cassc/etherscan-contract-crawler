{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/arbitrum/L1BridgeArbitrum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\nimport {IInbox} from \\\"../interfaces/arbitrum/IInbox.sol\\\";\\nimport {IL1GatewayRouter} from \\\"../interfaces/arbitrum/IL1GatewayRouter.sol\\\";\\n\\ncontract L1BridgeArbitrum is Ownable {\\n    /// @notice bips\\n    uint256 public FEE;\\n\\n    event EtherDeposit(address from, address to, uint256 amount);\\n    event TokenDeposit(address from, address to, address l1Token, address l2Token, uint256 amount);\\n\\n    constructor(uint256 _fee) Ownable() {\\n        FEE = _fee;\\n    }\\n\\n    function initiateEtherDeposit(\\n        address payable _inbox,\\n        address _to,\\n        uint256 maxSubmissionCost,\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas\\n    ) public payable {\\n        uint256 _amount = msg.value - maxSubmissionCost - gasLimit * maxFeePerGas;\\n        uint256 _fee = _amount * FEE / 10_000;\\n        uint256 _amountSubFee = _amount - _fee;\\n        uint256 _valueSubFee = msg.value - _fee;\\n\\n        IInbox(_inbox).createRetryableTicket{value: _valueSubFee}(\\n            _to,\\n            _amountSubFee,\\n            maxSubmissionCost,\\n            _to, // excessFeeRefundAddress\\n            _to, // callValueRefundAddress\\n            gasLimit,\\n            maxFeePerGas,\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit EtherDeposit(msg.sender, _to, _amount);\\n    }\\n\\n    function initiateERC20Deposit(\\n        address payable _router,\\n        address _gateway,\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxSubmissionCost,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid\\n    ) public payable {\\n        IERC20 erc20 = IERC20(_l1Token);\\n        require(erc20.transferFrom(msg.sender, address(this), _amount), \\\"!transferFrom\\\");\\n\\n        uint256 _fee = _amount * FEE / 10_000;\\n        uint256 _amountSubFee = _amount - _fee;\\n\\n        erc20.approve(_gateway, _amountSubFee);\\n        IL1GatewayRouter(_router).outboundTransferCustomRefund{value: msg.value}(\\n            _l1Token, // _l1Token\\n            _to, // _refundTo\\n            _to, // _to\\n            _amountSubFee, // _amount\\n            _maxGas, // _maxGas\\n            _gasPriceBid, // _gasPriceBid,\\n            abi.encode(_maxSubmissionCost, bytes(\\\"\\\")) // _data\\n        );\\n        erc20.approve(_gateway, 0);\\n\\n        emit TokenDeposit(msg.sender, _to, _l1Token, _l2Token, _amountSubFee);\\n    }\\n\\n    function withdrawEtherFees() public onlyOwner {\\n        (bool sent, bytes memory data) = owner().call{value: payable(address(this)).balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function withdrawERC20Fees(address _token) public onlyOwner {\\n        IERC20 erc20 = IERC20(_token);\\n        bool sent = erc20.transfer(owner(), erc20.balanceOf(address(this)));\\n        require(sent, \\\"Failed to send token\\\");\\n    }\\n\\n    function setFee(uint256 _fee) public onlyOwner {\\n        FEE = _fee;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/arbitrum/IInbox.sol\": {\r\n      \"content\": \"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/OffchainLabs/nitro-contracts/blob/main/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.6.9 <0.9.0;\\n\\ninterface IInbox {\\n    // // function bridge() external view returns (IBridge);\\n    // // function sequencerInbox() external view returns (ISequencerInbox);\\n\\n    // /**\\n    //  * @notice Send a generic L2 message to the chain\\n    //  * @dev This method is an optimization to avoid having to emit the entirety of the messageData in a log. Instead validators are expected to be able to parse the data from the transaction's input\\n    //  *      This method will be disabled upon L1 fork to prevent replay attacks on L2\\n    //  * @param messageData Data of the message being sent\\n    //  */\\n    // function sendL2MessageFromOrigin(bytes calldata messageData) external returns (uint256);\\n\\n    // /**\\n    //  * @notice Send a generic L2 message to the chain\\n    //  * @dev This method can be used to send any type of message that doesn't require L1 validation\\n    //  *      This method will be disabled upon L1 fork to prevent replay attacks on L2\\n    //  * @param messageData Data of the message being sent\\n    //  */\\n    // function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    // function sendL1FundedUnsignedTransaction(\\n    //     uint256 gasLimit,\\n    //     uint256 maxFeePerGas,\\n    //     uint256 nonce,\\n    //     address to,\\n    //     bytes calldata data\\n    // ) external payable returns (uint256);\\n\\n    // function sendL1FundedContractTransaction(uint256 gasLimit, uint256 maxFeePerGas, address to, bytes calldata data)\\n    //     external\\n    //     payable\\n    //     returns (uint256);\\n\\n    // function sendUnsignedTransaction(\\n    //     uint256 gasLimit,\\n    //     uint256 maxFeePerGas,\\n    //     uint256 nonce,\\n    //     address to,\\n    //     uint256 value,\\n    //     bytes calldata data\\n    // ) external returns (uint256);\\n\\n    // function sendContractTransaction(\\n    //     uint256 gasLimit,\\n    //     uint256 maxFeePerGas,\\n    //     address to,\\n    //     uint256 value,\\n    //     bytes calldata data\\n    // ) external returns (uint256);\\n\\n    // /**\\n    //  * @dev This method can only be called upon L1 fork and will not alias the caller\\n    //  *      This method will revert if not called from origin\\n    //  */\\n    // function sendL1FundedUnsignedTransactionToFork(\\n    //     uint256 gasLimit,\\n    //     uint256 maxFeePerGas,\\n    //     uint256 nonce,\\n    //     address to,\\n    //     bytes calldata data\\n    // ) external payable returns (uint256);\\n\\n    // /**\\n    //  * @dev This method can only be called upon L1 fork and will not alias the caller\\n    //  *      This method will revert if not called from origin\\n    //  */\\n    // function sendUnsignedTransactionToFork(\\n    //     uint256 gasLimit,\\n    //     uint256 maxFeePerGas,\\n    //     uint256 nonce,\\n    //     address to,\\n    //     uint256 value,\\n    //     bytes calldata data\\n    // ) external returns (uint256);\\n\\n    // /**\\n    //  * @notice Send a message to initiate L2 withdrawal\\n    //  * @dev This method can only be called upon L1 fork and will not alias the caller\\n    //  *      This method will revert if not called from origin\\n    //  */\\n    // function sendWithdrawEthToFork(\\n    //     uint256 gasLimit,\\n    //     uint256 maxFeePerGas,\\n    //     uint256 nonce,\\n    //     uint256 value,\\n    //     address withdrawTo\\n    // ) external returns (uint256);\\n\\n    // /**\\n    //  * @notice Get the L1 fee for submitting a retryable\\n    //  * @dev This fee can be paid by funds already in the L2 aliased address or by the current message value\\n    //  * @dev This formula may change in the future, to future proof your code query this method instead of inlining!!\\n    //  * @param dataLength The length of the retryable's calldata, in bytes\\n    //  * @param baseFee The block basefee when the retryable is included in the chain, if 0 current block.basefee will be used\\n    //  */\\n    // function calculateRetryableSubmissionFee(uint256 dataLength, uint256 baseFee) external view returns (uint256);\\n\\n    // /**\\n    //  * @notice Deposit eth from L1 to L2 to address of the sender if sender is an EOA, and to its aliased address if the sender is a contract\\n    //  * @dev This does not trigger the fallback function when receiving in the L2 side.\\n    //  *      Look into retryable tickets if you are interested in this functionality.\\n    //  * @dev This function should not be called inside contract constructors\\n    //  */\\n    // function depositEth() external payable returns (uint256);\\n\\n    /**\\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\\n     * @param to destination L2 contract address\\n     * @param l2CallValue call value for retryable L2 message\\n     * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n     * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param data ABI encoded data of L2 message\\n     * @return unique message number of the retryable transaction\\n     */\\n    function createRetryableTicket(\\n        address to,\\n        uint256 l2CallValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    // /**\\n    //  * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\\n    //  * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed funds\\n    //  * come from the deposit alone, rather than falling back on the user's L2 balance\\n    //  * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\\n    //  * createRetryableTicket method is the recommended standard.\\n    //  * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\\n    //  * @param to destination L2 contract address\\n    //  * @param l2CallValue call value for retryable L2 message\\n    //  * @param maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\\n    //  * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on L2 balance\\n    //  * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n    //  * @param gasLimit Max gas deducted from user's L2 balance to cover L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n    //  * @param maxFeePerGas price bid for L2 execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n    //  * @param data ABI encoded data of L2 message\\n    //  * @return unique message number of the retryable transaction\\n    //  */\\n    // function unsafeCreateRetryableTicket(\\n    //     address to,\\n    //     uint256 l2CallValue,\\n    //     uint256 maxSubmissionCost,\\n    //     address excessFeeRefundAddress,\\n    //     address callValueRefundAddress,\\n    //     uint256 gasLimit,\\n    //     uint256 maxFeePerGas,\\n    //     bytes calldata data\\n    // ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/arbitrum/IL1GatewayRouter.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.9 <0.9.0;\\n\\n/**\\n * @title Handles deposits from Erhereum into Arbitrum. Tokens are routered to their appropriate L1 gateway (Router itself also conforms to the Gateway itnerface).\\n * @notice Router also serves as an L1-L2 token address oracle.\\n */\\ninterface IL1GatewayRouter {\\n    /**\\n     * @notice Deposit ERC20 token from Ethereum into Arbitrum using the registered or otherwise default gateway\\n     * @dev Some legacy gateway might not have the outboundTransferCustomRefund method and will revert, in such case use outboundTransfer instead\\n     *      L2 address alias will not be applied to the following types of addresses on L1:\\n     *      - an externally-owned account\\n     *      - a contract in construction\\n     *      - an address where a contract will be created\\n     *      - an address where a contract lived, but was destroyed\\n     * @param _token L1 address of ERC20\\n     * @param _refundTo Account, or its L2 alias if it have code in L1, to be credited with excess gas refund in L2\\n     * @param _to Account to be credited with the tokens in the L2 (can be the user's L2 account or a contract), not subject to L2 aliasing\\n     *               This account, or its L2 alias if it have code in L1, will also be able to cancel the retryable ticket and receive callvalue refund\\n     * @param _amount Token Amount\\n     * @param _maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n     * @param _gasPriceBid Gas price for L2 execution\\n     * @param _data encoded data from router and user\\n     * @return res abi encoded inbox sequence number\\n     */\\n    function outboundTransferCustomRefund(\\n        address _token,\\n        address _refundTo,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"permit2/=lib/permit2/\",\r\n      \"solmate/=lib/permit2/lib/solmate/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"}],\"name\":\"initiateERC20Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"}],\"name\":\"initiateEtherDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEtherFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "L1BridgeArbitrum", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000032", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}