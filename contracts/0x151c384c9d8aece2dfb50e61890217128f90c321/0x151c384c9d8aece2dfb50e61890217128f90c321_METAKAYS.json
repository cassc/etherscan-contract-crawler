{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/// @title DynamicBuffer\r\n/// @author David Huber (@cxkoda) and Simon Fremaux (@dievardump). See also\r\n///         https://raw.githubusercontent.com/dievardump/solidity-dynamic-buffer\r\n/// @notice This library is used to allocate a big amount of container memory\r\n//          which will be subsequently filled without needing to reallocate\r\n///         memory.\r\n/// @dev First, allocate memory.\r\n///      Then use `buffer.appendUnchecked(theBytes)` or `appendSafe()` if\r\n///      bounds checking is required.\r\nlibrary DynamicBuffer {\r\n    /// @notice Allocates container space for the DynamicBuffer\r\n    /// @param capacity The intended max amount of bytes in the buffer\r\n    /// @return buffer The memory location of the buffer\r\n    /// @dev Allocates `capacity + 0x60` bytes of space\r\n    ///      The buffer array starts at the first container data position,\r\n    ///      (i.e. `buffer = container + 0x20`)\r\n    function allocate(uint256 capacity) internal pure returns (bytes memory buffer) {\r\n        assembly {\r\n            // Get next-free memory address\r\n            let container := mload(0x40)\r\n\r\n            // Allocate memory by setting a new next-free address\r\n            {\r\n                // Add 2 x 32 bytes in size for the two length fields\r\n                // Add 32 bytes safety space for 32B chunked copy\r\n                let size := add(capacity, 0x60)\r\n                let newNextFree := add(container, size)\r\n                mstore(0x40, newNextFree)\r\n            }\r\n\r\n            // Set the correct container length\r\n            {\r\n                let length := add(capacity, 0x40)\r\n                mstore(container, length)\r\n            }\r\n\r\n            // The buffer starts at idx 1 in the container (0 is length)\r\n            buffer := add(container, 0x20)\r\n\r\n            // Init content with length 0\r\n            mstore(buffer, 0)\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    /// @notice Appends data to buffer, and update buffer length\r\n    /// @param buffer the buffer to append the data to\r\n    /// @param data the data to append\r\n    /// @dev Does not perform out-of-bound checks (container capacity)\r\n    ///      for efficiency.\r\n    function appendUnchecked(bytes memory buffer, bytes memory data) internal pure {\r\n        assembly {\r\n            let length := mload(data)\r\n            for {\r\n                data := add(data, 0x20)\r\n                let dataEnd := add(data, length)\r\n                let copyTo := add(buffer, add(mload(buffer), 0x20))\r\n            } lt(data, dataEnd) {\r\n                data := add(data, 0x20)\r\n                copyTo := add(copyTo, 0x20)\r\n            } {\r\n                // Copy 32B chunks from data to buffer.\r\n                // This may read over data array boundaries and copy invalid\r\n                // bytes, which doesn't matter in the end since we will\r\n                // later set the correct buffer length, and have allocated an\r\n                // additional word to avoid buffer overflow.\r\n                mstore(copyTo, mload(data))\r\n            }\r\n\r\n            // Update buffer length\r\n            mstore(buffer, add(mload(buffer), length))\r\n        }\r\n    }\r\n\r\n    /// @notice Appends data to buffer, and update buffer length\r\n    /// @param buffer the buffer to append the data to\r\n    /// @param data the data to append\r\n    /// @dev Performs out-of-bound checks and calls `appendUnchecked`.\r\n    function appendSafe(bytes memory buffer, bytes memory data) internal pure {\r\n        uint256 capacity;\r\n        uint256 length;\r\n        assembly {\r\n            capacity := sub(mload(sub(buffer, 0x20)), 0x40)\r\n            length := mload(buffer)\r\n        }\r\n\r\n        require(length + data.length <= capacity, \"DynamicBuffer: Appending out of bounds.\");\r\n        appendUnchecked(buffer, data);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/// @title Base64\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @notice Provides functions for encoding/decoding base64\r\nlibrary Base64 {\r\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\r\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\r\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\r\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE_ENCODE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n                // read 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function decode(string memory _data) internal pure returns (bytes memory) {\r\n        bytes memory data = bytes(_data);\r\n\r\n        if (data.length == 0) return new bytes(0);\r\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\r\n\r\n        // load the table into memory\r\n        bytes memory table = TABLE_DECODE;\r\n\r\n        // every 4 characters represent 3 bytes\r\n        uint256 decodedLen = (data.length / 4) * 3;\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        bytes memory result = new bytes(decodedLen + 32);\r\n\r\n        assembly {\r\n            // padding with '='\r\n            let lastBytes := mload(add(data, mload(data)))\r\n            if eq(and(lastBytes, 0xFF), 0x3d) {\r\n                decodedLen := sub(decodedLen, 1)\r\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\r\n                    decodedLen := sub(decodedLen, 1)\r\n                }\r\n            }\r\n\r\n            // set the actual output length\r\n            mstore(result, decodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 4 characters at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n               // read 4 characters\r\n               dataPtr := add(dataPtr, 4)\r\n               let input := mload(dataPtr)\r\n\r\n               // write 3 bytes\r\n               let output := add(\r\n                   add(\r\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\r\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\r\n                   add(\r\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\r\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\r\n                    )\r\n                )\r\n                mstore(resultPtr, shl(232, output))\r\n                resultPtr := add(resultPtr, 3)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}\r\n\r\n// File: contracts/interfaces/ILayerZeroEndpoint.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}\r\n\r\n// File: contracts/interfaces/ILayerZeroReceiver.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroReceiver {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/NonblockingReceiver.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract NonblockingReceiver is Ownable, ILayerZeroReceiver {\r\n\r\n    ILayerZeroEndpoint internal endpoint;\r\n\r\n    struct FailedMessages {\r\n        uint payloadLength;\r\n        bytes32 payloadHash;\r\n    }\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint => FailedMessages))) public failedMessages;\r\n    mapping(uint16 => bytes) public trustedRemoteLookup;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) external override {\r\n        require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security\r\n        require(_srcAddress.length == trustedRemoteLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(trustedRemoteLookup[_srcChainId]),\r\n            \"NonblockingReceiver: invalid source sending contract\");\r\n\r\n        // try-catch all errors/exceptions\r\n        // having failed messages does not block messages passing\r\n        try this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\r\n            // do nothing\r\n        } catch {\r\n            // error / exception\r\n            failedMessages[_srcChainId][_srcAddress][_nonce] = FailedMessages(_payload.length, keccak256(_payload));\r\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\r\n        }\r\n    }\r\n\r\n    function onLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public {\r\n        // only internal transaction\r\n        require(msg.sender == address(this), \"NonblockingReceiver: caller must be Bridge.\");\r\n\r\n        // handle incoming message\r\n        _LzReceive( _srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function\r\n    function _LzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _txParam) internal {\r\n        endpoint.send{value: msg.value}(_dstChainId, trustedRemoteLookup[_dstChainId], _payload, _refundAddress, _zroPaymentAddress, _txParam);\r\n    }\r\n\r\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes calldata _payload) external payable {\r\n        // assert there is message to retry\r\n        FailedMessages storage failedMsg = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(failedMsg.payloadHash != bytes32(0), \"NonblockingReceiver: no stored message\");\r\n        require(_payload.length == failedMsg.payloadLength && keccak256(_payload) == failedMsg.payloadHash, \"LayerZero: invalid payload\");\r\n        // clear the stored message\r\n        failedMsg.payloadLength = 0;\r\n        failedMsg.payloadHash = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    function setTrustedRemote(uint16 _chainId, bytes calldata _trustedRemote) external onlyOwner {\r\n        trustedRemoteLookup[_chainId] = _trustedRemote;\r\n    }\r\n}\r\n\r\n// File: contracts/METAKAYS.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IFeatures1 {\r\n  function readMisc(uint256 _id) external view returns (string memory);\r\n}\r\n\r\ncontract METAKAYS is Ownable, ERC721, NonblockingReceiver {\r\n\r\n    using DynamicBuffer for bytes;\r\n    event Kustomized(uint256 _itemID);\r\n\r\n    struct Features {\r\n      uint256 data1;\r\n      uint256 data2;\r\n      uint256[4] colors;\r\n      uint256[3] colorSelectors;\r\n    }\r\n\r\n    IFeatures1 features1;\r\n    address public _owner;\r\n    uint256 nextTokenId = 0;\r\n    uint256 MAX_MINT_ETHEREUM = 8888;\r\n\r\n    uint gasForDestinationLzReceive = 350000;\r\n\r\n    bytes32 public _merkleRoot;\r\n\r\n    mapping(uint256 => Features) public features;\r\n    mapping (uint256 => string) public svgData;\r\n    mapping (uint256 => string) public svgBackgroundColor;\r\n    mapping (uint256 => uint256) public svgBackgroundColorSelector;\r\n    mapping (uint256 => bool) public finality;\r\n    mapping (string => bool) public taken;\r\n    mapping (address => bool) public whitelistClaimed;\r\n\r\n\r\n    constructor() ERC721(\"METAKAYS\", \"MK\") {\r\n        _owner = msg.sender;\r\n        endpoint = ILayerZeroEndpoint(0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675);\r\n\r\n        svgBackgroundColor[0] = '#800000\"/>';\r\n        svgBackgroundColor[1] = '#8B0000\"/>';\r\n        svgBackgroundColor[2] = '#A52A2A\"/>';\r\n        svgBackgroundColor[3] = '#B22222\"/>';\r\n        svgBackgroundColor[4] = '#DC143C\"/>';\r\n        svgBackgroundColor[5] = '#FF0000\"/>';\r\n        svgBackgroundColor[6] = '#FF6347\"/>';\r\n        svgBackgroundColor[7] = '#FF7F50\"/>';\r\n        svgBackgroundColor[8] = '#CD5C5C\"/>';\r\n        svgBackgroundColor[9] = '#F08080\"/>';\r\n        svgBackgroundColor[10] = '#E9967A\"/>';\r\n        svgBackgroundColor[11] = '#FA8072\"/>';\r\n        svgBackgroundColor[12] = '#FFA07A\"/>';\r\n        svgBackgroundColor[13] = '#FF4500\"/>';\r\n        svgBackgroundColor[14] = '#FF8C00\"/>';\r\n        svgBackgroundColor[15] = '#FFA500\"/>';\r\n        svgBackgroundColor[16] = '#FFD700\"/>';\r\n        svgBackgroundColor[17] = '#B8860B\"/>';\r\n        svgBackgroundColor[18] = '#DAA520\"/>';\r\n        svgBackgroundColor[19] = '#EEE8AA\"/>';\r\n        svgBackgroundColor[20] = '#BDB76B\"/>';\r\n        svgBackgroundColor[21] = '#F0E68C\"/>';\r\n        svgBackgroundColor[22] = '#808000\"/>';\r\n        svgBackgroundColor[23] = '#FFFF00\"/>';\r\n        svgBackgroundColor[24] = '#9ACD32\"/>';\r\n        svgBackgroundColor[25] = '#556B2F\"/>';\r\n        svgBackgroundColor[26] = '#6B8E23\"/>';\r\n        svgBackgroundColor[27] = '#7CFC00\"/>';\r\n        svgBackgroundColor[28] = '#7FFF00\"/>';\r\n        svgBackgroundColor[29] = '#ADFF2F\"/>';\r\n        svgBackgroundColor[30] = '#006400\"/>';\r\n        svgBackgroundColor[31] = '#008000\"/>';\r\n        svgBackgroundColor[32] = '#228B22\"/>';\r\n        svgBackgroundColor[33] = '#00FF00\"/>';\r\n        svgBackgroundColor[34] = '#32CD32\"/>';\r\n        svgBackgroundColor[35] = '#90EE90\"/>';\r\n        svgBackgroundColor[36] = '#98FB98\"/>';\r\n        svgBackgroundColor[37] = '#8FBC8F\"/>';\r\n        svgBackgroundColor[38] = '#00FA9A\"/>';\r\n        svgBackgroundColor[39] = '#00FF7F\"/>';\r\n        svgBackgroundColor[40] = '#2E8B57\"/>';\r\n        svgBackgroundColor[41] = '#66CDAA\"/>';\r\n        svgBackgroundColor[42] = '#3CB371\"/>';\r\n        svgBackgroundColor[43] = '#20B2AA\"/>';\r\n        svgBackgroundColor[44] = '#2F4F4F\"/>';\r\n        svgBackgroundColor[45] = '#008080\"/>';\r\n        svgBackgroundColor[46] = '#008B8B\"/>';\r\n        svgBackgroundColor[47] = '#00FFFF\"/>';\r\n        svgBackgroundColor[48] = '#00FFFF\"/>';\r\n        svgBackgroundColor[49] = '#E0FFFF\"/>';\r\n        svgBackgroundColor[50] = '#00CED1\"/>';\r\n        svgBackgroundColor[51] = '#40E0D0\"/>';\r\n        svgBackgroundColor[52] = '#48D1CC\"/>';\r\n        svgBackgroundColor[53] = '#AFEEEE\"/>';\r\n        svgBackgroundColor[54] = '#7FFFD4\"/>';\r\n        svgBackgroundColor[55] = '#B0E0E6\"/>';\r\n        svgBackgroundColor[56] = '#5F9EA0\"/>';\r\n        svgBackgroundColor[57] = '#4682B4\"/>';\r\n        svgBackgroundColor[58] = '#6495ED\"/>';\r\n        svgBackgroundColor[59] = '#00BFFF\"/>';\r\n        svgBackgroundColor[60] = '#1E90FF\"/>';\r\n        svgBackgroundColor[61] = '#ADD8E6\"/>';\r\n        svgBackgroundColor[62] = '#87CEEB\"/>';\r\n        svgBackgroundColor[63] = '#87CEFA\"/>';\r\n        svgBackgroundColor[64] = '#191970\"/>';\r\n        svgBackgroundColor[65] = '#000080\"/>';\r\n        svgBackgroundColor[66] = '#00008B\"/>';\r\n        svgBackgroundColor[67] = '#0000CD\"/>';\r\n        svgBackgroundColor[68] = '#0000FF\"/>';\r\n        svgBackgroundColor[69] = '#4169E1\"/>';\r\n        svgBackgroundColor[70] = '#8A2BE2\"/>';\r\n        svgBackgroundColor[71] = '#4B0082\"/>';\r\n        svgBackgroundColor[72] = '#483D8B\"/>';\r\n        svgBackgroundColor[73] = '#6A5ACD\"/>';\r\n        svgBackgroundColor[74] = '#7B68EE\"/>';\r\n        svgBackgroundColor[75] = '#9370DB\"/>';\r\n        svgBackgroundColor[76] = '#8B008B\"/>';\r\n        svgBackgroundColor[77] = '#9400D3\"/>';\r\n        svgBackgroundColor[78] = '#9932CC\"/>';\r\n        svgBackgroundColor[79] = '#BA55D3\"/>';\r\n        svgBackgroundColor[80] = '#800080\"/>';\r\n        svgBackgroundColor[81] = '#D8BFD8\"/>';\r\n        svgBackgroundColor[82] = '#DDA0DD\"/>';\r\n        svgBackgroundColor[83] = '#EE82EE\"/>';\r\n        svgBackgroundColor[84] = '#FF00FF\"/>';\r\n        svgBackgroundColor[85] = '#DA70D6\"/>';\r\n        svgBackgroundColor[86] = '#C71585\"/>';\r\n        svgBackgroundColor[87] = '#DB7093\"/>';\r\n        svgBackgroundColor[88] = '#FF1493\"/>';\r\n        svgBackgroundColor[89] = '#FF69B4\"/>';\r\n        svgBackgroundColor[90] = '#FFB6C1\"/>';\r\n        svgBackgroundColor[91] = '#FFC0CB\"/>';\r\n        svgBackgroundColor[92] = '#FAEBD7\"/>';\r\n        svgBackgroundColor[93] = '#F5F5DC\"/>';\r\n        svgBackgroundColor[94] = '#FFE4C4\"/>';\r\n        svgBackgroundColor[95] = '#FFEBCD\"/>';\r\n        svgBackgroundColor[96] = '#F5DEB3\"/>';\r\n        svgBackgroundColor[97] = '#FFF8DC\"/>';\r\n        svgBackgroundColor[98] = '#FFFACD\"/>';\r\n        svgBackgroundColor[99] = '#FAFAD2\"/>';\r\n        svgBackgroundColor[100] = '#FFFFE0\"/>';\r\n        svgBackgroundColor[101] = '#8B4513\"/>';\r\n        svgBackgroundColor[102] = '#A0522D\"/>';\r\n        svgBackgroundColor[103] = '#D2691E\"/>';\r\n        svgBackgroundColor[104] = '#CD853F\"/>';\r\n        svgBackgroundColor[105] = '#F4A460\"/>';\r\n        svgBackgroundColor[106] = '#DEB887\"/>';\r\n        svgBackgroundColor[107] = '#D2B48C\"/>';\r\n        svgBackgroundColor[108] = '#BC8F8F\"/>';\r\n        svgBackgroundColor[109] = '#FFE4B5\"/>';\r\n        svgBackgroundColor[110] = '#FFDEAD\"/>';\r\n        svgBackgroundColor[111] = '#FFDAB9\"/>';\r\n        svgBackgroundColor[112] = '#FFE4E1\"/>';\r\n        svgBackgroundColor[113] = '#FFF0F5\"/>';\r\n        svgBackgroundColor[114] = '#FAF0E6\"/>';\r\n        svgBackgroundColor[115] = '#FDF5E6\"/>';\r\n        svgBackgroundColor[116] = '#FFEFD5\"/>';\r\n        svgBackgroundColor[117] = '#FFF5EE\"/>';\r\n        svgBackgroundColor[118] = '#F5FFFA\"/>';\r\n        svgBackgroundColor[119] = '#708090\"/>';\r\n        svgBackgroundColor[120] = '#778899\"/>';\r\n        svgBackgroundColor[121] = '#B0C4DE\"/>';\r\n        svgBackgroundColor[122] = '#E6E6FA\"/>';\r\n        svgBackgroundColor[123] = '#FFFAF0\"/>';\r\n        svgBackgroundColor[124] = '#F0F8FF\"/>';\r\n        svgBackgroundColor[125] = '#F8F8FF\"/>';\r\n        svgBackgroundColor[126] = '#F0FFF0\"/>';\r\n        svgBackgroundColor[127] = '#FFFFF0\"/>';\r\n        svgBackgroundColor[128] = '#F0FFFF\"/>';\r\n        svgBackgroundColor[129] = '#FFFAFA\"/>';\r\n        svgBackgroundColor[130] = '#000000\"/>';\r\n        svgBackgroundColor[131] = '#696969\"/>';\r\n        svgBackgroundColor[132] = '#808080\"/>';\r\n        svgBackgroundColor[133] = '#A9A9A9\"/>';\r\n        svgBackgroundColor[134] = '#C0C0C0\"/>';\r\n        svgBackgroundColor[135] = '#D3D3D3\"/>';\r\n        svgBackgroundColor[136] = '#DCDCDC\"/>';\r\n        svgBackgroundColor[137] = '#FFFFFF\"/>';\r\n\r\n        svgData[0] = '<use xlink:href=\"#cube\" x=\"487\" y=\"540';\r\n        svgData[1] = '<use xlink:href=\"#cube\" x=\"543\" y=\"568';\r\n        svgData[2] = '<use xlink:href=\"#cube\" x=\"599\" y=\"596';\r\n        svgData[3] = '<use xlink:href=\"#cube\" x=\"655\" y=\"624';\r\n        svgData[4] = '<use xlink:href=\"#cube\" x=\"711\" y=\"652';\r\n        svgData[5] = '<use xlink:href=\"#cube\" x=\"767\" y=\"680';\r\n        svgData[6] = '<use xlink:href=\"#cube\" x=\"823\" y=\"708';\r\n        svgData[7] = '<use xlink:href=\"#cube\" x=\"879\" y=\"736';\r\n        svgData[8] = '<use xlink:href=\"#cube\" x=\"487\" y=\"468';\r\n        svgData[9] = '<use xlink:href=\"#cube\" x=\"543\" y=\"496';\r\n        svgData[10] = '<use xlink:href=\"#cube\" x=\"599\" y=\"524';\r\n        svgData[11] = '<use xlink:href=\"#cube\" x=\"655\" y=\"552';\r\n        svgData[12] = '<use xlink:href=\"#cube\" x=\"711\" y=\"580';\r\n        svgData[13] = '<use xlink:href=\"#cube\" x=\"767\" y=\"608';\r\n        svgData[14] = '<use xlink:href=\"#cube\" x=\"823\" y=\"636';\r\n        svgData[15] = '<use xlink:href=\"#cube\" x=\"879\" y=\"664';\r\n        svgData[16] = '<use xlink:href=\"#cube\" x=\"487\" y=\"396';\r\n        svgData[17] = '<use xlink:href=\"#cube\" x=\"543\" y=\"424';\r\n        svgData[18] = '<use xlink:href=\"#cube\" x=\"599\" y=\"452';\r\n        svgData[19] = '<use xlink:href=\"#cube\" x=\"655\" y=\"480';\r\n        svgData[20] = '<use xlink:href=\"#cube\" x=\"711\" y=\"508';\r\n        svgData[21] = '<use xlink:href=\"#cube\" x=\"767\" y=\"536';\r\n        svgData[22] = '<use xlink:href=\"#cube\" x=\"823\" y=\"564';\r\n        svgData[23] = '<use xlink:href=\"#cube\" x=\"879\" y=\"592';\r\n        svgData[24] = '<use xlink:href=\"#cube\" x=\"487\" y=\"324';\r\n        svgData[25] = '<use xlink:href=\"#cube\" x=\"543\" y=\"352';\r\n        svgData[26] = '<use xlink:href=\"#cube\" x=\"599\" y=\"380';\r\n        svgData[27] = '<use xlink:href=\"#cube\" x=\"655\" y=\"408';\r\n        svgData[28] = '<use xlink:href=\"#cube\" x=\"711\" y=\"436';\r\n        svgData[29] = '<use xlink:href=\"#cube\" x=\"767\" y=\"464';\r\n        svgData[30] = '<use xlink:href=\"#cube\" x=\"823\" y=\"492';\r\n        svgData[31] = '<use xlink:href=\"#cube\" x=\"879\" y=\"520';\r\n        svgData[32] = '<use xlink:href=\"#cube\" x=\"487\" y=\"252';\r\n        svgData[33] = '<use xlink:href=\"#cube\" x=\"543\" y=\"280';\r\n        svgData[34] = '<use xlink:href=\"#cube\" x=\"599\" y=\"308';\r\n        svgData[35] = '<use xlink:href=\"#cube\" x=\"655\" y=\"336';\r\n        svgData[36] = '<use xlink:href=\"#cube\" x=\"711\" y=\"364';\r\n        svgData[37] = '<use xlink:href=\"#cube\" x=\"767\" y=\"392';\r\n        svgData[38] = '<use xlink:href=\"#cube\" x=\"823\" y=\"420';\r\n        svgData[39] = '<use xlink:href=\"#cube\" x=\"879\" y=\"448';\r\n        svgData[40] = '<use xlink:href=\"#cube\" x=\"487\" y=\"180';\r\n        svgData[41] = '<use xlink:href=\"#cube\" x=\"543\" y=\"208';\r\n        svgData[42] = '<use xlink:href=\"#cube\" x=\"599\" y=\"236';\r\n        svgData[43] = '<use xlink:href=\"#cube\" x=\"655\" y=\"264';\r\n        svgData[44] = '<use xlink:href=\"#cube\" x=\"711\" y=\"292';\r\n        svgData[45] = '<use xlink:href=\"#cube\" x=\"767\" y=\"320';\r\n        svgData[46] = '<use xlink:href=\"#cube\" x=\"823\" y=\"348';\r\n        svgData[47] = '<use xlink:href=\"#cube\" x=\"879\" y=\"376';\r\n        svgData[48] = '<use xlink:href=\"#cube\" x=\"487\" y=\"108';\r\n        svgData[49] = '<use xlink:href=\"#cube\" x=\"543\" y=\"136';\r\n        svgData[50] = '<use xlink:href=\"#cube\" x=\"599\" y=\"164';\r\n        svgData[51] = '<use xlink:href=\"#cube\" x=\"655\" y=\"192';\r\n        svgData[52] = '<use xlink:href=\"#cube\" x=\"711\" y=\"220';\r\n        svgData[53] = '<use xlink:href=\"#cube\" x=\"767\" y=\"248';\r\n        svgData[54] = '<use xlink:href=\"#cube\" x=\"823\" y=\"276';\r\n        svgData[55] = '<use xlink:href=\"#cube\" x=\"879\" y=\"304';\r\n        svgData[56] = '<use xlink:href=\"#cube\" x=\"487\" y=\"36';\r\n        svgData[57] = '<use xlink:href=\"#cube\" x=\"543\" y=\"64';\r\n        svgData[58] = '<use xlink:href=\"#cube\" x=\"599\" y=\"92';\r\n        svgData[59] = '<use xlink:href=\"#cube\" x=\"655\" y=\"120';\r\n        svgData[60] = '<use xlink:href=\"#cube\" x=\"711\" y=\"148';\r\n        svgData[61] = '<use xlink:href=\"#cube\" x=\"767\" y=\"176';\r\n        svgData[62] = '<use xlink:href=\"#cube\" x=\"823\" y=\"204';\r\n        svgData[63] = '<use xlink:href=\"#cube\" x=\"879\" y=\"232';\r\n        svgData[64] = '<use xlink:href=\"#cube\" x=\"431\" y=\"568';\r\n        svgData[65] = '<use xlink:href=\"#cube\" x=\"487\" y=\"596';\r\n        svgData[66] = '<use xlink:href=\"#cube\" x=\"543\" y=\"624';\r\n        svgData[67] = '<use xlink:href=\"#cube\" x=\"599\" y=\"652';\r\n        svgData[68] = '<use xlink:href=\"#cube\" x=\"655\" y=\"680';\r\n        svgData[69] = '<use xlink:href=\"#cube\" x=\"711\" y=\"708';\r\n        svgData[70] = '<use xlink:href=\"#cube\" x=\"767\" y=\"736';\r\n        svgData[71] = '<use xlink:href=\"#cube\" x=\"823\" y=\"764';\r\n        svgData[72] = '<use xlink:href=\"#cube\" x=\"431\" y=\"496';\r\n        svgData[73] = '<use xlink:href=\"#cube\" x=\"487\" y=\"524';\r\n        svgData[74] = '<use xlink:href=\"#cube\" x=\"543\" y=\"552';\r\n        svgData[75] = '<use xlink:href=\"#cube\" x=\"599\" y=\"580';\r\n        svgData[76] = '<use xlink:href=\"#cube\" x=\"655\" y=\"608';\r\n        svgData[77] = '<use xlink:href=\"#cube\" x=\"711\" y=\"636';\r\n        svgData[78] = '<use xlink:href=\"#cube\" x=\"767\" y=\"664';\r\n        svgData[79] = '<use xlink:href=\"#cube\" x=\"823\" y=\"692';\r\n        svgData[80] = '<use xlink:href=\"#cube\" x=\"431\" y=\"424';\r\n        svgData[81] = '<use xlink:href=\"#cube\" x=\"487\" y=\"452';\r\n        svgData[82] = '<use xlink:href=\"#cube\" x=\"543\" y=\"480';\r\n        svgData[83] = '<use xlink:href=\"#cube\" x=\"599\" y=\"508';\r\n        svgData[84] = '<use xlink:href=\"#cube\" x=\"655\" y=\"536';\r\n        svgData[85] = '<use xlink:href=\"#cube\" x=\"711\" y=\"564';\r\n        svgData[86] = '<use xlink:href=\"#cube\" x=\"767\" y=\"592';\r\n        svgData[87] = '<use xlink:href=\"#cube\" x=\"823\" y=\"620';\r\n        svgData[88] = '<use xlink:href=\"#cube\" x=\"431\" y=\"352';\r\n        svgData[89] = '<use xlink:href=\"#cube\" x=\"487\" y=\"380';\r\n        svgData[90] = '<use xlink:href=\"#cube\" x=\"543\" y=\"408';\r\n        svgData[91] = '<use xlink:href=\"#cube\" x=\"599\" y=\"436';\r\n        svgData[92] = '<use xlink:href=\"#cube\" x=\"655\" y=\"464';\r\n        svgData[93] = '<use xlink:href=\"#cube\" x=\"711\" y=\"492';\r\n        svgData[94] = '<use xlink:href=\"#cube\" x=\"767\" y=\"520';\r\n        svgData[95] = '<use xlink:href=\"#cube\" x=\"823\" y=\"548';\r\n        svgData[96] = '<use xlink:href=\"#cube\" x=\"431\" y=\"280';\r\n        svgData[97] = '<use xlink:href=\"#cube\" x=\"487\" y=\"308';\r\n        svgData[98] = '<use xlink:href=\"#cube\" x=\"543\" y=\"336';\r\n        svgData[99] = '<use xlink:href=\"#cube\" x=\"599\" y=\"364';\r\n        svgData[100] = '<use xlink:href=\"#cube\" x=\"655\" y=\"392';\r\n        svgData[101] = '<use xlink:href=\"#cube\" x=\"711\" y=\"420';\r\n        svgData[102] = '<use xlink:href=\"#cube\" x=\"767\" y=\"448';\r\n        svgData[103] = '<use xlink:href=\"#cube\" x=\"823\" y=\"476';\r\n    }\r\n\r\n    // this is here for illustrative purposes -- you may ignore the onlyOwner isOwner on the functions\r\n    // keeping in for nostalgic/sentimental reasons\r\n    modifier isOwner(){\r\n        require(_owner == msg.sender, \"not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setFeaturesAddress(address addr) external onlyOwner isOwner {\r\n        features1= IFeatures1(addr);\r\n    }\r\n\r\n    function setPresaleMerkleRoot(bytes32 root) external onlyOwner isOwner {\r\n        _merkleRoot = root;\r\n    }\r\n\r\n    function getFeatures(uint256 _tokenId) public view returns(uint256 , uint256 , uint256[4] memory, uint256[3] memory) {\r\n        return (features[_tokenId].data1, features[_tokenId].data2, features[_tokenId].colors, features[_tokenId].colorSelectors);\r\n    }\r\n\r\n    //minting any unclaimed.\r\n    function devMint(uint256 _amount) external onlyOwner isOwner {\r\n        require(nextTokenId + _amount <= MAX_MINT_ETHEREUM, \"MAX SUPPLY!\");\r\n        for (uint256 i = 0; i < _amount; i++) {\r\n            _safeMint(msg.sender, ++nextTokenId);\r\n        }\r\n    }\r\n\r\n    function setFinality(uint256 _itemID) public {\r\n        require(msg.sender == ownerOf(_itemID), \"YOU ARE NOT THE OWNER!\");\r\n        require(finality[_itemID] == false, \"ALREADY IN FINALITY!\");\r\n\r\n        Features memory feature = features[_itemID];\r\n        bytes memory output = abi.encodePacked(feature.data1, feature.data2, feature.colors[0], feature.colors[1], feature.colors[2], feature.colors[3]);\r\n        require(taken[string(output)] == false, \"THIS IS ALREADY TAKEN!\");\r\n\r\n        finality[_itemID] = true;\r\n        taken[string(output)] = true;\r\n    }\r\n\r\n    function whitelistClaim(uint256 _amount, bytes32[] calldata _merkleProof) external payable {\r\n        require(!whitelistClaimed[msg.sender], \"ADDRESS HAS ALREADY CLAIMED!\");\r\n        require(_amount > 0, \"CAN'T BE ZERO!\");\r\n        require(nextTokenId + _amount <= MAX_MINT_ETHEREUM, \"MAX SUPPLY!\");\r\n\r\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, _amount));\r\n        require(MerkleProof.verify(_merkleProof, _merkleRoot, leaf),  \"INVALID PROOF!\");\r\n\r\n        whitelistClaimed[msg.sender] = true;\r\n        for (uint256 i = 0; i < _amount; i++) {\r\n            _safeMint(msg.sender, ++nextTokenId);\r\n        }\r\n    }\r\n\r\n    // this function transfers the nft from your address on the\r\n    // source chain to the same address on the destination chain\r\n    function traverseChains(uint16 _chainId, uint tokenId) public payable {\r\n        require(msg.sender == ownerOf(tokenId), \"You must own the token to traverse\");\r\n        require(trustedRemoteLookup[_chainId].length > 0, \"This chain is currently unavailable for travel\");\r\n        require(finality[tokenId] == false, \"ONLY NON-FINALITY CAN TRAVERSE!\");\r\n        // burn NFT, eliminating it from circulation on src chain\r\n        _burn(tokenId);\r\n\r\n        // abi.encode() the payload with the values to send\r\n        bytes memory payload = abi.encode(msg.sender, tokenId);\r\n\r\n        // encode adapterParams to specify more gas for the destination\r\n        uint16 version = 1;\r\n        bytes memory adapterParams = abi.encodePacked(version, gasForDestinationLzReceive);\r\n\r\n        // get the fees we need to pay to LayerZero + Relayer to cover message delivery\r\n        // you will be refunded for extra gas paid\r\n        (uint messageFee, ) = endpoint.estimateFees(_chainId, address(this), payload, false, adapterParams);\r\n\r\n        require(msg.value >= messageFee, \"msg.value not enough to cover messageFee. Send gas for message fees\");\r\n\r\n        endpoint.send{value: msg.value}(\r\n            _chainId,                           // destination chainId\r\n            trustedRemoteLookup[_chainId],      // destination address of nft contract\r\n            payload,                            // abi.encoded()'ed bytes\r\n            payable(msg.sender),                // refund address\r\n            address(0x0),                       // 'zroPaymentAddress' unused for this\r\n            adapterParams                       // txParameters\r\n        );\r\n    }\r\n\r\n\r\n    // here for donations or accidents\r\n    function withdraw(uint amt) external onlyOwner isOwner {\r\n        (bool sent, ) = payable(_owner).call{value: amt}(\"\");\r\n        require(sent, \"Failed to withdraw Ether\");\r\n    }\r\n\r\n    function kustomize(uint256 _data1, uint256 _data2, uint256[4] memory _colors, uint256[3] memory _colorSelectors, uint256 _itemID) public {\r\n        require(msg.sender == ownerOf(_itemID), \"YOU ARE NOT THE OWNER!\");\r\n        require(finality[_itemID] == false, \"ONLY NON-FINALITY CAN KUSTOMIZE!\");\r\n        require((_colorSelectors[0] < 138) && (_colorSelectors[1] < 138) && (_colorSelectors[2] < 138), \"NO SUCH COLOR!\");\r\n\r\n        Features storage feature = features[_itemID];\r\n        feature.data1 = _data1;\r\n        feature.data2 = _data2;\r\n        feature.colors = _colors;\r\n        feature.colorSelectors = _colorSelectors;\r\n\r\n        emit Kustomized(_itemID);\r\n    }\r\n\r\n    function kustomizeBackground(uint256 _data1, uint256 _itemID) public {\r\n        require(msg.sender == ownerOf(_itemID), \"YOU ARE NOT THE OWNER!\");\r\n        require(finality[_itemID] == false, \"ONLY NON-FINALITY CAN KUSTOMIZE!\");\r\n        require(_data1 < 138, \"NOT AN AVAILABLE COLOR!\");\r\n        svgBackgroundColorSelector[_itemID] = _data1;\r\n    }\r\n\r\n    function getSVG(uint256 _tokenId) public view returns (string memory) {\r\n        require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        Features memory feature = features[_tokenId];\r\n\r\n        bytes memory artData = abi.encodePacked(feature.data1, feature.data2);\r\n        bytes memory colorData = abi.encodePacked(feature.colors[0], feature.colors[1]);\r\n        bytes memory colorData2 = abi.encodePacked(feature.colors[2], feature.colors[3]);\r\n\r\n        string memory imageURI = string(abi.encodePacked('<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1100.000000pt\" height=\"1100.000000pt\" viewBox=\"0 0 1100.000000 1100.000000\" preserveAspectRatio=\"xMidYMid meet\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <defs> <g id=\"cube\" class=\"cube-unit\" transform=\"scale(0.25,0.25)\"> <polygon style=\"stroke:#000000;\" points=\"480,112 256,0 32,112 32,400 256,512 480,400 \"/> <polygon style=\"stroke:#000000;\" points=\"256,224 32,112 32,400 256,512 480,400 480,112 \"/> <polygon style=\"stroke:#000000;\" points=\"256,224 256,512 480,400 480,112 \"/> </g> </defs> <g transform=\"translate(0.000000,1100.000000) scale(0.100000,-0.100000)\" fill=\"#000000\" stroke=\"none\"> <path d=\"M0 5500 l0 -5500 5500 0 5500 0 0 5500 0 5500 -5500 0 -5500 0 0 -5500z\" fill=\"', svgBackgroundColor[svgBackgroundColorSelector[_tokenId]], '</g>', CREATE(artData, colorData, colorData2, feature.colorSelectors[0], feature.colorSelectors[1], feature.colorSelectors[2]),finality[_tokenId] == false ? '<g transform=\"translate(0.000000,1100.000000) scale(0.100000,-0.100000)\" fill=\"#F5F5F5\"> <path d=\"M9720 890 l0 -110 -110 0 -110 0 0 -110 0 -110 110 0 110 0 0 -220 0 -220 110 0 110 0 0 220 0 220 110 0 110 0 0 110 0 110 -110 0 -110 0 0 110 0 110 -110 0 -110 0 0 -110z M10440 890 l0 -110 -110 0 -110 0 0 -110 0 -110 110 0 110 0 0 -220 0 -220 110 0 110 0 0 220 0 220 110 0 110 0 0 110 0 110 -110 0 -110 0 0 110 0 110 -110 0 -110 0 0 -110z\"/></g></svg>' : '<g transform=\"translate(0.000000,1100.000000) scale(0.100000,-0.100000)\" fill=\"#F5F5F5\" stroke=\"none\"> <path d=\"M9720 890 l0 -110 -110 0 -110 0 0 -110 0 -110 110 0 110 0 0 -220 0 -220 110 0 110 0 0 220 0 220 110 0 110 0 0 110 0 110 -110 0 -110 0 0 110 0 110 -110 0 -110 0 0 -110z m200 -20 l0 -110 110 0 110 0 0 -90 0 -90 -110 0 -110 0 0 -220 0 -220 -90 0 -90 0 0 220 0 220 -110 0 -110 0 0 90 0 90 110 0 110 0 0 110 0 110 90 0 90 0 0 -110z M9760 850 l0 -110 -110 0 -110 0 0 -70 0 -70 110 0 110 0 0 -220 0 -220 70 0 70 0 0 220 0 220 110 0 110 0 0 70 0 70 -110 0 -110 0 0 110 0 110 -70 0 -70 0 0 -110z m120 -20 l0 -110 110 0 110 0 0 -50 0 -50 -110 0 -110 0 0 -220 0 -220 -50 0 -50 0 0 220 0 220 -110 0 -110 0 0 50 0 50 110 0 110 0 0 110 0 110 50 0 50 0 0 -110z M9800 810 l0 -110 -110 0 -110 0 0 -30 0 -30 110 0 110 0 0 -220 0 -220 30 0 30 0 0 220 0 220 110 0 110 0 0 30 0 30 -110 0 -110 0 0 110 0 110 -30 0 -30 0 0 -110z m40 -20 l0 -110 110 0 c67 0 110 -4 110 -10 0 -6 -43 -10 -110 -10 l-110 0 0 -220 c0 -140 -4 -220 -10 -220 -6 0 -10 80 -10 220 l0 220 -110 0 c-67 0 -110 4 -110 10 0 6 43 10 110 10 l110 0 0 110 c0 67 4 110 10 110 6 0 10 -43 10 -110z M10440 890 l0 -110 -110 0 -110 0 0 -110 0 -110 110 0 110 0 0 -220 0 -220 110 0 110 0 0 220 0 220 110 0 110 0 0 110 0 110 -110 0 -110 0 0 110 0 110 -110 0 -110 0 0 -110z m200 -20 l0 -110 110 0 110 0 0 -90 0 -90 -110 0 -110 0 0 -220 0 -220 -90 0 -90 0 0 220 0 220 -110 0 -110 0 0 90 0 90 110 0 110 0 0 110 0 110 90 0 90 0 0 -110z M10480 850 l0 -110 -110 0 -110 0 0 -70 0 -70 110 0 110 0 0 -220 0 -220 70 0 70 0 0 220 0 220 110 0 110 0 0 70 0 70 -110 0 -110 0 0 110 0 110 -70 0 -70 0 0 -110z m120 -20 l0 -110 110 0 110 0 0 -50 0 -50 -110 0 -110 0 0 -220 0 -220 -50 0 -50 0 0 220 0 220 -110 0 -110 0 0 50 0 50 110 0 110 0 0 110 0 110 50 0 50 0 0 -110z M10520 810 l0 -110 -110 0 -110 0 0 -30 0 -30 110 0 110 0 0 -220 0 -220 30 0 30 0 0 220 0 220 110 0 110 0 0 30 0 30 -110 0 -110 0 0 110 0 110 -30 0 -30 0 0 -110z m40 -20 l0 -110 110 0 c67 0 110 -4 110 -10 0 -6 -43 -10 -110 -10 l-110 0 0 -220 c0 -140 -4 -220 -10 -220 -6 0 -10 80 -10 220 l0 220 -110 0 c-67 0 -110 4 -110 10 0 6 43 10 110 10 l110 0 0 110 c0 67 4 110 10 110 6 0 10 -43 10 -110z\"/></g></svg>'));\r\n\r\n        return imageURI;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        Features memory feature = features[_tokenId];\r\n\r\n        bytes memory artData = abi.encodePacked(feature.data1, feature.data2);\r\n        bytes memory colorData = abi.encodePacked(feature.colors[0], feature.colors[1]);\r\n        bytes memory colorData2 = abi.encodePacked(feature.colors[2], feature.colors[3]);\r\n\r\n        string memory imageURI = string(abi.encodePacked(\"data:image/svg+xml;base64, \", Base64.encode(bytes(string(abi.encodePacked('<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1100.000000pt\" height=\"1100.000000pt\" viewBox=\"0 0 1100.000000 1100.000000\" preserveAspectRatio=\"xMidYMid meet\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <defs> <g id=\"cube\" class=\"cube-unit\" transform=\"scale(0.25,0.25)\"> <polygon style=\"stroke:#000000;\" points=\"480,112 256,0 32,112 32,400 256,512 480,400 \"/> <polygon style=\"stroke:#000000;\" points=\"256,224 32,112 32,400 256,512 480,400 480,112 \"/> <polygon style=\"stroke:#000000;\" points=\"256,224 256,512 480,400 480,112 \"/> </g> </defs> <g transform=\"translate(0.000000,1100.000000) scale(0.100000,-0.100000)\" fill=\"#000000\" stroke=\"none\"> <path d=\"M0 5500 l0 -5500 5500 0 5500 0 0 5500 0 5500 -5500 0 -5500 0 0 -5500z\" fill=\"', svgBackgroundColor[svgBackgroundColorSelector[_tokenId]], '</g>', CREATE(artData, colorData, colorData2, feature.colorSelectors[0], feature.colorSelectors[1], feature.colorSelectors[2]),finality[_tokenId] == false ? '<g transform=\"translate(0.000000,1100.000000) scale(0.100000,-0.100000)\" fill=\"#F5F5F5\"> <path d=\"M9720 890 l0 -110 -110 0 -110 0 0 -110 0 -110 110 0 110 0 0 -220 0 -220 110 0 110 0 0 220 0 220 110 0 110 0 0 110 0 110 -110 0 -110 0 0 110 0 110 -110 0 -110 0 0 -110z M10440 890 l0 -110 -110 0 -110 0 0 -110 0 -110 110 0 110 0 0 -220 0 -220 110 0 110 0 0 220 0 220 110 0 110 0 0 110 0 110 -110 0 -110 0 0 110 0 110 -110 0 -110 0 0 -110z\"/></g></svg>' : '<g transform=\"translate(0.000000,1100.000000) scale(0.100000,-0.100000)\" fill=\"#F5F5F5\" stroke=\"none\"> <path d=\"M9720 890 l0 -110 -110 0 -110 0 0 -110 0 -110 110 0 110 0 0 -220 0 -220 110 0 110 0 0 220 0 220 110 0 110 0 0 110 0 110 -110 0 -110 0 0 110 0 110 -110 0 -110 0 0 -110z m200 -20 l0 -110 110 0 110 0 0 -90 0 -90 -110 0 -110 0 0 -220 0 -220 -90 0 -90 0 0 220 0 220 -110 0 -110 0 0 90 0 90 110 0 110 0 0 110 0 110 90 0 90 0 0 -110z M9760 850 l0 -110 -110 0 -110 0 0 -70 0 -70 110 0 110 0 0 -220 0 -220 70 0 70 0 0 220 0 220 110 0 110 0 0 70 0 70 -110 0 -110 0 0 110 0 110 -70 0 -70 0 0 -110z m120 -20 l0 -110 110 0 110 0 0 -50 0 -50 -110 0 -110 0 0 -220 0 -220 -50 0 -50 0 0 220 0 220 -110 0 -110 0 0 50 0 50 110 0 110 0 0 110 0 110 50 0 50 0 0 -110z M9800 810 l0 -110 -110 0 -110 0 0 -30 0 -30 110 0 110 0 0 -220 0 -220 30 0 30 0 0 220 0 220 110 0 110 0 0 30 0 30 -110 0 -110 0 0 110 0 110 -30 0 -30 0 0 -110z m40 -20 l0 -110 110 0 c67 0 110 -4 110 -10 0 -6 -43 -10 -110 -10 l-110 0 0 -220 c0 -140 -4 -220 -10 -220 -6 0 -10 80 -10 220 l0 220 -110 0 c-67 0 -110 4 -110 10 0 6 43 10 110 10 l110 0 0 110 c0 67 4 110 10 110 6 0 10 -43 10 -110z M10440 890 l0 -110 -110 0 -110 0 0 -110 0 -110 110 0 110 0 0 -220 0 -220 110 0 110 0 0 220 0 220 110 0 110 0 0 110 0 110 -110 0 -110 0 0 110 0 110 -110 0 -110 0 0 -110z m200 -20 l0 -110 110 0 110 0 0 -90 0 -90 -110 0 -110 0 0 -220 0 -220 -90 0 -90 0 0 220 0 220 -110 0 -110 0 0 90 0 90 110 0 110 0 0 110 0 110 90 0 90 0 0 -110z M10480 850 l0 -110 -110 0 -110 0 0 -70 0 -70 110 0 110 0 0 -220 0 -220 70 0 70 0 0 220 0 220 110 0 110 0 0 70 0 70 -110 0 -110 0 0 110 0 110 -70 0 -70 0 0 -110z m120 -20 l0 -110 110 0 110 0 0 -50 0 -50 -110 0 -110 0 0 -220 0 -220 -50 0 -50 0 0 220 0 220 -110 0 -110 0 0 50 0 50 110 0 110 0 0 110 0 110 50 0 50 0 0 -110z M10520 810 l0 -110 -110 0 -110 0 0 -30 0 -30 110 0 110 0 0 -220 0 -220 30 0 30 0 0 220 0 220 110 0 110 0 0 30 0 30 -110 0 -110 0 0 110 0 110 -30 0 -30 0 0 -110z m40 -20 l0 -110 110 0 c67 0 110 -4 110 -10 0 -6 -43 -10 -110 -10 l-110 0 0 -220 c0 -140 -4 -220 -10 -220 -6 0 -10 80 -10 220 l0 220 -110 0 c-67 0 -110 4 -110 10 0 6 43 10 110 10 l110 0 0 110 c0 67 4 110 10 110 6 0 10 -43 10 -110z\"/> </g></svg>'))))));\r\n        string memory finality_ = finality[_tokenId] == false ? 'false' : 'true';\r\n\r\n        return string(\r\n            abi.encodePacked(\r\n            \"data:application/json;base64,\",\r\n            Base64.encode(\r\n                bytes(\r\n                abi.encodePacked(\r\n                    '{\"name\":\"',\r\n                    \"METAKUBES-\", toString(_tokenId),\r\n                    '\", \"attributes\":[{\"trait_type\" : \"Finality\", \"value\" : \"', finality_ ,'\"}], \"image\":\"',imageURI,'\"}'\r\n                )\r\n                )\r\n            )\r\n            )\r\n        );\r\n    }\r\n\r\n// had math here but 30M limit had different plans for us\r\n// please ignore any ugliness\r\nfunction CREATE(bytes memory artData, bytes memory colorData, bytes memory colorData2, uint256 color1, uint256 color2, uint256 color3) internal view returns (string memory) {\r\n    bytes memory kubes = DynamicBuffer.allocate(2**16);\r\n    uint tempCount;\r\n\r\n    for (uint i = 0; i < 512; i+=8) {\r\n        uint8 workingByte = uint8(artData[i/8]);\r\n        uint8 colorByte = uint8(colorData[i/8]);\r\n        uint8 colorByte2 = uint8(colorData2[i/8]);\r\n\r\n        for (uint256 ii=0; ii < 8; ii++) {\r\n            tempCount = i+ii;\r\n            if ((workingByte >> (7 - ii)) & 1 == 1) {\r\n                if ((colorByte >> (7 - ii)) & 1 == 1) {\r\n                    kubes.appendSafe(abi.encodePacked( tempCount < 104 ? svgData[tempCount] : features1.readMisc(tempCount),'\" fill=\"', svgBackgroundColor[color1]));\r\n                } else {\r\n                    if ((colorByte2 >> (7 - ii)) & 1 == 1) {\r\n                        kubes.appendSafe(abi.encodePacked(tempCount < 104 ? svgData[tempCount] : features1.readMisc(tempCount),'\" fill=\"', svgBackgroundColor[color2]));\r\n                    } else {\r\n                        kubes.appendSafe(abi.encodePacked(tempCount < 104 ? svgData[tempCount] : features1.readMisc(tempCount),'\" fill=\"', svgBackgroundColor[color3]));\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n      return string(kubes);\r\n    }\r\n\r\n    // just in case this fixed variable limits us from future integrations\r\n    function setGasForDestinationLzReceive(uint newVal) external onlyOwner isOwner {\r\n        gasForDestinationLzReceive = newVal;\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n      if (value == 0) {\r\n        return \"0\";\r\n      }\r\n      uint256 temp = value;\r\n      uint256 digits;\r\n      while (temp != 0) {\r\n        digits++;\r\n        temp /= 10;\r\n      }\r\n      bytes memory buffer = new bytes(digits);\r\n      while (value != 0) {\r\n        digits -= 1;\r\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n        value /= 10;\r\n      }\r\n      return string(buffer);\r\n    }\r\n\r\n    // ------------------\r\n    // Internal Functions\r\n    // ------------------\r\n\r\n    function _LzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal override {\r\n        // decode\r\n        (address toAddr, uint tokenId) = abi.decode(_payload, (address, uint));\r\n\r\n        // mint the tokens back into existence on destination chain\r\n        _safeMint(toAddr, tokenId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemID\",\"type\":\"uint256\"}],\"name\":\"Kustomized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"finality\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_data2\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_colors\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_colorSelectors\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_itemID\",\"type\":\"uint256\"}],\"name\":\"kustomize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemID\",\"type\":\"uint256\"}],\"name\":\"kustomizeBackground\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFeaturesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemID\",\"type\":\"uint256\"}],\"name\":\"setFinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setGasForDestinationLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setPresaleMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_trustedRemote\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"svgBackgroundColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"svgBackgroundColorSelector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"svgData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"taken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"traverseChains\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "METAKAYS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5274fd52c11025a890b9757a58215970929076c5192c6f0e06087fce0310f32a"}