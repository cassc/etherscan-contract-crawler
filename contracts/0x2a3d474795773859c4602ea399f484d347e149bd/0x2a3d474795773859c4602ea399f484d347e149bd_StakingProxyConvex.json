{"SourceCode": "// File: contracts\\interfaces\\ICurveConvex.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\ninterface ICurveConvex {\r\n   function earmarkRewards(uint256 _pid) external returns(bool);\r\n   function earmarkFees() external returns(bool);\r\n   function poolInfo(uint256 _pid) external returns(address _lptoken, address _token, address _gauge, address _crvRewards, address _stash, bool _shutdown);\r\n}\r\n\r\n// File: contracts\\interfaces\\IConvexWrapper.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IConvexWrapper{\r\n\r\n   struct EarnedData {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n\r\n  function convexPoolId() external returns(uint256 _poolId);\r\n  function deposit(uint256 _amount, address _to) external;\r\n  function stake(uint256 _amount, address _to) external;\r\n  function withdraw(uint256 _amount) external;\r\n  function withdrawAndUnwrap(uint256 _amount) external;\r\n  function getReward(address _account) external;\r\n  function getReward(address _account, address _forwardTo) external;\r\n  function rewardLength() external view returns(uint256);\r\n  function earned(address _account) external view returns(EarnedData[] memory claimable);\r\n  function setVault(address _vault) external;\r\n  function user_checkpoint(address[2] calldata _accounts) external returns(bool);\r\n}\r\n\r\n// File: contracts\\interfaces\\IProxyVault.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IProxyVault {\r\n\r\n    enum VaultType{\r\n        Erc20Baic,\r\n        UniV3,\r\n        Convex\r\n    }\r\n\r\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) external;\r\n    function usingProxy() external returns(address);\r\n    function rewards() external returns(address);\r\n    function getReward() external;\r\n    function getReward(bool _claim) external;\r\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external;\r\n    function earned() external view returns (address[] memory token_addresses, uint256[] memory total_earned);\r\n}\r\n\r\n// File: contracts\\interfaces\\IFeeRegistry.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IFeeRegistry{\r\n    function cvxfxsIncentive() external view returns(uint256);\r\n    function cvxIncentive() external view returns(uint256);\r\n    function platformIncentive() external view returns(uint256);\r\n    function totalFees() external view returns(uint256);\r\n    function maxFees() external view returns(uint256);\r\n    function feeDeposit() external view returns(address);\r\n    function getFeeDepositor(address _from) external view returns(address);\r\n}\r\n\r\n// File: contracts\\interfaces\\IFraxFarmBase.sol\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface IFraxFarmBase{\r\n\r\n    function totalLiquidityLocked() external view returns (uint256);\r\n    function lockedLiquidityOf(address account) external view returns (uint256);\r\n\r\n    function toggleValidVeFXSProxy(address proxy_address) external;\r\n    function proxyToggleStaker(address staker_address) external;\r\n    function stakerSetVeFXSProxy(address proxy_address) external;\r\n    function getReward(address destination_address) external returns (uint256[] memory);\r\n\r\n}\r\n\r\n// File: contracts\\interfaces\\IRewards.sol\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IRewards{\r\n    struct EarnedData {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n    \r\n    function initialize(uint256 _pid, bool _startActive) external;\r\n    function addReward(address _rewardsToken, address _distributor) external;\r\n    function approveRewardDistributor(\r\n        address _rewardsToken,\r\n        address _distributor,\r\n        bool _approved\r\n    ) external;\r\n    function deposit(address _owner, uint256 _amount) external;\r\n    function withdraw(address _owner, uint256 _amount) external;\r\n    function getReward(address _forward) external;\r\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards);\r\n    function rewardTokens(uint256 _rid) external view returns (address);\r\n    function rewardTokenLength() external view returns(uint256);\r\n    function active() external view returns(bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\StakingProxyBase.sol\r\n\r\npragma solidity 0.8.10;\r\ncontract StakingProxyBase is IProxyVault{\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant fxs = address(0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0);\r\n    address public constant vefxsProxy = address(0x59CFCD384746ec3035299D90782Be065e466800B);\r\n    address public constant feeRegistry = address(0xC9aCB83ADa68413a6Aa57007BC720EE2E2b3C46D); //fee registry\r\n\r\n    address public owner; //owner of the vault\r\n    address public stakingAddress; //farming contract\r\n    address public stakingToken; //farming token\r\n    address public rewards; //extra rewards on convex\r\n    address public usingProxy; //address of proxy being used\r\n\r\n    uint256 public constant FEE_DENOMINATOR = 10000;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    function vaultType() external virtual pure returns(VaultType){\r\n        return VaultType.Erc20Baic;\r\n    }\r\n\r\n    function vaultVersion() external virtual pure returns(uint256){\r\n        return 1;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"!auth\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(vefxsProxy == msg.sender, \"!auth_admin\");\r\n        _;\r\n    }\r\n\r\n    //initialize vault\r\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) external virtual{\r\n\r\n    }\r\n\r\n    function changeRewards(address _rewardsAddress) external onlyAdmin{\r\n        \r\n        //remove from old rewards and claim\r\n        if(IRewards(rewards).active()){\r\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\r\n            if(bal > 0){\r\n                IRewards(rewards).withdraw(owner, bal);\r\n            }\r\n            IRewards(rewards).getReward(owner);\r\n        }\r\n\r\n        //set to new rewards\r\n        rewards = _rewardsAddress;\r\n\r\n        //update balance\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //checkpoint weight on farm by calling getReward as its the lowest cost thing to do.\r\n    function checkpointRewards() external onlyAdmin{\r\n        //claim rewards to local vault\r\n        IFraxFarmBase(stakingAddress).getReward(address(this));\r\n    }\r\n\r\n    function setVeFXSProxy(address _proxy) external onlyAdmin{\r\n        //set the vefxs proxy\r\n        _setVeFXSProxy(_proxy);\r\n    }\r\n\r\n    function _setVeFXSProxy(address _proxyAddress) internal{\r\n        //set proxy address on staking contract\r\n        IFraxFarmBase(stakingAddress).stakerSetVeFXSProxy(_proxyAddress);\r\n        usingProxy = _proxyAddress;\r\n    }\r\n\r\n\r\n    function getReward() external virtual{}\r\n    function getReward(bool _claim) external virtual{}\r\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external virtual{}\r\n    function earned() external view virtual returns (address[] memory token_addresses, uint256[] memory total_earned){}\r\n\r\n\r\n    //checkpoint and add/remove weight to convex rewards contract\r\n    function _checkpointRewards() internal{\r\n        //if rewards are active, checkpoint\r\n        if(IRewards(rewards).active()){\r\n            //using liquidity shares from staking contract will handle rebasing tokens correctly\r\n            uint256 userLiq = IFraxFarmBase(stakingAddress).lockedLiquidityOf(address(this));\r\n            //get current balance of reward contract\r\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\r\n            if(userLiq >= bal){\r\n                //add the difference to reward contract\r\n                IRewards(rewards).deposit(owner, userLiq - bal);\r\n            }else{\r\n                //remove the difference from the reward contract\r\n                IRewards(rewards).withdraw(owner, bal - userLiq);\r\n            }\r\n        }\r\n    }\r\n\r\n    //apply fees to fxs and send remaining to owner\r\n    function _processFxs() internal{\r\n\r\n        //get fee rate from fee registry\r\n        uint256 totalFees = IFeeRegistry(feeRegistry).totalFees();\r\n\r\n        //send fxs fees to fee deposit\r\n        uint256 fxsBalance = IERC20(fxs).balanceOf(address(this));\r\n        uint256 sendAmount = fxsBalance * totalFees / FEE_DENOMINATOR;\r\n        if(sendAmount > 0){\r\n            IERC20(fxs).transfer(IFeeRegistry(feeRegistry).getFeeDepositor(usingProxy), sendAmount);\r\n        }\r\n\r\n        //transfer remaining fxs to owner\r\n        sendAmount = IERC20(fxs).balanceOf(address(this));\r\n        if(sendAmount > 0){\r\n            IERC20(fxs).transfer(owner, sendAmount);\r\n        }\r\n    }\r\n\r\n    //get extra rewards\r\n    function _processExtraRewards() internal{\r\n        if(IRewards(rewards).active()){\r\n            //check if there is a balance because the reward contract could have be activated later\r\n            //dont use _checkpointRewards since difference of 0 will still call deposit() and cost gas\r\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\r\n            uint256 userLiq = IFraxFarmBase(stakingAddress).lockedLiquidityOf(address(this));\r\n            if(bal == 0 && userLiq > 0){\r\n                //bal == 0 and liq > 0 can only happen if rewards were turned on after staking\r\n                IRewards(rewards).deposit(owner,userLiq);\r\n            }\r\n            IRewards(rewards).getReward(owner);\r\n        }\r\n    }\r\n\r\n    //transfer other reward tokens besides fxs(which needs to have fees applied)\r\n    function _transferTokens(address[] memory _tokens) internal{\r\n        //transfer all tokens\r\n        for(uint256 i = 0; i < _tokens.length; i++){\r\n            if(_tokens[i] != fxs){\r\n                uint256 bal = IERC20(_tokens[i]).balanceOf(address(this));\r\n                if(bal > 0){\r\n                    IERC20(_tokens[i]).safeTransfer(owner, bal);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\IFraxFarmERC20.sol\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface IFraxFarmERC20 {\r\n    \r\n    struct LockedStake {\r\n        bytes32 kek_id;\r\n        uint256 start_timestamp;\r\n        uint256 liquidity;\r\n        uint256 ending_timestamp;\r\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\r\n    }\r\n\r\n    function owner() external view returns (address);\r\n    function stakingToken() external view returns (address);\r\n    function fraxPerLPToken() external view returns (uint256);\r\n    function calcCurCombinedWeight(address account) external view\r\n        returns (\r\n            uint256 old_combined_weight,\r\n            uint256 new_vefxs_multiplier,\r\n            uint256 new_combined_weight\r\n        );\r\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory);\r\n    function lockedStakesOfLength(address account) external view returns (uint256);\r\n    function lockAdditional(bytes32 kek_id, uint256 addl_liq) external;\r\n    function stakeLocked(uint256 liquidity, uint256 secs) external returns (bytes32);\r\n    function withdrawLocked(bytes32 kek_id, address destination_address) external returns (uint256);\r\n\r\n\r\n\r\n    function periodFinish() external view returns (uint256);\r\n    function getAllRewardTokens() external view returns (address[] memory);\r\n    function earned(address account) external view returns (uint256[] memory new_earned);\r\n    function totalLiquidityLocked() external view returns (uint256);\r\n    function lockedLiquidityOf(address account) external view returns (uint256);\r\n    function totalCombinedWeight() external view returns (uint256);\r\n    function combinedWeightOf(address account) external view returns (uint256);\r\n    function lockMultiplier(uint256 secs) external view returns (uint256);\r\n    function rewardRates(uint256 token_idx) external view returns (uint256 rwd_rate);\r\n\r\n    function userStakedFrax(address account) external view returns (uint256);\r\n    function proxyStakedFrax(address proxy_address) external view returns (uint256);\r\n    function maxLPForMaxBoost(address account) external view returns (uint256);\r\n    function minVeFXSForMaxBoost(address account) external view returns (uint256);\r\n    function minVeFXSForMaxBoostProxy(address proxy_address) external view returns (uint256);\r\n    function veFXSMultiplier(address account) external view returns (uint256 vefxs_multiplier);\r\n\r\n    function toggleValidVeFXSProxy(address proxy_address) external;\r\n    function proxyToggleStaker(address staker_address) external;\r\n    function stakerSetVeFXSProxy(address proxy_address) external;\r\n    function getReward(address destination_address) external returns (uint256[] memory);\r\n    function vefxs_max_multiplier() external view returns(uint256);\r\n    function vefxs_boost_scale_factor() external view returns(uint256);\r\n    function vefxs_per_frax_for_max_boost() external view returns(uint256);\r\n    function getProxyFor(address addr) external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\security\\ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts\\StakingProxyConvex.sol\r\n\r\npragma solidity 0.8.10;\r\ncontract StakingProxyConvex is StakingProxyBase, ReentrancyGuard{\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant poolRegistry = address(0x7413bFC877B5573E29f964d572f421554d8EDF86);\r\n    address public constant convexCurveBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n\r\n    address public curveLpToken;\r\n    address public convexDepositToken;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    function vaultType() external pure override returns(VaultType){\r\n        return VaultType.Convex;\r\n    }\r\n\r\n    function vaultVersion() external pure override returns(uint256){\r\n        return 2;\r\n    }\r\n\r\n    //initialize vault\r\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) external override{\r\n        require(owner == address(0),\"already init\");\r\n\r\n        //set variables\r\n        owner = _owner;\r\n        stakingAddress = _stakingAddress;\r\n        stakingToken = _stakingToken;\r\n        rewards = _rewardsAddress;\r\n\r\n        //get tokens from pool info\r\n        (address _lptoken, address _token,,, , ) = ICurveConvex(convexCurveBooster).poolInfo(IConvexWrapper(_stakingToken).convexPoolId());\r\n    \r\n        curveLpToken = _lptoken;\r\n        convexDepositToken = _token;\r\n\r\n        //set infinite approvals\r\n        IERC20(_stakingToken).approve(_stakingAddress, type(uint256).max);\r\n        IERC20(_lptoken).approve(_stakingToken, type(uint256).max);\r\n        IERC20(_token).approve(_stakingToken, type(uint256).max);\r\n    }\r\n\r\n\r\n    //create a new locked state of _secs timelength with a Curve LP token\r\n    function stakeLockedCurveLp(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\r\n        if(_liquidity > 0){\r\n            //pull tokens from user\r\n            IERC20(curveLpToken).safeTransferFrom(msg.sender, address(this), _liquidity);\r\n\r\n            //deposit into wrapper\r\n            IConvexWrapper(stakingToken).deposit(_liquidity, address(this));\r\n\r\n            //stake\r\n            kek_id = IFraxFarmERC20(stakingAddress).stakeLocked(_liquidity, _secs);\r\n        }\r\n        \r\n        //checkpoint rewards\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //create a new locked state of _secs timelength with a Convex deposit token\r\n    function stakeLockedConvexToken(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\r\n        if(_liquidity > 0){\r\n            //pull tokens from user\r\n            IERC20(convexDepositToken).safeTransferFrom(msg.sender, address(this), _liquidity);\r\n\r\n            //stake into wrapper\r\n            IConvexWrapper(stakingToken).stake(_liquidity, address(this));\r\n\r\n            //stake into frax\r\n            kek_id = IFraxFarmERC20(stakingAddress).stakeLocked(_liquidity, _secs);\r\n        }\r\n        \r\n        //checkpoint rewards\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //create a new locked state of _secs timelength\r\n    function stakeLocked(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\r\n        if(_liquidity > 0){\r\n            //pull tokens from user\r\n            IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _liquidity);\r\n\r\n            //stake\r\n            kek_id = IFraxFarmERC20(stakingAddress).stakeLocked(_liquidity, _secs);\r\n        }\r\n        \r\n        //checkpoint rewards\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //add to a current lock\r\n    function lockAdditional(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\r\n        if(_addl_liq > 0){\r\n            //pull tokens from user\r\n            IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\r\n\r\n            //add stake\r\n            IFraxFarmERC20(stakingAddress).lockAdditional(_kek_id, _addl_liq);\r\n        }\r\n        \r\n        //checkpoint rewards\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //add to a current lock\r\n    function lockAdditionalCurveLp(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\r\n        if(_addl_liq > 0){\r\n            //pull tokens from user\r\n            IERC20(curveLpToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\r\n\r\n            //deposit into wrapper\r\n            IConvexWrapper(stakingToken).deposit(_addl_liq, address(this));\r\n\r\n            //add stake\r\n            IFraxFarmERC20(stakingAddress).lockAdditional(_kek_id, _addl_liq);\r\n        }\r\n        \r\n        //checkpoint rewards\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //add to a current lock\r\n    function lockAdditionalConvexToken(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\r\n        if(_addl_liq > 0){\r\n            //pull tokens from user\r\n            IERC20(convexDepositToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\r\n\r\n            //stake into wrapper\r\n            IConvexWrapper(stakingToken).stake(_addl_liq, address(this));\r\n\r\n            //add stake\r\n            IFraxFarmERC20(stakingAddress).lockAdditional(_kek_id, _addl_liq);\r\n        }\r\n        \r\n        //checkpoint rewards\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //withdraw a staked position\r\n    function withdrawLocked(bytes32 _kek_id) external onlyOwner nonReentrant{\r\n        //make sure we're checkpointed\r\n        IConvexWrapper(stakingToken).user_checkpoint([address(this),address(0)]);\r\n        \r\n        //withdraw directly to owner(msg.sender)\r\n        IFraxFarmERC20(stakingAddress).withdrawLocked(_kek_id, msg.sender);\r\n\r\n        //checkpoint rewards\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //withdraw a staked position\r\n    function withdrawLockedAndUnwrap(bytes32 _kek_id) external onlyOwner nonReentrant{\r\n        //make sure we're checkpointed\r\n        IConvexWrapper(stakingToken).user_checkpoint([address(this),address(0)]);\r\n\r\n        //withdraw\r\n        IFraxFarmERC20(stakingAddress).withdrawLocked(_kek_id, address(this));\r\n\r\n        //unwrap\r\n        uint256 balance = IERC20(stakingToken).balanceOf(address(this));\r\n        IConvexWrapper(stakingToken).withdrawAndUnwrap(balance);\r\n        IERC20(curveLpToken).transfer(owner,balance);\r\n\r\n        //checkpoint rewards\r\n        _checkpointRewards();\r\n    }\r\n\r\n    //helper function to combine earned tokens on staking contract and any tokens that are on this vault\r\n    function earned() external view override returns (address[] memory token_addresses, uint256[] memory total_earned) {\r\n        //get list of reward tokens\r\n        address[] memory rewardTokens = IFraxFarmERC20(stakingAddress).getAllRewardTokens();\r\n        uint256[] memory stakedearned = IFraxFarmERC20(stakingAddress).earned(address(this));\r\n        IConvexWrapper.EarnedData[] memory convexrewards = IConvexWrapper(stakingToken).earned(address(this));\r\n\r\n        uint256 extraRewardsLength = IRewards(rewards).rewardTokenLength();\r\n        token_addresses = new address[](rewardTokens.length + extraRewardsLength + convexrewards.length);\r\n        total_earned = new uint256[](rewardTokens.length + extraRewardsLength + convexrewards.length);\r\n\r\n        //add any tokens that happen to be already claimed but sitting on the vault\r\n        //(ex. withdraw claiming rewards)\r\n        for(uint256 i = 0; i < rewardTokens.length; i++){\r\n            token_addresses[i] = rewardTokens[i];\r\n            total_earned[i] = stakedearned[i] + IERC20(rewardTokens[i]).balanceOf(address(this));\r\n        }\r\n\r\n        IRewards.EarnedData[] memory extraRewards = IRewards(rewards).claimableRewards(address(this));\r\n        for(uint256 i = 0; i < extraRewards.length; i++){\r\n            token_addresses[i+rewardTokens.length] = extraRewards[i].token;\r\n            total_earned[i+rewardTokens.length] = extraRewards[i].amount;\r\n        }\r\n\r\n        //add convex farm earned tokens\r\n        for(uint256 i = 0; i < convexrewards.length; i++){\r\n            token_addresses[i+rewardTokens.length+extraRewardsLength] = convexrewards[i].token;\r\n            total_earned[i+rewardTokens.length+extraRewardsLength] = convexrewards[i].amount;\r\n        }\r\n    }\r\n\r\n    /*\r\n    claim flow:\r\n        claim rewards directly to the vault\r\n        calculate fees to send to fee deposit\r\n        send fxs to a holder contract for fees\r\n        get reward list of tokens that were received\r\n        send all remaining tokens to owner\r\n\r\n    A slightly less gas intensive approach could be to send rewards directly to a holder contract and have it sort everything out.\r\n    However that makes the logic a bit more complex as well as runs a few future proofing risks\r\n    */\r\n    function getReward() external override{\r\n        getReward(true);\r\n    }\r\n\r\n    //get reward with claim option.\r\n    //_claim bool is for the off chance that rewardCollectionPause is true so getReward() fails but\r\n    //there are tokens on this vault for cases such as withdraw() also calling claim.\r\n    //can also be used to rescue tokens on the vault\r\n    function getReward(bool _claim) public override{\r\n\r\n        //claim\r\n        if(_claim){\r\n            //claim frax farm\r\n            IFraxFarmERC20(stakingAddress).getReward(address(this));\r\n            //claim convex farm and forward to owner\r\n            IConvexWrapper(stakingToken).getReward(address(this),owner);\r\n        }\r\n\r\n        //process fxs fees\r\n        _processFxs();\r\n\r\n        //get list of reward tokens\r\n        address[] memory rewardTokens = IFraxFarmERC20(stakingAddress).getAllRewardTokens();\r\n\r\n        //transfer\r\n        _transferTokens(rewardTokens);\r\n\r\n        //extra rewards\r\n        _processExtraRewards();\r\n    }\r\n\r\n    //auxiliary function to supply token list(save a bit of gas + dont have to claim everything)\r\n    //_claim bool is for the off chance that rewardCollectionPause is true so getReward() fails but\r\n    //there are tokens on this vault for cases such as withdraw() also calling claim.\r\n    //can also be used to rescue tokens on the vault\r\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external override{\r\n\r\n        //claim\r\n        if(_claim){\r\n            //claim frax farm\r\n            IFraxFarmERC20(stakingAddress).getReward(address(this));\r\n            //claim convex farm and forward to owner\r\n            IConvexWrapper(stakingToken).getReward(address(this),owner);\r\n        }\r\n\r\n        //process fxs fees\r\n        _processFxs();\r\n\r\n        //transfer\r\n        _transferTokens(_rewardTokenList);\r\n\r\n        //extra rewards\r\n        _processExtraRewards();\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"changeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexCurveBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexDepositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"token_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"total_earned\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenList\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditional\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditionalConvexToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditionalCurveLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setVeFXSProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLocked\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLockedConvexToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLockedCurveLp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultType\",\"outputs\":[{\"internalType\":\"enum IProxyVault.VaultType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxsProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLockedAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingProxyConvex", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c34e0d9ede600ff1982a6472e3b8c89173e55acc8a60c52007d66a15a85d17e7"}