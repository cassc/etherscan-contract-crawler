{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Platform/Collections/Factories/Generative/storages/CollectionGoldlist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IOwnable} from \\\"../../../interfaces/IOwnable.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ncontract CollectionGoldlistContract {\\r\\n    struct Options {\\r\\n        uint256 goldlist_start_time;\\r\\n        uint256 goldlist_amount;\\r\\n        uint256 goldlist_price;\\r\\n        bool is_custody;\\r\\n    }\\r\\n\\r\\n\\r\\n    mapping(address => address[]) private _goldlist_access_tokens_by_address;\\r\\n    mapping(address => Options) private _goldlist_options_by_address;\\r\\n    mapping(address => address[]) private _goldlist_by_address;\\r\\n\\r\\n\\r\\n    function setOptions(\\r\\n        address token_address_,\\r\\n        uint256 goldlist_start_time,\\r\\n        uint256 goldlist_amount,\\r\\n        uint256 goldlist_price,\\r\\n        bool is_custody\\r\\n    ) public {\\r\\n        require(\\r\\n            msg.sender == IOwnable(token_address_).owner(),\\r\\n            \\\"Permission denied! Yor are not an owner of this collection\\\"\\r\\n        );\\r\\n        _goldlist_options_by_address[token_address_] = Options(\\r\\n            goldlist_start_time,\\r\\n            goldlist_amount,\\r\\n            goldlist_price,\\r\\n            is_custody\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setAccessTokens(\\r\\n        address token_address_,\\r\\n        address[] memory goldlist_access_tokens_\\r\\n    ) public {\\r\\n        require(\\r\\n            msg.sender == IOwnable(token_address_).owner(),\\r\\n            \\\"Permission denied! Yor are not an owner of this collection\\\"\\r\\n        );\\r\\n        _goldlist_access_tokens_by_address[\\r\\n            token_address_\\r\\n        ] = goldlist_access_tokens_;\\r\\n    }\\r\\n\\r\\n    function isMember(\\r\\n        address token_address_,\\r\\n        address eth_address_\\r\\n    ) public view returns (bool) {\\r\\n        for (\\r\\n            uint256 i = 0;\\r\\n            i < _goldlist_access_tokens_by_address[token_address_].length;\\r\\n            i++\\r\\n        ) {\\r\\n            if (\\r\\n                IERC721(_goldlist_access_tokens_by_address[token_address_][i])\\r\\n                    .balanceOf(eth_address_) > 0\\r\\n            ) return true;\\r\\n        }\\r\\n        \\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getAccessList(\\r\\n        address token_address_\\r\\n    ) public view returns (address[] memory whitelist) {\\r\\n        return _goldlist_access_tokens_by_address[token_address_];\\r\\n    }\\r\\n\\r\\n    function getOptions(\\r\\n        address token_address_\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 goldlist_start_time,\\r\\n            uint256 goldlist_amount,\\r\\n            uint256 goldlist_price,\\r\\n            bool is_custody\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _goldlist_options_by_address[token_address_].goldlist_start_time,\\r\\n            _goldlist_options_by_address[token_address_].goldlist_amount,\\r\\n            _goldlist_options_by_address[token_address_].goldlist_price,\\r\\n            _goldlist_options_by_address[token_address_].is_custody\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Platform/Collections/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function owner() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address_\",\"type\":\"address\"}],\"name\":\"getAccessList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address_\",\"type\":\"address\"}],\"name\":\"getOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goldlist_start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldlist_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldlist_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_custody\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eth_address_\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"goldlist_access_tokens_\",\"type\":\"address[]\"}],\"name\":\"setAccessTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"goldlist_start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldlist_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldlist_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_custody\",\"type\":\"bool\"}],\"name\":\"setOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CollectionGoldlistContract", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}