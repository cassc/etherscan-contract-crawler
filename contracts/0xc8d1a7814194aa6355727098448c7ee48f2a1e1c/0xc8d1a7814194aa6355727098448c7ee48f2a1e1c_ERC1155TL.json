{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/core/ERC1155TL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {\\n    ERC1155Upgradeable,\\n    IERC1155Upgradeable,\\n    ERC165Upgradeable\\n} from \\\"openzeppelin-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {EIP2981TLUpgradeable} from \\\"tl-sol-tools/upgradeable/royalties/EIP2981TLUpgradeable.sol\\\";\\nimport {OwnableAccessControlUpgradeable} from \\\"tl-sol-tools/upgradeable/access/OwnableAccessControlUpgradeable.sol\\\";\\nimport {StoryContractUpgradeable} from \\\"tl-story/upgradeable/StoryContractUpgradeable.sol\\\";\\nimport {BlockListUpgradeable} from \\\"tl-blocklist/BlockListUpgradeable.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev token uri is an empty string\\nerror EmptyTokenURI();\\n\\n/// @dev batch size too small\\nerror BatchSizeTooSmall();\\n\\n/// @dev mint to zero addresses\\nerror MintToZeroAddresses();\\n\\n/// @dev array length mismatch\\nerror ArrayLengthMismatch();\\n\\n/// @dev token not owned by the owner of the contract\\nerror TokenNotOwnedByOwner();\\n\\n/// @dev caller is not approved or owner\\nerror CallerNotApprovedOrOwner();\\n\\n/// @dev token does not exist\\nerror TokenDoesntExist();\\n\\n/// @dev burning zero tokens\\nerror BurnZeroTokens();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            ERC1155TL\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title ERC1155TL.sol\\n/// @notice Transient Labs ERC-1155 Creator Contract\\n/// @dev features include\\n///      - batch minting\\n///      - airdrops\\n///      - ability to hook in external mint contracts\\n///      - ability to set multiple admins\\n///      - Story Contract\\n///      - BlockList\\n///      - individual token royalties\\n/// @author transientlabs.xyz\\n/// @custom:version 2.3.0\\ncontract ERC1155TL is\\n    ERC1155Upgradeable,\\n    EIP2981TLUpgradeable,\\n    OwnableAccessControlUpgradeable,\\n    StoryContractUpgradeable,\\n    BlockListUpgradeable\\n{\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Custom Types\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev struct defining a token\\n    struct Token {\\n        bool created;\\n        string uri;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    string public constant VERSION = \\\"2.3.0\\\";\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant APPROVED_MINT_CONTRACT = keccak256(\\\"APPROVED_MINT_CONTRACT\\\");\\n    uint256 private _counter;\\n    string public name;\\n    string public symbol;\\n    mapping(uint256 => Token) private _tokens;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param disable: boolean to disable initialization for the implementation contract\\n    constructor(bool disable) {\\n        if (disable) _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param name_: the name of the 1155 contract\\n    /// @param symbol_: the symbol for the 1155 contract\\n    /// @param defaultRoyaltyRecipient: the default address for royalty payments\\n    /// @param defaultRoyaltyPercentage: the default royalty percentage of basis points (out of 10,000)\\n    /// @param initOwner: the owner of the contract\\n    /// @param admins: array of admin addresses to add to the contract\\n    /// @param enableStory: a bool deciding whether to add story fuctionality or not\\n    /// @param blockListRegistry: address of the blocklist registry to use\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address defaultRoyaltyRecipient,\\n        uint256 defaultRoyaltyPercentage,\\n        address initOwner,\\n        address[] memory admins,\\n        bool enableStory,\\n        address blockListRegistry\\n    ) external initializer {\\n        // initialize parent contracts\\n        __ERC1155_init(\\\"\\\");\\n        __EIP2981TL_init(defaultRoyaltyRecipient, defaultRoyaltyPercentage);\\n        __OwnableAccessControl_init(initOwner);\\n        __StoryContractUpgradeable_init(enableStory);\\n        __BlockList_init(blockListRegistry);\\n\\n        // add admins\\n        _setRole(ADMIN_ROLE, admins, true);\\n\\n        // set name & symbol\\n        name = name_;\\n        symbol = symbol_;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                General Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to get token creation details\\n    /// @param tokenId: the token to lookup\\n    function getTokenDetails(uint256 tokenId) external view returns (Token memory) {\\n        return _tokens[tokenId];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Access Control Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set approved mint contracts\\n    /// @dev access to owner or admin\\n    /// @param minters: array of minters to grant approval to\\n    /// @param status: status for the minters\\n    function setApprovedMintContracts(address[] calldata minters, bool status) external onlyRoleOrOwner(ADMIN_ROLE) {\\n        _setRole(APPROVED_MINT_CONTRACT, minters, status);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Creation Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to create a token that can be minted to creator or airdropped\\n    /// @dev requires owner or admin\\n    /// @param newUri: the uri for the token to create\\n    /// @param addresses: the addresses to mint the new token to\\n    /// @param amounts: the amount of the new token to mint to each address\\n    function createToken(string calldata newUri, address[] calldata addresses, uint256[] calldata amounts)\\n        external\\n        onlyRoleOrOwner(ADMIN_ROLE)\\n    {\\n        _createToken(newUri, addresses, amounts);\\n    }\\n\\n    /// @notice function to create a token that can be minted to creator or airdropped\\n    /// @dev overloaded function where you can set the token royalty config in this tx\\n    /// @dev requires owner or admin\\n    /// @param newUri: the uri for the token to create\\n    /// @param addresses: the addresses to mint the new token to\\n    /// @param amounts: the amount of the new token to mint to each address\\n    /// @param royaltyAddress: royalty payout address for the created token\\n    /// @param royaltyPercent: royalty percentage for this token\\n    function createToken(\\n        string calldata newUri,\\n        address[] calldata addresses,\\n        uint256[] calldata amounts,\\n        address royaltyAddress,\\n        uint256 royaltyPercent\\n    ) external onlyRoleOrOwner(ADMIN_ROLE) {\\n        uint256 tokenId = _createToken(newUri, addresses, amounts);\\n        _overrideTokenRoyaltyInfo(tokenId, royaltyAddress, royaltyPercent);\\n    }\\n\\n    /// @notice function to batch create tokens that can be minted to creator or airdropped\\n    /// @dev requires owner or admin\\n    /// @param newUris: the uris for the tokens to create\\n    /// @param addresses: 2d dynamic array holding the addresses to mint the new tokens to\\n    /// @param amounts: 2d dynamic array holding the amounts of the new tokens to mint to each address\\n    function batchCreateToken(string[] calldata newUris, address[][] calldata addresses, uint256[][] calldata amounts)\\n        external\\n        onlyRoleOrOwner(ADMIN_ROLE)\\n    {\\n        if (newUris.length == 0) revert EmptyTokenURI();\\n        for (uint256 i = 0; i < newUris.length; i++) {\\n            _createToken(newUris[i], addresses[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice function to batch create tokens that can be minted to creator or airdropped\\n    /// @dev overloaded function where you can set the token royalty config in this tx\\n    /// @dev requires owner or admin\\n    /// @param newUris: the uris for the tokens to create\\n    /// @param addresses: 2d dynamic array holding the addresses to mint the new tokens to\\n    /// @param amounts: 2d dynamic array holding the amounts of the new tokens to mint to each address\\n    /// @param royaltyAddresses: royalty payout addresses for the tokens\\n    /// @param royaltyPercents: royalty payout percents for the tokens\\n    function batchCreateToken(\\n        string[] calldata newUris,\\n        address[][] calldata addresses,\\n        uint256[][] calldata amounts,\\n        address[] calldata royaltyAddresses,\\n        uint256[] calldata royaltyPercents\\n    ) external onlyRoleOrOwner(ADMIN_ROLE) {\\n        if (newUris.length == 0) revert EmptyTokenURI();\\n        for (uint256 i = 0; i < newUris.length; i++) {\\n            uint256 tokenId = _createToken(newUris[i], addresses[i], amounts[i]);\\n            _overrideTokenRoyaltyInfo(tokenId, royaltyAddresses[i], royaltyPercents[i]);\\n        }\\n    }\\n\\n    /// @notice private helper function to create a new token\\n    /// @param newUri: the uri for the token to create\\n    /// @param addresses: the addresses to mint the new token to\\n    /// @param amounts: the amount of the new token to mint to each address\\n    /// @return _counter: token id created\\n    function _createToken(string memory newUri, address[] memory addresses, uint256[] memory amounts)\\n        private\\n        returns (uint256)\\n    {\\n        if (bytes(newUri).length == 0) revert EmptyTokenURI();\\n        if (addresses.length == 0) revert MintToZeroAddresses();\\n        if (addresses.length != amounts.length) revert ArrayLengthMismatch();\\n        _counter++;\\n        _tokens[_counter] = Token(true, newUri);\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _mint(addresses[i], _counter, amounts[i], \\\"\\\");\\n        }\\n\\n        return _counter;\\n    }\\n\\n    /// @notice private helper function to verify a token exists\\n    /// @param tokenId: the token to check existence for\\n    function _exists(uint256 tokenId) private view returns (bool) {\\n        return _tokens[tokenId].created;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Mint Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to mint existing token to recipients\\n    /// @dev requires owner or admin\\n    /// @param tokenId: the token to mint\\n    /// @param addresses: the addresses to mint to\\n    /// @param amounts: amounts of the token to mint to each address\\n    function mintToken(uint256 tokenId, address[] calldata addresses, uint256[] calldata amounts)\\n        external\\n        onlyRoleOrOwner(ADMIN_ROLE)\\n    {\\n        _mintToken(tokenId, addresses, amounts);\\n    }\\n\\n    /// @notice external mint function\\n    /// @dev requires caller to be an approved mint contract\\n    /// @param tokenId: the token to mint\\n    /// @param addresses: the addresses to mint to\\n    /// @param amounts: amounts of the token to mint to each address\\n    function externalMint(uint256 tokenId, address[] calldata addresses, uint256[] calldata amounts)\\n        external\\n        onlyRole(APPROVED_MINT_CONTRACT)\\n    {\\n        _mintToken(tokenId, addresses, amounts);\\n    }\\n\\n    /// @notice private helper function\\n    /// @param tokenId: the token to mint\\n    /// @param addresses: the addresses to mint to\\n    /// @param amounts: amounts of the token to mint to each address\\n    function _mintToken(uint256 tokenId, address[] calldata addresses, uint256[] calldata amounts) private {\\n        if (!_exists(tokenId)) revert TokenDoesntExist();\\n        if (addresses.length == 0) revert MintToZeroAddresses();\\n        if (addresses.length != amounts.length) revert ArrayLengthMismatch();\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _mint(addresses[i], tokenId, amounts[i], \\\"\\\");\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Burn Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to burn tokens from an account\\n    /// @dev msg.sender must be owner or operator\\n    /// @dev if this function is called from another contract as part of a burn/redeem,\\n    ///      the contract must ensure that no amount is '0' or if it is, that it isn't a vulnerability.\\n    /// @param from: address to burn from\\n    /// @param tokenIds: array of tokens to burn\\n    /// @param amounts: amount of each token to burn\\n    function burn(address from, uint256[] calldata tokenIds, uint256[] calldata amounts) external {\\n        if (tokenIds.length == 0) revert BurnZeroTokens();\\n        if (msg.sender != from && !isApprovedForAll(from, msg.sender)) revert CallerNotApprovedOrOwner();\\n        _burnBatch(from, tokenIds, amounts);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Royalty Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set the default royalty specification\\n    /// @dev requires owner\\n    /// @param newRecipient: the new royalty payout address\\n    /// @param newPercentage: the new royalty percentage in basis (out of 10,000)\\n    function setDefaultRoyalty(address newRecipient, uint256 newPercentage) external onlyOwner {\\n        _setDefaultRoyaltyInfo(newRecipient, newPercentage);\\n    }\\n\\n    /// @notice function to override a token's royalty info\\n    /// @dev requires owner\\n    /// @param tokenId: the token to override royalty for\\n    /// @param newRecipient: the new royalty payout address for the token id\\n    /// @param newPercentage: the new royalty percentage in basis (out of 10,000) for the token id\\n    function setTokenRoyalty(uint256 tokenId, address newRecipient, uint256 newPercentage) external onlyOwner {\\n        _overrideTokenRoyaltyInfo(tokenId, newRecipient, newPercentage);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Token Uri Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set token Uri for a token\\n    /// @dev requires owner or admin\\n    /// @param tokenId: token to set a uri for\\n    /// @param newUri: the new uri for the token\\n    function setTokenUri(uint256 tokenId, string calldata newUri) external onlyRoleOrOwner(ADMIN_ROLE) {\\n        if (!_exists(tokenId)) revert TokenDoesntExist();\\n        if (bytes(newUri).length == 0) revert EmptyTokenURI();\\n        _tokens[tokenId].uri = newUri;\\n        emit IERC1155Upgradeable.URI(newUri, tokenId);\\n    }\\n\\n    /// @notice function for token uris\\n    /// @param tokenId: token for which to get the uri\\n    function uri(uint256 tokenId) public view override(ERC1155Upgradeable) returns (string memory) {\\n        if (!_exists(tokenId)) revert TokenDoesntExist();\\n        return _tokens[tokenId].uri;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Story Contract Hooks\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc StoryContractUpgradeable\\n    /// @dev restricted to the owner of the contract\\n    function _isStoryAdmin(address potentialAdmin) internal view override(StoryContractUpgradeable) returns (bool) {\\n        return potentialAdmin == owner() || hasRole(ADMIN_ROLE, potentialAdmin);\\n    }\\n\\n    /// @inheritdoc StoryContractUpgradeable\\n    function _tokenExists(uint256 tokenId) internal view override(StoryContractUpgradeable) returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @inheritdoc StoryContractUpgradeable\\n    function _isTokenOwner(address potentialOwner, uint256 tokenId)\\n        internal\\n        view\\n        override(StoryContractUpgradeable)\\n        returns (bool)\\n    {\\n        return balanceOf(potentialOwner, tokenId) > 0;\\n    }\\n\\n    /// @inheritdoc StoryContractUpgradeable\\n    /// @dev restricted to the owner of the contract\\n    function _isCreator(address potentialCreator, uint256 /* tokenId */ )\\n        internal\\n        view\\n        override(StoryContractUpgradeable)\\n        returns (bool)\\n    {\\n        return potentialCreator == owner() || hasRole(ADMIN_ROLE, potentialCreator);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                BlockList Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc BlockListUpgradeable\\n    /// @dev restricted to the owner of the contract\\n    function isBlockListAdmin(address potentialAdmin) public view override(BlockListUpgradeable) returns (bool) {\\n        return potentialAdmin == owner();\\n    }\\n\\n    /// @inheritdoc ERC1155Upgradeable\\n    /// @dev added the `notBlocked` modifier for blocklist\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        override(ERC1155Upgradeable)\\n        notBlocked(operator)\\n    {\\n        ERC1155Upgradeable.setApprovalForAll(operator, approved);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                ERC-165 Support\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, EIP2981TLUpgradeable, StoryContractUpgradeable)\\n        returns (bool)\\n    {\\n        return (\\n            ERC1155Upgradeable.supportsInterface(interfaceId) || EIP2981TLUpgradeable.supportsInterface(interfaceId)\\n                || StoryContractUpgradeable.supportsInterface(interfaceId)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/upgradeable/royalties/EIP2981TLUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"openzeppelin-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IEIP2981} from \\\"../../royalties/IEIP2981.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev error if the recipient is set to address(0)\\nerror ZeroAddressError();\\n\\n/// @dev error if the royalty percentage is greater than to 100%\\nerror MaxRoyaltyError();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            EIP2981TL\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title EIP2981TLUpgradeable.sol\\n/// @notice abstract contract to define a default royalty spec\\n///         while allowing for specific token overrides\\n/// @dev follows EIP-2981 (https://eips.ethereum.org/EIPS/eip-2981)\\n/// @author transientlabs.xyz\\n/// @custom:version 2.2.0\\nabstract contract EIP2981TLUpgradeable is IEIP2981, Initializable, ERC165Upgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Royalty Struct\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    struct RoyaltySpec {\\n        address recipient;\\n        uint256 percentage;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    address private _defaultRecipient;\\n    uint256 private _defaultPercentage;\\n    mapping(uint256 => RoyaltySpec) private _tokenOverrides;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to initialize the contract\\n    /// @param defaultRecipient - the default royalty payout address\\n    /// @param defaultPercentage - the deafult royalty percentage, out of 10,000\\n    function __EIP2981TL_init(address defaultRecipient, uint256 defaultPercentage) internal onlyInitializing {\\n        __EIP2981TL_init_unchained(defaultRecipient, defaultPercentage);\\n    }\\n\\n    /// @notice unchained function to initialize the contract\\n    /// @param defaultRecipient - the default royalty payout address\\n    /// @param defaultPercentage - the deafult royalty percentage, out of 10,000\\n    function __EIP2981TL_init_unchained(address defaultRecipient, uint256 defaultPercentage)\\n        internal\\n        onlyInitializing\\n    {\\n        _setDefaultRoyaltyInfo(defaultRecipient, defaultPercentage);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Royalty Changing Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set default royalty info\\n    /// @param newRecipient - the new default royalty payout address\\n    /// @param newPercentage - the new default royalty percentage, out of 10,000\\n    function _setDefaultRoyaltyInfo(address newRecipient, uint256 newPercentage) internal {\\n        if (newRecipient == address(0)) revert ZeroAddressError();\\n        if (newPercentage > 10_000) revert MaxRoyaltyError();\\n        _defaultRecipient = newRecipient;\\n        _defaultPercentage = newPercentage;\\n    }\\n\\n    /// @notice function to override royalty spec on a specific token\\n    /// @param tokenId - the token id to override royalty for\\n    /// @param newRecipient - the new royalty payout address\\n    /// @param newPercentage - the new royalty percentage, out of 10,000\\n    function _overrideTokenRoyaltyInfo(uint256 tokenId, address newRecipient, uint256 newPercentage) internal {\\n        if (newRecipient == address(0)) revert ZeroAddressError();\\n        if (newPercentage > 10_000) revert MaxRoyaltyError();\\n        _tokenOverrides[tokenId].recipient = newRecipient;\\n        _tokenOverrides[tokenId].percentage = newPercentage;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Royalty Info\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IEIP2981\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        address recipient = _defaultRecipient;\\n        uint256 percentage = _defaultPercentage;\\n        if (_tokenOverrides[tokenId].recipient != address(0)) {\\n            recipient = _tokenOverrides[tokenId].recipient;\\n            percentage = _tokenOverrides[tokenId].percentage;\\n        }\\n        return (recipient, salePrice / 10_000 * percentage); // divide first to avoid overflow\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                ERC-165 Override\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IEIP2981).interfaceId || ERC165Upgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            External View Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Query the default royalty receiver and percentage.\\n    /// @return Tuple containing the default royalty recipient and percentage out of 10_000\\n    function getDefaultRoyaltyRecipientAndPercentage() external view returns (address, uint256) {\\n        return (_defaultRecipient, _defaultPercentage);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Upgradeability Gap\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev gap variable - see https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/upgradeable/access/OwnableAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {EnumerableSetUpgradeable} from \\\"openzeppelin-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"openzeppelin-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev does not have specified role\\nerror NotSpecifiedRole(bytes32 role);\\n\\n/// @dev is not specified role or owner\\nerror NotRoleOrOwner(bytes32 role);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                        OwnableAccessControlUpgradeable\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title OwnableAccessControl.sol\\n/// @notice single owner, flexible access control mechanics\\n/// @dev can easily be extended by inheriting and applying additional roles\\n/// @dev by default, only the owner can grant roles but by inheriting, but you\\n///      may allow other roles to grant roles by using the internal helper.\\n/// @author transientlabs.xyz\\n/// @custom:version 2.2.0\\nabstract contract OwnableAccessControlUpgradeable is Initializable, OwnableUpgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    uint256 private _c; // counter to be able to revoke all priviledges\\n    mapping(uint256 => mapping(bytes32 => mapping(address => bool))) private _roleStatus;\\n    mapping(uint256 => mapping(bytes32 => EnumerableSetUpgradeable.AddressSet)) private _roleMembers;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param from - address that authorized the role change\\n    /// @param user - the address who's role has been changed\\n    /// @param approved - boolean indicating the user's status in role\\n    /// @param role - the bytes32 role created in the inheriting contract\\n    event RoleChange(address indexed from, address indexed user, bool indexed approved, bytes32 role);\\n\\n    /// @param from - address that authorized the revoke\\n    event AllRolesRevoked(address indexed from);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert NotSpecifiedRole(role);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRoleOrOwner(bytes32 role) {\\n        if (!hasRole(role, msg.sender) && owner() != msg.sender) {\\n            revert NotRoleOrOwner(role);\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param initOwner - the address of the initial owner\\n    function __OwnableAccessControl_init(address initOwner) internal onlyInitializing {\\n        __Ownable_init();\\n        _transferOwnership(initOwner);\\n        __OwnableAccessControl_init_unchained();\\n    }\\n\\n    function __OwnableAccessControl_init_unchained() internal onlyInitializing {}\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                External Role Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to revoke all roles currently present\\n    /// @dev increments the `_c` variables\\n    /// @dev requires owner privileges\\n    function revokeAllRoles() external onlyOwner {\\n        _c++;\\n        emit AllRolesRevoked(msg.sender);\\n    }\\n\\n    /// @notice function to renounce role\\n    /// @param role - bytes32 role created in inheriting contracts\\n    function renounceRole(bytes32 role) external {\\n        address[] memory members = new address[](1);\\n        members[0] = msg.sender;\\n        _setRole(role, members, false);\\n    }\\n\\n    /// @notice function to grant/revoke a role to an address\\n    /// @dev requires owner to call this function but this may be further\\n    ///      extended using the internal helper function in inheriting contracts\\n    /// @param role - bytes32 role created in inheriting contracts\\n    /// @param roleMembers - list of addresses that should have roles attached to them based on `status`\\n    /// @param status - bool whether to remove or add `roleMembers` to the `role`\\n    function setRole(bytes32 role, address[] memory roleMembers, bool status) external onlyOwner {\\n        _setRole(role, roleMembers, status);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                External View Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to see if an address is the owner\\n    /// @param role - bytes32 role created in inheriting contracts\\n    /// @param potentialRoleMember - address to check for role membership\\n    function hasRole(bytes32 role, address potentialRoleMember) public view returns (bool) {\\n        return _roleStatus[_c][role][potentialRoleMember];\\n    }\\n\\n    /// @notice function to get role members\\n    /// @param role - bytes32 role created in inheriting contracts\\n    function getRoleMembers(bytes32 role) public view returns (address[] memory) {\\n        return _roleMembers[_c][role].values();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Internal Helper Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice helper function to set addresses for a role\\n    /// @param role - bytes32 role created in inheriting contracts\\n    /// @param roleMembers - list of addresses that should have roles attached to them based on `status`\\n    /// @param status - bool whether to remove or add `roleMembers` to the `role`\\n    function _setRole(bytes32 role, address[] memory roleMembers, bool status) internal {\\n        for (uint256 i = 0; i < roleMembers.length; i++) {\\n            _roleStatus[_c][role][roleMembers[i]] = status;\\n            if (status) {\\n                _roleMembers[_c][role].add(roleMembers[i]);\\n            } else {\\n                _roleMembers[_c][role].remove(roleMembers[i]);\\n            }\\n            emit RoleChange(msg.sender, roleMembers[i], status, role);\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Upgradeability Gap\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev gap variable - see https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"lib/story-contract/src/upgradeable/StoryContractUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"openzeppelin-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {\\n    IStory, StoryNotEnabled, TokenDoesNotExist, NotTokenOwner, NotTokenCreator, NotStoryAdmin\\n} from \\\"../IStory.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Story Contract\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title Story Contract\\n/// @dev upgradeable, inheritable abstract contract implementing the Story Contract interface\\n/// @author transientlabs.xyz\\n/// @custom:version 3.0.0\\nabstract contract StoryContractUpgradeable is Initializable, IStory, ERC165Upgradeable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    bool public storyEnabled;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    modifier storyMustBeEnabled() {\\n        if (!storyEnabled) revert StoryNotEnabled();\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param enabled - a bool to enable or disable Story addition\\n    function __StoryContractUpgradeable_init(bool enabled) internal {\\n        __StoryContractUpgradeable_init_unchained(enabled);\\n    }\\n\\n    /// @param enabled - a bool to enable or disable Story addition\\n    function __StoryContractUpgradeable_init_unchained(bool enabled) internal {\\n        storyEnabled = enabled;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Story Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev function to set story enabled/disabled\\n    /// @dev requires story admin\\n    /// @param enabled - a boolean setting to enable or disable Story additions\\n    function setStoryEnabled(bool enabled) external {\\n        if (!_isStoryAdmin(msg.sender)) revert NotStoryAdmin();\\n        storyEnabled = enabled;\\n    }\\n\\n    /// @inheritdoc IStory\\n    function addCreatorStory(uint256 tokenId, string calldata creatorName, string calldata story)\\n        external\\n        storyMustBeEnabled\\n    {\\n        if (!_tokenExists(tokenId)) revert TokenDoesNotExist();\\n        if (!_isCreator(msg.sender, tokenId)) revert NotTokenCreator();\\n\\n        emit CreatorStory(tokenId, msg.sender, creatorName, story);\\n    }\\n\\n    /// @inheritdoc IStory\\n    function addStory(uint256 tokenId, string calldata collectorName, string calldata story)\\n        external\\n        storyMustBeEnabled\\n    {\\n        if (!_tokenExists(tokenId)) revert TokenDoesNotExist();\\n        if (!_isTokenOwner(msg.sender, tokenId)) revert NotTokenOwner();\\n\\n        emit Story(tokenId, msg.sender, collectorName, story);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Hooks\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev function to allow access to enabling/disabling story\\n    /// @param potentialAdmin - the address to check for admin priviledges\\n    function _isStoryAdmin(address potentialAdmin) internal view virtual returns (bool);\\n\\n    /// @dev function to check if a token exists on the token contract\\n    /// @param tokenId - the token id to check for existence\\n    function _tokenExists(uint256 tokenId) internal view virtual returns (bool);\\n\\n    /// @dev function to check ownership of a token\\n    /// @param potentialOwner - the address to check for ownership of `tokenId`\\n    /// @param tokenId - the token id to check ownership against\\n    function _isTokenOwner(address potentialOwner, uint256 tokenId) internal view virtual returns (bool);\\n\\n    /// @dev function to check creatorship of a token\\n    /// @param potentialCreator - the address to check creatorship of `tokenId`\\n    /// @param tokenId - the token id to check creatorship against\\n    function _isCreator(address potentialCreator, uint256 tokenId) internal view virtual returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Overrides\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IStory).interfaceId || ERC165Upgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Upgradeability Gap\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev gap variable - see https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"lib/blocklist/src/BlockListUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {BlockedOperator, Unauthorized, IBlockList} from \\\"./IBlockList.sol\\\";\\nimport {IBlockListRegistry} from \\\"./IBlockListRegistry.sol\\\";\\n\\n/// @title BlockList\\n/// @author transientlabs.xyz\\n/// @notice abstract contract that can be inherited to block\\n///         approvals from non-royalty paying marketplaces\\n/// @custom:version 4.0.0\\nabstract contract BlockListUpgradeable is Initializable, IBlockList {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Public State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    IBlockListRegistry public blockListRegistry;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    event BlockListRegistryUpdated(address indexed caller, address indexed oldRegistry, address indexed newRegistry);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev modifier that can be applied to approval functions in order to block listings on marketplaces\\n    modifier notBlocked(address operator) {\\n        if (getBlockListStatus(operator)) {\\n            revert BlockedOperator();\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Initializer\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param blockListRegistryAddr - the initial BlockList Registry Address\\n    function __BlockList_init(address blockListRegistryAddr) internal onlyInitializing {\\n        __BlockList_init_unchained(blockListRegistryAddr);\\n    }\\n\\n    /// @param blockListRegistryAddr - the initial BlockList Registry Address\\n    function __BlockList_init_unchained(address blockListRegistryAddr) internal onlyInitializing {\\n        blockListRegistry = IBlockListRegistry(blockListRegistryAddr);\\n        emit BlockListRegistryUpdated(msg.sender, address(0), blockListRegistryAddr);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Admin Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to transfer ownership of the blockList\\n    /// @dev requires blockList owner\\n    /// @dev can be transferred to the ZERO_ADDRESS if desired\\n    /// @dev BE VERY CAREFUL USING THIS\\n    /// @param newBlockListRegistry - the address of the new BlockList registry\\n    function updateBlockListRegistry(address newBlockListRegistry) public {\\n        if (!isBlockListAdmin(msg.sender)) revert Unauthorized();\\n\\n        address oldRegistry = address(blockListRegistry);\\n        blockListRegistry = IBlockListRegistry(newBlockListRegistry);\\n        emit BlockListRegistryUpdated(msg.sender, oldRegistry, newBlockListRegistry);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                          Public Read Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IBlockList\\n    function getBlockListStatus(address operator) public view override returns (bool) {\\n        if (address(blockListRegistry).code.length == 0) return false;\\n        try blockListRegistry.getBlockListStatus(operator) returns (bool isBlocked) {\\n            return isBlocked;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Abstract function to determine if the operator is a blocklist admin.\\n    /// @param potentialAdmin - the potential admin address to check\\n    function isBlockListAdmin(address potentialAdmin) public view virtual returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Upgradeability Gap\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev gap variable - see https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private _gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/tl-sol-tools/src/royalties/IEIP2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IEIP2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param tokenId - the NFT asset queried for royalty information\\n    /// @param salePrice - the sale price of the NFT asset specified by tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for salePrice\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/story-contract/src/IStory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev story additions are not enabled\\nerror StoryNotEnabled();\\n\\n/// @dev token does not exist\\nerror TokenDoesNotExist();\\n\\n/// @dev caller is not the token owner\\nerror NotTokenOwner();\\n\\n/// @dev caller is not the token creator\\nerror NotTokenCreator();\\n\\n/// @dev caller is not a story admin\\nerror NotStoryAdmin();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            IStory\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title Story Contract Interface\\n/// @author transientlabs.xyz\\n/// @custom:version 3.0.0\\ninterface IStory {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice event describing a creator story getting added to a token\\n    /// @dev this events stores creator stories on chain in the event log\\n    /// @param tokenId - the token id to which the story is attached\\n    /// @param creatorAddress - the address of the creator of the token\\n    /// @param creatorName - string representation of the creator's name\\n    /// @param story - the story written and attached to the token id\\n    event CreatorStory(uint256 indexed tokenId, address indexed creatorAddress, string creatorName, string story);\\n\\n    /// @notice event describing a collector story getting added to a token\\n    /// @dev this events stores collector stories on chain in the event log\\n    /// @param tokenId - the token id to which the story is attached\\n    /// @param collectorAddress - the address of the collector of the token\\n    /// @param collectorName - string representation of the collectors's name\\n    /// @param story - the story written and attached to the token id\\n    event Story(uint256 indexed tokenId, address indexed collectorAddress, string collectorName, string story);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Story Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to let the creator add a story to any token they have created\\n    /// @dev depending on the implementation, this function may be restricted in various ways, such as\\n    ///      limiting the number of times the creator may write a story.\\n    /// @dev this function MUST emit the CreatorStory event each time it is called\\n    /// @dev this function MUST implement logic to restrict access to only the creator\\n    /// @dev this function MUST revert if a story is written to a non-existent token\\n    /// @param tokenId - the token id to which the story is attached\\n    /// @param creatorName - string representation of the creator's name\\n    /// @param story - the story written and attached to the token id\\n    function addCreatorStory(uint256 tokenId, string calldata creatorName, string calldata story) external;\\n\\n    /// @notice function to let collectors add a story to any token they own\\n    /// @dev depending on the implementation, this function may be restricted in various ways, such as\\n    ///      limiting the number of times a collector may write a story.\\n    /// @dev this function MUST emit the Story event each time it is called\\n    /// @dev this function MUST implement logic to restrict access to only the owner of the token\\n    /// @dev this function MUST revert if a story is written to a non-existent token\\n    /// @param tokenId - the token id to which the story is attached\\n    /// @param collectorName - string representation of the collectors's name\\n    /// @param story - the story written and attached to the token id\\n    function addStory(uint256 tokenId, string calldata collectorName, string calldata story) external;\\n}\\n\"\r\n    },\r\n    \"lib/blocklist/src/IBlockList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                Custom Errors\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev blocked operator error\\nerror BlockedOperator();\\n\\n/// @dev unauthorized to call fn method\\nerror Unauthorized();\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                IBlockList\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title IBlockList\\n/// @notice interface for the BlockList Contract\\n/// @author transientlabs.xyz\\n/// @custom:version 4.0.0\\ninterface IBlockList {\\n    /// @notice function to get blocklist status with True meaning that the operator is blocked\\n    /// @dev must return false if the blocklist registry is an EOA or an incompatible contract, true/false if compatible\\n    /// @param operator - operator to check against for blocking\\n    function getBlockListStatus(address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/blocklist/src/IBlockListRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title BlockList Registry\\n/// @notice interface for the BlockListRegistry Contract\\n/// @author transientlabs.xyz\\n/// @custom:version 4.0.0\\ninterface IBlockListRegistry {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    event BlockListStatusChange(address indexed user, address indexed operator, bool indexed status);\\n\\n    event BlockListCleared(address indexed user);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                          Public Read Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to get blocklist status with True meaning that the operator is blocked\\n    function getBlockListStatus(address operator) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                          Public Write Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice function to set the block list status for multiple operators\\n    /// @dev must be called by the blockList owner\\n    function setBlockListStatus(address[] calldata operators, bool status) external;\\n\\n    /// @notice function to clear the block list status\\n    /// @dev must be called by the blockList owner\\n    function clearBlockList() external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"blocklist/=lib/blocklist/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"sstore2/=lib/sstore2/contracts/\",\r\n      \"story-contract/=lib/story-contract/src/\",\r\n      \"tl-blocklist/=lib/blocklist/src/\",\r\n      \"tl-creator/=src/\",\r\n      \"tl-sol-tools/=lib/tl-sol-tools/src/\",\r\n      \"tl-story/=lib/story-contract/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlockedOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnZeroTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyTokenURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxRoyaltyError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddresses\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"NotRoleOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"NotSpecifiedRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStoryAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StoryNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"AllRolesRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"BlockListRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"story\",\"type\":\"string\"}],\"name\":\"CreatorStory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectorName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"story\",\"type\":\"string\"}],\"name\":\"Story\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVED_MINT_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"creatorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"story\",\"type\":\"string\"}],\"name\":\"addCreatorStory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"story\",\"type\":\"string\"}],\"name\":\"addStory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newUris\",\"type\":\"string[]\"},{\"internalType\":\"address[][]\",\"name\":\"addresses\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"address[]\",\"name\":\"royaltyAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"royaltyPercents\",\"type\":\"uint256[]\"}],\"name\":\"batchCreateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newUris\",\"type\":\"string[]\"},{\"internalType\":\"address[][]\",\"name\":\"addresses\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"}],\"name\":\"batchCreateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockListRegistry\",\"outputs\":[{\"internalType\":\"contract IBlockListRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercent\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"externalMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getBlockListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyRecipientAndPercentage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct ERC1155TL.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"potentialRoleMember\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultRoyaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enableStory\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"blockListRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"potentialAdmin\",\"type\":\"address\"}],\"name\":\"isBlockListAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeAllRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovedMintContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"roleMembers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setStoryEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"setTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBlockListRegistry\",\"type\":\"address\"}],\"name\":\"updateBlockListRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC1155TL", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}