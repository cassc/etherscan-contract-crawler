{"SourceCode": "{\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\ncontract Ownable {\\n    bytes32 private constant ownerPosition = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    constructor(address ownerAddress) {\\n        setOwner(ownerAddress);\\n    }\\n\\n    function setOwner(address newOwner) internal {\\n        bytes32 position = ownerPosition;\\n        assembly {\\n            sstore(position, newOwner)\\n        }\\n    }\\n\\n    function getOwner() public view returns (address owner) {\\n        bytes32 position = ownerPosition;\\n        assembly {\\n            owner := sload(position)\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == getOwner());\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        setOwner(newOwner);\\n    }\\n}\"},\"Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Proxy is Ownable {\\n\\n    bytes32 private constant targetPosition = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    constructor(address target) Ownable(msg.sender) {\\n        setTarget(target);\\n    }\\n\\n    function getTarget() public view returns (address target) {\\n        bytes32 position = targetPosition;\\n        assembly {\\n            target := sload(position)\\n        }\\n    }\\n\\n    function setTarget(address newTarget) internal onlyOwner {\\n        bytes32 position = targetPosition;\\n        assembly {\\n            sstore(position, newTarget)\\n        }\\n    }\\n\\n    function upgradeTarget(address newTarget) public onlyOwner {\\n        setTarget(newTarget);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable onlyOwner {\\n        address _target = getTarget();\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0x0, calldatasize())\\n            let result := delegatecall(gas(), _target, ptr, calldatasize(), 0x0,0)\\n            let size := returndatasize()\\n            returndatacopy(ptr, 0x0, size)\\n            switch result\\n            case 0 {\\n                revert(ptr, size)\\n            }\\n            default {\\n                return(ptr, size)\\n            }\\n        }\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"upgradeTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000cee66def7f27b3b383d02a58384338c6b9c763fe", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xcee66def7f27b3b383d02a58384338c6b9c763fe", "SwarmSource": "ipfs://8cf692550a08b5d3ae772337e83181e00d2041d45fa61a4cdd9484236a99cd25"}