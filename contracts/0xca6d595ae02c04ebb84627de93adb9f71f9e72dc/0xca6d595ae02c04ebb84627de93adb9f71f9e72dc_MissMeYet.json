{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n/**\r\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u281b\u280b\u2809\u2849\u28c9\u285b\u28db\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2801\u2804\u2804\u2804\u2804\u2804\u2880\u28f8\u28ff\u28ff\u287f\u283f\u286f\u2899\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2804\u2804\u2804\u2804\u2804\u2840\u2840\u2804\u2880\u28c0\u28c9\u28c9\u28c9\u2801\u2810\u28f6\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2804\u2804\u2804\u2804\u2801\u28ff\u28ff\u28c0\u2808\u283f\u289f\u285b\u281b\u28ff\u281b\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2804\u2804\u2804\u2804\u2804\u2808\u2801\u2830\u28c4\u28f4\u286c\u28b5\u28f4\u28ff\u28e4\u28fd\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2804\u2880\u2884\u2840\u2804\u2804\u2804\u2804\u2849\u283b\u28ff\u287f\u2801\u2818\u281b\u287f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2804\u2804\u2808\u283b\u2804\u2804\u2804\u2804\u2898\u28e7\u28c0\u283e\u283f\u2836\u2826\u28b3\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28e4\u2840\u2880\u2840\u2804\u2804\u2804\u2804\u2804\u2804\u283b\u28a3\u28f6\u2852\u2836\u28a4\u28be\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n\u28ff\u28ff\u28ff\u28ff\u287f\u281f\u280b\u2804\u2898\u28ff\u28e6\u2840\u2804\u2804\u2804\u2804\u2804\u2809\u281b\u283b\u283b\u283a\u28fc\u28ff\u281f\u280b\u281b\u283f\u28ff\u28ff\r\n\u280b\u2809\u2801\u2804\u2804\u2804\u2804\u2804\u2804\u28bb\u28ff\u28ff\u28f6\u28c4\u2840\u2804\u2804\u2804\u2804\u2880\u28e4\u28fe\u28ff\u28ff\u2840\u2804\u2804\u2804\u2804\u28b9\r\n\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u28bb\u28ff\u28ff\u28ff\u28f7\u2864\u2804\u2830\u2846\u2804\u2804\u2808\u2809\u281b\u283f\u28a6\u28c0\u2840\u2840\u2804\r\n\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2808\u28bf\u28ff\u281f\u284b\u2804\u2804\u2804\u28a3\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2808\u2839\u28ff\u28c0\r\n\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2818\u28f7\u28ff\u28ff\u28f7\u2804\u2804\u28ba\u28c7\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2838\u28ff\r\n\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2839\u28ff\u28ff\u2847\u2804\u2804\u2838\u28ff\u2844\u2804\u2808\u2801\u2804\u2804\u2804\u2804\u2804\u28ff\r\n\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u28bb\u28ff\u2847\u2804\u2804\u2804\u28b9\u28e7\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2818\r\n\r\nMISS ME YET??? $MMY\r\n\r\nTELEGRAM: https://t.me/MissMeYetERC\r\nWEBSITE: https://missmeyet.vip/\r\nTWITTER: https://twitter.com/MissMeYetERC\r\n**/\r\n\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract BaseErc20 is IERC20, Ownable {\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n    uint256 internal _totalSupply;\r\n    \r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n\r\n    mapping (address => bool) internal exchanges;\r\n\r\n    constructor(address _owner) Ownable(_owner) {\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) external override view returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address spender) external override view returns (uint256) {\r\n        return _allowed[_owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) external override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) external override returns (bool) {\r\n        require(spender != address(0), \"cannot approve the 0 address\");\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external override returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender] - value;\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    // Virtual methods\r\n    function calculateTransferAmount(address from, address to, uint256 value) virtual internal returns (uint256) {\r\n        require(from != to, \"you cannot transfer to yourself\");\r\n        return value;\r\n    }\r\n    \r\n    function preTransfer(address from, address to, uint256 value) virtual internal { }\r\n\r\n    // Admin methods\r\n    function setExchange(address who, bool on) external onlyOwner {\r\n        require(exchanges[who] != on, \"already set\");\r\n        exchanges[who] = on;\r\n    }\r\n\r\n    // Private methods\r\n\r\n    function getRouterAddress() internal view returns (address routerAddress) {\r\n        if (block.chainid == 1 || block.chainid == 3 || block.chainid == 4  || block.chainid == 5) {\r\n            routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ; // ETHEREUM\r\n         } else {\r\n            revert(\"Unknown Chain ID\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) private {\r\n        require(to != address(0), \"cannot be zero address\");\r\n\r\n        preTransfer(from, to, value);\r\n\r\n        uint256 modifiedAmount = calculateTransferAmount(from, to, value);\r\n        _balances[from] = _balances[from] - value;\r\n        _balances[to] = _balances[to] + modifiedAmount;\r\n\r\n        emit Transfer(from, to, modifiedAmount);\r\n    }\r\n}\r\n\r\ncontract MissMeYet is BaseErc20 {\r\n\r\n\r\n    constructor() BaseErc20(msg.sender) {\r\n\r\n        symbol = \"MMY\";\r\n        name = \"Miss Me Yet?\";\r\n        decimals = 18;\r\n\r\n        _totalSupply = _totalSupply + (1_000_000 * 10 ** decimals);\r\n        _balances[owner()] = _balances[owner()] + _totalSupply;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n} \r\n\r\n//https://missmeyet.vip/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"on\",\"type\":\"bool\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MissMeYet", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://00aa7099113c15931aea16565f734235eaab31e7ebdca968c11013b23044f8c2"}