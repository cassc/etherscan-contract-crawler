{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface NonERCToken {\\r\\n    function transfer(address recipient, uint256 amount) external;\\r\\n\\r\\n function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract NFTEscrow is ReentrancyGuard {\\r\\n    mapping(string => Listing) public listings;\\r\\n    mapping(string => bool) public requiresTokens;\\r\\n\\r\\n    address payable public immutable owner;\\r\\n    address payable public marketplaceAddress;\\r\\n    address payable public makerAddress;    \\r\\n\\r\\n    constructor() {\\r\\n        owner = payable(msg.sender);\\r\\n        marketplaceAddress = payable(0x2FEA74160714A5Cbc556A24fAe5cCa5F29a05337);\\r\\n        makerAddress = payable(0x2FEA74160714A5Cbc556A24fAe5cCa5F29a05337);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Define an event\\r\\n    event PaymentProcessed(\\r\\n        string  listingGuid,\\r\\n        address buyer,\\r\\n        address seller,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event ListingCreated(\\r\\n        address indexed sellerAddress,\\r\\n        string  listingGuid,\\r\\n        uint256 amount,\\r\\n        string currency,\\r\\n        uint256 marketplaceFee,\\r\\n        uint256 makerFee\\r\\n    );\\r\\n\\r\\n    struct Listing {\\r\\n        string  listingGuid;\\r\\n        address payable sellerAddress;\\r\\n        string buyerGuid;\\r\\n        address tokenAddress;\\r\\n        uint256 amount;\\r\\n        string currency;\\r\\n        uint256 marketplaceFee;\\r\\n        uint256 makerFee;\\r\\n        uint256 endDate;\\r\\n        bool isPayed;\\r\\n        bool isCompleted;\\r\\n        bool IsTokenNonErc20;\\r\\n    }\\r\\n\\r\\n    function createListing(\\r\\n        string memory listingGuid,\\r\\n        string memory buyerGuid,\\r\\n        uint256 amount,\\r\\n        string memory currency,\\r\\n        uint256 marketplaceFee,\\r\\n        uint256 makerFee,\\r\\n        uint256 endDate,\\r\\n        address tokenAddress,\\r\\n        uint256 IsTokenNonErc20\\r\\n    ) public returns (bool) {\\r\\n        require(bytes(buyerGuid).length > 0, \\\"Invalid buyerAddress\\\");\\r\\n        require(amount > 0, \\\"Invalid amount\\\");\\r\\n        require(bytes(currency).length > 0, \\\"Invalid currency\\\");\\r\\n        require(bytes(listingGuid).length > 0,\\\"Invalid listingGuid\\\");\\r\\n        require(\\r\\n            keccak256(bytes(listings[listingGuid].listingGuid)) != keccak256(bytes(listingGuid)),\\r\\n            \\\"Listing already exists\\\"\\r\\n        );\\r\\n        bool isNonERC20 = false;\\r\\n        if(IsTokenNonErc20 == 1){\\r\\n            isNonERC20 = true;\\r\\n        }\\r\\n\\r\\n        if (tokenAddress != address(0)) {\\r\\n            requiresTokens[listingGuid] = true;\\r\\n        }\\r\\n\\r\\n        listings[listingGuid] = Listing({\\r\\n            listingGuid:listingGuid,\\r\\n            sellerAddress: payable(msg.sender),\\r\\n            buyerGuid: buyerGuid,\\r\\n            amount: amount,\\r\\n            currency: currency,\\r\\n            marketplaceFee: marketplaceFee,\\r\\n            makerFee:makerFee,\\r\\n            endDate:endDate,\\r\\n            isPayed: false,\\r\\n            isCompleted: false,\\r\\n            tokenAddress: tokenAddress,\\r\\n            IsTokenNonErc20: isNonERC20\\r\\n        });\\r\\n\\r\\n        // Emit the event\\r\\n        emit ListingCreated(\\r\\n            msg.sender,\\r\\n            listingGuid,\\r\\n            amount,\\r\\n            currency,\\r\\n            marketplaceFee,\\r\\n            makerFee\\r\\n        );  \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n\\r\\n    // function to delete listing\\r\\n    function removeListing(string memory listingGuid) public onlyOwner returns (bool) {\\r\\n        require(bytes(listings[listingGuid].listingGuid).length > 0, \\\"Listing does not exist\\\");\\r\\n        delete listings[listingGuid];\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // function to pay for Listing Id from buyer to seller\\r\\n    function paySeller(\\r\\n        string memory listingGuid,\\r\\n        string memory buyerGuid,\\r\\n        string memory currency\\r\\n    ) public payable returns (bool) {\\r\\n        Listing storage listing = listings[listingGuid];\\r\\n        require(keccak256(bytes(listing.buyerGuid)) == keccak256(bytes(buyerGuid)), \\\"You are not a buyer\\\");\\r\\n        require(listing.isCompleted == false, \\\"Listing already completed\\\");\\r\\n        require(keccak256(bytes(listing.listingGuid)) == keccak256(bytes(listingGuid)),\\\"Not the correct guid\\\");\\r\\n        require(\\r\\n            keccak256(abi.encodePacked(listing.currency)) ==\\r\\n                keccak256(abi.encodePacked(currency)),\\r\\n            \\\"Invalid currency\\\"\\r\\n        );\\r\\n        require(block.timestamp < listing.endDate,\\\"Listing Expired\\\");\\r\\n\\r\\n        if (requiresTokens[listingGuid]) {\\r\\n            if (listing.IsTokenNonErc20) {\\r\\n                NonERCToken token = NonERCToken(listing.tokenAddress);\\r\\n                token.transferFrom(msg.sender, address(this), listing.amount);\\r\\n                token.transfer(marketplaceAddress, listing.marketplaceFee);\\r\\n                if(listing.makerFee > 0){\\r\\n                    token.transfer(makerAddress, listing.makerFee);\\r\\n                }\\r\\n                token.transfer(\\r\\n                    listing.sellerAddress,\\r\\n                    listing.amount - listing.marketplaceFee - listing.makerFee\\r\\n                );\\r\\n            } else {\\r\\n                // Retrieve the ERC20 token contract\\r\\n                IERC20 token = IERC20(listing.tokenAddress);\\r\\n                \\r\\n                  require(\\r\\n                    token.transferFrom(\\r\\n                        msg.sender,\\r\\n                        address(this),\\r\\n                        listing.amount\\r\\n                    ),\\r\\n                    \\\"Token transfer failed\\\"\\r\\n                );\\r\\n                require(\\r\\n                    token.transfer(marketplaceAddress, listing.marketplaceFee),\\r\\n                    \\\"Token transfer failed\\\"\\r\\n                );\\r\\n                require(\\r\\n                    token.transfer(\\r\\n                        listing.sellerAddress,\\r\\n                        listing.amount - listing.marketplaceFee - listing.makerFee\\r\\n                    ),\\r\\n                    \\\"Token transfer failed\\\"\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            require(\\r\\n                msg.value == listing.amount,\\r\\n                string.concat(\\\"Incorrect amount to buy listing:\\\",uint2str(listing.amount),\\\"-\\\", uint2str(msg.value)) \\r\\n            );           \\r\\n            listing.sellerAddress.transfer(listing.amount - listing.marketplaceFee - listing.makerFee);\\r\\n            marketplaceAddress.transfer(listing.marketplaceFee);\\r\\n            makerAddress.transfer(listing.makerFee);\\r\\n        }\\r\\n\\r\\n        //listing.ownerof = msg.sender;\\r\\n        listing.isPayed = true;\\r\\n        listing.isCompleted = true;\\r\\n\\r\\n        emit PaymentProcessed(\\r\\n            listing.listingGuid,\\r\\n            msg.sender,\\r\\n            listing.sellerAddress,\\r\\n            listing.amount\\r\\n        );\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    function addressToString(address _addr) public pure returns(string memory) \\r\\n    {\\r\\n        bytes32 value = bytes32(uint256(uint160(_addr)));\\r\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\r\\n    \\r\\n        bytes memory str = new bytes(51);\\r\\n        str[0] = '0';\\r\\n        str[1] = 'x';\\r\\n        for (uint256 i = 0; i < 20; i++) {\\r\\n            str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\\r\\n            str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n     function uint2str(\\r\\n        uint256 _i\\r\\n        )\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory str)\\r\\n        {\\r\\n        if (_i == 0)\\r\\n        {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = _i;\\r\\n        uint256 length;\\r\\n        while (j != 0)\\r\\n        {\\r\\n            length++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(length);\\r\\n        uint256 k = length;\\r\\n        j = _i;\\r\\n        while (j != 0)\\r\\n        {\\r\\n            bstr[--k] = bytes1(uint8(48 + j % 10));\\r\\n            j /= 10;\\r\\n        }\\r\\n        str = string(bstr);\\r\\n    }\\r\\n\\r\\n    // Function to check token balance\\r\\n    function getTokenBalance(\\r\\n        address tokenAddress,\\r\\n        address accountAddress\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 balance = 0;\\r\\n        if (isERC20Token(IERC20(tokenAddress))) {\\r\\n            IERC20 token = IERC20(tokenAddress);\\r\\n            balance = token.balanceOf(accountAddress);\\r\\n        } else {\\r\\n            NonERCToken token = NonERCToken(tokenAddress);\\r\\n            balance = token.balanceOf(accountAddress);\\r\\n        }\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function readListing(string memory listingGuid) public view returns (Listing memory) {\\r\\n        return listings[listingGuid];\\r\\n    }\\r\\n\\r\\n    // Function to check coin balance\\r\\n    function getCoinBalance(\\r\\n        address walletAddress\\r\\n    ) public view returns (uint256) {\\r\\n        return walletAddress.balance;\\r\\n    }\\r\\n\\r\\n    // Function to withdraw or transfer tokens to another address\\r\\n    function withdrawTokens(\\r\\n        address tokenAddress,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        if (isERC20Token(IERC20(tokenAddress))) {\\r\\n            // Retrieve the ERC20 token contract\\r\\n            IERC20 token = IERC20(tokenAddress);\\r\\n            // Ensure the contract has enough balance\\r\\n            require(\\r\\n                token.balanceOf(address(this)) >= amount,\\r\\n                \\\"Insufficient balance\\\"\\r\\n            );\\r\\n            // Transfer tokens to the specified address\\r\\n            require(token.transfer(to, amount), \\\"Token transfer failed\\\");\\r\\n        } else {\\r\\n            // Retrieve the NON ERC20 token contract\\r\\n            NonERCToken token = NonERCToken(tokenAddress);\\r\\n            // Ensure the contract has enough balance\\r\\n            require(\\r\\n                token.balanceOf(address(this)) >= amount,\\r\\n                \\\"Insufficient balance\\\"\\r\\n            );\\r\\n            token.transfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Function to check if a token supports the ERC20 interface\\r\\n    function isERC20Token(IERC20 token) public view returns (bool) {\\r\\n        try token.totalSupply() returns (uint256) {\\r\\n            return true;\\r\\n        } catch (bytes memory) {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"listingGuid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"listingGuid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listingGuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buyerGuid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"IsTokenNonErc20\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getCoinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"listingGuid\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"buyerGuid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPayed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"IsTokenNonErc20\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listingGuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buyerGuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"}],\"name\":\"paySeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listingGuid\",\"type\":\"string\"}],\"name\":\"readListing\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"listingGuid\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"buyerGuid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPayed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"IsTokenNonErc20\",\"type\":\"bool\"}],\"internalType\":\"struct NFTEscrow.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listingGuid\",\"type\":\"string\"}],\"name\":\"removeListing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"requiresTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTEscrow", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}