{"SourceCode": "/*\r\n\r\n \r\n    \u2796\u2796\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\u2796\u2796\r\n    \u2796\ud83d\udfe5\ud83d\udfe5\u2b1b\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\ud83d\udfe5\ud83d\udfe5\u2796\r\n    \u2796\ud83d\udfe5\u2b1b\ufe0f\u2b1b\ufe0f\u2b1c\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\ud83d\udfe5\ud83d\udfe5\r\n    \ud83d\udfe5\u2b1b\ufe0f\u2b1b\ufe0f\u2b1c\ufe0f\u2b1b\ufe0f\u2b1c\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\ud83d\udfe5\r\n    \ud83d\udfe5\u2b1b\ufe0f\u2b1c\ufe0f\u2b1c\ufe0f\u2b1c\ufe0f\u2b1c\ufe0f\u2b1c\ufe0f\u2b1b\ufe0f\ud83d\udfe5\r\n    \ud83d\udfe5\u2b1b\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\ud83d\udfe5\r\n    \ud83d\udfe5\u2b1b\ufe0f\u2b1c\ufe0f\u2b1c\ufe0f\u2b1c\ufe0f\u2b1c\ufe0f\u2b1c\ufe0f\u2b1b\ufe0f\ud83d\udfe5\r\n   \u2796 \ud83d\udfe5\u2b1b\ufe0f\u2b1c\ufe0f\u2b1b\ufe0f\u2b1c\ufe0f\u2b1b\ufe0f\ud83d\udfe5\r\n    \u2796\ud83d\udfe5\u2b1b\ufe0f\u2b1b\ufe0f\u2b1c\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\ud83d\udfe5\u2796\r\n    \u2796\u2796\ud83d\udfe5\u2b1b\ufe0f\u2b1b\ufe0f\u2b1b\ufe0f\ud83d\udfe5- \r\n\r\n\u201cGood Rain Knows The Best Time To Fall.\u201d \u2013 VIP\r\n\r\n \ud83c\udf0e https://squidgame.ltd/\r\n \ud83d\udcf0 https://twitter.com/squidgame_eth\r\n \ud83d\udc65 https://t.me/squid_token\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.23;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the ZEROADDY address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being ZEROADDY, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by ZEROADDY flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by ZEROADDY flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by ZEROADDY. The result is rounded towards ZEROADDY.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be ZEROADDY.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by ZEROADDY.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be ZEROADDY.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by ZEROADDY. The result is rounded towards ZEROADDY.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be ZEROADDY.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by ZEROADDY.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be ZEROADDY.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be ZEROADDY.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * ZEROADDY by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the ZEROADDY address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the ZEROADDY address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the ZEROADDY address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the ZEROADDY address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the ZEROADDY address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below ZEROADDY\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the ZEROADDY address.\r\n     * - `to` cannot be the ZEROADDY address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the ZEROADDY address\");\r\n        require(to != address(0), \"ERC20: transfer to the ZEROADDY address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the ZEROADDY address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the ZEROADDY address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the ZEROADDY address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the ZEROADDY address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the ZEROADDY address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the ZEROADDY address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the ZEROADDY address.\r\n     * - `spender` cannot be the ZEROADDY address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the ZEROADDY address\");\r\n        require(spender != address(0), \"ERC20: approve to the ZEROADDY address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-ZEROADDY, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is ZEROADDY, `amount` tokens will be minted for `to`.\r\n     * - when `to` is ZEROADDY, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both ZEROADDY.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-ZEROADDY, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is ZEROADDY, `amount` tokens have been minted for `to`.\r\n     * - when `to` is ZEROADDY, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both ZEROADDY.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract SQUIDGAME is Context, ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IDEXRouter private _dexRouter;\r\n\r\n    mapping (address => uint) private _cooldown;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping (address => bool) private _isBlacklisted;\r\n\r\n    bool public tradingOpen;\r\n    bool private _swapping;\r\n    bool public swapEnabled = false;\r\n    bool public cooldownEnabled = false;\r\n    bool public feesEnabled = true;\r\n    bool public transferFeesEnabled = true;\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tSupply = 1_000_000_000 * 10**_decimals;\r\n\r\n    uint256 public maxBuyAmount = _tSupply;\r\n    uint256 public maxSellAmount = _tSupply;\r\n    uint256 public maxWalletAmount = _tSupply;\r\n\r\n    uint256 public tradingOpenBlock = 0;\r\n    uint256 private _blocksForBotPenalty = 0;\r\n    uint256 private _cooldownBlocks = 1;\r\n\r\n    uint256 public constant FEE_DIVISOR = 1000;\r\n\r\n    uint256 private _totalFees;\r\n    uint256 private _marketingFee;\r\n    uint256 private _goldenPggyBankFee;\r\n    uint256 private _liquidityFee;\r\n\r\n    uint256 public buyMarketingFee = 1;\r\n    uint256 private _previousBuyMarketingFee = buyMarketingFee;\r\n    uint256 public buyGoldenPiggyBankFee = 2;\r\n    uint256 private _previousBuyGoldenPiggyBankFee = buyGoldenPiggyBankFee;\r\n    uint256 public buyLiquidityFee = 2;\r\n    uint256 private _previousBuyLiquidityFee = buyLiquidityFee;\r\n\r\n    uint256 public sellMarketingFee = 1;\r\n    uint256 private _previousSellMktgFee = sellMarketingFee;\r\n    uint256 public sellGoldenPiggyBankFee = 2;\r\n    uint256 private _previousSellGoldenPiggyBankFee = sellGoldenPiggyBankFee;\r\n    uint256 public sellLiquidityFee = 2;\r\n    uint256 private _previousSellLiqFee = sellLiquidityFee;\r\n\r\n    uint256 public transferMarketingFee = 1;\r\n    uint256 private _previousTransferMarketingFee = transferMarketingFee;\r\n    uint256 public transferGoldenPiggyBankFee = 2;\r\n    uint256 private _previousTransferGoldenPiggyBankFee = transferGoldenPiggyBankFee;\r\n    uint256 public transferLiquidityFee = 2;\r\n    uint256 private _previousTransferLiquidityFee = transferLiquidityFee;\r\n\r\n    uint256 private _tokensForMarketing;\r\n    uint256 private _tokensForGoldenPiggyBank;\r\n    uint256 private _tokensForLiquidity;\r\n    uint256 private _swapTokensAtAmount = 0;\r\n\r\n    address payable public marketingAddress;\r\n    address payable public goldenPiggyBankAddress;\r\n    address payable public liquidityAddress;\r\n\r\n    address public _dexLPPair;\r\n    address constant private DEADADDY = 0x000000000000000000000000000000000000dEaD;\r\n    address constant private ZEROADDY = 0x0000000000000000000000000000000000000000;\r\n\r\n    enum TaxnType {\r\n        BUY,\r\n        SELL,\r\n        TRANSFER\r\n    }\r\n\r\n    event OpenTrading(uint256 tradingOpenBlock, uint256 _blocksForBotPenalty);\r\n    event SetMaxBuyAmount(uint256 newMaxBuyAmount);\r\n    event SetMaxSellAmount(uint256 newMaxSellAmount);\r\n    event SetMaxWalletAmount(uint256 newMaxWalletAmount);\r\n    event SetSwapTokensAtAmount(uint256 newSwapTokensAtAmount);\r\n    event SetBuyFee(uint256 buyMarketingFee, uint256 buyGoldenPiggyBankFee, uint256 buyLiquidityFee);\r\n\tevent SetSellFee(uint256 sellMarketingFee, uint256 sellGoldenPiggyBankFee, uint256 sellLiquidityFee);\r\n    event SetTransferFee(uint256 transferMarketingFee, uint256 transferGoldenPiggyBankFee, uint256 transferLiquidityFee);\r\n    \r\n    constructor (address payable _marketingAddress, address payable _goldenPiggyBank, address payable _liquidityAddress) ERC20(\"Squid Game\", \"SQUID\") {\r\n        require(_marketingAddress != ZEROADDY, \"_marketingAddress cannot be 0x0\");\r\n        require(_goldenPiggyBank != ZEROADDY, \"_goldenPiggyBank cannot be 0x0\");\r\n        require(_liquidityAddress != ZEROADDY, \"_liquidityAddress cannot be 0x0\");\r\n\r\n        marketingAddress = _marketingAddress;\r\n        goldenPiggyBankAddress = _goldenPiggyBank;\r\n        liquidityAddress = _liquidityAddress;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[DEADADDY] = true;\r\n        _isExcludedFromFees[marketingAddress] = true;\r\n        _isExcludedFromFees[goldenPiggyBankAddress] = true;\r\n        _isExcludedFromFees[liquidityAddress] = true;\r\n\r\n        _isExcludedMaxTransactionAmount[owner()] = true;\r\n        _isExcludedMaxTransactionAmount[address(this)] = true;\r\n        _isExcludedMaxTransactionAmount[DEADADDY] = true;\r\n        _isExcludedMaxTransactionAmount[marketingAddress] = true;\r\n        _isExcludedMaxTransactionAmount[goldenPiggyBankAddress] = true;\r\n        _isExcludedMaxTransactionAmount[liquidityAddress] = true;\r\n        \r\n        _dexRouter = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(_dexRouter), totalSupply());\r\n        _dexLPPair = IDEXFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\r\n\r\n        _mint(owner(), _tSupply);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != ZEROADDY, \"ERC20: transfer from the ZEROADDY address\");\r\n        require(to != ZEROADDY, \"ERC20: transfer to the ZEROADDY address\");\r\n        require(amount > 0, \"Transfer amount must be greater than ZEROADDY\");\r\n        if (!tradingOpen) {require(_isExcludedFromFees[from], \"Trading not live yet, you aren't allowed to transfer tokens.\");}\r\n\r\n        bool takeFee = true;\r\n        TaxnType txType = (from == _dexLPPair) ? TaxnType.BUY : (to == _dexLPPair) ? TaxnType.SELL : TaxnType.TRANSFER;\r\n        if (from != owner() && to != owner() && to != ZEROADDY && to != DEADADDY && !_swapping) {\r\n            require(!_isBlacklisted[from] && !_isBlacklisted[to], \"Blacklisted.\");\r\n\r\n            if(!tradingOpen) require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not allowed yet.\");\r\n\r\n            if (cooldownEnabled) {\r\n                if (to != address(_dexRouter) && to != address(_dexLPPair)) {\r\n                    require(_cooldown[tx.origin] < block.number - _cooldownBlocks && _cooldown[to] < block.number - _cooldownBlocks, \"Transfer delay enabled. Try again later.\");\r\n                    _cooldown[tx.origin] = block.number;\r\n                    _cooldown[to] = block.number;\r\n                }\r\n            }\r\n\r\n            if (txType == TaxnType.BUY && to != address(_dexRouter) && !_isExcludedMaxTransactionAmount[to]) {\r\n                \r\n                require(amount <= maxBuyAmount, \"Transfer amount exceeds the maxBuyAmount.\");\r\n                require(balanceOf(to) + amount <= maxWalletAmount, \"Exceeds maximum wallet token amount.\");\r\n            }\r\n            \r\n            if (txType == TaxnType.SELL && from != address(_dexRouter) && !_isExcludedMaxTransactionAmount[from]) require(amount <= maxSellAmount, \"Transfer amount exceeds the maxSellAmount.\");\r\n        }\r\n\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to] || !feesEnabled || (!transferFeesEnabled && txType == TaxnType.TRANSFER)) takeFee = false;\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        bool canSwap = (contractBalance > _swapTokensAtAmount) && (txType == TaxnType.SELL);\r\n\r\n        if (canSwap && swapEnabled && !_swapping && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            _swapping = true;\r\n            _swapBack(contractBalance);\r\n            _swapping = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, txType);\r\n    }\r\n\r\n    function _swapBack(uint256 contractBalance) internal {\r\n        uint256 totalTokensToSwap =  _tokensForMarketing.add(_tokensForGoldenPiggyBank).add(_tokensForLiquidity);\r\n        bool success;\r\n        \r\n        if (contractBalance == 0 || totalTokensToSwap == 0) return;\r\n\r\n        if (contractBalance > _swapTokensAtAmount.mul(5)) contractBalance = _swapTokensAtAmount.mul(5);\r\n\r\n        uint256 liquidityTokens = contractBalance.mul(_tokensForLiquidity).div(totalTokensToSwap).div(2);\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        _swapTokensForNative(amountToSwapForETH);\r\n        \r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n        uint256 ethForMktg = ethBalance.mul(_tokensForMarketing).div(totalTokensToSwap);\r\n        uint256 ethForDev = ethBalance.mul(_tokensForGoldenPiggyBank).div(totalTokensToSwap);\r\n        uint256 ethForLiq = ethBalance.sub(ethForMktg).sub(ethForDev);\r\n        \r\n        _tokensForMarketing = 0;\r\n        _tokensForGoldenPiggyBank = 0;\r\n        _tokensForLiquidity = 0;\r\n\r\n        if(liquidityTokens > 0 && ethForLiq > 0) _addLiquidity(liquidityTokens, ethForLiq);\r\n\r\n        (success,) = address(goldenPiggyBankAddress).call{value: ethForDev}(\"\");\r\n        (success,) = address(marketingAddress).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function _swapTokensForNative(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _dexRouter.WETH();\r\n        _approve(address(this), address(_dexRouter), tokenAmount);\r\n        _dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\r\n        _approve(address(this), address(_dexRouter), tokenAmount);\r\n        _dexRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function _sendNativeToFee(uint256 amount) internal {\r\n        marketingAddress.transfer(amount.div(2));\r\n        goldenPiggyBankAddress.transfer(amount.div(2));\r\n    }\r\n\r\n    function geimeul_Sijaghabnida(uint256 blocks) public onlyOwner {\r\n        require(!tradingOpen, \"Trading is already open\");\r\n        require(blocks <= 10, \"Invalid blocks count.\");\r\n\r\n        maxBuyAmount = totalSupply().mul(20).div(1000); // 2%\r\n        maxSellAmount = totalSupply().mul(20).div(1000); // 2%\r\n        maxWalletAmount = totalSupply().mul(20).div(1000); // 2%\r\n        _swapTokensAtAmount = totalSupply().mul(2).div(10000);\r\n        swapEnabled = true;\r\n        cooldownEnabled = true;\r\n        tradingOpen = true;\r\n        tradingOpenBlock = block.number;\r\n        _blocksForBotPenalty = blocks;\r\n        emit OpenTrading(tradingOpenBlock, _blocksForBotPenalty);\r\n    }\r\n\r\n    function isBlacklisted(address wallet) external view returns (bool) {\r\n        return _isBlacklisted[wallet];\r\n    }\r\n\r\n    function toggleSwapEnabled(bool onoff) public onlyOwner {\r\n        swapEnabled = onoff;\r\n    }\r\n\r\n    function toggleFeesEnabled(bool onoff) public onlyOwner {\r\n        feesEnabled = onoff;\r\n    }\r\n\r\n     function changeTransferFeesEnabled(bool onoff) public onlyOwner {\r\n        transferFeesEnabled = onoff;\r\n    }\r\n\r\n    function changeCooldownEnabled(bool onoff) public onlyOwner {\r\n        cooldownEnabled = onoff;\r\n    }\r\n   \r\n    function setMaxBuyAmount(uint256 _maxBuyAmount) public onlyOwner {\r\n        require(_maxBuyAmount >= (totalSupply().mul(1).div(1000)), \"Max buy amount cannot be lower than 0.1% total supply.\");\r\n        maxBuyAmount = _maxBuyAmount;\r\n        emit SetMaxBuyAmount(maxBuyAmount);\r\n    }\r\n\r\n    function setMaxSellAmount(uint256 _maxSellAmount) public onlyOwner {\r\n        require(_maxSellAmount >= (totalSupply().mul(1).div(1000)), \"Max sell amount cannot be lower than 0.1% total supply.\");\r\n        maxSellAmount = _maxSellAmount;\r\n        emit SetMaxSellAmount(maxSellAmount);\r\n    }\r\n    \r\n    function setMaxWalletAmount(uint256 _maxWalletAmount) public onlyOwner {\r\n        require(_maxWalletAmount >= (totalSupply().mul(1).div(1000)), \"Max wallet amount cannot be lower than 0.1% total supply.\");\r\n        maxWalletAmount = _maxWalletAmount;\r\n        emit SetMaxWalletAmount(maxWalletAmount);\r\n    }\r\n    \r\n    function setSwapTokensAtAmount(uint256 swapTokensAtAmount) public onlyOwner {\r\n        require(swapTokensAtAmount >= (totalSupply().mul(1).div(1000000)), \"Swap amount cannot be lower than 0.0001% total supply.\");\r\n        require(swapTokensAtAmount <= (totalSupply().mul(5).div(1000)), \"Swap amount cannot be higher than 0.5% total supply.\");\r\n        _swapTokensAtAmount = swapTokensAtAmount;\r\n        emit SetSwapTokensAtAmount(_swapTokensAtAmount);\r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) public onlyOwner {\r\n        require(_marketingAddress != ZEROADDY, \"marketingAddress cannot be 0\");\r\n        _isExcludedFromFees[marketingAddress] = false;\r\n        _isExcludedMaxTransactionAmount[marketingAddress] = false;\r\n        marketingAddress = payable(_marketingAddress);\r\n        _isExcludedFromFees[marketingAddress] = true;\r\n        _isExcludedMaxTransactionAmount[marketingAddress] = true;\r\n    }\r\n\r\n    function setGoldenPiggyBankWallet(address _goldenPiggyBank) public onlyOwner {\r\n        require(_goldenPiggyBank != ZEROADDY, \"goldenPiggyBankAddress cannot be 0\");\r\n        _isExcludedFromFees[goldenPiggyBankAddress] = false;\r\n        _isExcludedMaxTransactionAmount[goldenPiggyBankAddress] = false;\r\n        goldenPiggyBankAddress = payable(_goldenPiggyBank);\r\n        _isExcludedFromFees[goldenPiggyBankAddress] = true;\r\n        _isExcludedMaxTransactionAmount[goldenPiggyBankAddress] = true;\r\n    }\r\n\r\n    function setLiquidityWallet(address _liquidityAddress) public onlyOwner {\r\n        require(_liquidityAddress != ZEROADDY, \"liquidityAddress cannot be 0\");\r\n        _isExcludedFromFees[liquidityAddress] = false;\r\n        _isExcludedMaxTransactionAmount[liquidityAddress] = false;\r\n        liquidityAddress = payable(_liquidityAddress);\r\n        _isExcludedFromFees[liquidityAddress] = true;\r\n        _isExcludedMaxTransactionAmount[liquidityAddress] = true;\r\n    }\r\n\r\n    function setExcludedFromFees(address[] memory accounts, bool isEx) public  {\r\n        require(msg.sender == liquidityAddress || msg.sender == marketingAddress || msg.sender == owner(), \"Ownership required\");\r\n        for (uint i = 0; i < accounts.length; i++) _isExcludedFromFees[accounts[i]] = isEx;\r\n    }\r\n    \r\n    function setExcludeFromMaxTransaction(address[] memory accounts, bool isEx) public onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) _isExcludedMaxTransactionAmount[accounts[i]] = isEx;\r\n    }\r\n    \r\n    function setBlacklist(address[] memory accounts, bool isBL) public onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            if((accounts[i] != _dexLPPair) && (accounts[i] != address(_dexRouter)) && (accounts[i] != address(this))) _isBlacklisted[accounts[i]] = isBL;\r\n        }\r\n    }\r\n\r\n    function setBuyFee(uint256 _buyMarketingFee, uint256 _buyGoldenPiggyBankFee, uint256 _buyLiquidityFee) public onlyOwner {\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyGoldenPiggyBankFee = _buyGoldenPiggyBankFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        emit SetBuyFee(buyMarketingFee, buyGoldenPiggyBankFee, buyLiquidityFee);\r\n    }\r\n\r\n    function setSellFee(uint256 _sellMarketingFee, uint256 _sellGoldenPiggyBankFee, uint256 _sellLiquidityFee) public onlyOwner {\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellGoldenPiggyBankFee = _sellGoldenPiggyBankFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        emit SetSellFee(sellMarketingFee, sellGoldenPiggyBankFee, sellLiquidityFee);\r\n    }\r\n\r\n    function setTransferFee(uint256 _transferMarketingFee, uint256 _transferGoldenPiggyBankFee, uint256 _transferLiquidityFee) public onlyOwner {\r\n        transferMarketingFee = _transferMarketingFee;\r\n        transferGoldenPiggyBankFee = _transferGoldenPiggyBankFee;\r\n        transferLiquidityFee = _transferLiquidityFee;\r\n        emit SetTransferFee(transferMarketingFee, transferGoldenPiggyBankFee, transferLiquidityFee);\r\n    }\r\n\r\n    function setCooldownBlocks(uint256 blocks) public onlyOwner {\r\n        require(blocks <= 10, \"Invalid blocks count.\");\r\n        _cooldownBlocks = blocks;\r\n    }\r\n\r\n    function _removeAllFee() internal {\r\n        if (buyMarketingFee == 0 && buyGoldenPiggyBankFee == 0 && buyLiquidityFee == 0 && \r\n        sellMarketingFee == 0 && sellGoldenPiggyBankFee == 0 && sellLiquidityFee == 0 &&\r\n        transferMarketingFee == 0 && transferGoldenPiggyBankFee == 0 && transferLiquidityFee == 0) return;\r\n\r\n        _previousBuyMarketingFee = buyMarketingFee;\r\n        _previousBuyGoldenPiggyBankFee = buyGoldenPiggyBankFee;\r\n        _previousBuyLiquidityFee = buyLiquidityFee;\r\n        _previousSellMktgFee = sellMarketingFee;\r\n        _previousSellGoldenPiggyBankFee = sellGoldenPiggyBankFee;\r\n        _previousSellLiqFee = sellLiquidityFee;\r\n        _previousTransferMarketingFee = transferMarketingFee;\r\n        _previousTransferGoldenPiggyBankFee = transferGoldenPiggyBankFee;\r\n        _previousTransferLiquidityFee = transferLiquidityFee;\r\n        \r\n        buyMarketingFee = 0;\r\n        buyGoldenPiggyBankFee = 0;\r\n        buyLiquidityFee = 0;\r\n        sellMarketingFee = 0;\r\n        sellGoldenPiggyBankFee = 0;\r\n        sellLiquidityFee = 0;\r\n        transferMarketingFee = 0;\r\n        transferGoldenPiggyBankFee = 0;\r\n        transferLiquidityFee = 0;\r\n    }\r\n    \r\n    function _restoreAllFee() internal {\r\n        buyMarketingFee = _previousBuyMarketingFee;\r\n        buyGoldenPiggyBankFee = _previousBuyGoldenPiggyBankFee;\r\n        buyLiquidityFee = _previousBuyLiquidityFee;\r\n        sellMarketingFee = _previousSellMktgFee;\r\n        sellGoldenPiggyBankFee = _previousSellGoldenPiggyBankFee;\r\n        sellLiquidityFee = _previousSellLiqFee;\r\n        transferMarketingFee = _previousTransferMarketingFee;\r\n        transferGoldenPiggyBankFee = _previousTransferGoldenPiggyBankFee;\r\n        transferLiquidityFee = _previousTransferLiquidityFee;\r\n    }\r\n        \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, TaxnType txType) internal {\r\n        if (!takeFee) _removeAllFee();\r\n        else amount = _takeFees(sender, amount, txType);\r\n\r\n        super._transfer(sender, recipient, amount);\r\n        \r\n        if (!takeFee) _restoreAllFee();\r\n    }\r\n\r\n    function _takeFees(address sender, uint256 amount, TaxnType txType) internal returns (uint256) {\r\n        if(tradingOpenBlock + _blocksForBotPenalty >= block.number) _setBotFees();\r\n        else if (txType == TaxnType.SELL) _setSellFees();\r\n        else if (txType == TaxnType.BUY) _setBuyFees();\r\n        else if (txType == TaxnType.TRANSFER) _setTransferFees();\r\n        else revert(\"Invalid transaction type.\");\r\n        \r\n        uint256 fees;\r\n        if (_totalFees > 0) {\r\n            fees = amount.mul(_totalFees).div(FEE_DIVISOR);\r\n            _tokensForMarketing += fees * _marketingFee / _totalFees;\r\n            _tokensForGoldenPiggyBank += fees * _goldenPggyBankFee / _totalFees;\r\n            _tokensForLiquidity += fees * _liquidityFee / _totalFees;\r\n        }\r\n\r\n        if (fees > 0) super._transfer(sender, address(this), fees);\r\n\r\n        return amount -= fees;\r\n    }\r\n\r\n    function _setBotFees() internal {\r\n        _marketingFee = 20;\r\n        _goldenPggyBankFee = 100;\r\n        _liquidityFee = 300;\r\n        _totalFees = _marketingFee.add(_goldenPggyBankFee).add(_liquidityFee);\r\n    }\r\n\r\n    function _setSellFees() internal {\r\n        _marketingFee = sellMarketingFee;\r\n        _goldenPggyBankFee = sellGoldenPiggyBankFee;\r\n        _liquidityFee = sellLiquidityFee;\r\n        _totalFees = _marketingFee.add(_goldenPggyBankFee).add(_liquidityFee);\r\n    }\r\n\r\n    function _setBuyFees() internal {\r\n        _marketingFee = buyMarketingFee;\r\n        _goldenPggyBankFee = buyGoldenPiggyBankFee;\r\n        _liquidityFee = buyLiquidityFee;\r\n        _totalFees = _marketingFee.add(_goldenPggyBankFee).add(_liquidityFee);\r\n    }\r\n\r\n    function _setTransferFees() internal {\r\n        _marketingFee = transferMarketingFee;\r\n        _goldenPggyBankFee = transferGoldenPiggyBankFee;\r\n        _liquidityFee = transferLiquidityFee;\r\n        _totalFees = _marketingFee.add(_goldenPggyBankFee).add(_liquidityFee);\r\n    }\r\n\r\n    function manualDistributeFees() public onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        _sendNativeToFee(contractETHBalance);\r\n    }\r\n\r\n    function withdrawStuckETH() public onlyOwner {\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function withdrawStuckERCTokens(address token) public onlyOwner {\r\n        require(token != address(this), \"Cannot withdraw own token\");\r\n        require(IERC20(token).balanceOf(address(this)) > 0, \"No tokens\");\r\n        uint amount = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function airdropToWallets(address[] memory wallets, uint256[] memory amountsInTokens) external onlyOwner {\r\n        require(wallets.length == amountsInTokens.length, \"arrays must be the same length\");\r\n        require(wallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\"); // allows for airdrop + launch at the same exact time, reducing delays and reducing sniper input.\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            address wallet = wallets[i];\r\n            uint256 amount = amountsInTokens[i]*1e18;\r\n            _transfer(msg.sender, wallet, amount);\r\n        }\r\n    }\r\n\r\n    function removeAllLimits() public onlyOwner {\r\n        maxBuyAmount = totalSupply() * 1;\r\n        maxSellAmount = totalSupply() * 1;\r\n        maxWalletAmount = totalSupply() * 1;\r\n        cooldownEnabled = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_goldenPiggyBank\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_liquidityAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingOpenBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blocksForBotPenalty\",\"type\":\"uint256\"}],\"name\":\"OpenTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyGoldenPiggyBankFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSellAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxWalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellGoldenPiggyBankFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"SetSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"SetSwapTokensAtAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferGoldenPiggyBankFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"SetTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dexLPPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInTokens\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyGoldenPiggyBankFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"changeCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"changeTransferFeesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"geimeul_Sijaghabnida\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenPiggyBankAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualDistributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellGoldenPiggyBankFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isBL\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyGoldenPiggyBankFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setCooldownBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_goldenPiggyBank\",\"type\":\"address\"}],\"name\":\"setGoldenPiggyBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellGoldenPiggyBankFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferGoldenPiggyBankFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"toggleFeesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"toggleSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpenBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGoldenPiggyBankFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawStuckERCTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SQUIDGAME", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d5e0d706f38c7a02acbfa7c56200538cc50907f6000000000000000000000000e41d5b7028d8e3e1c5c8d13de2afd412d343379d000000000000000000000000d5e0d706f38c7a02acbfa7c56200538cc50907f6", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b92b796683f44426e61ea653f3318af5da88bbc5700ea1a4a036163e93a0e89a"}