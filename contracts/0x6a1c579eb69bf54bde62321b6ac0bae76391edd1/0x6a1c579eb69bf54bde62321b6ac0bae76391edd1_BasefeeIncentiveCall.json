{"SourceCode": "pragma solidity 0.8.19;\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function systemCoin() external view virtual returns (address);\r\n\r\n    function pullFunds(address, address, uint) external virtual;\r\n}\r\n\r\nabstract contract OracleLike {\r\n    function read() external view virtual returns (uint256);\r\n}\r\n\r\nabstract contract BaseFeeIncentive {\r\n    StabilityFeeTreasuryLike public immutable treasury; // The stability fee treasury\r\n    address public immutable coin; // The system coin\r\n    OracleLike public ethOracle; // eth oracle\r\n    OracleLike public coinOracle; // coin oracle\r\n    uint256 public fixedReward; // The fixed reward sent by the treasury to a fee receiver (wad)\r\n    uint256 public callDelay; // delay between incentivized calls (seconds)\r\n    uint256 public lastCallMade; // last time a call to target was made (UNIX timestamp)\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, address addr);\r\n    event ModifyParameters(bytes32 parameter, uint256 val);\r\n    event RewardCaller(address indexed finalFeeReceiver, uint256 fixedReward);\r\n    event FailRewardCaller(\r\n        bytes revertReason,\r\n        address feeReceiver,\r\n        uint256 amount\r\n    );\r\n\r\n    // --- Auth ---\r\n    mapping(address => uint256) public authorizedAccounts;\r\n\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether msg.sender can call an authed function\r\n     **/\r\n    modifier isAuthorized() {\r\n        require(\r\n            authorizedAccounts[msg.sender] == 1,\r\n            \"StabilityFeeTreasury/account-not-authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // --- Constructor ---\r\n    constructor(\r\n        address treasury_,\r\n        uint256 reward_,\r\n        uint256 delay_,\r\n        address coinOracle_,\r\n        address ethOracle_\r\n    ) {\r\n        require(treasury_ != address(0), \"invalid-treasury\");\r\n        require(reward_ != 0, \"invalid-reward\");\r\n        require(coinOracle_ != address(0), \"invalid-coin-oracle\");\r\n        require(ethOracle_ != address(0), \"invalid-eth-oracle\");\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        treasury = StabilityFeeTreasuryLike(treasury_);\r\n        fixedReward = reward_;\r\n        callDelay = delay_;\r\n        coin = StabilityFeeTreasuryLike(treasury_).systemCoin();\r\n        coinOracle = OracleLike(coinOracle_);\r\n        ethOracle = OracleLike(ethOracle_);\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"fixedReward\", reward_);\r\n        emit ModifyParameters(\"callDelay\", delay_);\r\n        emit ModifyParameters(\"coinOracle\", coinOracle_);\r\n        emit ModifyParameters(\"ethOracle\", ethOracle_);\r\n    }\r\n\r\n    // -- Admin --\r\n    function modifyParameters(\r\n        bytes32 parameter,\r\n        uint256 val\r\n    ) public isAuthorized virtual {\r\n        if (parameter == \"fixedReward\") fixedReward = val;\r\n        else if (parameter == \"callDelay\") callDelay = val;\r\n        else revert(\"invalid-param\");\r\n        emit ModifyParameters(parameter, val);\r\n    }\r\n\r\n    function modifyParameters(\r\n        bytes32 parameter,\r\n        address val\r\n    ) external isAuthorized {\r\n        require(val != address(0), \"invalid-data\");\r\n        if (parameter == \"coinOracle\") coinOracle = OracleLike(val);\r\n        else if (parameter == \"ethOracle\") ethOracle = OracleLike(val);\r\n        else revert(\"invalid-param\");\r\n        emit ModifyParameters(parameter, val);\r\n    }\r\n\r\n    modifier payRewards() {\r\n        uint256 gas = gasleft();\r\n        _;\r\n\r\n        if (block.timestamp >= lastCallMade + callDelay) {\r\n            gas = gas - gasleft();\r\n            uint256 coinCost = (gas * block.basefee * ethOracle.read()) /\r\n                coinOracle.read();\r\n\r\n            try treasury.pullFunds(msg.sender, coin, coinCost + fixedReward) {\r\n                emit RewardCaller(msg.sender, coinCost + fixedReward);\r\n            } catch (bytes memory revertReason) {\r\n                emit FailRewardCaller(\r\n                    revertReason,\r\n                    msg.sender,\r\n                    coinCost + fixedReward\r\n                );\r\n            }\r\n        }\r\n\r\n        emit log(gas);\r\n\r\n        lastCallMade = block.timestamp;\r\n    }\r\n\r\n    event log(uint);\r\n}\r\n\r\n// @notice: Unobtrusive incentives for any call on a TAI like system.\r\n// @dev: Assumes an allowance from the stability fee treasury, all oracles return quotes with 18 decimal places.\r\ncontract BasefeeIncentiveCallBundler is BaseFeeIncentive {\r\n    // wen immutable arrays? (https://github.com/ethereum/solidity/issues/12587) ==> if you're reading this please go there and support.\r\n    address public immutable target0; // target of first call\r\n    address public immutable target1; // target of second call\r\n    bytes32 public immutable callData0; // calldata of the first incentivized call\r\n    bytes32 public immutable callData1; // calldata of the second incentivized call\r\n\r\n    // --- Constructor ---\r\n    constructor(\r\n        address treasury_,\r\n        address[2] memory targets_,\r\n        bytes32[2] memory callDatas_,\r\n        uint256 reward_,\r\n        uint256 delay_,\r\n        address coinOracle_,\r\n        address ethOracle_\r\n    ) BaseFeeIncentive(treasury_, reward_, delay_, coinOracle_, ethOracle_) {\r\n        require(targets_[0] != address(0), \"invalid-target\");\r\n        require(targets_[1] != address(0), \"invalid-target\");\r\n        require(callDatas_[0] != bytes32(0), \"invalid-call-data\");\r\n        require(callDatas_[1] != bytes32(0), \"invalid-call-data\");\r\n\r\n        target0 = targets_[0];\r\n        target1 = targets_[1];\r\n        callData0 = callDatas_[0];\r\n        callData1 = callDatas_[1];\r\n    }\r\n\r\n    // @dev Calls are made through the fallback function, meaning any call to this contract will do\r\n    fallback() external payRewards {\r\n        (bool success, ) = target0.call(abi.encode(callData0));\r\n        require(success, \"call-failed\");\r\n        (success, ) = target1.call(abi.encode(callData1));\r\n        require(success, \"call-failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address[2]\",\"name\":\"targets_\",\"type\":\"address[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"callDatas_\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"coinOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethOracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"finalFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fixedReward\",\"type\":\"uint256\"}],\"name\":\"RewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callData0\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callData1\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinOracle\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethOracle\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCallMade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BasefeeIncentiveCallBundler", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b3c5866f6690abd50536683994cc949697a64cd00000000000000000000000000d7b4a10dff52e85e9fb7e1b030c8c2dd96e0add000000000000000000000000ce3dd2143b6b222d303ba0006f7833b51831242980ebb08e00000000000000000000000000000000000000000000000000000000c7fee63e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008839bd47f7d516050873c906533a82a3f786870c0000000000000000000000004edbe53a846087075291fb575e8ffb4b00b1c5e4", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c65a509b7ff3d4404d7b88a267fced6b3d192e7bc859922dfc6eea07e1d6751f"}