{"SourceCode": "\n// SPDX-License-Identifier:MIT\n/* Website: https://www.freakinsealswithfreakinheadphones.wtf/ \nTwitter: https://twitter.com/freakinseals\nTelegram: https://t.me/freakinsealsportal \n*/\npragma solidity ^0.8.8;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// Dex Factory contract interface\ninterface IDexFactory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\n// Dex Router contract interface\ninterface IDexRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = payable(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract SEAL is Context, IERC20, Ownable {\n    string private _name = \"FreakinSealsWithFreakinHeadphones\";\n    string private _symbol = \"SEAL\";\n    uint8 private _decimals = 18;\n    uint256 private _totalSupply = 1000000000 * 1e18;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    mapping(address => bool) public isExcludedFromFee;\n    mapping(address => bool) public isExcludedFromMaxTxn;\n    mapping(address => bool) public isExcludedFromMaxHolding;\n\n    uint256 public minTokenToSwap = (_totalSupply * 5) / (10000); // this amount will trigger swap and distribute\n    uint256 public maxHoldLimit = 20000000* 1e18; // this is the max wallet holding limit\n    uint256 public maxTxnLimit = 20000000* 1e18; // this is the max transaction limit\n    uint256 public percentDivider = 100;\n    uint256 public launchedAt;\n\n    bool public distributeAndLiquifyStatus; // should be true to turn on to liquidate the pool\n    bool public feesStatus; // enable by default\n    bool public trading; // once enable can't be disable afterwards\n\n    IDexRouter public dexRouter; // router declaration\n\n    address public dexPair; // pair address declaration\n    address public marketingWallet; // marketing address declaration\n    address private constant DEAD = address(0xdead);\n    address private constant ZERO = address(0);\n\n    uint256 public marketingFeeOnBuying = 10;\n\n    uint256 public marketingFeeOnSelling = 20;\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    constructor() {\n        _balances[owner()] = _totalSupply;\n        marketingWallet = address(0x589e698aC47900D3F984ACb7e2b567bEe20F6f0b);\n\n        dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        isExcludedFromFee[address(dexRouter)] = true;\n        isExcludedFromMaxTxn[address(dexRouter)] = true;\n        isExcludedFromMaxHolding[address(dexRouter)] = true;\n\n        dexPair = IDexFactory(dexRouter.factory()).createPair(\n            address(this),\n            dexRouter.WETH()\n        );\n        isExcludedFromMaxHolding[dexPair] = true;\n        \n\n        //exclude owner and this contract from fee\n        isExcludedFromFee[owner()] = true;\n        isExcludedFromFee[address(this)] = true;\n\n        //exclude owner and this contract from max Txn\n        isExcludedFromMaxTxn[owner()] = true;\n        isExcludedFromMaxTxn[address(this)] = true;\n\n        //exclude owner and this contract from max hold limit\n        isExcludedFromMaxHolding[owner()] = true;\n        isExcludedFromMaxHolding[address(this)] = true;\n        isExcludedFromMaxHolding[marketingWallet] = true;\n\n        emit Transfer(address(0), owner(), _totalSupply);\n    }\n\n    //to receive ETH from dexRouter when swapping\n    receive() external payable {}\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()] - amount\n        );\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + (addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] - subtractedValue\n        );\n        return true;\n    }\n\n    function includeOrExcludeFromFee(\n        address account,\n        bool value\n    ) external onlyOwner {\n        isExcludedFromFee[account] = value;\n    }\n\n    function includeOrExcludeFromMaxTxn(\n        address account,\n        bool value\n    ) external onlyOwner {\n        isExcludedFromMaxTxn[account] = value;\n    }\n\n    function includeOrExcludeFromMaxHolding(\n        address account,\n        bool value\n    ) external onlyOwner {\n        isExcludedFromMaxHolding[account] = value;\n    }\n\n    function setMinTokenToSwap(uint256 _amount) external onlyOwner {\n        minTokenToSwap = _amount * 1e18;\n    }\n\n    function setMaxHoldLimit(uint256 _amount) external onlyOwner {\n        maxHoldLimit = _amount * 1e18;\n    }\n\n    function setMaxTxnLimit(uint256 _amount) external onlyOwner {\n        maxTxnLimit = _amount * 1e18;\n    }\n\n    function setBuyFeePercent(uint256 _marketingFee) external onlyOwner {\n        marketingFeeOnBuying = _marketingFee;\n    }\n\n    function setSellFeePercent(uint256 _marketingFee) external onlyOwner {\n        marketingFeeOnSelling = _marketingFee;\n    }\n\n    function setDistributionStatus(bool _value) public onlyOwner {\n        distributeAndLiquifyStatus = _value;\n    }\n\n    function enableOrDisableFees(bool _value) external onlyOwner {\n        feesStatus = _value;\n    }\n\n    function updateAddresses(address _marketingWallet) external onlyOwner {\n        marketingWallet = _marketingWallet;\n    }\n\n    function enableTrading() external onlyOwner {\n        require(!trading, \": already enabled\");\n\n        trading = true;\n        feesStatus = true;\n        distributeAndLiquifyStatus = true;\n        launchedAt = block.timestamp;\n    }\n\n    function removeStuckEth(address _receiver) public onlyOwner {\n        payable(_receiver).transfer(address(this).balance);\n    }\n\n    function totalBuyFeePerTx(uint256 amount) public view returns (uint256) {\n        uint256 fee = (amount * marketingFeeOnBuying) / (percentDivider);\n        return fee;\n    }\n\n    function totalSellFeePerTx(uint256 amount) public view returns (uint256) {\n        uint256 fee = (amount * marketingFeeOnSelling) / (percentDivider);\n        return fee;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \" approve from the zero address\");\n        require(spender != address(0), \"approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"transfer from the zero address\");\n        require(to != address(0), \"transfer to the zero address\");\n        require(amount > 0, \"Amount must be greater than zero\");\n        if (!isExcludedFromMaxTxn[from] && !isExcludedFromMaxTxn[to]) {\n            require(amount <= maxTxnLimit, \" max txn limit exceeds\");\n\n            // trading disable till launch\n            if (!trading) {\n                require(\n                    dexPair != from && dexPair != to,\n                    \": trading is disable\"\n                );\n            }\n        }\n\n        if (!isExcludedFromMaxHolding[to]) {\n            require(\n                (balanceOf(to) + amount) <= maxHoldLimit,\n                \": max hold limit exceeds\"\n            );\n        }\n\n        // swap and liquify\n        distributeAndLiquify(from, to);\n\n        //indicates if fee should be deducted from transfer\n        bool takeFee = true;\n\n        //if any account belongs to isExcludedFromFee account then remove the fee\n        if (isExcludedFromFee[from] || isExcludedFromFee[to] || !feesStatus) {\n            takeFee = false;\n        }\n\n        //transfer amount, it will take tax, burn, liquidity fee\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    //this method is responsible for taking all fees, if takeFee is true\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool takeFee\n    ) private {\n        if (dexPair == sender && takeFee) {\n            uint256 allFee;\n            uint256 tTransferAmount;\n            allFee = totalBuyFeePerTx(amount);\n            tTransferAmount = amount - allFee;\n\n            _balances[sender] = _balances[sender] - amount;\n            _balances[recipient] = _balances[recipient] + tTransferAmount;\n            emit Transfer(sender, recipient, tTransferAmount);\n\n            takeTokenFee(sender, allFee);\n        } else if (dexPair == recipient && takeFee) {\n            uint256 allFee = totalSellFeePerTx(amount);\n            uint256 tTransferAmount = amount - allFee;\n            _balances[sender] = _balances[sender] - amount;\n            _balances[recipient] = _balances[recipient] + tTransferAmount;\n            emit Transfer(sender, recipient, tTransferAmount);\n\n            takeTokenFee(sender, allFee);\n        } else {\n            _balances[sender] = _balances[sender] - amount;\n            _balances[recipient] = _balances[recipient] + (amount);\n            emit Transfer(sender, recipient, amount);\n        }\n    }\n\n    function takeTokenFee(address sender, uint256 amount) private {\n        _balances[address(this)] = _balances[address(this)] + (amount);\n\n        emit Transfer(sender, address(this), amount);\n    }\n\n    // to withdarw ETH from contract\n    function withdrawETH(uint256 _amount) external onlyOwner {\n        require(address(this).balance >= _amount, \"Invalid Amount\");\n        payable(msg.sender).transfer(_amount);\n    }\n\n    // to withdraw ERC20 tokens from contract\n    function withdrawToken(IERC20 _token, uint256 _amount) external onlyOwner {\n        require(_token.balanceOf(address(this)) >= _amount, \"Invalid Amount\");\n        _token.transfer(msg.sender, _amount);\n    }\n\n    function distributeAndLiquify(address from, address to) private {\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        bool shouldSell = contractTokenBalance >= minTokenToSwap;\n\n        if (\n            shouldSell &&\n            from != dexPair &&\n            distributeAndLiquifyStatus &&\n            !(from == address(this) && to == dexPair) // swap 1 time\n        ) {\n            // approve contract\n            _approve(address(this), address(dexRouter), minTokenToSwap);\n\n            // now is to lock into liquidty pool\n            Utils.swapTokensForEth(address(dexRouter), minTokenToSwap);\n            uint256 ethForMarketing = address(this).balance;\n\n            // sending Eth to Marketing wallet\n            if (ethForMarketing > 0)\n                payable(marketingWallet).transfer(ethForMarketing);\n        }\n    }\n}\n\n// Library for swapping on Dex\nlibrary Utils {\n    function swapTokensForEth(\n        address routerAddress,\n        uint256 tokenAmount\n    ) internal {\n        IDexRouter dexRouter = IDexRouter(routerAddress);\n\n        // generate the Dex pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = dexRouter.WETH();\n\n        // make the swap\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp + 300\n        );\n    }\n\n    function addLiquidity(\n        address routerAddress,\n        address owner,\n        uint256 tokenAmount,\n        uint256 ethAmount\n    ) internal {\n        IDexRouter dexRouter = IDexRouter(routerAddress);\n\n        // add the liquidity\n        dexRouter.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner,\n            block.timestamp + 300\n        );\n    }\n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAndLiquifyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableOrDisableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxHolding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTxn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setDistributionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalBuyFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalSellFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"updateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SEAL", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}