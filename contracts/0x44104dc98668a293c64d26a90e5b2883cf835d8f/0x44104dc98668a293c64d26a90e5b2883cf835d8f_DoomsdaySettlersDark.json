{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DoomsdaySettlersDarkAgeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport \\\"./interfaces/ISettlers.sol\\\";\\r\\nimport \\\"./interfaces/IDoomsdaySettlersDisasters.sol\\\";\\r\\n\\r\\ncontract DoomsdaySettlersDarkAgeV2 {\\r\\n\\r\\n    struct Structure {\\r\\n        uint32 resources;\\r\\n        uint32 effects;\\r\\n        bytes5 lastDisaster;\\r\\n    }\\r\\n\\r\\n    int64 constant MAP_WIDTH         = 6_500_000;\\r\\n    int64 constant MAP_HEIGHT        = 3_000_000;\\r\\n    uint256 constant ENDGAME_SUPPLY = 20;\\r\\n    address settlers;\\r\\n    address disasters;\\r\\n\\r\\n    mapping(uint32    => Structure) structuralData;\\r\\n\\r\\n    constructor(){\\r\\n        settlers = msg.sender;\\r\\n        disasters = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setSettlers(address _settlers) external {\\r\\n        require(msg.sender == settlers,\\\"access\\\");\\r\\n        settlers = _settlers;\\r\\n    }\\r\\n    function setDisasters(address _disasters) external {\\r\\n        require(msg.sender == disasters,\\\"access\\\");\\r\\n        disasters = _disasters;\\r\\n    }\\r\\n\\r\\n    function disaster(uint32 _tokenId, uint256 _totalSupply) external returns(uint8 _type, bool destroyed){\\r\\n        require(msg.sender == settlers,\\\"settlers\\\");\\r\\n        (\\r\\n            int64[2] memory _coordinates,\\r\\n            int64 _radius,\\r\\n            uint8 __type,\\r\\n            bytes5 _disasterId\\r\\n        ) = IDoomsdaySettlersDisasters(disasters).currentDisaster();\\r\\n\\r\\n        if(_totalSupply < ENDGAME_SUPPLY){\\r\\n            IDoomsdaySettlersDisasters(disasters).recordDisaster();\\r\\n        }\\r\\n        _coordinates;_radius;_disasterId;\\r\\n        _type = __type;\\r\\n\\r\\n        require(checkVulnerable(_tokenId ),\\\"vulnerable\\\");\\r\\n        unchecked{\\r\\n            if(\\r\\n                (structuralData[_tokenId].effects >> _type  * 8)%256 + 1\\r\\n                    >\\r\\n                (structuralData[_tokenId].resources >> _type  * 8)%256  ){\\r\\n                    return (_type,true);\\r\\n            }\\r\\n            structuralData[_tokenId].effects =\\r\\n                    structuralData[_tokenId].effects + (uint32(1) << _type * 8);\\r\\n            structuralData[_tokenId].lastDisaster = _disasterId;\\r\\n        }\\r\\n        return (_type, false);\\r\\n    }\\r\\n\\r\\n    function reinforce(\\r\\n        uint32 _tokenId,\\r\\n        bytes32 _tokenHash,\\r\\n        bool[4] memory _resources,\\r\\n        bool _isDarkAge\\r\\n    ) external returns (uint80 _cost){\\r\\n        require(msg.sender == settlers,\\\"settlers\\\");\\r\\n        if(_isDarkAge){\\r\\n            require(!checkVulnerable(_tokenId ),\\\"vulnerable\\\");\\r\\n        }\\r\\n        require(!_resources[getGeography(_tokenHash)],\\\"immune\\\");\\r\\n        unchecked {\\r\\n            uint32 resources = structuralData[_tokenId].resources;\\r\\n            for(uint8 i = 0; i < 4; ++i){\\r\\n                if(_resources[i]){\\r\\n                    _cost += uint80( 2 ** ( ( resources >> i  * 8 ) % 256 ) );\\r\\n                    resources = resources + (uint32(1) << i * 8);\\r\\n                }\\r\\n            }\\r\\n            structuralData[_tokenId].resources = resources;\\r\\n        }\\r\\n        return _cost;\\r\\n    }\\r\\n\\r\\n    function checkVulnerable(uint32 _tokenId) public view returns(bool _vulnerable){\\r\\n        (\\r\\n            int64[2] memory _coordinates,\\r\\n            int64 _radius,\\r\\n            uint8 _type,\\r\\n            bytes5 _disasterId\\r\\n        ) = IDoomsdaySettlersDisasters(disasters).currentDisaster();\\r\\n\\r\\n        if(structuralData[_tokenId].lastDisaster == _disasterId) return false;\\r\\n        bytes32 _hash = ISettlers(settlers).hashOf(_tokenId);\\r\\n        if(getGeography(_hash) == _type) return false;\\r\\n        unchecked{\\r\\n            int64[2] memory _settlementLocation;\\r\\n            (_settlementLocation[0], _settlementLocation[1]) = getCoordinates(_hash);\\r\\n\\r\\n            for(int64 x = -1; x <= 1; ++x ){\\r\\n                for(int64 y = -1; y <= 1; ++y){\\r\\n                    int64 dx = _settlementLocation[0] - (_coordinates[0] + MAP_WIDTH * x);\\r\\n                    int64 dy = _settlementLocation[1] - (_coordinates[1] + MAP_HEIGHT * y);\\r\\n                    if(dx**2 + dy**2 < _radius**2) return true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getUnusedFees(uint32 _tokenId) external view returns (uint80){\\r\\n        uint80 fees = 0;\\r\\n        unchecked{\\r\\n            uint32 resources    = structuralData[_tokenId].resources;\\r\\n            uint32 effects      = structuralData[_tokenId].effects;\\r\\n            for(uint8 i = 0; i < 4; ++i){\\r\\n                uint32 resource = resources % 256;\\r\\n                uint32 effect   = effects % 256;\\r\\n                resources >>= 8;\\r\\n                effects   >>= 8;\\r\\n                if(effect < resource){\\r\\n                    fees += uint80(resource - effect);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return fees;\\r\\n    }\\r\\n\\r\\n    function getStructuralData(uint32 _tokenId) external view returns(\\r\\n        uint32 resources,\\r\\n        uint32 effects,\\r\\n        bytes5 lastDisaster\\r\\n    ){\\r\\n        return (\\r\\n            structuralData[_tokenId].resources,\\r\\n            structuralData[_tokenId].effects,\\r\\n            structuralData[_tokenId].lastDisaster\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getCoordinates(bytes32 _hash) public pure returns(int64 x, int64 y){\\r\\n        unchecked{\\r\\n            x = int64( uint64(   uint32( uint256(_hash)  >> 128    ) )   ) % MAP_WIDTH;\\r\\n            y = int64( uint64(   uint32( uint256(_hash)  % 2** 128 ) )   ) % MAP_HEIGHT;\\r\\n            return (x,y);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getGeography(bytes32 _hash) public pure returns(uint8){\\r\\n        unchecked{\\r\\n            return uint8(uint256(_hash)%4);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDoomsdaySettlersDisasters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.21;\\r\\n\\r\\ninterface IDoomsdaySettlersDisasters {\\r\\n    function currentDisaster() external view returns (\\r\\n        int64[2] memory _coordinates,\\r\\n        int64 _radius,\\r\\n        uint8 _type,\\r\\n        bytes5 _disasterId\\r\\n    );\\r\\n    function recordDisaster() external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISettlers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\ninterface ISettlers {\\r\\n    function totalSupply()          external view returns(uint256);\\r\\n\\r\\n    function hashOf(uint32 _tokenId)  external view returns(bytes32);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"checkVulnerable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_vulnerable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"disaster\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"destroyed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getCoordinates\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"x\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"y\",\"type\":\"int64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getGeography\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"getStructuralData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"resources\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"effects\",\"type\":\"uint32\"},{\"internalType\":\"bytes5\",\"name\":\"lastDisaster\",\"type\":\"bytes5\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"getUnusedFees\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool[4]\",\"name\":\"_resources\",\"type\":\"bool[4]\"},{\"internalType\":\"bool\",\"name\":\"_isDarkAge\",\"type\":\"bool\"}],\"name\":\"reinforce\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"_cost\",\"type\":\"uint80\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_disasters\",\"type\":\"address\"}],\"name\":\"setDisasters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settlers\",\"type\":\"address\"}],\"name\":\"setSettlers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DoomsdaySettlersDarkAgeV2", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}