{"SourceCode": "/**\r\n\r\nWebsite: https://www.canaryai.tech\r\nApp: https://app.canaryai.tech\r\nTwitter: https://twitter.com/AICanary\r\nTelegram: https://t.me/canary_ai\r\nMedium: https://canaryai.medium.com\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract CANAI is Context, IERC20, Ownable {\r\n    uint256 private constant _totalSupply = 100_000_000e18;\r\n    uint256 private constant _onePercent = 1_000_000e18;\r\n    uint256 private _minSwapLimits = 113*1e18;\r\n    uint256 private _maxSwapLimits = _onePercent;\r\n    uint8 private constant _decimals = 18;\r\n\r\n    IUniswapV2Router02 immutable _dexRouter;\r\n    address private _dexPair;\r\n    address immutable WETH;\r\n    address payable _canaryai;\r\n\r\n    uint256 private _taxCanaryBuy;\r\n    uint256 private _taxCanarySell;\r\n    uint256 private _taxCanaryLiq;\r\n\r\n    uint8 private _trdActive;\r\n    uint8 private _isInSwap;\r\n\r\n    uint256 private _maxTransize = _onePercent * 2;\r\n    uint256 private _maxWalletHoldings = _onePercent * 2;\r\n\r\n    string private constant _name = \"Canary AI\";\r\n    string private constant _symbol = \"CANAI\";\r\n\r\n    mapping(address => uint256) private _balance;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _exceptForTradeCan;\r\n    mapping(address => bool) private _exceptForCanAI;\r\n\r\n    constructor() {\r\n        _dexRouter = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        WETH = _dexRouter.WETH();\r\n        _canaryai = payable(0x2104cb3651BCA6Ec048d02a885A3c1D4C40EF6FA);\r\n        _balance[msg.sender] = _totalSupply;\r\n        _exceptForTradeCan[_canaryai] = true;\r\n        _exceptForTradeCan[address(this)] = true;\r\n        _exceptForCanAI[address(this)] = true;\r\n        _exceptForCanAI[address(_dexRouter)] = true;\r\n        _exceptForCanAI[address(0)] = true;\r\n        _exceptForCanAI[address(0xDEAD)] = true;\r\n        _exceptForCanAI[msg.sender] = true;\r\n        _allowances[address(this)][address(_dexRouter)] = type(uint256).max;\r\n        _allowances[msg.sender][address(_dexRouter)] = type(uint256).max;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        uint256 _tax;\r\n        if (from == address(this) || to == address(this)) {\r\n            _balance[from] -= amount;\r\n            _balance[to] += amount;\r\n\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n        if (!_exceptForTradeCan[from] && !_exceptForTradeCan[to]) {\r\n            require(\r\n                _trdActive != 0 && amount <= _maxTransize,\r\n                \"Launch / Max TxAmount at launch\"\r\n            );\r\n            if (!_exceptForCanAI[to]) {\r\n                require(\r\n                    _balance[to] + amount <= _maxWalletHoldings,\r\n                    \"Exceeds max wallet balance\"\r\n                );\r\n            }\r\n\r\n            if (_isInSwap == 1) {\r\n                //No tax transfer\r\n                _balance[from] -= amount;\r\n                _balance[to] += amount;\r\n\r\n                emit Transfer(from, to, amount);\r\n                return;\r\n            }\r\n\r\n            if (from == _dexPair) {\r\n                _tax = _taxCanaryBuy + _taxCanaryLiq;\r\n            } else if (to == _dexPair) {\r\n                uint256 tokensInContract = _balance[address(this)];\r\n                if (amount > _minSwapLimits && _isInSwap == 0) {\r\n                    if (tokensInContract > _minSwapLimits) {\r\n                        if (tokensInContract > _maxSwapLimits) {\r\n                            tokensInContract = _maxSwapLimits;\r\n                        }\r\n\r\n                        uint256 lpTokensForSwap = (tokensInContract * _taxCanaryLiq) /\r\n                            (((_taxCanaryBuy + _taxCanarySell) / 2) + _taxCanaryLiq);\r\n                        uint256 tokensTosell = tokensInContract - lpTokensForSwap;\r\n\r\n                        _isInSwap = 1;\r\n                        address[] memory path = new address[](2);\r\n                        path[0] = address(this);\r\n                        path[1] = WETH;\r\n\r\n                        _dexRouter\r\n                            .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                                tokensTosell,\r\n                                0,\r\n                                path,\r\n                                _canaryai,\r\n                                block.timestamp\r\n                            );\r\n\r\n                        if (lpTokensForSwap > 0) {\r\n                            _dexRouter\r\n                                .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                                    lpTokensForSwap / 2,\r\n                                    0,\r\n                                    path,\r\n                                    address(this),\r\n                                    block.timestamp\r\n                                );\r\n\r\n                            uint256 newBal = address(this).balance;\r\n                            _dexRouter.addLiquidityETH{value: newBal}(\r\n                                address(this),\r\n                                lpTokensForSwap / 2,\r\n                                0,\r\n                                0,\r\n                                owner(),\r\n                                block.timestamp\r\n                            );\r\n                        }\r\n                        _isInSwap = 0;\r\n                    }\r\n                }\r\n\r\n                _tax = _taxCanarySell + _taxCanaryLiq;\r\n            } else {\r\n                _tax = 0;\r\n            }\r\n        }\r\n\r\n        bool _takeTax = _isTakeFeeSwap(from, to);\r\n\r\n        if (_takeTax) {\r\n            //Tax transfer\r\n            uint256 transferAmount = takkingFees(from, to, amount, _tax);\r\n\r\n            _balance[to] += transferAmount;\r\n            emit Transfer(from, to, transferAmount);\r\n        } else {\r\n            _balance[to] += amount;\r\n\r\n            emit Transfer(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function _isTakeFeeSwap(address from, address to)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return !_exceptForTradeCan[from];\r\n    }\r\n\r\n    function takkingFees(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 taxRate\r\n    ) internal returns (uint256) {\r\n        uint256 taxTokens = (amount * taxRate) / 100;\r\n        uint256 transferAmount = amount - taxTokens;\r\n\r\n        _balance[from] -= amount;\r\n        _balance[address(this)] += taxTokens;\r\n        emit Transfer(from, address(this), taxTokens);\r\n\r\n        return transferAmount;\r\n    }\r\n\r\n    function startCanary() external onlyOwner {\r\n        require(_trdActive == 0, \"already launched\");\r\n        _trdActive = 1;\r\n        _taxCanaryBuy = 30;\r\n        _taxCanarySell = 30;\r\n    }\r\n\r\n    function canaryLiquidity() external onlyOwner {\r\n        require(_trdActive == 0, \"already opened\");\r\n        _dexPair = IUniswapV2Factory(_dexRouter.factory()).createPair(\r\n            address(this),\r\n            WETH\r\n        );\r\n        _exceptForCanAI[address(_dexPair)] = true;\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        _dexRouter.addLiquidityETH{value: ethBalance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function reduceFees(\r\n        uint256 _feeBuy,\r\n        uint256 _feeSell\r\n    ) external onlyOwner {\r\n        _taxCanaryBuy = _feeBuy;\r\n        _taxCanarySell = _feeSell;\r\n        require(_feeBuy <= 10 && _feeSell <= 10);\r\n    }    \r\n\r\n    function removeMaxSize() external onlyOwner {\r\n        _maxTransize = type(uint256).max;\r\n        _maxWalletHoldings = type(uint256).max;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canaryLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeSell\",\"type\":\"uint256\"}],\"name\":\"reduceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCanary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CANAI", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e2a85f7ca40b5df7797bff24ff13cfc608995045ee71df4b86a7c792f1d3d0be"}