{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/WukongStaking1 (1).sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract WukongStaking is Ownable, ReentrancyGuard {\r\n    IERC721 public WukongNFT;\r\n\r\n    uint256 public constant SECONDS_IN_DAY = 24 * 60 * 60;\r\n    uint256 public HARDSTAKE_YIELD_PERDAY = 15;\r\n    uint256 public PASSIVESTAKE_YIELD_PERDAY = 5;\r\n\r\n    uint256 public stakingStartPoint;\r\n\r\n    address[] public authorisedLog;\r\n\r\n    bool public stakingLaunched;\r\n    bool public depositPaused;\r\n    uint256 public totalHardStaker;\r\n    uint256 public totalStakedNFT;\r\n    \r\n    struct HardStaker {\r\n        uint256 accumulatedAmount;\r\n        uint256 lastCheckpoint;\r\n        uint256[] hardStakedWukongId; \r\n    }\r\n\r\n    struct PassiveStaker {\r\n        uint256 lastCheckPoint;\r\n        uint256 accumulatedAmount;\r\n    }\r\n\r\n    mapping(address => PassiveStaker) private _passiveStakers;\r\n    mapping(address => HardStaker) private _hardStakers;\r\n    mapping(uint256 => address) private _ownerOfHardStakingToken;\r\n    mapping (address => bool) private _authorised;\r\n\r\n    constructor(\r\n        address _wukong,\r\n        uint256 _stakingStartPoint\r\n    ) {\r\n        WukongNFT = IERC721(_wukong);\r\n        stakingStartPoint = _stakingStartPoint;\r\n    }\r\n\r\n    modifier authorised() {\r\n        require(_authorised[_msgSender()], \"The token contract is not authorised\");\r\n            _;\r\n    }\r\n\r\n    function getHardStakingTokens(address _owner) public view returns (uint256[] memory) {\r\n        return _hardStakers[_owner].hardStakedWukongId;\r\n    }\r\n\r\n    function hardStake(uint256 tokenId) external returns (bool) {\r\n        address _sender = _msgSender();\r\n        require(WukongNFT.ownerOf(tokenId) == _sender, \"Not owner\");\r\n        \r\n        HardStaker storage user = _hardStakers[_sender];\r\n\r\n        accumulatePassiveStake(_sender);\r\n\r\n        WukongNFT.safeTransferFrom(_sender, address(this), tokenId);\r\n        _ownerOfHardStakingToken[tokenId] = _sender;\r\n\r\n        accumulateHardStake(_sender);\r\n\r\n        user.hardStakedWukongId.push(tokenId);\r\n        if (user.hardStakedWukongId.length == 1) {\r\n            totalHardStaker += 1;\r\n        }\r\n        totalStakedNFT += 1;\r\n\r\n        return true;\r\n    }\r\n\r\n    function hardMultiStake(uint256[] memory tokenIds) external returns (bool) {\r\n        require(tokenIds.length > 0, \"Token Ids must be an array\");\r\n        address _sender = _msgSender();\r\n\r\n        HardStaker storage user = _hardStakers[_sender];\r\n\r\n        accumulatePassiveStake(_sender);\r\n        accumulateHardStake(_sender);\r\n\r\n        for(uint256 i = 0;i < tokenIds.length;i++) {\r\n            require(WukongNFT.ownerOf(tokenIds[i]) == _sender, \"Not owner\");\r\n            WukongNFT.safeTransferFrom(_sender, address(this), tokenIds[i]);\r\n            _ownerOfHardStakingToken[tokenIds[i]] = _sender;\r\n            user.hardStakedWukongId.push(tokenIds[i]);\r\n        }\r\n\r\n        if (user.hardStakedWukongId.length == tokenIds.length) {\r\n            totalHardStaker += 1;\r\n        }\r\n        totalStakedNFT += tokenIds.length;\r\n\r\n        return true;\r\n    }\r\n\r\n    function unHardStake(uint256 tokenId) external returns (bool) {\r\n        address sender = _msgSender();\r\n        require(_ownerOfHardStakingToken[tokenId] == sender, \"Not owner of the staking NFT\");\r\n        \r\n        HardStaker storage user = _hardStakers[sender];\r\n\r\n        accumulatePassiveStake(sender);\r\n\r\n        accumulateHardStake(sender);\r\n\r\n        WukongNFT.safeTransferFrom(address(this), sender, tokenId);\r\n        _ownerOfHardStakingToken[tokenId] = address(0);\r\n\r\n        user.hardStakedWukongId = _moveTokenInTheList(user.hardStakedWukongId, tokenId);\r\n        user.hardStakedWukongId.pop();\r\n\r\n        if (user.hardStakedWukongId.length == 0) {\r\n            totalHardStaker -= 1;\r\n        }\r\n        totalStakedNFT -= 1;\r\n\r\n        return true;\r\n    }\r\n\r\n    function unHardMultiStake(uint256[] memory tokenIds) external returns (bool) {\r\n        require(tokenIds.length > 0, \"Token Ids must be an array\");\r\n        address sender = _msgSender();\r\n        \r\n        HardStaker storage user = _hardStakers[sender];\r\n\r\n        accumulatePassiveStake(sender);\r\n\r\n        accumulateHardStake(sender);\r\n\r\n        for(uint256 i = 0;i < tokenIds.length;i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            require(_ownerOfHardStakingToken[tokenId] == sender, \"Not owner of the staking NFT\");\r\n\r\n            WukongNFT.safeTransferFrom(address(this), sender, tokenId);\r\n            _ownerOfHardStakingToken[tokenId] = address(0);\r\n\r\n            user.hardStakedWukongId = _moveTokenInTheList(user.hardStakedWukongId, tokenId);\r\n            user.hardStakedWukongId.pop();\r\n        }\r\n\r\n        if (user.hardStakedWukongId.length == 0) {\r\n            totalHardStaker -= 1;\r\n        }\r\n        totalStakedNFT -= tokenIds.length;\r\n\r\n        return true;\r\n    }\r\n\r\n    function getAccumulatedHardStakeAmount(address staker) external view returns (uint256) {\r\n        return _hardStakers[staker].accumulatedAmount + getCurrentHardStakeReward(staker);\r\n    }\r\n    \r\n    function getAccumulatedPassiveStakeAmount(address _owner) external view returns (uint256) {\r\n        return _passiveStakers[_owner].accumulatedAmount + getPassiveStakeReward(_owner);\r\n    }\r\n\r\n    function accumulatePassiveStake(address _owner) internal {\r\n        _passiveStakers[_owner].accumulatedAmount += getPassiveStakeReward(_owner);\r\n        _passiveStakers[_owner].lastCheckPoint = block.timestamp;\r\n    }\r\n\r\n    function accumulateHardStake(address staker) internal {\r\n        _hardStakers[staker].accumulatedAmount += getCurrentHardStakeReward(staker);\r\n        _hardStakers[staker].lastCheckpoint = block.timestamp;\r\n    }\r\n\r\n    function getCurrentHardStakeReward(address staker) internal view returns (uint256) {\r\n        HardStaker memory user = _hardStakers[staker];\r\n\r\n        // return (block.timestamp - user.lastCheckpoint);\r\n\r\n        if (user.lastCheckpoint == 0 || block.timestamp < stakingStartPoint) {return 0;}\r\n\r\n        return (block.timestamp - user.lastCheckpoint) / SECONDS_IN_DAY * user.hardStakedWukongId.length * HARDSTAKE_YIELD_PERDAY;\r\n    }\r\n\r\n    function getPassiveStakeReward(address _owner) internal view returns (uint256) {\r\n        uint256 nftAmount = WukongNFT.balanceOf(_owner);\r\n\r\n        uint256 startPoint = stakingStartPoint;\r\n        if (_passiveStakers[_owner].lastCheckPoint != 0) {\r\n            startPoint = _passiveStakers[_owner].lastCheckPoint;\r\n        }\r\n\r\n        return (block.timestamp - startPoint) / SECONDS_IN_DAY * nftAmount * PASSIVESTAKE_YIELD_PERDAY;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns token owner address (returns address(0) if token is not inside the gateway)\r\n    */\r\n    function ownerOf(uint256 tokenID) public view returns (address) {\r\n        return _ownerOfHardStakingToken[tokenID];       \r\n    }\r\n\r\n    /**\r\n    * @dev Admin function to authorise the contract address\r\n    */\r\n    function authorise(address toAuth) public onlyOwner {\r\n        _authorised[toAuth] = true;\r\n        authorisedLog.push(toAuth);\r\n      }\r\n\r\n    /**\r\n    * @dev Function allows admin add unauthorised address.\r\n    */\r\n    function unauthorise(address addressToUnAuth) public onlyOwner {\r\n        _authorised[addressToUnAuth] = false;\r\n    }\r\n  \r\n    function emergencyWithdraw(uint256[] memory tokenIDs) public onlyOwner {\r\n        require(tokenIDs.length <= 50, \"50 is max per tx\");\r\n        pauseDeposit(true);\r\n\r\n        for (uint256 i; i < tokenIDs.length; i++) {\r\n            address receiver = _ownerOfHardStakingToken[tokenIDs[i]];\r\n\r\n            if (receiver != address(0) && IERC721(WukongNFT).ownerOf(tokenIDs[i]) == address(this)) {\r\n                IERC721(WukongNFT).transferFrom(address(this), receiver, tokenIDs[i]);\r\n                // emit WithdrawStuckERC721(receiver, WukongNFT, tokenIDs[i]);\r\n              }\r\n        }\r\n    }\r\n\r\n    function _moveTokenInTheList(uint256[] memory list, uint256 tokenId) internal pure returns (uint256[] memory) {\r\n        uint256 tokenIndex = 0;\r\n        uint256 lastTokenIndex = list.length - 1;\r\n        uint256 length = list.length;\r\n  \r\n        for(uint256 i = 0; i < length; i++) {\r\n          if (list[i] == tokenId) {\r\n            tokenIndex = i + 1;\r\n            break;\r\n          }\r\n        }\r\n        require(tokenIndex != 0, \"msg.sender is not the owner\");\r\n  \r\n        tokenIndex -= 1;\r\n  \r\n        if (tokenIndex != lastTokenIndex) {\r\n          list[tokenIndex] = list[lastTokenIndex];\r\n          list[lastTokenIndex] = tokenId;\r\n        }\r\n  \r\n        return list;\r\n      }\r\n\r\n\r\n    /**\r\n    * @dev Function allows to pause deposits if needed. Withdraw remains active.\r\n    */\r\n    function pauseDeposit(bool _pause) public onlyOwner {\r\n        depositPaused = _pause;\r\n      }\r\n  \r\n    \r\n    function launchStaking() public onlyOwner {\r\n        require(!stakingLaunched, \"Staking has been launched already\");\r\n        stakingLaunched = true;\r\n        // acceleratedYield = block.timestamp + (SECONDS_IN_DAY * HARDSTAKE_YIELD_PERDAY);\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns(bytes4){\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wukong\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingStartPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HARDSTAKE_YIELD_PERDAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PASSIVESTAKE_YIELD_PERDAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WukongNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAuth\",\"type\":\"address\"}],\"name\":\"authorise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorisedLog\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getAccumulatedHardStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAccumulatedPassiveStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getHardStakingTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"hardMultiStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"hardStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHardStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unHardMultiStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unHardStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToUnAuth\",\"type\":\"address\"}],\"name\":\"unauthorise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WukongStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007c1d5e50531a625764fe6ea809375c0c216ef0ba0000000000000000000000000000000000000000000000000000000062391f90", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec22f3db55f7b9ce0f716cbccc65fb6405e559c7cf4019ac274dcfede36fd4fa"}