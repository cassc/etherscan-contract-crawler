{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/GigaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n *    GigaToken\\n *    Utility Token of the Gigaconomy, powering GigaBots!\\n *\\n *    Website: https://www.gigabots.ai\\n *    Twitter: https://twitter.com/gigabots_ai\\n *    Telegram: https://t.me/GigaBotsCommunity\\n *    Bot: https://t.me/OfficialGigaTraderBot\\n *\\n */\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IUniswapV2Router} from \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport {IUniswapV2Factory} from \\\"./interfaces/IUniswapV2Factory.sol\\\";\\n\\n/**\\n * @title GigaToken\\n * @author GigaDev\\n * @notice This contract represents the GigaToken ERC20 token.\\n * It inherits from ERC20, ERC20Burnable, and Ownable contracts from OpenZeppelin.\\n * @custom:security-contact gigadev@gigabots.ai\\n */\\ncontract GigaToken is ERC20, ERC20Burnable, Ownable {\\n    address public marketingWallet;\\n    address public operationsWallet;\\n\\n    uint8 public buyFee = 50;\\n    uint8 public sellFee = 50;\\n\\n    uint8 public liquidityFeePercent = 20;\\n    uint8 public marketingFeePercent = 20;\\n    uint8 public operationsFeePercent = 60;\\n\\n    uint256 public swapTokensAtAmount = 50_000 * 1e18; // 0.05% of TS\\n    bool private _distributingFees;\\n\\n    mapping(address => bool) private _excludedFromFees;\\n\\n    bool public limitsInEffect = true;\\n    uint256 public maxWalletBalance = 1_000_000 * 1e18; // 1% of TS\\n    uint256 public maxTransactionAmount = 1_000_000 * 1e18; // 1% of TS\\n    mapping(address => bool) private _excludedFromMaxTransaction;\\n\\n    address public immutable uniV2Pair;\\n    mapping(address => bool) public ammPairs;\\n    IUniswapV2Router public constant uniV2Router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    bool public tradingEnabled;\\n\\n    event LimitsRemoved();\\n    event TradingEnabled();\\n    event BuyFeeSet(uint8 newBuyFee);\\n    event SellFeeSet(uint8 newSellFee);\\n    event AMMPairSet(address pair, bool isSet);\\n    event MarketingWalletUpdated(address newAddress);\\n    event OperationsWalletUpdated(address newAddress);\\n    event MaxWalletBalanceUpdated(uint256 newMaxWalletBalance);\\n    event MaxTransactionAmountUpdated(uint256 newMaxTransactionAmount);\\n    event SwapTokensAtAmountSet(uint256 newSwapTokensAtAmount);\\n    event FeesDistributionSet(\\n        uint8 newLiquidityFeePercent, uint8 newMarketingFeePercent, uint8 newOperationsFeePercent\\n    );\\n    event FeesDistributed(\\n        uint256 totalTokensDistributed,\\n        uint256 tokensToLiquidity,\\n        uint256 ethToLiquidity,\\n        uint256 ethToMarketing,\\n        uint256 ethToOperations\\n    );\\n\\n    /**\\n     * @notice Constructor function for the GigaToken contract.\\n     * It initializes the contract by setting the token name and symbol,\\n     * creates a Uniswap V2 pair for the token, sets initial values for marketing and operations wallets and\\n     * mints total token supply.\\n     * It also approves the Uniswap V2 router to spend an unlimited amount of tokens on behalf of the contract.\\n     */\\n    constructor() ERC20(\\\"GigaToken\\\", \\\"GIGA\\\") {\\n        uniV2Pair = IUniswapV2Factory(uniV2Router.factory()).createPair(address(this), uniV2Router.WETH());\\n        ammPairs[uniV2Pair] = true;\\n        _excludedFromMaxTransaction[uniV2Pair] = true;\\n\\n        _excludedFromFees[owner()] = true;\\n        marketingWallet = owner();\\n        operationsWallet = owner();\\n\\n        _mint(owner(), 100_000_000 * 1e18);\\n\\n        _approve(address(this), address(uniV2Router), type(uint256).max);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice This function is used to transfer tokens internally within the contract.\\n     * It performs various checks such as trading enablement, maximum transaction and balance limits,\\n     * fee distribution, and fee deduction.\\n     * It then calls the _transfer function from the parent contract to perform the actual token transfer.\\n     * @param from The address to transfer tokens from.\\n     * @param to The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal override {\\n        require(amount > 0, \\\"GigaToken: transfer amount must be greater than 0\\\");\\n\\n        // Check if trading has been enabled\\n        if (!tradingEnabled) {\\n            require(from == owner() || to == owner(), \\\"GigaToken: trading has not been enabled yet\\\");\\n        }\\n\\n        // Max TX and Max Balance Limits\\n        if (limitsInEffect) {\\n            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !_distributingFees) {\\n                // On Buys\\n                if (ammPairs[from] && !_excludedFromMaxTransaction[to]) {\\n                    require(amount <= maxTransactionAmount, \\\"GigaToken: amount exceeds max transaction amount\\\");\\n                    require(\\n                        amount + balanceOf(to) <= maxWalletBalance, \\\"GigaToken: balance would exceed max wallet balance\\\"\\n                    );\\n                }\\n                // On Sells\\n                else if (ammPairs[to] && !_excludedFromMaxTransaction[from]) {\\n                    require(amount <= maxTransactionAmount, \\\"GigaToken: amount exceeds max transaction amount\\\");\\n                }\\n                // On Transfers to non-excluded \\\"to\\\" address\\n                else if (!_excludedFromMaxTransaction[to]) {\\n                    require(\\n                        amount + balanceOf(to) <= maxWalletBalance, \\\"GigaToken: balance would exceed max wallet balance\\\"\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Swap any tokens held as fees for ETH and distribute\\n        bool shouldSwap = balanceOf(address(this)) >= swapTokensAtAmount;\\n        if (shouldSwap && !_distributingFees && !ammPairs[from] && !_excludedFromFees[from] && !_excludedFromFees[to]) {\\n            _distributingFees = true;\\n            _distributeFees();\\n            _distributingFees = false;\\n        }\\n\\n        // Determine if we should take fees\\n        bool takeFees = !_distributingFees;\\n        if (_excludedFromFees[from] || _excludedFromFees[to]) {\\n            takeFees = false;\\n        }\\n\\n        uint256 fees = 0;\\n        // Take Fees if necessary\\n        if (takeFees) {\\n            // Fees on buys\\n            if (ammPairs[from] && buyFee > 0) {\\n                fees = (amount * buyFee) / 1_000;\\n            }\\n            // Fees on sells\\n            else if (ammPairs[to] && sellFee > 0) {\\n                fees = (amount * sellFee) / 1_000;\\n            }\\n\\n            // If there are fees to be taken, transfer and substract from amount\\n            if (fees > 0) {\\n                super._transfer(from, address(this), fees);\\n                amount -= fees;\\n            }\\n        }\\n\\n        // Make final transfer\\n        super._transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Distributes fees collected by the contract.\\n     * The function calculates the amount of fees to distribute based on the balance of the contract.\\n     * It then swaps a portion of the fees for ETH and adds liquidity to the token.\\n     * The remaining ETH is distributed to the marketing and operations wallets.\\n     * @dev Emits a `FeesDistributed` event with the details of the distribution.\\n     */\\n    function _distributeFees() private {\\n        // Determine amount of held fees to distribute\\n        uint256 tokensToDistribute = balanceOf(address(this));\\n        if (tokensToDistribute > swapTokensAtAmount * 20) {\\n            tokensToDistribute = swapTokensAtAmount * 20;\\n        }\\n\\n        // Calculate how many tokens we should swap for ETH (some will be used for liquidity)\\n        uint256 tokensForLiquidityHalf = ((tokensToDistribute * liquidityFeePercent) / 100) / 2;\\n        uint256 tokensToSwapForEth = tokensToDistribute - tokensForLiquidityHalf;\\n\\n        // Swap tokens for ETH\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniV2Router.WETH();\\n        try uniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokensToSwapForEth, 0, path, address(this), block.timestamp\\n        ) {} catch {}\\n\\n        // Distribute ETH and add liquidity\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > 0) {\\n            // Add Liquidity\\n            uint256 ethForLiquidity = (ethBalance * tokensForLiquidityHalf) / tokensToSwapForEth;\\n            if (ethForLiquidity > 0) {\\n                try uniV2Router.addLiquidityETH{value: ethForLiquidity}(\\n                    address(this), tokensForLiquidityHalf, 0, 0, address(0), block.timestamp\\n                ) {} catch {}\\n            }\\n\\n            bool success;\\n\\n            // Send ETH to Marketing\\n            uint256 tokensForMarketing = (tokensToDistribute * marketingFeePercent) / 100;\\n            uint256 ethForMarketing = (ethBalance * tokensForMarketing) / tokensToSwapForEth;\\n            if (ethForMarketing > 0) {\\n                (success,) = marketingWallet.call{value: ethForMarketing}(\\\"\\\");\\n            }\\n\\n            // Send ETH to Operations\\n            uint256 ethForOperations = 0;\\n            if (operationsFeePercent != 0) {\\n                ethForOperations = address(this).balance;\\n                (success,) = operationsWallet.call{value: ethForOperations}(\\\"\\\");\\n            }\\n\\n            emit FeesDistributed(\\n                tokensToDistribute, tokensForLiquidityHalf, ethForLiquidity, ethForMarketing, ethForOperations\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether the specified account is excluded from fees.\\n     * @param account The address to check.\\n     * @return A boolean indicating whether the account is excluded from fees.\\n     */\\n    function isExcludedFromFees(address account) public view returns (bool) {\\n        return _excludedFromFees[account];\\n    }\\n\\n    /**\\n     * @notice Returns whether the specified account is excluded from the maximum transaction limit.\\n     * @param account The address to check.\\n     * @return A boolean indicating whether the account is excluded from the maximum transaction limit.\\n     */\\n    function isExcludedFromMaxTransaction(address account) public view returns (bool) {\\n        return _excludedFromMaxTransaction[account];\\n    }\\n\\n    /**\\n     * @notice Enables trading of the token.\\n     * @dev Can only be called by the contract owner.\\n     * @dev Emits a `TradingEnabled` event.\\n     */\\n    function enableTrading() external onlyOwner {\\n        tradingEnabled = true;\\n        emit TradingEnabled();\\n    }\\n\\n    /**\\n     * @notice Updates the marketing wallet address.\\n     * @param newAddress The new address for the marketing wallet.\\n     * @dev Can only be called by the contract owner.\\n     * @dev `newAddress` cannot be the zero address.\\n     * @dev Emits a `MarketingWalletUpdated` event.\\n     */\\n    function updateMarketingWallet(address newAddress) external onlyOwner {\\n        require(newAddress != address(0), \\\"GigaToken: address cannot be 0 address\\\");\\n        marketingWallet = newAddress;\\n        emit MarketingWalletUpdated(newAddress);\\n    }\\n\\n    /**\\n     * @notice Updates the operations wallet address.\\n     * @param newAddress The new address to set as the operations wallet.\\n     * @dev Can only be called by the contract owner.\\n     * @dev `newAddress` cannot be the zero address.\\n     * @dev Emits a `OperationsWalletUpdated` event.\\n     */\\n    function updateOperationsWallet(address newAddress) external onlyOwner {\\n        require(newAddress != address(0), \\\"GigaToken: address cannot be 0 address\\\");\\n        operationsWallet = newAddress;\\n        emit OperationsWalletUpdated(newAddress);\\n    }\\n\\n    /**\\n     * @notice Removes the max transcation and max wallet balance limits on the token.\\n     * @dev Can only be called by the contract owner.\\n     * @dev Once turned off, the limits cannot be turned back on.\\n     * @dev Emits a `LimitsRemoved` event.\\n     */\\n    function removeLimits() external onlyOwner {\\n        limitsInEffect = false;\\n        emit LimitsRemoved();\\n    }\\n\\n    /**\\n     * @notice Sets the amount of tokens required for a fee tokens swap.\\n     * @param newSwapTokensAtAmount The new amount of tokens required for a swap.\\n     * @dev Can only be called by the contract owner.\\n     * @dev The newSwapTokensAtAmount must be greater than or equal to 0.001% of the total supply,\\n     * and less than or equal to 0.5% of the total supply.\\n     * @dev Emits a `SwapTokensAtAmountSet` event.\\n     */\\n    function setSwapTokensAtAmount(uint256 newSwapTokensAtAmount) external onlyOwner {\\n        require(\\n            newSwapTokensAtAmount >= totalSupply() / 100_000,\\n            \\\"GigaToken: swap tokens at amount cannot be lower than 0.001% of total supply\\\"\\n        );\\n        require(\\n            newSwapTokensAtAmount <= (totalSupply() * 5) / 1_000,\\n            \\\"GigaToken: swap tokens at amount cannot be higher than 0.5% of total supply\\\"\\n        );\\n        swapTokensAtAmount = newSwapTokensAtAmount;\\n        emit SwapTokensAtAmountSet(newSwapTokensAtAmount);\\n    }\\n\\n    /**\\n     * @notice Sets the buy fee for GigaToken.\\n     * @param newBuyFee The new buy fee to be set.\\n     * @dev Can only be called by the contract owner.\\n     * @dev The new buy fee cannot be greater than 50 (5%).\\n     * @dev Emits a `BuyFeeSet` event.\\n     */\\n    function setBuyFee(uint8 newBuyFee) external onlyOwner {\\n        require(newBuyFee <= 50, \\\"GigaToken: fee cannot be greater than 5%\\\");\\n        buyFee = newBuyFee;\\n        emit BuyFeeSet(newBuyFee);\\n    }\\n\\n    /**\\n     * @notice Sets the sell fee for GigaToken.\\n     * @param newSellFee The new sell fee to be set.\\n     * @dev Can only be called by the contract owner.\\n     * @dev The new sell fee cannot be greater than 50 (5%).\\n     * @dev Emits a `SellFeeSet` event.\\n     */\\n    function setSellFee(uint8 newSellFee) external onlyOwner {\\n        require(newSellFee <= 50, \\\"GigaToken: fee cannot be greater than 5%\\\");\\n        sellFee = newSellFee;\\n        emit SellFeeSet(newSellFee);\\n    }\\n\\n    /**\\n     * @notice Sets the fees distribution for the GigaToken contract.\\n     * @param newLiquidityFeePercent The new percentage of fees allocated to liquidity.\\n     * @param newMarketingFeePercent The new percentage of fees allocated to marketing.\\n     * @param newOperationsFeePercent The new percentage of fees allocated to operations.\\n     * @dev Can only be called by the contract owner.\\n     * @dev The sum of `newLiquidityFeePercent`, `newMarketingFeePercent`, and `newOperationsFeePercent` must equal 100.\\n     * @dev Emits a `FeesDistributionSet` event.\\n     */\\n    function setFeesDistribution(\\n        uint8 newLiquidityFeePercent,\\n        uint8 newMarketingFeePercent,\\n        uint8 newOperationsFeePercent\\n    ) external onlyOwner {\\n        require(\\n            newLiquidityFeePercent + newMarketingFeePercent + newOperationsFeePercent == 100,\\n            \\\"GigaToken: fees distribution total must equal 100\\\"\\n        );\\n        liquidityFeePercent = newLiquidityFeePercent;\\n        marketingFeePercent = newMarketingFeePercent;\\n        operationsFeePercent = newOperationsFeePercent;\\n        emit FeesDistributionSet(newLiquidityFeePercent, newMarketingFeePercent, newOperationsFeePercent);\\n    }\\n\\n    /**\\n     * @notice Updates the maximum transaction amount allowed.\\n     * @dev Only the contract owner can call this function.\\n     * @dev `newMaxTransactionAmount` must be greater than or equal to 0.1% of the total supply.\\n     * @dev Emits a `MaxTransactionAmountUpdated` event.\\n     */\\n    function updateMaxTransactionAmount(uint256 newMaxTransactionAmount) external onlyOwner {\\n        require(\\n            newMaxTransactionAmount >= totalSupply() / 1_000,\\n            \\\"GigaToken: cannot set max transaction amount below 0.1% of totalSupply\\\"\\n        );\\n        maxTransactionAmount = newMaxTransactionAmount;\\n        emit MaxTransactionAmountUpdated(newMaxTransactionAmount);\\n    }\\n\\n    /**\\n     * @notice Updates the maximum wallet balance allowed for token holders.\\n     * @param newMaxWalletBalance The new maximum wallet balance to be set.\\n     * @dev Only the contract owner can call this function.\\n     * @dev The new maximum wallet balance must be greater than or equal to 0.1% of the total supply.\\n     * @dev Emits a `MaxWalletBalanceUpdated` event.\\n     */\\n    function updateMaxWalletBalance(uint256 newMaxWalletBalance) external onlyOwner {\\n        require(\\n            newMaxWalletBalance >= totalSupply() / 1_000,\\n            \\\"GigaToken: cannot set max wallet balance below 0.1% of totalSupply\\\"\\n        );\\n        maxWalletBalance = newMaxWalletBalance;\\n        emit MaxWalletBalanceUpdated(newMaxWalletBalance);\\n    }\\n\\n    /**\\n     * @notice Sets the excluded status of an account from fees.\\n     * @param account The address of the account.\\n     * @param excluded The excluded status to be set.\\n     * @dev Only the contract owner can call this function.\\n     */\\n    function setExcludedFromFees(address account, bool excluded) external onlyOwner {\\n        _excludedFromFees[account] = excluded;\\n    }\\n\\n    /**\\n     * @notice Sets whether an account is excluded from the maximum transaction limit.\\n     * @param account The address of the account to be excluded or included.\\n     * @param excluded A boolean indicating whether the account should be excluded or included.\\n     * @dev Only the contract owner can call this function.\\n     */\\n    function setExcludedFromMaxTransaction(address account, bool excluded) external onlyOwner {\\n        _excludedFromMaxTransaction[account] = excluded;\\n    }\\n\\n    /**\\n     * @notice Sets the AMM pair for the GigaToken contract.\\n     * @param pair The address of the AMM pair.\\n     * @param isSet A boolean indicating whether the pair is set or not.\\n     * @dev Only the contract owner can call this function.\\n     * @dev The original uniV2Pair cannot be altered.\\n     * @dev Emits an `AMMPairSet` event.\\n     */\\n    function setAMMPair(address pair, bool isSet) external onlyOwner {\\n        require(pair != uniV2Pair, \\\"GigaToken: original uniV2Pair cannot be altered\\\");\\n        ammPairs[pair] = isSet;\\n        emit AMMPairSet(pair, isSet);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AMMPairSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newBuyFee\",\"type\":\"uint8\"}],\"name\":\"BuyFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokensDistributed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToMarketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethToOperations\",\"type\":\"uint256\"}],\"name\":\"FeesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newLiquidityFeePercent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newMarketingFeePercent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newOperationsFeePercent\",\"type\":\"uint8\"}],\"name\":\"FeesDistributionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWalletBalance\",\"type\":\"uint256\"}],\"name\":\"MaxWalletBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"OperationsWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newSellFee\",\"type\":\"uint8\"}],\"name\":\"SellFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"SwapTokensAtAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsFeePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"setAMMPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyFee\",\"type\":\"uint8\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newLiquidityFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newMarketingFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newOperationsFeePercent\",\"type\":\"uint8\"}],\"name\":\"setFeesDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newSellFee\",\"type\":\"uint8\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWalletBalance\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateOperationsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GigaToken", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}