{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SDUtilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport './library/UtilLib.sol';\\nimport './interfaces/IStaderConfig.sol';\\nimport './interfaces/ISDIncentiveController.sol';\\nimport './interfaces/ISDUtilityPool.sol';\\nimport './interfaces/SDCollateral/ISDCollateral.sol';\\nimport './interfaces/IPoolUtils.sol';\\nimport './interfaces/IOperatorRewardsCollector.sol';\\n\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\ncontract SDUtilityPool is ISDUtilityPool, AccessControlUpgradeable, PausableUpgradeable {\\n    using Math for uint256;\\n\\n    uint256 public constant DECIMAL = 1e18;\\n\\n    uint256 public constant MIN_SD_DELEGATE_LIMIT = 1e15;\\n\\n    uint256 public constant MIN_SD_WITHDRAW_LIMIT = 1e12;\\n\\n    uint256 public constant MAX_UTILIZATION_RATE_PER_BLOCK = 95129375951; // 25 % APR\\n\\n    uint256 public constant MAX_PROTOCOL_FEE = 1e17; // 10%\\n\\n    // State variables\\n\\n    /// @notice Percentage of protocol fee expressed in gwei\\n    uint256 public protocolFee;\\n\\n    /// @notice Block number that fee was last accrued at\\n    uint256 public accrualBlockNumber;\\n\\n    /// @notice Accumulator of the total earned interest rate since start of pool\\n    uint256 public utilizeIndex;\\n\\n    /// @notice Total amount of outstanding SD utilized\\n    uint256 public totalUtilizedSD;\\n\\n    /// @notice Total amount of protocol fee\\n    uint256 public accumulatedProtocolFee;\\n\\n    /// @notice utilization rate per block\\n    uint256 public utilizationRatePerBlock;\\n\\n    /// @notice value of cToken supply\\n    uint256 public cTokenTotalSupply;\\n\\n    /// @notice upper cap on ETH worth of SD utilized per validator\\n    uint256 public maxETHWorthOfSDPerValidator;\\n\\n    /// @notice request ID to be finalized next\\n    uint256 public nextRequestIdToFinalize;\\n\\n    /// @notice request ID to be assigned to a next withdraw request\\n    uint256 public nextRequestId;\\n\\n    /// @notice amount of SD requested for withdraw\\n    uint256 public sdRequestedForWithdraw;\\n\\n    /// @notice batch limit on withdraw requests to be finalized in single txn\\n    uint256 public finalizationBatchLimit;\\n\\n    /// @notice amount of SD reserved for claim request\\n    uint256 public sdReservedForClaim;\\n\\n    /// @notice minimum block delay between requesting for withdraw and finalization of request\\n    uint256 public minBlockDelayToFinalizeRequest;\\n\\n    /// @notice upper cap on user non redeemed withdraw request count\\n    uint256 public maxNonRedeemedDelegatorRequestCount;\\n\\n    /// @notice address of staderConfig contract\\n    IStaderConfig public staderConfig;\\n\\n    /// @notice risk configuration\\n    RiskConfig public riskConfig;\\n\\n    /// @notice chronological collection of liquidations\\n    OperatorLiquidation[] public liquidations;\\n\\n    // Mappings\\n    mapping(address => UtilizerStruct) public override utilizerData;\\n    mapping(address => uint256) public override delegatorCTokenBalance;\\n    mapping(address => uint256) public override delegatorWithdrawRequestedCTokenCount;\\n\\n    mapping(uint256 => DelegatorWithdrawInfo) public override delegatorWithdrawRequests;\\n    mapping(address => uint256[]) public override requestIdsByDelegatorAddress;\\n    mapping(address => uint256) public override liquidationIndexByOperator;\\n\\n    uint256 public conservativeEthPerKey;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _admin, address _staderConfig) external initializer {\\n        UtilLib.checkNonZeroAddress(_admin);\\n        UtilLib.checkNonZeroAddress(_staderConfig);\\n        __AccessControl_init_unchained();\\n        __Pausable_init();\\n        staderConfig = IStaderConfig(_staderConfig);\\n        utilizeIndex = DECIMAL;\\n        utilizationRatePerBlock = 38051750380; // 10% APR\\n        protocolFee = 0;\\n        nextRequestId = 1;\\n        nextRequestIdToFinalize = 1;\\n        finalizationBatchLimit = 50;\\n        accrualBlockNumber = block.number;\\n        minBlockDelayToFinalizeRequest = 50400; //7 days\\n        maxNonRedeemedDelegatorRequestCount = 1000;\\n        maxETHWorthOfSDPerValidator = 1 ether;\\n        conservativeEthPerKey = 2 ether;\\n        _updateRiskConfig(70, 30, 5, 50);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        //delegate SD during initialization to avoid price inflation of cTokenShare\\n        _delegate(1 ether);\\n        emit UpdatedStaderConfig(_staderConfig);\\n    }\\n\\n    /**\\n     * @notice Sender delegate SD and cToken balance increases for sender\\n     * @dev Accrues fee whether or not the operation succeeds, unless reverted\\n     * @param sdAmount The amount of SD token to delegate\\n     */\\n    function delegate(uint256 sdAmount) external override whenNotPaused {\\n        if (sdAmount < MIN_SD_DELEGATE_LIMIT) {\\n            revert InvalidInput();\\n        }\\n        accrueFee();\\n        ISDIncentiveController(staderConfig.getSDIncentiveController()).updateRewardForAccount(msg.sender);\\n        _delegate(sdAmount);\\n    }\\n\\n    /**\\n     * @notice auxiliary method to put a withdrawal request, takes in cToken amount as input\\n     * @dev use this function to withdraw all SD from pool, pass delegatorCTokenBalance in the input for such cases\\n     * @param _cTokenAmount amount of cToken\\n     * @return _requestId generated request ID for withdrawal\\n     */\\n    function requestWithdraw(uint256 _cTokenAmount) external override whenNotPaused returns (uint256 _requestId) {\\n        if (_cTokenAmount > delegatorCTokenBalance[msg.sender]) {\\n            revert InvalidAmountOfWithdraw();\\n        }\\n        accrueFee();\\n        uint256 exchangeRate = _exchangeRateStored();\\n        delegatorCTokenBalance[msg.sender] -= _cTokenAmount;\\n        delegatorWithdrawRequestedCTokenCount[msg.sender] += _cTokenAmount;\\n        uint256 sdRequested = (exchangeRate * _cTokenAmount) / DECIMAL;\\n        if (sdRequested < MIN_SD_WITHDRAW_LIMIT) {\\n            revert InvalidInput();\\n        }\\n        _requestId = _requestWithdraw(sdRequested, _cTokenAmount);\\n    }\\n\\n    /**\\n     * @notice auxiliary method to put a withdrawal request, takes SD amount as input\\n     * @dev this function is not recommended to withdraw all balance as due to some elapsed block\\n     * between calculating getDelegatorLatestSDBalance and then executing this function, some more SD rewards\\n     * might accumulate, use 'requestWithdraw' function in such case by passing delegatorCTokenBalance in the input\\n     * @param _sdAmount amount of SD to withdraw\\n     * @return _requestId generated request ID for withdrawal\\n     */\\n    function requestWithdrawWithSDAmount(uint256 _sdAmount)\\n        external\\n        override\\n        whenNotPaused\\n        returns (uint256 _requestId)\\n    {\\n        if (_sdAmount < MIN_SD_WITHDRAW_LIMIT) {\\n            revert InvalidInput();\\n        }\\n        accrueFee();\\n        uint256 exchangeRate = _exchangeRateStored();\\n        uint256 cTokenToReduce = Math.ceilDiv((_sdAmount * DECIMAL), exchangeRate);\\n        if (cTokenToReduce > delegatorCTokenBalance[msg.sender]) {\\n            revert InvalidAmountOfWithdraw();\\n        }\\n        delegatorCTokenBalance[msg.sender] -= cTokenToReduce;\\n        delegatorWithdrawRequestedCTokenCount[msg.sender] += cTokenToReduce;\\n        _requestId = _requestWithdraw(_sdAmount, cTokenToReduce);\\n    }\\n\\n    /**\\n     * @notice finalize delegator's withdraw requests\\n     */\\n    function finalizeDelegatorWithdrawalRequest() external override whenNotPaused {\\n        accrueFee();\\n        uint256 exchangeRate = _exchangeRateStored();\\n        uint256 maxRequestIdToFinalize = Math.min(nextRequestId, nextRequestIdToFinalize + finalizationBatchLimit);\\n        uint256 requestId;\\n        uint256 sdToReserveToFinalizeRequests;\\n        for (requestId = nextRequestIdToFinalize; requestId < maxRequestIdToFinalize; ) {\\n            DelegatorWithdrawInfo memory delegatorWithdrawInfo = delegatorWithdrawRequests[requestId];\\n            uint256 requiredSD = delegatorWithdrawInfo.sdExpected;\\n            uint256 amountOfcToken = delegatorWithdrawInfo.amountOfCToken;\\n            uint256 minSDRequiredToFinalizeRequest = Math.min(requiredSD, (amountOfcToken * exchangeRate) / DECIMAL);\\n            if (\\n                (sdToReserveToFinalizeRequests + minSDRequiredToFinalizeRequest + accumulatedProtocolFee >\\n                    getPoolAvailableSDBalance()) ||\\n                (delegatorWithdrawInfo.requestBlock + minBlockDelayToFinalizeRequest > block.number)\\n            ) {\\n                break;\\n            }\\n            ISDIncentiveController(staderConfig.getSDIncentiveController()).updateRewardForAccount(\\n                delegatorWithdrawInfo.owner\\n            );\\n            delegatorWithdrawRequests[requestId].sdFinalized = minSDRequiredToFinalizeRequest;\\n            sdRequestedForWithdraw -= requiredSD;\\n            sdToReserveToFinalizeRequests += minSDRequiredToFinalizeRequest;\\n            delegatorWithdrawRequestedCTokenCount[delegatorWithdrawInfo.owner] -= amountOfcToken;\\n            cTokenTotalSupply -= amountOfcToken;\\n            unchecked {\\n                ++requestId;\\n            }\\n        }\\n        nextRequestIdToFinalize = requestId;\\n        sdReservedForClaim += sdToReserveToFinalizeRequests;\\n        emit FinalizedWithdrawRequest(nextRequestIdToFinalize);\\n    }\\n\\n    /**\\n     * @notice transfer the SD of finalized request to recipient and delete the request\\n     * @param _requestId request id to claim\\n     */\\n    function claim(uint256 _requestId) external override whenNotPaused {\\n        if (_requestId >= nextRequestIdToFinalize) {\\n            revert RequestIdNotFinalized(_requestId);\\n        }\\n        DelegatorWithdrawInfo memory delegatorRequest = delegatorWithdrawRequests[_requestId];\\n        if (msg.sender != delegatorRequest.owner) {\\n            revert CallerNotAuthorizedToRedeem();\\n        }\\n        uint256 sdToTransfer = delegatorRequest.sdFinalized;\\n        sdReservedForClaim -= sdToTransfer;\\n        _deleteRequestId(_requestId);\\n        ISDIncentiveController(staderConfig.getSDIncentiveController()).claim(msg.sender);\\n        if (!IERC20(staderConfig.getStaderToken()).transfer(msg.sender, sdToTransfer)) {\\n            revert SDTransferFailed();\\n        }\\n        emit RequestRedeemed(msg.sender, sdToTransfer);\\n    }\\n\\n    /**\\n     * @notice Sender utilizes SD from the pool to add it as collateral to run validators\\n     * @param utilizeAmount The amount of the SD token to utilize\\n     */\\n    function utilize(uint256 utilizeAmount) external override whenNotPaused {\\n        ISDCollateral sdCollateral = ISDCollateral(staderConfig.getSDCollateral());\\n        (, , uint256 nonTerminalKeyCount) = sdCollateral.getOperatorInfo(msg.sender);\\n        uint256 currentUtilizedSDCollateral = sdCollateral.operatorUtilizedSDBalance(msg.sender);\\n        uint256 maxSDUtilizeValue = nonTerminalKeyCount * sdCollateral.convertETHToSD(maxETHWorthOfSDPerValidator);\\n        if (currentUtilizedSDCollateral + utilizeAmount > maxSDUtilizeValue) {\\n            revert SDUtilizeLimitReached();\\n        }\\n        accrueFee();\\n        _utilize(msg.sender, utilizeAmount);\\n    }\\n\\n    /**\\n     * @notice utilize SD from the pool to add it as collateral for `operator` to run validators\\n     * @dev only permissionless node registry contract can call\\n     * @param operator address of an ETHx operator\\n     * @param utilizeAmount The amount of the SD token to utilize\\n     * @param nonTerminalKeyCount count of operator's non terminal keys\\n     *\\n     */\\n    function utilizeWhileAddingKeys(\\n        address operator,\\n        uint256 utilizeAmount,\\n        uint256 nonTerminalKeyCount\\n    ) external override whenNotPaused {\\n        UtilLib.onlyStaderContract(msg.sender, staderConfig, staderConfig.PERMISSIONLESS_NODE_REGISTRY());\\n        ISDCollateral sdCollateral = ISDCollateral(staderConfig.getSDCollateral());\\n        uint256 currentUtilizedSDCollateral = sdCollateral.operatorUtilizedSDBalance(operator);\\n        uint256 maxSDUtilizeValue = nonTerminalKeyCount * sdCollateral.convertETHToSD(maxETHWorthOfSDPerValidator);\\n        if (currentUtilizedSDCollateral + utilizeAmount > maxSDUtilizeValue) {\\n            revert SDUtilizeLimitReached();\\n        }\\n        accrueFee();\\n        _utilize(operator, utilizeAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays their utilized SD, returns actual repayment amount\\n     * @param repayAmount The amount to repay\\n     */\\n    function repay(uint256 repayAmount) external whenNotPaused returns (uint256 repaidAmount, uint256 feePaid) {\\n        accrueFee();\\n        (repaidAmount, feePaid) = _repay(msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays on behalf of utilizer, returns actual repayment amount\\n     * @param repayAmount The amount to repay\\n     */\\n    function repayOnBehalf(address utilizer, uint256 repayAmount)\\n        external\\n        override\\n        whenNotPaused\\n        returns (uint256 repaidAmount, uint256 feePaid)\\n    {\\n        accrueFee();\\n        (repaidAmount, feePaid) = _repay(utilizer, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays their full utilized SD position, this function is introduce to help\\n     * utilizer not to worry about calculating exact SD repayment amount for clearing their entire position\\n     */\\n    function repayFullAmount() external override whenNotPaused returns (uint256 repaidAmount, uint256 feePaid) {\\n        accrueFee();\\n        uint256 accountUtilizedPrev = _utilizerBalanceStoredInternal(msg.sender);\\n        (repaidAmount, feePaid) = _repay(msg.sender, accountUtilizedPrev);\\n    }\\n\\n    /**\\n     * @notice call to withdraw protocol fee SD\\n     * @dev only `MANAGER` role can call\\n     * @param _amount amount of protocol fee in SD to withdraw\\n     */\\n    function withdrawProtocolFee(uint256 _amount) external override whenNotPaused {\\n        UtilLib.onlyManagerRole(msg.sender, staderConfig);\\n        accrueFee();\\n        if (_amount > accumulatedProtocolFee || _amount > getPoolAvailableSDBalance()) {\\n            revert InvalidWithdrawAmount();\\n        }\\n        accumulatedProtocolFee -= _amount;\\n        if (!IERC20(staderConfig.getStaderToken()).transfer(staderConfig.getStaderTreasury(), _amount)) {\\n            revert SDTransferFailed();\\n        }\\n        emit WithdrawnProtocolFee(_amount);\\n    }\\n\\n    /// @notice for max approval to SD collateral contract for spending SD tokens\\n    function maxApproveSD() external override whenNotPaused {\\n        UtilLib.onlyManagerRole(msg.sender, staderConfig);\\n        address sdCollateral = staderConfig.getSDCollateral();\\n        UtilLib.checkNonZeroAddress(sdCollateral);\\n        IERC20(staderConfig.getStaderToken()).approve(sdCollateral, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Applies accrued fee to total utilized and protocolFees\\n     * @dev This calculates fee accrued from the last check pointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueFee() public override whenNotPaused {\\n        /* Remember the initial block number */\\n        uint256 currentBlockNumber = block.number;\\n\\n        /* Short-circuit accumulating 0 fee */\\n        if (accrualBlockNumber == currentBlockNumber) {\\n            return;\\n        }\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumber;\\n\\n        /*\\n         * Calculate the fee accumulated into utilized and totalProtocolFee and the new index:\\n         *  simpleFeeFactor = utilizationRate * blockDelta\\n         *  feeAccumulated = simpleFeeFactor * totalUtilizedSD\\n         *  totalUtilizedSDNew = feeAccumulated + totalUtilizedSD\\n         *  totalProtocolFeeNew = feeAccumulated * protocolFeeFactor + totalProtocolFee\\n         *  utilizeIndexNew = simpleFeeFactor * utilizeIndex + utilizeIndex\\n         */\\n\\n        uint256 simpleFeeFactor = utilizationRatePerBlock * blockDelta;\\n        uint256 feeAccumulated = (simpleFeeFactor * totalUtilizedSD) / DECIMAL;\\n        totalUtilizedSD += feeAccumulated;\\n        accumulatedProtocolFee += (protocolFee * feeAccumulated) / DECIMAL;\\n        utilizeIndex += Math.ceilDiv((simpleFeeFactor * utilizeIndex), DECIMAL);\\n\\n        accrualBlockNumber = currentBlockNumber;\\n\\n        emit AccruedFees(feeAccumulated, accumulatedProtocolFee, totalUtilizedSD);\\n    }\\n\\n    /**\\n     * @notice Initiates the liquidation process for an account if its health factor is below the required threshold.\\n     * @dev The function checks the health factor, accrues fees, updates utilized indices, and calculates liquidation amounts.\\n     *      It's important to note that this liquidation process does not touch the operator's self-bonded SD tokens,\\n     *      even if they could potentially be used for repayment.\\n     * @param account The address of the account to be liquidated\\n     */\\n    function liquidationCall(address account) external override whenNotPaused {\\n        if (liquidationIndexByOperator[account] != 0) revert AlreadyLiquidated();\\n\\n        accrueFee();\\n        UserData memory userData = getUserData(account);\\n\\n        if (userData.healthFactor > DECIMAL) {\\n            revert NotLiquidatable();\\n        }\\n\\n        _repay(account, userData.totalInterestSD);\\n\\n        uint256 totalInterestInEth = ISDCollateral(staderConfig.getSDCollateral()).convertSDToETH(\\n            userData.totalInterestSD\\n        );\\n        uint256 liquidationBonusInEth = (totalInterestInEth * riskConfig.liquidationBonusPercent) / 100;\\n        uint256 liquidationFeeInEth = (totalInterestInEth * riskConfig.liquidationFeePercent) / 100;\\n        uint256 totalLiquidationAmountInEth = totalInterestInEth + liquidationBonusInEth + liquidationFeeInEth;\\n\\n        OperatorLiquidation memory liquidation = OperatorLiquidation({\\n            totalAmountInEth: totalLiquidationAmountInEth,\\n            totalBonusInEth: liquidationBonusInEth,\\n            totalFeeInEth: liquidationFeeInEth,\\n            isRepaid: false,\\n            isClaimed: false,\\n            liquidator: msg.sender\\n        });\\n        liquidations.push(liquidation);\\n        liquidationIndexByOperator[account] = liquidations.length;\\n\\n        IPoolUtils(staderConfig.getPoolUtils()).processOperatorExit(account, totalLiquidationAmountInEth);\\n\\n        emit LiquidationCall(\\n            account,\\n            totalLiquidationAmountInEth,\\n            liquidationBonusInEth,\\n            liquidationFeeInEth,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice function used to clear utilizer's SD interest position in case when protocol does not have any ETH\\n     * collateral left for SD interest due to all collateral ETH being used as liquidation fee, SD interest in this\\n     * case will be from the moment of liquidationCall and claiming of liquidation\\n     * @dev only ADMIN role can call, SD worth of interest is lost from the protocol\\n     * @dev utilizer utilizedSD balance in SDCollateral contract should be 0\\n     * @param _utilizer array of utilizer addresses\\n     */\\n    function clearUtilizerInterest(address[] calldata _utilizer) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        accrueFee();\\n        uint256 operatorCount = _utilizer.length;\\n        for (uint256 i; i < operatorCount; ) {\\n            address utilizer = _utilizer[i];\\n            if (ISDCollateral(staderConfig.getSDCollateral()).operatorUtilizedSDBalance(utilizer) != 0) {\\n                revert OperatorUtilizedSDBalanceNonZero();\\n            }\\n            uint256 accountUtilizedPrev = _utilizerBalanceStoredInternal(utilizer);\\n\\n            utilizerData[utilizer].principal = 0;\\n            utilizerData[utilizer].utilizeIndex = utilizeIndex;\\n            totalUtilizedSD = totalUtilizedSD > accountUtilizedPrev ? totalUtilizedSD - accountUtilizedPrev : 0;\\n            emit ClearedUtilizerInterest(utilizer, accountUtilizedPrev);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice function used to move utilizedSD from SDCollateral to UtilityPool\\n     * in such a way that utilizedSDBalance in SDCollateral contract becomes 0 and utilizer is left with only SD interest\\n     * @dev only SDCollateral contract can call\\n     */\\n    function repayUtilizedSDBalance(address _utilizer, uint256 amount) external override {\\n        UtilLib.onlyStaderContract(msg.sender, staderConfig, staderConfig.SD_COLLATERAL());\\n        accrueFee();\\n\\n        if (!IERC20(staderConfig.getStaderToken()).transferFrom(msg.sender, address(this), amount)) {\\n            revert SDTransferFailed();\\n        }\\n\\n        uint256 accountUtilizedPrev = _utilizerBalanceStoredInternal(_utilizer);\\n        utilizerData[_utilizer].principal = accountUtilizedPrev - amount;\\n        utilizerData[_utilizer].utilizeIndex = utilizeIndex;\\n        totalUtilizedSD = totalUtilizedSD > amount ? totalUtilizedSD - amount : 0;\\n        emit RepaidUtilizedSDBalance(_utilizer, amount);\\n    }\\n\\n    /**\\n     * @notice Accrue fee to updated utilizeIndex and then calculate account's utilized balance using the updated utilizeIndex\\n     * @param account The address whose balance should be calculated after updating utilizeIndex\\n     * @return The calculated balance\\n     */\\n    function utilizerBalanceCurrent(address account) external override returns (uint256) {\\n        accrueFee();\\n        return _utilizerBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Finishes the liquidation process\\n     * @dev Both liquidator and treasury expected amounts should be transferred already from the Operator Reward Collector\\n     * @param account The operator address\\n     */\\n    function completeLiquidation(address account) external override whenNotPaused {\\n        UtilLib.onlyStaderContract(msg.sender, staderConfig, staderConfig.OPERATOR_REWARD_COLLECTOR());\\n        if (liquidationIndexByOperator[account] == 0) revert InvalidInput();\\n\\n        uint256 liquidationIndex = liquidationIndexByOperator[account];\\n        liquidations[liquidationIndexByOperator[account] - 1].isRepaid = true;\\n        liquidations[liquidationIndexByOperator[account] - 1].isClaimed = true;\\n        liquidationIndexByOperator[account] = 0;\\n\\n        emit CompleteLiquidation(liquidationIndex);\\n    }\\n\\n    /**\\n     * @notice Accrue fee then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() external override returns (uint256) {\\n        accrueFee();\\n        return _exchangeRateStored();\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     * Contract must not be paused\\n     */\\n    function pause() external {\\n        UtilLib.onlyManagerRole(msg.sender, staderConfig);\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * Contract must be paused\\n     */\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    //Setters\\n\\n    /**\\n     * @notice updates protocol fee factor\\n     * @dev only `MANAGER` role can call\\n     * @param _protocolFee value of protocol fee percentage expressed in gwei\\n     */\\n    function updateProtocolFee(uint256 _protocolFee) external override {\\n        UtilLib.onlyManagerRole(msg.sender, staderConfig);\\n        if (_protocolFee > MAX_PROTOCOL_FEE) {\\n            revert InvalidInput();\\n        }\\n        accrueFee();\\n        protocolFee = _protocolFee;\\n        emit ProtocolFeeFactorUpdated(protocolFee);\\n    }\\n\\n    /**\\n     * @notice updates the utilization rate\\n     * @dev only `MANAGER` role can call\\n     * @param _utilizationRatePerBlock new value of utilization rate per block\\n     */\\n    function updateUtilizationRatePerBlock(uint256 _utilizationRatePerBlock) external override {\\n        UtilLib.onlyManagerRole(msg.sender, staderConfig);\\n        if (_utilizationRatePerBlock > MAX_UTILIZATION_RATE_PER_BLOCK) {\\n            revert InvalidInput();\\n        }\\n        accrueFee();\\n        utilizationRatePerBlock = _utilizationRatePerBlock;\\n        emit UtilizationRatePerBlockUpdated(utilizationRatePerBlock);\\n    }\\n\\n    /**\\n     * @notice updates the maximum ETH worth of SD utilized per validator\\n     * @dev only `MANAGER` role can call\\n     * @param _maxETHWorthOfSDPerValidator new value of maximum ETH worth of SD utilized per validator\\n     */\\n    function updateMaxETHWorthOfSDPerValidator(uint256 _maxETHWorthOfSDPerValidator) external override {\\n        UtilLib.onlyManagerRole(msg.sender, staderConfig);\\n        maxETHWorthOfSDPerValidator = _maxETHWorthOfSDPerValidator;\\n        emit UpdatedMaxETHWorthOfSDPerValidator(_maxETHWorthOfSDPerValidator);\\n    }\\n\\n    /**\\n     * @notice updates the batch limit to finalize withdraw request in a single txn\\n     * @dev only `MANAGER` role can call\\n     * @param _finalizationBatchLimit new value of batch limit\\n     */\\n    function updateFinalizationBatchLimit(uint256 _finalizationBatchLimit) external override {\\n        UtilLib.onlyManagerRole(msg.sender, staderConfig);\\n        finalizationBatchLimit = _finalizationBatchLimit;\\n        emit UpdatedFinalizationBatchLimit(finalizationBatchLimit);\\n    }\\n\\n    /**\\n     * @notice updates the value of minimum block delay to finalize withdraw requests\\n     * @dev only `DEFAULT_ADMIN_ROLE` role can call\\n     * @param _minBlockDelayToFinalizeRequest new value of minBlockDelayToFinalizeRequest\\n     */\\n    function updateMinBlockDelayToFinalizeRequest(uint256 _minBlockDelayToFinalizeRequest)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        minBlockDelayToFinalizeRequest = _minBlockDelayToFinalizeRequest;\\n        emit UpdatedMinBlockDelayToFinalizeRequest(minBlockDelayToFinalizeRequest);\\n    }\\n\\n    /**\\n     * @notice updates the value of `maxNonRedeemedDelegatorRequestCount`\\n     * @dev only `ADMIN` role can call\\n     * @param _count new count of maxNonRedeemedDelegatorRequest\\n     */\\n    function updateMaxNonRedeemedDelegatorRequestCount(uint256 _count) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        maxNonRedeemedDelegatorRequestCount = _count;\\n        emit UpdatedMaxNonRedeemedDelegatorRequestCount(_count);\\n    }\\n\\n    /// @notice updates the address of staderConfig\\n    function updateStaderConfig(address _staderConfig) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        UtilLib.checkNonZeroAddress(_staderConfig);\\n        staderConfig = IStaderConfig(_staderConfig);\\n        emit UpdatedStaderConfig(_staderConfig);\\n    }\\n\\n    /// @notice updates the value of conservativeEthPerKey\\n    /// @dev only `ADMIN` role can call\\n    /// @param _newEthPerKey new value of conservativeEthPerKey\\n    function updateConservativeEthPerKey(uint256 _newEthPerKey) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_newEthPerKey == 0) revert InvalidInput();\\n        conservativeEthPerKey = _newEthPerKey;\\n        emit UpdatedConservativeEthPerKey(_newEthPerKey);\\n    }\\n\\n    /**\\n     * @notice Updates the risk configuration\\n     * @param liquidationThreshold The new liquidation threshold percent (1 - 100)\\n     * @param liquidationBonusPercent The new liquidation bonus percent (0 - 100)\\n     * @param liquidationFeePercent The new liquidation fee percent (0 - 100)\\n     * @param ltv The new loan-to-value ratio (1 - 100)\\n     */\\n    function updateRiskConfig(\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonusPercent,\\n        uint256 liquidationFeePercent,\\n        uint256 ltv\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _updateRiskConfig(liquidationThreshold, liquidationBonusPercent, liquidationFeePercent, ltv);\\n    }\\n\\n    //Getters\\n\\n    /// @notice return the list of ongoing withdraw requestIds for a user\\n    function getRequestIdsByDelegator(address _delegator) external view override returns (uint256[] memory) {\\n        return requestIdsByDelegatorAddress[_delegator];\\n    }\\n\\n    /**\\n     * @notice Return the utilized balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function utilizerBalanceStored(address account) external view override returns (uint256) {\\n        return _utilizerBalanceStoredInternal(account);\\n    }\\n\\n    /// @notice Calculates the current delegation rate per block\\n    function getDelegationRatePerBlock() external view override returns (uint256) {\\n        uint256 oneMinusProtocolFeeFactor = DECIMAL - protocolFee;\\n        uint256 rateToPool = (utilizationRatePerBlock * oneMinusProtocolFeeFactor) / DECIMAL;\\n        return (poolUtilization() * rateToPool) / DECIMAL;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate between SD token and corresponding cToken\\n     * @dev This function does not accrue fee before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() external view override returns (uint256) {\\n        return _exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice view function to get utilizer latest utilized balance\\n     * @param _utilizer address of the utilizer\\n     */\\n    function getUtilizerLatestBalance(address _utilizer) public view override returns (uint256) {\\n        uint256 currentBlockNumber = block.number;\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumber;\\n        uint256 simpleFeeFactor = utilizationRatePerBlock * blockDelta;\\n        uint256 utilizeIndexNew = Math.ceilDiv((simpleFeeFactor * utilizeIndex), DECIMAL) + utilizeIndex;\\n        UtilizerStruct storage utilizeSnapshot = utilizerData[_utilizer];\\n\\n        if (utilizeSnapshot.principal == 0) {\\n            return 0;\\n        }\\n        return (utilizeSnapshot.principal * utilizeIndexNew) / utilizeSnapshot.utilizeIndex;\\n    }\\n\\n    /**\\n     * @notice view function to get delegator latest SD balance\\n     * @param _delegator address of the delegator\\n     */\\n    function getDelegatorLatestSDBalance(address _delegator) external view override returns (uint256) {\\n        uint256 latestExchangeRate = getLatestExchangeRate();\\n        return (latestExchangeRate * delegatorCTokenBalance[_delegator]) / DECIMAL;\\n    }\\n\\n    /**\\n     * @notice view function to get latest exchange rate\\n     */\\n    function getLatestExchangeRate() public view override returns (uint256) {\\n        uint256 currentBlockNumber = block.number;\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumber;\\n        uint256 simpleFeeFactor = utilizationRatePerBlock * blockDelta;\\n        uint256 feeAccumulated = (simpleFeeFactor * totalUtilizedSD) / DECIMAL;\\n        uint256 totalUtilizedSDNew = feeAccumulated + totalUtilizedSD;\\n        uint256 totalProtocolFeeNew = (protocolFee * feeAccumulated) / DECIMAL + accumulatedProtocolFee;\\n        if (cTokenTotalSupply == 0) {\\n            return DECIMAL;\\n        } else {\\n            uint256 poolBalancePlusUtilizedSDMinusReserves = getPoolAvailableSDBalance() +\\n                totalUtilizedSDNew -\\n                totalProtocolFeeNew;\\n            uint256 exchangeRate = (poolBalancePlusUtilizedSDMinusReserves * DECIMAL) / cTokenTotalSupply;\\n            return exchangeRate;\\n        }\\n    }\\n\\n    function getPoolAvailableSDBalance() public view override returns (uint256) {\\n        return IERC20(staderConfig.getStaderToken()).balanceOf(address(this)) - sdReservedForClaim;\\n    }\\n\\n    /// @notice Calculates the utilization of the utility pool\\n    function poolUtilization() public view override returns (uint256) {\\n        // Utilization is 0 when there are no utilized SD\\n        if (totalUtilizedSD == 0) {\\n            return 0;\\n        }\\n\\n        return (totalUtilizedSD * DECIMAL) / (getPoolAvailableSDBalance() + totalUtilizedSD - accumulatedProtocolFee);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the user data for a given account\\n     * @param account The address whose utilisation should be calculated\\n     * @return UserData struct containing the user data\\n     */\\n    function getUserData(address account) public view override returns (UserData memory) {\\n        uint256 totalInterestSD = getUtilizerLatestBalance(account) -\\n            ISDCollateral(staderConfig.getSDCollateral()).operatorUtilizedSDBalance(account);\\n        uint256 totalCollateralInEth = getOperatorTotalEth(account);\\n        uint256 totalCollateralInSD = ISDCollateral(staderConfig.getSDCollateral()).convertETHToSD(\\n            totalCollateralInEth\\n        );\\n\\n        uint256 healthFactor = (totalInterestSD == 0)\\n            ? type(uint256).max\\n            : (totalCollateralInSD * riskConfig.liquidationThreshold * DECIMAL) / (totalInterestSD * 100);\\n\\n        return\\n            UserData(\\n                totalInterestSD,\\n                totalCollateralInEth,\\n                healthFactor,\\n                liquidationIndexByOperator[account] == 0\\n                    ? 0\\n                    : liquidations[liquidationIndexByOperator[account] - 1].totalAmountInEth\\n            );\\n    }\\n\\n    /**\\n     * @notice\\n     * @param operator Calculates and returns the conservative estimate of the total Ether (ETH) bonded by a given operator\\n     *                 plus non claimed ETH from rewards collector.\\n     * @return totalEth The total ETH bonded by the operator\\n     */\\n    function getOperatorTotalEth(address operator) public view returns (uint256) {\\n        (, , uint256 nonTerminalKeys) = ISDCollateral(staderConfig.getSDCollateral()).getOperatorInfo(operator);\\n        uint256 nonClaimedEth = IOperatorRewardsCollector(staderConfig.getOperatorRewardsCollector()).getBalance(\\n            operator\\n        );\\n\\n        // The actual bonded ETH per non-terminal key is 4 ETH on the beacon chain.\\n        // However, for a conservative estimate in our calculations, we use conservativeEthPerKey (2 ETH).\\n        // This conservative approach accounts for potential slashing risks and withdrawal delays\\n        // associated with ETH staking on the beacon chain.\\n        return nonTerminalKeys * conservativeEthPerKey + nonClaimedEth;\\n    }\\n\\n    /// @notice Returns the liquidation data for a given operator\\n    ///         If the operator is not liquidated, the function returns an empty OperatorLiquidation struct\\n    function getOperatorLiquidation(address account) external view override returns (OperatorLiquidation memory) {\\n        if (liquidationIndexByOperator[account] == 0) return OperatorLiquidation(0, 0, 0, false, false, address(0));\\n        return liquidations[liquidationIndexByOperator[account] - 1];\\n    }\\n\\n    /// @notice Returns the liquidation threshold percent\\n    function getLiquidationThreshold() external view returns (uint256) {\\n        return (riskConfig.liquidationThreshold);\\n    }\\n\\n    /**\\n     * @dev Assumes fee has already been accrued up to the current block\\n     * @param sdAmount The amount of the SD token to delegate\\n     */\\n    function _delegate(uint256 sdAmount) internal {\\n        uint256 exchangeRate = _exchangeRateStored();\\n\\n        if (!IERC20(staderConfig.getStaderToken()).transferFrom(msg.sender, address(this), sdAmount)) {\\n            revert SDTransferFailed();\\n        }\\n        uint256 cTokenShares = (sdAmount * DECIMAL) / exchangeRate;\\n        delegatorCTokenBalance[msg.sender] += cTokenShares;\\n        cTokenTotalSupply += cTokenShares;\\n\\n        emit Delegated(msg.sender, sdAmount, cTokenShares);\\n    }\\n\\n    function _requestWithdraw(uint256 _sdAmountToWithdraw, uint256 cTokenToBurn) internal returns (uint256) {\\n        if (requestIdsByDelegatorAddress[msg.sender].length + 1 > maxNonRedeemedDelegatorRequestCount) {\\n            revert MaxLimitOnWithdrawRequestCountReached();\\n        }\\n        sdRequestedForWithdraw += _sdAmountToWithdraw;\\n        delegatorWithdrawRequests[nextRequestId] = DelegatorWithdrawInfo(\\n            msg.sender,\\n            cTokenToBurn,\\n            _sdAmountToWithdraw,\\n            0,\\n            block.number\\n        );\\n        requestIdsByDelegatorAddress[msg.sender].push(nextRequestId);\\n        emit WithdrawRequestReceived(msg.sender, nextRequestId, _sdAmountToWithdraw);\\n        nextRequestId++;\\n        return nextRequestId - 1;\\n    }\\n\\n    function _utilize(address utilizer, uint256 utilizeAmount) internal {\\n        if (liquidationIndexByOperator[utilizer] != 0) revert AlreadyLiquidated();\\n        UserData memory userData = getUserData(utilizer);\\n\\n        if (userData.healthFactor <= DECIMAL) {\\n            revert UnHealthyPosition();\\n        }\\n        if (getPoolAvailableSDBalance() < utilizeAmount + sdRequestedForWithdraw + accumulatedProtocolFee) {\\n            revert InsufficientPoolBalance();\\n        }\\n        uint256 accountUtilizedPrev = _utilizerBalanceStoredInternal(utilizer);\\n\\n        utilizerData[utilizer].principal = accountUtilizedPrev + utilizeAmount;\\n        utilizerData[utilizer].utilizeIndex = utilizeIndex;\\n        totalUtilizedSD += utilizeAmount;\\n        ISDCollateral(staderConfig.getSDCollateral()).depositSDFromUtilityPool(utilizer, utilizeAmount);\\n        emit SDUtilized(utilizer, utilizeAmount);\\n    }\\n\\n    function _repay(address utilizer, uint256 repayAmount)\\n        internal\\n        returns (uint256 repayAmountFinal, uint256 feePaid)\\n    {\\n        /* We fetch the amount the utilizer owes, with accumulated fee */\\n        uint256 accountUtilizedPrev = _utilizerBalanceStoredInternal(utilizer);\\n\\n        repayAmountFinal = (repayAmount == type(uint256).max || repayAmount > accountUtilizedPrev)\\n            ? accountUtilizedPrev\\n            : repayAmount;\\n\\n        if (!IERC20(staderConfig.getStaderToken()).transferFrom(msg.sender, address(this), repayAmountFinal)) {\\n            revert SDTransferFailed();\\n        }\\n        uint256 feeAccrued = accountUtilizedPrev -\\n            ISDCollateral(staderConfig.getSDCollateral()).operatorUtilizedSDBalance(utilizer);\\n        if (!staderConfig.onlyStaderContract(msg.sender, staderConfig.SD_COLLATERAL())) {\\n            if (repayAmountFinal > feeAccrued) {\\n                ISDCollateral(staderConfig.getSDCollateral()).reduceUtilizedSDPosition(\\n                    utilizer,\\n                    repayAmountFinal - feeAccrued\\n                );\\n            }\\n        }\\n        feePaid = Math.min(repayAmountFinal, feeAccrued);\\n        utilizerData[utilizer].principal = accountUtilizedPrev - repayAmountFinal;\\n        utilizerData[utilizer].utilizeIndex = utilizeIndex;\\n        totalUtilizedSD = totalUtilizedSD > repayAmountFinal ? totalUtilizedSD - repayAmountFinal : 0;\\n        emit Repaid(utilizer, repayAmountFinal);\\n    }\\n\\n    /**\\n     * @notice Return the utilized balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (calculated balance)\\n     */\\n    function _utilizerBalanceStoredInternal(address account) internal view returns (uint256) {\\n        /* Get utilizeBalance and utilizeIndex */\\n        UtilizerStruct storage utilizerSnapshot = utilizerData[account];\\n\\n        /* If utilizedBalance = 0 then utilizeIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (utilizerSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new utilized balance using the utilize index:\\n         *  currentUtilizedBalance = utilizer.principal * utilizeIndex / utilizer.utilizeIndex\\n         */\\n        return (utilizerSnapshot.principal * utilizeIndex) / utilizerSnapshot.utilizeIndex;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate between SD token and corresponding cToken\\n     * @dev This function does not accrue fee before calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function _exchangeRateStored() internal view virtual returns (uint256) {\\n        if (cTokenTotalSupply == 0) {\\n            /*\\n             * if cToken supply is zero:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return DECIMAL;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (poolAvailable SD + totalUtilizedSD - totalProtocolFee) / totalSupply\\n             */\\n            uint256 poolBalancePlusUtilizedSDMinusReserves = getPoolAvailableSDBalance() +\\n                totalUtilizedSD -\\n                accumulatedProtocolFee;\\n            uint256 exchangeRate = (poolBalancePlusUtilizedSDMinusReserves * DECIMAL) / cTokenTotalSupply;\\n\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /// delete entry from delegatorWithdrawRequests mapping and in requestIdsByDelegatorAddress mapping\\n    function _deleteRequestId(uint256 _requestId) internal {\\n        delete (delegatorWithdrawRequests[_requestId]);\\n        uint256 userRequestCount = requestIdsByDelegatorAddress[msg.sender].length;\\n        uint256[] storage requestIds = requestIdsByDelegatorAddress[msg.sender];\\n        for (uint256 i; i < userRequestCount; ) {\\n            if (_requestId == requestIds[i]) {\\n                requestIds[i] = requestIds[userRequestCount - 1];\\n                requestIds.pop();\\n                return;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        revert CannotFindRequestId();\\n    }\\n\\n    /// @notice Updates the risk configuration\\n    function _updateRiskConfig(\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonusPercent,\\n        uint256 liquidationFeePercent,\\n        uint256 ltv\\n    ) internal {\\n        if (liquidationThreshold > 100 || liquidationThreshold == 0) revert InvalidInput();\\n        if (liquidationBonusPercent > 100) revert InvalidInput();\\n        if (liquidationFeePercent > 100) revert InvalidInput();\\n        if (ltv > 100 || ltv == 0) revert InvalidInput();\\n\\n        riskConfig = RiskConfig({\\n            liquidationThreshold: liquidationThreshold,\\n            liquidationBonusPercent: liquidationBonusPercent,\\n            liquidationFeePercent: liquidationFeePercent,\\n            ltv: ltv\\n        });\\n        emit RiskConfigUpdated(liquidationThreshold, liquidationBonusPercent, liquidationFeePercent, ltv);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/UtilLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport '../interfaces/IStaderConfig.sol';\\nimport '../interfaces/INodeRegistry.sol';\\nimport '../interfaces/IPoolUtils.sol';\\nimport '../interfaces/IVaultProxy.sol';\\n\\nlibrary UtilLib {\\n    error ZeroAddress();\\n    error InvalidPubkeyLength();\\n    error CallerNotManager();\\n    error CallerNotOperator();\\n    error CallerNotStaderContract();\\n    error CallerNotWithdrawVault();\\n    error TransferFailed();\\n\\n    uint64 private constant VALIDATOR_PUBKEY_LENGTH = 48;\\n\\n    /// @notice zero address check modifier\\n    function checkNonZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) revert ZeroAddress();\\n    }\\n\\n    //checks for Manager role in staderConfig\\n    function onlyManagerRole(address _addr, IStaderConfig _staderConfig) internal view {\\n        if (!_staderConfig.onlyManagerRole(_addr)) {\\n            revert CallerNotManager();\\n        }\\n    }\\n\\n    function onlyOperatorRole(address _addr, IStaderConfig _staderConfig) internal view {\\n        if (!_staderConfig.onlyOperatorRole(_addr)) {\\n            revert CallerNotOperator();\\n        }\\n    }\\n\\n    //checks if caller is a stader contract address\\n    function onlyStaderContract(\\n        address _addr,\\n        IStaderConfig _staderConfig,\\n        bytes32 _contractName\\n    ) internal view {\\n        if (!_staderConfig.onlyStaderContract(_addr, _contractName)) {\\n            revert CallerNotStaderContract();\\n        }\\n    }\\n\\n    function getPubkeyForValidSender(\\n        uint8 _poolId,\\n        uint256 _validatorId,\\n        address _addr,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (bytes memory) {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, bytes memory pubkey, , , address withdrawVaultAddress, , , ) = INodeRegistry(nodeRegistry).validatorRegistry(\\n            _validatorId\\n        );\\n        if (_addr != withdrawVaultAddress) {\\n            revert CallerNotWithdrawVault();\\n        }\\n        return pubkey;\\n    }\\n\\n    function getOperatorForValidSender(\\n        uint8 _poolId,\\n        uint256 _validatorId,\\n        address _addr,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (address) {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, , , , address withdrawVaultAddress, uint256 operatorId, , ) = INodeRegistry(nodeRegistry).validatorRegistry(\\n            _validatorId\\n        );\\n        if (_addr != withdrawVaultAddress) {\\n            revert CallerNotWithdrawVault();\\n        }\\n        (, , , , address operator) = INodeRegistry(nodeRegistry).operatorStructById(operatorId);\\n        return operator;\\n    }\\n\\n    function onlyValidatorWithdrawVault(\\n        uint8 _poolId,\\n        uint256 _validatorId,\\n        address _addr,\\n        IStaderConfig _staderConfig\\n    ) internal view {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, , , , address withdrawVaultAddress, , , ) = INodeRegistry(nodeRegistry).validatorRegistry(_validatorId);\\n        if (_addr != withdrawVaultAddress) {\\n            revert CallerNotWithdrawVault();\\n        }\\n    }\\n\\n    function getOperatorAddressByValidatorId(\\n        uint8 _poolId,\\n        uint256 _validatorId,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (address) {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, , , , , uint256 operatorId, , ) = INodeRegistry(nodeRegistry).validatorRegistry(_validatorId);\\n        (, , , , address operatorAddress) = INodeRegistry(nodeRegistry).operatorStructById(operatorId);\\n\\n        return operatorAddress;\\n    }\\n\\n    function getOperatorAddressByOperatorId(\\n        uint8 _poolId,\\n        uint256 _operatorId,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (address) {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, , , , address operatorAddress) = INodeRegistry(nodeRegistry).operatorStructById(_operatorId);\\n\\n        return operatorAddress;\\n    }\\n\\n    function getOperatorRewardAddress(address _operator, IStaderConfig _staderConfig)\\n        internal\\n        view\\n        returns (address payable)\\n    {\\n        uint8 poolId = IPoolUtils(_staderConfig.getPoolUtils()).getOperatorPoolId(_operator);\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(poolId);\\n        uint256 operatorId = INodeRegistry(nodeRegistry).operatorIDByAddress(_operator);\\n        return INodeRegistry(nodeRegistry).getOperatorRewardAddress(operatorId);\\n    }\\n\\n    /**\\n     * @notice Computes the public key root.\\n     * @param _pubkey The validator public key for which to compute the root.\\n     * @return The root of the public key.\\n     */\\n    function getPubkeyRoot(bytes calldata _pubkey) internal pure returns (bytes32) {\\n        if (_pubkey.length != VALIDATOR_PUBKEY_LENGTH) {\\n            revert InvalidPubkeyLength();\\n        }\\n\\n        // Append 16 bytes of zero padding to the pubkey and compute its hash to get the pubkey root.\\n        return sha256(abi.encodePacked(_pubkey, bytes16(0)));\\n    }\\n\\n    function getValidatorSettleStatus(bytes calldata _pubkey, IStaderConfig _staderConfig)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint8 poolId = IPoolUtils(_staderConfig.getPoolUtils()).getValidatorPoolId(_pubkey);\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(poolId);\\n        uint256 validatorId = INodeRegistry(nodeRegistry).validatorIdByPubkey(_pubkey);\\n        (, , , , address withdrawVaultAddress, , , ) = INodeRegistry(nodeRegistry).validatorRegistry(validatorId);\\n        return IVaultProxy(withdrawVaultAddress).vaultSettleStatus();\\n    }\\n\\n    function computeExchangeRate(\\n        uint256 totalETHBalance,\\n        uint256 totalETHXSupply,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (uint256) {\\n        uint256 DECIMALS = _staderConfig.getDecimals();\\n        uint256 newExchangeRate = (totalETHBalance == 0 || totalETHXSupply == 0)\\n            ? DECIMALS\\n            : (totalETHBalance * DECIMALS) / totalETHXSupply;\\n        return newExchangeRate;\\n    }\\n\\n    function sendValue(address _receiver, uint256 _amount) internal {\\n        (bool success, ) = payable(_receiver).call{value: _amount}('');\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaderConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\ninterface IStaderConfig {\\n    // Errors\\n    error InvalidLimits();\\n    error InvalidMinDepositValue();\\n    error InvalidMaxDepositValue();\\n    error InvalidMinWithdrawValue();\\n    error InvalidMaxWithdrawValue();\\n    error IndenticalValue();\\n\\n    // Events\\n    event SetConstant(bytes32 key, uint256 amount);\\n    event SetVariable(bytes32 key, uint256 amount);\\n    event SetAccount(bytes32 key, address newAddress);\\n    event SetContract(bytes32 key, address newAddress);\\n    event SetToken(bytes32 key, address newAddress);\\n\\n    //Contracts\\n    function POOL_UTILS() external view returns (bytes32);\\n\\n    function POOL_SELECTOR() external view returns (bytes32);\\n\\n    function SD_COLLATERAL() external view returns (bytes32);\\n\\n    function OPERATOR_REWARD_COLLECTOR() external view returns (bytes32);\\n\\n    function VAULT_FACTORY() external view returns (bytes32);\\n\\n    function STADER_ORACLE() external view returns (bytes32);\\n\\n    function AUCTION_CONTRACT() external view returns (bytes32);\\n\\n    function PENALTY_CONTRACT() external view returns (bytes32);\\n\\n    function PERMISSIONED_POOL() external view returns (bytes32);\\n\\n    function STAKE_POOL_MANAGER() external view returns (bytes32);\\n\\n    function ETH_DEPOSIT_CONTRACT() external view returns (bytes32);\\n\\n    function PERMISSIONLESS_POOL() external view returns (bytes32);\\n\\n    function USER_WITHDRAW_MANAGER() external view returns (bytes32);\\n\\n    function STADER_INSURANCE_FUND() external view returns (bytes32);\\n\\n    function PERMISSIONED_NODE_REGISTRY() external view returns (bytes32);\\n\\n    function PERMISSIONLESS_NODE_REGISTRY() external view returns (bytes32);\\n\\n    function PERMISSIONED_SOCIALIZING_POOL() external view returns (bytes32);\\n\\n    function PERMISSIONLESS_SOCIALIZING_POOL() external view returns (bytes32);\\n\\n    function NODE_EL_REWARD_VAULT_IMPLEMENTATION() external view returns (bytes32);\\n\\n    function VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION() external view returns (bytes32);\\n\\n    //SD Utility Pool\\n\\n    function SD_UTILITY_POOL() external view returns (bytes32);\\n\\n    function SD_INCENTIVE_CONTROLLER() external view returns (bytes32);\\n\\n    //POR Feed Proxy\\n    function ETH_BALANCE_POR_FEED() external view returns (bytes32);\\n\\n    function ETHX_SUPPLY_POR_FEED() external view returns (bytes32);\\n\\n    //Roles\\n    function MANAGER() external view returns (bytes32);\\n\\n    function OPERATOR() external view returns (bytes32);\\n\\n    // Constants\\n    function getStakedEthPerNode() external view returns (uint256);\\n\\n    function getPreDepositSize() external view returns (uint256);\\n\\n    function getFullDepositSize() external view returns (uint256);\\n\\n    function getDecimals() external view returns (uint256);\\n\\n    function getTotalFee() external view returns (uint256);\\n\\n    function getOperatorMaxNameLength() external view returns (uint256);\\n\\n    // Variables\\n    function getSocializingPoolCycleDuration() external view returns (uint256);\\n\\n    function getSocializingPoolOptInCoolingPeriod() external view returns (uint256);\\n\\n    function getRewardsThreshold() external view returns (uint256);\\n\\n    function getMinDepositAmount() external view returns (uint256);\\n\\n    function getMaxDepositAmount() external view returns (uint256);\\n\\n    function getMinWithdrawAmount() external view returns (uint256);\\n\\n    function getMaxWithdrawAmount() external view returns (uint256);\\n\\n    function getMinBlockDelayToFinalizeWithdrawRequest() external view returns (uint256);\\n\\n    function getWithdrawnKeyBatchSize() external view returns (uint256);\\n\\n    // Accounts\\n    function getAdmin() external view returns (address);\\n\\n    function getStaderTreasury() external view returns (address);\\n\\n    // Contracts\\n    function getPoolUtils() external view returns (address);\\n\\n    function getPoolSelector() external view returns (address);\\n\\n    function getSDCollateral() external view returns (address);\\n\\n    function getOperatorRewardsCollector() external view returns (address);\\n\\n    function getVaultFactory() external view returns (address);\\n\\n    function getStaderOracle() external view returns (address);\\n\\n    function getAuctionContract() external view returns (address);\\n\\n    function getPenaltyContract() external view returns (address);\\n\\n    function getPermissionedPool() external view returns (address);\\n\\n    function getStakePoolManager() external view returns (address);\\n\\n    function getETHDepositContract() external view returns (address);\\n\\n    function getPermissionlessPool() external view returns (address);\\n\\n    function getUserWithdrawManager() external view returns (address);\\n\\n    function getStaderInsuranceFund() external view returns (address);\\n\\n    function getPermissionedNodeRegistry() external view returns (address);\\n\\n    function getPermissionlessNodeRegistry() external view returns (address);\\n\\n    function getPermissionedSocializingPool() external view returns (address);\\n\\n    function getPermissionlessSocializingPool() external view returns (address);\\n\\n    function getNodeELRewardVaultImplementation() external view returns (address);\\n\\n    function getValidatorWithdrawalVaultImplementation() external view returns (address);\\n\\n    function getETHBalancePORFeedProxy() external view returns (address);\\n\\n    function getETHXSupplyPORFeedProxy() external view returns (address);\\n\\n    function getSDUtilityPool() external view returns (address);\\n\\n    function getSDIncentiveController() external view returns (address);\\n\\n    // Tokens\\n    function getStaderToken() external view returns (address);\\n\\n    function getETHxToken() external view returns (address);\\n\\n    //checks roles and stader contracts\\n    function onlyStaderContract(address _addr, bytes32 _contractName) external view returns (bool);\\n\\n    function onlyManagerRole(address account) external view returns (bool);\\n\\n    function onlyOperatorRole(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISDIncentiveController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport './IStaderConfig.sol';\\n\\ninterface ISDIncentiveController {\\n    //errors\\n    error NoRewardsToClaim();\\n    error InvalidEmissionRate();\\n    error InvalidEndBlock();\\n    error InvalidRewardAmount();\\n    error ExistingRewardPeriod();\\n    error SDTransferFailed();\\n\\n    // events\\n    /// @dev Emitted when the Stader configuration contract is updated.\\n    /// @param staderConfig The new Stader configuration contract.\\n    event UpdatedStaderConfig(address staderConfig);\\n    /// @dev Emitted when the emission rate of rewards is updated.\\n    /// @param newEmissionRate The new emission rate that was set.\\n    event EmissionRateUpdated(uint256 newEmissionRate);\\n    /// @dev Emitted when a reward is claimed.\\n    /// @param user The user who claimed the reward.\\n    /// @param reward The amount of reward claimed.\\n    event RewardClaimed(address indexed user, uint256 reward);\\n    /// @dev Emitted when a reward is updated.\\n    /// @param user The user whose reward was updated.\\n    /// @param reward The new reward amount.\\n    event RewardUpdated(address indexed user, uint256 reward);\\n    /// @dev Emitted when the reward end block is updated.\\n    /// @param newRewardEndBlock The new reward end block that was set.\\n    event RewardEndBlockUpdated(uint256 newRewardEndBlock);\\n\\n    // functions\\n    function start(uint256 rewardAmount, uint256 duration) external;\\n\\n    function claim(address account) external;\\n\\n    function updateRewardForAccount(address account) external;\\n\\n    function updateStaderConfig(address _staderConfig) external;\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISDUtilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\n/**\\n * @dev Represents user's financial state in the system.\\n */\\nstruct UserData {\\n    uint256 totalInterestSD; // Total accrued SD interest for the user.\\n    uint256 totalCollateralInEth; // Total collateral in Eth for the user.\\n    uint256 healthFactor; // Numerical health factor for liquidation risk.\\n    uint256 lockedEth; // Amount of ETH locked for liquidation.\\n}\\n\\n/**\\n * @dev Details of a liquidation event for an operator.\\n */\\nstruct OperatorLiquidation {\\n    uint256 totalAmountInEth; // Total ETH involved in liquidation.\\n    uint256 totalBonusInEth; // Bonus ETH in liquidation.\\n    uint256 totalFeeInEth; // Fee ETH collected from liquidation.\\n    bool isRepaid; // Indicates if liquidation is repaid.\\n    bool isClaimed; // Indicates if liquidation is claimed.\\n    address liquidator; // Address of the liquidator.\\n}\\n\\ninterface ISDUtilityPool {\\n    error InvalidInput();\\n    error NotClaimable();\\n    error AlreadyClaimed();\\n    error NotLiquidator();\\n    error NotLiquidatable();\\n    error SDTransferFailed();\\n    error UnHealthyPosition();\\n    error CannotFindRequestId();\\n    error SDUtilizeLimitReached();\\n    error InvalidWithdrawAmount();\\n    error InvalidAmountOfWithdraw();\\n    error InsufficientPoolBalance();\\n    error CallerNotAuthorizedToRedeem();\\n    error OperatorUtilizedSDBalanceNonZero();\\n    error MaxLimitOnWithdrawRequestCountReached();\\n    error RequestIdNotFinalized(uint256 requestId);\\n    error AlreadyLiquidated();\\n\\n    event WithdrawnProtocolFee(uint256 amount);\\n    event ProtocolFeeFactorUpdated(uint256 protocolFeeFactor);\\n    event UpdatedStaderConfig(address indexed _staderConfig);\\n    event SDUtilized(address utilizer, uint256 utilizeAmount);\\n    event FinalizedWithdrawRequest(uint256 nextRequestIdToFinalize);\\n    event RequestRedeemed(address caller, uint256 sdToTransfer);\\n    event Repaid(address indexed utilizer, uint256 repayAmount);\\n    event UpdatedMaxNonRedeemedDelegatorRequestCount(uint256 count);\\n    event UpdatedFinalizationBatchLimit(uint256 finalizationBatchLimit);\\n    event UtilizationRatePerBlockUpdated(uint256 utilizationRatePerBlock);\\n    event ClearedUtilizerInterest(address indexed utilizer, uint256 sdInterest);\\n    event UpdatedMaxETHWorthOfSDPerValidator(uint256 maxETHWorthOfSDPerValidator);\\n    event Delegated(address indexed delegator, uint256 sdAmount, uint256 sdXToMint);\\n    event Redeemed(address indexed delegator, uint256 sdAmount, uint256 sdXAmount);\\n    event RepaidUtilizedSDBalance(address indexed utilizer, uint256 utilizedSDAmount);\\n    event UpdatedMinBlockDelayToFinalizeRequest(uint256 minBlockDelayToFinalizeRequest);\\n\\n    event LiquidationCall(\\n        address indexed account,\\n        uint256 totalLiquidationAmountInEth,\\n        uint256 liquidationBonusInEth,\\n        uint256 liquidationFeeInEth,\\n        address indexed liquidator\\n    );\\n    event CompleteLiquidation(uint256 indexed index);\\n    event RiskConfigUpdated(\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonusPercent,\\n        uint256 liquidationFeePercent,\\n        uint256 ltv\\n    );\\n    event AccruedFees(uint256 feeAccumulated, uint256 totalProtocolFee, uint256 totalUtilizedSD);\\n    event WithdrawRequestReceived(address caller, uint256 nextRequestId, uint256 sdAmountToWithdraw);\\n    event UpdatedConservativeEthPerKey(uint256 conservativeEthPerKey);\\n\\n    struct UtilizerStruct {\\n        uint256 principal;\\n        uint256 utilizeIndex;\\n    }\\n\\n    /// @notice structure representing a user request for withdrawal.\\n    struct DelegatorWithdrawInfo {\\n        address owner; // address that can claim on behalf of this request\\n        uint256 amountOfCToken; //amount of CToken to withdraw\\n        uint256 sdExpected; //sd requested at exchangeRate of withdraw\\n        uint256 sdFinalized; // final SD for claiming according to finalization exchange rate\\n        uint256 requestBlock; // block number of withdraw request\\n    }\\n\\n    /**\\n     * @dev Defines risk parameters for liquidations and loans.\\n     */\\n    struct RiskConfig {\\n        uint256 liquidationThreshold; // Threshold for liquidation (%).\\n        uint256 liquidationBonusPercent; // Bonus for liquidators (%).\\n        uint256 liquidationFeePercent; // Liquidation fee (%).\\n        uint256 ltv; // Loan-to-Value ratio (%).\\n    }\\n\\n    function delegate(uint256 sdAmount) external;\\n\\n    function requestWithdraw(uint256 cTokenAmount) external returns (uint256);\\n\\n    function requestWithdrawWithSDAmount(uint256 sdAmount) external returns (uint256);\\n\\n    function finalizeDelegatorWithdrawalRequest() external;\\n\\n    function claim(uint256 requestId) external;\\n\\n    function utilize(uint256 utilizeAmount) external;\\n\\n    function utilizeWhileAddingKeys(\\n        address operator,\\n        uint256 utilizeAmount,\\n        uint256 nonTerminalKeyCount\\n    ) external;\\n\\n    function repayFullAmount() external returns (uint256, uint256);\\n\\n    function repay(uint256 repayAmount) external returns (uint256, uint256);\\n\\n    function repayOnBehalf(address utilizer, uint256 repayAmount) external returns (uint256, uint256);\\n\\n    function completeLiquidation(address account) external;\\n\\n    function withdrawProtocolFee(uint256 _amount) external;\\n\\n    function accrueFee() external;\\n\\n    function liquidationCall(address account) external;\\n\\n    function clearUtilizerInterest(address[] calldata _utilizer) external;\\n\\n    function repayUtilizedSDBalance(address _utilizer, uint256 amount) external;\\n\\n    function utilizerBalanceCurrent(address account) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function maxApproveSD() external;\\n\\n    //Setters\\n\\n    function updateProtocolFee(uint256 _protocolFee) external;\\n\\n    function updateUtilizationRatePerBlock(uint256 _utilizationRatePerBlock) external;\\n\\n    function updateMaxETHWorthOfSDPerValidator(uint256 _maxETHWorthOfSDPerValidator) external;\\n\\n    function updateFinalizationBatchLimit(uint256 _finalizationBatchLimit) external;\\n\\n    function updateMinBlockDelayToFinalizeRequest(uint256 _minBlockDelayToFinalizeRequest) external;\\n\\n    function updateMaxNonRedeemedDelegatorRequestCount(uint256 _count) external;\\n\\n    function updateStaderConfig(address _staderConfig) external;\\n\\n    function updateConservativeEthPerKey(uint256 _newEthPerKey) external;\\n\\n    //Getters\\n    function maxETHWorthOfSDPerValidator() external view returns (uint256);\\n\\n    function cTokenTotalSupply() external view returns (uint256);\\n\\n    function totalUtilizedSD() external view returns (uint256);\\n\\n    function delegatorCTokenBalance(address) external view returns (uint256);\\n\\n    function delegatorWithdrawRequestedCTokenCount(address) external view returns (uint256);\\n\\n    function liquidationIndexByOperator(address) external view returns (uint256);\\n\\n    function getPoolAvailableSDBalance() external view returns (uint256);\\n\\n    function sdRequestedForWithdraw() external view returns (uint256);\\n\\n    function accumulatedProtocolFee() external view returns (uint256);\\n\\n    function utilizerBalanceStored(address account) external view returns (uint256);\\n\\n    function getDelegationRatePerBlock() external view returns (uint256);\\n\\n    function utilizationRatePerBlock() external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function poolUtilization() external view returns (uint256);\\n\\n    function getUtilizerLatestBalance(address _utilizer) external view returns (uint256);\\n\\n    function getDelegatorLatestSDBalance(address _delegator) external view returns (uint256);\\n\\n    function getLatestExchangeRate() external view returns (uint256);\\n\\n    function utilizerData(address) external view returns (uint256 principal, uint256 utilizeIndex);\\n\\n    function getOperatorLiquidation(address) external view returns (OperatorLiquidation memory);\\n\\n    function delegatorWithdrawRequests(uint256)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint256 amountOfCToken,\\n            uint256 sdExpected,\\n            uint256 sdFinalized,\\n            uint256 requestBlock\\n        );\\n\\n    function requestIdsByDelegatorAddress(address, uint256) external view returns (uint256);\\n\\n    function getRequestIdsByDelegator(address _owner) external view returns (uint256[] memory);\\n\\n    function getLiquidationThreshold() external view returns (uint256);\\n\\n    function getUserData(address account) external view returns (UserData memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/SDCollateral/ISDCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport '../IStaderConfig.sol';\\n\\ninterface ISDCollateral {\\n    struct PoolThresholdInfo {\\n        uint256 minThreshold;\\n        uint256 maxThreshold;\\n        uint256 withdrawThreshold;\\n        string units;\\n    }\\n\\n    // errors\\n    error InsufficientSDToWithdraw(uint256 operatorSDCollateral);\\n    error InvalidPoolId();\\n    error InvalidPoolLimit();\\n    error SDTransferFailed();\\n    error NoStateChange();\\n    error NonTerminalKeysNotZero();\\n    error InsufficientSelfBondToRepay();\\n\\n    // events\\n    event SDRepaid(address operator, uint256 repayAmount);\\n    event UpdatedStaderConfig(address indexed staderConfig);\\n    event SDDeposited(address indexed operator, uint256 sdAmount);\\n    event UtilizedSDDeposited(address indexed operator, uint256 sdAmount);\\n    event SDWithdrawn(address indexed operator, uint256 sdAmount);\\n    event ReducedUtilizedPosition(address indexed operator, uint256 sdAmount);\\n    event UtilizedSDSlashed(address operator, uint256 sdSlashFromUtilized);\\n    event SDSlashed(address indexed operator, address indexed auction, uint256 sdSlashed);\\n    event UpdatedPoolThreshold(uint8 poolId, uint256 minThreshold, uint256 withdrawThreshold);\\n    event UpdatedPoolIdForOperator(uint8 poolId, address operator);\\n\\n    // methods\\n    function depositSDAsCollateral(uint256 _sdAmount) external;\\n\\n    function depositSDAsCollateralOnBehalf(address _operator, uint256 _sdAmount) external;\\n\\n    function depositSDFromUtilityPool(address _operator, uint256 _sdAmount) external;\\n\\n    function reduceUtilizedSDPosition(address operator, uint256 amount) external;\\n\\n    function withdraw(uint256 _requestedSD) external;\\n\\n    function withdrawOnBehalf(uint256 _requestedSD, address _operator) external;\\n\\n    function transferBackUtilizedSD(address _operator) external;\\n\\n    function slashValidatorSD(uint256 _validatorId, uint8 _poolId) external;\\n\\n    function maxApproveSD() external;\\n\\n    // setters\\n    function updateStaderConfig(address _staderConfig) external;\\n\\n    function updatePoolThreshold(\\n        uint8 _poolId,\\n        uint256 _minThreshold,\\n        uint256 _maxThreshold,\\n        uint256 _withdrawThreshold,\\n        string memory _units\\n    ) external;\\n\\n    // getters\\n    function staderConfig() external view returns (IStaderConfig);\\n\\n    function operatorSDBalance(address) external view returns (uint256);\\n\\n    function operatorUtilizedSDBalance(address) external view returns (uint256);\\n\\n    function getOperatorWithdrawThreshold(address _operator) external view returns (uint256 operatorWithdrawThreshold);\\n\\n    function hasEnoughSDCollateral(\\n        address _operator,\\n        uint8 _poolId,\\n        uint256 _numValidators\\n    ) external view returns (bool);\\n\\n    function getMinimumSDToBond(uint8 _poolId, uint256 _numValidator) external view returns (uint256 _minSDToBond);\\n\\n    function getRemainingSDToBond(\\n        address _operator,\\n        uint8 _poolId,\\n        uint256 _numValidator\\n    ) external view returns (uint256);\\n\\n    function getRewardEligibleSD(address _operator) external view returns (uint256 _rewardEligibleSD);\\n\\n    function convertSDToETH(uint256 _sdAmount) external view returns (uint256);\\n\\n    function convertETHToSD(uint256 _ethAmount) external view returns (uint256);\\n\\n    function getOperatorInfo(address _operator)\\n        external\\n        view\\n        returns (\\n            uint8 _poolId,\\n            uint256 _operatorId,\\n            uint256 _validatorCount\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport './INodeRegistry.sol';\\n\\n// Interface for the PoolUtils contract\\ninterface IPoolUtils {\\n    // Errors\\n    error EmptyNameString();\\n    error PoolIdNotPresent();\\n    error MismatchingPoolId();\\n    error PubkeyDoesNotExit();\\n    error PubkeyAlreadyExist();\\n    error NameCrossedMaxLength();\\n    error InvalidLengthOfPubkey();\\n    error OperatorIsNotOnboarded();\\n    error InvalidLengthOfSignature();\\n    error ExistingOrMismatchingPoolId();\\n\\n    // Events\\n    event PoolAdded(uint8 indexed poolId, address poolAddress);\\n    event PoolAddressUpdated(uint8 indexed poolId, address poolAddress);\\n    event DeactivatedPool(uint8 indexed poolId, address poolAddress);\\n    event UpdatedStaderConfig(address staderConfig);\\n    event ExitValidator(bytes pubkey);\\n    event ExitOperator(address indexed operator, uint256 totalAmount);\\n\\n    // returns the details of a specific pool\\n    function poolAddressById(uint8) external view returns (address poolAddress);\\n\\n    function poolIdArray(uint256) external view returns (uint8);\\n\\n    function getPoolIdArray() external view returns (uint8[] memory);\\n\\n    // Pool functions\\n    function addNewPool(uint8 _poolId, address _poolAddress) external;\\n\\n    function updatePoolAddress(uint8 _poolId, address _poolAddress) external;\\n\\n    function processValidatorExitList(bytes[] calldata _pubkeys) external;\\n\\n    function processOperatorExit(address _operator, uint256 totalAmount) external;\\n\\n    function getOperatorTotalNonTerminalKeys(\\n        uint8 _poolId,\\n        address _nodeOperator,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) external view returns (uint256);\\n\\n    function getSocializingPoolAddress(uint8 _poolId) external view returns (address);\\n\\n    // Pool getters\\n    function getProtocolFee(uint8 _poolId) external view returns (uint256); // returns the protocol fee (0-10000)\\n\\n    function getOperatorFee(uint8 _poolId) external view returns (uint256); // returns the operator fee (0-10000)\\n\\n    function getTotalActiveValidatorCount() external view returns (uint256); //returns total active validators across all pools\\n\\n    function getActiveValidatorCountByPool(uint8 _poolId) external view returns (uint256); // returns the total number of active validators in a specific pool\\n\\n    function getQueuedValidatorCountByPool(uint8 _poolId) external view returns (uint256); // returns the total number of queued validators in a specific pool\\n\\n    function getCollateralETH(uint8 _poolId) external view returns (uint256);\\n\\n    function getNodeRegistry(uint8 _poolId) external view returns (address);\\n\\n    // check for duplicate pubkey across all pools\\n    function isExistingPubkey(bytes calldata _pubkey) external view returns (bool);\\n\\n    // check for duplicate operator across all pools\\n    function isExistingOperator(address _operAddr) external view returns (bool);\\n\\n    function isExistingPoolId(uint8 _poolId) external view returns (bool);\\n\\n    function getOperatorPoolId(address _operAddr) external view returns (uint8);\\n\\n    function getValidatorPoolId(bytes calldata _pubkey) external view returns (uint8);\\n\\n    function onlyValidName(string calldata _name) external;\\n\\n    function onlyValidKeys(\\n        bytes calldata _pubkey,\\n        bytes calldata _preDepositSignature,\\n        bytes calldata _depositSignature\\n    ) external;\\n\\n    function calculateRewardShare(uint8 _poolId, uint256 _totalRewards)\\n        external\\n        view\\n        returns (\\n            uint256 userShare,\\n            uint256 operatorShare,\\n            uint256 protocolShare\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperatorRewardsCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\ninterface IOperatorRewardsCollector {\\n    //errors\\n    error InsufficientBalance();\\n    error WethTransferFailed();\\n    // events\\n    event UpdatedStaderConfig(address indexed staderConfig);\\n    event Claimed(address indexed receiver, uint256 amount);\\n    event DepositedFor(address indexed sender, address indexed receiver, uint256 amount);\\n    event UpdatedWethAddress(address indexed weth);\\n\\n    // methods\\n\\n    function depositFor(address _receiver) external payable;\\n\\n    function claim() external;\\n\\n    function claimLiquidation(address operator) external;\\n\\n    function withdrawableInEth(address operator) external view returns (uint256);\\n\\n    function getBalance(address operator) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INodeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport '../library/ValidatorStatus.sol';\\n\\nstruct Validator {\\n    ValidatorStatus status; // status of validator\\n    bytes pubkey; //pubkey of the validator\\n    bytes preDepositSignature; //signature for 1 ETH deposit on beacon chain\\n    bytes depositSignature; //signature for 31 ETH deposit on beacon chain\\n    address withdrawVaultAddress; //withdrawal vault address of validator\\n    uint256 operatorId; // stader network assigned Id\\n    uint256 depositBlock; // block number of the 31ETH deposit\\n    uint256 withdrawnBlock; //block number when oracle report validator as withdrawn\\n}\\n\\nstruct Operator {\\n    bool active; // operator status\\n    bool optedForSocializingPool; // operator opted for socializing pool\\n    string operatorName; // name of the operator\\n    address payable operatorRewardAddress; //Eth1 address of node for reward\\n    address operatorAddress; //address of operator to interact with stader\\n}\\n\\n// Interface for the NodeRegistry contract\\ninterface INodeRegistry {\\n    // Errors\\n    error DuplicatePoolIDOrPoolNotAdded();\\n    error OperatorAlreadyOnBoardedInProtocol();\\n    error maxKeyLimitReached();\\n    error OperatorNotOnBoarded();\\n    error InvalidKeyCount();\\n    error InvalidStartAndEndIndex();\\n    error OperatorIsDeactivate();\\n    error MisMatchingInputKeysSize();\\n    error PageNumberIsZero();\\n    error UNEXPECTED_STATUS();\\n    error PubkeyAlreadyExist();\\n    error NotEnoughSDCollateral();\\n    error TooManyVerifiedKeysReported();\\n    error TooManyWithdrawnKeysReported();\\n    error CallerNotExistingRewardAddress();\\n    error CallerNotNewRewardAddress();\\n\\n    // Events\\n    event AddedValidatorKey(address indexed nodeOperator, bytes pubkey, uint256 validatorId);\\n    event ValidatorMarkedAsFrontRunned(bytes pubkey, uint256 validatorId);\\n    event ValidatorWithdrawn(bytes pubkey, uint256 validatorId);\\n    event ValidatorStatusMarkedAsInvalidSignature(bytes pubkey, uint256 validatorId);\\n    event UpdatedValidatorDepositBlock(uint256 validatorId, uint256 depositBlock);\\n    event UpdatedMaxNonTerminalKeyPerOperator(uint64 maxNonTerminalKeyPerOperator);\\n    event UpdatedInputKeyCountLimit(uint256 batchKeyDepositLimit);\\n    event UpdatedStaderConfig(address staderConfig);\\n    event RewardAddressProposed(address indexed nodeOperator, address indexed rewardAddress);\\n    event OperatorRewardAddressUpdated(address indexed nodeOperator, address indexed rewardAddress);\\n    event UpdatedOperatorName(address indexed nodeOperator, string operatorName);\\n    event IncreasedTotalActiveValidatorCount(uint256 totalActiveValidatorCount);\\n    event UpdatedVerifiedKeyBatchSize(uint256 verifiedKeysBatchSize);\\n    event UpdatedWithdrawnKeyBatchSize(uint256 withdrawnKeysBatchSize);\\n    event DecreasedTotalActiveValidatorCount(uint256 totalActiveValidatorCount);\\n\\n    function withdrawnValidators(bytes[] calldata _pubkeys) external;\\n\\n    function markValidatorReadyToDeposit(\\n        bytes[] calldata _readyToDepositPubkey,\\n        bytes[] calldata _frontRunPubkey,\\n        bytes[] calldata _invalidSignaturePubkey\\n    ) external;\\n\\n    // return validator struct for a validator Id\\n    function validatorRegistry(uint256)\\n        external\\n        view\\n        returns (\\n            ValidatorStatus status,\\n            bytes calldata pubkey,\\n            bytes calldata preDepositSignature,\\n            bytes calldata depositSignature,\\n            address withdrawVaultAddress,\\n            uint256 operatorId,\\n            uint256 depositTime,\\n            uint256 withdrawnTime\\n        );\\n\\n    // returns the operator struct given operator Id\\n    function operatorStructById(uint256)\\n        external\\n        view\\n        returns (\\n            bool active,\\n            bool optedForSocializingPool,\\n            string calldata operatorName,\\n            address payable operatorRewardAddress,\\n            address operatorAddress\\n        );\\n\\n    // Returns the last block the operator changed the opt-in status for socializing pool\\n    function getSocializingPoolStateChangeBlock(uint256 _operatorId) external view returns (uint256);\\n\\n    function getAllActiveValidators(uint256 _pageNumber, uint256 _pageSize) external view returns (Validator[] memory);\\n\\n    function getValidatorsByOperator(\\n        address _operator,\\n        uint256 _pageNumber,\\n        uint256 _pageSize\\n    ) external view returns (Validator[] memory);\\n\\n    /**\\n     *\\n     * @param _nodeOperator @notice operator total non withdrawn keys within a specified validator list\\n     * @param _startIndex start index in validator queue to start with\\n     * @param _endIndex  up to end index of validator queue to to count\\n     */\\n    function getOperatorTotalNonTerminalKeys(\\n        address _nodeOperator,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) external view returns (uint64);\\n\\n    // returns the total number of queued validators across all operators\\n    function getTotalQueuedValidatorCount() external view returns (uint256);\\n\\n    // returns the total number of active validators across all operators\\n    function getTotalActiveValidatorCount() external view returns (uint256);\\n\\n    function getCollateralETH() external view returns (uint256);\\n\\n    function getOperatorTotalKeys(uint256 _operatorId) external view returns (uint256 totalKeys);\\n\\n    function operatorIDByAddress(address) external view returns (uint256);\\n\\n    function getOperatorRewardAddress(uint256 _operatorId) external view returns (address payable);\\n\\n    function isExistingPubkey(bytes calldata _pubkey) external view returns (bool);\\n\\n    function isExistingOperator(address _operAddr) external view returns (bool);\\n\\n    function POOL_ID() external view returns (uint8);\\n\\n    function inputKeyCountLimit() external view returns (uint16);\\n\\n    function nextOperatorId() external view returns (uint256);\\n\\n    function nextValidatorId() external view returns (uint256);\\n\\n    function maxNonTerminalKeyPerOperator() external view returns (uint64);\\n\\n    function verifiedKeyBatchSize() external view returns (uint256);\\n\\n    function totalActiveValidatorCount() external view returns (uint256);\\n\\n    function validatorIdByPubkey(bytes calldata _pubkey) external view returns (uint256);\\n\\n    function validatorIdsByOperatorId(uint256, uint256) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport './IStaderConfig.sol';\\n\\ninterface IVaultProxy {\\n    error CallerNotOwner();\\n    error AlreadyInitialized();\\n    event UpdatedOwner(address owner);\\n    event UpdatedStaderConfig(address staderConfig);\\n\\n    //Getters\\n    function vaultSettleStatus() external view returns (bool);\\n\\n    function isValidatorWithdrawalVault() external view returns (bool);\\n\\n    function isInitialized() external view returns (bool);\\n\\n    function poolId() external view returns (uint8);\\n\\n    function id() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function staderConfig() external view returns (IStaderConfig);\\n\\n    //Setters\\n    function updateOwner() external;\\n\\n    function updateStaderConfig(address _staderConfig) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/library/ValidatorStatus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nenum ValidatorStatus {\\n    INITIALIZED,\\n    INVALID_SIGNATURE,\\n    FRONT_RUN,\\n    PRE_DEPOSIT,\\n    DEPOSITED,\\n    WITHDRAWN\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyLiquidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotAuthorizedToRedeem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotStaderContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotFindRequestId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPoolBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmountOfWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLimitOnWithdrawRequestCountReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotClaimable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLiquidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorUtilizedSDBalanceNonZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestIdNotFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SDTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SDUtilizeLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnHealthyPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalProtocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUtilizedSD\",\"type\":\"uint256\"}],\"name\":\"AccruedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"utilizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sdInterest\",\"type\":\"uint256\"}],\"name\":\"ClearedUtilizerInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CompleteLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sdXToMint\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextRequestIdToFinalize\",\"type\":\"uint256\"}],\"name\":\"FinalizedWithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLiquidationAmountInEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationBonusInEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFeeInEth\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeFactor\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sdXAmount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"utilizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"utilizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utilizedSDAmount\",\"type\":\"uint256\"}],\"name\":\"RepaidUtilizedSDBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sdToTransfer\",\"type\":\"uint256\"}],\"name\":\"RequestRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationBonusPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"RiskConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"utilizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utilizeAmount\",\"type\":\"uint256\"}],\"name\":\"SDUtilized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conservativeEthPerKey\",\"type\":\"uint256\"}],\"name\":\"UpdatedConservativeEthPerKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalizationBatchLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedFinalizationBatchLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxETHWorthOfSDPerValidator\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxETHWorthOfSDPerValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxNonRedeemedDelegatorRequestCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBlockDelayToFinalizeRequest\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinBlockDelayToFinalizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staderConfig\",\"type\":\"address\"}],\"name\":\"UpdatedStaderConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utilizationRatePerBlock\",\"type\":\"uint256\"}],\"name\":\"UtilizationRatePerBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sdAmountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequestReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnProtocolFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UTILIZATION_RATE_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SD_DELEGATE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SD_WITHDRAW_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_utilizer\",\"type\":\"address[]\"}],\"name\":\"clearUtilizerInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"completeLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conservativeEthPerKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sdAmount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatorCTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatorWithdrawRequestedCTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegatorWithdrawRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfCToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sdExpected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sdFinalized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizationBatchLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeDelegatorWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDelegationRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"getDelegatorLatestSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOperatorLiquidation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonusInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeInEth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRepaid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"internalType\":\"struct OperatorLiquidation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorTotalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAvailableSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"getRequestIdsByDelegator\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalInterestSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedEth\",\"type\":\"uint256\"}],\"internalType\":\"struct UserData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_utilizer\",\"type\":\"address\"}],\"name\":\"getUtilizerLatestBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staderConfig\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationIndexByOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonusInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeInEth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRepaid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApproveSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxETHWorthOfSDPerValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNonRedeemedDelegatorRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBlockDelayToFinalizeRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRequestIdToFinalize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repaidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayFullAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repaidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"utilizer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repaidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_utilizer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayUtilizedSDBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdsByDelegatorAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cTokenAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sdAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawWithSDAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonusPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdRequestedForWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdReservedForClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staderConfig\",\"outputs\":[{\"internalType\":\"contract IStaderConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUtilizedSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEthPerKey\",\"type\":\"uint256\"}],\"name\":\"updateConservativeEthPerKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalizationBatchLimit\",\"type\":\"uint256\"}],\"name\":\"updateFinalizationBatchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxETHWorthOfSDPerValidator\",\"type\":\"uint256\"}],\"name\":\"updateMaxETHWorthOfSDPerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"updateMaxNonRedeemedDelegatorRequestCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBlockDelayToFinalizeRequest\",\"type\":\"uint256\"}],\"name\":\"updateMinBlockDelayToFinalizeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"updateProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonusPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"updateRiskConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staderConfig\",\"type\":\"address\"}],\"name\":\"updateStaderConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_utilizationRatePerBlock\",\"type\":\"uint256\"}],\"name\":\"updateUtilizationRatePerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"utilizeAmount\",\"type\":\"uint256\"}],\"name\":\"utilize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"utilizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonTerminalKeyCount\",\"type\":\"uint256\"}],\"name\":\"utilizeWhileAddingKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"utilizerBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"utilizerBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"utilizerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizeIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SDUtilityPool", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}