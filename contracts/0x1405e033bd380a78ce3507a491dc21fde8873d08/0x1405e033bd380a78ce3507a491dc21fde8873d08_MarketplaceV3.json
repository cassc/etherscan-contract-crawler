{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/eip/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../lib/TWAddress.sol\\\";\\nimport \\\"./interface/IMulticall.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ncontract Multicall is IMulticall {\\n    /**\\n     *  @notice Receives and executes a batch of function calls on this contract.\\n     *  @dev Receives and executes a batch of function calls on this contract.\\n     *\\n     *  @param data The bytes data that makes up the batch of function calls to execute.\\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\\n     */\\n    function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = TWAddress.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *  for you contract.\\n *\\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\ninterface IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /// @dev Emitted when the contract URI is updated.\\n    event ContractURIUpdated(string prevURI, string newURI);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ninterface IMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IPermissions {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPermissionsEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./IPermissions.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IPermissionsEnumerable is IPermissions {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * [forum post](https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296)\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPlatformFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `PlatformFee` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of platform fee and the platform fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about platform fees, if desired.\\n */\\n\\ninterface IPlatformFee {\\n    /// @dev Fee type variants: percentage fee and flat fee\\n    enum PlatformFeeType {\\n        Bps,\\n        Flat\\n    }\\n\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getPlatformFeeInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the fees on primary sales.\\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) external;\\n\\n    /// @dev Emitted when fee on primary sales is updated.\\n    event PlatformFeeInfoUpdated(address indexed platformFeeRecipient, uint256 platformFeeBps);\\n\\n    /// @dev Emitted when the flat platform fee is updated.\\n    event FlatPlatformFeeUpdated(address platformFeeRecipient, uint256 flatFee);\\n\\n    /// @dev Emitted when the platform fee type is updated.\\n    event PlatformFeeTypeUpdated(PlatformFeeType feeType);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external view returns (address payable[] memory recipients, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IRoyaltyPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Read royalty info for a token.\\n *      Supports RoyaltyEngineV1 and RoyaltyRegistry by manifold.xyz.\\n */\\ninterface IRoyaltyPayments is IERC165 {\\n    /// @dev Emitted when the address of RoyaltyEngine is set or updated.\\n    event RoyaltyEngineUpdated(address indexed previousAddress, address indexed newAddress);\\n\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * Set or override RoyaltyEngine address\\n     *\\n     * @param _royaltyEngineAddress - RoyaltyEngineV1 address\\n     */\\n    function setRoyaltyEngine(address _royaltyEngineAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/plugin/IPluginMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\ninterface IPluginMap {\\n    /**\\n     *  @notice An interface to describe a plug-in.\\n     *\\n     *  @param functionSelector     4-byte function selector.\\n     *  @param functionSignature    Function representation as a string. E.g. \\\"transfer(address,address,uint256)\\\"\\n     *  @param pluginAddress        Address of the contract containing the function.\\n     */\\n    struct Plugin {\\n        bytes4 functionSelector;\\n        string functionSignature;\\n        address pluginAddress;\\n    }\\n\\n    /// @dev Emitted when a function selector is mapped to a particular plug-in smart contract, during construction of Map.\\n    event PluginSet(bytes4 indexed functionSelector, string indexed functionSignature, address indexed pluginAddress);\\n\\n    /// @dev Returns the plug-in contract for a given function.\\n    function getPluginForFunction(bytes4 functionSelector) external view returns (address);\\n\\n    /// @dev Returns all functions that are mapped to the given plug-in contract.\\n    function getAllFunctionsOfPlugin(address pluginAddress) external view returns (bytes4[] memory);\\n\\n    /// @dev Returns all plug-ins known by Map.\\n    function getAllPlugins() external view returns (Plugin[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/plugin/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\nimport \\\"./IPluginMap.sol\\\";\\n\\ninterface IRouter is IPluginMap {\\n    /// @dev Emitted when a functionality is added, or plugged-in.\\n    event PluginAdded(bytes4 indexed functionSelector, address indexed pluginAddress);\\n\\n    /// @dev Emitted when a functionality is updated or overridden.\\n    event PluginUpdated(\\n        bytes4 indexed functionSelector,\\n        address indexed oldPluginAddress,\\n        address indexed newPluginAddress\\n    );\\n\\n    /// @dev Emitted when a functionality is removed.\\n    event PluginRemoved(bytes4 indexed functionSelector, address indexed pluginAddress);\\n\\n    /// @dev Add a new plugin to the contract.\\n    function addPlugin(Plugin memory plugin) external;\\n\\n    /// @dev Update / override an existing plugin.\\n    function updatePlugin(Plugin memory plugin) external;\\n\\n    /// @dev Remove an existing plugin from the contract.\\n    function removePlugin(bytes4 functionSelector) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/ContractMetadataLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./ContractMetadataStorage.sol\\\";\\nimport \\\"../../extension/interface/IContractMetadata.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   Contract Metadata\\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *           for you contract.\\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\nabstract contract ContractMetadataLogic is IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() public view returns (string memory) {\\n        ContractMetadataStorage.Data storage data = ContractMetadataStorage.contractMetadataStorage();\\n        return data.contractURI;\\n    }\\n\\n    /**\\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\\n     *                  See {_canSetContractURI}.\\n     *                  Emits {ContractURIUpdated Event}.\\n     *\\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function setContractURI(string memory _uri) external override {\\n        if (!_canSetContractURI()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupContractURI(_uri);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        ContractMetadataStorage.Data storage data = ContractMetadataStorage.contractMetadataStorage();\\n        string memory prevURI = data.contractURI;\\n        data.contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/ContractMetadataStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  @author  thirdweb.com\\n */\\nlibrary ContractMetadataStorage {\\n    bytes32 public constant CONTRACT_METADATA_STORAGE_POSITION = keccak256(\\\"contract.metadata.storage\\\");\\n\\n    struct Data {\\n        string contractURI;\\n    }\\n\\n    function contractMetadataStorage() internal pure returns (Data storage contractMetadataData) {\\n        bytes32 position = CONTRACT_METADATA_STORAGE_POSITION;\\n        assembly {\\n            contractMetadataData.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/ERC2771ContextStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nlibrary ERC2771ContextStorage {\\n    bytes32 public constant ERC2771_CONTEXT_STORAGE_POSITION = keccak256(\\\"erc2771.context.storage\\\");\\n\\n    struct Data {\\n        mapping(address => bool) _trustedForwarder;\\n    }\\n\\n    function erc2771ContextStorage() internal pure returns (Data storage erc2771ContextData) {\\n        bytes32 position = ERC2771_CONTEXT_STORAGE_POSITION;\\n        assembly {\\n            erc2771ContextData.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/ERC2771ContextUpgradeableLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./ERC2771ContextStorage.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeableLogic {\\n    function __ERC2771Context_init(address[] memory trustedForwarder) internal {\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address[] memory trustedForwarder) internal {\\n        ERC2771ContextStorage.Data storage data = ERC2771ContextStorage.erc2771ContextStorage();\\n\\n        for (uint256 i = 0; i < trustedForwarder.length; i++) {\\n            data._trustedForwarder[trustedForwarder[i]] = true;\\n        }\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        ERC2771ContextStorage.Data storage data = ERC2771ContextStorage.erc2771ContextStorage();\\n        return data._trustedForwarder[forwarder];\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/PermissionsEnumerableLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./PermissionsEnumerableStorage.sol\\\";\\nimport \\\"./PermissionsLogic.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   PermissionsEnumerable\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms.\\n *           Also provides interfaces to view all members with a given role, and total count of members.\\n */\\ncontract PermissionsEnumerableLogic is IPermissionsEnumerable, PermissionsLogic {\\n    /**\\n     *  @notice         Returns the role-member from a list of members for a role,\\n     *                  at a given index.\\n     *  @dev            Returns `member` who has `role`, at `index` of role-members list.\\n     *                  See struct {RoleMembers}, and mapping {roleMembers}\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param index    Index in list of current members for the role.\\n     *\\n     *  @return member  Address of account that has `role`\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view override returns (address member) {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 currentIndex = data.roleMembers[role].index;\\n        uint256 check;\\n\\n        for (uint256 i = 0; i < currentIndex; i += 1) {\\n            if (data.roleMembers[role].members[i] != address(0)) {\\n                if (check == index) {\\n                    member = data.roleMembers[role].members[i];\\n                    return member;\\n                }\\n                check += 1;\\n            } else if (hasRole(role, address(0)) && i == data.roleMembers[role].indexOf[address(0)]) {\\n                check += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice         Returns total number of accounts that have a role.\\n     *  @dev            Returns `count` of accounts that have `role`.\\n     *                  See struct {RoleMembers}, and mapping {roleMembers}\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *\\n     *  @return count   Total number of accounts that have `role`\\n     */\\n    function getRoleMemberCount(bytes32 role) external view override returns (uint256 count) {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 currentIndex = data.roleMembers[role].index;\\n\\n        for (uint256 i = 0; i < currentIndex; i += 1) {\\n            if (data.roleMembers[role].members[i] != address(0)) {\\n                count += 1;\\n            }\\n        }\\n        if (hasRole(role, address(0))) {\\n            count += 1;\\n        }\\n    }\\n\\n    /// @dev Revokes `role` from `account`, and removes `account` from {roleMembers}\\n    ///      See {_removeMember}\\n    function _revokeRole(bytes32 role, address account) internal override {\\n        super._revokeRole(role, account);\\n        _removeMember(role, account);\\n    }\\n\\n    /// @dev Grants `role` to `account`, and adds `account` to {roleMembers}\\n    ///      See {_addMember}\\n    function _setupRole(bytes32 role, address account) internal override {\\n        super._setupRole(role, account);\\n        _addMember(role, account);\\n    }\\n\\n    /// @dev adds `account` to {roleMembers}, for `role`\\n    function _addMember(bytes32 role, address account) internal {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 idx = data.roleMembers[role].index;\\n        data.roleMembers[role].index += 1;\\n\\n        data.roleMembers[role].members[idx] = account;\\n        data.roleMembers[role].indexOf[account] = idx;\\n    }\\n\\n    /// @dev removes `account` from {roleMembers}, for `role`\\n    function _removeMember(bytes32 role, address account) internal {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 idx = data.roleMembers[role].indexOf[account];\\n\\n        delete data.roleMembers[role].members[idx];\\n        delete data.roleMembers[role].indexOf[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/PermissionsEnumerableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IPermissionsEnumerable.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n */\\nlibrary PermissionsEnumerableStorage {\\n    bytes32 public constant PERMISSIONS_ENUMERABLE_STORAGE_POSITION = keccak256(\\\"permissions.enumerable.storage\\\");\\n\\n    /**\\n     *  @notice A data structure to store data of members for a given role.\\n     *\\n     *  @param index    Current index in the list of accounts that have a role.\\n     *  @param members  map from index => address of account that has a role\\n     *  @param indexOf  map from address => index which the account has.\\n     */\\n    struct RoleMembers {\\n        uint256 index;\\n        mapping(uint256 => address) members;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    struct Data {\\n        /// @dev map from keccak256 hash of a role to its members' data. See {RoleMembers}.\\n        mapping(bytes32 => RoleMembers) roleMembers;\\n    }\\n\\n    function permissionsEnumerableStorage() internal pure returns (Data storage permissionsEnumerableData) {\\n        bytes32 position = PERMISSIONS_ENUMERABLE_STORAGE_POSITION;\\n        assembly {\\n            permissionsEnumerableData.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/PermissionsLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IPermissions.sol\\\";\\nimport \\\"./PermissionsStorage.sol\\\";\\nimport \\\"../../lib/TWStrings.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   Permissions\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms\\n */\\ncontract PermissionsLogic is IPermissions {\\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev Modifier that checks if an account has the specified role; reverts otherwise.\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role.\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        return data._hasRole[role][account];\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role;\\n     *                  role restrictions can be swtiched on and off.\\n     *\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *                  Role restrictions can be swtiched on and off:\\n     *                      - If address(0) has ROLE, then the ROLE restrictions\\n     *                        don't apply.\\n     *                      - If address(0) does not have ROLE, then the ROLE\\n     *                        restrictions will apply.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRoleWithSwitch(bytes32 role, address account) public view returns (bool) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        if (!data._hasRole[role][address(0)]) {\\n            return data._hasRole[role][account];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice         Returns the admin role that controls the specified role.\\n     *  @dev            See {grantRole} and {revokeRole}.\\n     *                  To change a role's admin, use {_setRoleAdmin}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        return data._getRoleAdmin[role];\\n    }\\n\\n    /**\\n     *  @notice         Grants a role to an account, if not previously granted.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleGranted Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account to which the role is being granted.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(data._getRoleAdmin[role], _msgSender());\\n        if (data._hasRole[role][account]) {\\n            revert(\\\"Can only grant to non holders\\\");\\n        }\\n        _setupRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from an account.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(data._getRoleAdmin[role], _msgSender());\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from the account.\\n     *  @dev            Caller must have the `role`, with caller being the same as `account`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        if (_msgSender() != account) {\\n            revert(\\\"Can only renounce for self\\\");\\n        }\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @dev Sets `adminRole` as `role`'s admin role.\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        bytes32 previousAdminRole = data._getRoleAdmin[role];\\n        data._getRoleAdmin[role] = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        data._hasRole[role][account] = true;\\n        emit RoleGranted(role, account, _msgSender());\\n    }\\n\\n    /// @dev Revokes `role` from `account`\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(role, account);\\n        delete data._hasRole[role][account];\\n        emit RoleRevoked(role, account, _msgSender());\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        if (!data._hasRole[role][account]) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRoleWithSwitch(bytes32 role, address account) internal view virtual {\\n        if (!hasRoleWithSwitch(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/PermissionsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  @author  thirdweb.com\\n */\\nlibrary PermissionsStorage {\\n    bytes32 public constant PERMISSIONS_STORAGE_POSITION = keccak256(\\\"permissions.storage\\\");\\n\\n    struct Data {\\n        /// @dev Map from keccak256 hash of a role => a map from address => whether address has role.\\n        mapping(bytes32 => mapping(address => bool)) _hasRole;\\n        /// @dev Map from keccak256 hash of a role to role admin. See {getRoleAdmin}.\\n        mapping(bytes32 => bytes32) _getRoleAdmin;\\n    }\\n\\n    function permissionsStorage() internal pure returns (Data storage permissionsData) {\\n        bytes32 position = PERMISSIONS_STORAGE_POSITION;\\n        assembly {\\n            permissionsData.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/PlatformFeeLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./PlatformFeeStorage.sol\\\";\\nimport \\\"../../extension/interface/IPlatformFee.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   Platform Fee\\n *  @notice  Thirdweb's `PlatformFee` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of platform fee and the platform fee basis points, and lets the inheriting contract perform conditional logic\\n *           that uses information about platform fees, if desired.\\n */\\n\\nabstract contract PlatformFeeLogic is IPlatformFee {\\n    /// @dev Returns the platform fee recipient and bps.\\n    function getPlatformFeeInfo() public view override returns (address, uint16) {\\n        PlatformFeeStorage.Data storage data = PlatformFeeStorage.platformFeeStorage();\\n        return (data.platformFeeRecipient, uint16(data.platformFeeBps));\\n    }\\n\\n    /**\\n     *  @notice         Updates the platform fee recipient and bps.\\n     *  @dev            Caller should be authorized to set platform fee info.\\n     *                  See {_canSetPlatformFeeInfo}.\\n     *                  Emits {PlatformFeeInfoUpdated Event}; See {_setupPlatformFeeInfo}.\\n     *\\n     *  @param _platformFeeRecipient   Address to be set as new platformFeeRecipient.\\n     *  @param _platformFeeBps         Updated platformFeeBps.\\n     */\\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) external override {\\n        if (!_canSetPlatformFeeInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupPlatformFeeInfo(_platformFeeRecipient, _platformFeeBps);\\n    }\\n\\n    /// @dev Lets a contract admin update the platform fee recipient and bps\\n    function _setupPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) internal {\\n        PlatformFeeStorage.Data storage data = PlatformFeeStorage.platformFeeStorage();\\n        if (_platformFeeBps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        data.platformFeeBps = uint16(_platformFeeBps);\\n        data.platformFeeRecipient = _platformFeeRecipient;\\n\\n        emit PlatformFeeInfoUpdated(_platformFeeRecipient, _platformFeeBps);\\n    }\\n\\n    /// @dev Returns whether platform fee info can be set in the given execution context.\\n    function _canSetPlatformFeeInfo() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/PlatformFeeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  @author  thirdweb.com\\n */\\nlibrary PlatformFeeStorage {\\n    bytes32 public constant PLATFORM_FEE_STORAGE_POSITION = keccak256(\\\"platform.fee.storage\\\");\\n\\n    struct Data {\\n        /// @dev The address that receives all platform fees from all sales.\\n        address platformFeeRecipient;\\n        /// @dev The % of primary sales collected as platform fees.\\n        uint16 platformFeeBps;\\n    }\\n\\n    function platformFeeStorage() internal pure returns (Data storage platformFeeData) {\\n        bytes32 position = PLATFORM_FEE_STORAGE_POSITION;\\n        assembly {\\n            platformFeeData.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/ReentrancyGuardLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./ReentrancyGuardStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardLogic {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    function __ReentrancyGuard_init() internal {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal {\\n        ReentrancyGuardStorage.Data storage data = ReentrancyGuardStorage.reentrancyGuardStorage();\\n        data._status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        ReentrancyGuardStorage.Data storage data = ReentrancyGuardStorage.reentrancyGuardStorage();\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(data._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        data._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        data._status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/ReentrancyGuardStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nlibrary ReentrancyGuardStorage {\\n    bytes32 public constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"reentrancy.guard.storage\\\");\\n\\n    struct Data {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (Data storage reentrancyGuardData) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            reentrancyGuardData.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../interface/plugin/IRouter.sol\\\";\\nimport \\\"../../extension/Multicall.sol\\\";\\nimport \\\"../../eip/ERC165.sol\\\";\\nimport \\\"../../openzeppelin-presets/utils/EnumerableSet.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n */\\nlibrary RouterStorage {\\n    bytes32 public constant ROUTER_STORAGE_POSITION = keccak256(\\\"router.storage\\\");\\n\\n    struct Data {\\n        EnumerableSet.Bytes32Set allSelectors;\\n        mapping(address => EnumerableSet.Bytes32Set) selectorsForPlugin;\\n        mapping(bytes4 => IPluginMap.Plugin) pluginForSelector;\\n    }\\n\\n    function routerStorage() internal pure returns (Data storage routerData) {\\n        bytes32 position = ROUTER_STORAGE_POSITION;\\n        assembly {\\n            routerData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract Router is Multicall, ERC165, IRouter {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public immutable pluginMap;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Constructor + initializer logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _pluginMap) {\\n        pluginMap = _pluginMap;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                ERC 165\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IRouter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Generic contract logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    fallback() external payable virtual {\\n        address _pluginAddress = _getPluginForFunction(msg.sig);\\n        if (_pluginAddress == address(0)) {\\n            _pluginAddress = IPluginMap(pluginMap).getPluginForFunction(msg.sig);\\n        }\\n        _delegate(_pluginAddress);\\n    }\\n\\n    receive() external payable {}\\n\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        External functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Add functionality to the contract.\\n    function addPlugin(Plugin memory _plugin) external {\\n        require(_canSetPlugin(), \\\"Router: Not authorized\\\");\\n\\n        _addPlugin(_plugin);\\n    }\\n\\n    /// @dev Update or override existing functionality.\\n    function updatePlugin(Plugin memory _plugin) external {\\n        require(_canSetPlugin(), \\\"Map: Not authorized\\\");\\n\\n        _updatePlugin(_plugin);\\n    }\\n\\n    /// @dev Remove existing functionality from the contract.\\n    function removePlugin(bytes4 _selector) external {\\n        require(_canSetPlugin(), \\\"Map: Not authorized\\\");\\n\\n        _removePlugin(_selector);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev View address of the plugged-in functionality contract for a given function signature.\\n    function getPluginForFunction(bytes4 _selector) public view returns (address) {\\n        address pluginAddress = _getPluginForFunction(_selector);\\n\\n        return pluginAddress != address(0) ? pluginAddress : IPluginMap(pluginMap).getPluginForFunction(_selector);\\n    }\\n\\n    /// @dev View all funtionality as list of function signatures.\\n    function getAllFunctionsOfPlugin(address _pluginAddress) external view returns (bytes4[] memory registered) {\\n        RouterStorage.Data storage data = RouterStorage.routerStorage();\\n\\n        EnumerableSet.Bytes32Set storage selectorsForPlugin = data.selectorsForPlugin[_pluginAddress];\\n        bytes4[] memory defaultSelectors = IPluginMap(pluginMap).getAllFunctionsOfPlugin(_pluginAddress);\\n\\n        uint256 len = defaultSelectors.length;\\n        uint256 count = selectorsForPlugin.length() + defaultSelectors.length;\\n\\n        for (uint256 i = 0; i < len; i += 1) {\\n            if (selectorsForPlugin.contains(defaultSelectors[i])) {\\n                count -= 1;\\n                defaultSelectors[i] = bytes4(0);\\n            }\\n        }\\n\\n        registered = new bytes4[](count);\\n        uint256 index;\\n\\n        for (uint256 i = 0; i < len; i += 1) {\\n            if (defaultSelectors[i] != bytes4(0)) {\\n                registered[index++] = defaultSelectors[i];\\n            }\\n        }\\n\\n        len = selectorsForPlugin.length();\\n        for (uint256 i = 0; i < len; i += 1) {\\n            registered[index++] = bytes4(data.selectorsForPlugin[_pluginAddress].at(i));\\n        }\\n    }\\n\\n    /// @dev View all funtionality existing on the contract.\\n    function getAllPlugins() external view returns (Plugin[] memory registered) {\\n        RouterStorage.Data storage data = RouterStorage.routerStorage();\\n\\n        EnumerableSet.Bytes32Set storage overrideSelectors = data.allSelectors;\\n        Plugin[] memory defaultPlugins = IPluginMap(pluginMap).getAllPlugins();\\n\\n        uint256 overrideSelectorsLen = overrideSelectors.length();\\n        uint256 defaultPluginsLen = defaultPlugins.length;\\n\\n        uint256 totalCount = overrideSelectorsLen + defaultPluginsLen;\\n\\n        for (uint256 i = 0; i < overrideSelectorsLen; i += 1) {\\n            for (uint256 j = 0; j < defaultPluginsLen; j += 1) {\\n                if (bytes4(overrideSelectors.at(i)) == defaultPlugins[j].functionSelector) {\\n                    totalCount -= 1;\\n                    defaultPlugins[j].functionSelector = bytes4(0);\\n                }\\n            }\\n        }\\n\\n        registered = new Plugin[](totalCount);\\n        uint256 index;\\n\\n        for (uint256 i = 0; i < defaultPluginsLen; i += 1) {\\n            if (defaultPlugins[i].functionSelector != bytes4(0)) {\\n                registered[index] = defaultPlugins[i];\\n                index += 1;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < overrideSelectorsLen; i += 1) {\\n            registered[index] = data.pluginForSelector[bytes4(overrideSelectors.at(i))];\\n            index += 1;\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev View address of the plugged-in functionality contract for a given function signature.\\n    function _getPluginForFunction(bytes4 _selector) public view returns (address) {\\n        RouterStorage.Data storage data = RouterStorage.routerStorage();\\n        address _pluginAddress = data.pluginForSelector[_selector].pluginAddress;\\n\\n        return _pluginAddress;\\n    }\\n\\n    /// @dev Add functionality to the contract.\\n    function _addPlugin(Plugin memory _plugin) internal {\\n        RouterStorage.Data storage data = RouterStorage.routerStorage();\\n\\n        // Revert: default plugin exists for function; use updatePlugin instead.\\n        try IPluginMap(pluginMap).getPluginForFunction(_plugin.functionSelector) returns (address) {\\n            revert(\\\"Router: default plugin exists for function.\\\");\\n        } catch {\\n            require(data.allSelectors.add(bytes32(_plugin.functionSelector)), \\\"Router: plugin exists for function.\\\");\\n        }\\n\\n        require(\\n            _plugin.functionSelector == bytes4(keccak256(abi.encodePacked(_plugin.functionSignature))),\\n            \\\"Router: fn selector and signature mismatch.\\\"\\n        );\\n\\n        data.pluginForSelector[_plugin.functionSelector] = _plugin;\\n        data.selectorsForPlugin[_plugin.pluginAddress].add(bytes32(_plugin.functionSelector));\\n\\n        emit PluginAdded(_plugin.functionSelector, _plugin.pluginAddress);\\n    }\\n\\n    /// @dev Update or override existing functionality.\\n    function _updatePlugin(Plugin memory _plugin) internal {\\n        address currentPlugin = getPluginForFunction(_plugin.functionSelector);\\n        require(\\n            _plugin.functionSelector == bytes4(keccak256(abi.encodePacked(_plugin.functionSignature))),\\n            \\\"Router: fn selector and signature mismatch.\\\"\\n        );\\n\\n        RouterStorage.Data storage data = RouterStorage.routerStorage();\\n        data.allSelectors.add(bytes32(_plugin.functionSelector));\\n        data.pluginForSelector[_plugin.functionSelector] = _plugin;\\n        data.selectorsForPlugin[currentPlugin].remove(bytes32(_plugin.functionSelector));\\n        data.selectorsForPlugin[_plugin.pluginAddress].add(bytes32(_plugin.functionSelector));\\n\\n        emit PluginUpdated(_plugin.functionSelector, currentPlugin, _plugin.pluginAddress);\\n    }\\n\\n    /// @dev Remove existing functionality from the contract.\\n    function _removePlugin(bytes4 _selector) internal {\\n        RouterStorage.Data storage data = RouterStorage.routerStorage();\\n        address currentPlugin = _getPluginForFunction(_selector);\\n        require(currentPlugin != address(0), \\\"Router: No plugin available for selector\\\");\\n\\n        delete data.pluginForSelector[_selector];\\n        data.allSelectors.remove(_selector);\\n        data.selectorsForPlugin[currentPlugin].remove(bytes32(_selector));\\n\\n        emit PluginRemoved(_selector, currentPlugin);\\n    }\\n\\n    function _canSetPlugin() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/RouterImmutable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./Router.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n */\\ncontract RouterImmutable is Router {\\n    /*///////////////////////////////////////////////////////////////\\n                    Constructor + initializer logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _pluginMap) Router(_pluginMap) {}\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns whether plug-in can be set in the given execution context.\\n    function _canSetPlugin() internal pure override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/plugin/RoyaltyPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../interface/IRoyaltyPayments.sol\\\";\\nimport \\\"../interface/IRoyaltyEngineV1.sol\\\";\\nimport { IERC2981 } from \\\"../../eip/interface/IERC2981.sol\\\";\\n\\nlibrary RoyaltyPaymentsStorage {\\n    bytes32 public constant ROYALTY_PAYMENTS_STORAGE_POSITION = keccak256(\\\"royalty.payments.storage\\\");\\n\\n    struct Data {\\n        /// @dev The address of RoyaltyEngineV1, replacing the one set during construction.\\n        address royaltyEngineAddressOverride;\\n    }\\n\\n    function royaltyPaymentsStorage() internal pure returns (Data storage royaltyPaymentsData) {\\n        bytes32 position = ROYALTY_PAYMENTS_STORAGE_POSITION;\\n        assembly {\\n            royaltyPaymentsData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   Royalty Payments\\n *  @notice  Thirdweb's `RoyaltyPayments` is a contract extension to be used with a marketplace contract.\\n *           It exposes functions for fetching royalty settings for a token.\\n *           It Supports RoyaltyEngineV1 and RoyaltyRegistry by manifold.xyz.\\n */\\n\\nabstract contract RoyaltyPaymentsLogic is IRoyaltyPayments {\\n    // solhint-disable-next-line var-name-mixedcase\\n    address immutable ROYALTY_ENGINE_ADDRESS;\\n\\n    constructor(address _royaltyEngineAddress) {\\n        // allow address(0) in case RoyaltyEngineV1 not present on a network\\n        require(\\n            _royaltyEngineAddress == address(0) ||\\n                IERC165(_royaltyEngineAddress).supportsInterface(type(IRoyaltyEngineV1).interfaceId),\\n            \\\"Doesn't support IRoyaltyEngineV1 interface\\\"\\n        );\\n\\n        ROYALTY_ENGINE_ADDRESS = _royaltyEngineAddress;\\n    }\\n\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    ) external returns (address payable[] memory recipients, uint256[] memory amounts) {\\n        address royaltyEngineAddress = getRoyaltyEngineAddress();\\n\\n        if (royaltyEngineAddress == address(0)) {\\n            try IERC2981(tokenAddress).royaltyInfo(tokenId, value) returns (address recipient, uint256 amount) {\\n                require(amount < value, \\\"Invalid royalty amount\\\");\\n\\n                recipients = new address payable[](1);\\n                amounts = new uint256[](1);\\n                recipients[0] = payable(recipient);\\n                amounts[0] = amount;\\n            } catch {}\\n        } else {\\n            (recipients, amounts) = IRoyaltyEngineV1(royaltyEngineAddress).getRoyalty(tokenAddress, tokenId, value);\\n        }\\n    }\\n\\n    /**\\n     * Set or override RoyaltyEngine address\\n     *\\n     * @param _royaltyEngineAddress - RoyaltyEngineV1 address\\n     */\\n    function setRoyaltyEngine(address _royaltyEngineAddress) external {\\n        if (!_canSetRoyaltyEngine()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        require(\\n            _royaltyEngineAddress != address(0) &&\\n                IERC165(_royaltyEngineAddress).supportsInterface(type(IRoyaltyEngineV1).interfaceId),\\n            \\\"Doesn't support IRoyaltyEngineV1 interface\\\"\\n        );\\n\\n        _setupRoyaltyEngine(_royaltyEngineAddress);\\n    }\\n\\n    /// @dev Returns original or overridden address for RoyaltyEngineV1\\n    function getRoyaltyEngineAddress() public view returns (address royaltyEngineAddress) {\\n        RoyaltyPaymentsStorage.Data storage data = RoyaltyPaymentsStorage.royaltyPaymentsStorage();\\n        address royaltyEngineOverride = data.royaltyEngineAddressOverride;\\n        royaltyEngineAddress = royaltyEngineOverride != address(0) ? royaltyEngineOverride : ROYALTY_ENGINE_ADDRESS;\\n    }\\n\\n    /// @dev Lets a contract admin update the royalty engine address\\n    function _setupRoyaltyEngine(address _royaltyEngineAddress) internal {\\n        RoyaltyPaymentsStorage.Data storage data = RoyaltyPaymentsStorage.royaltyPaymentsStorage();\\n        address currentAddress = data.royaltyEngineAddressOverride;\\n\\n        data.royaltyEngineAddressOverride = _royaltyEngineAddress;\\n\\n        emit RoyaltyEngineUpdated(currentAddress, _royaltyEngineAddress);\\n    }\\n\\n    /// @dev Returns whether royalty engine address can be set in the given execution context.\\n    function _canSetRoyaltyEngine() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TWAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary TWAddress {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TWStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary TWStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/entrypoint/InitStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\n/**\\n * @author  thirdweb.com\\n */\\nlibrary InitStorage {\\n    /// @dev The location of the storage of the entrypoint contract's data.\\n    bytes32 constant INIT_STORAGE_POSITION = keccak256(\\\"init.storage\\\");\\n\\n    /// @dev Layout of the entrypoint contract's storage.\\n    struct Data {\\n        bool initialized;\\n    }\\n\\n    /// @dev Returns the entrypoint contract's data at the relevant storage location.\\n    function initStorage() internal pure returns (Data storage initData) {\\n        bytes32 position = INIT_STORAGE_POSITION;\\n        assembly {\\n            initData.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/entrypoint/MarketplaceV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n//   $$\\\\     $$\\\\       $$\\\\                 $$\\\\                         $$\\\\\\n//   $$ |    $$ |      \\\\__|                $$ |                        $$ |\\n// $$$$$$\\\\   $$$$$$$\\\\  $$\\\\  $$$$$$\\\\   $$$$$$$ |$$\\\\  $$\\\\  $$\\\\  $$$$$$\\\\  $$$$$$$\\\\\\n// \\\\_$$  _|  $$  __$$\\\\ $$ |$$  __$$\\\\ $$  __$$ |$$ | $$ | $$ |$$  __$$\\\\ $$  __$$\\\\\\n//   $$ |    $$ |  $$ |$$ |$$ |  \\\\__|$$ /  $$ |$$ | $$ | $$ |$$$$$$$$ |$$ |  $$ |\\n//   $$ |$$\\\\ $$ |  $$ |$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$   ____|$$ |  $$ |\\n//   \\\\$$$$  |$$ |  $$ |$$ |$$ |      \\\\$$$$$$$ |\\\\$$$$$\\\\$$$$  |\\\\$$$$$$$\\\\ $$$$$$$  |\\n//    \\\\____/ \\\\__|  \\\\__|\\\\__|\\\\__|       \\\\_______| \\\\_____\\\\____/  \\\\_______|\\\\_______/\\n\\n// ====== External imports ======\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n//  ==========  Internal imports    ==========\\nimport \\\"./InitStorage.sol\\\";\\nimport { RouterImmutable, Router } from \\\"../../extension/plugin/RouterImmutable.sol\\\";\\n\\nimport \\\"../../extension/plugin/ContractMetadataLogic.sol\\\";\\nimport \\\"../../extension/plugin/PlatformFeeLogic.sol\\\";\\nimport \\\"../../extension/plugin/PermissionsEnumerableLogic.sol\\\";\\nimport \\\"../../extension/plugin/ReentrancyGuardLogic.sol\\\";\\nimport \\\"../../extension/plugin/ERC2771ContextUpgradeableLogic.sol\\\";\\nimport { RoyaltyPaymentsLogic } from \\\"../../extension/plugin/RoyaltyPayments.sol\\\";\\n\\n/**\\n * @author  thirdweb.com\\n */\\ncontract MarketplaceV3 is\\n    ContractMetadataLogic,\\n    PlatformFeeLogic,\\n    PermissionsEnumerableLogic,\\n    ReentrancyGuardLogic,\\n    ERC2771ContextUpgradeableLogic,\\n    RoyaltyPaymentsLogic,\\n    RouterImmutable,\\n    IERC721Receiver,\\n    IERC1155Receiver\\n{\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 private constant MODULE_TYPE = bytes32(\\\"MarketplaceV3\\\");\\n    uint256 private constant VERSION = 1;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Constructor + initializer logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _pluginMap, address _royaltyEngineAddress)\\n        RouterImmutable(_pluginMap)\\n        RoyaltyPaymentsLogic(_royaltyEngineAddress)\\n    {}\\n\\n    /// @dev Initiliazes the contract, like a constructor.\\n    function initialize(\\n        address _defaultAdmin,\\n        string memory _contractURI,\\n        address[] memory _trustedForwarders,\\n        address _platformFeeRecipient,\\n        uint16 _platformFeeBps\\n    ) external {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n\\n        require(!data.initialized, \\\"Already initialized.\\\");\\n        data.initialized = true;\\n\\n        // Initialize inherited contracts, most base-like -> most derived.\\n        __ReentrancyGuard_init();\\n        __ERC2771Context_init(_trustedForwarders);\\n\\n        // Initialize this contract's state.\\n        _setupContractURI(_contractURI);\\n        _setupPlatformFeeInfo(_platformFeeRecipient, _platformFeeBps);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _setupRole(keccak256(\\\"LISTER_ROLE\\\"), address(0));\\n        _setupRole(keccak256(\\\"ASSET_ROLE\\\"), address(0));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Generic contract logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns the type of the contract.\\n    function contractType() external pure returns (bytes32) {\\n        return MODULE_TYPE;\\n    }\\n\\n    /// @dev Returns the version of the contract.\\n    function contractVersion() external pure returns (uint8) {\\n        return uint8(VERSION);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        ERC 165 / 721 / 1155 logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(Router, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Overridable Permissions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Checks whether platform fee info can be set in the given execution context.\\n    function _canSetPlatformFeeInfo() internal view override returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /// @dev Checks whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view override returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /// @dev Returns whether royalty engine address can be set in the given execution context.\\n    function _canSetRoyaltyEngine() internal view override returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ERC2771ContextUpgradeableLogic, PermissionsLogic)\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        override(ERC2771ContextUpgradeableLogic, PermissionsLogic)\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin-presets/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [\r\n      \":@chainlink/=lib/chainlink/\",\r\n      \":@ds-test/=lib/ds-test/src/\",\r\n      \":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \":@std/=lib/forge-std/src/\",\r\n      \":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \":ERC721A/=lib/ERC721A/contracts/\",\r\n      \":chainlink/=lib/chainlink/\",\r\n      \":contracts/=contracts/\",\r\n      \":ds-test/=lib/ds-test/src/\",\r\n      \":dynamic-contracts/=lib/dynamic-contracts/src/\",\r\n      \":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\r\n      \":erc721a/=lib/ERC721A/\",\r\n      \":forge-std/=lib/forge-std/src/\",\r\n      \":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \":openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pluginMap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyEngineAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flatFee\",\"type\":\"uint256\"}],\"name\":\"FlatPlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IPlatformFee.PlatformFeeType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"PlatformFeeTypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"}],\"name\":\"PluginAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"}],\"name\":\"PluginRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"}],\"name\":\"PluginSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPluginAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPluginAddress\",\"type\":\"address\"}],\"name\":\"PluginUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RoyaltyEngineUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"_getPluginForFunction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"}],\"internalType\":\"struct IPluginMap.Plugin\",\"name\":\"_plugin\",\"type\":\"tuple\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pluginAddress\",\"type\":\"address\"}],\"name\":\"getAllFunctionsOfPlugin\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"registered\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPlugins\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"}],\"internalType\":\"struct IPluginMap.Plugin[]\",\"name\":\"registered\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"getPluginForFunction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getRoyalty\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyEngineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"royaltyEngineAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRoleWithSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_trustedForwarders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_platformFeeBps\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pluginMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeeBps\",\"type\":\"uint256\"}],\"name\":\"setPlatformFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyEngineAddress\",\"type\":\"address\"}],\"name\":\"setRoyaltyEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"}],\"internalType\":\"struct IPluginMap.Plugin\",\"name\":\"_plugin\",\"type\":\"tuple\"}],\"name\":\"updatePlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MarketplaceV3", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "0000000000000000000000001d873887da1afb4694e7d94f2e8305bff6c707fe0000000000000000000000000385603ab55642cb4dd5de3ae9e306809991804f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}